
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 41 02 c0       	mov    eax,0xc0024144
c0000025:	3d 44 41 02 c0       	cmp    eax,0xc0024144
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 41 02 c0       	push   0xc0024144
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 41 02 c0       	mov    eax,0xc0024144
c0000051:	2d 44 41 02 c0       	sub    eax,0xc0024144
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 41 02 c0       	push   0xc0024144
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 8c 03 02 c0       	mov    ebx,0xc002038c
c0000097:	81 eb 88 03 02 c0    	sub    ebx,0xc0020388
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 88 03 02 c0       	mov    esi,0xc0020388
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 41 02 c0       	push   0xc0024144
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 44 41 02 c0       	push   0xc0024144
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 8b 55 01 00       	call   c0015838 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 69 55 01 00       	call   c0015838 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 76 5a 01 00       	call   c0015d64 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 11 61 01 00       	call   c0016408 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 83 11 01 00       	jmp    c0011502 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 a0 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfc60],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 a0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc60],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 a0 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc60],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 a0 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc60],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 a0 03 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfc60],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 a0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc60],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 a4 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfb5c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 fa 7b 01 00       	jmp    c00199d4 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 24 7c 01 00       	jmp    c0019a14 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 45 7c 01 00       	jmp    c0019a54 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 00 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfa00]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 00 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfa00]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 64 2d 02 c0       	mov    edx,0xc0022d64
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba bc 04 02 c0       	mov    edx,0xc00204bc
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 c2 04 02 c0       	mov    eax,0xc00204c2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 80 05 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfa80]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 cb 04 02 c0       	mov    eax,0xc00204cb
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 00 06 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdfa00]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 50 05 02 c0       	mov    eax,0xc0020550
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 40 05 02 c0       	mov    ebx,0xc0020540
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 20 05 02 c0       	mov    eax,0xc0020520
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 30 05 02 c0       	mov    eax,0xc0020530
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba d2 04 02 c0       	mov    edx,0xc00204d2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba de 04 02 c0       	mov    edx,0xc00204de
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba f2 04 02 c0       	mov    edx,0xc00204f2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 20 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020920
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 20 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020920
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 20 07 02 c0       	mov    eax,0xc0020720
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 60 06 02 c0       	mov    eax,0xc0020660
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 20 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf9e0]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 20 0a 02 c0       	push   0xc0020a20
c0006147:	e8 2c 42 01 00       	call   c001a378 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 2e 0a 02 c0       	push   0xc0020a2e
c000617f:	e8 f4 41 01 00       	call   c001a378 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 5d 41 01 00       	call   c001a31c <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 3d 0a 02 c0       	push   0xc0020a3d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 40 0a 02 c0       	push   0xc0020a40
c000682f:	e8 44 3b 01 00       	call   c001a378 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 52 3b 01 00       	call   c001a394 <iso_kprintfd>
c0006842:	c7 04 24 45 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a45
c0006849:	e8 2a 3b 01 00       	call   c001a378 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 3a 3b 01 00       	call   c001a394 <iso_kprintfd>
c000685a:	c7 04 24 4b 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a4b
c0006861:	e8 12 3b 01 00       	call   c001a378 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 22 3b 01 00       	call   c001a394 <iso_kprintfd>
c0006872:	c7 04 24 51 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a51
c0006879:	e8 fa 3a 01 00       	call   c001a378 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 0a 3b 01 00       	call   c001a394 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 3d 0a 02 c0       	push   0xc0020a3d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 5a 0a 02 c0       	push   0xc0020a5a
c0006a52:	e8 21 39 01 00       	call   c001a378 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 65 0a 02 c0       	push   0xc0020a65
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 6c 0a 02 c0       	push   0xc0020a6c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 73 0a 02 c0       	push   0xc0020a73
c0006b69:	e8 0a 38 01 00       	call   c001a378 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 7e 0a 02 c0       	push   0xc0020a7e
c0006b84:	e8 ef 37 01 00       	call   c001a378 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 a6 a0 00 00       	call   c0010d3a <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 cb 5d 00 00       	call   c000ca6e <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 8f 0a 02 c0       	push   0xc0020a8f
c0006cd4:	e8 40 a1 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 a8 0a 02 c0       	push   0xc0020aa8
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 8f ee 00 00       	call   c0015b90 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 9e f0 00 00       	call   c0015db4 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 78 68 01 c0       	push   0xc0016878
c0006d25:	52                   	push   edx
c0006d26:	e8 89 f0 00 00       	call   c0015db4 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 a4 0b 02 c0       	push   0xc0020ba4
c0006d33:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d38:	e8 dc a0 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d44:	e8 85 a9 00 00       	call   c00116ce <KeInitRand()>
c0006d49:	e8 4d ff 00 00       	call   c0016c9b <Vm::initialise8086()>
c0006d4e:	e8 47 4a 00 00       	call   c000b79a <Fs::initVFS()>
c0006d53:	c7 04 24 b5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ab5
c0006d5a:	e8 ba a0 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 a4 0b 02 c0       	push   0xc0020ba4
c0006d7e:	e8 96 a0 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c0006d83:	e8 35 46 00 00       	call   c000b3bd <KeInitialiseSymlinks()>
c0006d88:	e8 ed a5 00 00       	call   c001137a <KeLoadSystemEnv()>
c0006d8d:	e8 4a a8 00 00       	call   c00115dc <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 cf 0a 02 c0       	push   0xc0020acf
c0006d9c:	68 d8 0a 02 c0       	push   0xc0020ad8
c0006da1:	e8 ec cf 00 00       	call   c0013d92 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 1a 56 00 00       	call   c000c3c8 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 c8 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bc8
c0006db5:	e8 5f a0 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 a0 5c 00 00       	call   c000ca6c <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 e0 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ae0
c0006dd3:	e8 41 a0 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 f1 0a 02 c0       	push   0xc0020af1
c0006de7:	e8 a9 e7 00 00       	call   c0015595 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 e0 e9 00 00       	call   c00157d5 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 fe f3 00 00       	call   c0016200 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 0d 0b 02 c0       	push   0xc0020b0d
c0006e17:	50                   	push   eax
c0006e18:	e8 cb 5c 00 00       	call   c000cae8 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 14 0c 02 c0       	mov    edx,0xc0020c14
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 6f 84 01 00       	call   c001f386 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 fd 92 00 00       	call   c0010252 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 d6 92 00 00       	call   c0010252 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 b4 92 00 00       	call   c0010252 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 92 92 00 00       	call   c0010252 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 9f 91 00 00       	call   c00101ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 7a 91 00 00       	call   c00101ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 ce 82 01 00       	call   c001f340 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 1c 7f 01 00       	call   c001efb0 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 90 91 00 00       	call   c0010252 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 16 0b 02 c0       	push   0xc0020b16
c0007104:	e8 0e a4 00 00       	call   c0011517 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 1c 0b 02 c0       	push   0xc0020b1c
c0007140:	e8 d2 a3 00 00       	call   c0011517 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 97 8b 00 00       	jmp    c000fd24 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 22 0b 02 c0       	push   0xc0020b22
c00071e3:	0f 94 05 a0 35 02 c0 	sete   BYTE PTR ds:0xc00235a0
c00071ea:	e8 2a 9c 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 93 86 00 00       	call   c000f898 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 3c 57 00 00       	call   c000c950 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 3a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b3a
c000722d:	e8 e7 9b 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 c2 90 00 00       	call   c001030a <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 f9 56 00 00       	call   c000c950 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 e8 0b 02 c0       	push   0xc0020be8
c0007274:	e8 a0 9b 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c0007279:	e8 64 0c 01 00       	call   c0017ee2 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 54 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b54
c0007285:	e8 8f 9b 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 46 ec 00 00       	call   c0015edc <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 6f 0b 02 c0       	push   0xc0020b6f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 80 0b 02 c0       	push   0xc0020b80
c000730d:	e8 05 a2 00 00       	call   c0011517 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 8d 0b 02 c0       	push   0xc0020b8d
c0007322:	e8 f0 a1 00 00       	call   c0011517 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 97 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020b97
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 d6 a1 00 00       	jmp    c0011517 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 7b 06 01 00       	call   c0017bae <HalSystemIdle()>
c0007533:	e8 0a 84 01 00       	call   c001f942 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000763a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 40 f0 01 c0       	push   0xc001f040
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 50 f0 01 c0       	push   0xc001f050
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 5a f0 01 c0       	push   0xc001f05a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 64 f0 01 c0       	push   0xc001f064
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 6e f0 01 c0       	push   0xc001f06e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 78 f0 01 c0       	push   0xc001f078
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 82 f0 01 c0       	push   0xc001f082
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 8c f0 01 c0       	push   0xc001f08c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 96 f0 01 c0       	push   0xc001f096
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 9e f0 01 c0       	push   0xc001f09e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 a8 f0 01 c0       	push   0xc001f0a8
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 b0 f0 01 c0       	push   0xc001f0b0
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 b8 f0 01 c0       	push   0xc001f0b8
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 c0 f0 01 c0       	push   0xc001f0c0
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 da f0 01 c0       	push   0xc001f0da
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 e2 f0 01 c0       	push   0xc001f0e2
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 ec f0 01 c0       	push   0xc001f0ec
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 f6 f0 01 c0       	push   0xc001f0f6
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 00 f1 01 c0       	push   0xc001f100
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 9a f1 01 c0       	push   0xc001f19a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 a1 f1 01 c0       	push   0xc001f1a1
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 8c f1 01 c0       	push   0xc001f18c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 93 f1 01 c0       	push   0xc001f193
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 0a f1 01 c0       	push   0xc001f10a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 14 f1 01 c0       	push   0xc001f114
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 1e f1 01 c0       	push   0xc001f11e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 28 f1 01 c0       	push   0xc001f128
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 32 f1 01 c0       	push   0xc001f132
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 3c f1 01 c0       	push   0xc001f13c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 46 f1 01 c0       	push   0xc001f146
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 50 f1 01 c0       	push   0xc001f150
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 5a f1 01 c0       	push   0xc001f15a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 64 f1 01 c0       	push   0xc001f164
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 6e f1 01 c0       	push   0xc001f16e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 78 f1 01 c0       	push   0xc001f178
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 82 f1 01 c0       	push   0xc001f182
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 dc f2 01 c0       	push   0xc001f2dc
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 e6 f2 01 c0       	push   0xc001f2e6
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 f0 f2 01 c0       	push   0xc001f2f0
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 fa f2 01 c0       	push   0xc001f2fa
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 04 f3 01 c0       	push   0xc001f304
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 0e f3 01 c0       	push   0xc001f30e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 18 f3 01 c0       	push   0xc001f318
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 22 f3 01 c0       	push   0xc001f322
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 96 f0 01 c0       	push   0xc001f096
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 94 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023594
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079df:	8b 3d 94 35 02 c0    	mov    edi,DWORD PTR ds:0xc0023594
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 94 35 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023594,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 94 35 02 c0       	mov    eax,ds:0xc0023594
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 38 0c 02 c0       	push   0xc0020c38
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 68 0c 02 c0       	push   0xc0020c68
c0007a44:	e8 ce 9a 00 00       	call   c0011517 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 6d 0c 02 c0       	push   0xc0020c6d
c0007a5a:	e8 b8 9a 00 00       	call   c0011517 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 74 0c 02 c0       	push   0xc0020c74
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 17 92 00 00       	call   c0010d9d <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 40 91 00 00       	call   c0010ce7 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bb8:	e8 1d 7d 01 00       	call   c001f8da <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 8c 0c 02 c0       	push   0xc0020c8c
c0007c4b:	e8 c7 98 00 00       	call   c0011517 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007c92:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 8c 0c 02 c0       	push   0xc0020c8c
c0007cc5:	e8 4d 98 00 00       	call   c0011517 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 98 35 02 c0    	mov    esi,DWORD PTR ds:0xc0023598
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 98 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023598
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 98 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023598
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 31 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d31
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 47 97 00 00       	jmp    c0011517 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 b4 0c 02 c0       	push   0xc0020cb4
c0007e54:	e8 be 96 00 00       	call   c0011517 <KePanic(char const*)>
c0007e59:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 47 0d 02 c0       	push   0xc0020d47
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 e4 0c 02 c0       	push   0xc0020ce4
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 5f 0d 02 c0       	push   0xc0020d5f
c000810a:	e8 08 94 00 00       	call   c0011517 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 08 0d 02 c0       	push   0xc0020d08
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 6d 0d 02 c0       	push   0xc0020d6d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba cc 0d 02 c0       	mov    edx,0xc0020dcc
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 89 0d 02 c0       	push   0xc0020d89
c0008331:	e8 e1 91 00 00       	call   c0011517 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000837a:	e8 81 dc 00 00       	call   c0016000 <schedule()>
c000837f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 b3 73 01 00       	call   c001f7c0 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 a6 0d 02 c0       	push   0xc0020da6
c0008422:	e8 f0 90 00 00       	call   c0011517 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba cc 0d 02 c0       	mov    edx,0xc0020dcc
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 14 0e 02 c0       	mov    edx,0xc0020e14
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 26 53 00 00       	call   c000d832 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 6e 08 01 00       	call   c0018da0 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d c0 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca40]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d c0 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca40]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 78 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb88]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 50 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbb0]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 a0 05 01 00       	call   c0018c34 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 fd 05 01 00       	jmp    c0018d3c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 e0 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020de0
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 8b 8d 00 00       	jmp    c0011517 <KePanic(char const*)>
c000878c:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 86 3a 00 00       	jmp    c000c36f <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be ee 0d 02 c0       	mov    esi,0xc0020dee
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 14 01 01 00       	call   c0018d3c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 14 0e 02 c0       	mov    edx,0xc0020e14
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 ff 0d 02 c0       	push   0xc0020dff
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 05 0e 02 c0       	push   0xc0020e05
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba dc 0e 02 c0       	mov    edx,0xc0020edc
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 00 36 02 c0       	mov    eax,ds:0xc0023600
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 00 36 02 c0    	mov    DWORD PTR ds:0xc0023600,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 6f 02 c0       	push   0xc0026f98
c00091e4:	e8 bf 67 01 00       	call   c001f9a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba f8 0e 02 c0       	mov    edx,0xc0020ef8
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba dc 0e 02 c0       	mov    edx,0xc0020edc
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 6f 02 c0       	push   0xc0026f98
c00093b8:	e8 bf 66 01 00       	call   c001fa7c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 6f 02 c0       	push   0xc0026f98
c00093cc:	e8 b3 66 01 00       	call   c001fa84 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 6f 02 c0       	push   0xc0026f98
c00093ea:	e8 b9 65 01 00       	call   c001f9a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 b4 0e 02 c0       	push   0xc0020eb4
c0009414:	e8 fe 80 00 00       	call   c0011517 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba f8 0e 02 c0       	mov    edx,0xc0020ef8
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 6f 02 c0       	push   0xc0026f98
c00094b9:	e8 be 65 01 00       	call   c001fa7c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 6f 02 c0       	push   0xc0026f98
c00094d6:	e8 4b 66 01 00       	call   c001fb26 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 6f 02 c0       	push   0xc0026f98
c0009558:	e8 09 64 01 00       	call   c001f966 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 90 35 02 c0       	push   0xc0023590
c0009568:	68 98 6f 02 c0       	push   0xc0026f98
c000956d:	68 64 f9 01 c0       	push   0xc001f964
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 08 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023608
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 08 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023608
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 04 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023604
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 04 36 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023604,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 04 36 02 c0    	mov    DWORD PTR ds:0xc0023604,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 0c 0f 02 c0       	push   0xc0020f0c
c0009674:	e8 9e 7e 00 00       	call   c0011517 <KePanic(char const*)>
c0009679:	8b 2d 04 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023604
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 04 36 02 c0    	mov    DWORD PTR ds:0xc0023604,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 04 36 02 c0       	mov    eax,ds:0xc0023604
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 04 36 02 c0    	mov    DWORD PTR ds:0xc0023604,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 04 36 02 c0       	mov    ds:0xc0023604,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 0c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002360c
c000973e:	8b 0d 14 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023614
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 10 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023610
c0009759:	8b 0d 0c 36 02 c0    	mov    ecx,DWORD PTR ds:0xc002360c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 a0 11 02 c0       	push   0xc00211a0
c000979e:	e8 74 7d 00 00       	call   c0011517 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 b7 11 02 c0       	push   0xc00211b7
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 10 36 02 c0    	mov    DWORD PTR ds:0xc0023610,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 18 36 02 c0 43 	mov    BYTE PTR ds:0xc0023618,0x43
c000984f:	c7 05 0c 36 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002360c,0x8
c0009859:	a3 14 36 02 c0       	mov    ds:0xc0023614,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 10 36 02 c0       	mov    eax,ds:0xc0023610
c0009874:	f7 35 0c 36 02 c0    	div    DWORD PTR ds:0xc002360c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 2c 0f 02 c0       	push   0xc0020f2c
c00098af:	e8 63 7c 00 00       	call   c0011517 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 ce 11 02 c0       	push   0xc00211ce
c0009981:	e8 91 7b 00 00       	call   c0011517 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 50 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020f50
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 2e 7b 00 00       	jmp    c0011517 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 ea 11 02 c0       	push   0xc00211ea
c00099f6:	e8 1c 7b 00 00       	call   c0011517 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 06 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021206
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 d2 7a 00 00       	jmp    c0011517 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 74 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f74
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b04:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009cee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 98 0f 02 c0       	push   0xc0020f98
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 00 10 02 c0       	push   0xc0021000
c0009d87:	e8 8b 77 00 00       	call   c0011517 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 24 10 02 c0       	push   0xc0021024
c0009e7b:	e8 97 76 00 00       	call   c0011517 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 50 10 02 c0       	push   0xc0021050
c0009fd9:	e8 39 75 00 00       	call   c0011517 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 d6 29 00 00       	call   c000cbe4 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 20 12 02 c0       	push   0xc0021220
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 0c 36 02 c0       	mov    eax,ds:0xc002360c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 18 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023618
c000a2e7:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 b2 3a 00 00       	call   c000dda6 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 0c 36 02 c0    	cmp    DWORD PTR ds:0xc002360c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 74 10 02 c0       	push   0xc0021074
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a359:	c7 44 24 50 2e 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc002122e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 51 12 02 c0       	push   0xc0021251
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 3f 12 02 c0       	push   0xc002123f
c000a413:	e8 ff 70 00 00       	call   c0011517 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 a4 10 02 c0       	push   0xc00210a4
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 0c 36 02 c0       	mov    eax,ds:0xc002360c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 18 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023618
c000a4bf:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 6e 38 00 00       	call   c000dd3a <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 0c 36 02 c0    	cmp    DWORD PTR ds:0xc002360c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 64 12 02 c0       	push   0xc0021264
c000a4e9:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 c4 10 02 c0       	push   0xc00210c4
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 24 11 02 c0 	mov    DWORD PTR [esp],0xc0021124
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 79 12 02 c0       	push   0xc0021279
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 8d 12 02 c0       	push   0xc002128d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 a0 12 02 c0       	push   0xc00212a0
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 50 02 c0       	push   0xc0025000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 50 02 c0       	push   0xc0025000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 ad 12 02 c0       	push   0xc00212ad
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 c6 12 02 c0       	push   0xc00212c6
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 c6 12 02 c0       	push   0xc00212c6
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 ce 12 02 c0 	mov    DWORD PTR [esp],0xc00212ce
c000a7ec:	e8 26 6d 00 00       	call   c0011517 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 e6 12 02 c0       	push   0xc00212e6
c000a7fe:	e8 14 6d 00 00       	call   c0011517 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 fc 12 02 c0 	jmp    DWORD PTR [eax*4-0x3ffded04]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 4c 14 02 c0       	push   0xc002144c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 60 14 02 c0       	push   0xc0021460
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 6a 14 02 c0       	push   0xc002146a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 74 14 02 c0       	push   0xc0021474
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 b8 15 02 c0       	push   0xc00215b8
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 7e 14 02 c0       	push   0xc002147e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 d8 15 02 c0       	push   0xc00215d8
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 93 14 02 c0       	push   0xc0021493
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 ad 14 02 c0       	push   0xc00214ad
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 20 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc9e0]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 00 16 02 c0       	push   0xc0021600
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 b8 15 02 c0       	push   0xc00215b8
c000ab78:	e8 9a 69 00 00       	call   c0011517 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 48 16 02 c0       	push   0xc0021648
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 48 16 02 c0       	push   0xc0021648
c000aba7:	e8 6b 69 00 00       	call   c0011517 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 b8 14 02 c0       	push   0xc00214b8
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 b8 14 02 c0       	push   0xc00214b8
c000abd3:	e8 3f 69 00 00       	call   c0011517 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 d5 14 02 c0       	push   0xc00214d5
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 d5 14 02 c0       	push   0xc00214d5
c000abff:	e8 13 69 00 00       	call   c0011517 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 68 16 02 c0       	push   0xc0021668
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 68 16 02 c0       	push   0xc0021668
c000ac2b:	e8 e7 68 00 00       	call   c0011517 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 8c 16 02 c0       	push   0xc002168c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 8c 16 02 c0       	push   0xc002168c
c000ac57:	e8 bb 68 00 00       	call   c0011517 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 f1 14 02 c0       	push   0xc00214f1
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 f1 14 02 c0       	push   0xc00214f1
c000ac83:	e8 8f 68 00 00       	call   c0011517 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 0d 15 02 c0       	push   0xc002150d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 0d 15 02 c0       	push   0xc002150d
c000acaf:	e8 63 68 00 00       	call   c0011517 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 ac 16 02 c0       	push   0xc00216ac
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 ac 16 02 c0       	push   0xc00216ac
c000acdb:	e8 37 68 00 00       	call   c0011517 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 d0 16 02 c0       	push   0xc00216d0
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 d0 16 02 c0       	push   0xc00216d0
c000ad07:	e8 0b 68 00 00       	call   c0011517 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiIsHashInTable(unsigned short)>:
c000ad14:	0f b7 d0             	movzx  edx,ax
c000ad17:	83 e0 07             	and    eax,0x7
c000ad1a:	c1 fa 03             	sar    edx,0x3
c000ad1d:	88 c1                	mov    cl,al
c000ad1f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad26:	d3 fa                	sar    edx,cl
c000ad28:	89 d0                	mov    eax,edx
c000ad2a:	83 e0 01             	and    eax,0x1
c000ad2d:	c3                   	ret    

c000ad2e <KiSetHashInTable(unsigned short, bool)>:
c000ad2e:	56                   	push   esi
c000ad2f:	53                   	push   ebx
c000ad30:	0f b7 d8             	movzx  ebx,ax
c000ad33:	c1 fb 03             	sar    ebx,0x3
c000ad36:	83 e0 07             	and    eax,0x7
c000ad39:	89 c1                	mov    ecx,eax
c000ad3b:	b8 01 00 00 00       	mov    eax,0x1
c000ad40:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad47:	d3 e0                	shl    eax,cl
c000ad49:	84 d2                	test   dl,dl
c000ad4b:	74 04                	je     c000ad51 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad4d:	09 f0                	or     eax,esi
c000ad4f:	eb 04                	jmp    c000ad55 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad51:	f7 d0                	not    eax
c000ad53:	21 f0                	and    eax,esi
c000ad55:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad5b:	5b                   	pop    ebx
c000ad5c:	5e                   	pop    esi
c000ad5d:	c3                   	ret    

c000ad5e <KiFlushSymlinkChanges()>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	83 ec 1c             	sub    esp,0x1c
c000ad64:	68 14 01 00 00       	push   0x114
c000ad69:	e8 65 cd ff ff       	call   c0007ad3 <malloc>
c000ad6e:	83 c4 0c             	add    esp,0xc
c000ad71:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ad77:	68 ef 16 02 c0       	push   0xc00216ef
c000ad7c:	50                   	push   eax
c000ad7d:	89 c3                	mov    ebx,eax
c000ad7f:	e8 4c 0d 00 00       	call   c000bad0 <File::File(char const*, Process*)>
c000ad84:	83 c4 10             	add    esp,0x10
c000ad87:	85 db                	test   ebx,ebx
c000ad89:	75 10                	jne    c000ad9b <KiFlushSymlinkChanges()+0x3d>
c000ad8b:	83 ec 0c             	sub    esp,0xc
c000ad8e:	68 0d 17 02 c0       	push   0xc002170d
c000ad93:	e8 7f 67 00 00       	call   c0011517 <KePanic(char const*)>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	50                   	push   eax
c000ad9c:	50                   	push   eax
c000ad9d:	6a 06                	push   0x6
c000ad9f:	53                   	push   ebx
c000ada0:	e8 49 0d 00 00       	call   c000baee <File::open(FileOpenMode)>
c000ada5:	83 c4 10             	add    esp,0x10
c000ada8:	85 c0                	test   eax,eax
c000adaa:	74 10                	je     c000adbc <KiFlushSymlinkChanges()+0x5e>
c000adac:	83 ec 0c             	sub    esp,0xc
c000adaf:	68 27 17 02 c0       	push   0xc0021727
c000adb4:	e8 5e 67 00 00       	call   c0011517 <KePanic(char const*)>
c000adb9:	83 c4 10             	add    esp,0x10
c000adbc:	31 f6                	xor    esi,esi
c000adbe:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000adc4:	7e 70                	jle    c000ae36 <KiFlushSymlinkChanges()+0xd8>
c000adc6:	83 ec 0c             	sub    esp,0xc
c000adc9:	89 f0                	mov    eax,esi
c000adcb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adcd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000add1:	c1 e0 08             	shl    eax,0x8
c000add4:	57                   	push   edi
c000add5:	05 00 70 02 c0       	add    eax,0xc0027000
c000adda:	50                   	push   eax
c000addb:	6a 00                	push   0x0
c000addd:	68 00 01 00 00       	push   0x100
c000ade2:	53                   	push   ebx
c000ade3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ade6:	83 c4 20             	add    esp,0x20
c000ade9:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000adf1:	74 10                	je     c000ae03 <KiFlushSymlinkChanges()+0xa5>
c000adf3:	83 ec 0c             	sub    esp,0xc
c000adf6:	68 41 17 02 c0       	push   0xc0021741
c000adfb:	e8 17 67 00 00       	call   c0011517 <KePanic(char const*)>
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae05:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae0c:	83 ec 0c             	sub    esp,0xc
c000ae0f:	57                   	push   edi
c000ae10:	52                   	push   edx
c000ae11:	6a 00                	push   0x0
c000ae13:	6a 08                	push   0x8
c000ae15:	53                   	push   ebx
c000ae16:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae19:	83 c4 20             	add    esp,0x20
c000ae1c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae21:	74 10                	je     c000ae33 <KiFlushSymlinkChanges()+0xd5>
c000ae23:	83 ec 0c             	sub    esp,0xc
c000ae26:	68 5b 17 02 c0       	push   0xc002175b
c000ae2b:	e8 e7 66 00 00       	call   c0011517 <KePanic(char const*)>
c000ae30:	83 c4 10             	add    esp,0x10
c000ae33:	46                   	inc    esi
c000ae34:	eb 88                	jmp    c000adbe <KiFlushSymlinkChanges()+0x60>
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	53                   	push   ebx
c000ae3a:	e8 0d 0d 00 00       	call   c000bb4c <File::close()>
c000ae3f:	83 c4 10             	add    esp,0x10
c000ae42:	85 db                	test   ebx,ebx
c000ae44:	74 0c                	je     c000ae52 <KiFlushSymlinkChanges()+0xf4>
c000ae46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	53                   	push   ebx
c000ae4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	5b                   	pop    ebx
c000ae60:	5e                   	pop    esi
c000ae61:	5f                   	pop    edi
c000ae62:	c3                   	ret    

c000ae63 <KiDeinitialiseSymlinks(void*)>:
c000ae63:	e9 f6 fe ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>

c000ae68 <KiGetSymlinkHash(char const*)>:
c000ae68:	53                   	push   ebx
c000ae69:	89 c3                	mov    ebx,eax
c000ae6b:	83 ec 14             	sub    esp,0x14
c000ae6e:	50                   	push   eax
c000ae6f:	e8 0c 57 ff ff       	call   c0000580 <strlen>
c000ae74:	5a                   	pop    edx
c000ae75:	59                   	pop    ecx
c000ae76:	50                   	push   eax
c000ae77:	53                   	push   ebx
c000ae78:	e8 1c 60 00 00       	call   c0010e99 <KeCalculateCRC32(unsigned char*, int)>
c000ae7d:	83 c4 18             	add    esp,0x18
c000ae80:	5b                   	pop    ebx
c000ae81:	89 c2                	mov    edx,eax
c000ae83:	c1 ea 10             	shr    edx,0x10
c000ae86:	31 d0                	xor    eax,edx
c000ae88:	c3                   	ret    

c000ae89 <KiCreateSymlinkID()>:
c000ae89:	55                   	push   ebp
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	53                   	push   ebx
c000ae8d:	31 db                	xor    ebx,ebx
c000ae8f:	83 ec 1c             	sub    esp,0x1c
c000ae92:	e8 ce 67 00 00       	call   c0011665 <KeRand()>
c000ae97:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000ae9d:	31 d2                	xor    edx,edx
c000ae9f:	43                   	inc    ebx
c000aea0:	31 ff                	xor    edi,edi
c000aea2:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aea5:	89 ee                	mov    esi,ebp
c000aea7:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aead:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000aeb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aeb5:	c1 e0 1b             	shl    eax,0x1b
c000aeb8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000aebe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aec2:	75 10                	jne    c000aed4 <KiCreateSymlinkID()+0x4b>
c000aec4:	83 ec 0c             	sub    esp,0xc
c000aec7:	68 75 17 02 c0       	push   0xc0021775
c000aecc:	e8 46 66 00 00       	call   c0011517 <KePanic(char const*)>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000aed8:	75 06                	jne    c000aee0 <KiCreateSymlinkID()+0x57>
c000aeda:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000aede:	74 b2                	je     c000ae92 <KiCreateSymlinkID()+0x9>
c000aee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aee4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aee8:	83 c4 1c             	add    esp,0x1c
c000aeeb:	5b                   	pop    ebx
c000aeec:	31 f0                	xor    eax,esi
c000aeee:	5e                   	pop    esi
c000aeef:	31 fa                	xor    edx,edi
c000aef1:	5f                   	pop    edi
c000aef2:	5d                   	pop    ebp
c000aef3:	c3                   	ret    

c000aef4 <KeRegisterSymlink(char const*, unsigned long long)>:
c000aef4:	53                   	push   ebx
c000aef5:	83 ec 0c             	sub    esp,0xc
c000aef8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000aefc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af00:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af05:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af09:	68 00 01 00 00       	push   0x100
c000af0e:	6a 00                	push   0x0
c000af10:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af17:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af1e:	c1 e0 08             	shl    eax,0x8
c000af21:	05 00 70 02 c0       	add    eax,0xc0027000
c000af26:	50                   	push   eax
c000af27:	e8 c4 55 ff ff       	call   c00004f0 <memset>
c000af2c:	58                   	pop    eax
c000af2d:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af32:	5a                   	pop    edx
c000af33:	c1 e0 08             	shl    eax,0x8
c000af36:	53                   	push   ebx
c000af37:	05 00 70 02 c0       	add    eax,0xc0027000
c000af3c:	50                   	push   eax
c000af3d:	e8 0e 57 ff ff       	call   c0000650 <strcpy>
c000af42:	89 d8                	mov    eax,ebx
c000af44:	e8 1f ff ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000af49:	ba 01 00 00 00       	mov    edx,0x1
c000af4e:	0f b7 c0             	movzx  eax,ax
c000af51:	e8 d8 fd ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000af56:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	40                   	inc    eax
c000af5f:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000af64:	83 f8 03             	cmp    eax,0x3
c000af67:	7e 09                	jle    c000af72 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000af69:	83 c4 08             	add    esp,0x8
c000af6c:	5b                   	pop    ebx
c000af6d:	e9 ec fd ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>
c000af72:	83 c4 08             	add    esp,0x8
c000af75:	5b                   	pop    ebx
c000af76:	c3                   	ret    

c000af77 <KiIsSymlinkRegistered(char const*)>:
c000af77:	55                   	push   ebp
c000af78:	57                   	push   edi
c000af79:	56                   	push   esi
c000af7a:	53                   	push   ebx
c000af7b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000af81:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000af88:	89 f0                	mov    eax,esi
c000af8a:	e8 d9 fe ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000af8f:	0f b7 c0             	movzx  eax,ax
c000af92:	e8 7d fd ff ff       	call   c000ad14 <KiIsHashInTable(unsigned short)>
c000af97:	31 d2                	xor    edx,edx
c000af99:	88 c1                	mov    cl,al
c000af9b:	31 c0                	xor    eax,eax
c000af9d:	84 c9                	test   cl,cl
c000af9f:	0f 84 3d 01 00 00    	je     c000b0e2 <KiIsSymlinkRegistered(char const*)+0x16b>
c000afa5:	31 db                	xor    ebx,ebx
c000afa7:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000afad:	7e 30                	jle    c000afdf <KiIsSymlinkRegistered(char const*)+0x68>
c000afaf:	89 d8                	mov    eax,ebx
c000afb1:	c1 e0 08             	shl    eax,0x8
c000afb4:	57                   	push   edi
c000afb5:	05 00 70 02 c0       	add    eax,0xc0027000
c000afba:	57                   	push   edi
c000afbb:	50                   	push   eax
c000afbc:	56                   	push   esi
c000afbd:	e8 be 57 ff ff       	call   c0000780 <strcmp>
c000afc2:	83 c4 10             	add    esp,0x10
c000afc5:	85 c0                	test   eax,eax
c000afc7:	75 13                	jne    c000afdc <KiIsSymlinkRegistered(char const*)+0x65>
c000afc9:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000afd0:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000afd7:	e9 06 01 00 00       	jmp    c000b0e2 <KiIsSymlinkRegistered(char const*)+0x16b>
c000afdc:	43                   	inc    ebx
c000afdd:	eb c8                	jmp    c000afa7 <KiIsSymlinkRegistered(char const*)+0x30>
c000afdf:	83 ec 0c             	sub    esp,0xc
c000afe2:	68 14 01 00 00       	push   0x114
c000afe7:	e8 e7 ca ff ff       	call   c0007ad3 <malloc>
c000afec:	83 c4 0c             	add    esp,0xc
c000afef:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000aff5:	68 ef 16 02 c0       	push   0xc00216ef
c000affa:	50                   	push   eax
c000affb:	89 c3                	mov    ebx,eax
c000affd:	e8 ce 0a 00 00       	call   c000bad0 <File::File(char const*, Process*)>
c000b002:	83 c4 10             	add    esp,0x10
c000b005:	85 db                	test   ebx,ebx
c000b007:	75 12                	jne    c000b01b <KiIsSymlinkRegistered(char const*)+0xa4>
c000b009:	83 ec 0c             	sub    esp,0xc
c000b00c:	68 7e 17 02 c0       	push   0xc002177e
c000b011:	e8 01 65 00 00       	call   c0011517 <KePanic(char const*)>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	eb 10                	jmp    c000b02b <KiIsSymlinkRegistered(char const*)+0xb4>
c000b01b:	83 ec 0c             	sub    esp,0xc
c000b01e:	53                   	push   ebx
c000b01f:	e8 8e 0d 00 00       	call   c000bdb2 <File::exists()>
c000b024:	83 c4 10             	add    esp,0x10
c000b027:	84 c0                	test   al,al
c000b029:	74 de                	je     c000b009 <KiIsSymlinkRegistered(char const*)+0x92>
c000b02b:	51                   	push   ecx
c000b02c:	51                   	push   ecx
c000b02d:	6a 01                	push   0x1
c000b02f:	53                   	push   ebx
c000b030:	e8 b9 0a 00 00       	call   c000baee <File::open(FileOpenMode)>
c000b035:	83 c4 10             	add    esp,0x10
c000b038:	85 c0                	test   eax,eax
c000b03a:	74 10                	je     c000b04c <KiIsSymlinkRegistered(char const*)+0xd5>
c000b03c:	83 ec 0c             	sub    esp,0xc
c000b03f:	68 99 17 02 c0       	push   0xc0021799
c000b044:	e8 ce 64 00 00       	call   c0011517 <KePanic(char const*)>
c000b049:	83 c4 10             	add    esp,0x10
c000b04c:	83 ec 0c             	sub    esp,0xc
c000b04f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b051:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b055:	55                   	push   ebp
c000b056:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b05a:	57                   	push   edi
c000b05b:	6a 00                	push   0x0
c000b05d:	68 00 01 00 00       	push   0x100
c000b062:	53                   	push   ebx
c000b063:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b066:	83 c4 20             	add    esp,0x20
c000b069:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b071:	75 57                	jne    c000b0ca <KiIsSymlinkRegistered(char const*)+0x153>
c000b073:	83 ec 0c             	sub    esp,0xc
c000b076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b078:	55                   	push   ebp
c000b079:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b07d:	52                   	push   edx
c000b07e:	6a 00                	push   0x0
c000b080:	6a 08                	push   0x8
c000b082:	53                   	push   ebx
c000b083:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b086:	83 c4 20             	add    esp,0x20
c000b089:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b08e:	75 3a                	jne    c000b0ca <KiIsSymlinkRegistered(char const*)+0x153>
c000b090:	52                   	push   edx
c000b091:	52                   	push   edx
c000b092:	57                   	push   edi
c000b093:	56                   	push   esi
c000b094:	e8 e7 56 ff ff       	call   c0000780 <strcmp>
c000b099:	83 c4 10             	add    esp,0x10
c000b09c:	85 c0                	test   eax,eax
c000b09e:	75 ac                	jne    c000b04c <KiIsSymlinkRegistered(char const*)+0xd5>
c000b0a0:	50                   	push   eax
c000b0a1:	50                   	push   eax
c000b0a2:	57                   	push   edi
c000b0a3:	68 b4 17 02 c0       	push   0xc00217b4
c000b0a8:	e8 5d f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0b0:	e8 97 0a 00 00       	call   c000bb4c <File::close()>
c000b0b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b0c5:	83 c4 10             	add    esp,0x10
c000b0c8:	eb 18                	jmp    c000b0e2 <KiIsSymlinkRegistered(char const*)+0x16b>
c000b0ca:	83 ec 0c             	sub    esp,0xc
c000b0cd:	53                   	push   ebx
c000b0ce:	e8 79 0a 00 00       	call   c000bb4c <File::close()>
c000b0d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	31 c0                	xor    eax,eax
c000b0e0:	31 d2                	xor    edx,edx
c000b0e2:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b0e8:	5b                   	pop    ebx
c000b0e9:	5e                   	pop    esi
c000b0ea:	5f                   	pop    edi
c000b0eb:	5d                   	pop    ebp
c000b0ec:	c3                   	ret    

c000b0ed <KeDereferenceSymlink(char const*, char*)>:
c000b0ed:	55                   	push   ebp
c000b0ee:	57                   	push   edi
c000b0ef:	56                   	push   esi
c000b0f0:	53                   	push   ebx
c000b0f1:	83 ec 48             	sub    esp,0x48
c000b0f4:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b0f8:	56                   	push   esi
c000b0f9:	e8 79 fe ff ff       	call   c000af77 <KiIsSymlinkRegistered(char const*)>
c000b0fe:	83 c4 10             	add    esp,0x10
c000b101:	89 c7                	mov    edi,eax
c000b103:	89 d0                	mov    eax,edx
c000b105:	09 f8                	or     eax,edi
c000b107:	75 07                	jne    c000b110 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b109:	31 c0                	xor    eax,eax
c000b10b:	e9 69 01 00 00       	jmp    c000b279 <KeDereferenceSymlink(char const*, char*)+0x18c>
c000b110:	83 ec 0c             	sub    esp,0xc
c000b113:	89 d5                	mov    ebp,edx
c000b115:	68 14 01 00 00       	push   0x114
c000b11a:	e8 b4 c9 ff ff       	call   c0007ad3 <malloc>
c000b11f:	83 c4 0c             	add    esp,0xc
c000b122:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b128:	56                   	push   esi
c000b129:	50                   	push   eax
c000b12a:	89 c3                	mov    ebx,eax
c000b12c:	e8 9f 09 00 00       	call   c000bad0 <File::File(char const*, Process*)>
c000b131:	83 c4 10             	add    esp,0x10
c000b134:	85 db                	test   ebx,ebx
c000b136:	0f 84 1f 01 00 00    	je     c000b25b <KeDereferenceSymlink(char const*, char*)+0x16e>
c000b13c:	52                   	push   edx
c000b13d:	52                   	push   edx
c000b13e:	6a 01                	push   0x1
c000b140:	53                   	push   ebx
c000b141:	e8 a8 09 00 00       	call   c000baee <File::open(FileOpenMode)>
c000b146:	83 c4 10             	add    esp,0x10
c000b149:	85 c0                	test   eax,eax
c000b14b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b14d:	74 09                	je     c000b158 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b14f:	83 ec 0c             	sub    esp,0xc
c000b152:	53                   	push   ebx
c000b153:	e9 fd 00 00 00       	jmp    c000b255 <KeDereferenceSymlink(char const*, char*)+0x168>
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b15f:	56                   	push   esi
c000b160:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b164:	52                   	push   edx
c000b165:	6a 00                	push   0x0
c000b167:	6a 08                	push   0x8
c000b169:	53                   	push   ebx
c000b16a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b16d:	83 c4 20             	add    esp,0x20
c000b170:	85 c0                	test   eax,eax
c000b172:	0f 85 cf 00 00 00    	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b178:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b17d:	0f 85 c4 00 00 00    	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b183:	83 ec 0c             	sub    esp,0xc
c000b186:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b188:	56                   	push   esi
c000b189:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b18d:	52                   	push   edx
c000b18e:	6a 00                	push   0x0
c000b190:	6a 08                	push   0x8
c000b192:	53                   	push   ebx
c000b193:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b196:	83 c4 20             	add    esp,0x20
c000b199:	85 c0                	test   eax,eax
c000b19b:	0f 85 a6 00 00 00    	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b1a1:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1a6:	0f 85 9b 00 00 00    	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b1ac:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b1b0:	0f 85 53 ff ff ff    	jne    c000b109 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b1b6:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b1ba:	0f 85 49 ff ff ff    	jne    c000b109 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b1c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b1c8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b1d0:	50                   	push   eax
c000b1d1:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b1d5:	50                   	push   eax
c000b1d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b1da:	50                   	push   eax
c000b1db:	53                   	push   ebx
c000b1dc:	e8 0f 0c 00 00       	call   c000bdf0 <File::stat(unsigned long long*, bool*)>
c000b1e1:	83 c4 10             	add    esp,0x10
c000b1e4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b1e9:	75 5c                	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b1eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b1ef:	31 c9                	xor    ecx,ecx
c000b1f1:	bf 0f 00 00 00       	mov    edi,0xf
c000b1f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b1fa:	39 c7                	cmp    edi,eax
c000b1fc:	89 cf                	mov    edi,ecx
c000b1fe:	19 d7                	sbb    edi,edx
c000b200:	73 45                	jae    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b202:	83 c0 f0             	add    eax,0xfffffff0
c000b205:	bf ff 00 00 00       	mov    edi,0xff
c000b20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b20e:	83 d2 ff             	adc    edx,0xffffffff
c000b211:	39 c7                	cmp    edi,eax
c000b213:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b217:	19 d1                	sbb    ecx,edx
c000b219:	72 40                	jb     c000b25b <KeDereferenceSymlink(char const*, char*)+0x16e>
c000b21b:	83 ec 0c             	sub    esp,0xc
c000b21e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b220:	56                   	push   esi
c000b221:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b225:	52                   	push   edx
c000b226:	50                   	push   eax
c000b227:	53                   	push   ebx
c000b228:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b22b:	83 c4 20             	add    esp,0x20
c000b22e:	85 c0                	test   eax,eax
c000b230:	75 15                	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b232:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b236:	89 c7                	mov    edi,eax
c000b238:	c1 ff 1f             	sar    edi,0x1f
c000b23b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b23f:	75 06                	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b241:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b245:	74 19                	je     c000b260 <KeDereferenceSymlink(char const*, char*)+0x173>
c000b247:	83 ec 0c             	sub    esp,0xc
c000b24a:	53                   	push   ebx
c000b24b:	e8 fc 08 00 00       	call   c000bb4c <File::close()>
c000b250:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b252:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b255:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b258:	83 c4 10             	add    esp,0x10
c000b25b:	83 c8 ff             	or     eax,0xffffffff
c000b25e:	eb 19                	jmp    c000b279 <KeDereferenceSymlink(char const*, char*)+0x18c>
c000b260:	83 ec 0c             	sub    esp,0xc
c000b263:	53                   	push   ebx
c000b264:	e8 e3 08 00 00       	call   c000bb4c <File::close()>
c000b269:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b26e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b271:	83 c4 10             	add    esp,0x10
c000b274:	b8 01 00 00 00       	mov    eax,0x1
c000b279:	83 c4 3c             	add    esp,0x3c
c000b27c:	5b                   	pop    ebx
c000b27d:	5e                   	pop    esi
c000b27e:	5f                   	pop    edi
c000b27f:	5d                   	pop    ebp
c000b280:	c3                   	ret    

c000b281 <KeCreateSymlink(char const*, char const*)>:
c000b281:	55                   	push   ebp
c000b282:	57                   	push   edi
c000b283:	56                   	push   esi
c000b284:	53                   	push   ebx
c000b285:	83 ec 38             	sub    esp,0x38
c000b288:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b28c:	68 14 01 00 00       	push   0x114
c000b291:	e8 3d c8 ff ff       	call   c0007ad3 <malloc>
c000b296:	6a 00                	push   0x0
c000b298:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b29e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b2a2:	89 c3                	mov    ebx,eax
c000b2a4:	50                   	push   eax
c000b2a5:	e8 48 07 00 00       	call   c000b9f2 <File::File(char const*, Process*, bool)>
c000b2aa:	83 c4 20             	add    esp,0x20
c000b2ad:	85 db                	test   ebx,ebx
c000b2af:	b8 01 00 00 00       	mov    eax,0x1
c000b2b4:	0f 84 fb 00 00 00    	je     c000b3b5 <KeCreateSymlink(char const*, char const*)+0x134>
c000b2ba:	52                   	push   edx
c000b2bb:	52                   	push   edx
c000b2bc:	6a 12                	push   0x12
c000b2be:	53                   	push   ebx
c000b2bf:	e8 2a 08 00 00       	call   c000baee <File::open(FileOpenMode)>
c000b2c4:	83 c4 10             	add    esp,0x10
c000b2c7:	85 c0                	test   eax,eax
c000b2c9:	74 0b                	je     c000b2d6 <KeCreateSymlink(char const*, char const*)+0x55>
c000b2cb:	83 ec 0c             	sub    esp,0xc
c000b2ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2d0:	53                   	push   ebx
c000b2d1:	e9 d4 00 00 00       	jmp    c000b3aa <KeCreateSymlink(char const*, char const*)+0x129>
c000b2d6:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b2da:	be cb 17 02 c0       	mov    esi,0xc00217cb
c000b2df:	b9 09 00 00 00       	mov    ecx,0x9
c000b2e4:	fc                   	cld    
c000b2e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b2e7:	83 ec 0c             	sub    esp,0xc
c000b2ea:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b2ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2f0:	56                   	push   esi
c000b2f1:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b2f5:	52                   	push   edx
c000b2f6:	6a 00                	push   0x0
c000b2f8:	6a 08                	push   0x8
c000b2fa:	53                   	push   ebx
c000b2fb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b2fe:	83 c4 20             	add    esp,0x20
c000b301:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b306:	0f 85 90 00 00 00    	jne    c000b39c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b30c:	85 c0                	test   eax,eax
c000b30e:	0f 85 88 00 00 00    	jne    c000b39c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b314:	e8 70 fb ff ff       	call   c000ae89 <KiCreateSymlinkID()>
c000b319:	83 ec 0c             	sub    esp,0xc
c000b31c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b320:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b324:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b326:	56                   	push   esi
c000b327:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b32b:	52                   	push   edx
c000b32c:	6a 00                	push   0x0
c000b32e:	6a 08                	push   0x8
c000b330:	53                   	push   ebx
c000b331:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b334:	83 c4 20             	add    esp,0x20
c000b337:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b33c:	75 5e                	jne    c000b39c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b33e:	85 c0                	test   eax,eax
c000b340:	75 5a                	jne    c000b39c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b342:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b344:	83 ec 0c             	sub    esp,0xc
c000b347:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b34a:	55                   	push   ebp
c000b34b:	e8 30 52 ff ff       	call   c0000580 <strlen>
c000b350:	31 d2                	xor    edx,edx
c000b352:	89 34 24             	mov    DWORD PTR [esp],esi
c000b355:	55                   	push   ebp
c000b356:	52                   	push   edx
c000b357:	50                   	push   eax
c000b358:	53                   	push   ebx
c000b359:	ff d7                	call   edi
c000b35b:	83 c4 14             	add    esp,0x14
c000b35e:	55                   	push   ebp
c000b35f:	89 c6                	mov    esi,eax
c000b361:	e8 1a 52 ff ff       	call   c0000580 <strlen>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b36d:	75 2d                	jne    c000b39c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b36f:	85 f6                	test   esi,esi
c000b371:	75 29                	jne    c000b39c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b373:	50                   	push   eax
c000b374:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b378:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b37c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b380:	e8 6f fb ff ff       	call   c000aef4 <KeRegisterSymlink(char const*, unsigned long long)>
c000b385:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b388:	e8 bf 07 00 00       	call   c000bb4c <File::close()>
c000b38d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b38f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b392:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b395:	83 c4 10             	add    esp,0x10
c000b398:	31 c0                	xor    eax,eax
c000b39a:	eb 19                	jmp    c000b3b5 <KeCreateSymlink(char const*, char const*)+0x134>
c000b39c:	83 ec 0c             	sub    esp,0xc
c000b39f:	53                   	push   ebx
c000b3a0:	e8 a7 07 00 00       	call   c000bb4c <File::close()>
c000b3a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	b8 01 00 00 00       	mov    eax,0x1
c000b3b5:	83 c4 2c             	add    esp,0x2c
c000b3b8:	5b                   	pop    ebx
c000b3b9:	5e                   	pop    esi
c000b3ba:	5f                   	pop    edi
c000b3bb:	5d                   	pop    ebp
c000b3bc:	c3                   	ret    

c000b3bd <KeInitialiseSymlinks()>:
c000b3bd:	57                   	push   edi
c000b3be:	56                   	push   esi
c000b3bf:	53                   	push   ebx
c000b3c0:	81 ec 14 01 00 00    	sub    esp,0x114
c000b3c6:	68 00 20 00 00       	push   0x2000
c000b3cb:	6a 00                	push   0x0
c000b3cd:	68 00 74 02 c0       	push   0xc0027400
c000b3d2:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b3dc:	e8 0f 51 ff ff       	call   c00004f0 <memset>
c000b3e1:	5f                   	pop    edi
c000b3e2:	58                   	pop    eax
c000b3e3:	6a 00                	push   0x0
c000b3e5:	68 63 ae 00 c0       	push   0xc000ae63
c000b3ea:	e8 17 59 00 00       	call   c0010d06 <KeRegisterAtexit(void (*)(void*), void*)>
c000b3ef:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b3f6:	e8 d8 c6 ff ff       	call   c0007ad3 <malloc>
c000b3fb:	83 c4 0c             	add    esp,0xc
c000b3fe:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b404:	68 ef 16 02 c0       	push   0xc00216ef
c000b409:	50                   	push   eax
c000b40a:	89 c3                	mov    ebx,eax
c000b40c:	e8 bf 06 00 00       	call   c000bad0 <File::File(char const*, Process*)>
c000b411:	83 c4 10             	add    esp,0x10
c000b414:	85 db                	test   ebx,ebx
c000b416:	75 10                	jne    c000b428 <KeInitialiseSymlinks()+0x6b>
c000b418:	83 ec 0c             	sub    esp,0xc
c000b41b:	68 d4 17 02 c0       	push   0xc00217d4
c000b420:	e8 f2 60 00 00       	call   c0011517 <KePanic(char const*)>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	83 ec 0c             	sub    esp,0xc
c000b42b:	53                   	push   ebx
c000b42c:	e8 81 09 00 00       	call   c000bdb2 <File::exists()>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	84 c0                	test   al,al
c000b436:	75 3a                	jne    c000b472 <KeInitialiseSymlinks()+0xb5>
c000b438:	56                   	push   esi
c000b439:	56                   	push   esi
c000b43a:	6a 12                	push   0x12
c000b43c:	53                   	push   ebx
c000b43d:	e8 ac 06 00 00       	call   c000baee <File::open(FileOpenMode)>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	85 c0                	test   eax,eax
c000b447:	74 10                	je     c000b459 <KeInitialiseSymlinks()+0x9c>
c000b449:	83 ec 0c             	sub    esp,0xc
c000b44c:	68 f1 17 02 c0       	push   0xc00217f1
c000b451:	e8 c1 60 00 00       	call   c0011517 <KePanic(char const*)>
c000b456:	83 c4 10             	add    esp,0x10
c000b459:	83 ec 0c             	sub    esp,0xc
c000b45c:	53                   	push   ebx
c000b45d:	e8 ea 06 00 00       	call   c000bb4c <File::close()>
c000b462:	83 c4 10             	add    esp,0x10
c000b465:	85 db                	test   ebx,ebx
c000b467:	0f 84 a5 00 00 00    	je     c000b512 <KeInitialiseSymlinks()+0x155>
c000b46d:	e9 94 00 00 00       	jmp    c000b506 <KeInitialiseSymlinks()+0x149>
c000b472:	51                   	push   ecx
c000b473:	51                   	push   ecx
c000b474:	6a 01                	push   0x1
c000b476:	53                   	push   ebx
c000b477:	e8 72 06 00 00       	call   c000baee <File::open(FileOpenMode)>
c000b47c:	83 c4 10             	add    esp,0x10
c000b47f:	85 c0                	test   eax,eax
c000b481:	74 10                	je     c000b493 <KeInitialiseSymlinks()+0xd6>
c000b483:	83 ec 0c             	sub    esp,0xc
c000b486:	68 0e 18 02 c0       	push   0xc002180e
c000b48b:	e8 87 60 00 00       	call   c0011517 <KePanic(char const*)>
c000b490:	83 c4 10             	add    esp,0x10
c000b493:	83 ec 0c             	sub    esp,0xc
c000b496:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b498:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b49c:	57                   	push   edi
c000b49d:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b4a1:	56                   	push   esi
c000b4a2:	6a 00                	push   0x0
c000b4a4:	68 00 01 00 00       	push   0x100
c000b4a9:	53                   	push   ebx
c000b4aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b4ad:	83 c4 20             	add    esp,0x20
c000b4b0:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b4b8:	75 40                	jne    c000b4fa <KeInitialiseSymlinks()+0x13d>
c000b4ba:	83 ec 0c             	sub    esp,0xc
c000b4bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4bf:	57                   	push   edi
c000b4c0:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b4c4:	52                   	push   edx
c000b4c5:	6a 00                	push   0x0
c000b4c7:	6a 08                	push   0x8
c000b4c9:	53                   	push   ebx
c000b4ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b4cd:	83 c4 20             	add    esp,0x20
c000b4d0:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4d5:	75 23                	jne    c000b4fa <KeInitialiseSymlinks()+0x13d>
c000b4d7:	52                   	push   edx
c000b4d8:	52                   	push   edx
c000b4d9:	56                   	push   esi
c000b4da:	68 29 18 02 c0       	push   0xc0021829
c000b4df:	e8 26 f4 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b4e4:	89 f0                	mov    eax,esi
c000b4e6:	e8 7d f9 ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000b4eb:	ba 01 00 00 00       	mov    edx,0x1
c000b4f0:	0f b7 c0             	movzx  eax,ax
c000b4f3:	e8 36 f8 ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000b4f8:	eb 96                	jmp    c000b490 <KeInitialiseSymlinks()+0xd3>
c000b4fa:	83 ec 0c             	sub    esp,0xc
c000b4fd:	53                   	push   ebx
c000b4fe:	e8 49 06 00 00       	call   c000bb4c <File::close()>
c000b503:	83 c4 10             	add    esp,0x10
c000b506:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b508:	83 ec 0c             	sub    esp,0xc
c000b50b:	53                   	push   ebx
c000b50c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b50f:	83 c4 10             	add    esp,0x10
c000b512:	50                   	push   eax
c000b513:	50                   	push   eax
c000b514:	68 61 18 02 c0       	push   0xc0021861
c000b519:	68 6f 18 02 c0       	push   0xc002186f
c000b51e:	e8 5e fd ff ff       	call   c000b281 <KeCreateSymlink(char const*, char const*)>
c000b523:	81 c4 20 01 00 00    	add    esp,0x120
c000b529:	5b                   	pop    ebx
c000b52a:	5e                   	pop    esi
c000b52b:	5f                   	pop    edi
c000b52c:	c3                   	ret    
c000b52d:	90                   	nop

c000b52e <File::read(unsigned long long, void*, int*)>:
c000b52e:	53                   	push   ebx
c000b52f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b533:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b537:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b53e:	83 f8 19             	cmp    eax,0x19
c000b541:	77 35                	ja     c000b578 <File::read(unsigned long long, void*, int*)+0x4a>
c000b543:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b54a:	85 c0                	test   eax,eax
c000b54c:	74 2a                	je     c000b578 <File::read(unsigned long long, void*, int*)+0x4a>
c000b54e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b554:	85 c0                	test   eax,eax
c000b556:	74 20                	je     c000b578 <File::read(unsigned long long, void*, int*)+0x4a>
c000b558:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b55c:	74 21                	je     c000b57f <File::read(unsigned long long, void*, int*)+0x51>
c000b55e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b560:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b564:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b56a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b56e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b572:	5b                   	pop    ebx
c000b573:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b576:	ff e0                	jmp    eax
c000b578:	b8 0b 00 00 00       	mov    eax,0xb
c000b57d:	eb 05                	jmp    c000b584 <File::read(unsigned long long, void*, int*)+0x56>
c000b57f:	b8 05 00 00 00       	mov    eax,0x5
c000b584:	5b                   	pop    ebx
c000b585:	c3                   	ret    

c000b586 <File::write(unsigned long long, void*, int*)>:
c000b586:	53                   	push   ebx
c000b587:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b58b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b58f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b596:	83 f8 19             	cmp    eax,0x19
c000b599:	77 35                	ja     c000b5d0 <File::write(unsigned long long, void*, int*)+0x4a>
c000b59b:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5a2:	85 c0                	test   eax,eax
c000b5a4:	74 2a                	je     c000b5d0 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5a6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5ac:	85 c0                	test   eax,eax
c000b5ae:	74 20                	je     c000b5d0 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5b0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5b4:	74 21                	je     c000b5d7 <File::write(unsigned long long, void*, int*)+0x51>
c000b5b6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5b8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5bc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5ca:	5b                   	pop    ebx
c000b5cb:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b5ce:	ff e0                	jmp    eax
c000b5d0:	b8 0b 00 00 00       	mov    eax,0xb
c000b5d5:	eb 05                	jmp    c000b5dc <File::write(unsigned long long, void*, int*)+0x56>
c000b5d7:	b8 05 00 00 00       	mov    eax,0x5
c000b5dc:	5b                   	pop    ebx
c000b5dd:	c3                   	ret    

c000b5de <Directory::read(unsigned long long, void*, int*)>:
c000b5de:	53                   	push   ebx
c000b5df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5e3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5e7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5ee:	83 f8 19             	cmp    eax,0x19
c000b5f1:	77 35                	ja     c000b628 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b5f3:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5fa:	85 c0                	test   eax,eax
c000b5fc:	74 2a                	je     c000b628 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b5fe:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b604:	85 c0                	test   eax,eax
c000b606:	74 20                	je     c000b628 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b608:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b60c:	74 21                	je     c000b62f <Directory::read(unsigned long long, void*, int*)+0x51>
c000b60e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b610:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b614:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b61a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b622:	5b                   	pop    ebx
c000b623:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b626:	ff e0                	jmp    eax
c000b628:	b8 0b 00 00 00       	mov    eax,0xb
c000b62d:	eb 05                	jmp    c000b634 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b62f:	b8 05 00 00 00       	mov    eax,0x5
c000b634:	5b                   	pop    ebx
c000b635:	c3                   	ret    

c000b636 <Directory::write(unsigned long long, void*, int*)>:
c000b636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b63a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b641:	b8 0b 00 00 00       	mov    eax,0xb
c000b646:	83 fa 19             	cmp    edx,0x19
c000b649:	77 18                	ja     c000b663 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b64b:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b652:	85 d2                	test   edx,edx
c000b654:	74 0d                	je     c000b663 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b656:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b65d:	19 c0                	sbb    eax,eax
c000b65f:	83 e0 0a             	and    eax,0xa
c000b662:	40                   	inc    eax
c000b663:	c3                   	ret    

c000b664 <File::isAtty()>:
c000b664:	31 c0                	xor    eax,eax
c000b666:	c3                   	ret    
c000b667:	90                   	nop

c000b668 <Directory::isAtty()>:
c000b668:	31 c0                	xor    eax,eax
c000b66a:	c3                   	ret    
c000b66b:	90                   	nop

c000b66c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b66c:	b8 0a 00 00 00       	mov    eax,0xa
c000b671:	c3                   	ret    

c000b672 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b672:	b8 0a 00 00 00       	mov    eax,0xa
c000b677:	c3                   	ret    

c000b678 <Filesystem::allocateSwapfile(char const*, int)>:
c000b678:	31 c0                	xor    eax,eax
c000b67a:	31 d2                	xor    edx,edx
c000b67c:	c3                   	ret    
c000b67d:	90                   	nop

c000b67e <File::~File()>:
c000b67e:	83 ec 0c             	sub    esp,0xc
c000b681:	ba 40 19 02 c0       	mov    edx,0xc0021940
c000b686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b68a:	89 10                	mov    DWORD PTR [eax],edx
c000b68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b690:	83 ec 0c             	sub    esp,0xc
c000b693:	50                   	push   eax
c000b694:	e8 f3 dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b699:	83 c4 10             	add    esp,0x10
c000b69c:	90                   	nop
c000b69d:	83 c4 0c             	add    esp,0xc
c000b6a0:	c3                   	ret    
c000b6a1:	90                   	nop

c000b6a2 <File::~File()>:
c000b6a2:	83 ec 0c             	sub    esp,0xc
c000b6a5:	83 ec 0c             	sub    esp,0xc
c000b6a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ac:	e8 cd ff ff ff       	call   c000b67e <File::~File()>
c000b6b1:	83 c4 10             	add    esp,0x10
c000b6b4:	83 ec 08             	sub    esp,0x8
c000b6b7:	68 14 01 00 00       	push   0x114
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	e8 47 f1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b6c5:	83 c4 10             	add    esp,0x10
c000b6c8:	83 c4 0c             	add    esp,0xc
c000b6cb:	c3                   	ret    

c000b6cc <Directory::~Directory()>:
c000b6cc:	83 ec 0c             	sub    esp,0xc
c000b6cf:	ba 5c 19 02 c0       	mov    edx,0xc002195c
c000b6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6d8:	89 10                	mov    DWORD PTR [eax],edx
c000b6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6de:	83 ec 0c             	sub    esp,0xc
c000b6e1:	50                   	push   eax
c000b6e2:	e8 a5 dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b6e7:	83 c4 10             	add    esp,0x10
c000b6ea:	90                   	nop
c000b6eb:	83 c4 0c             	add    esp,0xc
c000b6ee:	c3                   	ret    
c000b6ef:	90                   	nop

c000b6f0 <Directory::~Directory()>:
c000b6f0:	83 ec 0c             	sub    esp,0xc
c000b6f3:	83 ec 0c             	sub    esp,0xc
c000b6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fa:	e8 cd ff ff ff       	call   c000b6cc <Directory::~Directory()>
c000b6ff:	83 c4 10             	add    esp,0x10
c000b702:	83 ec 08             	sub    esp,0x8
c000b705:	68 14 01 00 00       	push   0x114
c000b70a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b70e:	e8 f9 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b713:	83 c4 10             	add    esp,0x10
c000b716:	83 c4 0c             	add    esp,0xc
c000b719:	c3                   	ret    

c000b71a <Filesystem::Filesystem()>:
c000b71a:	ba d4 18 02 c0       	mov    edx,0xc00218d4
c000b71f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b723:	89 10                	mov    DWORD PTR [eax],edx
c000b725:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b72b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b72f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b736:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b73b:	90                   	nop
c000b73c:	c3                   	ret    
c000b73d:	90                   	nop

c000b73e <Filesystem::~Filesystem()>:
c000b73e:	ba d4 18 02 c0       	mov    edx,0xc00218d4
c000b743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b747:	89 10                	mov    DWORD PTR [eax],edx
c000b749:	90                   	nop
c000b74a:	c3                   	ret    
c000b74b:	90                   	nop

c000b74c <Filesystem::~Filesystem()>:
c000b74c:	83 ec 0c             	sub    esp,0xc
c000b74f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b753:	e8 e6 ff ff ff       	call   c000b73e <Filesystem::~Filesystem()>
c000b758:	83 c4 04             	add    esp,0x4
c000b75b:	83 ec 08             	sub    esp,0x8
c000b75e:	6a 08                	push   0x8
c000b760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b764:	e8 a3 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b769:	83 c4 10             	add    esp,0x10
c000b76c:	83 c4 0c             	add    esp,0xc
c000b76f:	c3                   	ret    

c000b770 <Fs::getcwd(Process*, char*, int)>:
c000b770:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b774:	31 c0                	xor    eax,eax
c000b776:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b77a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b77d:	7d 15                	jge    c000b794 <Fs::getcwd(Process*, char*, int)+0x24>
c000b77f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b783:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b78a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b78d:	84 c9                	test   cl,cl
c000b78f:	74 06                	je     c000b797 <Fs::getcwd(Process*, char*, int)+0x27>
c000b791:	40                   	inc    eax
c000b792:	eb e2                	jmp    c000b776 <Fs::getcwd(Process*, char*, int)+0x6>
c000b794:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b797:	31 c0                	xor    eax,eax
c000b799:	c3                   	ret    

c000b79a <Fs::initVFS()>:
c000b79a:	83 ec 18             	sub    esp,0x18
c000b79d:	6a 08                	push   0x8
c000b79f:	e8 2f c3 ff ff       	call   c0007ad3 <malloc>
c000b7a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7a7:	e8 c8 e3 00 00       	call   c0019b74 <FAT::FAT()>
c000b7ac:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b7b3:	e8 1b c3 ff ff       	call   c0007ad3 <malloc>
c000b7b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7bb:	e8 e2 f2 00 00       	call   c001aaa2 <ISO9660::ISO9660()>
c000b7c0:	83 c4 1c             	add    esp,0x1c
c000b7c3:	c3                   	ret    

c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b7c4:	55                   	push   ebp
c000b7c5:	57                   	push   edi
c000b7c6:	56                   	push   esi
c000b7c7:	53                   	push   ebx
c000b7c8:	81 ec 20 04 00 00    	sub    esp,0x420
c000b7ce:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b7d5:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b7dc:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b7e3:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b7ea:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b7ee:	68 00 04 00 00       	push   0x400
c000b7f3:	6a 00                	push   0x0
c000b7f5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b7f9:	57                   	push   edi
c000b7fa:	e8 f1 4c ff ff       	call   c00004f0 <memset>
c000b7ff:	83 c4 10             	add    esp,0x10
c000b802:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b806:	75 0b                	jne    c000b813 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b808:	50                   	push   eax
c000b809:	50                   	push   eax
c000b80a:	56                   	push   esi
c000b80b:	57                   	push   edi
c000b80c:	e8 3f 4e ff ff       	call   c0000650 <strcpy>
c000b811:	eb 45                	jmp    c000b858 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b813:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b816:	83 f8 2f             	cmp    eax,0x2f
c000b819:	74 05                	je     c000b820 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b81b:	83 f8 5c             	cmp    eax,0x5c
c000b81e:	75 19                	jne    c000b839 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b820:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b823:	3c 60                	cmp    al,0x60
c000b825:	7e 03                	jle    c000b82a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b827:	83 e8 20             	sub    eax,0x20
c000b82a:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b82e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b835:	50                   	push   eax
c000b836:	50                   	push   eax
c000b837:	eb 18                	jmp    c000b851 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b839:	50                   	push   eax
c000b83a:	50                   	push   eax
c000b83b:	55                   	push   ebp
c000b83c:	57                   	push   edi
c000b83d:	e8 0e 4e ff ff       	call   c0000650 <strcpy>
c000b842:	58                   	pop    eax
c000b843:	5a                   	pop    edx
c000b844:	68 83 28 02 c0       	push   0xc0022883
c000b849:	57                   	push   edi
c000b84a:	e8 21 50 ff ff       	call   c0000870 <strcat>
c000b84f:	59                   	pop    ecx
c000b850:	5d                   	pop    ebp
c000b851:	56                   	push   esi
c000b852:	57                   	push   edi
c000b853:	e8 18 50 ff ff       	call   c0000870 <strcat>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b85f:	3c 60                	cmp    al,0x60
c000b861:	7e 03                	jle    c000b866 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b863:	83 e8 20             	sub    eax,0x20
c000b866:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b86a:	be 03 00 00 00       	mov    esi,0x3
c000b86f:	88 03                	mov    BYTE PTR [ebx],al
c000b871:	b8 03 00 00 00       	mov    eax,0x3
c000b876:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b87d:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b883:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b887:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b88c:	89 fa                	mov    edx,edi
c000b88e:	0f be ea             	movsx  ebp,dl
c000b891:	85 ed                	test   ebp,ebp
c000b893:	0f 84 a1 00 00 00    	je     c000b93a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b899:	8d 56 01             	lea    edx,[esi+0x1]
c000b89c:	83 fd 2f             	cmp    ebp,0x2f
c000b89f:	74 05                	je     c000b8a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b8a1:	83 fd 5c             	cmp    ebp,0x5c
c000b8a4:	75 12                	jne    c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b8a6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b8ab:	89 c5                	mov    ebp,eax
c000b8ad:	74 09                	je     c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b8af:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b8b3:	40                   	inc    eax
c000b8b4:	89 d6                	mov    esi,edx
c000b8b6:	eb cf                	jmp    c000b887 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b8b8:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b8bd:	89 f9                	mov    ecx,edi
c000b8bf:	0f be e9             	movsx  ebp,cl
c000b8c2:	75 61                	jne    c000b925 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b8c4:	83 fd 2e             	cmp    ebp,0x2e
c000b8c7:	75 5c                	jne    c000b925 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b8c9:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b8ce:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b8d3:	74 19                	je     c000b8ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b8d5:	83 fd 2e             	cmp    ebp,0x2e
c000b8d8:	74 55                	je     c000b92f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b8da:	89 f2                	mov    edx,esi
c000b8dc:	42                   	inc    edx
c000b8dd:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b8e2:	83 f9 2f             	cmp    ecx,0x2f
c000b8e5:	74 f5                	je     c000b8dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b8e7:	83 f9 5c             	cmp    ecx,0x5c
c000b8ea:	74 f0                	je     c000b8dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b8ec:	eb c6                	jmp    c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b8ee:	83 fd 2e             	cmp    ebp,0x2e
c000b8f1:	74 3c                	je     c000b92f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b8f3:	83 f8 03             	cmp    eax,0x3
c000b8f6:	74 bc                	je     c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b8f8:	42                   	inc    edx
c000b8f9:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b8fe:	83 f9 2f             	cmp    ecx,0x2f
c000b901:	74 f5                	je     c000b8f8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b903:	83 f9 5c             	cmp    ecx,0x5c
c000b906:	74 f0                	je     c000b8f8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b908:	48                   	dec    eax
c000b909:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b90d:	75 06                	jne    c000b915 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b90f:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b913:	eb f3                	jmp    c000b908 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b915:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b919:	74 07                	je     c000b922 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b91b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b91f:	48                   	dec    eax
c000b920:	eb f3                	jmp    c000b915 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b922:	40                   	inc    eax
c000b923:	eb 8f                	jmp    c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b925:	83 fd 2f             	cmp    ebp,0x2f
c000b928:	74 8a                	je     c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b92a:	83 fd 5c             	cmp    ebp,0x5c
c000b92d:	74 85                	je     c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b92f:	89 f9                	mov    ecx,edi
c000b931:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b934:	40                   	inc    eax
c000b935:	e9 7a ff ff ff       	jmp    c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b93a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b93e:	83 ec 0c             	sub    esp,0xc
c000b941:	53                   	push   ebx
c000b942:	e8 39 4c ff ff       	call   c0000580 <strlen>
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b94f:	74 1c                	je     c000b96d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b951:	83 ec 0c             	sub    esp,0xc
c000b954:	53                   	push   ebx
c000b955:	e8 26 4c ff ff       	call   c0000580 <strlen>
c000b95a:	83 c4 10             	add    esp,0x10
c000b95d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b962:	74 09                	je     c000b96d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b964:	31 ff                	xor    edi,edi
c000b966:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b96b:	eb 5c                	jmp    c000b9c9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000b96d:	83 ec 0c             	sub    esp,0xc
c000b970:	53                   	push   ebx
c000b971:	e8 0a 4c ff ff       	call   c0000580 <strlen>
c000b976:	83 c4 10             	add    esp,0x10
c000b979:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b97e:	74 e4                	je     c000b964 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000b980:	83 ec 0c             	sub    esp,0xc
c000b983:	53                   	push   ebx
c000b984:	e8 f7 4b ff ff       	call   c0000580 <strlen>
c000b989:	83 c4 10             	add    esp,0x10
c000b98c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b991:	eb ab                	jmp    c000b93e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000b993:	52                   	push   edx
c000b994:	52                   	push   edx
c000b995:	53                   	push   ebx
c000b996:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b99a:	55                   	push   ebp
c000b99b:	e8 b0 4c ff ff       	call   c0000650 <strcpy>
c000b9a0:	59                   	pop    ecx
c000b9a1:	58                   	pop    eax
c000b9a2:	53                   	push   ebx
c000b9a3:	55                   	push   ebp
c000b9a4:	e8 44 f7 ff ff       	call   c000b0ed <KeDereferenceSymlink(char const*, char*)>
c000b9a9:	83 c4 10             	add    esp,0x10
c000b9ac:	48                   	dec    eax
c000b9ad:	75 37                	jne    c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000b9af:	50                   	push   eax
c000b9b0:	53                   	push   ebx
c000b9b1:	55                   	push   ebp
c000b9b2:	68 8d 18 02 c0       	push   0xc002188d
c000b9b7:	e8 4e ef ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b9bc:	8d 47 01             	lea    eax,[edi+0x1]
c000b9bf:	83 c4 10             	add    esp,0x10
c000b9c2:	83 ff 14             	cmp    edi,0x14
c000b9c5:	74 08                	je     c000b9cf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000b9c7:	89 c7                	mov    edi,eax
c000b9c9:	85 f6                	test   esi,esi
c000b9cb:	75 c6                	jne    c000b993 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000b9cd:	eb 17                	jmp    c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000b9cf:	83 ec 0c             	sub    esp,0xc
c000b9d2:	bf 15 00 00 00       	mov    edi,0x15
c000b9d7:	68 a4 18 02 c0       	push   0xc00218a4
c000b9dc:	e8 36 5b 00 00       	call   c0011517 <KePanic(char const*)>
c000b9e1:	83 c4 10             	add    esp,0x10
c000b9e4:	eb e3                	jmp    c000b9c9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000b9e6:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b9ec:	5b                   	pop    ebx
c000b9ed:	5e                   	pop    esi
c000b9ee:	5f                   	pop    edi
c000b9ef:	5d                   	pop    ebp
c000b9f0:	c3                   	ret    
c000b9f1:	90                   	nop

c000b9f2 <File::File(char const*, Process*, bool)>:
c000b9f2:	83 ec 1c             	sub    esp,0x1c
c000b9f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9f9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b9fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba01:	83 ec 08             	sub    esp,0x8
c000ba04:	6a 00                	push   0x0
c000ba06:	50                   	push   eax
c000ba07:	e8 9a d7 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000ba0c:	83 c4 10             	add    esp,0x10
c000ba0f:	ba 40 19 02 c0       	mov    edx,0xc0021940
c000ba14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba18:	89 10                	mov    DWORD PTR [eax],edx
c000ba1a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	74 0f                	je     c000ba32 <File::File(char const*, Process*, bool)+0x40>
c000ba23:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ba28:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ba2c:	74 04                	je     c000ba32 <File::File(char const*, Process*, bool)+0x40>
c000ba2e:	b0 01                	mov    al,0x1
c000ba30:	eb 02                	jmp    c000ba34 <File::File(char const*, Process*, bool)+0x42>
c000ba32:	b0 00                	mov    al,0x0
c000ba34:	0f b6 c0             	movzx  eax,al
c000ba37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba3b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000ba41:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba45:	83 c2 0d             	add    edx,0xd
c000ba48:	50                   	push   eax
c000ba49:	51                   	push   ecx
c000ba4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba4e:	52                   	push   edx
c000ba4f:	e8 70 fd ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba5b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ba5e:	83 e8 41             	sub    eax,0x41
c000ba61:	88 c2                	mov    dl,al
c000ba63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba67:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ba6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba71:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ba75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba79:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ba7f:	0f b6 c0             	movzx  eax,al
c000ba82:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000ba89:	85 c0                	test   eax,eax
c000ba8b:	74 3e                	je     c000bacb <File::File(char const*, Process*, bool)+0xd9>
c000ba8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba91:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ba97:	0f b6 c0             	movzx  eax,al
c000ba9a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000baa1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000baa7:	85 c0                	test   eax,eax
c000baa9:	75 20                	jne    c000bacb <File::File(char const*, Process*, bool)+0xd9>
c000baab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baaf:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bab5:	0f b6 c0             	movzx  eax,al
c000bab8:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000babf:	83 ec 0c             	sub    esp,0xc
c000bac2:	50                   	push   eax
c000bac3:	e8 b0 21 00 00       	call   c000dc78 <LogicalDisk::mount()>
c000bac8:	83 c4 10             	add    esp,0x10
c000bacb:	90                   	nop
c000bacc:	83 c4 1c             	add    esp,0x1c
c000bacf:	c3                   	ret    

c000bad0 <File::File(char const*, Process*)>:
c000bad0:	83 ec 0c             	sub    esp,0xc
c000bad3:	6a 01                	push   0x1
c000bad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bae1:	e8 0c ff ff ff       	call   c000b9f2 <File::File(char const*, Process*, bool)>
c000bae6:	83 c4 10             	add    esp,0x10
c000bae9:	90                   	nop
c000baea:	83 c4 0c             	add    esp,0xc
c000baed:	c3                   	ret    

c000baee <File::open(FileOpenMode)>:
c000baee:	53                   	push   ebx
c000baef:	b8 0b 00 00 00       	mov    eax,0xb
c000baf4:	83 ec 08             	sub    esp,0x8
c000baf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bafb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb02:	83 fa 19             	cmp    edx,0x19
c000bb05:	77 40                	ja     c000bb47 <File::open(FileOpenMode)+0x59>
c000bb07:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb0e:	85 d2                	test   edx,edx
c000bb10:	74 35                	je     c000bb47 <File::open(FileOpenMode)+0x59>
c000bb12:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb18:	85 d2                	test   edx,edx
c000bb1a:	74 2b                	je     c000bb47 <File::open(FileOpenMode)+0x59>
c000bb1c:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bb20:	b8 06 00 00 00       	mov    eax,0x6
c000bb25:	75 20                	jne    c000bb47 <File::open(FileOpenMode)+0x59>
c000bb27:	8b 02                	mov    eax,DWORD PTR [edx]
c000bb29:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bb2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb33:	51                   	push   ecx
c000bb34:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bb37:	51                   	push   ecx
c000bb38:	52                   	push   edx
c000bb39:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb3c:	83 c4 10             	add    esp,0x10
c000bb3f:	85 c0                	test   eax,eax
c000bb41:	75 04                	jne    c000bb47 <File::open(FileOpenMode)+0x59>
c000bb43:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bb47:	83 c4 08             	add    esp,0x8
c000bb4a:	5b                   	pop    ebx
c000bb4b:	c3                   	ret    

c000bb4c <File::close()>:
c000bb4c:	53                   	push   ebx
c000bb4d:	b8 0b 00 00 00       	mov    eax,0xb
c000bb52:	83 ec 08             	sub    esp,0x8
c000bb55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb59:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb60:	83 f9 19             	cmp    ecx,0x19
c000bb63:	77 41                	ja     c000bba6 <File::close()+0x5a>
c000bb65:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bb6c:	85 db                	test   ebx,ebx
c000bb6e:	74 36                	je     c000bba6 <File::close()+0x5a>
c000bb70:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bb77:	74 2d                	je     c000bba6 <File::close()+0x5a>
c000bb79:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb7d:	b8 05 00 00 00       	mov    eax,0x5
c000bb82:	74 22                	je     c000bba6 <File::close()+0x5a>
c000bb84:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bb88:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bb8f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb95:	53                   	push   ebx
c000bb96:	53                   	push   ebx
c000bb97:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bb99:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bb9f:	50                   	push   eax
c000bba0:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bba3:	83 c4 10             	add    esp,0x10
c000bba6:	83 c4 08             	add    esp,0x8
c000bba9:	5b                   	pop    ebx
c000bbaa:	c3                   	ret    
c000bbab:	90                   	nop

c000bbac <File::seek(unsigned long long)>:
c000bbac:	56                   	push   esi
c000bbad:	b8 0b 00 00 00       	mov    eax,0xb
c000bbb2:	53                   	push   ebx
c000bbb3:	51                   	push   ecx
c000bbb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bbb8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bbbc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbc0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bbc7:	83 fa 19             	cmp    edx,0x19
c000bbca:	77 31                	ja     c000bbfd <File::seek(unsigned long long)+0x51>
c000bbcc:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bbd3:	85 d2                	test   edx,edx
c000bbd5:	74 26                	je     c000bbfd <File::seek(unsigned long long)+0x51>
c000bbd7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bbdd:	85 d2                	test   edx,edx
c000bbdf:	74 1c                	je     c000bbfd <File::seek(unsigned long long)+0x51>
c000bbe1:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bbe5:	b8 05 00 00 00       	mov    eax,0x5
c000bbea:	74 11                	je     c000bbfd <File::seek(unsigned long long)+0x51>
c000bbec:	8b 02                	mov    eax,DWORD PTR [edx]
c000bbee:	53                   	push   ebx
c000bbef:	51                   	push   ecx
c000bbf0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bbf6:	52                   	push   edx
c000bbf7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bbfa:	83 c4 10             	add    esp,0x10
c000bbfd:	5a                   	pop    edx
c000bbfe:	5b                   	pop    ebx
c000bbff:	5e                   	pop    esi
c000bc00:	c3                   	ret    
c000bc01:	90                   	nop

c000bc02 <File::truncate(unsigned long long)>:
c000bc02:	56                   	push   esi
c000bc03:	b8 0b 00 00 00       	mov    eax,0xb
c000bc08:	53                   	push   ebx
c000bc09:	51                   	push   ecx
c000bc0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc12:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc16:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc1d:	83 fa 19             	cmp    edx,0x19
c000bc20:	77 31                	ja     c000bc53 <File::truncate(unsigned long long)+0x51>
c000bc22:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc29:	85 d2                	test   edx,edx
c000bc2b:	74 26                	je     c000bc53 <File::truncate(unsigned long long)+0x51>
c000bc2d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc33:	85 d2                	test   edx,edx
c000bc35:	74 1c                	je     c000bc53 <File::truncate(unsigned long long)+0x51>
c000bc37:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc3b:	b8 05 00 00 00       	mov    eax,0x5
c000bc40:	74 11                	je     c000bc53 <File::truncate(unsigned long long)+0x51>
c000bc42:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc44:	53                   	push   ebx
c000bc45:	51                   	push   ecx
c000bc46:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc4c:	52                   	push   edx
c000bc4d:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bc50:	83 c4 10             	add    esp,0x10
c000bc53:	5a                   	pop    edx
c000bc54:	5b                   	pop    ebx
c000bc55:	5e                   	pop    esi
c000bc56:	c3                   	ret    
c000bc57:	90                   	nop

c000bc58 <File::tell(unsigned long long*)>:
c000bc58:	83 ec 0c             	sub    esp,0xc
c000bc5b:	b8 0b 00 00 00       	mov    eax,0xb
c000bc60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bc64:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bc6b:	83 fa 19             	cmp    edx,0x19
c000bc6e:	77 34                	ja     c000bca4 <File::tell(unsigned long long*)+0x4c>
c000bc70:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc77:	85 d2                	test   edx,edx
c000bc79:	74 29                	je     c000bca4 <File::tell(unsigned long long*)+0x4c>
c000bc7b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc81:	85 d2                	test   edx,edx
c000bc83:	74 1f                	je     c000bca4 <File::tell(unsigned long long*)+0x4c>
c000bc85:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bc89:	b8 05 00 00 00       	mov    eax,0x5
c000bc8e:	74 14                	je     c000bca4 <File::tell(unsigned long long*)+0x4c>
c000bc90:	50                   	push   eax
c000bc91:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc97:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bc9d:	52                   	push   edx
c000bc9e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bca1:	83 c4 10             	add    esp,0x10
c000bca4:	83 c4 0c             	add    esp,0xc
c000bca7:	c3                   	ret    

c000bca8 <File::rewind()>:
c000bca8:	83 ec 10             	sub    esp,0x10
c000bcab:	6a 00                	push   0x0
c000bcad:	6a 00                	push   0x0
c000bcaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcb3:	e8 f4 fe ff ff       	call   c000bbac <File::seek(unsigned long long)>
c000bcb8:	83 c4 1c             	add    esp,0x1c
c000bcbb:	c3                   	ret    

c000bcbc <File::unlink()>:
c000bcbc:	83 ec 0c             	sub    esp,0xc
c000bcbf:	b8 0b 00 00 00       	mov    eax,0xb
c000bcc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcc8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bccf:	83 f9 19             	cmp    ecx,0x19
c000bcd2:	77 2f                	ja     c000bd03 <File::unlink()+0x47>
c000bcd4:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bcdb:	85 c9                	test   ecx,ecx
c000bcdd:	74 24                	je     c000bd03 <File::unlink()+0x47>
c000bcdf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bce5:	85 c9                	test   ecx,ecx
c000bce7:	74 1a                	je     c000bd03 <File::unlink()+0x47>
c000bce9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bced:	b8 06 00 00 00       	mov    eax,0x6
c000bcf2:	75 0f                	jne    c000bd03 <File::unlink()+0x47>
c000bcf4:	50                   	push   eax
c000bcf5:	83 c2 0d             	add    edx,0xd
c000bcf8:	50                   	push   eax
c000bcf9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bcfb:	52                   	push   edx
c000bcfc:	51                   	push   ecx
c000bcfd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd00:	83 c4 10             	add    esp,0x10
c000bd03:	83 c4 0c             	add    esp,0xc
c000bd06:	c3                   	ret    
c000bd07:	90                   	nop

c000bd08 <File::rename(char const*)>:
c000bd08:	83 ec 0c             	sub    esp,0xc
c000bd0b:	b8 0b 00 00 00       	mov    eax,0xb
c000bd10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd14:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd1b:	83 f9 19             	cmp    ecx,0x19
c000bd1e:	77 32                	ja     c000bd52 <File::rename(char const*)+0x4a>
c000bd20:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd27:	85 c9                	test   ecx,ecx
c000bd29:	74 27                	je     c000bd52 <File::rename(char const*)+0x4a>
c000bd2b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd31:	85 c9                	test   ecx,ecx
c000bd33:	74 1d                	je     c000bd52 <File::rename(char const*)+0x4a>
c000bd35:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd39:	b8 06 00 00 00       	mov    eax,0x6
c000bd3e:	75 12                	jne    c000bd52 <File::rename(char const*)+0x4a>
c000bd40:	50                   	push   eax
c000bd41:	83 c2 0d             	add    edx,0xd
c000bd44:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd4a:	52                   	push   edx
c000bd4b:	51                   	push   ecx
c000bd4c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bd4f:	83 c4 10             	add    esp,0x10
c000bd52:	83 c4 0c             	add    esp,0xc
c000bd55:	c3                   	ret    

c000bd56 <File::chfatattr(unsigned char, unsigned char)>:
c000bd56:	57                   	push   edi
c000bd57:	b8 0b 00 00 00       	mov    eax,0xb
c000bd5c:	56                   	push   esi
c000bd5d:	53                   	push   ebx
c000bd5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd62:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bd66:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd6a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd71:	83 f9 19             	cmp    ecx,0x19
c000bd74:	77 37                	ja     c000bdad <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd76:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd7d:	85 c9                	test   ecx,ecx
c000bd7f:	74 2c                	je     c000bdad <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd81:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd87:	85 c9                	test   ecx,ecx
c000bd89:	74 22                	je     c000bdad <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd8b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd8f:	b8 06 00 00 00       	mov    eax,0x6
c000bd94:	75 17                	jne    c000bdad <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd96:	89 f0                	mov    eax,esi
c000bd98:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bd9a:	0f b6 db             	movzx  ebx,bl
c000bd9d:	0f b6 f0             	movzx  esi,al
c000bda0:	83 c2 0d             	add    edx,0xd
c000bda3:	56                   	push   esi
c000bda4:	53                   	push   ebx
c000bda5:	52                   	push   edx
c000bda6:	51                   	push   ecx
c000bda7:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bdaa:	83 c4 10             	add    esp,0x10
c000bdad:	5b                   	pop    ebx
c000bdae:	5e                   	pop    esi
c000bdaf:	5f                   	pop    edi
c000bdb0:	c3                   	ret    
c000bdb1:	90                   	nop

c000bdb2 <File::exists()>:
c000bdb2:	83 ec 0c             	sub    esp,0xc
c000bdb5:	31 c0                	xor    eax,eax
c000bdb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdbb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdc2:	83 f9 19             	cmp    ecx,0x19
c000bdc5:	77 24                	ja     c000bdeb <File::exists()+0x39>
c000bdc7:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdce:	85 c9                	test   ecx,ecx
c000bdd0:	74 19                	je     c000bdeb <File::exists()+0x39>
c000bdd2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdd8:	85 c9                	test   ecx,ecx
c000bdda:	74 0f                	je     c000bdeb <File::exists()+0x39>
c000bddc:	50                   	push   eax
c000bddd:	83 c2 0d             	add    edx,0xd
c000bde0:	50                   	push   eax
c000bde1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bde3:	52                   	push   edx
c000bde4:	51                   	push   ecx
c000bde5:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bde8:	83 c4 10             	add    esp,0x10
c000bdeb:	83 c4 0c             	add    esp,0xc
c000bdee:	c3                   	ret    
c000bdef:	90                   	nop

c000bdf0 <File::stat(unsigned long long*, bool*)>:
c000bdf0:	56                   	push   esi
c000bdf1:	53                   	push   ebx
c000bdf2:	50                   	push   eax
c000bdf3:	b8 0b 00 00 00       	mov    eax,0xb
c000bdf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdfc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be00:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be0b:	83 f9 19             	cmp    ecx,0x19
c000be0e:	77 3d                	ja     c000be4d <File::stat(unsigned long long*, bool*)+0x5d>
c000be10:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be17:	85 c9                	test   ecx,ecx
c000be19:	74 32                	je     c000be4d <File::stat(unsigned long long*, bool*)+0x5d>
c000be1b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be21:	85 c9                	test   ecx,ecx
c000be23:	74 28                	je     c000be4d <File::stat(unsigned long long*, bool*)+0x5d>
c000be25:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be29:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be2b:	74 13                	je     c000be40 <File::stat(unsigned long long*, bool*)+0x50>
c000be2d:	83 ec 04             	sub    esp,0x4
c000be30:	56                   	push   esi
c000be31:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be37:	51                   	push   ecx
c000be38:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000be3b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000be3e:	eb 0a                	jmp    c000be4a <File::stat(unsigned long long*, bool*)+0x5a>
c000be40:	53                   	push   ebx
c000be41:	83 c2 0d             	add    edx,0xd
c000be44:	56                   	push   esi
c000be45:	52                   	push   edx
c000be46:	51                   	push   ecx
c000be47:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000be4a:	83 c4 10             	add    esp,0x10
c000be4d:	5a                   	pop    edx
c000be4e:	5b                   	pop    ebx
c000be4f:	5e                   	pop    esi
c000be50:	c3                   	ret    

c000be51 <Fs::setcwd(Process*, char*)>:
c000be51:	55                   	push   ebp
c000be52:	57                   	push   edi
c000be53:	56                   	push   esi
c000be54:	53                   	push   ebx
c000be55:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000be5b:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000be62:	6a 00                	push   0x0
c000be64:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000be6a:	57                   	push   edi
c000be6b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000be72:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000be76:	56                   	push   esi
c000be77:	e8 48 f9 ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000be7c:	89 34 24             	mov    DWORD PTR [esp],esi
c000be7f:	e8 fc 46 ff ff       	call   c0000580 <strlen>
c000be84:	83 c4 10             	add    esp,0x10
c000be87:	83 f8 02             	cmp    eax,0x2
c000be8a:	77 15                	ja     c000bea1 <Fs::setcwd(Process*, char*)+0x50>
c000be8c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000be91:	83 eb 41             	sub    ebx,0x41
c000be94:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000be9b:	85 c0                	test   eax,eax
c000be9d:	75 1c                	jne    c000bebb <Fs::setcwd(Process*, char*)+0x6a>
c000be9f:	eb 2f                	jmp    c000bed0 <Fs::setcwd(Process*, char*)+0x7f>
c000bea1:	83 ec 0c             	sub    esp,0xc
c000bea4:	56                   	push   esi
c000bea5:	e8 d6 46 ff ff       	call   c0000580 <strlen>
c000beaa:	83 c4 10             	add    esp,0x10
c000bead:	83 f8 03             	cmp    eax,0x3
c000beb0:	75 57                	jne    c000bf09 <Fs::setcwd(Process*, char*)+0xb8>
c000beb2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000beb7:	75 50                	jne    c000bf09 <Fs::setcwd(Process*, char*)+0xb8>
c000beb9:	eb d1                	jmp    c000be8c <Fs::setcwd(Process*, char*)+0x3b>
c000bebb:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bec2:	75 0c                	jne    c000bed0 <Fs::setcwd(Process*, char*)+0x7f>
c000bec4:	83 ec 0c             	sub    esp,0xc
c000bec7:	50                   	push   eax
c000bec8:	e8 ab 1d 00 00       	call   c000dc78 <LogicalDisk::mount()>
c000becd:	83 c4 10             	add    esp,0x10
c000bed0:	83 fb 19             	cmp    ebx,0x19
c000bed3:	b8 03 00 00 00       	mov    eax,0x3
c000bed8:	0f 87 c6 00 00 00    	ja     c000bfa4 <Fs::setcwd(Process*, char*)+0x153>
c000bede:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bee5:	b8 05 00 00 00       	mov    eax,0x5
c000beea:	85 d2                	test   edx,edx
c000beec:	0f 84 b2 00 00 00    	je     c000bfa4 <Fs::setcwd(Process*, char*)+0x153>
c000bef2:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bef9:	b8 06 00 00 00       	mov    eax,0x6
c000befe:	0f 85 92 00 00 00    	jne    c000bf96 <Fs::setcwd(Process*, char*)+0x145>
c000bf04:	e9 9b 00 00 00       	jmp    c000bfa4 <Fs::setcwd(Process*, char*)+0x153>
c000bf09:	83 ec 0c             	sub    esp,0xc
c000bf0c:	68 14 01 00 00       	push   0x114
c000bf11:	e8 bd bb ff ff       	call   c0007ad3 <malloc>
c000bf16:	83 c4 0c             	add    esp,0xc
c000bf19:	55                   	push   ebp
c000bf1a:	56                   	push   esi
c000bf1b:	50                   	push   eax
c000bf1c:	89 c3                	mov    ebx,eax
c000bf1e:	e8 ad fb ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c000bf23:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bf28:	83 c4 0c             	add    esp,0xc
c000bf2b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bf2f:	50                   	push   eax
c000bf30:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bf34:	50                   	push   eax
c000bf35:	53                   	push   ebx
c000bf36:	e8 b5 fe ff ff       	call   c000bdf0 <File::stat(unsigned long long*, bool*)>
c000bf3b:	83 c4 10             	add    esp,0x10
c000bf3e:	83 f8 02             	cmp    eax,0x2
c000bf41:	74 27                	je     c000bf6a <Fs::setcwd(Process*, char*)+0x119>
c000bf43:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf48:	75 1c                	jne    c000bf66 <Fs::setcwd(Process*, char*)+0x115>
c000bf4a:	85 db                	test   ebx,ebx
c000bf4c:	b8 02 00 00 00       	mov    eax,0x2
c000bf51:	74 51                	je     c000bfa4 <Fs::setcwd(Process*, char*)+0x153>
c000bf53:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf55:	83 ec 0c             	sub    esp,0xc
c000bf58:	53                   	push   ebx
c000bf59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bf5c:	83 c4 10             	add    esp,0x10
c000bf5f:	b8 02 00 00 00       	mov    eax,0x2
c000bf64:	eb 3e                	jmp    c000bfa4 <Fs::setcwd(Process*, char*)+0x153>
c000bf66:	85 c0                	test   eax,eax
c000bf68:	74 1c                	je     c000bf86 <Fs::setcwd(Process*, char*)+0x135>
c000bf6a:	85 db                	test   ebx,ebx
c000bf6c:	b8 01 00 00 00       	mov    eax,0x1
c000bf71:	74 31                	je     c000bfa4 <Fs::setcwd(Process*, char*)+0x153>
c000bf73:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf75:	83 ec 0c             	sub    esp,0xc
c000bf78:	53                   	push   ebx
c000bf79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bf7c:	83 c4 10             	add    esp,0x10
c000bf7f:	b8 01 00 00 00       	mov    eax,0x1
c000bf84:	eb 1e                	jmp    c000bfa4 <Fs::setcwd(Process*, char*)+0x153>
c000bf86:	85 db                	test   ebx,ebx
c000bf88:	74 0c                	je     c000bf96 <Fs::setcwd(Process*, char*)+0x145>
c000bf8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf8c:	83 ec 0c             	sub    esp,0xc
c000bf8f:	53                   	push   ebx
c000bf90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bf93:	83 c4 10             	add    esp,0x10
c000bf96:	50                   	push   eax
c000bf97:	50                   	push   eax
c000bf98:	56                   	push   esi
c000bf99:	57                   	push   edi
c000bf9a:	e8 b1 46 ff ff       	call   c0000650 <strcpy>
c000bf9f:	83 c4 10             	add    esp,0x10
c000bfa2:	31 c0                	xor    eax,eax
c000bfa4:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bfaa:	5b                   	pop    ebx
c000bfab:	5e                   	pop    esi
c000bfac:	5f                   	pop    edi
c000bfad:	5d                   	pop    ebp
c000bfae:	c3                   	ret    
c000bfaf:	90                   	nop

c000bfb0 <Directory::Directory(char const*, Process*)>:
c000bfb0:	83 ec 0c             	sub    esp,0xc
c000bfb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfb7:	83 ec 08             	sub    esp,0x8
c000bfba:	6a 00                	push   0x0
c000bfbc:	50                   	push   eax
c000bfbd:	e8 e4 d1 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bfc2:	83 c4 10             	add    esp,0x10
c000bfc5:	ba 5c 19 02 c0       	mov    edx,0xc002195c
c000bfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfce:	89 10                	mov    DWORD PTR [eax],edx
c000bfd0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bfd5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bfd9:	0f 95 c0             	setne  al
c000bfdc:	0f b6 c0             	movzx  eax,al
c000bfdf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bfe3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bfe9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfed:	83 c2 0d             	add    edx,0xd
c000bff0:	50                   	push   eax
c000bff1:	51                   	push   ecx
c000bff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bff6:	52                   	push   edx
c000bff7:	e8 c8 f7 ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bffc:	83 c4 10             	add    esp,0x10
c000bfff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c003:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c006:	83 e8 41             	sub    eax,0x41
c000c009:	88 c2                	mov    dl,al
c000c00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c00f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c019:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c021:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c027:	0f b6 c0             	movzx  eax,al
c000c02a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c031:	85 c0                	test   eax,eax
c000c033:	74 3e                	je     c000c073 <Directory::Directory(char const*, Process*)+0xc3>
c000c035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c039:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c03f:	0f b6 c0             	movzx  eax,al
c000c042:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c049:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c04f:	85 c0                	test   eax,eax
c000c051:	75 20                	jne    c000c073 <Directory::Directory(char const*, Process*)+0xc3>
c000c053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c057:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c05d:	0f b6 c0             	movzx  eax,al
c000c060:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c067:	83 ec 0c             	sub    esp,0xc
c000c06a:	50                   	push   eax
c000c06b:	e8 08 1c 00 00       	call   c000dc78 <LogicalDisk::mount()>
c000c070:	83 c4 10             	add    esp,0x10
c000c073:	90                   	nop
c000c074:	83 c4 0c             	add    esp,0xc
c000c077:	c3                   	ret    

c000c078 <Directory::open()>:
c000c078:	53                   	push   ebx
c000c079:	b8 0b 00 00 00       	mov    eax,0xb
c000c07e:	83 ec 08             	sub    esp,0x8
c000c081:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c085:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c08c:	83 fa 19             	cmp    edx,0x19
c000c08f:	77 3d                	ja     c000c0ce <Directory::open()+0x56>
c000c091:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c098:	85 d2                	test   edx,edx
c000c09a:	74 32                	je     c000c0ce <Directory::open()+0x56>
c000c09c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c0a2:	85 d2                	test   edx,edx
c000c0a4:	74 28                	je     c000c0ce <Directory::open()+0x56>
c000c0a6:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c0aa:	b8 06 00 00 00       	mov    eax,0x6
c000c0af:	75 1d                	jne    c000c0ce <Directory::open()+0x56>
c000c0b1:	50                   	push   eax
c000c0b2:	8b 02                	mov    eax,DWORD PTR [edx]
c000c0b4:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c0ba:	51                   	push   ecx
c000c0bb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c0be:	51                   	push   ecx
c000c0bf:	52                   	push   edx
c000c0c0:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c0c3:	83 c4 10             	add    esp,0x10
c000c0c6:	85 c0                	test   eax,eax
c000c0c8:	75 04                	jne    c000c0ce <Directory::open()+0x56>
c000c0ca:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c0ce:	83 c4 08             	add    esp,0x8
c000c0d1:	5b                   	pop    ebx
c000c0d2:	c3                   	ret    
c000c0d3:	90                   	nop

c000c0d4 <Directory::close()>:
c000c0d4:	53                   	push   ebx
c000c0d5:	b8 0b 00 00 00       	mov    eax,0xb
c000c0da:	83 ec 08             	sub    esp,0x8
c000c0dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0e1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c0e8:	83 f9 19             	cmp    ecx,0x19
c000c0eb:	77 41                	ja     c000c12e <Directory::close()+0x5a>
c000c0ed:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c0f4:	85 db                	test   ebx,ebx
c000c0f6:	74 36                	je     c000c12e <Directory::close()+0x5a>
c000c0f8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c0ff:	74 2d                	je     c000c12e <Directory::close()+0x5a>
c000c101:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c105:	b8 05 00 00 00       	mov    eax,0x5
c000c10a:	74 22                	je     c000c12e <Directory::close()+0x5a>
c000c10c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c110:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c117:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c11d:	53                   	push   ebx
c000c11e:	53                   	push   ebx
c000c11f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c121:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c127:	50                   	push   eax
c000c128:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c12b:	83 c4 10             	add    esp,0x10
c000c12e:	83 c4 08             	add    esp,0x8
c000c131:	5b                   	pop    ebx
c000c132:	c3                   	ret    
c000c133:	90                   	nop

c000c134 <Directory::unlink()>:
c000c134:	83 ec 0c             	sub    esp,0xc
c000c137:	b8 0b 00 00 00       	mov    eax,0xb
c000c13c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c140:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c147:	83 f9 19             	cmp    ecx,0x19
c000c14a:	77 2f                	ja     c000c17b <Directory::unlink()+0x47>
c000c14c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c153:	85 c9                	test   ecx,ecx
c000c155:	74 24                	je     c000c17b <Directory::unlink()+0x47>
c000c157:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c15d:	85 c9                	test   ecx,ecx
c000c15f:	74 1a                	je     c000c17b <Directory::unlink()+0x47>
c000c161:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c165:	b8 06 00 00 00       	mov    eax,0x6
c000c16a:	75 0f                	jne    c000c17b <Directory::unlink()+0x47>
c000c16c:	50                   	push   eax
c000c16d:	83 c2 0d             	add    edx,0xd
c000c170:	50                   	push   eax
c000c171:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c173:	52                   	push   edx
c000c174:	51                   	push   ecx
c000c175:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c178:	83 c4 10             	add    esp,0x10
c000c17b:	83 c4 0c             	add    esp,0xc
c000c17e:	c3                   	ret    
c000c17f:	90                   	nop

c000c180 <Directory::rename(char const*)>:
c000c180:	83 ec 0c             	sub    esp,0xc
c000c183:	b8 0b 00 00 00       	mov    eax,0xb
c000c188:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c18c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c193:	83 f9 19             	cmp    ecx,0x19
c000c196:	77 32                	ja     c000c1ca <Directory::rename(char const*)+0x4a>
c000c198:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c19f:	85 c9                	test   ecx,ecx
c000c1a1:	74 27                	je     c000c1ca <Directory::rename(char const*)+0x4a>
c000c1a3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1a9:	85 c9                	test   ecx,ecx
c000c1ab:	74 1d                	je     c000c1ca <Directory::rename(char const*)+0x4a>
c000c1ad:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1b1:	b8 06 00 00 00       	mov    eax,0x6
c000c1b6:	75 12                	jne    c000c1ca <Directory::rename(char const*)+0x4a>
c000c1b8:	50                   	push   eax
c000c1b9:	83 c2 0d             	add    edx,0xd
c000c1bc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1c2:	52                   	push   edx
c000c1c3:	51                   	push   ecx
c000c1c4:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c1c7:	83 c4 10             	add    esp,0x10
c000c1ca:	83 c4 0c             	add    esp,0xc
c000c1cd:	c3                   	ret    

c000c1ce <Directory::exists()>:
c000c1ce:	83 ec 0c             	sub    esp,0xc
c000c1d1:	31 c0                	xor    eax,eax
c000c1d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1d7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1de:	83 f9 19             	cmp    ecx,0x19
c000c1e1:	77 24                	ja     c000c207 <Directory::exists()+0x39>
c000c1e3:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1ea:	85 c9                	test   ecx,ecx
c000c1ec:	74 19                	je     c000c207 <Directory::exists()+0x39>
c000c1ee:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1f4:	85 c9                	test   ecx,ecx
c000c1f6:	74 0f                	je     c000c207 <Directory::exists()+0x39>
c000c1f8:	50                   	push   eax
c000c1f9:	83 c2 0d             	add    edx,0xd
c000c1fc:	50                   	push   eax
c000c1fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1ff:	52                   	push   edx
c000c200:	51                   	push   ecx
c000c201:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c204:	83 c4 10             	add    esp,0x10
c000c207:	83 c4 0c             	add    esp,0xc
c000c20a:	c3                   	ret    
c000c20b:	90                   	nop

c000c20c <Directory::read(dirent*)>:
c000c20c:	83 ec 1c             	sub    esp,0x1c
c000c20f:	b8 0b 00 00 00       	mov    eax,0xb
c000c214:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c218:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c21f:	83 f9 19             	cmp    ecx,0x19
c000c222:	77 30                	ja     c000c254 <Directory::read(dirent*)+0x48>
c000c224:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c22b:	85 c9                	test   ecx,ecx
c000c22d:	74 25                	je     c000c254 <Directory::read(dirent*)+0x48>
c000c22f:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c236:	74 1c                	je     c000c254 <Directory::read(dirent*)+0x48>
c000c238:	83 ec 0c             	sub    esp,0xc
c000c23b:	8b 02                	mov    eax,DWORD PTR [edx]
c000c23d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c241:	51                   	push   ecx
c000c242:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c246:	6a 00                	push   0x0
c000c248:	68 10 01 00 00       	push   0x110
c000c24d:	52                   	push   edx
c000c24e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c251:	83 c4 20             	add    esp,0x20
c000c254:	83 c4 1c             	add    esp,0x1c
c000c257:	c3                   	ret    

c000c258 <Directory::create()>:
c000c258:	83 ec 0c             	sub    esp,0xc
c000c25b:	b8 0b 00 00 00       	mov    eax,0xb
c000c260:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c264:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c26b:	83 f9 19             	cmp    ecx,0x19
c000c26e:	77 2f                	ja     c000c29f <Directory::create()+0x47>
c000c270:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c277:	85 c9                	test   ecx,ecx
c000c279:	74 24                	je     c000c29f <Directory::create()+0x47>
c000c27b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c281:	85 c9                	test   ecx,ecx
c000c283:	74 1a                	je     c000c29f <Directory::create()+0x47>
c000c285:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c289:	b8 06 00 00 00       	mov    eax,0x6
c000c28e:	75 0f                	jne    c000c29f <Directory::create()+0x47>
c000c290:	50                   	push   eax
c000c291:	83 c2 0d             	add    edx,0xd
c000c294:	50                   	push   eax
c000c295:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c297:	52                   	push   edx
c000c298:	51                   	push   ecx
c000c299:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c29c:	83 c4 10             	add    esp,0x10
c000c29f:	83 c4 0c             	add    esp,0xc
c000c2a2:	c3                   	ret    
c000c2a3:	90                   	nop

c000c2a4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c2a4:	b8 0a 00 00 00       	mov    eax,0xa
c000c2a9:	c3                   	ret    
c000c2aa:	66 90                	xchg   ax,ax

c000c2ac <Bus::Bus(char const*)>:
c000c2ac:	83 ec 0c             	sub    esp,0xc
c000c2af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2b3:	83 ec 08             	sub    esp,0x8
c000c2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ba:	50                   	push   eax
c000c2bb:	e8 28 08 00 00       	call   c000cae8 <Device::Device(char const*)>
c000c2c0:	83 c4 10             	add    esp,0x10
c000c2c3:	ba 78 19 02 c0       	mov    edx,0xc0021978
c000c2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2cc:	89 10                	mov    DWORD PTR [eax],edx
c000c2ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2d2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c2dc:	90                   	nop
c000c2dd:	83 c4 0c             	add    esp,0xc
c000c2e0:	c3                   	ret    
c000c2e1:	90                   	nop
c000c2e2:	66 90                	xchg   ax,ax

c000c2e4 <Bus::~Bus()>:
c000c2e4:	83 ec 0c             	sub    esp,0xc
c000c2e7:	ba 78 19 02 c0       	mov    edx,0xc0021978
c000c2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2f0:	89 10                	mov    DWORD PTR [eax],edx
c000c2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2f6:	83 ec 0c             	sub    esp,0xc
c000c2f9:	50                   	push   eax
c000c2fa:	e8 53 05 00 00       	call   c000c852 <Device::~Device()>
c000c2ff:	83 c4 10             	add    esp,0x10
c000c302:	90                   	nop
c000c303:	83 c4 0c             	add    esp,0xc
c000c306:	c3                   	ret    
c000c307:	90                   	nop

c000c308 <Bus::~Bus()>:
c000c308:	83 ec 0c             	sub    esp,0xc
c000c30b:	83 ec 0c             	sub    esp,0xc
c000c30e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c312:	e8 cd ff ff ff       	call   c000c2e4 <Bus::~Bus()>
c000c317:	83 c4 10             	add    esp,0x10
c000c31a:	83 ec 08             	sub    esp,0x8
c000c31d:	68 58 01 00 00       	push   0x158
c000c322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c326:	e8 e1 e4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c32b:	83 c4 10             	add    esp,0x10
c000c32e:	83 c4 0c             	add    esp,0xc
c000c331:	c3                   	ret    

c000c332 <beepThread(void*)>:
c000c332:	83 ec 0c             	sub    esp,0xc
c000c335:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c33a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c33e:	48                   	dec    eax
c000c33f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c344:	75 01                	jne    c000c347 <beepThread(void*)+0x15>
c000c346:	fb                   	sti    
c000c347:	6b c2 0a             	imul   eax,edx,0xa
c000c34a:	83 ec 0c             	sub    esp,0xc
c000c34d:	50                   	push   eax
c000c34e:	e8 c9 9f 00 00       	call   c001631c <milliTenthSleep(unsigned int)>
c000c353:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c35a:	e8 16 bf 00 00       	call   c0018275 <HalMakeBeep(int)>
c000c35f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c367:	83 c4 1c             	add    esp,0x1c
c000c36a:	e9 91 9e 00 00       	jmp    c0016200 <blockTask(TaskState)>

c000c36f <Krnl::beep(int, int, bool)>:
c000c36f:	56                   	push   esi
c000c370:	53                   	push   ebx
c000c371:	83 ec 10             	sub    esp,0x10
c000c374:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c378:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c37c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c380:	e8 f0 be 00 00       	call   c0018275 <HalMakeBeep(int)>
c000c385:	89 f0                	mov    eax,esi
c000c387:	83 c4 10             	add    esp,0x10
c000c38a:	84 c0                	test   al,al
c000c38c:	74 1e                	je     c000c3ac <Krnl::beep(int, int, bool)+0x3d>
c000c38e:	6b db 0a             	imul   ebx,ebx,0xa
c000c391:	83 ec 0c             	sub    esp,0xc
c000c394:	53                   	push   ebx
c000c395:	e8 82 9f 00 00       	call   c001631c <milliTenthSleep(unsigned int)>
c000c39a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c3a2:	83 c4 14             	add    esp,0x14
c000c3a5:	5b                   	pop    ebx
c000c3a6:	5e                   	pop    esi
c000c3a7:	e9 c9 be 00 00       	jmp    c0018275 <HalMakeBeep(int)>
c000c3ac:	68 e6 00 00 00       	push   0xe6
c000c3b1:	53                   	push   ebx
c000c3b2:	68 32 c3 00 c0       	push   0xc000c332
c000c3b7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c3bd:	e8 f2 99 00 00       	call   c0015db4 <Process::createThread(void (*)(void*), void*, int)>
c000c3c2:	83 c4 14             	add    esp,0x14
c000c3c5:	5b                   	pop    ebx
c000c3c6:	5e                   	pop    esi
c000c3c7:	c3                   	ret    

c000c3c8 <User::loadClockSettings(int)>:
c000c3c8:	53                   	push   ebx
c000c3c9:	83 ec 14             	sub    esp,0x14
c000c3cc:	68 14 01 00 00       	push   0x114
c000c3d1:	e8 fd b6 ff ff       	call   c0007ad3 <malloc>
c000c3d6:	83 c4 0c             	add    esp,0xc
c000c3d9:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c3df:	68 9c 19 02 c0       	push   0xc002199c
c000c3e4:	50                   	push   eax
c000c3e5:	89 c3                	mov    ebx,eax
c000c3e7:	e8 e4 f6 ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c000c3ec:	58                   	pop    eax
c000c3ed:	5a                   	pop    edx
c000c3ee:	6a 01                	push   0x1
c000c3f0:	53                   	push   ebx
c000c3f1:	e8 f8 f6 ff ff       	call   c000baee <File::open(FileOpenMode)>
c000c3f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c3f9:	e8 4e f7 ff ff       	call   c000bb4c <File::close()>
c000c3fe:	83 c4 10             	add    esp,0x10
c000c401:	85 db                	test   ebx,ebx
c000c403:	74 0f                	je     c000c414 <User::loadClockSettings(int)+0x4c>
c000c405:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c407:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c40b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c40e:	83 c4 08             	add    esp,0x8
c000c411:	5b                   	pop    ebx
c000c412:	ff e0                	jmp    eax
c000c414:	83 c4 08             	add    esp,0x8
c000c417:	5b                   	pop    ebx
c000c418:	c3                   	ret    
c000c419:	90                   	nop

c000c41a <Clock::Clock(char const*)>:
c000c41a:	83 ec 0c             	sub    esp,0xc
c000c41d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c421:	83 ec 08             	sub    esp,0x8
c000c424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c428:	50                   	push   eax
c000c429:	e8 ba 06 00 00       	call   c000cae8 <Device::Device(char const*)>
c000c42e:	83 c4 10             	add    esp,0x10
c000c431:	ba c4 19 02 c0       	mov    edx,0xc00219c4
c000c436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c43a:	89 10                	mov    DWORD PTR [eax],edx
c000c43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c440:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c44a:	90                   	nop
c000c44b:	83 c4 0c             	add    esp,0xc
c000c44e:	c3                   	ret    
c000c44f:	90                   	nop

c000c450 <Clock::~Clock()>:
c000c450:	83 ec 0c             	sub    esp,0xc
c000c453:	ba c4 19 02 c0       	mov    edx,0xc00219c4
c000c458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45c:	89 10                	mov    DWORD PTR [eax],edx
c000c45e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c462:	83 ec 0c             	sub    esp,0xc
c000c465:	50                   	push   eax
c000c466:	e8 e7 03 00 00       	call   c000c852 <Device::~Device()>
c000c46b:	83 c4 10             	add    esp,0x10
c000c46e:	90                   	nop
c000c46f:	83 c4 0c             	add    esp,0xc
c000c472:	c3                   	ret    
c000c473:	90                   	nop

c000c474 <Clock::~Clock()>:
c000c474:	83 ec 0c             	sub    esp,0xc
c000c477:	83 ec 0c             	sub    esp,0xc
c000c47a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c47e:	e8 cd ff ff ff       	call   c000c450 <Clock::~Clock()>
c000c483:	83 c4 10             	add    esp,0x10
c000c486:	83 ec 08             	sub    esp,0x8
c000c489:	68 58 01 00 00       	push   0x158
c000c48e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c492:	e8 75 e3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c497:	83 c4 10             	add    esp,0x10
c000c49a:	83 c4 0c             	add    esp,0xc
c000c49d:	c3                   	ret    

c000c49e <Clock::timeInSecondsLocal()>:
c000c49e:	53                   	push   ebx
c000c49f:	83 ec 14             	sub    esp,0x14
c000c4a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c4a6:	8b 10                	mov    edx,DWORD PTR [eax]
c000c4a8:	50                   	push   eax
c000c4a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c4ac:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c4b3:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c4b9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c4bf:	89 cb                	mov    ebx,ecx
c000c4c1:	c1 fb 1f             	sar    ebx,0x1f
c000c4c4:	01 c8                	add    eax,ecx
c000c4c6:	11 da                	adc    edx,ebx
c000c4c8:	83 c4 10             	add    esp,0x10
c000c4cb:	31 c9                	xor    ecx,ecx
c000c4cd:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c4d4:	74 05                	je     c000c4db <Clock::timeInSecondsLocal()+0x3d>
c000c4d6:	b9 08 07 00 00       	mov    ecx,0x708
c000c4db:	31 db                	xor    ebx,ebx
c000c4dd:	01 c8                	add    eax,ecx
c000c4df:	11 da                	adc    edx,ebx
c000c4e1:	83 c4 08             	add    esp,0x8
c000c4e4:	5b                   	pop    ebx
c000c4e5:	c3                   	ret    

c000c4e6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c4e6:	57                   	push   edi
c000c4e7:	56                   	push   esi
c000c4e8:	53                   	push   ebx
c000c4e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c4ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c4f1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c4f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c4f7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c4fa:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c501:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c507:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c50d:	99                   	cdq    
c000c50e:	29 c6                	sub    esi,eax
c000c510:	19 d7                	sbb    edi,edx
c000c512:	89 f0                	mov    eax,esi
c000c514:	31 f6                	xor    esi,esi
c000c516:	89 fa                	mov    edx,edi
c000c518:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c51f:	74 05                	je     c000c526 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c521:	be 08 07 00 00       	mov    esi,0x708
c000c526:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c52a:	31 ff                	xor    edi,edi
c000c52c:	29 f0                	sub    eax,esi
c000c52e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c532:	19 fa                	sbb    edx,edi
c000c534:	89 d8                	mov    eax,ebx
c000c536:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c53a:	5b                   	pop    ebx
c000c53b:	5e                   	pop    esi
c000c53c:	5f                   	pop    edi
c000c53d:	ff e0                	jmp    eax

c000c53f <datetimeToSeconds(datetime_t)>:
c000c53f:	55                   	push   ebp
c000c540:	57                   	push   edi
c000c541:	56                   	push   esi
c000c542:	53                   	push   ebx
c000c543:	83 ec 0c             	sub    esp,0xc
c000c546:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c54a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c54e:	89 f7                	mov    edi,esi
c000c550:	89 f0                	mov    eax,esi
c000c552:	0f b6 cf             	movzx  ecx,bh
c000c555:	0f b6 c4             	movzx  eax,ah
c000c558:	c1 ef 10             	shr    edi,0x10
c000c55b:	89 da                	mov    edx,ebx
c000c55d:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c560:	89 f9                	mov    ecx,edi
c000c562:	0f b6 f9             	movzx  edi,cl
c000c565:	89 f1                	mov    ecx,esi
c000c567:	6b c0 3c             	imul   eax,eax,0x3c
c000c56a:	0f b6 f1             	movzx  esi,cl
c000c56d:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c573:	0f b6 db             	movzx  ebx,bl
c000c576:	c1 ea 10             	shr    edx,0x10
c000c579:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c57f:	01 f8                	add    eax,edi
c000c581:	01 f0                	add    eax,esi
c000c583:	89 04 24             	mov    DWORD PTR [esp],eax
c000c586:	c1 f8 1f             	sar    eax,0x1f
c000c589:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c58d:	89 e8                	mov    eax,ebp
c000c58f:	0f b6 c0             	movzx  eax,al
c000c592:	8b 0c 85 00 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde600]
c000c599:	83 f8 01             	cmp    eax,0x1
c000c59c:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c5a0:	0f b7 da             	movzx  ebx,dx
c000c5a3:	76 27                	jbe    c000c5cc <datetimeToSeconds(datetime_t)+0x8d>
c000c5a5:	80 e2 03             	and    dl,0x3
c000c5a8:	75 22                	jne    c000c5cc <datetimeToSeconds(datetime_t)+0x8d>
c000c5aa:	31 d2                	xor    edx,edx
c000c5ac:	be 64 00 00 00       	mov    esi,0x64
c000c5b1:	89 d8                	mov    eax,ebx
c000c5b3:	f7 f6                	div    esi
c000c5b5:	85 d2                	test   edx,edx
c000c5b7:	75 12                	jne    c000c5cb <datetimeToSeconds(datetime_t)+0x8c>
c000c5b9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c5bf:	be 90 01 00 00       	mov    esi,0x190
c000c5c4:	99                   	cdq    
c000c5c5:	f7 fe                	idiv   esi
c000c5c7:	85 d2                	test   edx,edx
c000c5c9:	75 01                	jne    c000c5cc <datetimeToSeconds(datetime_t)+0x8d>
c000c5cb:	41                   	inc    ecx
c000c5cc:	83 fb 46             	cmp    ebx,0x46
c000c5cf:	76 48                	jbe    c000c619 <datetimeToSeconds(datetime_t)+0xda>
c000c5d1:	be 46 00 00 00       	mov    esi,0x46
c000c5d6:	bf 64 00 00 00       	mov    edi,0x64
c000c5db:	bd 90 01 00 00       	mov    ebp,0x190
c000c5e0:	f7 c6 03 00 00 00    	test   esi,0x3
c000c5e6:	b8 6d 01 00 00       	mov    eax,0x16d
c000c5eb:	75 23                	jne    c000c610 <datetimeToSeconds(datetime_t)+0xd1>
c000c5ed:	89 f0                	mov    eax,esi
c000c5ef:	99                   	cdq    
c000c5f0:	f7 ff                	idiv   edi
c000c5f2:	b8 6e 01 00 00       	mov    eax,0x16e
c000c5f7:	85 d2                	test   edx,edx
c000c5f9:	75 15                	jne    c000c610 <datetimeToSeconds(datetime_t)+0xd1>
c000c5fb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c601:	99                   	cdq    
c000c602:	f7 fd                	idiv   ebp
c000c604:	83 fa 01             	cmp    edx,0x1
c000c607:	19 c0                	sbb    eax,eax
c000c609:	f7 d0                	not    eax
c000c60b:	05 6e 01 00 00       	add    eax,0x16e
c000c610:	46                   	inc    esi
c000c611:	01 c1                	add    ecx,eax
c000c613:	39 de                	cmp    esi,ebx
c000c615:	7c c9                	jl     c000c5e0 <datetimeToSeconds(datetime_t)+0xa1>
c000c617:	eb 34                	jmp    c000c64d <datetimeToSeconds(datetime_t)+0x10e>
c000c619:	74 32                	je     c000c64d <datetimeToSeconds(datetime_t)+0x10e>
c000c61b:	b8 45 00 00 00       	mov    eax,0x45
c000c620:	89 c2                	mov    edx,eax
c000c622:	83 e2 03             	and    edx,0x3
c000c625:	39 d8                	cmp    eax,ebx
c000c627:	7e 0f                	jle    c000c638 <datetimeToSeconds(datetime_t)+0xf9>
c000c629:	83 fa 01             	cmp    edx,0x1
c000c62c:	19 d2                	sbb    edx,edx
c000c62e:	48                   	dec    eax
c000c62f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c636:	eb e8                	jmp    c000c620 <datetimeToSeconds(datetime_t)+0xe1>
c000c638:	85 d2                	test   edx,edx
c000c63a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c63f:	75 0a                	jne    c000c64b <datetimeToSeconds(datetime_t)+0x10c>
c000c641:	83 fb 01             	cmp    ebx,0x1
c000c644:	19 c0                	sbb    eax,eax
c000c646:	05 6e 01 00 00       	add    eax,0x16e
c000c64b:	29 c1                	sub    ecx,eax
c000c64d:	b8 80 51 01 00       	mov    eax,0x15180
c000c652:	f7 e9                	imul   ecx
c000c654:	03 04 24             	add    eax,DWORD PTR [esp]
c000c657:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c65b:	83 c4 0c             	add    esp,0xc
c000c65e:	5b                   	pop    ebx
c000c65f:	5e                   	pop    esi
c000c660:	5f                   	pop    edi
c000c661:	5d                   	pop    ebp
c000c662:	c3                   	ret    
c000c663:	90                   	nop

c000c664 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c664:	57                   	push   edi
c000c665:	56                   	push   esi
c000c666:	53                   	push   ebx
c000c667:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c66b:	8b 06                	mov    eax,DWORD PTR [esi]
c000c66d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c674:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c678:	e8 c2 fe ff ff       	call   c000c53f <datetimeToSeconds(datetime_t)>
c000c67d:	59                   	pop    ecx
c000c67e:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c685:	5b                   	pop    ebx
c000c686:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c68c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c692:	89 cb                	mov    ebx,ecx
c000c694:	c1 fb 1f             	sar    ebx,0x1f
c000c697:	29 c8                	sub    eax,ecx
c000c699:	19 da                	sbb    edx,ebx
c000c69b:	31 c9                	xor    ecx,ecx
c000c69d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c6a4:	74 05                	je     c000c6ab <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c6a6:	b9 08 07 00 00       	mov    ecx,0x708
c000c6ab:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c6af:	31 db                	xor    ebx,ebx
c000c6b1:	29 c8                	sub    eax,ecx
c000c6b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6b7:	19 da                	sbb    edx,ebx
c000c6b9:	89 f8                	mov    eax,edi
c000c6bb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6bf:	5b                   	pop    ebx
c000c6c0:	5e                   	pop    esi
c000c6c1:	5f                   	pop    edi
c000c6c2:	ff e0                	jmp    eax

c000c6c4 <secondsToDatetime(unsigned long long)>:
c000c6c4:	55                   	push   ebp
c000c6c5:	57                   	push   edi
c000c6c6:	56                   	push   esi
c000c6c7:	53                   	push   ebx
c000c6c8:	83 ec 1c             	sub    esp,0x1c
c000c6cb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c6cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c6d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c6d7:	6a 00                	push   0x0
c000c6d9:	68 80 51 01 00       	push   0x15180
c000c6de:	55                   	push   ebp
c000c6df:	57                   	push   edi
c000c6e0:	e8 db 2f 01 00       	call   c001f6c0 <__udivdi3>
c000c6e5:	83 c4 10             	add    esp,0x10
c000c6e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ec:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c6f2:	6a 00                	push   0x0
c000c6f4:	68 80 51 01 00       	push   0x15180
c000c6f9:	55                   	push   ebp
c000c6fa:	57                   	push   edi
c000c6fb:	bf 10 0e 00 00       	mov    edi,0xe10
c000c700:	e8 bb 30 01 00       	call   c001f7c0 <__umoddi3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	99                   	cdq    
c000c709:	f7 ff                	idiv   edi
c000c70b:	bf 3c 00 00 00       	mov    edi,0x3c
c000c710:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c713:	89 d0                	mov    eax,edx
c000c715:	99                   	cdq    
c000c716:	f7 ff                	idiv   edi
c000c718:	85 db                	test   ebx,ebx
c000c71a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c71d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c720:	79 11                	jns    c000c733 <secondsToDatetime(unsigned long long)+0x6f>
c000c722:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c726:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c72c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c731:	eb 07                	jmp    c000c73a <secondsToDatetime(unsigned long long)+0x76>
c000c733:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c738:	89 d8                	mov    eax,ebx
c000c73a:	99                   	cdq    
c000c73b:	bf b4 05 00 00       	mov    edi,0x5b4
c000c740:	f7 f9                	idiv   ecx
c000c742:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c747:	31 d2                	xor    edx,edx
c000c749:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c74e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c752:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c75a:	01 c3                	add    ebx,eax
c000c75c:	89 d8                	mov    eax,ebx
c000c75e:	f7 f1                	div    ecx
c000c760:	31 d2                	xor    edx,edx
c000c762:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c765:	89 d8                	mov    eax,ebx
c000c767:	f7 f7                	div    edi
c000c769:	31 d2                	xor    edx,edx
c000c76b:	29 c1                	sub    ecx,eax
c000c76d:	89 d8                	mov    eax,ebx
c000c76f:	f7 f5                	div    ebp
c000c771:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c776:	31 d2                	xor    edx,edx
c000c778:	29 c1                	sub    ecx,eax
c000c77a:	89 c8                	mov    eax,ecx
c000c77c:	f7 f5                	div    ebp
c000c77e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c783:	31 d2                	xor    edx,edx
c000c785:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c789:	89 c8                	mov    eax,ecx
c000c78b:	f7 f5                	div    ebp
c000c78d:	31 d2                	xor    edx,edx
c000c78f:	01 c3                	add    ebx,eax
c000c791:	89 c8                	mov    eax,ecx
c000c793:	f7 f7                	div    edi
c000c795:	bf 99 00 00 00       	mov    edi,0x99
c000c79a:	31 d2                	xor    edx,edx
c000c79c:	29 c3                	sub    ebx,eax
c000c79e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c7a6:	29 c3                	sub    ebx,eax
c000c7a8:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c7ab:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c7ae:	83 c1 02             	add    ecx,0x2
c000c7b1:	89 c8                	mov    eax,ecx
c000c7b3:	bb 05 00 00 00       	mov    ebx,0x5
c000c7b8:	f7 f7                	div    edi
c000c7ba:	31 d2                	xor    edx,edx
c000c7bc:	89 c7                	mov    edi,eax
c000c7be:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c7c4:	83 c0 02             	add    eax,0x2
c000c7c7:	f7 f3                	div    ebx
c000c7c9:	89 eb                	mov    ebx,ebp
c000c7cb:	29 c3                	sub    ebx,eax
c000c7cd:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c7d3:	88 1e                	mov    BYTE PTR [esi],bl
c000c7d5:	19 c0                	sbb    eax,eax
c000c7d7:	31 d2                	xor    edx,edx
c000c7d9:	83 e0 0c             	and    eax,0xc
c000c7dc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c7e0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c7e8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c7ec:	83 f9 01             	cmp    ecx,0x1
c000c7ef:	0f 96 c2             	setbe  dl
c000c7f2:	41                   	inc    ecx
c000c7f3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c7f6:	01 d0                	add    eax,edx
c000c7f8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c7fc:	83 c4 1c             	add    esp,0x1c
c000c7ff:	89 f0                	mov    eax,esi
c000c801:	5b                   	pop    ebx
c000c802:	5e                   	pop    esi
c000c803:	5f                   	pop    edi
c000c804:	5d                   	pop    ebp
c000c805:	c2 04 00             	ret    0x4

c000c808 <Clock::timeInDatetimeLocal()>:
c000c808:	53                   	push   ebx
c000c809:	83 ec 14             	sub    esp,0x14
c000c80c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c810:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c814:	e8 85 fc ff ff       	call   c000c49e <Clock::timeInSecondsLocal()>
c000c819:	83 c4 0c             	add    esp,0xc
c000c81c:	52                   	push   edx
c000c81d:	50                   	push   eax
c000c81e:	53                   	push   ebx
c000c81f:	e8 a0 fe ff ff       	call   c000c6c4 <secondsToDatetime(unsigned long long)>
c000c824:	89 d8                	mov    eax,ebx
c000c826:	83 c4 14             	add    esp,0x14
c000c829:	5b                   	pop    ebx
c000c82a:	c2 04 00             	ret    0x4
c000c82d:	90                   	nop

c000c82e <Device::hibernate()>:
c000c82e:	c3                   	ret    
c000c82f:	90                   	nop

c000c830 <Device::wake()>:
c000c830:	c3                   	ret    
c000c831:	90                   	nop

c000c832 <Device::detect()>:
c000c832:	c3                   	ret    
c000c833:	90                   	nop

c000c834 <Device::disableLegacy()>:
c000c834:	c3                   	ret    
c000c835:	90                   	nop

c000c836 <Device::powerSaving(PowerSavingLevel)>:
c000c836:	c3                   	ret    
c000c837:	90                   	nop

c000c838 <DriverlessDevice::close(int, int, void*)>:
c000c838:	31 c0                	xor    eax,eax
c000c83a:	c3                   	ret    
c000c83b:	90                   	nop

c000c83c <DriverlessDevice::detect()>:
c000c83c:	c3                   	ret    
c000c83d:	90                   	nop

c000c83e <DriverlessDevice::open(int, int, void*)>:
c000c83e:	83 ec 18             	sub    esp,0x18
c000c841:	68 30 1a 02 c0       	push   0xc0021a30
c000c846:	e8 cc 4c 00 00       	call   c0011517 <KePanic(char const*)>
c000c84b:	83 c8 ff             	or     eax,0xffffffff
c000c84e:	83 c4 1c             	add    esp,0x1c
c000c851:	c3                   	ret    

c000c852 <Device::~Device()>:
c000c852:	ba 90 1a 02 c0       	mov    edx,0xc0021a90
c000c857:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c85b:	89 10                	mov    DWORD PTR [eax],edx
c000c85d:	90                   	nop
c000c85e:	c3                   	ret    
c000c85f:	90                   	nop

c000c860 <Device::~Device()>:
c000c860:	83 ec 0c             	sub    esp,0xc
c000c863:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c867:	e8 e6 ff ff ff       	call   c000c852 <Device::~Device()>
c000c86c:	83 c4 04             	add    esp,0x4
c000c86f:	83 ec 08             	sub    esp,0x8
c000c872:	68 58 01 00 00       	push   0x158
c000c877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87b:	e8 8c df ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c880:	83 c4 10             	add    esp,0x10
c000c883:	83 c4 0c             	add    esp,0xc
c000c886:	c3                   	ret    
c000c887:	90                   	nop

c000c888 <Device::findAndLoadDriver()>:
c000c888:	c7 44 24 04 4e 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a4e
c000c890:	e9 75 e0 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c895:	90                   	nop

c000c896 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c896:	57                   	push   edi
c000c897:	b9 09 00 00 00       	mov    ecx,0x9
c000c89c:	56                   	push   esi
c000c89d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c8a1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c8a5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c8af:	81 c7 18 01 00 00    	add    edi,0x118
c000c8b5:	fc                   	cld    
c000c8b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c8b8:	5e                   	pop    esi
c000c8b9:	5f                   	pop    edi
c000c8ba:	c3                   	ret    
c000c8bb:	90                   	nop

c000c8bc <Device::preOpenACPI(void*, char*, char*)>:
c000c8bc:	57                   	push   edi
c000c8bd:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c8c2:	56                   	push   esi
c000c8c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c8cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8cf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c8d9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c8df:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c8e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c8e7:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c8ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c8f1:	b9 0e 00 00 00       	mov    ecx,0xe
c000c8f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c8f8:	5e                   	pop    esi
c000c8f9:	5f                   	pop    edi
c000c8fa:	c3                   	ret    
c000c8fb:	90                   	nop

c000c8fc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c8fc:	53                   	push   ebx
c000c8fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c901:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c905:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c909:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c90d:	0f b6 c0             	movzx  eax,al
c000c910:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c914:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c918:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c91c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c920:	5b                   	pop    ebx
c000c921:	e9 aa 05 00 00       	jmp    c000ced0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c926 <Device::getParent()>:
c000c926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c92a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c930:	c3                   	ret    
c000c931:	90                   	nop

c000c932 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c936:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c93a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c93f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c943:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c947:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c94b:	e9 f7 06 00 00       	jmp    c000d047 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c950 <Device::addChild(Device*)>:
c000c950:	53                   	push   ebx
c000c951:	83 ec 08             	sub    esp,0x8
c000c954:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c958:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c95c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c962:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c968:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c96a:	85 d2                	test   edx,edx
c000c96c:	74 04                	je     c000c972 <Device::addChild(Device*)+0x22>
c000c96e:	89 d3                	mov    ebx,edx
c000c970:	eb f6                	jmp    c000c968 <Device::addChild(Device*)+0x18>
c000c972:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c975:	83 ec 0c             	sub    esp,0xc
c000c978:	6a 08                	push   0x8
c000c97a:	e8 54 b1 ff ff       	call   c0007ad3 <malloc>
c000c97f:	89 03                	mov    DWORD PTR [ebx],eax
c000c981:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c987:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	5b                   	pop    ebx
c000c992:	c3                   	ret    
c000c993:	90                   	nop

c000c994 <Device::removeAllChildren()>:
c000c994:	56                   	push   esi
c000c995:	53                   	push   ebx
c000c996:	52                   	push   edx
c000c997:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c99b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c9a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9a4:	74 17                	je     c000c9bd <Device::removeAllChildren()+0x29>
c000c9a6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c9a9:	85 c0                	test   eax,eax
c000c9ab:	74 0c                	je     c000c9b9 <Device::removeAllChildren()+0x25>
c000c9ad:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9af:	83 ec 0c             	sub    esp,0xc
c000c9b2:	50                   	push   eax
c000c9b3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c9b6:	83 c4 10             	add    esp,0x10
c000c9b9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c9bb:	eb e4                	jmp    c000c9a1 <Device::removeAllChildren()+0xd>
c000c9bd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c9c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9c9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c9cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9d6:	58                   	pop    eax
c000c9d7:	5b                   	pop    ebx
c000c9d8:	5e                   	pop    esi
c000c9d9:	c3                   	ret    

c000c9da <Device::hibernateAll()>:
c000c9da:	53                   	push   ebx
c000c9db:	83 ec 14             	sub    esp,0x14
c000c9de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c9e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9e4:	53                   	push   ebx
c000c9e5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c9e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c9ee:	83 c4 10             	add    esp,0x10
c000c9f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9f4:	74 0f                	je     c000ca05 <Device::hibernateAll()+0x2b>
c000c9f6:	83 ec 0c             	sub    esp,0xc
c000c9f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c9fc:	e8 d9 ff ff ff       	call   c000c9da <Device::hibernateAll()>
c000ca01:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca03:	eb e9                	jmp    c000c9ee <Device::hibernateAll()+0x14>
c000ca05:	83 c4 08             	add    esp,0x8
c000ca08:	5b                   	pop    ebx
c000ca09:	c3                   	ret    

c000ca0a <Device::wakeAll()>:
c000ca0a:	53                   	push   ebx
c000ca0b:	83 ec 14             	sub    esp,0x14
c000ca0e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca12:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca14:	53                   	push   ebx
c000ca15:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca18:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca1e:	83 c4 10             	add    esp,0x10
c000ca21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca24:	74 0f                	je     c000ca35 <Device::wakeAll()+0x2b>
c000ca26:	83 ec 0c             	sub    esp,0xc
c000ca29:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca2c:	e8 d9 ff ff ff       	call   c000ca0a <Device::wakeAll()>
c000ca31:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca33:	eb e9                	jmp    c000ca1e <Device::wakeAll()+0x14>
c000ca35:	83 c4 08             	add    esp,0x8
c000ca38:	5b                   	pop    ebx
c000ca39:	c3                   	ret    

c000ca3a <Device::detectAll()>:
c000ca3a:	53                   	push   ebx
c000ca3b:	83 ec 14             	sub    esp,0x14
c000ca3e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca42:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca44:	53                   	push   ebx
c000ca45:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ca48:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca4e:	83 c4 10             	add    esp,0x10
c000ca51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca54:	74 0f                	je     c000ca65 <Device::detectAll()+0x2b>
c000ca56:	83 ec 0c             	sub    esp,0xc
c000ca59:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca5c:	e8 d9 ff ff ff       	call   c000ca3a <Device::detectAll()>
c000ca61:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca63:	eb e9                	jmp    c000ca4e <Device::detectAll()+0x14>
c000ca65:	83 c4 08             	add    esp,0x8
c000ca68:	5b                   	pop    ebx
c000ca69:	c3                   	ret    

c000ca6a <Device::disableLegacyAll()>:
c000ca6a:	c3                   	ret    
c000ca6b:	90                   	nop

c000ca6c <Device::loadDriversForAll()>:
c000ca6c:	c3                   	ret    
c000ca6d:	90                   	nop

c000ca6e <Device::closeAll()>:
c000ca6e:	53                   	push   ebx
c000ca6f:	83 ec 08             	sub    esp,0x8
c000ca72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca76:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca78:	6a 00                	push   0x0
c000ca7a:	6a 00                	push   0x0
c000ca7c:	6a 00                	push   0x0
c000ca7e:	53                   	push   ebx
c000ca7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ca82:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca88:	83 c4 10             	add    esp,0x10
c000ca8b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca8e:	74 0f                	je     c000ca9f <Device::closeAll()+0x31>
c000ca90:	83 ec 0c             	sub    esp,0xc
c000ca93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca96:	e8 d3 ff ff ff       	call   c000ca6e <Device::closeAll()>
c000ca9b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca9d:	eb e9                	jmp    c000ca88 <Device::closeAll()+0x1a>
c000ca9f:	83 c4 08             	add    esp,0x8
c000caa2:	5b                   	pop    ebx
c000caa3:	c3                   	ret    

c000caa4 <Device::powerSavingAll(PowerSavingLevel)>:
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	83 ec 0c             	sub    esp,0xc
c000caa9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000caad:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cab1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cab3:	56                   	push   esi
c000cab4:	53                   	push   ebx
c000cab5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cab8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cabe:	83 c4 10             	add    esp,0x10
c000cac1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cac4:	74 0f                	je     c000cad5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cac6:	52                   	push   edx
c000cac7:	52                   	push   edx
c000cac8:	56                   	push   esi
c000cac9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cacc:	e8 d3 ff ff ff       	call   c000caa4 <Device::powerSavingAll(PowerSavingLevel)>
c000cad1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cad3:	eb e9                	jmp    c000cabe <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cad5:	58                   	pop    eax
c000cad6:	5b                   	pop    ebx
c000cad7:	5e                   	pop    esi
c000cad8:	c3                   	ret    
c000cad9:	90                   	nop

c000cada <Device::setName(char const*)>:
c000cada:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cae2:	e9 69 3b ff ff       	jmp    c0000650 <strcpy>
c000cae7:	90                   	nop

c000cae8 <Device::Device(char const*)>:
c000cae8:	83 ec 1c             	sub    esp,0x1c
c000caeb:	ba 90 1a 02 c0       	mov    edx,0xc0021a90
c000caf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000caf4:	89 10                	mov    DWORD PTR [eax],edx
c000caf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cafa:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb08:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb16:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb24:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cb2e:	83 ec 08             	sub    esp,0x8
c000cb31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb39:	e8 9c ff ff ff       	call   c000cada <Device::setName(char const*)>
c000cb3e:	83 c4 10             	add    esp,0x10
c000cb41:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cb49:	83 ec 0c             	sub    esp,0xc
c000cb4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb50:	e8 7e af ff ff       	call   c0007ad3 <malloc>
c000cb55:	83 c4 10             	add    esp,0x10
c000cb58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cb5e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cb69:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cb6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb73:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cb79:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cb7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb83:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cb89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb94:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cb9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb9f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbaa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd4:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cbde:	90                   	nop
c000cbdf:	83 c4 1c             	add    esp,0x1c
c000cbe2:	c3                   	ret    
c000cbe3:	90                   	nop

c000cbe4 <Device::getName()>:
c000cbe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbe8:	05 d0 00 00 00       	add    eax,0xd0
c000cbed:	c3                   	ret    

c000cbee <DriverlessDevice::DriverlessDevice(char const*)>:
c000cbee:	83 ec 0c             	sub    esp,0xc
c000cbf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbf5:	83 ec 08             	sub    esp,0x8
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	50                   	push   eax
c000cbfd:	e8 e6 fe ff ff       	call   c000cae8 <Device::Device(char const*)>
c000cc02:	83 c4 10             	add    esp,0x10
c000cc05:	ba bc 1a 02 c0       	mov    edx,0xc0021abc
c000cc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc0e:	89 10                	mov    DWORD PTR [eax],edx
c000cc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc14:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc1e:	90                   	nop
c000cc1f:	83 c4 0c             	add    esp,0xc
c000cc22:	c3                   	ret    
c000cc23:	90                   	nop

c000cc24 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cc24:	57                   	push   edi
c000cc25:	56                   	push   esi
c000cc26:	53                   	push   ebx
c000cc27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cc2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc33:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cc39:	75 0c                	jne    c000cc47 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cc3b:	52                   	push   edx
c000cc3c:	52                   	push   edx
c000cc3d:	53                   	push   ebx
c000cc3e:	56                   	push   esi
c000cc3f:	e8 2e 2f 01 00       	call   c001fb72 <LinkedList<Device>::addElement(Device*)>
c000cc44:	83 c4 10             	add    esp,0x10
c000cc47:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cc4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cc50:	74 12                	je     c000cc64 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cc52:	50                   	push   eax
c000cc53:	57                   	push   edi
c000cc54:	56                   	push   esi
c000cc55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cc58:	e8 c7 ff ff ff       	call   c000cc24 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cc5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cc5f:	83 c4 10             	add    esp,0x10
c000cc62:	eb e9                	jmp    c000cc4d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cc64:	5b                   	pop    ebx
c000cc65:	5e                   	pop    esi
c000cc66:	5f                   	pop    edi
c000cc67:	c3                   	ret    

c000cc68 <getDevicesOfType(DeviceType)>:
c000cc68:	53                   	push   ebx
c000cc69:	83 ec 14             	sub    esp,0x14
c000cc6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cc70:	53                   	push   ebx
c000cc71:	e8 d8 2f 01 00       	call   c001fc4e <LinkedList<Device>::LinkedList()>
c000cc76:	83 c4 0c             	add    esp,0xc
c000cc79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc7d:	53                   	push   ebx
c000cc7e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cc84:	e8 9b ff ff ff       	call   c000cc24 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cc89:	83 c4 18             	add    esp,0x18
c000cc8c:	89 d8                	mov    eax,ebx
c000cc8e:	5b                   	pop    ebx
c000cc8f:	c2 04 00             	ret    0x4
c000cc92:	66 90                	xchg   ax,ax

c000cc94 <HardDiskController::HardDiskController(char const*)>:
c000cc94:	83 ec 0c             	sub    esp,0xc
c000cc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc9b:	83 ec 08             	sub    esp,0x8
c000cc9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca2:	50                   	push   eax
c000cca3:	e8 40 fe ff ff       	call   c000cae8 <Device::Device(char const*)>
c000cca8:	83 c4 10             	add    esp,0x10
c000ccab:	ba e8 1a 02 c0       	mov    edx,0xc0021ae8
c000ccb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccb4:	89 10                	mov    DWORD PTR [eax],edx
c000ccb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccba:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ccc4:	90                   	nop
c000ccc5:	83 c4 0c             	add    esp,0xc
c000ccc8:	c3                   	ret    
c000ccc9:	90                   	nop
c000ccca:	66 90                	xchg   ax,ax

c000cccc <HardDiskController::~HardDiskController()>:
c000cccc:	83 ec 0c             	sub    esp,0xc
c000cccf:	ba e8 1a 02 c0       	mov    edx,0xc0021ae8
c000ccd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccd8:	89 10                	mov    DWORD PTR [eax],edx
c000ccda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccde:	83 ec 0c             	sub    esp,0xc
c000cce1:	50                   	push   eax
c000cce2:	e8 6b fb ff ff       	call   c000c852 <Device::~Device()>
c000cce7:	83 c4 10             	add    esp,0x10
c000ccea:	90                   	nop
c000cceb:	83 c4 0c             	add    esp,0xc
c000ccee:	c3                   	ret    
c000ccef:	90                   	nop

c000ccf0 <HardDiskController::~HardDiskController()>:
c000ccf0:	83 ec 0c             	sub    esp,0xc
c000ccf3:	83 ec 0c             	sub    esp,0xc
c000ccf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccfa:	e8 cd ff ff ff       	call   c000cccc <HardDiskController::~HardDiskController()>
c000ccff:	83 c4 10             	add    esp,0x10
c000cd02:	83 ec 08             	sub    esp,0x8
c000cd05:	68 58 01 00 00       	push   0x158
c000cd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd0e:	e8 f9 da ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cd13:	83 c4 10             	add    esp,0x10
c000cd16:	83 c4 0c             	add    esp,0xc
c000cd19:	c3                   	ret    

c000cd1a <PhysicalDisk::eject()>:
c000cd1a:	83 c8 ff             	or     eax,0xffffffff
c000cd1d:	c3                   	ret    

c000cd1e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd1e:	83 ec 0c             	sub    esp,0xc
c000cd21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd25:	83 ec 08             	sub    esp,0x8
c000cd28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd2c:	50                   	push   eax
c000cd2d:	e8 b6 fd ff ff       	call   c000cae8 <Device::Device(char const*)>
c000cd32:	83 c4 10             	add    esp,0x10
c000cd35:	ba 14 1b 02 c0       	mov    edx,0xc0021b14
c000cd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3e:	89 10                	mov    DWORD PTR [eax],edx
c000cd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd44:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd5a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cd64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd6c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd76:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cd80:	90                   	nop
c000cd81:	83 c4 0c             	add    esp,0xc
c000cd84:	c3                   	ret    
c000cd85:	90                   	nop

c000cd86 <PhysicalDisk::startCache()>:
c000cd86:	56                   	push   esi
c000cd87:	53                   	push   ebx
c000cd88:	83 ec 10             	sub    esp,0x10
c000cd8b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd8f:	6a 44                	push   0x44
c000cd91:	e8 3d ad ff ff       	call   c0007ad3 <malloc>
c000cd96:	89 c6                	mov    esi,eax
c000cd98:	58                   	pop    eax
c000cd99:	5a                   	pop    edx
c000cd9a:	53                   	push   ebx
c000cd9b:	56                   	push   esi
c000cd9c:	e8 83 17 00 00       	call   c000e524 <VCache::VCache(PhysicalDisk*)>
c000cda1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cda7:	83 c4 14             	add    esp,0x14
c000cdaa:	5b                   	pop    ebx
c000cdab:	5e                   	pop    esi
c000cdac:	c3                   	ret    
c000cdad:	90                   	nop

c000cdae <PhysicalDisk::~PhysicalDisk()>:
c000cdae:	83 ec 0c             	sub    esp,0xc
c000cdb1:	ba 14 1b 02 c0       	mov    edx,0xc0021b14
c000cdb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdba:	89 10                	mov    DWORD PTR [eax],edx
c000cdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc0:	83 ec 0c             	sub    esp,0xc
c000cdc3:	50                   	push   eax
c000cdc4:	e8 89 fa ff ff       	call   c000c852 <Device::~Device()>
c000cdc9:	83 c4 10             	add    esp,0x10
c000cdcc:	90                   	nop
c000cdcd:	83 c4 0c             	add    esp,0xc
c000cdd0:	c3                   	ret    
c000cdd1:	90                   	nop

c000cdd2 <PhysicalDisk::~PhysicalDisk()>:
c000cdd2:	83 ec 0c             	sub    esp,0xc
c000cdd5:	83 ec 0c             	sub    esp,0xc
c000cdd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddc:	e8 cd ff ff ff       	call   c000cdae <PhysicalDisk::~PhysicalDisk()>
c000cde1:	83 c4 10             	add    esp,0x10
c000cde4:	83 ec 08             	sub    esp,0x8
c000cde7:	68 6c 01 00 00       	push   0x16c
c000cdec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdf0:	e8 17 da ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cdf5:	83 c4 10             	add    esp,0x10
c000cdf8:	83 c4 0c             	add    esp,0xc
c000cdfb:	c3                   	ret    

c000cdfc <int_handler>:
c000cdfc:	55                   	push   ebp
c000cdfd:	57                   	push   edi
c000cdfe:	56                   	push   esi
c000cdff:	53                   	push   ebx
c000ce00:	83 ec 0c             	sub    esp,0xc
c000ce03:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce0a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce0e:	74 0b                	je     c000ce1b <int_handler+0x1f>
c000ce10:	fa                   	cli    
c000ce11:	f4                   	hlt    
c000ce12:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce19:	75 f5                	jne    c000ce10 <int_handler+0x14>
c000ce1b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce1e:	8d 46 e0             	lea    eax,[esi-0x20]
c000ce21:	83 f8 17             	cmp    eax,0x17
c000ce24:	76 40                	jbe    c000ce66 <int_handler+0x6a>
c000ce26:	c1 e6 04             	shl    esi,0x4
c000ce29:	31 db                	xor    ebx,ebx
c000ce2b:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ce31:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ce37:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ce3b:	85 c0                	test   eax,eax
c000ce3d:	74 13                	je     c000ce52 <int_handler+0x56>
c000ce3f:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ce43:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ce46:	74 2c                	je     c000ce74 <int_handler+0x78>
c000ce48:	83 ec 08             	sub    esp,0x8
c000ce4b:	52                   	push   edx
c000ce4c:	57                   	push   edi
c000ce4d:	ff d0                	call   eax
c000ce4f:	83 c4 10             	add    esp,0x10
c000ce52:	83 c3 01             	add    ebx,0x1
c000ce55:	83 fb 04             	cmp    ebx,0x4
c000ce58:	75 dd                	jne    c000ce37 <int_handler+0x3b>
c000ce5a:	83 c4 0c             	add    esp,0xc
c000ce5d:	31 c0                	xor    eax,eax
c000ce5f:	5b                   	pop    ebx
c000ce60:	31 d2                	xor    edx,edx
c000ce62:	5e                   	pop    esi
c000ce63:	5f                   	pop    edi
c000ce64:	5d                   	pop    ebp
c000ce65:	c3                   	ret    
c000ce66:	83 ec 0c             	sub    esp,0xc
c000ce69:	50                   	push   eax
c000ce6a:	e8 43 b4 00 00       	call   c00182b2 <HalEndOfInterrupt(int)>
c000ce6f:	83 c4 10             	add    esp,0x10
c000ce72:	eb b2                	jmp    c000ce26 <int_handler+0x2a>
c000ce74:	83 ec 08             	sub    esp,0x8
c000ce77:	52                   	push   edx
c000ce78:	57                   	push   edi
c000ce79:	ff d0                	call   eax
c000ce7b:	83 c4 10             	add    esp,0x10
c000ce7e:	83 c4 0c             	add    esp,0xc
c000ce81:	5b                   	pop    ebx
c000ce82:	5e                   	pop    esi
c000ce83:	5f                   	pop    edi
c000ce84:	5d                   	pop    ebp
c000ce85:	c3                   	ret    

c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ce86:	56                   	push   esi
c000ce87:	31 c0                	xor    eax,eax
c000ce89:	53                   	push   ebx
c000ce8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ce8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce92:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ce96:	89 ca                	mov    edx,ecx
c000ce98:	c1 e2 04             	shl    edx,0x4
c000ce9b:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cea3:	74 17                	je     c000cebc <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cea5:	83 c0 01             	add    eax,0x1
c000cea8:	83 f8 04             	cmp    eax,0x4
c000ceab:	75 ee                	jne    c000ce9b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cead:	c7 44 24 0c 44 1b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021b44
c000ceb5:	5b                   	pop    ebx
c000ceb6:	5e                   	pop    esi
c000ceb7:	e9 5b 46 00 00       	jmp    c0011517 <KePanic(char const*)>
c000cebc:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cebf:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cec6:	5b                   	pop    ebx
c000cec7:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cece:	5e                   	pop    esi
c000cecf:	c3                   	ret    

c000ced0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ced0:	55                   	push   ebp
c000ced1:	57                   	push   edi
c000ced2:	56                   	push   esi
c000ced3:	53                   	push   ebx
c000ced4:	83 ec 0c             	sub    esp,0xc
c000ced7:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cedd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cee1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cee5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ceec:	8d 6e 20             	lea    ebp,[esi+0x20]
c000ceef:	74 57                	je     c000cf48 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cef1:	84 c0                	test   al,al
c000cef3:	89 c7                	mov    edi,eax
c000cef5:	74 1d                	je     c000cf14 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cef7:	83 fe 0f             	cmp    esi,0xf
c000cefa:	0f 8f d9 00 00 00    	jg     c000cfd9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cf00:	0f b6 b6 48 36 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc9b8]
c000cf07:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf0f:	d1 ef                	shr    edi,1
c000cf11:	83 e7 01             	and    edi,0x1
c000cf14:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf19:	83 ec 08             	sub    esp,0x8
c000cf1c:	31 db                	xor    ebx,ebx
c000cf1e:	50                   	push   eax
c000cf1f:	68 51 1b 02 c0       	push   0xc0021b51
c000cf24:	e8 e1 d9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cf29:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf2e:	83 c4 10             	add    esp,0x10
c000cf31:	85 c0                	test   eax,eax
c000cf33:	7f 59                	jg     c000cf8e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cf35:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cf38:	83 ec 0c             	sub    esp,0xc
c000cf3b:	68 68 1b 02 c0       	push   0xc0021b68
c000cf40:	e8 d2 45 00 00       	call   c0011517 <KePanic(char const*)>
c000cf45:	83 c4 10             	add    esp,0x10
c000cf48:	89 e8                	mov    eax,ebp
c000cf4a:	31 d2                	xor    edx,edx
c000cf4c:	c1 e0 04             	shl    eax,0x4
c000cf4f:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cf56:	85 c9                	test   ecx,ecx
c000cf58:	0f 84 92 00 00 00    	je     c000cff0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cf5e:	83 c2 01             	add    edx,0x1
c000cf61:	83 fa 04             	cmp    edx,0x4
c000cf64:	75 e9                	jne    c000cf4f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cf66:	83 ec 0c             	sub    esp,0xc
c000cf69:	68 bc 1b 02 c0       	push   0xc0021bbc
c000cf6e:	e8 a4 45 00 00       	call   c0011517 <KePanic(char const*)>
c000cf73:	83 c4 10             	add    esp,0x10
c000cf76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf7b:	83 c4 0c             	add    esp,0xc
c000cf7e:	5b                   	pop    ebx
c000cf7f:	5e                   	pop    esi
c000cf80:	5f                   	pop    edi
c000cf81:	5d                   	pop    ebp
c000cf82:	c3                   	ret    
c000cf83:	83 c3 01             	add    ebx,0x1
c000cf86:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000cf8c:	7e a7                	jle    c000cf35 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cf8e:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000cf95:	83 ec 08             	sub    esp,0x8
c000cf98:	56                   	push   esi
c000cf99:	55                   	push   ebp
c000cf9a:	e8 fd 1a 01 00       	call   c001ea9c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	84 c0                	test   al,al
c000cfa4:	74 dd                	je     c000cf83 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cfa6:	89 f8                	mov    eax,edi
c000cfa8:	83 ec 04             	sub    esp,0x4
c000cfab:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000cfb2:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cfb5:	0f b6 f8             	movzx  edi,al
c000cfb8:	57                   	push   edi
c000cfb9:	89 e8                	mov    eax,ebp
c000cfbb:	6a 00                	push   0x0
c000cfbd:	0f b6 c0             	movzx  eax,al
c000cfc0:	50                   	push   eax
c000cfc1:	89 f0                	mov    eax,esi
c000cfc3:	6a 00                	push   0x0
c000cfc5:	0f b6 c0             	movzx  eax,al
c000cfc8:	6a 00                	push   0x0
c000cfca:	50                   	push   eax
c000cfcb:	53                   	push   ebx
c000cfcc:	e8 37 1c 01 00       	call   c001ec08 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cfd1:	83 c4 20             	add    esp,0x20
c000cfd4:	e9 6f ff ff ff       	jmp    c000cf48 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cfd9:	83 ec 0c             	sub    esp,0xc
c000cfdc:	31 ff                	xor    edi,edi
c000cfde:	68 84 1b 02 c0       	push   0xc0021b84
c000cfe3:	e8 2f 45 00 00       	call   c0011517 <KePanic(char const*)>
c000cfe8:	83 c4 10             	add    esp,0x10
c000cfeb:	e9 24 ff ff ff       	jmp    c000cf14 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cff0:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cff3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cff7:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000cffe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d002:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d009:	83 c4 0c             	add    esp,0xc
c000d00c:	89 f0                	mov    eax,esi
c000d00e:	5b                   	pop    ebx
c000d00f:	5e                   	pop    esi
c000d010:	5f                   	pop    edi
c000d011:	5d                   	pop    ebp
c000d012:	c3                   	ret    

c000d013 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d013:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d017:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d01b:	c1 e0 04             	shl    eax,0x4
c000d01e:	8d 50 10             	lea    edx,[eax+0x10]
c000d021:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d027:	74 08                	je     c000d031 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d029:	83 c0 04             	add    eax,0x4
c000d02c:	39 d0                	cmp    eax,edx
c000d02e:	75 f1                	jne    c000d021 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d030:	c3                   	ret    
c000d031:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d03b:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d045:	eb e2                	jmp    c000d029 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d047 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d047:	56                   	push   esi
c000d048:	53                   	push   ebx
c000d049:	83 ec 04             	sub    esp,0x4
c000d04c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d051:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d055:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d059:	74 0e                	je     c000d069 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d05b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d060:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d067:	75 34                	jne    c000d09d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d069:	8d 43 20             	lea    eax,[ebx+0x20]
c000d06c:	c1 e0 04             	shl    eax,0x4
c000d06f:	8d 50 10             	lea    edx,[eax+0x10]
c000d072:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d078:	74 0d                	je     c000d087 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d07a:	83 c0 04             	add    eax,0x4
c000d07d:	39 d0                	cmp    eax,edx
c000d07f:	75 f1                	jne    c000d072 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d081:	83 c4 04             	add    esp,0x4
c000d084:	5b                   	pop    ebx
c000d085:	5e                   	pop    esi
c000d086:	c3                   	ret    
c000d087:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d091:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d09b:	eb dd                	jmp    c000d07a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d09d:	83 fb 0f             	cmp    ebx,0xf
c000d0a0:	7f 09                	jg     c000d0ab <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d0a2:	0f b6 9b 48 36 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc9b8]
c000d0a9:	eb be                	jmp    c000d069 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d0ab:	83 ec 0c             	sub    esp,0xc
c000d0ae:	68 75 1b 02 c0       	push   0xc0021b75
c000d0b3:	e8 5f 44 00 00       	call   c0011517 <KePanic(char const*)>
c000d0b8:	83 c4 10             	add    esp,0x10
c000d0bb:	eb ac                	jmp    c000d069 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d0bd <setupINTS()>:
c000d0bd:	31 c0                	xor    eax,eax
c000d0bf:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0c9:	83 c0 10             	add    eax,0x10
c000d0cc:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d0d6:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d0e0:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d0ea:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d0f4:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d0fe:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d108:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d112:	3d 00 10 00 00       	cmp    eax,0x1000
c000d117:	75 a6                	jne    c000d0bf <setupINTS()+0x2>
c000d119:	c3                   	ret    

c000d11a <convertLegacyIRQNumber(int)>:
c000d11a:	83 ec 0c             	sub    esp,0xc
c000d11d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d127:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d12e:	74 0c                	je     c000d13c <convertLegacyIRQNumber(int)+0x22>
c000d130:	83 f8 0f             	cmp    eax,0xf
c000d133:	7f 0b                	jg     c000d140 <convertLegacyIRQNumber(int)+0x26>
c000d135:	0f b6 80 48 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc9b8]
c000d13c:	83 c4 0c             	add    esp,0xc
c000d13f:	c3                   	ret    
c000d140:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d144:	83 ec 0c             	sub    esp,0xc
c000d147:	68 84 1b 02 c0       	push   0xc0021b84
c000d14c:	e8 c6 43 00 00       	call   c0011517 <KePanic(char const*)>
c000d151:	83 c4 10             	add    esp,0x10
c000d154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d158:	83 c4 0c             	add    esp,0xc
c000d15b:	c3                   	ret    

c000d15c <startGUI(void*)>:
c000d15c:	55                   	push   ebp
c000d15d:	89 e5                	mov    ebp,esp
c000d15f:	53                   	push   ebx
c000d160:	83 ec 04             	sub    esp,0x4
c000d163:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d168:	83 e8 01             	sub    eax,0x1
c000d16b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d170:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d175:	85 c0                	test   eax,eax
c000d177:	75 01                	jne    c000d17a <startGUI(void*)+0x1e>
c000d179:	fb                   	sti    
c000d17a:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d180:	83 ec 08             	sub    esp,0x8
c000d183:	6a 01                	push   0x1
c000d185:	68 e1 1b 02 c0       	push   0xc0021be1
c000d18a:	e8 06 84 00 00       	call   c0015595 <Thr::loadDLL(char const*, bool)>
c000d18f:	83 c4 10             	add    esp,0x10
c000d192:	83 ec 08             	sub    esp,0x8
c000d195:	53                   	push   ebx
c000d196:	50                   	push   eax
c000d197:	e8 39 86 00 00       	call   c00157d5 <Thr::executeDLL(unsigned long, void*)>
c000d19c:	83 c4 10             	add    esp,0x10
c000d19f:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1a5:	83 ec 08             	sub    esp,0x8
c000d1a8:	6a 01                	push   0x1
c000d1aa:	68 fb 1b 02 c0       	push   0xc0021bfb
c000d1af:	e8 e1 83 00 00       	call   c0015595 <Thr::loadDLL(char const*, bool)>
c000d1b4:	83 c4 10             	add    esp,0x10
c000d1b7:	83 ec 08             	sub    esp,0x8
c000d1ba:	53                   	push   ebx
c000d1bb:	50                   	push   eax
c000d1bc:	e8 14 86 00 00       	call   c00157d5 <Thr::executeDLL(unsigned long, void*)>
c000d1c1:	83 c4 10             	add    esp,0x10
c000d1c4:	90                   	nop
c000d1c5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d1c8:	c9                   	leave  
c000d1c9:	c3                   	ret    

c000d1ca <startGUIVESA(void*)>:
c000d1ca:	55                   	push   ebp
c000d1cb:	89 e5                	mov    ebp,esp
c000d1cd:	53                   	push   ebx
c000d1ce:	83 ec 04             	sub    esp,0x4
c000d1d1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1d6:	83 e8 01             	sub    eax,0x1
c000d1d9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1de:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1e3:	85 c0                	test   eax,eax
c000d1e5:	75 01                	jne    c000d1e8 <startGUIVESA(void*)+0x1e>
c000d1e7:	fb                   	sti    
c000d1e8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1ee:	83 ec 08             	sub    esp,0x8
c000d1f1:	6a 01                	push   0x1
c000d1f3:	68 19 1c 02 c0       	push   0xc0021c19
c000d1f8:	e8 98 83 00 00       	call   c0015595 <Thr::loadDLL(char const*, bool)>
c000d1fd:	83 c4 10             	add    esp,0x10
c000d200:	83 ec 08             	sub    esp,0x8
c000d203:	53                   	push   ebx
c000d204:	50                   	push   eax
c000d205:	e8 cb 85 00 00       	call   c00157d5 <Thr::executeDLL(unsigned long, void*)>
c000d20a:	83 c4 10             	add    esp,0x10
c000d20d:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d213:	83 ec 08             	sub    esp,0x8
c000d216:	6a 01                	push   0x1
c000d218:	68 fb 1b 02 c0       	push   0xc0021bfb
c000d21d:	e8 73 83 00 00       	call   c0015595 <Thr::loadDLL(char const*, bool)>
c000d222:	83 c4 10             	add    esp,0x10
c000d225:	83 ec 08             	sub    esp,0x8
c000d228:	53                   	push   ebx
c000d229:	50                   	push   eax
c000d22a:	e8 a6 85 00 00       	call   c00157d5 <Thr::executeDLL(unsigned long, void*)>
c000d22f:	83 c4 10             	add    esp,0x10
c000d232:	90                   	nop
c000d233:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d236:	c9                   	leave  
c000d237:	c3                   	ret    

c000d238 <sendKeyToTerminal(unsigned char)>:
c000d238:	55                   	push   ebp
c000d239:	89 e5                	mov    ebp,esp
c000d23b:	83 ec 28             	sub    esp,0x28
c000d23e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d241:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d244:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d249:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d24d:	83 ec 08             	sub    esp,0x8
c000d250:	52                   	push   edx
c000d251:	50                   	push   eax
c000d252:	e8 65 bb ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d257:	83 c4 10             	add    esp,0x10
c000d25a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d25e:	83 f8 0a             	cmp    eax,0xa
c000d261:	74 16                	je     c000d279 <sendKeyToTerminal(unsigned char)+0x41>
c000d263:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d267:	83 f8 03             	cmp    eax,0x3
c000d26a:	74 0d                	je     c000d279 <sendKeyToTerminal(unsigned char)+0x41>
c000d26c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d270:	83 f8 1c             	cmp    eax,0x1c
c000d273:	0f 85 97 00 00 00    	jne    c000d310 <sendKeyToTerminal(unsigned char)+0xd8>
c000d279:	fa                   	cli    
c000d27a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d27f:	83 c0 01             	add    eax,0x1
c000d282:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d287:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d28c:	83 c0 01             	add    eax,0x1
c000d28f:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d294:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d299:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d29c:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d2a6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d2aa:	74 1f                	je     c000d2cb <sendKeyToTerminal(unsigned char)+0x93>
c000d2ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d2af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d2b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d2b5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d2b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d2bb:	83 ec 0c             	sub    esp,0xc
c000d2be:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d2c1:	e8 32 92 00 00       	call   c00164f8 <unblockTask(ThreadControlBlock*)>
c000d2c6:	83 c4 10             	add    esp,0x10
c000d2c9:	eb db                	jmp    c000d2a6 <sendKeyToTerminal(unsigned char)+0x6e>
c000d2cb:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2d0:	83 e8 01             	sub    eax,0x1
c000d2d3:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d2d8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2dd:	85 c0                	test   eax,eax
c000d2df:	75 18                	jne    c000d2f9 <sendKeyToTerminal(unsigned char)+0xc1>
c000d2e1:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d2e6:	85 c0                	test   eax,eax
c000d2e8:	74 0f                	je     c000d2f9 <sendKeyToTerminal(unsigned char)+0xc1>
c000d2ea:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d2f4:	e8 07 8d 00 00       	call   c0016000 <schedule()>
c000d2f9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2fe:	83 e8 01             	sub    eax,0x1
c000d301:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d306:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d30b:	85 c0                	test   eax,eax
c000d30d:	75 01                	jne    c000d310 <sendKeyToTerminal(unsigned char)+0xd8>
c000d30f:	fb                   	sti    
c000d310:	90                   	nop
c000d311:	c9                   	leave  
c000d312:	c3                   	ret    

c000d313 <sendKeyboardToken(KeyboardToken)>:
c000d313:	55                   	push   ebp
c000d314:	89 e5                	mov    ebp,esp
c000d316:	83 ec 18             	sub    esp,0x18
c000d319:	e8 49 42 00 00       	call   c0011567 <KeUserIOReceived()>
c000d31e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d324:	0f b7 c0             	movzx  eax,ax
c000d327:	83 f2 01             	xor    edx,0x1
c000d32a:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d330:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d335:	85 c0                	test   eax,eax
c000d337:	74 24                	je     c000d35d <sendKeyboardToken(KeyboardToken)+0x4a>
c000d339:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d33f:	83 ec 04             	sub    esp,0x4
c000d342:	68 40 b4 02 c0       	push   0xc002b440
c000d347:	83 ec 08             	sub    esp,0x8
c000d34a:	89 e0                	mov    eax,esp
c000d34c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d34f:	89 08                	mov    DWORD PTR [eax],ecx
c000d351:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d354:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d358:	ff d2                	call   edx
c000d35a:	83 c4 10             	add    esp,0x10
c000d35d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d361:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d364:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d369:	0f b6 d2             	movzx  edx,dl
c000d36c:	0f b6 c0             	movzx  eax,al
c000d36f:	39 c2                	cmp    edx,eax
c000d371:	74 1c                	je     c000d38f <sendKeyboardToken(KeyboardToken)+0x7c>
c000d373:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d376:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d37b:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d380:	0f b6 c0             	movzx  eax,al
c000d383:	83 ec 0c             	sub    esp,0xc
c000d386:	50                   	push   eax
c000d387:	e8 8c b1 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d38c:	83 c4 10             	add    esp,0x10
c000d38f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d392:	0f b6 c0             	movzx  eax,al
c000d395:	85 c0                	test   eax,eax
c000d397:	0f 84 da 00 00 00    	je     c000d477 <sendKeyboardToken(KeyboardToken)+0x164>
c000d39d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3a0:	0f b7 c0             	movzx  eax,ax
c000d3a3:	3d 18 03 00 00       	cmp    eax,0x318
c000d3a8:	75 06                	jne    c000d3b0 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d3aa:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d3b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3b3:	0f b7 c0             	movzx  eax,ax
c000d3b6:	3d 19 03 00 00       	cmp    eax,0x319
c000d3bb:	75 06                	jne    c000d3c3 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d3bd:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d3c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c6:	0f b7 c0             	movzx  eax,ax
c000d3c9:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d3ce:	75 06                	jne    c000d3d6 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d3d0:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d3d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d9:	0f b7 c0             	movzx  eax,ax
c000d3dc:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d3e1:	75 06                	jne    c000d3e9 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d3e3:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d3e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ec:	0f b7 c0             	movzx  eax,ax
c000d3ef:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d3f4:	75 06                	jne    c000d3fc <sendKeyboardToken(KeyboardToken)+0xe9>
c000d3f6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d3fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ff:	0f b7 c0             	movzx  eax,ax
c000d402:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d407:	75 06                	jne    c000d40f <sendKeyboardToken(KeyboardToken)+0xfc>
c000d409:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d40f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d412:	0f b7 c0             	movzx  eax,ax
c000d415:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d41a:	75 06                	jne    c000d422 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d41c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d425:	0f b7 c0             	movzx  eax,ax
c000d428:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d42d:	75 06                	jne    c000d435 <sendKeyboardToken(KeyboardToken)+0x122>
c000d42f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d438:	0f b7 c0             	movzx  eax,ax
c000d43b:	3d 20 03 00 00       	cmp    eax,0x320
c000d440:	75 06                	jne    c000d448 <sendKeyboardToken(KeyboardToken)+0x135>
c000d442:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d44b:	0f b7 c0             	movzx  eax,ax
c000d44e:	3d 21 03 00 00       	cmp    eax,0x321
c000d453:	75 06                	jne    c000d45b <sendKeyboardToken(KeyboardToken)+0x148>
c000d455:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d45b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d45e:	0f b7 c0             	movzx  eax,ax
c000d461:	3d 22 03 00 00       	cmp    eax,0x322
c000d466:	0f 85 f1 00 00 00    	jne    c000d55d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d46c:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d472:	e9 e6 00 00 00       	jmp    c000d55d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47a:	0f b7 c0             	movzx  eax,ax
c000d47d:	3d 18 03 00 00       	cmp    eax,0x318
c000d482:	75 0a                	jne    c000d48e <sendKeyboardToken(KeyboardToken)+0x17b>
c000d484:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d48a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d48e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d491:	0f b7 c0             	movzx  eax,ax
c000d494:	3d 19 03 00 00       	cmp    eax,0x319
c000d499:	75 0a                	jne    c000d4a5 <sendKeyboardToken(KeyboardToken)+0x192>
c000d49b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d4a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a8:	0f b7 c0             	movzx  eax,ax
c000d4ab:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d4b0:	75 0a                	jne    c000d4bc <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d4b2:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d4b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4bf:	0f b7 c0             	movzx  eax,ax
c000d4c2:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4c7:	75 0a                	jne    c000d4d3 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d4c9:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d4cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d6:	0f b7 c0             	movzx  eax,ax
c000d4d9:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4de:	75 0a                	jne    c000d4ea <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d4e0:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d4e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ed:	0f b7 c0             	movzx  eax,ax
c000d4f0:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4f5:	75 0a                	jne    c000d501 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d4f7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d4fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d504:	0f b7 c0             	movzx  eax,ax
c000d507:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d50c:	75 0a                	jne    c000d518 <sendKeyboardToken(KeyboardToken)+0x205>
c000d50e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d514:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d51b:	0f b7 c0             	movzx  eax,ax
c000d51e:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d523:	75 0a                	jne    c000d52f <sendKeyboardToken(KeyboardToken)+0x21c>
c000d525:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d52b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d52f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d532:	0f b7 c0             	movzx  eax,ax
c000d535:	3d 20 03 00 00       	cmp    eax,0x320
c000d53a:	75 0a                	jne    c000d546 <sendKeyboardToken(KeyboardToken)+0x233>
c000d53c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d542:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d549:	0f b7 c0             	movzx  eax,ax
c000d54c:	3d 21 03 00 00       	cmp    eax,0x321
c000d551:	75 0a                	jne    c000d55d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d553:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d559:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d55d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d560:	0f b7 c0             	movzx  eax,ax
c000d563:	3d 00 02 00 00       	cmp    eax,0x200
c000d568:	75 2f                	jne    c000d599 <sendKeyboardToken(KeyboardToken)+0x286>
c000d56a:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d56f:	83 f0 01             	xor    eax,0x1
c000d572:	0f b6 c0             	movzx  eax,al
c000d575:	85 c0                	test   eax,eax
c000d577:	74 20                	je     c000d599 <sendKeyboardToken(KeyboardToken)+0x286>
c000d579:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d57e:	6a 01                	push   0x1
c000d580:	6a 00                	push   0x0
c000d582:	68 5c d1 00 c0       	push   0xc000d15c
c000d587:	50                   	push   eax
c000d588:	e8 27 88 00 00       	call   c0015db4 <Process::createThread(void (*)(void*), void*, int)>
c000d58d:	83 c4 10             	add    esp,0x10
c000d590:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d597:	eb 3a                	jmp    c000d5d3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59c:	0f b7 c0             	movzx  eax,ax
c000d59f:	3d 01 02 00 00       	cmp    eax,0x201
c000d5a4:	75 2d                	jne    c000d5d3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5a6:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5ab:	83 f0 01             	xor    eax,0x1
c000d5ae:	0f b6 c0             	movzx  eax,al
c000d5b1:	85 c0                	test   eax,eax
c000d5b3:	74 1e                	je     c000d5d3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5b5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5ba:	6a 01                	push   0x1
c000d5bc:	6a 00                	push   0x0
c000d5be:	68 ca d1 00 c0       	push   0xc000d1ca
c000d5c3:	50                   	push   eax
c000d5c4:	e8 eb 87 00 00       	call   c0015db4 <Process::createThread(void (*)(void*), void*, int)>
c000d5c9:	83 c4 10             	add    esp,0x10
c000d5cc:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d5d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d6:	0f b7 c0             	movzx  eax,ax
c000d5d9:	3d 25 03 00 00       	cmp    eax,0x325
c000d5de:	75 06                	jne    c000d5e6 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d5e0:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d5e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e9:	0f b7 c0             	movzx  eax,ax
c000d5ec:	3d 24 03 00 00       	cmp    eax,0x324
c000d5f1:	75 06                	jne    c000d5f9 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d5f3:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d5f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5fc:	0f b7 c0             	movzx  eax,ax
c000d5ff:	3d 23 03 00 00       	cmp    eax,0x323
c000d604:	75 06                	jne    c000d60c <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d606:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d60c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d60f:	0f b7 c0             	movzx  eax,ax
c000d612:	3d 26 03 00 00       	cmp    eax,0x326
c000d617:	75 06                	jne    c000d61f <sendKeyboardToken(KeyboardToken)+0x30c>
c000d619:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d61f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d622:	0f b7 c0             	movzx  eax,ax
c000d625:	3d 27 03 00 00       	cmp    eax,0x327
c000d62a:	75 06                	jne    c000d632 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d62c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d635:	0f b7 c0             	movzx  eax,ax
c000d638:	3d 22 03 00 00       	cmp    eax,0x322
c000d63d:	75 06                	jne    c000d645 <sendKeyboardToken(KeyboardToken)+0x332>
c000d63f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d645:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d649:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d64c:	83 f0 01             	xor    eax,0x1
c000d64f:	0f b6 c0             	movzx  eax,al
c000d652:	85 c0                	test   eax,eax
c000d654:	74 7c                	je     c000d6d2 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d656:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d65b:	0f b6 c0             	movzx  eax,al
c000d65e:	85 c0                	test   eax,eax
c000d660:	74 43                	je     c000d6a5 <sendKeyboardToken(KeyboardToken)+0x392>
c000d662:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d666:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d66a:	85 c0                	test   eax,eax
c000d66c:	74 2b                	je     c000d699 <sendKeyboardToken(KeyboardToken)+0x386>
c000d66e:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d674:	89 d0                	mov    eax,edx
c000d676:	c1 e0 02             	shl    eax,0x2
c000d679:	01 d0                	add    eax,edx
c000d67b:	d1 e0                	shl    eax,1
c000d67d:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d685:	0f b7 c0             	movzx  eax,ax
c000d688:	8d 50 d0             	lea    edx,[eax-0x30]
c000d68b:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d690:	01 d0                	add    eax,edx
c000d692:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d697:	eb 71                	jmp    c000d70a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d699:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6a3:	eb 65                	jmp    c000d70a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6a5:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6aa:	85 c0                	test   eax,eax
c000d6ac:	74 18                	je     c000d6c6 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d6ae:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6b3:	0f b6 c0             	movzx  eax,al
c000d6b6:	83 ec 0c             	sub    esp,0xc
c000d6b9:	50                   	push   eax
c000d6ba:	e8 79 fb ff ff       	call   c000d238 <sendKeyToTerminal(unsigned char)>
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6c6:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6d0:	eb 38                	jmp    c000d70a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d5:	0f b7 c0             	movzx  eax,ax
c000d6d8:	3d 01 01 00 00       	cmp    eax,0x101
c000d6dd:	75 2b                	jne    c000d70a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6df:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6e4:	85 c0                	test   eax,eax
c000d6e6:	74 18                	je     c000d700 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d6e8:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6ed:	0f b6 c0             	movzx  eax,al
c000d6f0:	83 ec 0c             	sub    esp,0xc
c000d6f3:	50                   	push   eax
c000d6f4:	e8 3f fb ff ff       	call   c000d238 <sendKeyToTerminal(unsigned char)>
c000d6f9:	83 c4 10             	add    esp,0x10
c000d6fc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d700:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d70a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d70d:	83 f0 01             	xor    eax,0x1
c000d710:	0f b6 c0             	movzx  eax,al
c000d713:	85 c0                	test   eax,eax
c000d715:	74 5a                	je     c000d771 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d717:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d71a:	83 f0 01             	xor    eax,0x1
c000d71d:	0f b6 c0             	movzx  eax,al
c000d720:	85 c0                	test   eax,eax
c000d722:	74 4d                	je     c000d771 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d724:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d729:	83 f0 01             	xor    eax,0x1
c000d72c:	0f b6 c0             	movzx  eax,al
c000d72f:	85 c0                	test   eax,eax
c000d731:	74 3e                	je     c000d771 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d736:	0f b7 c0             	movzx  eax,ax
c000d739:	83 f8 1f             	cmp    eax,0x1f
c000d73c:	76 0b                	jbe    c000d749 <sendKeyboardToken(KeyboardToken)+0x436>
c000d73e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d741:	0f b7 c0             	movzx  eax,ax
c000d744:	83 f8 7e             	cmp    eax,0x7e
c000d747:	76 16                	jbe    c000d75f <sendKeyboardToken(KeyboardToken)+0x44c>
c000d749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d74c:	0f b7 c0             	movzx  eax,ax
c000d74f:	83 f8 0a             	cmp    eax,0xa
c000d752:	74 0b                	je     c000d75f <sendKeyboardToken(KeyboardToken)+0x44c>
c000d754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d757:	0f b7 c0             	movzx  eax,ax
c000d75a:	83 f8 08             	cmp    eax,0x8
c000d75d:	75 12                	jne    c000d771 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d75f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d762:	0f b6 c0             	movzx  eax,al
c000d765:	83 ec 0c             	sub    esp,0xc
c000d768:	50                   	push   eax
c000d769:	e8 ca fa ff ff       	call   c000d238 <sendKeyToTerminal(unsigned char)>
c000d76e:	83 c4 10             	add    esp,0x10
c000d771:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d774:	83 f0 01             	xor    eax,0x1
c000d777:	0f b6 c0             	movzx  eax,al
c000d77a:	85 c0                	test   eax,eax
c000d77c:	74 5d                	je     c000d7db <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d77e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d781:	83 f0 01             	xor    eax,0x1
c000d784:	0f b6 c0             	movzx  eax,al
c000d787:	85 c0                	test   eax,eax
c000d789:	74 50                	je     c000d7db <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d78b:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d790:	0f b6 c0             	movzx  eax,al
c000d793:	85 c0                	test   eax,eax
c000d795:	74 44                	je     c000d7db <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d79a:	0f b7 c0             	movzx  eax,ax
c000d79d:	83 f8 3f             	cmp    eax,0x3f
c000d7a0:	76 39                	jbe    c000d7db <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a5:	0f b7 c0             	movzx  eax,ax
c000d7a8:	83 f8 7f             	cmp    eax,0x7f
c000d7ab:	77 2e                	ja     c000d7db <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b0:	88 c2                	mov    dl,al
c000d7b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b5:	0f b7 c0             	movzx  eax,ax
c000d7b8:	83 f8 5f             	cmp    eax,0x5f
c000d7bb:	76 04                	jbe    c000d7c1 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d7bd:	b0 20                	mov    al,0x20
c000d7bf:	eb 02                	jmp    c000d7c3 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d7c1:	b0 00                	mov    al,0x0
c000d7c3:	89 d1                	mov    ecx,edx
c000d7c5:	29 c1                	sub    ecx,eax
c000d7c7:	89 c8                	mov    eax,ecx
c000d7c9:	83 e8 40             	sub    eax,0x40
c000d7cc:	0f b6 c0             	movzx  eax,al
c000d7cf:	83 ec 0c             	sub    esp,0xc
c000d7d2:	50                   	push   eax
c000d7d3:	e8 60 fa ff ff       	call   c000d238 <sendKeyToTerminal(unsigned char)>
c000d7d8:	83 c4 10             	add    esp,0x10
c000d7db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7de:	0f b7 c0             	movzx  eax,ax
c000d7e1:	3d 00 03 00 00       	cmp    eax,0x300
c000d7e6:	75 12                	jne    c000d7fa <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d7e8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7eb:	83 f0 01             	xor    eax,0x1
c000d7ee:	0f b6 c0             	movzx  eax,al
c000d7f1:	85 c0                	test   eax,eax
c000d7f3:	74 05                	je     c000d7fa <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d7f5:	e8 1f ad ff ff       	call   c0008519 <doTerminalCycle()>
c000d7fa:	90                   	nop
c000d7fb:	c9                   	leave  
c000d7fc:	c3                   	ret    

c000d7fd <clearInternalKeybuffer(VgaText*)>:
c000d7fd:	55                   	push   ebp
c000d7fe:	89 e5                	mov    ebp,esp
c000d800:	83 ec 08             	sub    esp,0x8
c000d803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d806:	05 02 01 00 00       	add    eax,0x102
c000d80b:	83 ec 0c             	sub    esp,0xc
c000d80e:	50                   	push   eax
c000d80f:	e8 6c 2d ff ff       	call   c0000580 <strlen>
c000d814:	83 c4 10             	add    esp,0x10
c000d817:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d81a:	81 c2 02 01 00 00    	add    edx,0x102
c000d820:	83 ec 04             	sub    esp,0x4
c000d823:	50                   	push   eax
c000d824:	6a 00                	push   0x0
c000d826:	52                   	push   edx
c000d827:	e8 c4 2c ff ff       	call   c00004f0 <memset>
c000d82c:	83 c4 10             	add    esp,0x10
c000d82f:	90                   	nop
c000d830:	c9                   	leave  
c000d831:	c3                   	ret    

c000d832 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d832:	55                   	push   ebp
c000d833:	89 e5                	mov    ebp,esp
c000d835:	83 ec 18             	sub    esp,0x18
c000d838:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d83d:	85 c0                	test   eax,eax
c000d83f:	74 2a                	je     c000d86b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d841:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d847:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d84d:	83 ec 04             	sub    esp,0x4
c000d850:	68 40 b4 02 c0       	push   0xc002b440
c000d855:	83 ec 08             	sub    esp,0x8
c000d858:	89 e0                	mov    eax,esp
c000d85a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d85d:	89 08                	mov    DWORD PTR [eax],ecx
c000d85f:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d862:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d866:	ff d2                	call   edx
c000d868:	83 c4 10             	add    esp,0x10
c000d86b:	fb                   	sti    
c000d86c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d873:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d877:	0f 84 0d 01 00 00    	je     c000d98a <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d87d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d880:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d886:	0f be c0             	movsx  eax,al
c000d889:	85 c0                	test   eax,eax
c000d88b:	75 2c                	jne    c000d8b9 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d88d:	fa                   	cli    
c000d88e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d893:	83 c0 01             	add    eax,0x1
c000d896:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d89b:	e8 60 87 00 00       	call   c0016000 <schedule()>
c000d8a0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8a5:	83 e8 01             	sub    eax,0x1
c000d8a8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d8ad:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8b2:	85 c0                	test   eax,eax
c000d8b4:	75 c7                	jne    c000d87d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d8b6:	fb                   	sti    
c000d8b7:	eb c4                	jmp    c000d87d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d8b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000d8bf:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d8c2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8c5:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d8cb:	88 10                	mov    BYTE PTR [eax],dl
c000d8cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8d0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d8d6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d8d9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d8dd:	83 f8 03             	cmp    eax,0x3
c000d8e0:	75 1e                	jne    c000d900 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d8e2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d8e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000d8e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d8ec:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d8f2:	83 ec 08             	sub    esp,0x8
c000d8f5:	6a 02                	push   0x2
c000d8f7:	50                   	push   eax
c000d8f8:	e8 b6 40 00 00       	call   c00119b3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d8fd:	83 c4 10             	add    esp,0x10
c000d900:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d904:	83 f8 1c             	cmp    eax,0x1c
c000d907:	75 1e                	jne    c000d927 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d909:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d90e:	8b 00                	mov    eax,DWORD PTR [eax]
c000d910:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d913:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d919:	83 ec 08             	sub    esp,0x8
c000d91c:	6a 09                	push   0x9
c000d91e:	50                   	push   eax
c000d91f:	e8 8f 40 00 00       	call   c00119b3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d924:	83 c4 10             	add    esp,0x10
c000d927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d92a:	05 02 01 00 00       	add    eax,0x102
c000d92f:	83 ec 0c             	sub    esp,0xc
c000d932:	50                   	push   eax
c000d933:	e8 48 2c ff ff       	call   c0000580 <strlen>
c000d938:	83 c4 10             	add    esp,0x10
c000d93b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d93e:	81 c2 02 01 00 00    	add    edx,0x102
c000d944:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d947:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d94a:	81 c2 02 01 00 00    	add    edx,0x102
c000d950:	83 ec 04             	sub    esp,0x4
c000d953:	50                   	push   eax
c000d954:	51                   	push   ecx
c000d955:	52                   	push   edx
c000d956:	e8 75 2a ff ff       	call   c00003d0 <memmove>
c000d95b:	83 c4 10             	add    esp,0x10
c000d95e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d962:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d966:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d96a:	83 f8 0a             	cmp    eax,0xa
c000d96d:	74 16                	je     c000d985 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d96f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d973:	83 f8 03             	cmp    eax,0x3
c000d976:	74 0d                	je     c000d985 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d978:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d97c:	83 f8 1c             	cmp    eax,0x1c
c000d97f:	0f 85 ee fe ff ff    	jne    c000d873 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d985:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d988:	eb 03                	jmp    c000d98d <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d98a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d98d:	c9                   	leave  
c000d98e:	c3                   	ret    
c000d98f:	90                   	nop

c000d990 <Keyboard::Keyboard(char const*)>:
c000d990:	83 ec 0c             	sub    esp,0xc
c000d993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d997:	83 ec 08             	sub    esp,0x8
c000d99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d99e:	50                   	push   eax
c000d99f:	e8 44 f1 ff ff       	call   c000cae8 <Device::Device(char const*)>
c000d9a4:	83 c4 10             	add    esp,0x10
c000d9a7:	ba 3c 1c 02 c0       	mov    edx,0xc0021c3c
c000d9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9b0:	89 10                	mov    DWORD PTR [eax],edx
c000d9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9b6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d9c0:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000d9c7:	90                   	nop
c000d9c8:	83 c4 0c             	add    esp,0xc
c000d9cb:	c3                   	ret    

c000d9cc <Keyboard::~Keyboard()>:
c000d9cc:	83 ec 0c             	sub    esp,0xc
c000d9cf:	ba 3c 1c 02 c0       	mov    edx,0xc0021c3c
c000d9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9d8:	89 10                	mov    DWORD PTR [eax],edx
c000d9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9de:	83 ec 0c             	sub    esp,0xc
c000d9e1:	50                   	push   eax
c000d9e2:	e8 6b ee ff ff       	call   c000c852 <Device::~Device()>
c000d9e7:	83 c4 10             	add    esp,0x10
c000d9ea:	90                   	nop
c000d9eb:	83 c4 0c             	add    esp,0xc
c000d9ee:	c3                   	ret    
c000d9ef:	90                   	nop

c000d9f0 <Keyboard::~Keyboard()>:
c000d9f0:	83 ec 0c             	sub    esp,0xc
c000d9f3:	83 ec 0c             	sub    esp,0xc
c000d9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9fa:	e8 cd ff ff ff       	call   c000d9cc <Keyboard::~Keyboard()>
c000d9ff:	83 c4 10             	add    esp,0x10
c000da02:	83 ec 08             	sub    esp,0x8
c000da05:	68 5c 01 00 00       	push   0x15c
c000da0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da0e:	e8 f9 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000da13:	83 c4 10             	add    esp,0x10
c000da16:	83 c4 0c             	add    esp,0xc
c000da19:	c3                   	ret    

c000da1a <LogicalDisk::close(int, int, void*)>:
c000da1a:	83 c8 ff             	or     eax,0xffffffff
c000da1d:	c3                   	ret    

c000da1e <LogicalDisk::~LogicalDisk()>:
c000da1e:	83 ec 0c             	sub    esp,0xc
c000da21:	ba b4 1c 02 c0       	mov    edx,0xc0021cb4
c000da26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da2a:	89 10                	mov    DWORD PTR [eax],edx
c000da2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da30:	83 ec 0c             	sub    esp,0xc
c000da33:	50                   	push   eax
c000da34:	e8 19 ee ff ff       	call   c000c852 <Device::~Device()>
c000da39:	83 c4 10             	add    esp,0x10
c000da3c:	90                   	nop
c000da3d:	83 c4 0c             	add    esp,0xc
c000da40:	c3                   	ret    
c000da41:	90                   	nop

c000da42 <LogicalDisk::~LogicalDisk()>:
c000da42:	83 ec 0c             	sub    esp,0xc
c000da45:	83 ec 0c             	sub    esp,0xc
c000da48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4c:	e8 cd ff ff ff       	call   c000da1e <LogicalDisk::~LogicalDisk()>
c000da51:	83 c4 10             	add    esp,0x10
c000da54:	83 ec 08             	sub    esp,0x8
c000da57:	68 78 01 00 00       	push   0x178
c000da5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da60:	e8 a7 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000da65:	83 c4 10             	add    esp,0x10
c000da68:	83 c4 0c             	add    esp,0xc
c000da6b:	c3                   	ret    

c000da6c <LogicalDisk::open(int, int, void*)>:
c000da6c:	83 ec 18             	sub    esp,0x18
c000da6f:	68 68 1c 02 c0       	push   0xc0021c68
c000da74:	e8 9e 3a 00 00       	call   c0011517 <KePanic(char const*)>
c000da79:	83 c8 ff             	or     eax,0xffffffff
c000da7c:	83 c4 1c             	add    esp,0x1c
c000da7f:	c3                   	ret    

c000da80 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000da80:	53                   	push   ebx
c000da81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da8d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000da93:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000da99:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000da9f:	77 10                	ja     c000dab1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000daa1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000daa7:	89 d3                	mov    ebx,edx
c000daa9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000daaf:	72 05                	jb     c000dab6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000dab1:	83 c8 ff             	or     eax,0xffffffff
c000dab4:	89 c2                	mov    edx,eax
c000dab6:	5b                   	pop    ebx
c000dab7:	c3                   	ret    

c000dab8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000dab8:	56                   	push   esi
c000dab9:	83 c8 ff             	or     eax,0xffffffff
c000dabc:	53                   	push   ebx
c000dabd:	89 c2                	mov    edx,eax
c000dabf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dac3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dac7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dacb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dad1:	77 27                	ja     c000dafa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dad3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000dad9:	89 d8                	mov    eax,ebx
c000dadb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000dae1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dae6:	89 c2                	mov    edx,eax
c000dae8:	73 10                	jae    c000dafa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000daea:	89 c8                	mov    eax,ecx
c000daec:	89 da                	mov    edx,ebx
c000daee:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000daf4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000dafa:	5b                   	pop    ebx
c000dafb:	5e                   	pop    esi
c000dafc:	c3                   	ret    
c000dafd:	90                   	nop

c000dafe <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dafe:	83 ec 1c             	sub    esp,0x1c
c000db01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db15:	89 04 24             	mov    DWORD PTR [esp],eax
c000db18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db24:	83 ec 08             	sub    esp,0x8
c000db27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db2b:	50                   	push   eax
c000db2c:	e8 b7 ef ff ff       	call   c000cae8 <Device::Device(char const*)>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	ba b4 1c 02 c0       	mov    edx,0xc0021cb4
c000db39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db3d:	89 10                	mov    DWORD PTR [eax],edx
c000db3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db43:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db4e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000db55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db59:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db64:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000db6e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db7a:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000db80:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000db86:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db8a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000db8d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000db91:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000db97:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000db9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dba5:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dbab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbaf:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dbb9:	90                   	nop
c000dbba:	83 c4 1c             	add    esp,0x1c
c000dbbd:	c3                   	ret    

c000dbbe <LogicalDisk::assignDriveLetter()>:
c000dbbe:	55                   	push   ebp
c000dbbf:	57                   	push   edi
c000dbc0:	56                   	push   esi
c000dbc1:	53                   	push   ebx
c000dbc2:	83 ec 14             	sub    esp,0x14
c000dbc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dbc9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dbcf:	b0 41                	mov    al,0x41
c000dbd1:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dbd7:	84 d2                	test   dl,dl
c000dbd9:	75 02                	jne    c000dbdd <LogicalDisk::assignDriveLetter()+0x1f>
c000dbdb:	b0 43                	mov    al,0x43
c000dbdd:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dbe3:	0f b6 ca             	movzx  ecx,dl
c000dbe6:	0f be e8             	movsx  ebp,al
c000dbe9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dbed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dbf1:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dbf7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dbfb:	3c 43                	cmp    al,0x43
c000dbfd:	75 10                	jne    c000dc0f <LogicalDisk::assignDriveLetter()+0x51>
c000dbff:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc06:	75 5a                	jne    c000dc62 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc08:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc0d:	75 53                	jne    c000dc62 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc0f:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc12:	ba 01 00 00 00       	mov    edx,0x1
c000dc17:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc1a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc1d:	d3 e2                	shl    edx,cl
c000dc1f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc23:	89 d7                	mov    edi,edx
c000dc25:	89 d6                	mov    esi,edx
c000dc27:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dc2b:	c1 ff 1f             	sar    edi,0x1f
c000dc2e:	21 f9                	and    ecx,edi
c000dc30:	09 d1                	or     ecx,edx
c000dc32:	75 2e                	jne    c000dc62 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc38:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dc3c:	09 f2                	or     edx,esi
c000dc3e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc41:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dc47:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc4b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dc51:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dc58:	09 fa                	or     edx,edi
c000dc5a:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dc60:	eb 0d                	jmp    c000dc6f <LogicalDisk::assignDriveLetter()+0xb1>
c000dc62:	8d 50 01             	lea    edx,[eax+0x1]
c000dc65:	45                   	inc    ebp
c000dc66:	80 fa 5b             	cmp    dl,0x5b
c000dc69:	88 d0                	mov    al,dl
c000dc6b:	75 8e                	jne    c000dbfb <LogicalDisk::assignDriveLetter()+0x3d>
c000dc6d:	31 c0                	xor    eax,eax
c000dc6f:	83 c4 14             	add    esp,0x14
c000dc72:	5b                   	pop    ebx
c000dc73:	5e                   	pop    esi
c000dc74:	5f                   	pop    edi
c000dc75:	5d                   	pop    ebp
c000dc76:	c3                   	ret    
c000dc77:	90                   	nop

c000dc78 <LogicalDisk::mount()>:
c000dc78:	56                   	push   esi
c000dc79:	53                   	push   ebx
c000dc7a:	53                   	push   ebx
c000dc7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dc7f:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dc85:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dc8f:	85 db                	test   ebx,ebx
c000dc91:	74 27                	je     c000dcba <LogicalDisk::mount()+0x42>
c000dc93:	51                   	push   ecx
c000dc94:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dc9b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dc9d:	83 e8 41             	sub    eax,0x41
c000dca0:	50                   	push   eax
c000dca1:	56                   	push   esi
c000dca2:	53                   	push   ebx
c000dca3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dca6:	83 c4 10             	add    esp,0x10
c000dca9:	84 c0                	test   al,al
c000dcab:	74 08                	je     c000dcb5 <LogicalDisk::mount()+0x3d>
c000dcad:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dcb3:	eb 07                	jmp    c000dcbc <LogicalDisk::mount()+0x44>
c000dcb5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dcb8:	eb d5                	jmp    c000dc8f <LogicalDisk::mount()+0x17>
c000dcba:	31 c0                	xor    eax,eax
c000dcbc:	5a                   	pop    edx
c000dcbd:	5b                   	pop    ebx
c000dcbe:	5e                   	pop    esi
c000dcbf:	c3                   	ret    

c000dcc0 <LogicalDisk::unmount()>:
c000dcc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcc4:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dcce:	c3                   	ret    
c000dccf:	90                   	nop

c000dcd0 <LogicalDisk::eject()>:
c000dcd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcd4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dcda:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcdc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dce0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dce3:	90                   	nop

c000dce4 <LogicalDisk::unassignDriveLetter()>:
c000dce4:	57                   	push   edi
c000dce5:	56                   	push   esi
c000dce6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dcea:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dcf1:	85 c9                	test   ecx,ecx
c000dcf3:	75 0f                	jne    c000dd04 <LogicalDisk::unassignDriveLetter()+0x20>
c000dcf5:	c7 44 24 0c 8c 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c8c
c000dcfd:	5e                   	pop    esi
c000dcfe:	5f                   	pop    edi
c000dcff:	e9 13 38 00 00       	jmp    c0011517 <KePanic(char const*)>
c000dd04:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd0b:	83 e9 41             	sub    ecx,0x41
c000dd0e:	b8 01 00 00 00       	mov    eax,0x1
c000dd13:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd1e:	d3 e0                	shl    eax,cl
c000dd20:	89 c7                	mov    edi,eax
c000dd22:	f7 d0                	not    eax
c000dd24:	c1 ff 1f             	sar    edi,0x1f
c000dd27:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dd2d:	89 fe                	mov    esi,edi
c000dd2f:	f7 d6                	not    esi
c000dd31:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dd37:	5e                   	pop    esi
c000dd38:	5f                   	pop    edi
c000dd39:	c3                   	ret    

c000dd3a <LogicalDisk::read(unsigned long long, int, void*)>:
c000dd3a:	57                   	push   edi
c000dd3b:	56                   	push   esi
c000dd3c:	53                   	push   ebx
c000dd3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd45:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dd49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd4d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dd53:	77 41                	ja     c000dd96 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dd55:	99                   	cdq    
c000dd56:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dd5c:	01 c8                	add    eax,ecx
c000dd5e:	11 da                	adc    edx,ebx
c000dd60:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dd66:	19 d7                	sbb    edi,edx
c000dd68:	72 33                	jb     c000dd9d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000dd6a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dd70:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dd76:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dd7a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dd7e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dd84:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dd8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd8e:	5b                   	pop    ebx
c000dd8f:	5e                   	pop    esi
c000dd90:	5f                   	pop    edi
c000dd91:	e9 d4 0a 00 00       	jmp    c000e86a <VCache::read(unsigned long long, int, void*)>
c000dd96:	b8 05 00 00 00       	mov    eax,0x5
c000dd9b:	eb 05                	jmp    c000dda2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000dd9d:	b8 07 00 00 00       	mov    eax,0x7
c000dda2:	5b                   	pop    ebx
c000dda3:	5e                   	pop    esi
c000dda4:	5f                   	pop    edi
c000dda5:	c3                   	ret    

c000dda6 <LogicalDisk::write(unsigned long long, int, void*)>:
c000dda6:	57                   	push   edi
c000dda7:	56                   	push   esi
c000dda8:	53                   	push   ebx
c000dda9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddb1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddb9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddbf:	77 41                	ja     c000de02 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ddc1:	99                   	cdq    
c000ddc2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddc8:	01 c8                	add    eax,ecx
c000ddca:	11 da                	adc    edx,ebx
c000ddcc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ddd2:	19 d7                	sbb    edi,edx
c000ddd4:	72 33                	jb     c000de09 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ddd6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dddc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dde2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dde6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ddea:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ddf0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ddf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddfa:	5b                   	pop    ebx
c000ddfb:	5e                   	pop    esi
c000ddfc:	5f                   	pop    edi
c000ddfd:	e9 6e 09 00 00       	jmp    c000e770 <VCache::write(unsigned long long, int, void*)>
c000de02:	b8 05 00 00 00       	mov    eax,0x5
c000de07:	eb 05                	jmp    c000de0e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de09:	b8 07 00 00 00       	mov    eax,0x7
c000de0e:	5b                   	pop    ebx
c000de0f:	5e                   	pop    esi
c000de10:	5f                   	pop    edi
c000de11:	c3                   	ret    
c000de12:	66 90                	xchg   ax,ax

c000de14 <Mouse::Mouse(char const*)>:
c000de14:	83 ec 0c             	sub    esp,0xc
c000de17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de1b:	83 ec 08             	sub    esp,0x8
c000de1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de22:	50                   	push   eax
c000de23:	e8 c0 ec ff ff       	call   c000cae8 <Device::Device(char const*)>
c000de28:	83 c4 10             	add    esp,0x10
c000de2b:	ba e0 1c 02 c0       	mov    edx,0xc0021ce0
c000de30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de34:	89 10                	mov    DWORD PTR [eax],edx
c000de36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de3a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000de44:	90                   	nop
c000de45:	83 c4 0c             	add    esp,0xc
c000de48:	c3                   	ret    
c000de49:	90                   	nop
c000de4a:	66 90                	xchg   ax,ax

c000de4c <Mouse::~Mouse()>:
c000de4c:	83 ec 0c             	sub    esp,0xc
c000de4f:	ba e0 1c 02 c0       	mov    edx,0xc0021ce0
c000de54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de58:	89 10                	mov    DWORD PTR [eax],edx
c000de5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de5e:	83 ec 0c             	sub    esp,0xc
c000de61:	50                   	push   eax
c000de62:	e8 eb e9 ff ff       	call   c000c852 <Device::~Device()>
c000de67:	83 c4 10             	add    esp,0x10
c000de6a:	90                   	nop
c000de6b:	83 c4 0c             	add    esp,0xc
c000de6e:	c3                   	ret    
c000de6f:	90                   	nop

c000de70 <Mouse::~Mouse()>:
c000de70:	83 ec 0c             	sub    esp,0xc
c000de73:	83 ec 0c             	sub    esp,0xc
c000de76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de7a:	e8 cd ff ff ff       	call   c000de4c <Mouse::~Mouse()>
c000de7f:	83 c4 10             	add    esp,0x10
c000de82:	83 ec 08             	sub    esp,0x8
c000de85:	68 58 01 00 00       	push   0x158
c000de8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de8e:	e8 79 c9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000de93:	83 c4 10             	add    esp,0x10
c000de96:	83 c4 0c             	add    esp,0xc
c000de99:	c3                   	ret    

c000de9a <NIC::getMAC()>:
c000de9a:	31 c0                	xor    eax,eax
c000de9c:	31 d2                	xor    edx,edx
c000de9e:	c3                   	ret    
c000de9f:	90                   	nop

c000dea0 <NIC::write(int, unsigned char*, int*)>:
c000dea0:	b8 01 00 00 00       	mov    eax,0x1
c000dea5:	c3                   	ret    

c000dea6 <NIC::NIC(char const*)>:
c000dea6:	83 ec 0c             	sub    esp,0xc
c000dea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dead:	83 ec 08             	sub    esp,0x8
c000deb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deb4:	50                   	push   eax
c000deb5:	e8 2e ec ff ff       	call   c000cae8 <Device::Device(char const*)>
c000deba:	83 c4 10             	add    esp,0x10
c000debd:	ba 0c 1d 02 c0       	mov    edx,0xc0021d0c
c000dec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec6:	89 10                	mov    DWORD PTR [eax],edx
c000dec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000decc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ded6:	90                   	nop
c000ded7:	83 c4 0c             	add    esp,0xc
c000deda:	c3                   	ret    
c000dedb:	90                   	nop

c000dedc <NIC::~NIC()>:
c000dedc:	83 ec 0c             	sub    esp,0xc
c000dedf:	ba 0c 1d 02 c0       	mov    edx,0xc0021d0c
c000dee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee8:	89 10                	mov    DWORD PTR [eax],edx
c000deea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deee:	83 ec 0c             	sub    esp,0xc
c000def1:	50                   	push   eax
c000def2:	e8 5b e9 ff ff       	call   c000c852 <Device::~Device()>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	90                   	nop
c000defb:	83 c4 0c             	add    esp,0xc
c000defe:	c3                   	ret    
c000deff:	90                   	nop

c000df00 <NIC::~NIC()>:
c000df00:	83 ec 0c             	sub    esp,0xc
c000df03:	83 ec 0c             	sub    esp,0xc
c000df06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df0a:	e8 cd ff ff ff       	call   c000dedc <NIC::~NIC()>
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	83 ec 08             	sub    esp,0x8
c000df15:	68 58 01 00 00       	push   0x158
c000df1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1e:	e8 e9 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000df23:	83 c4 10             	add    esp,0x10
c000df26:	83 c4 0c             	add    esp,0xc
c000df29:	c3                   	ret    

c000df2a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000df2a:	55                   	push   ebp
c000df2b:	57                   	push   edi
c000df2c:	56                   	push   esi
c000df2d:	53                   	push   ebx
c000df2e:	81 ec 28 01 00 00    	sub    esp,0x128
c000df34:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000df3b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000df42:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000df49:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000df50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df54:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df58:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000df5f:	e8 80 ec ff ff       	call   c000cbe4 <Device::getName()>
c000df64:	5a                   	pop    edx
c000df65:	59                   	pop    ecx
c000df66:	50                   	push   eax
c000df67:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000df6b:	55                   	push   ebp
c000df6c:	e8 df 26 ff ff       	call   c0000650 <strcpy>
c000df71:	5b                   	pop    ebx
c000df72:	58                   	pop    eax
c000df73:	68 38 1d 02 c0       	push   0xc0021d38
c000df78:	55                   	push   ebp
c000df79:	e8 f2 28 ff ff       	call   c0000870 <strcat>
c000df7e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000df85:	e8 49 9b ff ff       	call   c0007ad3 <malloc>
c000df8a:	83 c4 0c             	add    esp,0xc
c000df8d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df95:	89 c3                	mov    ebx,eax
c000df97:	57                   	push   edi
c000df98:	56                   	push   esi
c000df99:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dfa0:	55                   	push   ebp
c000dfa1:	50                   	push   eax
c000dfa2:	e8 57 fb ff ff       	call   c000dafe <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dfa7:	83 c4 14             	add    esp,0x14
c000dfaa:	53                   	push   ebx
c000dfab:	e8 0e fc ff ff       	call   c000dbbe <LogicalDisk::assignDriveLetter()>
c000dfb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dfb3:	e8 c0 fc ff ff       	call   c000dc78 <LogicalDisk::mount()>
c000dfb8:	58                   	pop    eax
c000dfb9:	5a                   	pop    edx
c000dfba:	53                   	push   ebx
c000dfbb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfc2:	e8 89 e9 ff ff       	call   c000c950 <Device::addChild(Device*)>
c000dfc7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dfcd:	5b                   	pop    ebx
c000dfce:	5e                   	pop    esi
c000dfcf:	5f                   	pop    edi
c000dfd0:	5d                   	pop    ebp
c000dfd1:	c3                   	ret    

c000dfd2 <createPartitionsForDisk(PhysicalDisk*)>:
c000dfd2:	55                   	push   ebp
c000dfd3:	57                   	push   edi
c000dfd4:	56                   	push   esi
c000dfd5:	53                   	push   ebx
c000dfd6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dfdc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dfe3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dfe9:	3d 00 02 00 00       	cmp    eax,0x200
c000dfee:	74 27                	je     c000e017 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dff0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dff6:	83 ec 10             	sub    esp,0x10
c000dff9:	99                   	cdq    
c000dffa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e000:	52                   	push   edx
c000e001:	50                   	push   eax
c000e002:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e006:	c1 e6 0a             	shl    esi,0xa
c000e009:	89 fd                	mov    ebp,edi
c000e00b:	55                   	push   ebp
c000e00c:	56                   	push   esi
c000e00d:	e8 ae 16 01 00       	call   c001f6c0 <__udivdi3>
c000e012:	e9 b9 00 00 00       	jmp    c000e0d0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e017:	83 ec 0c             	sub    esp,0xc
c000e01a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e01c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e020:	56                   	push   esi
c000e021:	6a 01                	push   0x1
c000e023:	6a 00                	push   0x0
c000e025:	6a 00                	push   0x0
c000e027:	53                   	push   ebx
c000e028:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e02b:	83 c4 20             	add    esp,0x20
c000e02e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e036:	75 0a                	jne    c000e042 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e038:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e040:	74 2c                	je     c000e06e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e042:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e048:	83 ec 10             	sub    esp,0x10
c000e04b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e051:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e057:	89 f7                	mov    edi,esi
c000e059:	c1 ff 1f             	sar    edi,0x1f
c000e05c:	57                   	push   edi
c000e05d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e061:	56                   	push   esi
c000e062:	c1 e0 0a             	shl    eax,0xa
c000e065:	52                   	push   edx
c000e066:	50                   	push   eax
c000e067:	e8 54 16 01 00       	call   c001f6c0 <__udivdi3>
c000e06c:	eb 62                	jmp    c000e0d0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e06e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e075:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e07c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e083:	89 cf                	mov    edi,ecx
c000e085:	83 e2 7f             	and    edx,0x7f
c000e088:	83 e7 7f             	and    edi,0x7f
c000e08b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e08e:	83 e0 7f             	and    eax,0x7f
c000e091:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e094:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e09b:	83 e0 7f             	and    eax,0x7f
c000e09e:	01 d0                	add    eax,edx
c000e0a0:	84 c0                	test   al,al
c000e0a2:	89 c5                	mov    ebp,eax
c000e0a4:	74 41                	je     c000e0e7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e0a6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0ac:	83 ec 10             	sub    esp,0x10
c000e0af:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0b5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0bb:	89 f7                	mov    edi,esi
c000e0bd:	c1 ff 1f             	sar    edi,0x1f
c000e0c0:	57                   	push   edi
c000e0c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0c5:	56                   	push   esi
c000e0c6:	c1 e0 0a             	shl    eax,0xa
c000e0c9:	52                   	push   edx
c000e0ca:	50                   	push   eax
c000e0cb:	e8 f0 15 01 00       	call   c001f6c0 <__udivdi3>
c000e0d0:	83 c4 14             	add    esp,0x14
c000e0d3:	52                   	push   edx
c000e0d4:	50                   	push   eax
c000e0d5:	6a 00                	push   0x0
c000e0d7:	6a 00                	push   0x0
c000e0d9:	53                   	push   ebx
c000e0da:	e8 4b fe ff ff       	call   c000df2a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e0df:	83 c4 20             	add    esp,0x20
c000e0e2:	e9 73 01 00 00       	jmp    c000e25a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e0e7:	89 f0                	mov    eax,esi
c000e0e9:	31 c9                	xor    ecx,ecx
c000e0eb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e0f2:	75 02                	jne    c000e0f6 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e0f4:	89 cd                	mov    ebp,ecx
c000e0f6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e0fe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e105:	83 c0 10             	add    eax,0x10
c000e108:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e110:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e117:	c1 e2 08             	shl    edx,0x8
c000e11a:	c1 e6 10             	shl    esi,0x10
c000e11d:	09 f2                	or     edx,esi
c000e11f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e126:	09 f2                	or     edx,esi
c000e128:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e12f:	c1 e6 18             	shl    esi,0x18
c000e132:	09 f2                	or     edx,esi
c000e134:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e13b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e13f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e146:	c1 e6 10             	shl    esi,0x10
c000e149:	c1 e2 08             	shl    edx,0x8
c000e14c:	09 f2                	or     edx,esi
c000e14e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e155:	09 f2                	or     edx,esi
c000e157:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e15e:	c1 e6 18             	shl    esi,0x18
c000e161:	09 f2                	or     edx,esi
c000e163:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e167:	41                   	inc    ecx
c000e168:	83 f9 04             	cmp    ecx,0x4
c000e16b:	0f 85 7a ff ff ff    	jne    c000e0eb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e175:	83 f0 01             	xor    eax,0x1
c000e178:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e17c:	75 4f                	jne    c000e1cd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e17e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e182:	83 f0 01             	xor    eax,0x1
c000e185:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e189:	75 42                	jne    c000e1cd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e18b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e191:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e199:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e19f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e1a7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e1ad:	89 f7                	mov    edi,esi
c000e1af:	c1 ff 1f             	sar    edi,0x1f
c000e1b2:	57                   	push   edi
c000e1b3:	56                   	push   esi
c000e1b4:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e1b8:	52                   	push   edx
c000e1b9:	c1 e0 0a             	shl    eax,0xa
c000e1bc:	50                   	push   eax
c000e1bd:	e8 fe 14 01 00       	call   c001f6c0 <__udivdi3>
c000e1c2:	83 c4 10             	add    esp,0x10
c000e1c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e1cd:	89 e8                	mov    eax,ebp
c000e1cf:	0f b6 e8             	movzx  ebp,al
c000e1d2:	85 ed                	test   ebp,ebp
c000e1d4:	74 50                	je     c000e226 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e1d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1da:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e1de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1e2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e1e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1ea:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e1ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1f2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e1f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e1fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1fe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e202:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e206:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e20a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e20e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e212:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e216:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e21a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e21e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e222:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e226:	31 ed                	xor    ebp,ebp
c000e228:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e22c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e230:	89 f8                	mov    eax,edi
c000e232:	09 f0                	or     eax,esi
c000e234:	74 1e                	je     c000e254 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e236:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e23a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e23e:	89 d1                	mov    ecx,edx
c000e240:	09 c1                	or     ecx,eax
c000e242:	74 10                	je     c000e254 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e244:	83 ec 0c             	sub    esp,0xc
c000e247:	57                   	push   edi
c000e248:	56                   	push   esi
c000e249:	52                   	push   edx
c000e24a:	50                   	push   eax
c000e24b:	53                   	push   ebx
c000e24c:	e8 d9 fc ff ff       	call   c000df2a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e251:	83 c4 20             	add    esp,0x20
c000e254:	45                   	inc    ebp
c000e255:	83 fd 04             	cmp    ebp,0x4
c000e258:	75 ce                	jne    c000e228 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e25a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e260:	5b                   	pop    ebx
c000e261:	5e                   	pop    esi
c000e262:	5f                   	pop    edi
c000e263:	5d                   	pop    ebp
c000e264:	c3                   	ret    
c000e265:	66 90                	xchg   ax,ax
c000e267:	90                   	nop

c000e268 <Serial::Serial(char const*)>:
c000e268:	83 ec 0c             	sub    esp,0xc
c000e26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e26f:	83 ec 08             	sub    esp,0x8
c000e272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e276:	50                   	push   eax
c000e277:	e8 6c e8 ff ff       	call   c000cae8 <Device::Device(char const*)>
c000e27c:	83 c4 10             	add    esp,0x10
c000e27f:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c000e284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e288:	89 10                	mov    DWORD PTR [eax],edx
c000e28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e28e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e298:	90                   	nop
c000e299:	83 c4 0c             	add    esp,0xc
c000e29c:	c3                   	ret    
c000e29d:	90                   	nop
c000e29e:	66 90                	xchg   ax,ax

c000e2a0 <Serial::~Serial()>:
c000e2a0:	83 ec 0c             	sub    esp,0xc
c000e2a3:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c000e2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ac:	89 10                	mov    DWORD PTR [eax],edx
c000e2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2b2:	83 ec 0c             	sub    esp,0xc
c000e2b5:	50                   	push   eax
c000e2b6:	e8 97 e5 ff ff       	call   c000c852 <Device::~Device()>
c000e2bb:	83 c4 10             	add    esp,0x10
c000e2be:	90                   	nop
c000e2bf:	83 c4 0c             	add    esp,0xc
c000e2c2:	c3                   	ret    
c000e2c3:	90                   	nop

c000e2c4 <Serial::~Serial()>:
c000e2c4:	83 ec 0c             	sub    esp,0xc
c000e2c7:	83 ec 0c             	sub    esp,0xc
c000e2ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ce:	e8 cd ff ff ff       	call   c000e2a0 <Serial::~Serial()>
c000e2d3:	83 c4 10             	add    esp,0x10
c000e2d6:	83 ec 08             	sub    esp,0x8
c000e2d9:	68 58 01 00 00       	push   0x158
c000e2de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2e2:	e8 25 c5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	83 c4 0c             	add    esp,0xc
c000e2ed:	c3                   	ret    
c000e2ee:	66 90                	xchg   ax,ax

c000e2f0 <Timer::Timer(char const*)>:
c000e2f0:	83 ec 0c             	sub    esp,0xc
c000e2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f7:	83 ec 08             	sub    esp,0x8
c000e2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2fe:	50                   	push   eax
c000e2ff:	e8 e4 e7 ff ff       	call   c000cae8 <Device::Device(char const*)>
c000e304:	83 c4 10             	add    esp,0x10
c000e307:	ba 90 1d 02 c0       	mov    edx,0xc0021d90
c000e30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e310:	89 10                	mov    DWORD PTR [eax],edx
c000e312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e316:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e320:	90                   	nop
c000e321:	83 c4 0c             	add    esp,0xc
c000e324:	c3                   	ret    
c000e325:	90                   	nop
c000e326:	66 90                	xchg   ax,ax

c000e328 <Timer::~Timer()>:
c000e328:	83 ec 0c             	sub    esp,0xc
c000e32b:	ba 90 1d 02 c0       	mov    edx,0xc0021d90
c000e330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e334:	89 10                	mov    DWORD PTR [eax],edx
c000e336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33a:	83 ec 0c             	sub    esp,0xc
c000e33d:	50                   	push   eax
c000e33e:	e8 0f e5 ff ff       	call   c000c852 <Device::~Device()>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	90                   	nop
c000e347:	83 c4 0c             	add    esp,0xc
c000e34a:	c3                   	ret    
c000e34b:	90                   	nop

c000e34c <Timer::~Timer()>:
c000e34c:	83 ec 0c             	sub    esp,0xc
c000e34f:	83 ec 0c             	sub    esp,0xc
c000e352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e356:	e8 cd ff ff ff       	call   c000e328 <Timer::~Timer()>
c000e35b:	83 c4 10             	add    esp,0x10
c000e35e:	83 ec 08             	sub    esp,0x8
c000e361:	68 5c 01 00 00       	push   0x15c
c000e366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36a:	e8 9d c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e36f:	83 c4 10             	add    esp,0x10
c000e372:	83 c4 0c             	add    esp,0xc
c000e375:	c3                   	ret    

c000e376 <Timer::read()>:
c000e376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e37a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e380:	c3                   	ret    

c000e381 <setupTimer(int)>:
c000e381:	53                   	push   ebx
c000e382:	83 ec 14             	sub    esp,0x14
c000e385:	68 5c 01 00 00       	push   0x15c
c000e38a:	e8 44 97 ff ff       	call   c0007ad3 <malloc>
c000e38f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e392:	89 c3                	mov    ebx,eax
c000e394:	e8 8b 0b 01 00       	call   c001ef24 <PIT::PIT()>
c000e399:	58                   	pop    eax
c000e39a:	5a                   	pop    edx
c000e39b:	53                   	push   ebx
c000e39c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e3a2:	e8 a9 e5 ff ff       	call   c000c950 <Device::addChild(Device*)>
c000e3a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3a9:	6a 00                	push   0x0
c000e3ab:	6a 00                	push   0x0
c000e3ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e3b1:	53                   	push   ebx
c000e3b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3b5:	83 c4 28             	add    esp,0x28
c000e3b8:	89 d8                	mov    eax,ebx
c000e3ba:	5b                   	pop    ebx
c000e3bb:	c3                   	ret    

c000e3bc <timerHandler(unsigned int)>:
c000e3bc:	56                   	push   esi
c000e3bd:	53                   	push   ebx
c000e3be:	51                   	push   ecx
c000e3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c3:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e3c9:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e3d0:	0f 84 4a 01 00 00    	je     c000e520 <timerHandler(unsigned int)+0x164>
c000e3d6:	fa                   	cli    
c000e3d7:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e3dd:	83 ec 0c             	sub    esp,0xc
c000e3e0:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e3e5:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e3eb:	e8 a0 18 01 00       	call   c001fc90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e3f0:	83 c4 10             	add    esp,0x10
c000e3f3:	84 c0                	test   al,al
c000e3f5:	0f 85 a1 00 00 00    	jne    c000e49c <timerHandler(unsigned int)+0xe0>
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e403:	e8 a4 18 01 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e408:	83 c4 10             	add    esp,0x10
c000e40b:	89 c6                	mov    esi,eax
c000e40d:	8d 76 00             	lea    esi,[esi+0x0]
c000e410:	83 ec 0c             	sub    esp,0xc
c000e413:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e418:	e8 8f 18 01 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e41d:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e424:	89 c3                	mov    ebx,eax
c000e426:	e8 89 18 01 00       	call   c001fcb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e42b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e42e:	83 c4 10             	add    esp,0x10
c000e431:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e437:	77 23                	ja     c000e45c <timerHandler(unsigned int)+0xa0>
c000e439:	83 ec 0c             	sub    esp,0xc
c000e43c:	53                   	push   ebx
c000e43d:	e8 b6 80 00 00       	call   c00164f8 <unblockTask(ThreadControlBlock*)>
c000e442:	83 c4 10             	add    esp,0x10
c000e445:	39 de                	cmp    esi,ebx
c000e447:	75 27                	jne    c000e470 <timerHandler(unsigned int)+0xb4>
c000e449:	83 ec 0c             	sub    esp,0xc
c000e44c:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e451:	e8 56 18 01 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e456:	89 c6                	mov    esi,eax
c000e458:	eb 12                	jmp    c000e46c <timerHandler(unsigned int)+0xb0>
c000e45a:	66 90                	xchg   ax,ax
c000e45c:	52                   	push   edx
c000e45d:	52                   	push   edx
c000e45e:	53                   	push   ebx
c000e45f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e464:	e8 07 19 01 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e469:	8d 76 00             	lea    esi,[esi+0x0]
c000e46c:	83 c4 10             	add    esp,0x10
c000e46f:	90                   	nop
c000e470:	83 ec 0c             	sub    esp,0xc
c000e473:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e478:	e8 13 18 01 00       	call   c001fc90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e47d:	83 c4 10             	add    esp,0x10
c000e480:	84 c0                	test   al,al
c000e482:	75 18                	jne    c000e49c <timerHandler(unsigned int)+0xe0>
c000e484:	83 ec 0c             	sub    esp,0xc
c000e487:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e48c:	e8 1b 18 01 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e491:	83 c4 10             	add    esp,0x10
c000e494:	39 f0                	cmp    eax,esi
c000e496:	0f 85 74 ff ff ff    	jne    c000e410 <timerHandler(unsigned int)+0x54>
c000e49c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4a1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e4a5:	74 41                	je     c000e4e8 <timerHandler(unsigned int)+0x12c>
c000e4a7:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e4ae:	74 38                	je     c000e4e8 <timerHandler(unsigned int)+0x12c>
c000e4b0:	fa                   	cli    
c000e4b1:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4b7:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e4bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e4c2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e4c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e4cb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e4ce:	72 08                	jb     c000e4d8 <timerHandler(unsigned int)+0x11c>
c000e4d0:	e8 2b 7b 00 00       	call   c0016000 <schedule()>
c000e4d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4d8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e4dd:	48                   	dec    eax
c000e4de:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e4e3:	75 03                	jne    c000e4e8 <timerHandler(unsigned int)+0x12c>
c000e4e5:	fb                   	sti    
c000e4e6:	66 90                	xchg   ax,ax
c000e4e8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e4ed:	48                   	dec    eax
c000e4ee:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e4f3:	75 1b                	jne    c000e510 <timerHandler(unsigned int)+0x154>
c000e4f5:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e4fc:	74 12                	je     c000e510 <timerHandler(unsigned int)+0x154>
c000e4fe:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e508:	e8 f3 7a 00 00       	call   c0016000 <schedule()>
c000e50d:	8d 76 00             	lea    esi,[esi+0x0]
c000e510:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e515:	48                   	dec    eax
c000e516:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e51b:	75 03                	jne    c000e520 <timerHandler(unsigned int)+0x164>
c000e51d:	fb                   	sti    
c000e51e:	66 90                	xchg   ax,ax
c000e520:	58                   	pop    eax
c000e521:	5b                   	pop    ebx
c000e522:	5e                   	pop    esi
c000e523:	c3                   	ret    

c000e524 <VCache::VCache(PhysicalDisk*)>:
c000e524:	53                   	push   ebx
c000e525:	83 ec 18             	sub    esp,0x18
c000e528:	ba c0 1d 02 c0       	mov    edx,0xc0021dc0
c000e52d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e531:	89 10                	mov    DWORD PTR [eax],edx
c000e533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e537:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e53e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e542:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e54d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e554:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e55b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e55f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e566:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e56d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e571:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e57c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e584:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e58b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e596:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e59a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e59e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e5a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5a6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e5aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ae:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e5b5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e5bd:	83 ec 0c             	sub    esp,0xc
c000e5c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5c4:	e8 0a 95 ff ff       	call   c0007ad3 <malloc>
c000e5c9:	83 c4 10             	add    esp,0x10
c000e5cc:	89 c3                	mov    ebx,eax
c000e5ce:	83 ec 0c             	sub    esp,0xc
c000e5d1:	53                   	push   ebx
c000e5d2:	e8 c9 77 00 00       	call   c0015da0 <Mutex::Mutex()>
c000e5d7:	83 c4 10             	add    esp,0x10
c000e5da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5de:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e5e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e5e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e5ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e5f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5fb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e605:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e608:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e60c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e612:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e618:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e61c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e61f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e626:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e62a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e62e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e634:	05 00 02 00 00       	add    eax,0x200
c000e639:	c1 e0 03             	shl    eax,0x3
c000e63c:	83 ec 0c             	sub    esp,0xc
c000e63f:	50                   	push   eax
c000e640:	e8 8e 94 ff ff       	call   c0007ad3 <malloc>
c000e645:	83 c4 10             	add    esp,0x10
c000e648:	89 c2                	mov    edx,eax
c000e64a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e64e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e655:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e65c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e660:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e664:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e668:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e66e:	89 d0                	mov    eax,edx
c000e670:	c1 e0 02             	shl    eax,0x2
c000e673:	01 d0                	add    eax,edx
c000e675:	c1 e0 04             	shl    eax,0x4
c000e678:	83 ec 0c             	sub    esp,0xc
c000e67b:	50                   	push   eax
c000e67c:	e8 52 94 ff ff       	call   c0007ad3 <malloc>
c000e681:	83 c4 10             	add    esp,0x10
c000e684:	89 c2                	mov    edx,eax
c000e686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e68d:	90                   	nop
c000e68e:	83 c4 18             	add    esp,0x18
c000e691:	5b                   	pop    ebx
c000e692:	c3                   	ret    
c000e693:	90                   	nop

c000e694 <VCache::invalidateReadBuffer()>:
c000e694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e698:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e69e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e6a2:	c3                   	ret    
c000e6a3:	90                   	nop

c000e6a4 <VCache::writeWriteBuffer()>:
c000e6a4:	53                   	push   ebx
c000e6a5:	83 ec 08             	sub    esp,0x8
c000e6a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6ac:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e6b0:	74 1e                	je     c000e6d0 <VCache::writeWriteBuffer()+0x2c>
c000e6b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e6b5:	83 ec 0c             	sub    esp,0xc
c000e6b8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6ba:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e6bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e6c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e6c3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e6c6:	50                   	push   eax
c000e6c7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e6ca:	83 c4 20             	add    esp,0x20
c000e6cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6d0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e6d7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e6de:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e6e2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e6e9:	83 c4 08             	add    esp,0x8
c000e6ec:	5b                   	pop    ebx
c000e6ed:	c3                   	ret    
c000e6ee:	66 90                	xchg   ax,ax

c000e6f0 <VCache::~VCache()>:
c000e6f0:	83 ec 0c             	sub    esp,0xc
c000e6f3:	ba c0 1d 02 c0       	mov    edx,0xc0021dc0
c000e6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6fc:	89 10                	mov    DWORD PTR [eax],edx
c000e6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e702:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e705:	0f b6 c0             	movzx  eax,al
c000e708:	85 c0                	test   eax,eax
c000e70a:	74 10                	je     c000e71c <VCache::~VCache()+0x2c>
c000e70c:	83 ec 0c             	sub    esp,0xc
c000e70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e713:	e8 8c ff ff ff       	call   c000e6a4 <VCache::writeWriteBuffer()>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	90                   	nop
c000e71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e720:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e723:	83 ec 0c             	sub    esp,0xc
c000e726:	50                   	push   eax
c000e727:	e8 b7 93 ff ff       	call   c0007ae3 <free>
c000e72c:	83 c4 10             	add    esp,0x10
c000e72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e733:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e736:	83 ec 0c             	sub    esp,0xc
c000e739:	50                   	push   eax
c000e73a:	e8 a4 93 ff ff       	call   c0007ae3 <free>
c000e73f:	83 c4 10             	add    esp,0x10
c000e742:	90                   	nop
c000e743:	83 c4 0c             	add    esp,0xc
c000e746:	c3                   	ret    
c000e747:	90                   	nop

c000e748 <VCache::~VCache()>:
c000e748:	83 ec 0c             	sub    esp,0xc
c000e74b:	83 ec 0c             	sub    esp,0xc
c000e74e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e752:	e8 99 ff ff ff       	call   c000e6f0 <VCache::~VCache()>
c000e757:	83 c4 10             	add    esp,0x10
c000e75a:	83 ec 08             	sub    esp,0x8
c000e75d:	6a 44                	push   0x44
c000e75f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e763:	e8 a4 c0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e768:	83 c4 10             	add    esp,0x10
c000e76b:	83 c4 0c             	add    esp,0xc
c000e76e:	c3                   	ret    
c000e76f:	90                   	nop

c000e770 <VCache::write(unsigned long long, int, void*)>:
c000e770:	55                   	push   ebp
c000e771:	57                   	push   edi
c000e772:	56                   	push   esi
c000e773:	53                   	push   ebx
c000e774:	83 ec 1c             	sub    esp,0x1c
c000e777:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e77b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e77f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e783:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e787:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e78b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e78f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e793:	74 0f                	je     c000e7a4 <VCache::write(unsigned long long, int, void*)+0x34>
c000e795:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e799:	53                   	push   ebx
c000e79a:	e8 f5 fe ff ff       	call   c000e694 <VCache::invalidateReadBuffer()>
c000e79f:	58                   	pop    eax
c000e7a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e7a8:	74 66                	je     c000e810 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e7aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e7ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7b1:	99                   	cdq    
c000e7b2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e7b5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e7b8:	89 c6                	mov    esi,eax
c000e7ba:	31 ce                	xor    esi,ecx
c000e7bc:	89 d0                	mov    eax,edx
c000e7be:	31 e8                	xor    eax,ebp
c000e7c0:	09 c6                	or     esi,eax
c000e7c2:	75 38                	jne    c000e7fc <VCache::write(unsigned long long, int, void*)+0x8c>
c000e7c4:	83 ff 01             	cmp    edi,0x1
c000e7c7:	75 33                	jne    c000e7fc <VCache::write(unsigned long long, int, void*)+0x8c>
c000e7c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e7cc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e7d0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e7d4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e7da:	0f af f9             	imul   edi,ecx
c000e7dd:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e7e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e7e5:	40                   	inc    eax
c000e7e6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e7e9:	83 f8 50             	cmp    eax,0x50
c000e7ec:	75 72                	jne    c000e860 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e7ee:	83 ec 0c             	sub    esp,0xc
c000e7f1:	53                   	push   ebx
c000e7f2:	e8 ad fe ff ff       	call   c000e6a4 <VCache::writeWriteBuffer()>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	eb 64                	jmp    c000e860 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e7fc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e800:	83 ec 0c             	sub    esp,0xc
c000e803:	53                   	push   ebx
c000e804:	e8 9b fe ff ff       	call   c000e6a4 <VCache::writeWriteBuffer()>
c000e809:	83 c4 10             	add    esp,0x10
c000e80c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e810:	83 ff 4f             	cmp    edi,0x4f
c000e813:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e816:	7f 20                	jg     c000e838 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e818:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e81b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e81f:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e822:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e825:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e828:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e82c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e832:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e834:	eb 2a                	jmp    c000e860 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e836:	66 90                	xchg   ax,ax
c000e838:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e83c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e83e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e842:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e846:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e84a:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e84e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e852:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e855:	83 c4 1c             	add    esp,0x1c
c000e858:	5b                   	pop    ebx
c000e859:	5e                   	pop    esi
c000e85a:	5f                   	pop    edi
c000e85b:	5d                   	pop    ebp
c000e85c:	ff e0                	jmp    eax
c000e85e:	66 90                	xchg   ax,ax
c000e860:	83 c4 1c             	add    esp,0x1c
c000e863:	31 c0                	xor    eax,eax
c000e865:	5b                   	pop    ebx
c000e866:	5e                   	pop    esi
c000e867:	5f                   	pop    edi
c000e868:	5d                   	pop    ebp
c000e869:	c3                   	ret    

c000e86a <VCache::read(unsigned long long, int, void*)>:
c000e86a:	55                   	push   ebp
c000e86b:	57                   	push   edi
c000e86c:	56                   	push   esi
c000e86d:	53                   	push   ebx
c000e86e:	83 ec 1c             	sub    esp,0x1c
c000e871:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e875:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e879:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e87d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e881:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e885:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e889:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e88d:	74 0d                	je     c000e89c <VCache::read(unsigned long long, int, void*)+0x32>
c000e88f:	83 ec 0c             	sub    esp,0xc
c000e892:	57                   	push   edi
c000e893:	e8 0c fe ff ff       	call   c000e6a4 <VCache::writeWriteBuffer()>
c000e898:	83 c4 10             	add    esp,0x10
c000e89b:	90                   	nop
c000e89c:	83 fd 01             	cmp    ebp,0x1
c000e89f:	0f 85 93 00 00 00    	jne    c000e938 <VCache::read(unsigned long long, int, void*)+0xce>
c000e8a5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8a8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e8af:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8b2:	0f 85 80 00 00 00    	jne    c000e938 <VCache::read(unsigned long long, int, void*)+0xce>
c000e8b8:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e8bb:	89 cd                	mov    ebp,ecx
c000e8bd:	f7 dd                	neg    ebp
c000e8bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e8c3:	89 e8                	mov    eax,ebp
c000e8c5:	21 dd                	and    ebp,ebx
c000e8c7:	c1 f8 1f             	sar    eax,0x1f
c000e8ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8ce:	89 e8                	mov    eax,ebp
c000e8d0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e8d4:	21 f5                	and    ebp,esi
c000e8d6:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e8da:	89 ea                	mov    edx,ebp
c000e8dc:	74 2e                	je     c000e90c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8de:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e8e1:	75 29                	jne    c000e90c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8e3:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e8e6:	75 24                	jne    c000e90c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8e8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8eb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8f1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e8f4:	8d 70 ff             	lea    esi,[eax-0x1]
c000e8f7:	21 f3                	and    ebx,esi
c000e8f9:	0f af d9             	imul   ebx,ecx
c000e8fc:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e8ff:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e903:	89 de                	mov    esi,ebx
c000e905:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e907:	31 c0                	xor    eax,eax
c000e909:	eb 61                	jmp    c000e96c <VCache::read(unsigned long long, int, void*)+0x102>
c000e90b:	90                   	nop
c000e90c:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e910:	83 ec 0c             	sub    esp,0xc
c000e913:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e916:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e91a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e91d:	8b 36                	mov    esi,DWORD PTR [esi]
c000e91f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e922:	51                   	push   ecx
c000e923:	52                   	push   edx
c000e924:	50                   	push   eax
c000e925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e929:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e92c:	83 c4 20             	add    esp,0x20
c000e92f:	85 c0                	test   eax,eax
c000e931:	75 39                	jne    c000e96c <VCache::read(unsigned long long, int, void*)+0x102>
c000e933:	eb b3                	jmp    c000e8e8 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e935:	8d 76 00             	lea    esi,[esi+0x0]
c000e938:	83 ec 0c             	sub    esp,0xc
c000e93b:	57                   	push   edi
c000e93c:	e8 53 fd ff ff       	call   c000e694 <VCache::invalidateReadBuffer()>
c000e941:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e944:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e948:	8b 10                	mov    edx,DWORD PTR [eax]
c000e94a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e94e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e952:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e956:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e95a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e95e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e961:	83 c4 2c             	add    esp,0x2c
c000e964:	5b                   	pop    ebx
c000e965:	5e                   	pop    esi
c000e966:	5f                   	pop    edi
c000e967:	5d                   	pop    ebp
c000e968:	ff e0                	jmp    eax
c000e96a:	66 90                	xchg   ax,ax
c000e96c:	83 c4 1c             	add    esp,0x1c
c000e96f:	5b                   	pop    ebx
c000e970:	5e                   	pop    esi
c000e971:	5f                   	pop    edi
c000e972:	5d                   	pop    ebp
c000e973:	c3                   	ret    

c000e974 <Video::putrect(int, int, int, int, unsigned int)>:
c000e974:	55                   	push   ebp
c000e975:	57                   	push   edi
c000e976:	56                   	push   esi
c000e977:	53                   	push   ebx
c000e978:	83 ec 1c             	sub    esp,0x1c
c000e97b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e97f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e983:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e987:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e98b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e98f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e993:	01 df                	add    edi,ebx
c000e995:	39 fb                	cmp    ebx,edi
c000e997:	7d 1f                	jge    c000e9b8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e999:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e99d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e9a1:	7d 12                	jge    c000e9b5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e9a3:	8b 16                	mov    edx,DWORD PTR [esi]
c000e9a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e9a9:	53                   	push   ebx
c000e9aa:	55                   	push   ebp
c000e9ab:	45                   	inc    ebp
c000e9ac:	56                   	push   esi
c000e9ad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e9b0:	83 c4 10             	add    esp,0x10
c000e9b3:	eb e8                	jmp    c000e99d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e9b5:	43                   	inc    ebx
c000e9b6:	eb dd                	jmp    c000e995 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e9b8:	83 c4 1c             	add    esp,0x1c
c000e9bb:	5b                   	pop    ebx
c000e9bc:	5e                   	pop    esi
c000e9bd:	5f                   	pop    edi
c000e9be:	5d                   	pop    ebp
c000e9bf:	c3                   	ret    

c000e9c0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e9c0:	55                   	push   ebp
c000e9c1:	57                   	push   edi
c000e9c2:	31 ff                	xor    edi,edi
c000e9c4:	56                   	push   esi
c000e9c5:	53                   	push   ebx
c000e9c6:	83 ec 1c             	sub    esp,0x1c
c000e9c9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e9cd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e9d1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e9d8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e9dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9e1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e9e5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e9e9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e9ec:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e9f0:	01 f9                	add    ecx,edi
c000e9f2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e9f6:	7d 2f                	jge    c000ea27 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e9f8:	31 f6                	xor    esi,esi
c000e9fa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e9fe:	01 f2                	add    edx,esi
c000ea00:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea04:	7d 1a                	jge    c000ea20 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea09:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea0c:	46                   	inc    esi
c000ea0d:	51                   	push   ecx
c000ea0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea12:	52                   	push   edx
c000ea13:	55                   	push   ebp
c000ea14:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea17:	83 c4 10             	add    esp,0x10
c000ea1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea1e:	eb da                	jmp    c000e9fa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea20:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea24:	47                   	inc    edi
c000ea25:	eb c5                	jmp    c000e9ec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea27:	83 c4 1c             	add    esp,0x1c
c000ea2a:	5b                   	pop    ebx
c000ea2b:	5e                   	pop    esi
c000ea2c:	5f                   	pop    edi
c000ea2d:	5d                   	pop    ebp
c000ea2e:	c3                   	ret    
c000ea2f:	90                   	nop

c000ea30 <Video::blit(unsigned int*, int, int, int, int)>:
c000ea30:	55                   	push   ebp
c000ea31:	ba 00 00 00 00       	mov    edx,0x0
c000ea36:	57                   	push   edi
c000ea37:	56                   	push   esi
c000ea38:	53                   	push   ebx
c000ea39:	83 ec 1c             	sub    esp,0x1c
c000ea3c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea40:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ea44:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea48:	85 c0                	test   eax,eax
c000ea4a:	0f 49 d0             	cmovns edx,eax
c000ea4d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ea54:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ea58:	89 eb                	mov    ebx,ebp
c000ea5a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ea5e:	01 ea                	add    edx,ebp
c000ea60:	39 da                	cmp    edx,ebx
c000ea62:	7e 54                	jle    c000eab8 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ea64:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ea6a:	7c 4c                	jl     c000eab8 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ea6c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ea70:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea74:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea78:	01 c1                	add    ecx,eax
c000ea7a:	39 f9                	cmp    ecx,edi
c000ea7c:	7e 2f                	jle    c000eaad <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000ea7e:	83 c2 04             	add    edx,0x4
c000ea81:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ea87:	7c 21                	jl     c000eaaa <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000ea89:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea8d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ea8f:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000ea92:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ea96:	55                   	push   ebp
c000ea97:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ea9b:	56                   	push   esi
c000ea9c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ea9f:	83 c4 10             	add    esp,0x10
c000eaa2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaa6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eaaa:	47                   	inc    edi
c000eaab:	eb c7                	jmp    c000ea74 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eaad:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eab1:	43                   	inc    ebx
c000eab2:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eab6:	eb a2                	jmp    c000ea5a <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eab8:	83 c4 1c             	add    esp,0x1c
c000eabb:	5b                   	pop    ebx
c000eabc:	5e                   	pop    esi
c000eabd:	5f                   	pop    edi
c000eabe:	5d                   	pop    ebp
c000eabf:	c3                   	ret    

c000eac0 <Video::clearScreen(unsigned int)>:
c000eac0:	57                   	push   edi
c000eac1:	56                   	push   esi
c000eac2:	53                   	push   ebx
c000eac3:	31 db                	xor    ebx,ebx
c000eac5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eac9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eacf:	7e 1f                	jle    c000eaf0 <Video::clearScreen(unsigned int)+0x30>
c000ead1:	31 ff                	xor    edi,edi
c000ead3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ead9:	7e 12                	jle    c000eaed <Video::clearScreen(unsigned int)+0x2d>
c000eadb:	8b 06                	mov    eax,DWORD PTR [esi]
c000eadd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eae1:	53                   	push   ebx
c000eae2:	57                   	push   edi
c000eae3:	47                   	inc    edi
c000eae4:	56                   	push   esi
c000eae5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eae8:	83 c4 10             	add    esp,0x10
c000eaeb:	eb e6                	jmp    c000ead3 <Video::clearScreen(unsigned int)+0x13>
c000eaed:	43                   	inc    ebx
c000eaee:	eb d9                	jmp    c000eac9 <Video::clearScreen(unsigned int)+0x9>
c000eaf0:	5b                   	pop    ebx
c000eaf1:	5e                   	pop    esi
c000eaf2:	5f                   	pop    edi
c000eaf3:	c3                   	ret    

c000eaf4 <Video::putpixel(int, int, unsigned int)>:
c000eaf4:	c7 44 24 04 c8 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021dc8
c000eafc:	e9 16 2a 00 00       	jmp    c0011517 <KePanic(char const*)>
c000eb01:	90                   	nop

c000eb02 <Video::readPixelApprox(int, int)>:
c000eb02:	83 ec 18             	sub    esp,0x18
c000eb05:	68 e9 1d 02 c0       	push   0xc0021de9
c000eb0a:	e8 08 2a 00 00       	call   c0011517 <KePanic(char const*)>
c000eb0f:	31 c0                	xor    eax,eax
c000eb11:	83 c4 1c             	add    esp,0x1c
c000eb14:	c3                   	ret    
c000eb15:	90                   	nop

c000eb16 <Video::Video(char const*)>:
c000eb16:	83 ec 0c             	sub    esp,0xc
c000eb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1d:	83 ec 08             	sub    esp,0x8
c000eb20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb24:	50                   	push   eax
c000eb25:	e8 be df ff ff       	call   c000cae8 <Device::Device(char const*)>
c000eb2a:	83 c4 10             	add    esp,0x10
c000eb2d:	ba 64 1e 02 c0       	mov    edx,0xc0021e64
c000eb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb36:	89 10                	mov    DWORD PTR [eax],edx
c000eb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb3c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000eb46:	90                   	nop
c000eb47:	83 c4 0c             	add    esp,0xc
c000eb4a:	c3                   	ret    
c000eb4b:	90                   	nop

c000eb4c <Video::~Video()>:
c000eb4c:	83 ec 0c             	sub    esp,0xc
c000eb4f:	ba 64 1e 02 c0       	mov    edx,0xc0021e64
c000eb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb58:	89 10                	mov    DWORD PTR [eax],edx
c000eb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb5e:	83 ec 0c             	sub    esp,0xc
c000eb61:	50                   	push   eax
c000eb62:	e8 eb dc ff ff       	call   c000c852 <Device::~Device()>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	90                   	nop
c000eb6b:	83 c4 0c             	add    esp,0xc
c000eb6e:	c3                   	ret    
c000eb6f:	90                   	nop

c000eb70 <Video::~Video()>:
c000eb70:	83 ec 0c             	sub    esp,0xc
c000eb73:	83 ec 0c             	sub    esp,0xc
c000eb76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb7a:	e8 cd ff ff ff       	call   c000eb4c <Video::~Video()>
c000eb7f:	83 c4 10             	add    esp,0x10
c000eb82:	83 ec 08             	sub    esp,0x8
c000eb85:	68 64 01 00 00       	push   0x164
c000eb8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb8e:	e8 79 bc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000eb93:	83 c4 10             	add    esp,0x10
c000eb96:	83 c4 0c             	add    esp,0xc
c000eb99:	c3                   	ret    

c000eb9a <Video::isMonochrome()>:
c000eb9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb9e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000eba4:	c3                   	ret    
c000eba5:	90                   	nop

c000eba6 <Video::getWidth()>:
c000eba6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebaa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ebb0:	c3                   	ret    
c000ebb1:	90                   	nop

c000ebb2 <Video::getHeight()>:
c000ebb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ebbc:	c3                   	ret    
c000ebbd:	90                   	nop

c000ebbe <Video::drawCursor(int, int, unsigned int*, int)>:
c000ebbe:	55                   	push   ebp
c000ebbf:	57                   	push   edi
c000ebc0:	56                   	push   esi
c000ebc1:	53                   	push   ebx
c000ebc2:	83 ec 2c             	sub    esp,0x2c
c000ebc5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ebc9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ebcd:	83 f8 01             	cmp    eax,0x1
c000ebd0:	19 c9                	sbb    ecx,ecx
c000ebd2:	31 db                	xor    ebx,ebx
c000ebd4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ebd8:	89 ce                	mov    esi,ecx
c000ebda:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ebe2:	f7 d6                	not    esi
c000ebe4:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ebea:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ebee:	01 d8                	add    eax,ebx
c000ebf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebf4:	57                   	push   edi
c000ebf5:	e8 b8 ff ff ff       	call   c000ebb2 <Video::getHeight()>
c000ebfa:	59                   	pop    ecx
c000ebfb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ebff:	7e 70                	jle    c000ec71 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec05:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ec09:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec10:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec14:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec1f:	89 e8                	mov    eax,ebp
c000ec21:	83 c0 20             	add    eax,0x20
c000ec24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec28:	57                   	push   edi
c000ec29:	e8 78 ff ff ff       	call   c000eba6 <Video::getWidth()>
c000ec2e:	5a                   	pop    edx
c000ec2f:	39 c5                	cmp    ebp,eax
c000ec31:	7d 34                	jge    c000ec67 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec33:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ec38:	74 05                	je     c000ec3f <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ec3a:	8b 07                	mov    eax,DWORD PTR [edi]
c000ec3c:	56                   	push   esi
c000ec3d:	eb 0d                	jmp    c000ec4c <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ec3f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ec44:	74 12                	je     c000ec58 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ec46:	8b 07                	mov    eax,DWORD PTR [edi]
c000ec48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec50:	55                   	push   ebp
c000ec51:	57                   	push   edi
c000ec52:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec55:	83 c4 10             	add    esp,0x10
c000ec58:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ec5c:	45                   	inc    ebp
c000ec5d:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ec61:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ec65:	75 c1                	jne    c000ec28 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ec67:	43                   	inc    ebx
c000ec68:	83 fb 20             	cmp    ebx,0x20
c000ec6b:	0f 85 79 ff ff ff    	jne    c000ebea <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ec71:	83 c4 2c             	add    esp,0x2c
c000ec74:	5b                   	pop    ebx
c000ec75:	5e                   	pop    esi
c000ec76:	5f                   	pop    edi
c000ec77:	5d                   	pop    ebp
c000ec78:	c3                   	ret    
c000ec79:	90                   	nop

c000ec7a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ec7a:	55                   	push   ebp
c000ec7b:	57                   	push   edi
c000ec7c:	56                   	push   esi
c000ec7d:	53                   	push   ebx
c000ec7e:	83 ec 28             	sub    esp,0x28
c000ec81:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec85:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ec89:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ec8d:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ec91:	c1 e7 08             	shl    edi,0x8
c000ec94:	01 c7                	add    edi,eax
c000ec96:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ec9a:	c1 e6 08             	shl    esi,0x8
c000ec9d:	01 f0                	add    eax,esi
c000ec9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eca7:	0f af c7             	imul   eax,edi
c000ecaa:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ecb1:	50                   	push   eax
c000ecb2:	e8 1c 8e ff ff       	call   c0007ad3 <malloc>
c000ecb7:	83 c4 10             	add    esp,0x10
c000ecba:	85 c0                	test   eax,eax
c000ecbc:	89 c5                	mov    ebp,eax
c000ecbe:	75 10                	jne    c000ecd0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ecc0:	83 ec 0c             	sub    esp,0xc
c000ecc3:	68 14 1e 02 c0       	push   0xc0021e14
c000ecc8:	e8 4a 28 00 00       	call   c0011517 <KePanic(char const*)>
c000eccd:	83 c4 10             	add    esp,0x10
c000ecd0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ecd4:	ba 12 00 00 00       	mov    edx,0x12
c000ecd9:	85 c0                	test   eax,eax
c000ecdb:	74 11                	je     c000ecee <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ecdd:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ece1:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ece5:	c1 fa 03             	sar    edx,0x3
c000ece8:	0f af d1             	imul   edx,ecx
c000eceb:	83 c2 12             	add    edx,0x12
c000ecee:	85 ff                	test   edi,edi
c000ecf0:	74 06                	je     c000ecf8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ecf2:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ecf6:	75 12                	jne    c000ed0a <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ecf8:	83 ec 0c             	sub    esp,0xc
c000ecfb:	68 24 1e 02 c0       	push   0xc0021e24
c000ed00:	e8 05 bc ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ed05:	e9 b8 00 00 00       	jmp    c000edc2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed0a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed0e:	83 f9 02             	cmp    ecx,0x2
c000ed11:	0f 85 96 00 00 00    	jne    c000edad <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed17:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed1c:	75 0e                	jne    c000ed2c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed1e:	85 c0                	test   eax,eax
c000ed20:	75 0a                	jne    c000ed2c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed22:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed25:	83 e8 18             	sub    eax,0x18
c000ed28:	a8 f7                	test   al,0xf7
c000ed2a:	74 0a                	je     c000ed36 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 39 1e 02 c0       	push   0xc0021e39
c000ed34:	eb 7f                	jmp    c000edb5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ed36:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ed3e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ed46:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000ed4a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ed4e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ed56:	75 0c                	jne    c000ed64 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ed58:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ed5d:	c1 e1 18             	shl    ecx,0x18
c000ed60:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ed64:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ed69:	46                   	inc    esi
c000ed6a:	89 c8                	mov    eax,ecx
c000ed6c:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ed71:	c1 e0 10             	shl    eax,0x10
c000ed74:	c1 e1 08             	shl    ecx,0x8
c000ed77:	09 c1                	or     ecx,eax
c000ed79:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ed7d:	09 c1                	or     ecx,eax
c000ed7f:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ed83:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ed87:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ed8b:	c1 f8 03             	sar    eax,0x3
c000ed8e:	01 c2                	add    edx,eax
c000ed90:	89 f0                	mov    eax,esi
c000ed92:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ed96:	39 c7                	cmp    edi,eax
c000ed98:	7f b0                	jg     c000ed4a <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ed9a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ed9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eda2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eda5:	7e 22                	jle    c000edc9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eda7:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000edab:	eb 99                	jmp    c000ed46 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000edad:	50                   	push   eax
c000edae:	50                   	push   eax
c000edaf:	51                   	push   ecx
c000edb0:	68 47 1e 02 c0       	push   0xc0021e47
c000edb5:	e8 50 bb ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000edba:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000edbd:	e8 21 8d ff ff       	call   c0007ae3 <free>
c000edc2:	83 c4 10             	add    esp,0x10
c000edc5:	31 ed                	xor    ebp,ebp
c000edc7:	eb 0f                	jmp    c000edd8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000edc9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edcd:	89 38                	mov    DWORD PTR [eax],edi
c000edcf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edd3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000edd6:	89 38                	mov    DWORD PTR [eax],edi
c000edd8:	83 c4 1c             	add    esp,0x1c
c000eddb:	89 e8                	mov    eax,ebp
c000eddd:	5b                   	pop    ebx
c000edde:	5e                   	pop    esi
c000eddf:	5f                   	pop    edi
c000ede0:	5d                   	pop    ebp
c000ede1:	c3                   	ret    

c000ede2 <Video::putTGA(int, int, unsigned char*, int)>:
c000ede2:	55                   	push   ebp
c000ede3:	57                   	push   edi
c000ede4:	56                   	push   esi
c000ede5:	53                   	push   ebx
c000ede6:	83 ec 28             	sub    esp,0x28
c000ede9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eded:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edf1:	50                   	push   eax
c000edf2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000edf6:	50                   	push   eax
c000edf7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000edfb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000edff:	57                   	push   edi
c000ee00:	e8 75 fe ff ff       	call   c000ec7a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee05:	83 c4 20             	add    esp,0x20
c000ee08:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee0c:	85 c0                	test   eax,eax
c000ee0e:	74 35                	je     c000ee45 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee10:	89 c6                	mov    esi,eax
c000ee12:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee16:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee1a:	39 d8                	cmp    eax,ebx
c000ee1c:	7e 27                	jle    c000ee45 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee1e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee22:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ee26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ee2a:	39 e9                	cmp    ecx,ebp
c000ee2c:	7e 14                	jle    c000ee42 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee2e:	83 c6 04             	add    esi,0x4
c000ee31:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ee33:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ee36:	53                   	push   ebx
c000ee37:	55                   	push   ebp
c000ee38:	45                   	inc    ebp
c000ee39:	57                   	push   edi
c000ee3a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ee3d:	83 c4 10             	add    esp,0x10
c000ee40:	eb e0                	jmp    c000ee22 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ee42:	43                   	inc    ebx
c000ee43:	eb cd                	jmp    c000ee12 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ee45:	83 c4 1c             	add    esp,0x1c
c000ee48:	5b                   	pop    ebx
c000ee49:	5e                   	pop    esi
c000ee4a:	5f                   	pop    edi
c000ee4b:	5d                   	pop    ebp
c000ee4c:	c3                   	ret    
c000ee4d:	66 90                	xchg   ax,ax
c000ee4f:	90                   	nop

c000ee50 <ACPI::close(int, int, void*)>:
c000ee50:	83 ec 1c             	sub    esp,0x1c
c000ee53:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ee5b:	74 0b                	je     c000ee68 <ACPI::close(int, int, void*)+0x18>
c000ee5d:	b8 00 00 00 00       	mov    eax,0x0
c000ee62:	e9 99 00 00 00       	jmp    c000ef00 <ACPI::close(int, int, void*)+0xb0>
c000ee67:	90                   	nop
c000ee68:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ee6d:	75 29                	jne    c000ee98 <ACPI::close(int, int, void*)+0x48>
c000ee6f:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ee74:	85 c0                	test   eax,eax
c000ee76:	74 08                	je     c000ee80 <ACPI::close(int, int, void*)+0x30>
c000ee78:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ee7d:	ff d0                	call   eax
c000ee7f:	90                   	nop
c000ee80:	83 ec 0c             	sub    esp,0xc
c000ee83:	68 a8 1e 02 c0       	push   0xc0021ea8
c000ee88:	e8 8a 26 00 00       	call   c0011517 <KePanic(char const*)>
c000ee8d:	83 c4 10             	add    esp,0x10
c000ee90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ee95:	eb 69                	jmp    c000ef00 <ACPI::close(int, int, void*)+0xb0>
c000ee97:	90                   	nop
c000ee98:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ee9d:	75 59                	jne    c000eef8 <ACPI::close(int, int, void*)+0xa8>
c000ee9f:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eea4:	85 c0                	test   eax,eax
c000eea6:	74 08                	je     c000eeb0 <ACPI::close(int, int, void*)+0x60>
c000eea8:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eead:	ff d0                	call   eax
c000eeaf:	90                   	nop
c000eeb0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eeb5:	8d 76 00             	lea    esi,[esi+0x0]
c000eeb8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eebd:	83 e0 02             	and    eax,0x2
c000eec0:	74 1e                	je     c000eee0 <ACPI::close(int, int, void*)+0x90>
c000eec2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eec9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eecd:	89 c2                	mov    edx,eax
c000eecf:	ec                   	in     al,dx
c000eed0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eed4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eed8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eedc:	eb da                	jmp    c000eeb8 <ACPI::close(int, int, void*)+0x68>
c000eede:	66 90                	xchg   ax,ax
c000eee0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eee7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eeec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eef0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eef4:	ee                   	out    dx,al
c000eef5:	8d 76 00             	lea    esi,[esi+0x0]
c000eef8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eefd:	8d 76 00             	lea    esi,[esi+0x0]
c000ef00:	83 c4 1c             	add    esp,0x1c
c000ef03:	c3                   	ret    

c000ef04 <findRSDP()>:
c000ef04:	83 ec 1c             	sub    esp,0x1c
c000ef07:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef0c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef12:	83 e0 04             	and    eax,0x4
c000ef15:	0f b6 c0             	movzx  eax,al
c000ef18:	85 c0                	test   eax,eax
c000ef1a:	75 08                	jne    c000ef24 <findRSDP()+0x20>
c000ef1c:	b8 00 00 00 00       	mov    eax,0x0
c000ef21:	eb 75                	jmp    c000ef98 <findRSDP()+0x94>
c000ef23:	90                   	nop
c000ef24:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000ef29:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ef2e:	7f 1c                	jg     c000ef4c <findRSDP()+0x48>
c000ef30:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef35:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ef3b:	83 e2 fb             	and    edx,0xfffffffb
c000ef3e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ef44:	b8 00 00 00 00       	mov    eax,0x0
c000ef49:	eb 4d                	jmp    c000ef98 <findRSDP()+0x94>
c000ef4b:	90                   	nop
c000ef4c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ef54:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ef5c:	77 32                	ja     c000ef90 <findRSDP()+0x8c>
c000ef5e:	83 ec 04             	sub    esp,0x4
c000ef61:	6a 08                	push   0x8
c000ef63:	68 43 1f 02 c0       	push   0xc0021f43
c000ef68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef6c:	e8 0f 14 ff ff       	call   c0000380 <memcmp>
c000ef71:	83 c4 10             	add    esp,0x10
c000ef74:	85 c0                	test   eax,eax
c000ef76:	0f 94 c0             	sete   al
c000ef79:	0f b6 c0             	movzx  eax,al
c000ef7c:	85 c0                	test   eax,eax
c000ef7e:	74 08                	je     c000ef88 <findRSDP()+0x84>
c000ef80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef84:	eb 12                	jmp    c000ef98 <findRSDP()+0x94>
c000ef86:	66 90                	xchg   ax,ax
c000ef88:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ef8d:	eb c5                	jmp    c000ef54 <findRSDP()+0x50>
c000ef8f:	90                   	nop
c000ef90:	b8 00 00 00 00       	mov    eax,0x0
c000ef95:	8d 76 00             	lea    esi,[esi+0x0]
c000ef98:	83 c4 1c             	add    esp,0x1c
c000ef9b:	c3                   	ret    

c000ef9c <loadACPITables(unsigned char*)>:
c000ef9c:	57                   	push   edi
c000ef9d:	56                   	push   esi
c000ef9e:	53                   	push   ebx
c000ef9f:	83 ec 60             	sub    esp,0x60
c000efa2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efa7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efad:	83 e0 04             	and    eax,0x4
c000efb0:	0f b6 c0             	movzx  eax,al
c000efb3:	85 c0                	test   eax,eax
c000efb5:	0f 84 41 02 00 00    	je     c000f1fc <loadACPITables(unsigned char*)+0x260>
c000efbb:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000efc0:	0f b6 c0             	movzx  eax,al
c000efc3:	85 c0                	test   eax,eax
c000efc5:	74 79                	je     c000f040 <loadACPITables(unsigned char*)+0xa4>
c000efc7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000efcb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000efcf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000efd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000efd6:	83 e8 24             	sub    eax,0x24
c000efd9:	c1 e8 03             	shr    eax,0x3
c000efdc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efe0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000efe8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000efec:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000eff0:	0f 8d ba 00 00 00    	jge    c000f0b0 <loadACPITables(unsigned char*)+0x114>
c000eff6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000effa:	83 c0 24             	add    eax,0x24
c000effd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f001:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f005:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f009:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f00d:	c1 e0 03             	shl    eax,0x3
c000f010:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f014:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f018:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f01b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f01d:	89 c1                	mov    ecx,eax
c000f01f:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f024:	8d 50 01             	lea    edx,[eax+0x1]
c000f027:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f02d:	89 ca                	mov    edx,ecx
c000f02f:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f036:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f03b:	eb ab                	jmp    c000efe8 <loadACPITables(unsigned char*)+0x4c>
c000f03d:	8d 76 00             	lea    esi,[esi+0x0]
c000f040:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f044:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f048:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f04c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f04f:	83 e8 24             	sub    eax,0x24
c000f052:	c1 e8 02             	shr    eax,0x2
c000f055:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f059:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f061:	8d 76 00             	lea    esi,[esi+0x0]
c000f064:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f068:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f06c:	7d 42                	jge    c000f0b0 <loadACPITables(unsigned char*)+0x114>
c000f06e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f072:	83 c0 24             	add    eax,0x24
c000f075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f079:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f07d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f081:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f085:	c1 e0 02             	shl    eax,0x2
c000f088:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f08c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f090:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f092:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f097:	8d 50 01             	lea    edx,[eax+0x1]
c000f09a:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0a0:	89 ca                	mov    edx,ecx
c000f0a2:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0a9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f0ae:	eb b4                	jmp    c000f064 <loadACPITables(unsigned char*)+0xc8>
c000f0b0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f0b8:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0bd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f0c1:	0f 8d 39 01 00 00    	jge    c000f200 <loadACPITables(unsigned char*)+0x264>
c000f0c7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0cb:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f0d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0e2:	25 ff 0f 00 00       	and    eax,0xfff
c000f0e7:	89 c6                	mov    esi,eax
c000f0e9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f0ef:	83 ec 0c             	sub    esp,0xc
c000f0f2:	6a 01                	push   0x1
c000f0f4:	e8 fc a4 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f0f9:	83 c4 10             	add    esp,0x10
c000f0fc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f100:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f106:	83 ec 0c             	sub    esp,0xc
c000f109:	6a 01                	push   0x1
c000f10b:	6a 01                	push   0x1
c000f10d:	50                   	push   eax
c000f10e:	52                   	push   edx
c000f10f:	53                   	push   ebx
c000f110:	e8 f3 ad ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	09 f0                	or     eax,esi
c000f11a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f11e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f122:	c1 e0 03             	shl    eax,0x3
c000f125:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f12a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f12e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f132:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f136:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f13e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f142:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f146:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f14a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f14e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f152:	89 c6                	mov    esi,eax
c000f154:	89 d7                	mov    edi,edx
c000f156:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f158:	89 c8                	mov    eax,ecx
c000f15a:	89 fa                	mov    edx,edi
c000f15c:	89 f3                	mov    ebx,esi
c000f15e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f162:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f166:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f16a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f16e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f171:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f175:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f179:	05 00 10 00 00       	add    eax,0x1000
c000f17e:	c1 e8 0c             	shr    eax,0xc
c000f181:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f185:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f189:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f18d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f191:	25 ff 0f 00 00       	and    eax,0xfff
c000f196:	89 c6                	mov    esi,eax
c000f198:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f19e:	83 ec 0c             	sub    esp,0xc
c000f1a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a5:	e8 4b a4 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f1aa:	83 c4 10             	add    esp,0x10
c000f1ad:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1b1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1b7:	83 ec 0c             	sub    esp,0xc
c000f1ba:	6a 01                	push   0x1
c000f1bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f1c0:	50                   	push   eax
c000f1c1:	52                   	push   edx
c000f1c2:	53                   	push   ebx
c000f1c3:	e8 40 ad ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1c8:	83 c4 20             	add    esp,0x20
c000f1cb:	09 f0                	or     eax,esi
c000f1cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1d5:	83 ec 0c             	sub    esp,0xc
c000f1d8:	50                   	push   eax
c000f1d9:	e8 2b a7 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000f1de:	83 c4 10             	add    esp,0x10
c000f1e1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1e5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f1e9:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f1f0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f1f5:	e9 be fe ff ff       	jmp    c000f0b8 <loadACPITables(unsigned char*)+0x11c>
c000f1fa:	66 90                	xchg   ax,ax
c000f1fc:	90                   	nop
c000f1fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f200:	83 c4 60             	add    esp,0x60
c000f203:	5b                   	pop    ebx
c000f204:	5e                   	pop    esi
c000f205:	5f                   	pop    edi
c000f206:	c3                   	ret    
c000f207:	90                   	nop

c000f208 <findRSDT(unsigned char*)>:
c000f208:	57                   	push   edi
c000f209:	56                   	push   esi
c000f20a:	53                   	push   ebx
c000f20b:	83 ec 50             	sub    esp,0x50
c000f20e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f213:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f219:	83 e0 04             	and    eax,0x4
c000f21c:	0f b6 c0             	movzx  eax,al
c000f21f:	85 c0                	test   eax,eax
c000f221:	75 0d                	jne    c000f230 <findRSDT(unsigned char*)+0x28>
c000f223:	b8 00 00 00 00       	mov    eax,0x0
c000f228:	e9 2b 01 00 00       	jmp    c000f358 <findRSDT(unsigned char*)+0x150>
c000f22d:	8d 76 00             	lea    esi,[esi+0x0]
c000f230:	89 e0                	mov    eax,esp
c000f232:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f236:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f23a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f23e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f246:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f24a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f24e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f252:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f256:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f25a:	89 c6                	mov    esi,eax
c000f25c:	89 d7                	mov    edi,edx
c000f25e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f260:	89 c8                	mov    eax,ecx
c000f262:	89 fa                	mov    edx,edi
c000f264:	89 f3                	mov    ebx,esi
c000f266:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f26a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f26e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f272:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f276:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f27a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f282:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f286:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f28a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f292:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f296:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f29a:	25 ff 0f 00 00       	and    eax,0xfff
c000f29f:	89 c6                	mov    esi,eax
c000f2a1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2a7:	83 ec 0c             	sub    esp,0xc
c000f2aa:	6a 02                	push   0x2
c000f2ac:	e8 44 a3 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f2b1:	83 c4 10             	add    esp,0x10
c000f2b4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f2b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2be:	83 ec 0c             	sub    esp,0xc
c000f2c1:	6a 01                	push   0x1
c000f2c3:	6a 02                	push   0x2
c000f2c5:	50                   	push   eax
c000f2c6:	52                   	push   edx
c000f2c7:	53                   	push   ebx
c000f2c8:	e8 3b ac ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2cd:	83 c4 20             	add    esp,0x20
c000f2d0:	09 f0                	or     eax,esi
c000f2d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f2da:	25 ff 0f 00 00       	and    eax,0xfff
c000f2df:	89 c6                	mov    esi,eax
c000f2e1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2e7:	83 ec 0c             	sub    esp,0xc
c000f2ea:	6a 02                	push   0x2
c000f2ec:	e8 04 a3 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f2f1:	83 c4 10             	add    esp,0x10
c000f2f4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f2f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2fe:	83 ec 0c             	sub    esp,0xc
c000f301:	6a 01                	push   0x1
c000f303:	6a 02                	push   0x2
c000f305:	50                   	push   eax
c000f306:	52                   	push   edx
c000f307:	53                   	push   ebx
c000f308:	e8 fb ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f30d:	83 c4 20             	add    esp,0x20
c000f310:	09 f0                	or     eax,esi
c000f312:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f316:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f31b:	85 c0                	test   eax,eax
c000f31d:	75 11                	jne    c000f330 <findRSDT(unsigned char*)+0x128>
c000f31f:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f326:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f32a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f32e:	eb 24                	jmp    c000f354 <findRSDT(unsigned char*)+0x14c>
c000f330:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f335:	83 f8 02             	cmp    eax,0x2
c000f338:	75 12                	jne    c000f34c <findRSDT(unsigned char*)+0x144>
c000f33a:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f341:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f345:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f349:	eb 09                	jmp    c000f354 <findRSDT(unsigned char*)+0x14c>
c000f34b:	90                   	nop
c000f34c:	b8 00 00 00 00       	mov    eax,0x0
c000f351:	eb 05                	jmp    c000f358 <findRSDT(unsigned char*)+0x150>
c000f353:	90                   	nop
c000f354:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f358:	83 c4 50             	add    esp,0x50
c000f35b:	5b                   	pop    ebx
c000f35c:	5e                   	pop    esi
c000f35d:	5f                   	pop    edi
c000f35e:	c3                   	ret    
c000f35f:	90                   	nop

c000f360 <findDataTable(unsigned char*, char*)>:
c000f360:	83 ec 1c             	sub    esp,0x1c
c000f363:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f368:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f36e:	83 e0 04             	and    eax,0x4
c000f371:	0f b6 c0             	movzx  eax,al
c000f374:	85 c0                	test   eax,eax
c000f376:	75 08                	jne    c000f380 <findDataTable(unsigned char*, char*)+0x20>
c000f378:	b8 00 00 00 00       	mov    eax,0x0
c000f37d:	eb 5d                	jmp    c000f3dc <findDataTable(unsigned char*, char*)+0x7c>
c000f37f:	90                   	nop
c000f380:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f388:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f38d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f391:	7d 41                	jge    c000f3d4 <findDataTable(unsigned char*, char*)+0x74>
c000f393:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f397:	c1 e0 03             	shl    eax,0x3
c000f39a:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f39f:	83 ec 04             	sub    esp,0x4
c000f3a2:	6a 04                	push   0x4
c000f3a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3a8:	50                   	push   eax
c000f3a9:	e8 d2 0f ff ff       	call   c0000380 <memcmp>
c000f3ae:	83 c4 10             	add    esp,0x10
c000f3b1:	85 c0                	test   eax,eax
c000f3b3:	0f 94 c0             	sete   al
c000f3b6:	0f b6 c0             	movzx  eax,al
c000f3b9:	85 c0                	test   eax,eax
c000f3bb:	74 0f                	je     c000f3cc <findDataTable(unsigned char*, char*)+0x6c>
c000f3bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3c1:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f3c8:	eb 12                	jmp    c000f3dc <findDataTable(unsigned char*, char*)+0x7c>
c000f3ca:	66 90                	xchg   ax,ax
c000f3cc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f3d1:	eb b5                	jmp    c000f388 <findDataTable(unsigned char*, char*)+0x28>
c000f3d3:	90                   	nop
c000f3d4:	b8 00 00 00 00       	mov    eax,0x0
c000f3d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f3dc:	83 c4 1c             	add    esp,0x1c
c000f3df:	c3                   	ret    

c000f3e0 <scanMADT()>:
c000f3e0:	53                   	push   ebx
c000f3e1:	83 ec 38             	sub    esp,0x38
c000f3e4:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f3e9:	25 00 04 00 00       	and    eax,0x400
c000f3ee:	74 14                	je     c000f404 <scanMADT()+0x24>
c000f3f0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f3f5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f3fb:	83 e2 fb             	and    edx,0xfffffffb
c000f3fe:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f404:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f409:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f40f:	83 e0 04             	and    eax,0x4
c000f412:	0f b6 c0             	movzx  eax,al
c000f415:	85 c0                	test   eax,eax
c000f417:	0f 84 6b 04 00 00    	je     c000f888 <scanMADT()+0x4a8>
c000f41d:	e8 e2 fa ff ff       	call   c000ef04 <findRSDP()>
c000f422:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f427:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f42c:	85 c0                	test   eax,eax
c000f42e:	75 1c                	jne    c000f44c <scanMADT()+0x6c>
c000f430:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f435:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f43b:	83 e2 fb             	and    edx,0xfffffffb
c000f43e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f444:	e9 47 04 00 00       	jmp    c000f890 <scanMADT()+0x4b0>
c000f449:	8d 76 00             	lea    esi,[esi+0x0]
c000f44c:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f451:	83 ec 0c             	sub    esp,0xc
c000f454:	50                   	push   eax
c000f455:	e8 ae fd ff ff       	call   c000f208 <findRSDT(unsigned char*)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f462:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f467:	85 c0                	test   eax,eax
c000f469:	75 19                	jne    c000f484 <scanMADT()+0xa4>
c000f46b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f470:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f476:	83 e2 fb             	and    edx,0xfffffffb
c000f479:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f47f:	e9 0c 04 00 00       	jmp    c000f890 <scanMADT()+0x4b0>
c000f484:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f489:	83 ec 0c             	sub    esp,0xc
c000f48c:	50                   	push   eax
c000f48d:	e8 0a fb ff ff       	call   c000ef9c <loadACPITables(unsigned char*)>
c000f492:	83 c4 10             	add    esp,0x10
c000f495:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f49a:	83 ec 08             	sub    esp,0x8
c000f49d:	68 4c 1f 02 c0       	push   0xc0021f4c
c000f4a2:	50                   	push   eax
c000f4a3:	e8 b8 fe ff ff       	call   c000f360 <findDataTable(unsigned char*, char*)>
c000f4a8:	83 c4 10             	add    esp,0x10
c000f4ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f4af:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f4b4:	75 1a                	jne    c000f4d0 <scanMADT()+0xf0>
c000f4b6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4bb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4c1:	83 e2 fe             	and    edx,0xfffffffe
c000f4c4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4ca:	e9 c1 03 00 00       	jmp    c000f890 <scanMADT()+0x4b0>
c000f4cf:	90                   	nop
c000f4d0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f4d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f4df:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f4e3:	0f 87 a7 03 00 00    	ja     c000f890 <scanMADT()+0x4b0>
c000f4e9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f4f1:	0f 87 99 03 00 00    	ja     c000f890 <scanMADT()+0x4b0>
c000f4f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4fb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f4ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f503:	8d 50 01             	lea    edx,[eax+0x1]
c000f506:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f50a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f50e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f512:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f516:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f51a:	8d 50 01             	lea    edx,[eax+0x1]
c000f51d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f521:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f525:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f529:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f52d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f532:	83 f8 02             	cmp    eax,0x2
c000f535:	0f 86 51 03 00 00    	jbe    c000f88c <scanMADT()+0x4ac>
c000f53b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f540:	85 c0                	test   eax,eax
c000f542:	75 58                	jne    c000f59c <scanMADT()+0x1bc>
c000f544:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f548:	8d 50 01             	lea    edx,[eax+0x1]
c000f54b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f54f:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f555:	0f b6 d2             	movzx  edx,dl
c000f558:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f55c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f560:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f566:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f56a:	8d 50 01             	lea    edx,[eax+0x1]
c000f56d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f571:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f577:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f57a:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f580:	0f b6 d2             	movzx  edx,dl
c000f583:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f587:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f58b:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f591:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f596:	e9 d9 02 00 00       	jmp    c000f874 <scanMADT()+0x494>
c000f59b:	90                   	nop
c000f59c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5a1:	83 f8 01             	cmp    eax,0x1
c000f5a4:	0f 85 1a 01 00 00    	jne    c000f6c4 <scanMADT()+0x2e4>
c000f5aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ae:	8d 50 01             	lea    edx,[eax+0x1]
c000f5b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5b5:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f5bb:	0f b6 d2             	movzx  edx,dl
c000f5be:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5c2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5c6:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f5cc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f5d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5d9:	01 d0                	add    eax,edx
c000f5db:	83 c0 2c             	add    eax,0x2c
c000f5de:	8a 00                	mov    al,BYTE PTR [eax]
c000f5e0:	0f b6 d0             	movzx  edx,al
c000f5e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5e7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5ee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5f2:	0f b6 c0             	movzx  eax,al
c000f5f5:	c1 e0 08             	shl    eax,0x8
c000f5f8:	89 d1                	mov    ecx,edx
c000f5fa:	09 c1                	or     ecx,eax
c000f5fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f600:	8d 50 02             	lea    edx,[eax+0x2]
c000f603:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f607:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f60b:	0f b6 c0             	movzx  eax,al
c000f60e:	c1 e0 10             	shl    eax,0x10
c000f611:	09 c1                	or     ecx,eax
c000f613:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f617:	8d 50 03             	lea    edx,[eax+0x3]
c000f61a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f61e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f622:	0f b6 c0             	movzx  eax,al
c000f625:	c1 e0 18             	shl    eax,0x18
c000f628:	09 c1                	or     ecx,eax
c000f62a:	89 ca                	mov    edx,ecx
c000f62c:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f631:	0f b6 c0             	movzx  eax,al
c000f634:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f63b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f640:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f644:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f648:	01 d0                	add    eax,edx
c000f64a:	83 c0 2c             	add    eax,0x2c
c000f64d:	8a 00                	mov    al,BYTE PTR [eax]
c000f64f:	0f b6 d0             	movzx  edx,al
c000f652:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f656:	8d 48 01             	lea    ecx,[eax+0x1]
c000f659:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f65d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f661:	0f b6 c0             	movzx  eax,al
c000f664:	c1 e0 08             	shl    eax,0x8
c000f667:	89 d1                	mov    ecx,edx
c000f669:	09 c1                	or     ecx,eax
c000f66b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f66f:	8d 50 02             	lea    edx,[eax+0x2]
c000f672:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f676:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f67a:	0f b6 c0             	movzx  eax,al
c000f67d:	c1 e0 10             	shl    eax,0x10
c000f680:	09 c1                	or     ecx,eax
c000f682:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f686:	8d 50 03             	lea    edx,[eax+0x3]
c000f689:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f68d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f691:	0f b6 c0             	movzx  eax,al
c000f694:	c1 e0 18             	shl    eax,0x18
c000f697:	09 c1                	or     ecx,eax
c000f699:	89 ca                	mov    edx,ecx
c000f69b:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6a0:	0f b6 c0             	movzx  eax,al
c000f6a3:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f6aa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6af:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6b4:	83 c0 01             	add    eax,0x1
c000f6b7:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f6bc:	e9 b3 01 00 00       	jmp    c000f874 <scanMADT()+0x494>
c000f6c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f6c4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f6c9:	83 f8 02             	cmp    eax,0x2
c000f6cc:	0f 85 ea 00 00 00    	jne    c000f7bc <scanMADT()+0x3dc>
c000f6d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d6:	8d 50 01             	lea    edx,[eax+0x1]
c000f6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6e1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f6e5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f6e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6ed:	8d 50 01             	lea    edx,[eax+0x1]
c000f6f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6f8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f6fc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f700:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f704:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f708:	01 d0                	add    eax,edx
c000f70a:	83 c0 2c             	add    eax,0x2c
c000f70d:	8a 00                	mov    al,BYTE PTR [eax]
c000f70f:	0f b6 d0             	movzx  edx,al
c000f712:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f716:	8d 48 01             	lea    ecx,[eax+0x1]
c000f719:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f71d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f721:	0f b6 c0             	movzx  eax,al
c000f724:	c1 e0 08             	shl    eax,0x8
c000f727:	89 d1                	mov    ecx,edx
c000f729:	09 c1                	or     ecx,eax
c000f72b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f72f:	8d 50 02             	lea    edx,[eax+0x2]
c000f732:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f736:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f73a:	0f b6 c0             	movzx  eax,al
c000f73d:	c1 e0 10             	shl    eax,0x10
c000f740:	09 c1                	or     ecx,eax
c000f742:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f746:	8d 50 03             	lea    edx,[eax+0x3]
c000f749:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f74d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f751:	0f b6 c0             	movzx  eax,al
c000f754:	c1 e0 18             	shl    eax,0x18
c000f757:	09 c8                	or     eax,ecx
c000f759:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f75d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f762:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f766:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f76a:	01 d0                	add    eax,edx
c000f76c:	83 c0 2c             	add    eax,0x2c
c000f76f:	8a 00                	mov    al,BYTE PTR [eax]
c000f771:	0f b6 d0             	movzx  edx,al
c000f774:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f778:	8d 48 01             	lea    ecx,[eax+0x1]
c000f77b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f77f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f783:	0f b6 c0             	movzx  eax,al
c000f786:	c1 e0 08             	shl    eax,0x8
c000f789:	09 d0                	or     eax,edx
c000f78b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f790:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f795:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f79a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f79e:	88 90 48 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc9b8],dl
c000f7a4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f7a9:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f7ae:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f7b6:	e9 b9 00 00 00       	jmp    c000f874 <scanMADT()+0x494>
c000f7bb:	90                   	nop
c000f7bc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7c1:	83 f8 04             	cmp    eax,0x4
c000f7c4:	0f 85 9a 00 00 00    	jne    c000f864 <scanMADT()+0x484>
c000f7ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ce:	8d 50 01             	lea    edx,[eax+0x1]
c000f7d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7dd:	0f b6 c0             	movzx  eax,al
c000f7e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f7e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ec:	01 d0                	add    eax,edx
c000f7ee:	83 c0 2c             	add    eax,0x2c
c000f7f1:	8a 00                	mov    al,BYTE PTR [eax]
c000f7f3:	0f b6 d0             	movzx  edx,al
c000f7f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7fa:	8d 48 01             	lea    ecx,[eax+0x1]
c000f7fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f801:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f805:	0f b6 c0             	movzx  eax,al
c000f808:	c1 e0 08             	shl    eax,0x8
c000f80b:	09 d0                	or     eax,edx
c000f80d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f811:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f816:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f81a:	8d 50 01             	lea    edx,[eax+0x1]
c000f81d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f821:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f825:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f829:	0f b6 c0             	movzx  eax,al
c000f82c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f834:	c1 e0 08             	shl    eax,0x8
c000f837:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f83b:	89 c1                	mov    ecx,eax
c000f83d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f841:	c1 e0 18             	shl    eax,0x18
c000f844:	89 c3                	mov    ebx,eax
c000f846:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f84b:	8d 50 01             	lea    edx,[eax+0x1]
c000f84e:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f854:	09 d9                	or     ecx,ebx
c000f856:	89 ca                	mov    edx,ecx
c000f858:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f85f:	eb 13                	jmp    c000f874 <scanMADT()+0x494>
c000f861:	8d 76 00             	lea    esi,[esi+0x0]
c000f864:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f869:	83 f8 05             	cmp    eax,0x5
c000f86c:	75 06                	jne    c000f874 <scanMADT()+0x494>
c000f86e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f873:	90                   	nop
c000f874:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f87d:	01 d0                	add    eax,edx
c000f87f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f883:	e9 50 fc ff ff       	jmp    c000f4d8 <scanMADT()+0xf8>
c000f888:	90                   	nop
c000f889:	eb 05                	jmp    c000f890 <scanMADT()+0x4b0>
c000f88b:	90                   	nop
c000f88c:	90                   	nop
c000f88d:	8d 76 00             	lea    esi,[esi+0x0]
c000f890:	83 c4 38             	add    esp,0x38
c000f893:	5b                   	pop    ebx
c000f894:	c3                   	ret    
c000f895:	90                   	nop
c000f896:	66 90                	xchg   ax,ax

c000f898 <ACPI::ACPI()>:
c000f898:	83 ec 0c             	sub    esp,0xc
c000f89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f89f:	83 ec 08             	sub    esp,0x8
c000f8a2:	68 51 1f 02 c0       	push   0xc0021f51
c000f8a7:	50                   	push   eax
c000f8a8:	e8 3b d2 ff ff       	call   c000cae8 <Device::Device(char const*)>
c000f8ad:	83 c4 10             	add    esp,0x10
c000f8b0:	ba a4 20 02 c0       	mov    edx,0xc00220a4
c000f8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8b9:	89 10                	mov    DWORD PTR [eax],edx
c000f8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8bf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f8c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ca:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8d8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f8e2:	e8 f9 fa ff ff       	call   c000f3e0 <scanMADT()>
c000f8e7:	90                   	nop
c000f8e8:	83 c4 0c             	add    esp,0xc
c000f8eb:	c3                   	ret    

c000f8ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f8ec:	83 ec 2c             	sub    esp,0x2c
c000f8ef:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f8f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f8f7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f8fb:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f8ff:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f904:	88 c8                	mov    al,cl
c000f906:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f90a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f90f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f917:	90                   	nop
c000f918:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f91c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f922:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f926:	0f 8d b0 00 00 00    	jge    c000f9dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f92c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f930:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f934:	83 c2 2a             	add    edx,0x2a
c000f937:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f93b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f940:	0f b7 c0             	movzx  eax,ax
c000f943:	39 c2                	cmp    edx,eax
c000f945:	0f 85 85 00 00 00    	jne    c000f9d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f94b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f94f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f953:	83 c2 2a             	add    edx,0x2a
c000f956:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f95a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f95f:	0f b6 c0             	movzx  eax,al
c000f962:	39 c2                	cmp    edx,eax
c000f964:	75 6a                	jne    c000f9d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f966:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f96b:	85 c0                	test   eax,eax
c000f96d:	74 3d                	je     c000f9ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f96f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f973:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f977:	83 c2 2a             	add    edx,0x2a
c000f97a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f97e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f982:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f985:	39 c2                	cmp    edx,eax
c000f987:	74 13                	je     c000f99c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f989:	83 ec 0c             	sub    esp,0xc
c000f98c:	68 cc 1e 02 c0       	push   0xc0021ecc
c000f991:	e8 81 1b 00 00       	call   c0011517 <KePanic(char const*)>
c000f996:	83 c4 10             	add    esp,0x10
c000f999:	8d 76 00             	lea    esi,[esi+0x0]
c000f99c:	83 ec 0c             	sub    esp,0xc
c000f99f:	68 56 1f 02 c0       	push   0xc0021f56
c000f9a4:	e8 6e 1b 00 00       	call   c0011517 <KePanic(char const*)>
c000f9a9:	83 c4 10             	add    esp,0x10
c000f9ac:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f9b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9b8:	83 c2 2a             	add    edx,0x2a
c000f9bb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f9bf:	8b 02                	mov    eax,DWORD PTR [edx]
c000f9c1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f9c4:	89 01                	mov    DWORD PTR [ecx],eax
c000f9c6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f9c9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f9ce:	66 90                	xchg   ax,ax
c000f9d0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f9d5:	e9 3e ff ff ff       	jmp    c000f918 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f9da:	66 90                	xchg   ax,ax
c000f9dc:	90                   	nop
c000f9dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9e1:	83 c4 2c             	add    esp,0x2c
c000f9e4:	c2 04 00             	ret    0x4
c000f9e7:	90                   	nop

c000f9e8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f9e8:	83 ec 1c             	sub    esp,0x1c
c000f9eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9ef:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f9f3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f9f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f9fc:	88 c8                	mov    al,cl
c000f9fe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fa02:	88 d0                	mov    al,dl
c000fa04:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa0c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa16:	83 c2 2a             	add    edx,0x2a
c000fa19:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fa1d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fa21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa25:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa2f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fa36:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fa3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa3f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa45:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fa49:	83 c0 01             	add    eax,0x1
c000fa4c:	88 c1                	mov    cl,al
c000fa4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa52:	83 c2 2a             	add    edx,0x2a
c000fa55:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fa59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa5d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa67:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fa6e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fa72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa76:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa7c:	8d 50 01             	lea    edx,[eax+0x1]
c000fa7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa83:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fa89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa8d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa93:	3d 00 02 00 00       	cmp    eax,0x200
c000fa98:	75 12                	jne    c000faac <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fa9a:	83 ec 0c             	sub    esp,0xc
c000fa9d:	68 65 1f 02 c0       	push   0xc0021f65
c000faa2:	e8 70 1a 00 00       	call   c0011517 <KePanic(char const*)>
c000faa7:	83 c4 10             	add    esp,0x10
c000faaa:	66 90                	xchg   ax,ax
c000faac:	90                   	nop
c000faad:	83 c4 1c             	add    esp,0x1c
c000fab0:	c3                   	ret    
c000fab1:	90                   	nop
c000fab2:	66 90                	xchg   ax,ax

c000fab4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fab4:	b8 00 00 00 00       	mov    eax,0x0
c000fab9:	c3                   	ret    
c000faba:	66 90                	xchg   ax,ax

c000fabc <ACPI::detectPCI()>:
c000fabc:	53                   	push   ebx
c000fabd:	83 ec 28             	sub    esp,0x28
c000fac0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fac5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000faca:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000facf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fad5:	83 e0 04             	and    eax,0x4
c000fad8:	0f b6 c0             	movzx  eax,al
c000fadb:	85 c0                	test   eax,eax
c000fadd:	74 2d                	je     c000fb0c <ACPI::detectPCI()+0x50>
c000fadf:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fae4:	83 ec 08             	sub    esp,0x8
c000fae7:	68 82 1f 02 c0       	push   0xc0021f82
c000faec:	50                   	push   eax
c000faed:	e8 6e f8 ff ff       	call   c000f360 <findDataTable(unsigned char*, char*)>
c000faf2:	83 c4 10             	add    esp,0x10
c000faf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000faf9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fafe:	74 0c                	je     c000fb0c <ACPI::detectPCI()+0x50>
c000fb00:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb05:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb0a:	66 90                	xchg   ax,ax
c000fb0c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fb14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb18:	8a 00                	mov    al,BYTE PTR [eax]
c000fb1a:	0f b6 c0             	movzx  eax,al
c000fb1d:	83 f8 01             	cmp    eax,0x1
c000fb20:	75 0e                	jne    c000fb30 <ACPI::detectPCI()+0x74>
c000fb22:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb27:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb2c:	eb 2e                	jmp    c000fb5c <ACPI::detectPCI()+0xa0>
c000fb2e:	66 90                	xchg   ax,ax
c000fb30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb34:	8a 00                	mov    al,BYTE PTR [eax]
c000fb36:	0f b6 c0             	movzx  eax,al
c000fb39:	83 f8 02             	cmp    eax,0x2
c000fb3c:	75 1e                	jne    c000fb5c <ACPI::detectPCI()+0xa0>
c000fb3e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb43:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fb48:	85 c0                	test   eax,eax
c000fb4a:	74 10                	je     c000fb5c <ACPI::detectPCI()+0xa0>
c000fb4c:	83 ec 0c             	sub    esp,0xc
c000fb4f:	68 fc 1e 02 c0       	push   0xc0021efc
c000fb54:	e8 be 19 00 00       	call   c0011517 <KePanic(char const*)>
c000fb59:	83 c4 10             	add    esp,0x10
c000fb5c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fb60:	83 f0 01             	xor    eax,0x1
c000fb63:	0f b6 c0             	movzx  eax,al
c000fb66:	85 c0                	test   eax,eax
c000fb68:	74 46                	je     c000fbb0 <ACPI::detectPCI()+0xf4>
c000fb6a:	e8 c1 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fb6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fb73:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fb78:	75 0e                	jne    c000fb88 <ACPI::detectPCI()+0xcc>
c000fb7a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb7f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb84:	eb 2a                	jmp    c000fbb0 <ACPI::detectPCI()+0xf4>
c000fb86:	66 90                	xchg   ax,ax
c000fb88:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fb8d:	75 21                	jne    c000fbb0 <ACPI::detectPCI()+0xf4>
c000fb8f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb94:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fb99:	85 c0                	test   eax,eax
c000fb9b:	74 13                	je     c000fbb0 <ACPI::detectPCI()+0xf4>
c000fb9d:	83 ec 0c             	sub    esp,0xc
c000fba0:	68 fc 1e 02 c0       	push   0xc0021efc
c000fba5:	e8 6d 19 00 00       	call   c0011517 <KePanic(char const*)>
c000fbaa:	83 c4 10             	add    esp,0x10
c000fbad:	8d 76 00             	lea    esi,[esi+0x0]
c000fbb0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fbb5:	85 c0                	test   eax,eax
c000fbb7:	0f 84 87 00 00 00    	je     c000fc44 <ACPI::detectPCI()+0x188>
c000fbbd:	83 ec 0c             	sub    esp,0xc
c000fbc0:	68 87 1f 02 c0       	push   0xc0021f87
c000fbc5:	e8 4f 12 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c000fbca:	83 c4 10             	add    esp,0x10
c000fbcd:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fbd5:	83 ec 0c             	sub    esp,0xc
c000fbd8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fbdc:	e8 f2 7e ff ff       	call   c0007ad3 <malloc>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	89 c3                	mov    ebx,eax
c000fbe6:	83 ec 0c             	sub    esp,0xc
c000fbe9:	53                   	push   ebx
c000fbea:	e8 ff b4 00 00       	call   c001b0ee <PCI::PCI()>
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fbf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fbfa:	83 ec 08             	sub    esp,0x8
c000fbfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc01:	50                   	push   eax
c000fc02:	e8 49 cd ff ff       	call   c000c950 <Device::addChild(Device*)>
c000fc07:	83 c4 10             	add    esp,0x10
c000fc0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc0e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc10:	83 c0 08             	add    eax,0x8
c000fc13:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc15:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fc1a:	85 d2                	test   edx,edx
c000fc1c:	74 0a                	je     c000fc28 <ACPI::detectPCI()+0x16c>
c000fc1e:	ba 01 00 00 00       	mov    edx,0x1
c000fc23:	eb 0b                	jmp    c000fc30 <ACPI::detectPCI()+0x174>
c000fc25:	8d 76 00             	lea    esi,[esi+0x0]
c000fc28:	ba 02 00 00 00       	mov    edx,0x2
c000fc2d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc30:	6a 00                	push   0x0
c000fc32:	6a 00                	push   0x0
c000fc34:	52                   	push   edx
c000fc35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc39:	ff d0                	call   eax
c000fc3b:	83 c4 10             	add    esp,0x10
c000fc3e:	e9 91 00 00 00       	jmp    c000fcd4 <ACPI::detectPCI()+0x218>
c000fc43:	90                   	nop
c000fc44:	83 ec 0c             	sub    esp,0xc
c000fc47:	68 9f 1f 02 c0       	push   0xc0021f9f
c000fc4c:	e8 c8 11 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c000fc51:	83 c4 10             	add    esp,0x10
c000fc54:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fc5b:	83 ec 0c             	sub    esp,0xc
c000fc5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc62:	e8 6c 7e ff ff       	call   c0007ad3 <malloc>
c000fc67:	83 c4 10             	add    esp,0x10
c000fc6a:	89 c3                	mov    ebx,eax
c000fc6c:	83 ec 0c             	sub    esp,0xc
c000fc6f:	53                   	push   ebx
c000fc70:	e8 21 c0 00 00       	call   c001bc96 <IDE::IDE()>
c000fc75:	83 c4 10             	add    esp,0x10
c000fc78:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fc7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc80:	83 ec 08             	sub    esp,0x8
c000fc83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc87:	50                   	push   eax
c000fc88:	e8 c3 cc ff ff       	call   c000c950 <Device::addChild(Device*)>
c000fc8d:	83 c4 10             	add    esp,0x10
c000fc90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc94:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fc9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fca2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fcab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcaf:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fcb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcbc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcbe:	83 c0 08             	add    eax,0x8
c000fcc1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcc3:	6a 00                	push   0x0
c000fcc5:	6a 00                	push   0x0
c000fcc7:	6a 00                	push   0x0
c000fcc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fccd:	ff d0                	call   eax
c000fccf:	83 c4 10             	add    esp,0x10
c000fcd2:	66 90                	xchg   ax,ax
c000fcd4:	90                   	nop
c000fcd5:	83 c4 28             	add    esp,0x28
c000fcd8:	5b                   	pop    ebx
c000fcd9:	c3                   	ret    
c000fcda:	66 90                	xchg   ax,ax

c000fcdc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fcdc:	83 ec 1c             	sub    esp,0x1c
c000fcdf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fce3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fce6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fcea:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fcef:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fcf4:	83 ec 08             	sub    esp,0x8
c000fcf7:	52                   	push   edx
c000fcf8:	50                   	push   eax
c000fcf9:	e8 9c 74 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fcfe:	83 c4 10             	add    esp,0x10
c000fd01:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fd05:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd0a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd0f:	83 ec 04             	sub    esp,0x4
c000fd12:	6a 01                	push   0x1
c000fd14:	52                   	push   edx
c000fd15:	50                   	push   eax
c000fd16:	e8 97 75 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fd1b:	83 c4 10             	add    esp,0x10
c000fd1e:	90                   	nop
c000fd1f:	83 c4 1c             	add    esp,0x1c
c000fd22:	c3                   	ret    
c000fd23:	90                   	nop

c000fd24 <ACPI::sleep()>:
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd2c:	85 c0                	test   eax,eax
c000fd2e:	74 08                	je     c000fd38 <ACPI::sleep()+0x14>
c000fd30:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd35:	ff d0                	call   eax
c000fd37:	90                   	nop
c000fd38:	90                   	nop
c000fd39:	83 c4 0c             	add    esp,0xc
c000fd3c:	c3                   	ret    
c000fd3d:	90                   	nop
c000fd3e:	66 90                	xchg   ax,ax

c000fd40 <ACPI::open(int, int, void*)>:
c000fd40:	55                   	push   ebp
c000fd41:	89 e5                	mov    ebp,esp
c000fd43:	53                   	push   ebx
c000fd44:	81 ec 74 01 00 00    	sub    esp,0x174
c000fd4a:	83 ec 0c             	sub    esp,0xc
c000fd4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd50:	e8 67 fd ff ff       	call   c000fabc <ACPI::detectPCI()>
c000fd55:	83 c4 10             	add    esp,0x10
c000fd58:	83 ec 0c             	sub    esp,0xc
c000fd5b:	68 24 1f 02 c0       	push   0xc0021f24
c000fd60:	e8 b4 10 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c000fd65:	83 c4 10             	add    esp,0x10
c000fd68:	b8 4c 05 00 00       	mov    eax,0x54c
c000fd6d:	8a 00                	mov    al,BYTE PTR [eax]
c000fd6f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fd72:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fd76:	83 f8 01             	cmp    eax,0x1
c000fd79:	75 15                	jne    c000fd90 <ACPI::open(int, int, void*)+0x50>
c000fd7b:	83 ec 0c             	sub    esp,0xc
c000fd7e:	68 6f 18 02 c0       	push   0xc002186f
c000fd83:	e8 8b 4d 00 00       	call   c0014b13 <Thr::loadKernelSymbolTable(char const*)>
c000fd88:	83 c4 10             	add    esp,0x10
c000fd8b:	eb 33                	jmp    c000fdc0 <ACPI::open(int, int, void*)+0x80>
c000fd8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd90:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fd94:	3d bb 00 00 00       	cmp    eax,0xbb
c000fd99:	75 15                	jne    c000fdb0 <ACPI::open(int, int, void*)+0x70>
c000fd9b:	83 ec 0c             	sub    esp,0xc
c000fd9e:	68 b4 1f 02 c0       	push   0xc0021fb4
c000fda3:	e8 6b 4d 00 00       	call   c0014b13 <Thr::loadKernelSymbolTable(char const*)>
c000fda8:	83 c4 10             	add    esp,0x10
c000fdab:	eb 13                	jmp    c000fdc0 <ACPI::open(int, int, void*)+0x80>
c000fdad:	8d 76 00             	lea    esi,[esi+0x0]
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	68 d2 1f 02 c0       	push   0xc0021fd2
c000fdb8:	e8 5a 17 00 00       	call   c0011517 <KePanic(char const*)>
c000fdbd:	83 c4 10             	add    esp,0x10
c000fdc0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fdc4:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fdcb:	83 ec 0c             	sub    esp,0xc
c000fdce:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fdd1:	e8 fd 7c ff ff       	call   c0007ad3 <malloc>
c000fdd6:	83 c4 10             	add    esp,0x10
c000fdd9:	89 c3                	mov    ebx,eax
c000fddb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fde0:	83 ec 04             	sub    esp,0x4
c000fde3:	50                   	push   eax
c000fde4:	68 ec 1f 02 c0       	push   0xc0021fec
c000fde9:	53                   	push   ebx
c000fdea:	e8 e1 bc ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c000fdef:	83 c4 10             	add    esp,0x10
c000fdf2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fdf5:	83 ec 08             	sub    esp,0x8
c000fdf8:	6a 01                	push   0x1
c000fdfa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fdfd:	e8 ec bc ff ff       	call   c000baee <File::open(FileOpenMode)>
c000fe02:	83 c4 10             	add    esp,0x10
c000fe05:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fe08:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fe0c:	75 12                	jne    c000fe20 <ACPI::open(int, int, void*)+0xe0>
c000fe0e:	83 ec 0c             	sub    esp,0xc
c000fe11:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe14:	e8 33 bd ff ff       	call   c000bb4c <File::close()>
c000fe19:	83 c4 10             	add    esp,0x10
c000fe1c:	eb 06                	jmp    c000fe24 <ACPI::open(int, int, void*)+0xe4>
c000fe1e:	66 90                	xchg   ax,ax
c000fe20:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe24:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fe28:	74 16                	je     c000fe40 <ACPI::open(int, int, void*)+0x100>
c000fe2a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fe2d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe2f:	83 c0 08             	add    eax,0x8
c000fe32:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe34:	83 ec 0c             	sub    esp,0xc
c000fe37:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe3a:	ff d0                	call   eax
c000fe3c:	83 c4 10             	add    esp,0x10
c000fe3f:	90                   	nop
c000fe40:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fe43:	83 f0 01             	xor    eax,0x1
c000fe46:	0f b6 c0             	movzx  eax,al
c000fe49:	85 c0                	test   eax,eax
c000fe4b:	74 3b                	je     c000fe88 <ACPI::open(int, int, void*)+0x148>
c000fe4d:	83 ec 0c             	sub    esp,0xc
c000fe50:	68 0a 20 02 c0       	push   0xc002200a
c000fe55:	e8 bf 0f 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c000fe5a:	83 c4 10             	add    esp,0x10
c000fe5d:	83 ec 04             	sub    esp,0x4
c000fe60:	6a 0c                	push   0xc
c000fe62:	68 25 20 02 c0       	push   0xc0022025
c000fe67:	68 36 20 02 c0       	push   0xc0022036
c000fe6c:	e8 21 3f 00 00       	call   c0013d92 <Reg::readIntWithDefault(char*, char*, int)>
c000fe71:	83 c4 10             	add    esp,0x10
c000fe74:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fe77:	83 ec 0c             	sub    esp,0xc
c000fe7a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fe7d:	e8 98 99 ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fe82:	83 c4 10             	add    esp,0x10
c000fe85:	8d 76 00             	lea    esi,[esi+0x0]
c000fe88:	83 ec 0c             	sub    esp,0xc
c000fe8b:	68 b5 0a 02 c0       	push   0xc0020ab5
c000fe90:	e8 84 0f 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c000fe95:	83 c4 10             	add    esp,0x10
c000fe98:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fe9b:	83 ec 08             	sub    esp,0x8
c000fe9e:	6a 13                	push   0x13
c000fea0:	50                   	push   eax
c000fea1:	e8 c2 cd ff ff       	call   c000cc68 <getDevicesOfType(DeviceType)>
c000fea6:	83 c4 0c             	add    esp,0xc
c000fea9:	8d 76 00             	lea    esi,[esi+0x0]
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	8d 45 b8             	lea    eax,[ebp-0x48]
c000feb2:	50                   	push   eax
c000feb3:	e8 e8 ff 00 00       	call   c001fea0 <LinkedList<Device>::isEmpty()>
c000feb8:	83 c4 10             	add    esp,0x10
c000febb:	83 f0 01             	xor    eax,0x1
c000febe:	0f b6 c0             	movzx  eax,al
c000fec1:	85 c0                	test   eax,eax
c000fec3:	0f 84 1f 01 00 00    	je     c000ffe8 <ACPI::open(int, int, void*)+0x2a8>
c000fec9:	83 ec 0c             	sub    esp,0xc
c000fecc:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fecf:	50                   	push   eax
c000fed0:	e8 e7 ff 00 00       	call   c001febc <LinkedList<Device>::getFirstElement()>
c000fed5:	83 c4 10             	add    esp,0x10
c000fed8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fedb:	83 ec 0c             	sub    esp,0xc
c000fede:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fee1:	50                   	push   eax
c000fee2:	e8 dd ff 00 00       	call   c001fec4 <LinkedList<Device>::removeFirst()>
c000fee7:	83 c4 10             	add    esp,0x10
c000feea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000feed:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fef0:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fef3:	b8 24 00 00 00       	mov    eax,0x24
c000fef8:	83 e0 fc             	and    eax,0xfffffffc
c000fefb:	89 c3                	mov    ebx,eax
c000fefd:	b8 00 00 00 00       	mov    eax,0x0
c000ff02:	66 90                	xchg   ax,ax
c000ff04:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ff0b:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ff12:	83 c0 04             	add    eax,0x4
c000ff15:	39 d8                	cmp    eax,ebx
c000ff17:	72 eb                	jb     c000ff04 <ACPI::open(int, int, void*)+0x1c4>
c000ff19:	83 ec 08             	sub    esp,0x8
c000ff1c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ff22:	50                   	push   eax
c000ff23:	83 ec 24             	sub    esp,0x24
c000ff26:	89 e1                	mov    ecx,esp
c000ff28:	b8 24 00 00 00       	mov    eax,0x24
c000ff2d:	83 e0 fc             	and    eax,0xfffffffc
c000ff30:	89 c3                	mov    ebx,eax
c000ff32:	b8 00 00 00 00       	mov    eax,0x0
c000ff37:	90                   	nop
c000ff38:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ff3f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ff42:	83 c0 04             	add    eax,0x4
c000ff45:	39 d8                	cmp    eax,ebx
c000ff47:	72 ef                	jb     c000ff38 <ACPI::open(int, int, void*)+0x1f8>
c000ff49:	e8 88 b6 00 00       	call   c001b5d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ff4e:	83 c4 30             	add    esp,0x30
c000ff51:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ff54:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ff58:	0f 84 4e ff ff ff    	je     c000feac <ACPI::open(int, int, void*)+0x16c>
c000ff5e:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ff65:	83 ec 0c             	sub    esp,0xc
c000ff68:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ff6b:	e8 63 7b ff ff       	call   c0007ad3 <malloc>
c000ff70:	83 c4 10             	add    esp,0x10
c000ff73:	89 c3                	mov    ebx,eax
c000ff75:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ff7a:	83 ec 04             	sub    esp,0x4
c000ff7d:	50                   	push   eax
c000ff7e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ff81:	53                   	push   ebx
c000ff82:	e8 49 bb ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c000ff87:	83 c4 10             	add    esp,0x10
c000ff8a:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ff8d:	83 ec 0c             	sub    esp,0xc
c000ff90:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ff93:	e8 1a be ff ff       	call   c000bdb2 <File::exists()>
c000ff98:	83 c4 10             	add    esp,0x10
c000ff9b:	0f b6 c0             	movzx  eax,al
c000ff9e:	85 c0                	test   eax,eax
c000ffa0:	74 22                	je     c000ffc4 <ACPI::open(int, int, void*)+0x284>
c000ffa2:	83 ec 08             	sub    esp,0x8
c000ffa5:	6a 01                	push   0x1
c000ffa7:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ffaa:	e8 e6 55 00 00       	call   c0015595 <Thr::loadDLL(char const*, bool)>
c000ffaf:	83 c4 10             	add    esp,0x10
c000ffb2:	83 ec 08             	sub    esp,0x8
c000ffb5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000ffb8:	50                   	push   eax
c000ffb9:	e8 17 58 00 00       	call   c00157d5 <Thr::executeDLL(unsigned long, void*)>
c000ffbe:	83 c4 10             	add    esp,0x10
c000ffc1:	8d 76 00             	lea    esi,[esi+0x0]
c000ffc4:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000ffc8:	0f 84 de fe ff ff    	je     c000feac <ACPI::open(int, int, void*)+0x16c>
c000ffce:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000ffd1:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffd3:	83 c0 08             	add    eax,0x8
c000ffd6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffd8:	83 ec 0c             	sub    esp,0xc
c000ffdb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ffde:	ff d0                	call   eax
c000ffe0:	83 c4 10             	add    esp,0x10
c000ffe3:	e9 c4 fe ff ff       	jmp    c000feac <ACPI::open(int, int, void*)+0x16c>
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffee:	50                   	push   eax
c000ffef:	e8 a8 fe 00 00       	call   c001fe9c <LinkedList<Device>::~LinkedList()>
c000fff4:	83 c4 10             	add    esp,0x10
c000fff7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000fffd:	83 ec 08             	sub    esp,0x8
c0010000:	6a 01                	push   0x1
c0010002:	68 3d 20 02 c0       	push   0xc002203d
c0010007:	e8 89 55 00 00       	call   c0015595 <Thr::loadDLL(char const*, bool)>
c001000c:	83 c4 10             	add    esp,0x10
c001000f:	83 ec 08             	sub    esp,0x8
c0010012:	53                   	push   ebx
c0010013:	50                   	push   eax
c0010014:	e8 bc 57 00 00       	call   c00157d5 <Thr::executeDLL(unsigned long, void*)>
c0010019:	83 c4 10             	add    esp,0x10
c001001c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010021:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010027:	83 e0 04             	and    eax,0x4
c001002a:	0f b6 c0             	movzx  eax,al
c001002d:	85 c0                	test   eax,eax
c001002f:	0f 84 e3 00 00 00    	je     c0010118 <ACPI::open(int, int, void*)+0x3d8>
c0010035:	83 ec 0c             	sub    esp,0xc
c0010038:	68 5a 20 02 c0       	push   0xc002205a
c001003d:	e8 d7 0d 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c0010042:	83 c4 10             	add    esp,0x10
c0010045:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001004c:	83 ec 0c             	sub    esp,0xc
c001004f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c0010052:	e8 7c 7a ff ff       	call   c0007ad3 <malloc>
c0010057:	83 c4 10             	add    esp,0x10
c001005a:	89 c3                	mov    ebx,eax
c001005c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010061:	83 ec 04             	sub    esp,0x4
c0010064:	50                   	push   eax
c0010065:	68 77 20 02 c0       	push   0xc0022077
c001006a:	53                   	push   ebx
c001006b:	e8 60 ba ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c0010070:	83 c4 10             	add    esp,0x10
c0010073:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0010076:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001007a:	74 1c                	je     c0010098 <ACPI::open(int, int, void*)+0x358>
c001007c:	83 ec 0c             	sub    esp,0xc
c001007f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c0010082:	e8 2b bd ff ff       	call   c000bdb2 <File::exists()>
c0010087:	83 c4 10             	add    esp,0x10
c001008a:	0f b6 c0             	movzx  eax,al
c001008d:	85 c0                	test   eax,eax
c001008f:	74 07                	je     c0010098 <ACPI::open(int, int, void*)+0x358>
c0010091:	b0 01                	mov    al,0x1
c0010093:	eb 07                	jmp    c001009c <ACPI::open(int, int, void*)+0x35c>
c0010095:	8d 76 00             	lea    esi,[esi+0x0]
c0010098:	b0 00                	mov    al,0x0
c001009a:	66 90                	xchg   ax,ax
c001009c:	0f b6 c0             	movzx  eax,al
c001009f:	85 c0                	test   eax,eax
c00100a1:	74 21                	je     c00100c4 <ACPI::open(int, int, void*)+0x384>
c00100a3:	83 ec 08             	sub    esp,0x8
c00100a6:	6a 01                	push   0x1
c00100a8:	68 77 20 02 c0       	push   0xc0022077
c00100ad:	e8 e3 54 00 00       	call   c0015595 <Thr::loadDLL(char const*, bool)>
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 ec 08             	sub    esp,0x8
c00100b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00100bb:	50                   	push   eax
c00100bc:	e8 14 57 00 00       	call   c00157d5 <Thr::executeDLL(unsigned long, void*)>
c00100c1:	83 c4 10             	add    esp,0x10
c00100c4:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00100c8:	74 1e                	je     c00100e8 <ACPI::open(int, int, void*)+0x3a8>
c00100ca:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00100ce:	74 18                	je     c00100e8 <ACPI::open(int, int, void*)+0x3a8>
c00100d0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00100d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00100d5:	83 c0 08             	add    eax,0x8
c00100d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00100da:	83 ec 0c             	sub    esp,0xc
c00100dd:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00100e0:	ff d0                	call   eax
c00100e2:	83 c4 10             	add    esp,0x10
c00100e5:	8d 76 00             	lea    esi,[esi+0x0]
c00100e8:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00100ed:	83 ec 08             	sub    esp,0x8
c00100f0:	68 94 20 02 c0       	push   0xc0022094
c00100f5:	50                   	push   eax
c00100f6:	e8 65 f2 ff ff       	call   c000f360 <findDataTable(unsigned char*, char*)>
c00100fb:	83 c4 10             	add    esp,0x10
c00100fe:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0010101:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0010105:	74 11                	je     c0010118 <ACPI::open(int, int, void*)+0x3d8>
c0010107:	83 ec 08             	sub    esp,0x8
c001010a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001010d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010110:	e8 c7 fb ff ff       	call   c000fcdc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010115:	83 c4 10             	add    esp,0x10
c0010118:	b8 00 00 00 00       	mov    eax,0x0
c001011d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010120:	c9                   	leave  
c0010121:	c3                   	ret    

c0010122 <CPU::close(int, int, void*)>:
c0010122:	31 c0                	xor    eax,eax
c0010124:	c3                   	ret    
c0010125:	90                   	nop

c0010126 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010126:	60                   	pusha  
c0010127:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001012b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001012f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010133:	9c                   	pushf  
c0010134:	fa                   	cli    
c0010135:	0f 09                	wbinvd 
c0010137:	0f 30                	wrmsr  
c0010139:	9d                   	popf   
c001013a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001013e:	89 02                	mov    DWORD PTR [edx],eax
c0010140:	61                   	popa   
c0010141:	c3                   	ret    

c0010142 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010142:	60                   	pusha  
c0010143:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010147:	9c                   	pushf  
c0010148:	fa                   	cli    
c0010149:	0f 09                	wbinvd 
c001014b:	31 c0                	xor    eax,eax
c001014d:	31 d2                	xor    edx,edx
c001014f:	0f 32                	rdmsr  
c0010151:	9d                   	popf   
c0010152:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010156:	89 02                	mov    DWORD PTR [edx],eax
c0010158:	61                   	popa   
c0010159:	c3                   	ret    

c001015a <CPU::AMD_K6_writeback(int, int, int)>:
c001015a:	56                   	push   esi
c001015b:	53                   	push   ebx
c001015c:	83 ec 10             	sub    esp,0x10
c001015f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010168:	75 5d                	jne    c00101c7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001016a:	83 f8 08             	cmp    eax,0x8
c001016d:	75 09                	jne    c0010178 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001016f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010174:	7e 13                	jle    c0010189 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010176:	eb 30                	jmp    c00101a8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010178:	83 f8 06             	cmp    eax,0x6
c001017b:	7c 4a                	jl     c00101c7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001017d:	83 f8 07             	cmp    eax,0x7
c0010180:	7e 07                	jle    c0010189 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010182:	83 f8 09             	cmp    eax,0x9
c0010185:	74 21                	je     c00101a8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010187:	eb 3e                	jmp    c00101c7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010189:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c001018f:	89 e6                	mov    esi,esp
c0010191:	56                   	push   esi
c0010192:	68 82 00 00 c0       	push   0xc0000082
c0010197:	e8 a6 ff ff ff       	call   c0010142 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001019c:	c1 eb 15             	shr    ebx,0x15
c001019f:	56                   	push   esi
c00101a0:	83 e3 7e             	and    ebx,0x7e
c00101a3:	6a 00                	push   0x0
c00101a5:	53                   	push   ebx
c00101a6:	eb 12                	jmp    c00101ba <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00101a8:	89 e3                	mov    ebx,esp
c00101aa:	53                   	push   ebx
c00101ab:	68 82 00 00 c0       	push   0xc0000082
c00101b0:	e8 8d ff ff ff       	call   c0010142 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00101b5:	53                   	push   ebx
c00101b6:	6a 00                	push   0x0
c00101b8:	6a 00                	push   0x0
c00101ba:	68 82 00 00 c0       	push   0xc0000082
c00101bf:	e8 62 ff ff ff       	call   c0010126 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00101c4:	83 c4 18             	add    esp,0x18
c00101c7:	83 c4 10             	add    esp,0x10
c00101ca:	5b                   	pop    ebx
c00101cb:	5e                   	pop    esi
c00101cc:	c3                   	ret    
c00101cd:	90                   	nop

c00101ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00101ce:	55                   	push   ebp
c00101cf:	57                   	push   edi
c00101d0:	56                   	push   esi
c00101d1:	53                   	push   ebx
c00101d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101d6:	39 05 58 36 02 c0    	cmp    DWORD PTR ds:0xc0023658,eax
c00101dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00101e0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00101e4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00101e8:	75 23                	jne    c001020d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00101ea:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00101ef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00101f3:	89 06                	mov    DWORD PTR [esi],eax
c00101f5:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00101fa:	89 07                	mov    DWORD PTR [edi],eax
c00101fc:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c0010201:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010204:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c0010209:	89 02                	mov    DWORD PTR [edx],eax
c001020b:	eb 3f                	jmp    c001024c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001020d:	31 c9                	xor    ecx,ecx
c001020f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010213:	0f a2                	cpuid  
c0010215:	89 06                	mov    DWORD PTR [esi],eax
c0010217:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001021b:	89 1f                	mov    DWORD PTR [edi],ebx
c001021d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010220:	89 10                	mov    DWORD PTR [eax],edx
c0010222:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010226:	a3 58 36 02 c0       	mov    ds:0xc0023658,eax
c001022b:	8b 06                	mov    eax,DWORD PTR [esi]
c001022d:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010232:	8b 07                	mov    eax,DWORD PTR [edi]
c0010234:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010239:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001023c:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010241:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010245:	8b 00                	mov    eax,DWORD PTR [eax]
c0010247:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c001024c:	5b                   	pop    ebx
c001024d:	5e                   	pop    esi
c001024e:	5f                   	pop    edi
c001024f:	5d                   	pop    ebp
c0010250:	c3                   	ret    
c0010251:	90                   	nop

c0010252 <CPU::cpuidCheckEDX(unsigned int)>:
c0010252:	83 ec 10             	sub    esp,0x10
c0010255:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010259:	50                   	push   eax
c001025a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001025e:	50                   	push   eax
c001025f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010263:	50                   	push   eax
c0010264:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010268:	50                   	push   eax
c0010269:	6a 01                	push   0x1
c001026b:	e8 5e ff ff ff       	call   c00101ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010270:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010274:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010278:	0f 95 c0             	setne  al
c001027b:	83 c4 24             	add    esp,0x24
c001027e:	c3                   	ret    
c001027f:	90                   	nop

c0010280 <CPU::cpuidCheckECX(unsigned int)>:
c0010280:	83 ec 10             	sub    esp,0x10
c0010283:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010287:	50                   	push   eax
c0010288:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001028c:	50                   	push   eax
c001028d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010291:	50                   	push   eax
c0010292:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010296:	50                   	push   eax
c0010297:	6a 01                	push   0x1
c0010299:	e8 30 ff ff ff       	call   c00101ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001029e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102a2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00102a6:	0f 95 c0             	setne  al
c00102a9:	83 c4 24             	add    esp,0x24
c00102ac:	c3                   	ret    
c00102ad:	90                   	nop

c00102ae <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00102ae:	83 ec 10             	sub    esp,0x10
c00102b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102b5:	50                   	push   eax
c00102b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102ba:	50                   	push   eax
c00102bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102bf:	50                   	push   eax
c00102c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102c4:	50                   	push   eax
c00102c5:	6a 07                	push   0x7
c00102c7:	e8 02 ff ff ff       	call   c00101ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102d0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00102d4:	0f 95 c0             	setne  al
c00102d7:	83 c4 24             	add    esp,0x24
c00102da:	c3                   	ret    
c00102db:	90                   	nop

c00102dc <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00102dc:	83 ec 10             	sub    esp,0x10
c00102df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102e3:	50                   	push   eax
c00102e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102e8:	50                   	push   eax
c00102e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102ed:	50                   	push   eax
c00102ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102f2:	50                   	push   eax
c00102f3:	6a 07                	push   0x7
c00102f5:	e8 d4 fe ff ff       	call   c00101ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102fe:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010302:	0f 95 c0             	setne  al
c0010305:	83 c4 24             	add    esp,0x24
c0010308:	c3                   	ret    
c0010309:	90                   	nop

c001030a <CPU::CPU()>:
c001030a:	83 ec 0c             	sub    esp,0xc
c001030d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010311:	83 ec 08             	sub    esp,0x8
c0010314:	68 b9 21 02 c0       	push   0xc00221b9
c0010319:	50                   	push   eax
c001031a:	e8 c9 c7 ff ff       	call   c000cae8 <Device::Device(char const*)>
c001031f:	83 c4 10             	add    esp,0x10
c0010322:	ba 4c 22 02 c0       	mov    edx,0xc002224c
c0010327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001032b:	89 10                	mov    DWORD PTR [eax],edx
c001032d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010331:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001033b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001033f:	05 78 01 00 00       	add    eax,0x178
c0010344:	83 ec 0c             	sub    esp,0xc
c0010347:	50                   	push   eax
c0010348:	e8 2f 70 ff ff       	call   c000737c <GDT::GDT()>
c001034d:	83 c4 10             	add    esp,0x10
c0010350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010354:	05 7c 09 00 00       	add    eax,0x97c
c0010359:	83 ec 0c             	sub    esp,0xc
c001035c:	50                   	push   eax
c001035d:	e8 6a 72 ff ff       	call   c00075cc <IDT::IDT()>
c0010362:	83 c4 10             	add    esp,0x10
c0010365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010369:	05 7c 11 00 00       	add    eax,0x117c
c001036e:	83 ec 0c             	sub    esp,0xc
c0010371:	50                   	push   eax
c0010372:	e8 b5 8b ff ff       	call   c0008f2c <TSS::TSS()>
c0010377:	83 c4 10             	add    esp,0x10
c001037a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001037e:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010389:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010393:	90                   	nop
c0010394:	83 c4 0c             	add    esp,0xc
c0010397:	c3                   	ret    

c0010398 <CPU::displayFeatures()>:
c0010398:	c3                   	ret    
c0010399:	90                   	nop

c001039a <CPU::detectFeatures()>:
c001039a:	55                   	push   ebp
c001039b:	57                   	push   edi
c001039c:	56                   	push   esi
c001039d:	53                   	push   ebx
c001039e:	83 ec 30             	sub    esp,0x30
c00103a1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00103a5:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00103af:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00103b5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00103bc:	6a 0d                	push   0xd
c00103be:	6a 00                	push   0x0
c00103c0:	55                   	push   ebp
c00103c1:	e8 2a 01 ff ff       	call   c00004f0 <memset>
c00103c6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00103cb:	83 c4 10             	add    esp,0x10
c00103ce:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00103d5:	0f 84 db 05 00 00    	je     c00109b6 <CPU::detectFeatures()+0x61c>
c00103db:	83 ec 0c             	sub    esp,0xc
c00103de:	89 ef                	mov    edi,ebp
c00103e0:	6a 10                	push   0x10
c00103e2:	e8 6b fe ff ff       	call   c0010252 <CPU::cpuidCheckEDX(unsigned int)>
c00103e7:	83 e0 01             	and    eax,0x1
c00103ea:	8d 14 00             	lea    edx,[eax+eax*1]
c00103ed:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00103f3:	83 e0 fd             	and    eax,0xfffffffd
c00103f6:	09 d0                	or     eax,edx
c00103f8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00103fe:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010405:	e8 48 fe ff ff       	call   c0010252 <CPU::cpuidCheckEDX(unsigned int)>
c001040a:	83 e0 01             	and    eax,0x1
c001040d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010414:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001041a:	83 e0 fb             	and    eax,0xfffffffb
c001041d:	09 d0                	or     eax,edx
c001041f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010425:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001042c:	e8 21 fe ff ff       	call   c0010252 <CPU::cpuidCheckEDX(unsigned int)>
c0010431:	83 e0 01             	and    eax,0x1
c0010434:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001043b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010441:	83 e0 f7             	and    eax,0xfffffff7
c0010444:	09 d0                	or     eax,edx
c0010446:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001044c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010453:	e8 fa fd ff ff       	call   c0010252 <CPU::cpuidCheckEDX(unsigned int)>
c0010458:	83 e0 01             	and    eax,0x1
c001045b:	c1 e0 04             	shl    eax,0x4
c001045e:	89 c2                	mov    edx,eax
c0010460:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010466:	83 e0 ef             	and    eax,0xffffffef
c0010469:	09 d0                	or     eax,edx
c001046b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010471:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010478:	e8 d5 fd ff ff       	call   c0010252 <CPU::cpuidCheckEDX(unsigned int)>
c001047d:	83 e0 01             	and    eax,0x1
c0010480:	c1 e0 05             	shl    eax,0x5
c0010483:	89 c2                	mov    edx,eax
c0010485:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001048b:	83 e0 df             	and    eax,0xffffffdf
c001048e:	09 d0                	or     eax,edx
c0010490:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010496:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001049d:	e8 b0 fd ff ff       	call   c0010252 <CPU::cpuidCheckEDX(unsigned int)>
c00104a2:	83 e0 01             	and    eax,0x1
c00104a5:	8d 14 00             	lea    edx,[eax+eax*1]
c00104a8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00104ae:	83 e0 fd             	and    eax,0xfffffffd
c00104b1:	09 d0                	or     eax,edx
c00104b3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00104b9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00104c0:	e8 8d fd ff ff       	call   c0010252 <CPU::cpuidCheckEDX(unsigned int)>
c00104c5:	83 e0 01             	and    eax,0x1
c00104c8:	c1 e0 06             	shl    eax,0x6
c00104cb:	89 c2                	mov    edx,eax
c00104cd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00104d3:	83 e0 bf             	and    eax,0xffffffbf
c00104d6:	09 d0                	or     eax,edx
c00104d8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00104de:	58                   	pop    eax
c00104df:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104e3:	50                   	push   eax
c00104e4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104e8:	50                   	push   eax
c00104e9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00104ed:	56                   	push   esi
c00104ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104f2:	50                   	push   eax
c00104f3:	6a 00                	push   0x0
c00104f5:	e8 d4 fc ff ff       	call   c00101ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104fa:	b8 04 00 00 00       	mov    eax,0x4
c00104ff:	89 c1                	mov    ecx,eax
c0010501:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010503:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010509:	89 c1                	mov    ecx,eax
c001050b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001050f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010511:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010517:	89 c1                	mov    ecx,eax
c0010519:	8d 74 24 38          	lea    esi,[esp+0x38]
c001051d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001051f:	83 c4 18             	add    esp,0x18
c0010522:	68 c8 20 02 c0       	push   0xc00220c8
c0010527:	55                   	push   ebp
c0010528:	e8 53 02 ff ff       	call   c0000780 <strcmp>
c001052d:	83 c4 10             	add    esp,0x10
c0010530:	85 c0                	test   eax,eax
c0010532:	75 0f                	jne    c0010543 <CPU::detectFeatures()+0x1a9>
c0010534:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001053e:	e9 22 02 00 00       	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c0010543:	50                   	push   eax
c0010544:	50                   	push   eax
c0010545:	68 d5 20 02 c0       	push   0xc00220d5
c001054a:	55                   	push   ebp
c001054b:	e8 30 02 ff ff       	call   c0000780 <strcmp>
c0010550:	83 c4 10             	add    esp,0x10
c0010553:	85 c0                	test   eax,eax
c0010555:	74 dd                	je     c0010534 <CPU::detectFeatures()+0x19a>
c0010557:	50                   	push   eax
c0010558:	50                   	push   eax
c0010559:	68 e2 20 02 c0       	push   0xc00220e2
c001055e:	55                   	push   ebp
c001055f:	e8 1c 02 ff ff       	call   c0000780 <strcmp>
c0010564:	83 c4 10             	add    esp,0x10
c0010567:	85 c0                	test   eax,eax
c0010569:	74 2a                	je     c0010595 <CPU::detectFeatures()+0x1fb>
c001056b:	50                   	push   eax
c001056c:	50                   	push   eax
c001056d:	68 ef 20 02 c0       	push   0xc00220ef
c0010572:	55                   	push   ebp
c0010573:	e8 08 02 ff ff       	call   c0000780 <strcmp>
c0010578:	83 c4 10             	add    esp,0x10
c001057b:	85 c0                	test   eax,eax
c001057d:	74 16                	je     c0010595 <CPU::detectFeatures()+0x1fb>
c001057f:	50                   	push   eax
c0010580:	50                   	push   eax
c0010581:	68 fc 20 02 c0       	push   0xc00220fc
c0010586:	55                   	push   ebp
c0010587:	e8 f4 01 ff ff       	call   c0000780 <strcmp>
c001058c:	83 c4 10             	add    esp,0x10
c001058f:	85 c0                	test   eax,eax
c0010591:	74 48                	je     c00105db <CPU::detectFeatures()+0x241>
c0010593:	eb 0f                	jmp    c00105a4 <CPU::detectFeatures()+0x20a>
c0010595:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001059f:	e9 c1 01 00 00       	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c00105a4:	50                   	push   eax
c00105a5:	50                   	push   eax
c00105a6:	68 09 21 02 c0       	push   0xc0022109
c00105ab:	55                   	push   ebp
c00105ac:	e8 cf 01 ff ff       	call   c0000780 <strcmp>
c00105b1:	83 c4 10             	add    esp,0x10
c00105b4:	85 c0                	test   eax,eax
c00105b6:	74 23                	je     c00105db <CPU::detectFeatures()+0x241>
c00105b8:	57                   	push   edi
c00105b9:	57                   	push   edi
c00105ba:	68 16 21 02 c0       	push   0xc0022116
c00105bf:	55                   	push   ebp
c00105c0:	e8 bb 01 ff ff       	call   c0000780 <strcmp>
c00105c5:	83 c4 10             	add    esp,0x10
c00105c8:	85 c0                	test   eax,eax
c00105ca:	75 1e                	jne    c00105ea <CPU::detectFeatures()+0x250>
c00105cc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00105d6:	e9 8a 01 00 00       	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c00105db:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00105e5:	e9 7b 01 00 00       	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c00105ea:	56                   	push   esi
c00105eb:	56                   	push   esi
c00105ec:	68 23 21 02 c0       	push   0xc0022123
c00105f1:	55                   	push   ebp
c00105f2:	e8 89 01 ff ff       	call   c0000780 <strcmp>
c00105f7:	83 c4 10             	add    esp,0x10
c00105fa:	85 c0                	test   eax,eax
c00105fc:	75 0f                	jne    c001060d <CPU::detectFeatures()+0x273>
c00105fe:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010608:	e9 58 01 00 00       	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c001060d:	51                   	push   ecx
c001060e:	51                   	push   ecx
c001060f:	68 e2 20 02 c0       	push   0xc00220e2
c0010614:	55                   	push   ebp
c0010615:	e8 66 01 ff ff       	call   c0000780 <strcmp>
c001061a:	83 c4 10             	add    esp,0x10
c001061d:	85 c0                	test   eax,eax
c001061f:	75 0f                	jne    c0010630 <CPU::detectFeatures()+0x296>
c0010621:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001062b:	e9 35 01 00 00       	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c0010630:	52                   	push   edx
c0010631:	52                   	push   edx
c0010632:	68 30 21 02 c0       	push   0xc0022130
c0010637:	55                   	push   ebp
c0010638:	e8 43 01 ff ff       	call   c0000780 <strcmp>
c001063d:	83 c4 10             	add    esp,0x10
c0010640:	85 c0                	test   eax,eax
c0010642:	75 0f                	jne    c0010653 <CPU::detectFeatures()+0x2b9>
c0010644:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001064e:	e9 12 01 00 00       	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c0010653:	50                   	push   eax
c0010654:	50                   	push   eax
c0010655:	68 3d 21 02 c0       	push   0xc002213d
c001065a:	55                   	push   ebp
c001065b:	e8 20 01 ff ff       	call   c0000780 <strcmp>
c0010660:	83 c4 10             	add    esp,0x10
c0010663:	85 c0                	test   eax,eax
c0010665:	75 0f                	jne    c0010676 <CPU::detectFeatures()+0x2dc>
c0010667:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010671:	e9 ef 00 00 00       	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c0010676:	50                   	push   eax
c0010677:	50                   	push   eax
c0010678:	68 4a 21 02 c0       	push   0xc002214a
c001067d:	55                   	push   ebp
c001067e:	e8 fd 00 ff ff       	call   c0000780 <strcmp>
c0010683:	83 c4 10             	add    esp,0x10
c0010686:	85 c0                	test   eax,eax
c0010688:	75 0f                	jne    c0010699 <CPU::detectFeatures()+0x2ff>
c001068a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010694:	e9 cc 00 00 00       	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c0010699:	50                   	push   eax
c001069a:	50                   	push   eax
c001069b:	68 57 21 02 c0       	push   0xc0022157
c00106a0:	55                   	push   ebp
c00106a1:	e8 da 00 ff ff       	call   c0000780 <strcmp>
c00106a6:	83 c4 10             	add    esp,0x10
c00106a9:	85 c0                	test   eax,eax
c00106ab:	75 0f                	jne    c00106bc <CPU::detectFeatures()+0x322>
c00106ad:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00106b7:	e9 a9 00 00 00       	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c00106bc:	50                   	push   eax
c00106bd:	50                   	push   eax
c00106be:	68 64 21 02 c0       	push   0xc0022164
c00106c3:	55                   	push   ebp
c00106c4:	e8 b7 00 ff ff       	call   c0000780 <strcmp>
c00106c9:	83 c4 10             	add    esp,0x10
c00106cc:	85 c0                	test   eax,eax
c00106ce:	75 0f                	jne    c00106df <CPU::detectFeatures()+0x345>
c00106d0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00106da:	e9 86 00 00 00       	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c00106df:	50                   	push   eax
c00106e0:	50                   	push   eax
c00106e1:	68 71 21 02 c0       	push   0xc0022171
c00106e6:	55                   	push   ebp
c00106e7:	e8 94 00 ff ff       	call   c0000780 <strcmp>
c00106ec:	83 c4 10             	add    esp,0x10
c00106ef:	85 c0                	test   eax,eax
c00106f1:	75 0c                	jne    c00106ff <CPU::detectFeatures()+0x365>
c00106f3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00106fd:	eb 66                	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c00106ff:	50                   	push   eax
c0010700:	50                   	push   eax
c0010701:	68 7e 21 02 c0       	push   0xc002217e
c0010706:	55                   	push   ebp
c0010707:	e8 74 00 ff ff       	call   c0000780 <strcmp>
c001070c:	83 c4 10             	add    esp,0x10
c001070f:	85 c0                	test   eax,eax
c0010711:	75 0c                	jne    c001071f <CPU::detectFeatures()+0x385>
c0010713:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001071d:	eb 46                	jmp    c0010765 <CPU::detectFeatures()+0x3cb>
c001071f:	57                   	push   edi
c0010720:	57                   	push   edi
c0010721:	68 8b 21 02 c0       	push   0xc002218b
c0010726:	55                   	push   ebp
c0010727:	e8 54 00 ff ff       	call   c0000780 <strcmp>
c001072c:	83 c4 10             	add    esp,0x10
c001072f:	85 c0                	test   eax,eax
c0010731:	74 e0                	je     c0010713 <CPU::detectFeatures()+0x379>
c0010733:	56                   	push   esi
c0010734:	56                   	push   esi
c0010735:	68 98 21 02 c0       	push   0xc0022198
c001073a:	55                   	push   ebp
c001073b:	e8 40 00 ff ff       	call   c0000780 <strcmp>
c0010740:	83 c4 10             	add    esp,0x10
c0010743:	85 c0                	test   eax,eax
c0010745:	74 cc                	je     c0010713 <CPU::detectFeatures()+0x379>
c0010747:	51                   	push   ecx
c0010748:	51                   	push   ecx
c0010749:	68 a5 21 02 c0       	push   0xc00221a5
c001074e:	55                   	push   ebp
c001074f:	e8 2c 00 ff ff       	call   c0000780 <strcmp>
c0010754:	83 c4 10             	add    esp,0x10
c0010757:	85 c0                	test   eax,eax
c0010759:	74 b8                	je     c0010713 <CPU::detectFeatures()+0x379>
c001075b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010765:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001076a:	0f 86 be 00 00 00    	jbe    c001082e <CPU::detectFeatures()+0x494>
c0010770:	83 ec 0c             	sub    esp,0xc
c0010773:	68 80 00 00 00       	push   0x80
c0010778:	e8 31 fb ff ff       	call   c00102ae <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001077d:	83 e0 01             	and    eax,0x1
c0010780:	c1 e0 06             	shl    eax,0x6
c0010783:	89 c2                	mov    edx,eax
c0010785:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001078b:	83 e0 bf             	and    eax,0xffffffbf
c001078e:	09 d0                	or     eax,edx
c0010790:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010796:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001079d:	e8 0c fb ff ff       	call   c00102ae <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00107a2:	83 e0 01             	and    eax,0x1
c00107a5:	c1 e0 04             	shl    eax,0x4
c00107a8:	89 c2                	mov    edx,eax
c00107aa:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107b0:	83 e0 ef             	and    eax,0xffffffef
c00107b3:	09 d0                	or     eax,edx
c00107b5:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107bb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00107c2:	e8 e7 fa ff ff       	call   c00102ae <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00107c7:	89 c2                	mov    edx,eax
c00107c9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00107cf:	c1 e2 07             	shl    edx,0x7
c00107d2:	83 e0 7f             	and    eax,0x7f
c00107d5:	09 d0                	or     eax,edx
c00107d7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00107dd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00107e4:	e8 f3 fa ff ff       	call   c00102dc <CPU::cpuidCheckExtendedECX(unsigned int)>
c00107e9:	83 e0 01             	and    eax,0x1
c00107ec:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00107f3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107f9:	83 e0 f7             	and    eax,0xfffffff7
c00107fc:	09 d0                	or     eax,edx
c00107fe:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010804:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001080b:	e8 cc fa ff ff       	call   c00102dc <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010810:	83 c4 10             	add    esp,0x10
c0010813:	83 e0 01             	and    eax,0x1
c0010816:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001081d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010823:	83 e0 fb             	and    eax,0xfffffffb
c0010826:	09 d0                	or     eax,edx
c0010828:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001082e:	83 ec 0c             	sub    esp,0xc
c0010831:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010835:	50                   	push   eax
c0010836:	8d 44 24 28          	lea    eax,[esp+0x28]
c001083a:	50                   	push   eax
c001083b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001083f:	57                   	push   edi
c0010840:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010844:	56                   	push   esi
c0010845:	6a 01                	push   0x1
c0010847:	e8 82 f9 ff ff       	call   c00101ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001084c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010850:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010856:	89 c1                	mov    ecx,eax
c0010858:	83 e1 0f             	and    ecx,0xf
c001085b:	83 e2 f0             	and    edx,0xfffffff0
c001085e:	09 ca                	or     edx,ecx
c0010860:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010866:	89 c2                	mov    edx,eax
c0010868:	c1 ea 04             	shr    edx,0x4
c001086b:	83 e2 0f             	and    edx,0xf
c001086e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010872:	89 d1                	mov    ecx,edx
c0010874:	83 c4 20             	add    esp,0x20
c0010877:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001087d:	c1 e1 06             	shl    ecx,0x6
c0010880:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010886:	09 ca                	or     edx,ecx
c0010888:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001088f:	89 c2                	mov    edx,eax
c0010891:	c1 ea 08             	shr    edx,0x8
c0010894:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001089a:	83 e2 0f             	and    edx,0xf
c001089d:	89 d5                	mov    ebp,edx
c001089f:	83 e5 03             	and    ebp,0x3
c00108a2:	c1 e5 06             	shl    ebp,0x6
c00108a5:	83 e1 3f             	and    ecx,0x3f
c00108a8:	09 e9                	or     ecx,ebp
c00108aa:	89 d5                	mov    ebp,edx
c00108ac:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00108b2:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00108b8:	c1 ed 02             	shr    ebp,0x2
c00108bb:	83 e1 c0             	and    ecx,0xffffffc0
c00108be:	09 e9                	or     ecx,ebp
c00108c0:	89 c5                	mov    ebp,eax
c00108c2:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00108c8:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00108ce:	c1 ed 08             	shr    ebp,0x8
c00108d1:	83 e5 30             	and    ebp,0x30
c00108d4:	83 e1 cf             	and    ecx,0xffffffcf
c00108d7:	09 e9                	or     ecx,ebp
c00108d9:	83 fa 06             	cmp    edx,0x6
c00108dc:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00108e2:	74 05                	je     c00108e9 <CPU::detectFeatures()+0x54f>
c00108e4:	83 fa 0f             	cmp    edx,0xf
c00108e7:	75 64                	jne    c001094d <CPU::detectFeatures()+0x5b3>
c00108e9:	89 c1                	mov    ecx,eax
c00108eb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00108f1:	c1 e9 10             	shr    ecx,0x10
c00108f4:	c1 e1 04             	shl    ecx,0x4
c00108f7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00108fb:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010901:	0f b6 c9             	movzx  ecx,cl
c0010904:	c1 e1 06             	shl    ecx,0x6
c0010907:	09 e9                	or     ecx,ebp
c0010909:	83 fa 0f             	cmp    edx,0xf
c001090c:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010913:	75 38                	jne    c001094d <CPU::detectFeatures()+0x5b3>
c0010915:	c1 e8 14             	shr    eax,0x14
c0010918:	83 c0 0f             	add    eax,0xf
c001091b:	0f b6 c0             	movzx  eax,al
c001091e:	89 c2                	mov    edx,eax
c0010920:	c1 e8 02             	shr    eax,0x2
c0010923:	83 e2 03             	and    edx,0x3
c0010926:	89 d1                	mov    ecx,edx
c0010928:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001092e:	c1 e1 06             	shl    ecx,0x6
c0010931:	83 e2 3f             	and    edx,0x3f
c0010934:	09 ca                	or     edx,ecx
c0010936:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001093c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010942:	83 e2 c0             	and    edx,0xffffffc0
c0010945:	09 d0                	or     eax,edx
c0010947:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001094d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010953:	83 ec 0c             	sub    esp,0xc
c0010956:	83 c8 07             	or     eax,0x7
c0010959:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001095f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010963:	50                   	push   eax
c0010964:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010968:	55                   	push   ebp
c0010969:	57                   	push   edi
c001096a:	56                   	push   esi
c001096b:	68 00 00 00 80       	push   0x80000000
c0010970:	e8 59 f8 ff ff       	call   c00101ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010975:	83 c4 20             	add    esp,0x20
c0010978:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010980:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010984:	76 1e                	jbe    c00109a4 <CPU::detectFeatures()+0x60a>
c0010986:	83 ec 0c             	sub    esp,0xc
c0010989:	50                   	push   eax
c001098a:	55                   	push   ebp
c001098b:	57                   	push   edi
c001098c:	56                   	push   esi
c001098d:	68 01 00 00 80       	push   0x80000001
c0010992:	e8 37 f8 ff ff       	call   c00101ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010997:	83 c4 20             	add    esp,0x20
c001099a:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00109a4:	52                   	push   edx
c00109a5:	52                   	push   edx
c00109a6:	68 b1 21 02 c0       	push   0xc00221b1
c00109ab:	53                   	push   ebx
c00109ac:	e8 29 c1 ff ff       	call   c000cada <Device::setName(char const*)>
c00109b1:	83 c4 10             	add    esp,0x10
c00109b4:	eb 69                	jmp    c0010a1f <CPU::detectFeatures()+0x685>
c00109b6:	50                   	push   eax
c00109b7:	50                   	push   eax
c00109b8:	68 16 21 02 c0       	push   0xc0022116
c00109bd:	55                   	push   ebp
c00109be:	e8 8d fc fe ff       	call   c0000650 <strcpy>
c00109c3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00109cd:	e8 f1 f7 fe ff       	call   c00001c3 <is486>
c00109d2:	83 c4 10             	add    esp,0x10
c00109d5:	85 c0                	test   eax,eax
c00109d7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109dd:	74 1f                	je     c00109fe <CPU::detectFeatures()+0x664>
c00109df:	83 c8 07             	or     eax,0x7
c00109e2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109e8:	0f 20 c0             	mov    eax,cr0
c00109eb:	83 e0 14             	and    eax,0x14
c00109ee:	83 f8 04             	cmp    eax,0x4
c00109f1:	75 10                	jne    c0010a03 <CPU::detectFeatures()+0x669>
c00109f3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00109f9:	83 e0 fd             	and    eax,0xfffffffd
c00109fc:	eb 1b                	jmp    c0010a19 <CPU::detectFeatures()+0x67f>
c00109fe:	83 e0 f8             	and    eax,0xfffffff8
c0010a01:	eb df                	jmp    c00109e2 <CPU::detectFeatures()+0x648>
c0010a03:	e8 96 f7 fe ff       	call   c000019e <hasLegacyFPU>
c0010a08:	83 e0 01             	and    eax,0x1
c0010a0b:	8d 14 00             	lea    edx,[eax+eax*1]
c0010a0e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a14:	83 e0 fd             	and    eax,0xfffffffd
c0010a17:	09 d0                	or     eax,edx
c0010a19:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010a1f:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010a26:	74 17                	je     c0010a3f <CPU::detectFeatures()+0x6a5>
c0010a28:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010a2e:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010a34:	83 c8 10             	or     eax,0x10
c0010a37:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010a3d:	eb 20                	jmp    c0010a5f <CPU::detectFeatures()+0x6c5>
c0010a3f:	e8 5a f7 fe ff       	call   c000019e <hasLegacyFPU>
c0010a44:	83 e0 01             	and    eax,0x1
c0010a47:	8d 14 00             	lea    edx,[eax+eax*1]
c0010a4a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a50:	83 e0 fd             	and    eax,0xfffffffd
c0010a53:	09 d0                	or     eax,edx
c0010a55:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010a5b:	a8 02                	test   al,0x2
c0010a5d:	75 c9                	jne    c0010a28 <CPU::detectFeatures()+0x68e>
c0010a5f:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010a66:	83 c4 2c             	add    esp,0x2c
c0010a69:	5b                   	pop    ebx
c0010a6a:	5e                   	pop    esi
c0010a6b:	5f                   	pop    edi
c0010a6c:	5d                   	pop    ebp
c0010a6d:	c3                   	ret    

c0010a6e <CPU::setupSMEP()>:
c0010a6e:	0f 20 e0             	mov    eax,cr4
c0010a71:	0d 00 00 10 00       	or     eax,0x100000
c0010a76:	0f 22 e0             	mov    cr4,eax
c0010a79:	c3                   	ret    

c0010a7a <CPU::setupUMIP()>:
c0010a7a:	0f 20 e0             	mov    eax,cr4
c0010a7d:	80 cc 08             	or     ah,0x8
c0010a80:	0f 22 e0             	mov    cr4,eax
c0010a83:	c3                   	ret    

c0010a84 <CPU::setupTSC()>:
c0010a84:	0f 20 e0             	mov    eax,cr4
c0010a87:	83 c8 04             	or     eax,0x4
c0010a8a:	0f 22 e0             	mov    cr4,eax
c0010a8d:	c3                   	ret    

c0010a8e <CPU::setupLargePages()>:
c0010a8e:	0f 20 e0             	mov    eax,cr4
c0010a91:	83 c8 10             	or     eax,0x10
c0010a94:	0f 22 e0             	mov    cr4,eax
c0010a97:	c3                   	ret    

c0010a98 <CPU::setupPAT()>:
c0010a98:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010a9d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010aa4:	74 2c                	je     c0010ad2 <CPU::setupPAT()+0x3a>
c0010aa6:	53                   	push   ebx
c0010aa7:	83 ec 10             	sub    esp,0x10
c0010aaa:	68 77 02 00 00       	push   0x277
c0010aaf:	50                   	push   eax
c0010ab0:	e8 2d 66 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010ab5:	83 e2 f8             	and    edx,0xfffffff8
c0010ab8:	83 ca 01             	or     edx,0x1
c0010abb:	52                   	push   edx
c0010abc:	50                   	push   eax
c0010abd:	68 77 02 00 00       	push   0x277
c0010ac2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010ac8:	e8 41 66 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010acd:	83 c4 28             	add    esp,0x28
c0010ad0:	5b                   	pop    ebx
c0010ad1:	c3                   	ret    
c0010ad2:	c3                   	ret    
c0010ad3:	90                   	nop

c0010ad4 <CPU::setupMTRR()>:
c0010ad4:	c3                   	ret    
c0010ad5:	90                   	nop

c0010ad6 <CPU::setupGlobalPages()>:
c0010ad6:	0f 20 e0             	mov    eax,cr4
c0010ad9:	0c 80                	or     al,0x80
c0010adb:	0f 22 e0             	mov    cr4,eax
c0010ade:	c3                   	ret    
c0010adf:	90                   	nop

c0010ae0 <CPU::allowUsermodeDataAccess()>:
c0010ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ae4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010aeb:	74 03                	je     c0010af0 <CPU::allowUsermodeDataAccess()+0x10>
c0010aed:	0f 01 cb             	stac   
c0010af0:	c3                   	ret    
c0010af1:	90                   	nop

c0010af2 <CPU::prohibitUsermodeDataAccess()>:
c0010af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010af6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010afd:	74 03                	je     c0010b02 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010aff:	0f 01 ca             	clac   
c0010b02:	c3                   	ret    
c0010b03:	90                   	nop

c0010b04 <CPU::setupSMAP()>:
c0010b04:	0f 20 e0             	mov    eax,cr4
c0010b07:	0d 00 00 20 00       	or     eax,0x200000
c0010b0c:	0f 22 e0             	mov    cr4,eax
c0010b0f:	eb e1                	jmp    c0010af2 <CPU::prohibitUsermodeDataAccess()>
c0010b11:	90                   	nop

c0010b12 <CPU::setupFeatures()>:
c0010b12:	53                   	push   ebx
c0010b13:	83 ec 08             	sub    esp,0x8
c0010b16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b1a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010b21:	74 18                	je     c0010b3b <CPU::setupFeatures()+0x29>
c0010b23:	83 ec 0c             	sub    esp,0xc
c0010b26:	68 bd 21 02 c0       	push   0xc00221bd
c0010b2b:	e8 da 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b33:	e8 42 ff ff ff       	call   c0010a7a <CPU::setupUMIP()>
c0010b38:	83 c4 10             	add    esp,0x10
c0010b3b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010b42:	74 18                	je     c0010b5c <CPU::setupFeatures()+0x4a>
c0010b44:	83 ec 0c             	sub    esp,0xc
c0010b47:	68 c7 21 02 c0       	push   0xc00221c7
c0010b4c:	e8 b9 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b54:	e8 2b ff ff ff       	call   c0010a84 <CPU::setupTSC()>
c0010b59:	83 c4 10             	add    esp,0x10
c0010b5c:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010b63:	74 18                	je     c0010b7d <CPU::setupFeatures()+0x6b>
c0010b65:	83 ec 0c             	sub    esp,0xc
c0010b68:	68 d0 21 02 c0       	push   0xc00221d0
c0010b6d:	e8 98 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b75:	e8 14 ff ff ff       	call   c0010a8e <CPU::setupLargePages()>
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010b84:	74 18                	je     c0010b9e <CPU::setupFeatures()+0x8c>
c0010b86:	83 ec 0c             	sub    esp,0xc
c0010b89:	68 d9 21 02 c0       	push   0xc00221d9
c0010b8e:	e8 77 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b96:	e8 3b ff ff ff       	call   c0010ad6 <CPU::setupGlobalPages()>
c0010b9b:	83 c4 10             	add    esp,0x10
c0010b9e:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010ba5:	74 18                	je     c0010bbf <CPU::setupFeatures()+0xad>
c0010ba7:	83 ec 0c             	sub    esp,0xc
c0010baa:	68 eb 21 02 c0       	push   0xc00221eb
c0010baf:	e8 56 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010bb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bb7:	e8 dc fe ff ff       	call   c0010a98 <CPU::setupPAT()>
c0010bbc:	83 c4 10             	add    esp,0x10
c0010bbf:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010bc6:	74 11                	je     c0010bd9 <CPU::setupFeatures()+0xc7>
c0010bc8:	c7 44 24 10 f4 21 02 c0 	mov    DWORD PTR [esp+0x10],0xc00221f4
c0010bd0:	83 c4 08             	add    esp,0x8
c0010bd3:	5b                   	pop    ebx
c0010bd4:	e9 31 9d ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010bd9:	83 c4 08             	add    esp,0x8
c0010bdc:	5b                   	pop    ebx
c0010bdd:	c3                   	ret    

c0010bde <CPU::open(int, int, void*)>:
c0010bde:	55                   	push   ebp
c0010bdf:	57                   	push   edi
c0010be0:	56                   	push   esi
c0010be1:	53                   	push   ebx
c0010be2:	83 ec 18             	sub    esp,0x18
c0010be5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010be9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010bed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010bf1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010bf7:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010bfd:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010c03:	50                   	push   eax
c0010c04:	e8 d5 67 ff ff       	call   c00073de <GDT::setup()>
c0010c09:	83 c4 0c             	add    esp,0xc
c0010c0c:	6a 00                	push   0x0
c0010c0e:	68 ef be ad de       	push   0xdeadbeef
c0010c13:	55                   	push   ebp
c0010c14:	e8 57 83 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010c19:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010c1c:	e8 2f 83 ff ff       	call   c0008f50 <TSS::flush()>
c0010c21:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010c27:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c2a:	e8 13 6a ff ff       	call   c0007642 <IDT::setup()>
c0010c2f:	b8 00 04 00 00       	mov    eax,0x400
c0010c34:	0f 23 f8             	mov    db7,eax
c0010c37:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010c41:	e8 9c 71 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010c46:	83 c4 10             	add    esp,0x10
c0010c49:	85 f6                	test   esi,esi
c0010c4b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010c51:	89 38                	mov    DWORD PTR [eax],edi
c0010c53:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010c59:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010c5c:	74 10                	je     c0010c6e <CPU::open(int, int, void*)+0x90>
c0010c5e:	50                   	push   eax
c0010c5f:	50                   	push   eax
c0010c60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010c66:	56                   	push   esi
c0010c67:	e8 20 8c ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010c6c:	eb 0d                	jmp    c0010c7b <CPU::open(int, int, void*)+0x9d>
c0010c6e:	83 ec 0c             	sub    esp,0xc
c0010c71:	68 fe 21 02 c0       	push   0xc00221fe
c0010c76:	e8 9c 08 00 00       	call   c0011517 <KePanic(char const*)>
c0010c7b:	83 c4 10             	add    esp,0x10
c0010c7e:	83 ec 0c             	sub    esp,0xc
c0010c81:	68 0c 22 02 c0       	push   0xc002220c
c0010c86:	e8 8e 01 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c0010c8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c8e:	e8 07 f7 ff ff       	call   c001039a <CPU::detectFeatures()>
c0010c93:	c7 04 24 2f 22 02 c0 	mov    DWORD PTR [esp],0xc002222f
c0010c9a:	e8 7a 01 00 00       	call   c0010e19 <KeSetBootMessage(char const*)>
c0010c9f:	e8 1b 74 00 00       	call   c00180bf <HalInitialise()>
c0010ca4:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010ca9:	83 e0 10             	and    eax,0x10
c0010cac:	83 f8 01             	cmp    eax,0x1
c0010caf:	19 c0                	sbb    eax,eax
c0010cb1:	83 e0 46             	and    eax,0x46
c0010cb4:	83 c0 1e             	add    eax,0x1e
c0010cb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cba:	e8 c2 d6 ff ff       	call   c000e381 <setupTimer(int)>
c0010cbf:	83 c4 10             	add    esp,0x10
c0010cc2:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010cc9:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010ccf:	74 0c                	je     c0010cdd <CPU::open(int, int, void*)+0xff>
c0010cd1:	83 ec 0c             	sub    esp,0xc
c0010cd4:	53                   	push   ebx
c0010cd5:	e8 38 fe ff ff       	call   c0010b12 <CPU::setupFeatures()>
c0010cda:	83 c4 10             	add    esp,0x10
c0010cdd:	83 c4 0c             	add    esp,0xc
c0010ce0:	31 c0                	xor    eax,eax
c0010ce2:	5b                   	pop    ebx
c0010ce3:	5e                   	pop    esi
c0010ce4:	5f                   	pop    edi
c0010ce5:	5d                   	pop    ebp
c0010ce6:	c3                   	ret    

c0010ce7 <KeInitialiseAtexit()>:
c0010ce7:	83 ec 10             	sub    esp,0x10
c0010cea:	6a 60                	push   0x60
c0010cec:	6a 00                	push   0x0
c0010cee:	68 20 be 02 c0       	push   0xc002be20
c0010cf3:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010cfd:	e8 ee f7 fe ff       	call   c00004f0 <memset>
c0010d02:	83 c4 1c             	add    esp,0x1c
c0010d05:	c3                   	ret    

c0010d06 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010d06:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010d0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010d0f:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010d16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d1a:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010d21:	40                   	inc    eax
c0010d22:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010d27:	83 f8 17             	cmp    eax,0x17
c0010d2a:	7e 0d                	jle    c0010d39 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010d2c:	c7 44 24 04 70 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022270
c0010d34:	e9 de 07 00 00       	jmp    c0011517 <KePanic(char const*)>
c0010d39:	c3                   	ret    

c0010d3a <KeExecuteAtexit()>:
c0010d3a:	53                   	push   ebx
c0010d3b:	31 db                	xor    ebx,ebx
c0010d3d:	83 ec 08             	sub    esp,0x8
c0010d40:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010d46:	7e 50                	jle    c0010d98 <KeExecuteAtexit()+0x5e>
c0010d48:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010d4f:	85 c0                	test   eax,eax
c0010d51:	74 42                	je     c0010d95 <KeExecuteAtexit()+0x5b>
c0010d53:	51                   	push   ecx
c0010d54:	50                   	push   eax
c0010d55:	53                   	push   ebx
c0010d56:	68 89 22 02 c0       	push   0xc0022289
c0010d5b:	e8 aa 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010d60:	58                   	pop    eax
c0010d61:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010d68:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010d6f:	c7 04 24 ab 22 02 c0 	mov    DWORD PTR [esp],0xc00222ab
c0010d76:	e8 8f 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010d7b:	c7 04 24 0b 34 02 c0 	mov    DWORD PTR [esp],0xc002340b
c0010d82:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010d8d:	e8 78 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010d92:	83 c4 10             	add    esp,0x10
c0010d95:	43                   	inc    ebx
c0010d96:	eb a8                	jmp    c0010d40 <KeExecuteAtexit()+0x6>
c0010d98:	83 c4 08             	add    esp,0x8
c0010d9b:	5b                   	pop    ebx
c0010d9c:	c3                   	ret    

c0010d9d <KeDisplaySplashScreen()>:
c0010d9d:	55                   	push   ebp
c0010d9e:	bd 05 00 00 00       	mov    ebp,0x5
c0010da3:	57                   	push   edi
c0010da4:	bf 0a 00 00 00       	mov    edi,0xa
c0010da9:	56                   	push   esi
c0010daa:	31 f6                	xor    esi,esi
c0010dac:	53                   	push   ebx
c0010dad:	31 db                	xor    ebx,ebx
c0010daf:	83 ec 0c             	sub    esp,0xc
c0010db2:	0f b6 96 60 36 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc9a0]
c0010db9:	85 d2                	test   edx,edx
c0010dbb:	89 d0                	mov    eax,edx
c0010dbd:	74 52                	je     c0010e11 <KeDisplaySplashScreen()+0x74>
c0010dbf:	80 bb 96 36 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc96a],0xdb
c0010dc6:	75 13                	jne    c0010ddb <KeDisplaySplashScreen()+0x3e>
c0010dc8:	0f b6 8b 95 36 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc96b]
c0010dcf:	83 e1 fe             	and    ecx,0xfffffffe
c0010dd2:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010dd8:	75 01                	jne    c0010ddb <KeDisplaySplashScreen()+0x3e>
c0010dda:	47                   	inc    edi
c0010ddb:	83 fa 0d             	cmp    edx,0xd
c0010dde:	74 28                	je     c0010e08 <KeDisplaySplashScreen()+0x6b>
c0010de0:	83 fa 0a             	cmp    edx,0xa
c0010de3:	75 0a                	jne    c0010def <KeDisplaySplashScreen()+0x52>
c0010de5:	45                   	inc    ebp
c0010de6:	bf 0a 00 00 00       	mov    edi,0xa
c0010deb:	31 db                	xor    ebx,ebx
c0010ded:	eb 19                	jmp    c0010e08 <KeDisplaySplashScreen()+0x6b>
c0010def:	83 ec 0c             	sub    esp,0xc
c0010df2:	0f be c0             	movsx  eax,al
c0010df5:	55                   	push   ebp
c0010df6:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010df9:	43                   	inc    ebx
c0010dfa:	52                   	push   edx
c0010dfb:	6a 00                	push   0x0
c0010dfd:	6a 0e                	push   0xe
c0010dff:	50                   	push   eax
c0010e00:	e8 37 7f 00 00       	call   c0018d3c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010e05:	83 c4 20             	add    esp,0x20
c0010e08:	46                   	inc    esi
c0010e09:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010e0f:	75 a1                	jne    c0010db2 <KeDisplaySplashScreen()+0x15>
c0010e11:	83 c4 0c             	add    esp,0xc
c0010e14:	5b                   	pop    ebx
c0010e15:	5e                   	pop    esi
c0010e16:	5f                   	pop    edi
c0010e17:	5d                   	pop    ebp
c0010e18:	c3                   	ret    

c0010e19 <KeSetBootMessage(char const*)>:
c0010e19:	57                   	push   edi
c0010e1a:	56                   	push   esi
c0010e1b:	53                   	push   ebx
c0010e1c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010e22:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010e29:	68 9e 00 00 00       	push   0x9e
c0010e2e:	6a 00                	push   0x0
c0010e30:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010e34:	56                   	push   esi
c0010e35:	e8 b6 f6 fe ff       	call   c00004f0 <memset>
c0010e3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e3d:	e8 3e f7 fe ff       	call   c0000580 <strlen>
c0010e42:	ba 50 00 00 00       	mov    edx,0x50
c0010e47:	83 c4 10             	add    esp,0x10
c0010e4a:	31 c9                	xor    ecx,ecx
c0010e4c:	29 c2                	sub    edx,eax
c0010e4e:	83 e2 fe             	and    edx,0xfffffffe
c0010e51:	01 f2                	add    edx,esi
c0010e53:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010e58:	84 c0                	test   al,al
c0010e5a:	74 0a                	je     c0010e66 <KeSetBootMessage(char const*)+0x4d>
c0010e5c:	80 cc 0f             	or     ah,0xf
c0010e5f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010e63:	41                   	inc    ecx
c0010e64:	eb ed                	jmp    c0010e53 <KeSetBootMessage(char const*)+0x3a>
c0010e66:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010e6b:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010e70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e72:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010e78:	5b                   	pop    ebx
c0010e79:	5e                   	pop    esi
c0010e7a:	5f                   	pop    edi
c0010e7b:	c3                   	ret    

c0010e7c <Krnl::handlePowerButton()>:
c0010e7c:	83 ec 0c             	sub    esp,0xc
c0010e7f:	e8 ee 06 00 00       	call   c0011572 <KeHandlePowerButton()>
c0010e84:	90                   	nop
c0010e85:	83 c4 0c             	add    esp,0xc
c0010e88:	c3                   	ret    
c0010e89:	8d 76 00             	lea    esi,[esi+0x0]

c0010e8c <Krnl::handleSleepButton()>:
c0010e8c:	83 ec 0c             	sub    esp,0xc
c0010e8f:	e8 13 07 00 00       	call   c00115a7 <KeHandleSleepButton()>
c0010e94:	90                   	nop
c0010e95:	83 c4 0c             	add    esp,0xc
c0010e98:	c3                   	ret    

c0010e99 <KeCalculateCRC32(unsigned char*, int)>:
c0010e99:	53                   	push   ebx
c0010e9a:	83 c8 ff             	or     eax,0xffffffff
c0010e9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010ea1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010ea5:	01 cb                	add    ebx,ecx
c0010ea7:	39 d9                	cmp    ecx,ebx
c0010ea9:	74 15                	je     c0010ec0 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010eab:	41                   	inc    ecx
c0010eac:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010eaf:	31 c2                	xor    edx,eax
c0010eb1:	c1 e8 08             	shr    eax,0x8
c0010eb4:	0f b6 d2             	movzx  edx,dl
c0010eb7:	33 04 95 c0 37 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc840]
c0010ebe:	eb e7                	jmp    c0010ea7 <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010ec0:	5b                   	pop    ebx
c0010ec1:	f7 d0                	not    eax
c0010ec3:	c3                   	ret    

c0010ec4 <EnvVarContainer::getEnv(char const*)>:
c0010ec4:	57                   	push   edi
c0010ec5:	56                   	push   esi
c0010ec6:	53                   	push   ebx
c0010ec7:	31 db                	xor    ebx,ebx
c0010ec9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ecd:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010ecf:	7e 2b                	jle    c0010efc <EnvVarContainer::getEnv(char const*)+0x38>
c0010ed1:	50                   	push   eax
c0010ed2:	50                   	push   eax
c0010ed3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ed6:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010edd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010ee0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ee4:	e8 97 f8 fe ff       	call   c0000780 <strcmp>
c0010ee9:	83 c4 10             	add    esp,0x10
c0010eec:	85 c0                	test   eax,eax
c0010eee:	75 09                	jne    c0010ef9 <EnvVarContainer::getEnv(char const*)+0x35>
c0010ef0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ef3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010ef7:	eb 05                	jmp    c0010efe <EnvVarContainer::getEnv(char const*)+0x3a>
c0010ef9:	43                   	inc    ebx
c0010efa:	eb d1                	jmp    c0010ecd <EnvVarContainer::getEnv(char const*)+0x9>
c0010efc:	31 c0                	xor    eax,eax
c0010efe:	5b                   	pop    ebx
c0010eff:	5e                   	pop    esi
c0010f00:	5f                   	pop    edi
c0010f01:	c3                   	ret    

c0010f02 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010f02:	55                   	push   ebp
c0010f03:	57                   	push   edi
c0010f04:	56                   	push   esi
c0010f05:	53                   	push   ebx
c0010f06:	83 ec 28             	sub    esp,0x28
c0010f09:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010f0d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010f11:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010f15:	56                   	push   esi
c0010f16:	e8 65 f6 fe ff       	call   c0000580 <strlen>
c0010f1b:	40                   	inc    eax
c0010f1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f1f:	e8 af 6b ff ff       	call   c0007ad3 <malloc>
c0010f24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010f2b:	e8 50 f6 fe ff       	call   c0000580 <strlen>
c0010f30:	40                   	inc    eax
c0010f31:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f34:	e8 9a 6b ff ff       	call   c0007ad3 <malloc>
c0010f39:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f40:	e8 3b f6 fe ff       	call   c0000580 <strlen>
c0010f45:	83 c4 0c             	add    esp,0xc
c0010f48:	40                   	inc    eax
c0010f49:	50                   	push   eax
c0010f4a:	6a 00                	push   0x0
c0010f4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f50:	e8 9b f5 fe ff       	call   c00004f0 <memset>
c0010f55:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f58:	e8 23 f6 fe ff       	call   c0000580 <strlen>
c0010f5d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010f61:	8d 48 01             	lea    ecx,[eax+0x1]
c0010f64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f69:	89 de                	mov    esi,ebx
c0010f6b:	e8 10 f6 fe ff       	call   c0000580 <strlen>
c0010f70:	83 c4 0c             	add    esp,0xc
c0010f73:	40                   	inc    eax
c0010f74:	50                   	push   eax
c0010f75:	6a 00                	push   0x0
c0010f77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f7b:	e8 70 f5 fe ff       	call   c00004f0 <memset>
c0010f80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f83:	e8 f8 f5 fe ff       	call   c0000580 <strlen>
c0010f88:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010f8c:	8d 48 01             	lea    ecx,[eax+0x1]
c0010f8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f94:	40                   	inc    eax
c0010f95:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010f98:	c1 e0 03             	shl    eax,0x3
c0010f9b:	5a                   	pop    edx
c0010f9c:	59                   	pop    ecx
c0010f9d:	50                   	push   eax
c0010f9e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010fa1:	e8 19 6b ff ff       	call   c0007abf <realloc>
c0010fa6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010fa9:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010fad:	b9 08 00 00 00       	mov    ecx,0x8
c0010fb2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010fb5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010fb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fbb:	83 c4 2c             	add    esp,0x2c
c0010fbe:	5b                   	pop    ebx
c0010fbf:	5e                   	pop    esi
c0010fc0:	5f                   	pop    edi
c0010fc1:	5d                   	pop    ebp
c0010fc2:	c3                   	ret    
c0010fc3:	90                   	nop

c0010fc4 <EnvVarContainer::deleteEnv(char const*)>:
c0010fc4:	c3                   	ret    
c0010fc5:	90                   	nop

c0010fc6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010fc6:	55                   	push   ebp
c0010fc7:	57                   	push   edi
c0010fc8:	56                   	push   esi
c0010fc9:	53                   	push   ebx
c0010fca:	81 ec 38 01 00 00    	sub    esp,0x138
c0010fd0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010fd7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010fde:	68 14 01 00 00       	push   0x114
c0010fe3:	e8 eb 6a ff ff       	call   c0007ad3 <malloc>
c0010fe8:	83 c4 0c             	add    esp,0xc
c0010feb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010fee:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010ff5:	89 c3                	mov    ebx,eax
c0010ff7:	50                   	push   eax
c0010ff8:	e8 d3 aa ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c0010ffd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011000:	e8 ad ad ff ff       	call   c000bdb2 <File::exists()>
c0011005:	83 c4 10             	add    esp,0x10
c0011008:	84 c0                	test   al,al
c001100a:	75 31                	jne    c001103d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001100c:	50                   	push   eax
c001100d:	50                   	push   eax
c001100e:	6a 12                	push   0x12
c0011010:	53                   	push   ebx
c0011011:	e8 d8 aa ff ff       	call   c000baee <File::open(FileOpenMode)>
c0011016:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011018:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001101b:	89 34 24             	mov    DWORD PTR [esp],esi
c001101e:	e8 5d f5 fe ff       	call   c0000580 <strlen>
c0011023:	5a                   	pop    edx
c0011024:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011028:	52                   	push   edx
c0011029:	31 d2                	xor    edx,edx
c001102b:	56                   	push   esi
c001102c:	52                   	push   edx
c001102d:	50                   	push   eax
c001102e:	53                   	push   ebx
c001102f:	ff d7                	call   edi
c0011031:	83 c4 14             	add    esp,0x14
c0011034:	53                   	push   ebx
c0011035:	e8 12 ab ff ff       	call   c000bb4c <File::close()>
c001103a:	83 c4 10             	add    esp,0x10
c001103d:	56                   	push   esi
c001103e:	31 f6                	xor    esi,esi
c0011040:	68 00 01 00 00       	push   0x100
c0011045:	6a 00                	push   0x0
c0011047:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001104b:	50                   	push   eax
c001104c:	e8 9f f4 fe ff       	call   c00004f0 <memset>
c0011051:	5f                   	pop    edi
c0011052:	58                   	pop    eax
c0011053:	6a 01                	push   0x1
c0011055:	53                   	push   ebx
c0011056:	e8 93 aa ff ff       	call   c000baee <File::open(FileOpenMode)>
c001105b:	83 c4 10             	add    esp,0x10
c001105e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011066:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001106e:	83 ec 0c             	sub    esp,0xc
c0011071:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011075:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011077:	52                   	push   edx
c0011078:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c001107c:	51                   	push   ecx
c001107d:	6a 00                	push   0x0
c001107f:	6a 01                	push   0x1
c0011081:	53                   	push   ebx
c0011082:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011085:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001108a:	83 c4 20             	add    esp,0x20
c001108d:	85 c0                	test   eax,eax
c001108f:	89 c1                	mov    ecx,eax
c0011091:	0f 84 36 01 00 00    	je     c00111cd <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0011097:	83 f8 0d             	cmp    eax,0xd
c001109a:	0f 84 22 01 00 00    	je     c00111c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00110a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00110a5:	0f 84 f0 00 00 00    	je     c001119b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00110ab:	83 f8 0a             	cmp    eax,0xa
c00110ae:	74 13                	je     c00110c3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00110b0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00110b5:	74 0c                	je     c00110c3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00110b7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00110bd:	0f 8e f6 00 00 00    	jle    c00111b9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00110c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110c7:	83 ec 0c             	sub    esp,0xc
c00110ca:	8d 78 01             	lea    edi,[eax+0x1]
c00110cd:	57                   	push   edi
c00110ce:	e8 00 6a ff ff       	call   c0007ad3 <malloc>
c00110d3:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00110d7:	8d 56 04             	lea    edx,[esi+0x4]
c00110da:	89 14 24             	mov    DWORD PTR [esp],edx
c00110dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00110e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00110e5:	e8 e9 69 ff ff       	call   c0007ad3 <malloc>
c00110ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00110ee:	83 c4 0c             	add    esp,0xc
c00110f1:	57                   	push   edi
c00110f2:	6a 00                	push   0x0
c00110f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00110f8:	e8 f3 f3 fe ff       	call   c00004f0 <memset>
c00110fd:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011101:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011105:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011109:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001110b:	83 c4 0c             	add    esp,0xc
c001110e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011112:	52                   	push   edx
c0011113:	6a 00                	push   0x0
c0011115:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011119:	e8 d2 f3 fe ff       	call   c00004f0 <memset>
c001111e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011122:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0011126:	89 34 24             	mov    DWORD PTR [esp],esi
c0011129:	e8 52 f4 fe ff       	call   c0000580 <strlen>
c001112e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011132:	89 c1                	mov    ecx,eax
c0011134:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011136:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011139:	83 c4 10             	add    esp,0x10
c001113c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001113f:	40                   	inc    eax
c0011140:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011143:	85 d2                	test   edx,edx
c0011145:	75 0c                	jne    c0011153 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0011147:	83 ec 0c             	sub    esp,0xc
c001114a:	6a 08                	push   0x8
c001114c:	e8 82 69 ff ff       	call   c0007ad3 <malloc>
c0011151:	eb 0c                	jmp    c001115f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011153:	51                   	push   ecx
c0011154:	51                   	push   ecx
c0011155:	c1 e0 03             	shl    eax,0x3
c0011158:	50                   	push   eax
c0011159:	52                   	push   edx
c001115a:	e8 60 69 ff ff       	call   c0007abf <realloc>
c001115f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011162:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011165:	83 c4 10             	add    esp,0x10
c0011168:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001116b:	8d 74 24 18          	lea    esi,[esp+0x18]
c001116f:	b9 08 00 00 00       	mov    ecx,0x8
c0011174:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011178:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001117a:	50                   	push   eax
c001117b:	31 f6                	xor    esi,esi
c001117d:	68 00 01 00 00       	push   0x100
c0011182:	6a 00                	push   0x0
c0011184:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011188:	50                   	push   eax
c0011189:	e8 62 f3 fe ff       	call   c00004f0 <memset>
c001118e:	83 c4 10             	add    esp,0x10
c0011191:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011199:	eb 27                	jmp    c00111c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001119b:	83 f8 3d             	cmp    eax,0x3d
c001119e:	74 1e                	je     c00111be <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00111a0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00111a6:	7f 07                	jg     c00111af <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00111a8:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c00111ac:	46                   	inc    esi
c00111ad:	eb 13                	jmp    c00111c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111af:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00111b7:	eb 09                	jmp    c00111c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111b9:	83 f8 3d             	cmp    eax,0x3d
c00111bc:	75 ea                	jne    c00111a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00111be:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00111c2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00111c7:	0f 85 99 fe ff ff    	jne    c0011066 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00111cd:	83 ec 0c             	sub    esp,0xc
c00111d0:	53                   	push   ebx
c00111d1:	e8 76 a9 ff ff       	call   c000bb4c <File::close()>
c00111d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00111de:	81 c4 3c 01 00 00    	add    esp,0x13c
c00111e4:	5b                   	pop    ebx
c00111e5:	5e                   	pop    esi
c00111e6:	5f                   	pop    edi
c00111e7:	5d                   	pop    ebp
c00111e8:	c3                   	ret    
c00111e9:	90                   	nop

c00111ea <EnvVarContainer::__loadSystem()>:
c00111ea:	83 ec 10             	sub    esp,0x10
c00111ed:	68 c0 3b 02 c0       	push   0xc0023bc0
c00111f2:	68 b0 22 02 c0       	push   0xc00222b0
c00111f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111fb:	e8 c6 fd ff ff       	call   c0010fc6 <EnvVarContainer::loadFrom(char const*, char const*)>
c0011200:	83 c4 1c             	add    esp,0x1c
c0011203:	c3                   	ret    

c0011204 <EnvVarContainer::__loadUser()>:
c0011204:	c3                   	ret    
c0011205:	90                   	nop

c0011206 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001120a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011214:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011218:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001121b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001121f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011226:	90                   	nop
c0011227:	c3                   	ret    

c0011228 <EnvVarContainer::~EnvVarContainer()>:
c0011228:	83 ec 0c             	sub    esp,0xc
c001122b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011232:	85 c0                	test   eax,eax
c0011234:	74 1d                	je     c0011253 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123a:	8b 00                	mov    eax,DWORD PTR [eax]
c001123c:	85 c0                	test   eax,eax
c001123e:	74 13                	je     c0011253 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011244:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011247:	83 ec 0c             	sub    esp,0xc
c001124a:	50                   	push   eax
c001124b:	e8 93 68 ff ff       	call   c0007ae3 <free>
c0011250:	83 c4 10             	add    esp,0x10
c0011253:	90                   	nop
c0011254:	83 c4 0c             	add    esp,0xc
c0011257:	c3                   	ret    

c0011258 <KeGetEnv(Process*, char const*)>:
c0011258:	53                   	push   ebx
c0011259:	83 ec 08             	sub    esp,0x8
c001125c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011260:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c0011266:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001126a:	74 04                	je     c0011270 <KeGetEnv(Process*, char const*)+0x18>
c001126c:	85 c0                	test   eax,eax
c001126e:	75 0b                	jne    c001127b <KeGetEnv(Process*, char const*)+0x23>
c0011270:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011275:	85 c0                	test   eax,eax
c0011277:	75 19                	jne    c0011292 <KeGetEnv(Process*, char const*)+0x3a>
c0011279:	eb 27                	jmp    c00112a2 <KeGetEnv(Process*, char const*)+0x4a>
c001127b:	52                   	push   edx
c001127c:	52                   	push   edx
c001127d:	53                   	push   ebx
c001127e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011284:	e8 3b fc ff ff       	call   c0010ec4 <EnvVarContainer::getEnv(char const*)>
c0011289:	83 c4 10             	add    esp,0x10
c001128c:	85 c0                	test   eax,eax
c001128e:	75 28                	jne    c00112b8 <KeGetEnv(Process*, char const*)+0x60>
c0011290:	eb de                	jmp    c0011270 <KeGetEnv(Process*, char const*)+0x18>
c0011292:	52                   	push   edx
c0011293:	52                   	push   edx
c0011294:	53                   	push   ebx
c0011295:	50                   	push   eax
c0011296:	e8 29 fc ff ff       	call   c0010ec4 <EnvVarContainer::getEnv(char const*)>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	85 c0                	test   eax,eax
c00112a0:	75 16                	jne    c00112b8 <KeGetEnv(Process*, char const*)+0x60>
c00112a2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00112a6:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00112ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00112af:	83 c4 08             	add    esp,0x8
c00112b2:	5b                   	pop    ebx
c00112b3:	e9 0c fc ff ff       	jmp    c0010ec4 <EnvVarContainer::getEnv(char const*)>
c00112b8:	83 c4 08             	add    esp,0x8
c00112bb:	5b                   	pop    ebx
c00112bc:	c3                   	ret    

c00112bd <KeSetEnvSystem(char const*, char const*)>:
c00112bd:	83 ec 10             	sub    esp,0x10
c00112c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112c8:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00112ce:	e8 2f fc ff ff       	call   c0010f02 <EnvVarContainer::setEnv(char const*, char const*)>
c00112d3:	83 c4 1c             	add    esp,0x1c
c00112d6:	c3                   	ret    

c00112d7 <KeSetEnvUser(char const*, char const*)>:
c00112d7:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00112dc:	85 c0                	test   eax,eax
c00112de:	74 15                	je     c00112f5 <KeSetEnvUser(char const*, char const*)+0x1e>
c00112e0:	83 ec 10             	sub    esp,0x10
c00112e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112eb:	50                   	push   eax
c00112ec:	e8 11 fc ff ff       	call   c0010f02 <EnvVarContainer::setEnv(char const*, char const*)>
c00112f1:	83 c4 1c             	add    esp,0x1c
c00112f4:	c3                   	ret    
c00112f5:	c3                   	ret    

c00112f6 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00112f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112fa:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011300:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011304:	e9 f9 fb ff ff       	jmp    c0010f02 <EnvVarContainer::setEnv(char const*, char const*)>

c0011309 <KeDeleteEnvSystem(char const*)>:
c0011309:	c3                   	ret    

c001130a <KeDeleteEnvUser(char const*)>:
c001130a:	c3                   	ret    

c001130b <KeDeleteEnvProcess(Process*, char const*)>:
c001130b:	c3                   	ret    

c001130c <KeNewProcessEnv(Process*)>:
c001130c:	83 ec 28             	sub    esp,0x28
c001130f:	6a 0c                	push   0xc
c0011311:	e8 bd 67 ff ff       	call   c0007ad3 <malloc>
c0011316:	5a                   	pop    edx
c0011317:	59                   	pop    ecx
c0011318:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001131c:	50                   	push   eax
c001131d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011321:	e8 e0 fe ff ff       	call   c0011206 <EnvVarContainer::EnvVarContainer(Process*)>
c0011326:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001132a:	83 c4 2c             	add    esp,0x2c
c001132d:	c3                   	ret    

c001132e <KeCopyProcessEnv(Process*, Process*)>:
c001132e:	57                   	push   edi
c001132f:	56                   	push   esi
c0011330:	53                   	push   ebx
c0011331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011335:	83 ec 0c             	sub    esp,0xc
c0011338:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001133e:	6a 0c                	push   0xc
c0011340:	e8 8e 67 ff ff       	call   c0007ad3 <malloc>
c0011345:	89 c3                	mov    ebx,eax
c0011347:	58                   	pop    eax
c0011348:	5a                   	pop    edx
c0011349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001134d:	53                   	push   ebx
c001134e:	e8 b3 fe ff ff       	call   c0011206 <EnvVarContainer::EnvVarContainer(Process*)>
c0011353:	8b 07                	mov    eax,DWORD PTR [edi]
c0011355:	89 03                	mov    DWORD PTR [ebx],eax
c0011357:	c1 e0 03             	shl    eax,0x3
c001135a:	89 04 24             	mov    DWORD PTR [esp],eax
c001135d:	e8 71 67 ff ff       	call   c0007ad3 <malloc>
c0011362:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011365:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011367:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001136a:	89 c7                	mov    edi,eax
c001136c:	c1 e1 03             	shl    ecx,0x3
c001136f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011371:	83 c4 10             	add    esp,0x10
c0011374:	89 d8                	mov    eax,ebx
c0011376:	5b                   	pop    ebx
c0011377:	5e                   	pop    esi
c0011378:	5f                   	pop    edi
c0011379:	c3                   	ret    

c001137a <KeLoadSystemEnv()>:
c001137a:	53                   	push   ebx
c001137b:	83 ec 14             	sub    esp,0x14
c001137e:	6a 0c                	push   0xc
c0011380:	e8 4e 67 ff ff       	call   c0007ad3 <malloc>
c0011385:	89 c3                	mov    ebx,eax
c0011387:	58                   	pop    eax
c0011388:	5a                   	pop    edx
c0011389:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001138f:	53                   	push   ebx
c0011390:	e8 71 fe ff ff       	call   c0011206 <EnvVarContainer::EnvVarContainer(Process*)>
c0011395:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011398:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c001139e:	e8 47 fe ff ff       	call   c00111ea <EnvVarContainer::__loadSystem()>
c00113a3:	83 c4 18             	add    esp,0x18
c00113a6:	5b                   	pop    ebx
c00113a7:	c3                   	ret    

c00113a8 <KeLoadUserEnv()>:
c00113a8:	53                   	push   ebx
c00113a9:	83 ec 14             	sub    esp,0x14
c00113ac:	6a 0c                	push   0xc
c00113ae:	e8 20 67 ff ff       	call   c0007ad3 <malloc>
c00113b3:	89 c3                	mov    ebx,eax
c00113b5:	58                   	pop    eax
c00113b6:	5a                   	pop    edx
c00113b7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00113bd:	53                   	push   ebx
c00113be:	e8 43 fe ff ff       	call   c0011206 <EnvVarContainer::EnvVarContainer(Process*)>
c00113c3:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00113c9:	83 c4 18             	add    esp,0x18
c00113cc:	5b                   	pop    ebx
c00113cd:	c3                   	ret    

c00113ce <KeFlushEnv()>:
c00113ce:	c3                   	ret    

c00113cf <KeGetProcessTotalEnvCount(Process*)>:
c00113cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113d3:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00113d9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00113df:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00113e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00113e6:	03 01                	add    eax,DWORD PTR [ecx]
c00113e8:	85 d2                	test   edx,edx
c00113ea:	74 02                	je     c00113ee <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00113ec:	03 02                	add    eax,DWORD PTR [edx]
c00113ee:	c3                   	ret    

c00113ef <KeGetProcessEnvPair(Process*, int)>:
c00113ef:	57                   	push   edi
c00113f0:	56                   	push   esi
c00113f1:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00113f7:	53                   	push   ebx
c00113f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00113fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011400:	85 f6                	test   esi,esi
c0011402:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011406:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001140c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001140e:	75 16                	jne    c0011426 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011410:	39 c2                	cmp    edx,eax
c0011412:	7c 16                	jl     c001142a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011414:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c001141a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001141c:	01 c6                	add    esi,eax
c001141e:	39 d6                	cmp    esi,edx
c0011420:	7e 3c                	jle    c001145e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011422:	29 c2                	sub    edx,eax
c0011424:	eb 04                	jmp    c001142a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011426:	39 c2                	cmp    edx,eax
c0011428:	7d 05                	jge    c001142f <KeGetProcessEnvPair(Process*, int)+0x40>
c001142a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001142d:	eb 20                	jmp    c001144f <KeGetProcessEnvPair(Process*, int)+0x60>
c001142f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011431:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011434:	39 d1                	cmp    ecx,edx
c0011436:	7e 04                	jle    c001143c <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011438:	29 c2                	sub    edx,eax
c001143a:	eb 10                	jmp    c001144c <KeGetProcessEnvPair(Process*, int)+0x5d>
c001143c:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011442:	03 0e                	add    ecx,DWORD PTR [esi]
c0011444:	39 d1                	cmp    ecx,edx
c0011446:	7e 16                	jle    c001145e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011448:	29 c2                	sub    edx,eax
c001144a:	29 fa                	sub    edx,edi
c001144c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001144f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011452:	8b 02                	mov    eax,DWORD PTR [edx]
c0011454:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011457:	89 03                	mov    DWORD PTR [ebx],eax
c0011459:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001145c:	eb 1d                	jmp    c001147b <KeGetProcessEnvPair(Process*, int)+0x8c>
c001145e:	83 ec 0c             	sub    esp,0xc
c0011461:	68 d2 22 02 c0       	push   0xc00222d2
c0011466:	e8 ac 00 00 00       	call   c0011517 <KePanic(char const*)>
c001146b:	83 c4 10             	add    esp,0x10
c001146e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011474:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001147b:	89 d8                	mov    eax,ebx
c001147d:	5b                   	pop    ebx
c001147e:	5e                   	pop    esi
c001147f:	5f                   	pop    edi
c0011480:	c2 04 00             	ret    0x4

c0011483 <CPU::current()>:
c0011483:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011488:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001148e:	c3                   	ret    

c001148f <operator new(unsigned long)>:
c001148f:	e9 3f 66 ff ff       	jmp    c0007ad3 <malloc>

c0011494 <operator delete(void*)>:
c0011494:	e9 5a 66 ff ff       	jmp    c0007af3 <rfree>

c0011499 <disableIRQs()>:
c0011499:	fa                   	cli    
c001149a:	c3                   	ret    

c001149b <enableIRQs()>:
c001149b:	fb                   	sti    
c001149c:	c3                   	ret    

c001149d <lockScheduler()>:
c001149d:	fa                   	cli    
c001149e:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00114a4:	c3                   	ret    

c00114a5 <unlockScheduler()>:
c00114a5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00114aa:	48                   	dec    eax
c00114ab:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00114b0:	75 01                	jne    c00114b3 <unlockScheduler()+0xe>
c00114b2:	fb                   	sti    
c00114b3:	c3                   	ret    

c00114b4 <lockStuff()>:
c00114b4:	fa                   	cli    
c00114b5:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00114bb:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00114c1:	c3                   	ret    

c00114c2 <unlockStuff()>:
c00114c2:	83 ec 0c             	sub    esp,0xc
c00114c5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00114ca:	48                   	dec    eax
c00114cb:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00114d0:	75 18                	jne    c00114ea <unlockStuff()+0x28>
c00114d2:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00114d9:	74 0f                	je     c00114ea <unlockStuff()+0x28>
c00114db:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00114e5:	e8 16 4b 00 00       	call   c0016000 <schedule()>
c00114ea:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00114ef:	48                   	dec    eax
c00114f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00114f5:	75 01                	jne    c00114f8 <unlockStuff()+0x36>
c00114f7:	fb                   	sti    
c00114f8:	83 c4 0c             	add    esp,0xc
c00114fb:	c3                   	ret    

c00114fc <Virt::getAKernelVAS()>:
c00114fc:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0011501:	c3                   	ret    

c0011502 <__not_memcpy>:
c0011502:	57                   	push   edi
c0011503:	56                   	push   esi
c0011504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001150c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011510:	89 c7                	mov    edi,eax
c0011512:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011514:	5e                   	pop    esi
c0011515:	5f                   	pop    edi
c0011516:	c3                   	ret    

c0011517 <KePanic(char const*)>:
c0011517:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c001151e:	e9 6d 6a 00 00       	jmp    c0017f90 <HalPanic(char const*)>

c0011523 <KePowerThread(void*)>:
c0011523:	83 ec 0c             	sub    esp,0xc
c0011526:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001152b:	48                   	dec    eax
c001152c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011531:	75 01                	jne    c0011534 <KePowerThread(void*)+0x11>
c0011533:	fb                   	sti    
c0011534:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001153b:	83 ec 0c             	sub    esp,0xc
c001153e:	6a 0a                	push   0xa
c0011540:	e8 eb 4d 00 00       	call   c0016330 <sleep(unsigned int)>
c0011545:	83 c4 10             	add    esp,0x10
c0011548:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c001154f:	eb e3                	jmp    c0011534 <KePowerThread(void*)+0x11>

c0011551 <KeChangePowerSettings(PowerSettings)>:
c0011551:	57                   	push   edi
c0011552:	b9 09 00 00 00       	mov    ecx,0x9
c0011557:	56                   	push   esi
c0011558:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c001155d:	fc                   	cld    
c001155e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011562:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011564:	5e                   	pop    esi
c0011565:	5f                   	pop    edi
c0011566:	c3                   	ret    

c0011567 <KeUserIOReceived()>:
c0011567:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011571:	c3                   	ret    

c0011572 <KeHandlePowerButton()>:
c0011572:	83 ec 0c             	sub    esp,0xc
c0011575:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001157a:	83 f8 02             	cmp    eax,0x2
c001157d:	75 10                	jne    c001158f <KeHandlePowerButton()+0x1d>
c001157f:	83 ec 0c             	sub    esp,0xc
c0011582:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011588:	e8 bd 5b ff ff       	call   c000714a <Computer::shutdown()>
c001158d:	eb 11                	jmp    c00115a0 <KeHandlePowerButton()+0x2e>
c001158f:	48                   	dec    eax
c0011590:	75 11                	jne    c00115a3 <KeHandlePowerButton()+0x31>
c0011592:	83 ec 0c             	sub    esp,0xc
c0011595:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001159b:	e8 da 5b ff ff       	call   c000717a <Computer::sleep()>
c00115a0:	83 c4 10             	add    esp,0x10
c00115a3:	83 c4 0c             	add    esp,0xc
c00115a6:	c3                   	ret    

c00115a7 <KeHandleSleepButton()>:
c00115a7:	83 ec 0c             	sub    esp,0xc
c00115aa:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00115af:	83 f8 02             	cmp    eax,0x2
c00115b2:	75 10                	jne    c00115c4 <KeHandleSleepButton()+0x1d>
c00115b4:	83 ec 0c             	sub    esp,0xc
c00115b7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00115bd:	e8 88 5b ff ff       	call   c000714a <Computer::shutdown()>
c00115c2:	eb 11                	jmp    c00115d5 <KeHandleSleepButton()+0x2e>
c00115c4:	48                   	dec    eax
c00115c5:	75 11                	jne    c00115d8 <KeHandleSleepButton()+0x31>
c00115c7:	83 ec 0c             	sub    esp,0xc
c00115ca:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00115d0:	e8 a5 5b ff ff       	call   c000717a <Computer::sleep()>
c00115d5:	83 c4 10             	add    esp,0x10
c00115d8:	83 c4 0c             	add    esp,0xc
c00115db:	c3                   	ret    

c00115dc <KeSetupPowerManager()>:
c00115dc:	83 ec 0c             	sub    esp,0xc
c00115df:	68 f0 00 00 00       	push   0xf0
c00115e4:	6a 00                	push   0x0
c00115e6:	68 23 15 01 c0       	push   0xc0011523
c00115eb:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00115f1:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00115fb:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011602:	e8 ad 47 00 00       	call   c0015db4 <Process::createThread(void (*)(void*), void*, int)>
c0011607:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011611:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c001161b:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011625:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c001162f:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011639:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011643:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c001164d:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c0011657:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011661:	83 c4 1c             	add    esp,0x1c
c0011664:	c3                   	ret    

c0011665 <KeRand()>:
c0011665:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c001166f:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011679:	53                   	push   ebx
c001167a:	01 c1                	add    ecx,eax
c001167c:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011681:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c0011687:	01 ca                	add    edx,ecx
c0011689:	05 ef 04 b5 00       	add    eax,0xb504ef
c001168e:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011693:	83 d2 00             	adc    edx,0x0
c0011696:	0f b7 da             	movzx  ebx,dx
c0011699:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c001169f:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00116a3:	5b                   	pop    ebx
c00116a4:	c3                   	ret    

c00116a5 <KeSeedRand(unsigned int)>:
c00116a5:	53                   	push   ebx
c00116a6:	83 ec 08             	sub    esp,0x8
c00116a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116ad:	e8 fd 6b 00 00       	call   c00182af <HalGetRand()>
c00116b2:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00116bc:	31 d8                	xor    eax,ebx
c00116be:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00116c3:	e8 9d ff ff ff       	call   c0011665 <KeRand()>
c00116c8:	83 c4 08             	add    esp,0x8
c00116cb:	5b                   	pop    ebx
c00116cc:	eb 97                	jmp    c0011665 <KeRand()>

c00116ce <KeInitRand()>:
c00116ce:	83 ec 0c             	sub    esp,0xc
c00116d1:	e8 ce 69 00 00       	call   c00180a4 <HalQueryPerformanceCounter()>
c00116d6:	0f 20 da             	mov    edx,cr3
c00116d9:	0f 22 da             	mov    cr3,edx
c00116dc:	0f 20 da             	mov    edx,cr3
c00116df:	0f 22 da             	mov    cr3,edx
c00116e2:	0f 20 da             	mov    edx,cr3
c00116e5:	0f 22 da             	mov    cr3,edx
c00116e8:	0f 20 da             	mov    edx,cr3
c00116eb:	0f 22 da             	mov    cr3,edx
c00116ee:	83 ec 0c             	sub    esp,0xc
c00116f1:	35 03 8a 95 38       	xor    eax,0x38958a03
c00116f6:	50                   	push   eax
c00116f7:	e8 a9 ff ff ff       	call   c00116a5 <KeSeedRand(unsigned int)>
c00116fc:	83 c4 1c             	add    esp,0x1c
c00116ff:	c3                   	ret    

c0011700 <KeResolveCompatibilitySymbol(char*)>:
c0011700:	83 ec 0c             	sub    esp,0xc
c0011703:	83 ec 08             	sub    esp,0x8
c0011706:	68 ec 22 02 c0       	push   0xc00222ec
c001170b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001170f:	e8 6c f0 fe ff       	call   c0000780 <strcmp>
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	85 c0                	test   eax,eax
c0011719:	0f 94 c0             	sete   al
c001171c:	0f b6 c0             	movzx  eax,al
c001171f:	85 c0                	test   eax,eax
c0011721:	74 0d                	je     c0011730 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011723:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011728:	e9 8b 01 00 00       	jmp    c00118b8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001172d:	8d 76 00             	lea    esi,[esi+0x0]
c0011730:	83 ec 08             	sub    esp,0x8
c0011733:	68 f5 22 02 c0       	push   0xc00222f5
c0011738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001173c:	e8 3f f0 fe ff       	call   c0000780 <strcmp>
c0011741:	83 c4 10             	add    esp,0x10
c0011744:	85 c0                	test   eax,eax
c0011746:	0f 94 c0             	sete   al
c0011749:	0f b6 c0             	movzx  eax,al
c001174c:	85 c0                	test   eax,eax
c001174e:	74 0c                	je     c001175c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011750:	b8 c0 f6 01 c0       	mov    eax,0xc001f6c0
c0011755:	e9 5e 01 00 00       	jmp    c00118b8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001175a:	66 90                	xchg   ax,ax
c001175c:	83 ec 08             	sub    esp,0x8
c001175f:	68 ff 22 02 c0       	push   0xc00222ff
c0011764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011768:	e8 13 f0 fe ff       	call   c0000780 <strcmp>
c001176d:	83 c4 10             	add    esp,0x10
c0011770:	85 c0                	test   eax,eax
c0011772:	0f 94 c0             	sete   al
c0011775:	0f b6 c0             	movzx  eax,al
c0011778:	85 c0                	test   eax,eax
c001177a:	74 0c                	je     c0011788 <KeResolveCompatibilitySymbol(char*)+0x88>
c001177c:	b8 f4 f3 01 c0       	mov    eax,0xc001f3f4
c0011781:	e9 32 01 00 00       	jmp    c00118b8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011786:	66 90                	xchg   ax,ax
c0011788:	83 ec 08             	sub    esp,0x8
c001178b:	68 08 23 02 c0       	push   0xc0022308
c0011790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011794:	e8 e7 ef fe ff       	call   c0000780 <strcmp>
c0011799:	83 c4 10             	add    esp,0x10
c001179c:	85 c0                	test   eax,eax
c001179e:	0f 94 c0             	sete   al
c00117a1:	0f b6 c0             	movzx  eax,al
c00117a4:	85 c0                	test   eax,eax
c00117a6:	74 0c                	je     c00117b4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00117a8:	b8 17 15 01 c0       	mov    eax,0xc0011517
c00117ad:	e9 06 01 00 00       	jmp    c00118b8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117b2:	66 90                	xchg   ax,ax
c00117b4:	83 ec 08             	sub    esp,0x8
c00117b7:	68 1b 23 02 c0       	push   0xc002231b
c00117bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117c0:	e8 bb ef fe ff       	call   c0000780 <strcmp>
c00117c5:	83 c4 10             	add    esp,0x10
c00117c8:	85 c0                	test   eax,eax
c00117ca:	0f 94 c0             	sete   al
c00117cd:	0f b6 c0             	movzx  eax,al
c00117d0:	85 c0                	test   eax,eax
c00117d2:	74 0c                	je     c00117e0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00117d4:	b8 19 0e 01 c0       	mov    eax,0xc0010e19
c00117d9:	e9 da 00 00 00       	jmp    c00118b8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117de:	66 90                	xchg   ax,ax
c00117e0:	83 ec 08             	sub    esp,0x8
c00117e3:	68 38 23 02 c0       	push   0xc0022338
c00117e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117ec:	e8 8f ef fe ff       	call   c0000780 <strcmp>
c00117f1:	83 c4 10             	add    esp,0x10
c00117f4:	85 c0                	test   eax,eax
c00117f6:	0f 94 c0             	sete   al
c00117f9:	0f b6 c0             	movzx  eax,al
c00117fc:	85 c0                	test   eax,eax
c00117fe:	74 0c                	je     c001180c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011800:	b8 c0 f7 01 c0       	mov    eax,0xc001f7c0
c0011805:	e9 ae 00 00 00       	jmp    c00118b8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001180a:	66 90                	xchg   ax,ax
c001180c:	83 ec 08             	sub    esp,0x8
c001180f:	68 42 23 02 c0       	push   0xc0022342
c0011814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011818:	e8 63 ef fe ff       	call   c0000780 <strcmp>
c001181d:	83 c4 10             	add    esp,0x10
c0011820:	85 c0                	test   eax,eax
c0011822:	0f 94 c0             	sete   al
c0011825:	0f b6 c0             	movzx  eax,al
c0011828:	85 c0                	test   eax,eax
c001182a:	74 0c                	je     c0011838 <KeResolveCompatibilitySymbol(char*)+0x138>
c001182c:	b8 40 f5 01 c0       	mov    eax,0xc001f540
c0011831:	e9 82 00 00 00       	jmp    c00118b8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011836:	66 90                	xchg   ax,ax
c0011838:	83 ec 08             	sub    esp,0x8
c001183b:	68 4b 23 02 c0       	push   0xc002234b
c0011840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011844:	e8 37 ef fe ff       	call   c0000780 <strcmp>
c0011849:	83 c4 10             	add    esp,0x10
c001184c:	85 c0                	test   eax,eax
c001184e:	0f 94 c0             	sete   al
c0011851:	0f b6 c0             	movzx  eax,al
c0011854:	85 c0                	test   eax,eax
c0011856:	74 08                	je     c0011860 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011858:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001185d:	eb 59                	jmp    c00118b8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001185f:	90                   	nop
c0011860:	83 ec 08             	sub    esp,0x8
c0011863:	68 63 23 02 c0       	push   0xc0022363
c0011868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001186c:	e8 0f ef fe ff       	call   c0000780 <strcmp>
c0011871:	83 c4 10             	add    esp,0x10
c0011874:	85 c0                	test   eax,eax
c0011876:	0f 94 c0             	sete   al
c0011879:	0f b6 c0             	movzx  eax,al
c001187c:	85 c0                	test   eax,eax
c001187e:	74 08                	je     c0011888 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011880:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011885:	eb 31                	jmp    c00118b8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011887:	90                   	nop
c0011888:	83 ec 08             	sub    esp,0x8
c001188b:	68 70 23 02 c0       	push   0xc0022370
c0011890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011894:	e8 e7 ee fe ff       	call   c0000780 <strcmp>
c0011899:	83 c4 10             	add    esp,0x10
c001189c:	85 c0                	test   eax,eax
c001189e:	0f 94 c0             	sete   al
c00118a1:	0f b6 c0             	movzx  eax,al
c00118a4:	85 c0                	test   eax,eax
c00118a6:	74 08                	je     c00118b0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00118a8:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c00118ad:	eb 09                	jmp    c00118b8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118af:	90                   	nop
c00118b0:	b8 00 00 00 00       	mov    eax,0x0
c00118b5:	8d 76 00             	lea    esi,[esi+0x0]
c00118b8:	83 c4 0c             	add    esp,0xc
c00118bb:	c3                   	ret    

c00118bc <KiSigKill(int)>:
c00118bc:	83 ec 0c             	sub    esp,0xc
c00118bf:	6a 00                	push   0x0
c00118c1:	6a 00                	push   0x0
c00118c3:	6a ff                	push   0xffffffff
c00118c5:	6a 01                	push   0x1
c00118c7:	e8 86 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00118cc:	83 c4 1c             	add    esp,0x1c
c00118cf:	c3                   	ret    

c00118d0 <KiDefaultSignalHandlerIgnore(int)>:
c00118d0:	c3                   	ret    

c00118d1 <KiDefaultSignalHandlerPause(int)>:
c00118d1:	57                   	push   edi
c00118d2:	b9 07 00 00 00       	mov    ecx,0x7
c00118d7:	56                   	push   esi
c00118d8:	be b9 23 02 c0       	mov    esi,0xc00223b9
c00118dd:	83 ec 24             	sub    esp,0x24
c00118e0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00118e4:	fc                   	cld    
c00118e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00118e7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00118eb:	50                   	push   eax
c00118ec:	6a 00                	push   0x0
c00118ee:	6a 00                	push   0x0
c00118f0:	6a 27                	push   0x27
c00118f2:	e8 5b 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00118f7:	83 c4 34             	add    esp,0x34
c00118fa:	5e                   	pop    esi
c00118fb:	5f                   	pop    edi
c00118fc:	c3                   	ret    

c00118fd <KiDefaultSignalHandlerResume(int)>:
c00118fd:	57                   	push   edi
c00118fe:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011903:	56                   	push   esi
c0011904:	be d5 23 02 c0       	mov    esi,0xc00223d5
c0011909:	83 ec 24             	sub    esp,0x24
c001190c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011910:	fc                   	cld    
c0011911:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011913:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011917:	50                   	push   eax
c0011918:	6a 00                	push   0x0
c001191a:	6a 00                	push   0x0
c001191c:	6a 27                	push   0x27
c001191e:	e8 2f 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011923:	83 c4 34             	add    esp,0x34
c0011926:	5e                   	pop    esi
c0011927:	5f                   	pop    edi
c0011928:	c3                   	ret    

c0011929 <KeDeinitSignals(SigHandlerBlock*)>:
c0011929:	e9 b5 61 ff ff       	jmp    c0007ae3 <free>

c001192e <KeInitSignals()>:
c001192e:	53                   	push   ebx
c001192f:	83 ec 14             	sub    esp,0x14
c0011932:	68 c8 00 00 00       	push   0xc8
c0011937:	e8 97 61 ff ff       	call   c0007ad3 <malloc>
c001193c:	83 c4 0c             	add    esp,0xc
c001193f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011949:	89 c3                	mov    ebx,eax
c001194b:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011955:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001195b:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c001195f:	6a 20                	push   0x20
c0011961:	6a 00                	push   0x0
c0011963:	50                   	push   eax
c0011964:	e8 87 eb fe ff       	call   c00004f0 <memset>
c0011969:	83 c4 0c             	add    esp,0xc
c001196c:	6a 44                	push   0x44
c001196e:	6a 00                	push   0x0
c0011970:	53                   	push   ebx
c0011971:	e8 7a eb fe ff       	call   c00004f0 <memset>
c0011976:	83 c4 18             	add    esp,0x18
c0011979:	89 d8                	mov    eax,ebx
c001197b:	5b                   	pop    ebx
c001197c:	c3                   	ret    

c001197d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c001197d:	53                   	push   ebx
c001197e:	b8 01 00 00 00       	mov    eax,0x1
c0011983:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011987:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001198b:	83 f9 10             	cmp    ecx,0x10
c001198e:	7f 21                	jg     c00119b1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011994:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011997:	89 03                	mov    DWORD PTR [ebx],eax
c0011999:	b8 01 00 00 00       	mov    eax,0x1
c001199e:	d3 e0                	shl    eax,cl
c00119a0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00119a4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00119a7:	31 c0                	xor    eax,eax
c00119a9:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00119b1:	5b                   	pop    ebx
c00119b2:	c3                   	ret    

c00119b3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c00119b3:	55                   	push   ebp
c00119b4:	57                   	push   edi
c00119b5:	bf 08 00 00 00       	mov    edi,0x8
c00119ba:	56                   	push   esi
c00119bb:	53                   	push   ebx
c00119bc:	83 ec 18             	sub    esp,0x18
c00119bf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00119c3:	68 f2 23 02 c0       	push   0xc00223f2
c00119c8:	e8 3d 8f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00119cd:	83 c4 10             	add    esp,0x10
c00119d0:	31 c9                	xor    ecx,ecx
c00119d2:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00119d9:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00119df:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00119e3:	99                   	cdq    
c00119e4:	f7 ff                	idiv   edi
c00119e6:	8d 42 24             	lea    eax,[edx+0x24]
c00119e9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00119ed:	85 f6                	test   esi,esi
c00119ef:	75 1a                	jne    c0011a0b <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00119f1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00119f5:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00119f9:	50                   	push   eax
c00119fa:	50                   	push   eax
c00119fb:	52                   	push   edx
c00119fc:	68 03 24 02 c0       	push   0xc0022403
c0011a01:	e8 04 8f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a06:	83 c4 10             	add    esp,0x10
c0011a09:	eb 1b                	jmp    c0011a26 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011a0b:	41                   	inc    ecx
c0011a0c:	83 f9 08             	cmp    ecx,0x8
c0011a0f:	75 ce                	jne    c00119df <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011a11:	83 ec 0c             	sub    esp,0xc
c0011a14:	be 01 00 00 00       	mov    esi,0x1
c0011a19:	68 24 24 02 c0       	push   0xc0022424
c0011a1e:	e8 e7 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a23:	83 c4 10             	add    esp,0x10
c0011a26:	83 c4 0c             	add    esp,0xc
c0011a29:	89 f0                	mov    eax,esi
c0011a2b:	5b                   	pop    ebx
c0011a2c:	5e                   	pop    esi
c0011a2d:	5f                   	pop    edi
c0011a2e:	5d                   	pop    ebp
c0011a2f:	c3                   	ret    

c0011a30 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011a30:	55                   	push   ebp
c0011a31:	57                   	push   edi
c0011a32:	56                   	push   esi
c0011a33:	53                   	push   ebx
c0011a34:	51                   	push   ecx
c0011a35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011a39:	85 db                	test   ebx,ebx
c0011a3b:	0f 84 bc 00 00 00    	je     c0011afd <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011a41:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011a48:	0f 84 af 00 00 00    	je     c0011afd <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011a4e:	31 c9                	xor    ecx,ecx
c0011a50:	bf 08 00 00 00       	mov    edi,0x8
c0011a55:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011a5b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011a5e:	99                   	cdq    
c0011a5f:	f7 ff                	idiv   edi
c0011a61:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011a68:	85 ed                	test   ebp,ebp
c0011a6a:	0f 84 9e 00 00 00    	je     c0011b0e <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011a70:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011a76:	89 e9                	mov    ecx,ebp
c0011a78:	bf 01 00 00 00       	mov    edi,0x1
c0011a7d:	d3 e7                	shl    edi,cl
c0011a7f:	31 c9                	xor    ecx,ecx
c0011a81:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a84:	b8 01 00 00 00       	mov    eax,0x1
c0011a89:	d3 e0                	shl    eax,cl
c0011a8b:	85 04 24             	test   DWORD PTR [esp],eax
c0011a8e:	74 06                	je     c0011a96 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011a90:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011a94:	75 67                	jne    c0011afd <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011a96:	41                   	inc    ecx
c0011a97:	83 f9 11             	cmp    ecx,0x11
c0011a9a:	75 e8                	jne    c0011a84 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011a9c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011a9f:	46                   	inc    esi
c0011aa0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011aa6:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011ab1:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011ab8:	09 f8                	or     eax,edi
c0011aba:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011ac0:	31 c0                	xor    eax,eax
c0011ac2:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011aca:	74 09                	je     c0011ad5 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011acc:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011ad3:	eb 06                	jmp    c0011adb <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011ad5:	40                   	inc    eax
c0011ad6:	83 f8 08             	cmp    eax,0x8
c0011ad9:	75 e7                	jne    c0011ac2 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011adb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011adf:	83 fd 09             	cmp    ebp,0x9
c0011ae2:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011ae5:	89 2a                	mov    DWORD PTR [edx],ebp
c0011ae7:	75 07                	jne    c0011af0 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011ae9:	b8 bc 18 01 c0       	mov    eax,0xc00118bc
c0011aee:	eb 31                	jmp    c0011b21 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011af0:	83 f8 01             	cmp    eax,0x1
c0011af3:	75 0c                	jne    c0011b01 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011af5:	f7 d7                	not    edi
c0011af7:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011afd:	31 c0                	xor    eax,eax
c0011aff:	eb 20                	jmp    c0011b21 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b01:	85 c0                	test   eax,eax
c0011b03:	75 1c                	jne    c0011b21 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b05:	8b 04 ad 20 3c 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc3e0]
c0011b0c:	eb 13                	jmp    c0011b21 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b0e:	41                   	inc    ecx
c0011b0f:	46                   	inc    esi
c0011b10:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b16:	83 f9 08             	cmp    ecx,0x8
c0011b19:	0f 85 36 ff ff ff    	jne    c0011a55 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011b1f:	eb dc                	jmp    c0011afd <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b21:	5a                   	pop    edx
c0011b22:	5b                   	pop    ebx
c0011b23:	5e                   	pop    esi
c0011b24:	5f                   	pop    edi
c0011b25:	5d                   	pop    ebp
c0011b26:	c3                   	ret    

c0011b27 <KiCheckSignalZ>:
c0011b27:	83 ec 10             	sub    esp,0x10
c0011b2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011b2e:	50                   	push   eax
c0011b2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b37:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011b3d:	e8 ee fe ff ff       	call   c0011a30 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011b42:	5a                   	pop    edx
c0011b43:	31 d2                	xor    edx,edx
c0011b45:	59                   	pop    ecx
c0011b46:	85 c0                	test   eax,eax
c0011b48:	74 19                	je     c0011b63 <KiCheckSignalZ+0x3c>
c0011b4a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b50:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011b53:	89 02                	mov    DWORD PTR [edx],eax
c0011b55:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b60:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011b63:	89 d0                	mov    eax,edx
c0011b65:	83 c4 10             	add    esp,0x10
c0011b68:	c3                   	ret    

c0011b69 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011b69:	56                   	push   esi
c0011b6a:	53                   	push   ebx
c0011b6b:	bb 01 00 00 00       	mov    ebx,0x1
c0011b70:	52                   	push   edx
c0011b71:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011b75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b79:	d3 e3                	shl    ebx,cl
c0011b7b:	83 f9 10             	cmp    ecx,0x10
c0011b7e:	7f 08                	jg     c0011b88 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011b80:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011b86:	75 10                	jne    c0011b98 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011b88:	83 ec 0c             	sub    esp,0xc
c0011b8b:	68 35 24 02 c0       	push   0xc0022435
c0011b90:	e8 82 f9 ff ff       	call   c0011517 <KePanic(char const*)>
c0011b95:	83 c4 10             	add    esp,0x10
c0011b98:	f7 d3                	not    ebx
c0011b9a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011ba0:	58                   	pop    eax
c0011ba1:	5b                   	pop    ebx
c0011ba2:	5e                   	pop    esi
c0011ba3:	c3                   	ret    

c0011ba4 <KiFinishSignalZ>:
c0011ba4:	53                   	push   ebx
c0011ba5:	83 ec 10             	sub    esp,0x10
c0011ba8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bac:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011baf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bb4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bb7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011bbd:	e8 a7 ff ff ff       	call   c0011b69 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011bc2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011bc8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011bcf:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011bd6:	83 c4 18             	add    esp,0x18
c0011bd9:	5b                   	pop    ebx
c0011bda:	c3                   	ret    

c0011bdb <SysSeekDir(regs*)>:
c0011bdb:	31 c0                	xor    eax,eax
c0011bdd:	31 d2                	xor    edx,edx
c0011bdf:	c3                   	ret    

c0011be0 <SysTellDir(regs*)>:
c0011be0:	31 c0                	xor    eax,eax
c0011be2:	31 d2                	xor    edx,edx
c0011be4:	c3                   	ret    

c0011be5 <SysVerify(regs*)>:
c0011be5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be9:	31 d2                	xor    edx,edx
c0011beb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bee:	c3                   	ret    

c0011bef <SysGetArgc(regs*)>:
c0011bef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bf4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bf7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011bfd:	89 c2                	mov    edx,eax
c0011bff:	c1 fa 1f             	sar    edx,0x1f
c0011c02:	c3                   	ret    

c0011c03 <SysTTYName(regs*)>:
c0011c03:	b8 01 00 00 00       	mov    eax,0x1
c0011c08:	31 d2                	xor    edx,edx
c0011c0a:	c3                   	ret    

c0011c0b <SysFormatDisk(regs*)>:
c0011c0b:	56                   	push   esi
c0011c0c:	53                   	push   ebx
c0011c0d:	83 ec 04             	sub    esp,0x4
c0011c10:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c14:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011c1a:	eb 2a                	jmp    c0011c46 <SysFormatDisk(regs*)+0x3b>
c0011c1c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011c1f:	83 ec 0c             	sub    esp,0xc
c0011c22:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011c25:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c27:	51                   	push   ecx
c0011c28:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011c2b:	51                   	push   ecx
c0011c2c:	50                   	push   eax
c0011c2d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011c34:	50                   	push   eax
c0011c35:	53                   	push   ebx
c0011c36:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011c39:	83 c4 20             	add    esp,0x20
c0011c3c:	83 f8 08             	cmp    eax,0x8
c0011c3f:	89 c1                	mov    ecx,eax
c0011c41:	75 14                	jne    c0011c57 <SysFormatDisk(regs*)+0x4c>
c0011c43:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011c46:	85 db                	test   ebx,ebx
c0011c48:	75 d2                	jne    c0011c1c <SysFormatDisk(regs*)+0x11>
c0011c4a:	b8 03 00 00 00       	mov    eax,0x3
c0011c4f:	31 d2                	xor    edx,edx
c0011c51:	83 c4 04             	add    esp,0x4
c0011c54:	5b                   	pop    ebx
c0011c55:	5e                   	pop    esi
c0011c56:	c3                   	ret    
c0011c57:	85 c0                	test   eax,eax
c0011c59:	74 13                	je     c0011c6e <SysFormatDisk(regs*)+0x63>
c0011c5b:	31 d2                	xor    edx,edx
c0011c5d:	83 f9 09             	cmp    ecx,0x9
c0011c60:	b8 01 00 00 00       	mov    eax,0x1
c0011c65:	74 ea                	je     c0011c51 <SysFormatDisk(regs*)+0x46>
c0011c67:	b8 02 00 00 00       	mov    eax,0x2
c0011c6c:	eb e1                	jmp    c0011c4f <SysFormatDisk(regs*)+0x44>
c0011c6e:	31 c0                	xor    eax,eax
c0011c70:	eb dd                	jmp    c0011c4f <SysFormatDisk(regs*)+0x44>

c0011c72 <SysSetDiskVolumeLabel(regs*)>:
c0011c72:	56                   	push   esi
c0011c73:	53                   	push   ebx
c0011c74:	83 ec 04             	sub    esp,0x4
c0011c77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011c7b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011c7e:	83 f8 19             	cmp    eax,0x19
c0011c81:	77 33                	ja     c0011cb6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011c83:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011c8a:	85 c9                	test   ecx,ecx
c0011c8c:	74 28                	je     c0011cb6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011c8e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011c91:	85 db                	test   ebx,ebx
c0011c93:	74 21                	je     c0011cb6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011c95:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011c9b:	85 d2                	test   edx,edx
c0011c9d:	74 17                	je     c0011cb6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011c9f:	8b 32                	mov    esi,DWORD PTR [edx]
c0011ca1:	53                   	push   ebx
c0011ca2:	50                   	push   eax
c0011ca3:	51                   	push   ecx
c0011ca4:	52                   	push   edx
c0011ca5:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011ca8:	83 c4 10             	add    esp,0x10
c0011cab:	83 c4 04             	add    esp,0x4
c0011cae:	5b                   	pop    ebx
c0011caf:	5e                   	pop    esi
c0011cb0:	89 c2                	mov    edx,eax
c0011cb2:	c1 fa 1f             	sar    edx,0x1f
c0011cb5:	c3                   	ret    
c0011cb6:	83 c4 04             	add    esp,0x4
c0011cb9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011cbe:	5b                   	pop    ebx
c0011cbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cc4:	5e                   	pop    esi
c0011cc5:	c3                   	ret    

c0011cc6 <SysGetDiskVolumeLabel(regs*)>:
c0011cc6:	57                   	push   edi
c0011cc7:	56                   	push   esi
c0011cc8:	53                   	push   ebx
c0011cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ccd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011cd0:	83 fa 19             	cmp    edx,0x19
c0011cd3:	77 3c                	ja     c0011d11 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011cd5:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011cdc:	85 c9                	test   ecx,ecx
c0011cde:	74 31                	je     c0011d11 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ce0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011ce3:	85 db                	test   ebx,ebx
c0011ce5:	74 2a                	je     c0011d11 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ce7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011cea:	85 f6                	test   esi,esi
c0011cec:	74 23                	je     c0011d11 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011cee:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011cf4:	85 c0                	test   eax,eax
c0011cf6:	74 19                	je     c0011d11 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011cf8:	83 ec 0c             	sub    esp,0xc
c0011cfb:	8b 38                	mov    edi,DWORD PTR [eax]
c0011cfd:	56                   	push   esi
c0011cfe:	53                   	push   ebx
c0011cff:	52                   	push   edx
c0011d00:	51                   	push   ecx
c0011d01:	50                   	push   eax
c0011d02:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011d05:	83 c4 20             	add    esp,0x20
c0011d08:	5b                   	pop    ebx
c0011d09:	5e                   	pop    esi
c0011d0a:	89 c2                	mov    edx,eax
c0011d0c:	c1 fa 1f             	sar    edx,0x1f
c0011d0f:	5f                   	pop    edi
c0011d10:	c3                   	ret    
c0011d11:	5b                   	pop    ebx
c0011d12:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d17:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d1c:	5e                   	pop    esi
c0011d1d:	5f                   	pop    edi
c0011d1e:	c3                   	ret    

c0011d1f <SysShutdown(regs*)>:
c0011d1f:	57                   	push   edi
c0011d20:	56                   	push   esi
c0011d21:	83 ec 04             	sub    esp,0x4
c0011d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d28:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d2b:	85 c0                	test   eax,eax
c0011d2d:	74 1e                	je     c0011d4d <SysShutdown(regs*)+0x2e>
c0011d2f:	83 f8 01             	cmp    eax,0x1
c0011d32:	74 5f                	je     c0011d93 <SysShutdown(regs*)+0x74>
c0011d34:	83 f8 02             	cmp    eax,0x2
c0011d37:	be ff ff ff ff       	mov    esi,0xffffffff
c0011d3c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011d41:	74 32                	je     c0011d75 <SysShutdown(regs*)+0x56>
c0011d43:	83 c4 04             	add    esp,0x4
c0011d46:	89 f0                	mov    eax,esi
c0011d48:	5e                   	pop    esi
c0011d49:	89 fa                	mov    edx,edi
c0011d4b:	5f                   	pop    edi
c0011d4c:	c3                   	ret    
c0011d4d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011d52:	be ff ff ff ff       	mov    esi,0xffffffff
c0011d57:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011d5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d5e:	6a 00                	push   0x0
c0011d60:	6a 00                	push   0x0
c0011d62:	6a 00                	push   0x0
c0011d64:	50                   	push   eax
c0011d65:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d68:	83 c4 10             	add    esp,0x10
c0011d6b:	89 f0                	mov    eax,esi
c0011d6d:	83 c4 04             	add    esp,0x4
c0011d70:	89 fa                	mov    edx,edi
c0011d72:	5e                   	pop    esi
c0011d73:	5f                   	pop    edi
c0011d74:	c3                   	ret    
c0011d75:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011d7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d7c:	6a 00                	push   0x0
c0011d7e:	6a 00                	push   0x0
c0011d80:	6a 01                	push   0x1
c0011d82:	50                   	push   eax
c0011d83:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d86:	83 c4 10             	add    esp,0x10
c0011d89:	89 f0                	mov    eax,esi
c0011d8b:	83 c4 04             	add    esp,0x4
c0011d8e:	89 fa                	mov    edx,edi
c0011d90:	5e                   	pop    esi
c0011d91:	5f                   	pop    edi
c0011d92:	c3                   	ret    
c0011d93:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011d98:	85 c0                	test   eax,eax
c0011d9a:	74 02                	je     c0011d9e <SysShutdown(regs*)+0x7f>
c0011d9c:	ff d0                	call   eax
c0011d9e:	31 f6                	xor    esi,esi
c0011da0:	83 c4 04             	add    esp,0x4
c0011da3:	89 f0                	mov    eax,esi
c0011da5:	31 ff                	xor    edi,edi
c0011da7:	5e                   	pop    esi
c0011da8:	89 fa                	mov    edx,edi
c0011daa:	5f                   	pop    edi
c0011dab:	c3                   	ret    

c0011dac <SysRealpath(regs*)>:
c0011dac:	53                   	push   ebx
c0011dad:	83 ec 08             	sub    esp,0x8
c0011db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011db7:	85 c9                	test   ecx,ecx
c0011db9:	74 36                	je     c0011df1 <SysRealpath(regs*)+0x45>
c0011dbb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011dbe:	31 d2                	xor    edx,edx
c0011dc0:	b8 01 00 00 00       	mov    eax,0x1
c0011dc5:	85 db                	test   ebx,ebx
c0011dc7:	75 05                	jne    c0011dce <SysRealpath(regs*)+0x22>
c0011dc9:	83 c4 08             	add    esp,0x8
c0011dcc:	5b                   	pop    ebx
c0011dcd:	c3                   	ret    
c0011dce:	6a 00                	push   0x0
c0011dd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dd5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dd8:	05 0c 01 00 00       	add    eax,0x10c
c0011ddd:	50                   	push   eax
c0011dde:	51                   	push   ecx
c0011ddf:	53                   	push   ebx
c0011de0:	e8 df 99 ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011de5:	83 c4 10             	add    esp,0x10
c0011de8:	31 c0                	xor    eax,eax
c0011dea:	31 d2                	xor    edx,edx
c0011dec:	83 c4 08             	add    esp,0x8
c0011def:	5b                   	pop    ebx
c0011df0:	c3                   	ret    
c0011df1:	b8 01 00 00 00       	mov    eax,0x1
c0011df6:	31 d2                	xor    edx,edx
c0011df8:	eb f2                	jmp    c0011dec <SysRealpath(regs*)+0x40>

c0011dfa <SysReadDir(regs*)>:
c0011dfa:	53                   	push   ebx
c0011dfb:	83 ec 18             	sub    esp,0x18
c0011dfe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e02:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e05:	83 f8 02             	cmp    eax,0x2
c0011e08:	76 4f                	jbe    c0011e59 <SysReadDir(regs*)+0x5f>
c0011e0a:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011e11:	77 52                	ja     c0011e65 <SysReadDir(regs*)+0x6b>
c0011e13:	83 ec 0c             	sub    esp,0xc
c0011e16:	50                   	push   eax
c0011e17:	e8 7f 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011e1c:	83 c4 10             	add    esp,0x10
c0011e1f:	85 c0                	test   eax,eax
c0011e21:	74 42                	je     c0011e65 <SysReadDir(regs*)+0x6b>
c0011e23:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e2b:	83 ec 0c             	sub    esp,0xc
c0011e2e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e32:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e34:	51                   	push   ecx
c0011e35:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e38:	51                   	push   ecx
c0011e39:	6a 00                	push   0x0
c0011e3b:	68 10 01 00 00       	push   0x110
c0011e40:	50                   	push   eax
c0011e41:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e44:	83 c4 20             	add    esp,0x20
c0011e47:	85 c0                	test   eax,eax
c0011e49:	89 c1                	mov    ecx,eax
c0011e4b:	74 27                	je     c0011e74 <SysReadDir(regs*)+0x7a>
c0011e4d:	31 d2                	xor    edx,edx
c0011e4f:	83 f9 07             	cmp    ecx,0x7
c0011e52:	b8 02 00 00 00       	mov    eax,0x2
c0011e57:	75 16                	jne    c0011e6f <SysReadDir(regs*)+0x75>
c0011e59:	b8 01 00 00 00       	mov    eax,0x1
c0011e5e:	31 d2                	xor    edx,edx
c0011e60:	83 c4 18             	add    esp,0x18
c0011e63:	5b                   	pop    ebx
c0011e64:	c3                   	ret    
c0011e65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e6f:	83 c4 18             	add    esp,0x18
c0011e72:	5b                   	pop    ebx
c0011e73:	c3                   	ret    
c0011e74:	31 c0                	xor    eax,eax
c0011e76:	31 d2                	xor    edx,edx
c0011e78:	eb e6                	jmp    c0011e60 <SysReadDir(regs*)+0x66>

c0011e7a <SysIsATTY(regs*)>:
c0011e7a:	83 ec 0c             	sub    esp,0xc
c0011e7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e81:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e84:	83 f8 02             	cmp    eax,0x2
c0011e87:	76 07                	jbe    c0011e90 <SysIsATTY(regs*)+0x16>
c0011e89:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011e8e:	75 26                	jne    c0011eb6 <SysIsATTY(regs*)+0x3c>
c0011e90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011e9e:	85 c0                	test   eax,eax
c0011ea0:	74 24                	je     c0011ec6 <SysIsATTY(regs*)+0x4c>
c0011ea2:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ea4:	83 ec 0c             	sub    esp,0xc
c0011ea7:	50                   	push   eax
c0011ea8:	ff 12                	call   DWORD PTR [edx]
c0011eaa:	83 c4 10             	add    esp,0x10
c0011ead:	31 d2                	xor    edx,edx
c0011eaf:	83 c4 0c             	add    esp,0xc
c0011eb2:	0f b6 c0             	movzx  eax,al
c0011eb5:	c3                   	ret    
c0011eb6:	83 ec 0c             	sub    esp,0xc
c0011eb9:	50                   	push   eax
c0011eba:	e8 dc 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ebf:	83 c4 10             	add    esp,0x10
c0011ec2:	85 c0                	test   eax,eax
c0011ec4:	75 dc                	jne    c0011ea2 <SysIsATTY(regs*)+0x28>
c0011ec6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ecb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ed0:	83 c4 0c             	add    esp,0xc
c0011ed3:	c3                   	ret    

c0011ed4 <SysSeek(regs*)>:
c0011ed4:	56                   	push   esi
c0011ed5:	53                   	push   ebx
c0011ed6:	83 ec 04             	sub    esp,0x4
c0011ed9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011edd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ee0:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011ee3:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011ee9:	77 33                	ja     c0011f1e <SysSeek(regs*)+0x4a>
c0011eeb:	83 ec 0c             	sub    esp,0xc
c0011eee:	51                   	push   ecx
c0011eef:	e8 a7 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ef4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011ef7:	83 c4 0c             	add    esp,0xc
c0011efa:	31 db                	xor    ebx,ebx
c0011efc:	53                   	push   ebx
c0011efd:	51                   	push   ecx
c0011efe:	50                   	push   eax
c0011eff:	e8 a8 9c ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0011f04:	83 c4 10             	add    esp,0x10
c0011f07:	85 c0                	test   eax,eax
c0011f09:	0f 95 c0             	setne  al
c0011f0c:	31 d2                	xor    edx,edx
c0011f0e:	0f b6 c0             	movzx  eax,al
c0011f11:	f7 d8                	neg    eax
c0011f13:	83 d2 00             	adc    edx,0x0
c0011f16:	83 c4 04             	add    esp,0x4
c0011f19:	5b                   	pop    ebx
c0011f1a:	f7 da                	neg    edx
c0011f1c:	5e                   	pop    esi
c0011f1d:	c3                   	ret    
c0011f1e:	83 c4 04             	add    esp,0x4
c0011f21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f26:	5b                   	pop    ebx
c0011f27:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f2c:	5e                   	pop    esi
c0011f2d:	c3                   	ret    

c0011f2e <SysTell(regs*)>:
c0011f2e:	53                   	push   ebx
c0011f2f:	83 ec 08             	sub    esp,0x8
c0011f32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f36:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f39:	83 f8 02             	cmp    eax,0x2
c0011f3c:	76 4e                	jbe    c0011f8c <SysTell(regs*)+0x5e>
c0011f3e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f43:	76 19                	jbe    c0011f5e <SysTell(regs*)+0x30>
c0011f45:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f48:	31 d2                	xor    edx,edx
c0011f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f57:	83 c4 08             	add    esp,0x8
c0011f5a:	31 c0                	xor    eax,eax
c0011f5c:	5b                   	pop    ebx
c0011f5d:	c3                   	ret    
c0011f5e:	83 ec 0c             	sub    esp,0xc
c0011f61:	50                   	push   eax
c0011f62:	e8 34 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f67:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011f6a:	5a                   	pop    edx
c0011f6b:	59                   	pop    ecx
c0011f6c:	53                   	push   ebx
c0011f6d:	50                   	push   eax
c0011f6e:	e8 e5 9c ff ff       	call   c000bc58 <File::tell(unsigned long long*)>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	85 c0                	test   eax,eax
c0011f78:	0f 95 c0             	setne  al
c0011f7b:	31 d2                	xor    edx,edx
c0011f7d:	0f b6 c0             	movzx  eax,al
c0011f80:	f7 d8                	neg    eax
c0011f82:	83 d2 00             	adc    edx,0x0
c0011f85:	83 c4 08             	add    esp,0x8
c0011f88:	5b                   	pop    ebx
c0011f89:	f7 da                	neg    edx
c0011f8b:	c3                   	ret    
c0011f8c:	83 c4 08             	add    esp,0x8
c0011f8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f94:	5b                   	pop    ebx
c0011f95:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f9a:	c3                   	ret    

c0011f9b <SysSize(regs*)>:
c0011f9b:	53                   	push   ebx
c0011f9c:	83 ec 18             	sub    esp,0x18
c0011f9f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fa3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fa6:	83 f8 02             	cmp    eax,0x2
c0011fa9:	76 54                	jbe    c0011fff <SysSize(regs*)+0x64>
c0011fab:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011fb0:	76 19                	jbe    c0011fcb <SysSize(regs*)+0x30>
c0011fb2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011fb5:	31 d2                	xor    edx,edx
c0011fb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011fbd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fc4:	83 c4 18             	add    esp,0x18
c0011fc7:	31 c0                	xor    eax,eax
c0011fc9:	5b                   	pop    ebx
c0011fca:	c3                   	ret    
c0011fcb:	83 ec 0c             	sub    esp,0xc
c0011fce:	50                   	push   eax
c0011fcf:	e8 c7 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011fd4:	83 c4 0c             	add    esp,0xc
c0011fd7:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011fdb:	52                   	push   edx
c0011fdc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011fdf:	52                   	push   edx
c0011fe0:	50                   	push   eax
c0011fe1:	e8 0a 9e ff ff       	call   c000bdf0 <File::stat(unsigned long long*, bool*)>
c0011fe6:	83 c4 10             	add    esp,0x10
c0011fe9:	85 c0                	test   eax,eax
c0011feb:	0f 95 c0             	setne  al
c0011fee:	31 d2                	xor    edx,edx
c0011ff0:	0f b6 c0             	movzx  eax,al
c0011ff3:	f7 d8                	neg    eax
c0011ff5:	83 d2 00             	adc    edx,0x0
c0011ff8:	83 c4 18             	add    esp,0x18
c0011ffb:	5b                   	pop    ebx
c0011ffc:	f7 da                	neg    edx
c0011ffe:	c3                   	ret    
c0011fff:	83 c4 18             	add    esp,0x18
c0012002:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012007:	5b                   	pop    ebx
c0012008:	ba ff ff ff ff       	mov    edx,0xffffffff
c001200d:	c3                   	ret    

c001200e <SysSizeFromFilename(regs*)>:
c001200e:	55                   	push   ebp
c001200f:	57                   	push   edi
c0012010:	56                   	push   esi
c0012011:	53                   	push   ebx
c0012012:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0012018:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001201f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012022:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012025:	85 f6                	test   esi,esi
c0012027:	89 f8                	mov    eax,edi
c0012029:	74 09                	je     c0012034 <SysSizeFromFilename(regs*)+0x26>
c001202b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012031:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012034:	83 f8 02             	cmp    eax,0x2
c0012037:	0f 86 ca 00 00 00    	jbe    c0012107 <SysSizeFromFilename(regs*)+0xf9>
c001203d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012042:	76 1f                	jbe    c0012063 <SysSizeFromFilename(regs*)+0x55>
c0012044:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012047:	31 d2                	xor    edx,edx
c0012049:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001204f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012056:	31 c0                	xor    eax,eax
c0012058:	81 c4 4c 02 00 00    	add    esp,0x24c
c001205e:	5b                   	pop    ebx
c001205f:	5e                   	pop    esi
c0012060:	5f                   	pop    edi
c0012061:	5d                   	pop    ebp
c0012062:	c3                   	ret    
c0012063:	83 ec 0c             	sub    esp,0xc
c0012066:	68 14 01 00 00       	push   0x114
c001206b:	e8 63 5a ff ff       	call   c0007ad3 <malloc>
c0012070:	6a 01                	push   0x1
c0012072:	89 c5                	mov    ebp,eax
c0012074:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012079:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001207c:	51                   	push   ecx
c001207d:	57                   	push   edi
c001207e:	55                   	push   ebp
c001207f:	e8 6e 99 ff ff       	call   c000b9f2 <File::File(char const*, Process*, bool)>
c0012084:	83 c4 1c             	add    esp,0x1c
c0012087:	8d 44 24 13          	lea    eax,[esp+0x13]
c001208b:	50                   	push   eax
c001208c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001208f:	53                   	push   ebx
c0012090:	55                   	push   ebp
c0012091:	e8 5a 9d ff ff       	call   c000bdf0 <File::stat(unsigned long long*, bool*)>
c0012096:	83 c4 10             	add    esp,0x10
c0012099:	85 ed                	test   ebp,ebp
c001209b:	89 c3                	mov    ebx,eax
c001209d:	74 0d                	je     c00120ac <SysSizeFromFilename(regs*)+0x9e>
c001209f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00120a2:	83 ec 0c             	sub    esp,0xc
c00120a5:	55                   	push   ebp
c00120a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120a9:	83 c4 10             	add    esp,0x10
c00120ac:	85 db                	test   ebx,ebx
c00120ae:	75 57                	jne    c0012107 <SysSizeFromFilename(regs*)+0xf9>
c00120b0:	6a 00                	push   0x0
c00120b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120ba:	05 0c 01 00 00       	add    eax,0x10c
c00120bf:	50                   	push   eax
c00120c0:	57                   	push   edi
c00120c1:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00120c8:	53                   	push   ebx
c00120c9:	e8 f6 96 ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00120ce:	58                   	pop    eax
c00120cf:	5a                   	pop    edx
c00120d0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00120d4:	50                   	push   eax
c00120d5:	53                   	push   ebx
c00120d6:	e8 12 90 ff ff       	call   c000b0ed <KeDereferenceSymlink(char const*, char*)>
c00120db:	83 c4 10             	add    esp,0x10
c00120de:	ba 00 00 00 00       	mov    edx,0x0
c00120e3:	83 f8 01             	cmp    eax,0x1
c00120e6:	b8 00 00 00 00       	mov    eax,0x0
c00120eb:	74 2f                	je     c001211c <SysSizeFromFilename(regs*)+0x10e>
c00120ed:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00120f2:	74 3b                	je     c001212f <SysSizeFromFilename(regs*)+0x121>
c00120f4:	85 f6                	test   esi,esi
c00120f6:	0f 84 5c ff ff ff    	je     c0012058 <SysSizeFromFilename(regs*)+0x4a>
c00120fc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012102:	e9 51 ff ff ff       	jmp    c0012058 <SysSizeFromFilename(regs*)+0x4a>
c0012107:	81 c4 4c 02 00 00    	add    esp,0x24c
c001210d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012112:	5b                   	pop    ebx
c0012113:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012118:	5e                   	pop    esi
c0012119:	5f                   	pop    edi
c001211a:	5d                   	pop    ebp
c001211b:	c3                   	ret    
c001211c:	85 f6                	test   esi,esi
c001211e:	0f 84 34 ff ff ff    	je     c0012058 <SysSizeFromFilename(regs*)+0x4a>
c0012124:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001212a:	e9 29 ff ff ff       	jmp    c0012058 <SysSizeFromFilename(regs*)+0x4a>
c001212f:	85 f6                	test   esi,esi
c0012131:	0f 84 21 ff ff ff    	je     c0012058 <SysSizeFromFilename(regs*)+0x4a>
c0012137:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001213d:	e9 16 ff ff ff       	jmp    c0012058 <SysSizeFromFilename(regs*)+0x4a>

c0012142 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012142:	55                   	push   ebp
c0012143:	57                   	push   edi
c0012144:	56                   	push   esi
c0012145:	53                   	push   ebx
c0012146:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001214c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0012153:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012156:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012159:	85 f6                	test   esi,esi
c001215b:	89 f8                	mov    eax,edi
c001215d:	74 09                	je     c0012168 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c001215f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012165:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012168:	83 f8 02             	cmp    eax,0x2
c001216b:	0f 86 ca 00 00 00    	jbe    c001223b <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0012171:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012176:	76 1f                	jbe    c0012197 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0012178:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001217b:	31 d2                	xor    edx,edx
c001217d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012183:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001218a:	31 c0                	xor    eax,eax
c001218c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012192:	5b                   	pop    ebx
c0012193:	5e                   	pop    esi
c0012194:	5f                   	pop    edi
c0012195:	5d                   	pop    ebp
c0012196:	c3                   	ret    
c0012197:	83 ec 0c             	sub    esp,0xc
c001219a:	68 14 01 00 00       	push   0x114
c001219f:	e8 2f 59 ff ff       	call   c0007ad3 <malloc>
c00121a4:	6a 00                	push   0x0
c00121a6:	89 c5                	mov    ebp,eax
c00121a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121ad:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00121b0:	51                   	push   ecx
c00121b1:	57                   	push   edi
c00121b2:	55                   	push   ebp
c00121b3:	e8 3a 98 ff ff       	call   c000b9f2 <File::File(char const*, Process*, bool)>
c00121b8:	83 c4 1c             	add    esp,0x1c
c00121bb:	8d 44 24 13          	lea    eax,[esp+0x13]
c00121bf:	50                   	push   eax
c00121c0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00121c3:	53                   	push   ebx
c00121c4:	55                   	push   ebp
c00121c5:	e8 26 9c ff ff       	call   c000bdf0 <File::stat(unsigned long long*, bool*)>
c00121ca:	83 c4 10             	add    esp,0x10
c00121cd:	85 ed                	test   ebp,ebp
c00121cf:	89 c3                	mov    ebx,eax
c00121d1:	74 0d                	je     c00121e0 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00121d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	55                   	push   ebp
c00121da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121dd:	83 c4 10             	add    esp,0x10
c00121e0:	85 db                	test   ebx,ebx
c00121e2:	75 57                	jne    c001223b <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00121e4:	6a 00                	push   0x0
c00121e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121ee:	05 0c 01 00 00       	add    eax,0x10c
c00121f3:	50                   	push   eax
c00121f4:	57                   	push   edi
c00121f5:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00121fc:	53                   	push   ebx
c00121fd:	e8 c2 95 ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012202:	58                   	pop    eax
c0012203:	5a                   	pop    edx
c0012204:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012208:	50                   	push   eax
c0012209:	53                   	push   ebx
c001220a:	e8 de 8e ff ff       	call   c000b0ed <KeDereferenceSymlink(char const*, char*)>
c001220f:	83 c4 10             	add    esp,0x10
c0012212:	ba 00 00 00 00       	mov    edx,0x0
c0012217:	83 f8 01             	cmp    eax,0x1
c001221a:	b8 00 00 00 00       	mov    eax,0x0
c001221f:	74 2f                	je     c0012250 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0012221:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012226:	74 3b                	je     c0012263 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0012228:	85 f6                	test   esi,esi
c001222a:	0f 84 5c ff ff ff    	je     c001218c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012230:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012236:	e9 51 ff ff ff       	jmp    c001218c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001223b:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012241:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012246:	5b                   	pop    ebx
c0012247:	ba ff ff ff ff       	mov    edx,0xffffffff
c001224c:	5e                   	pop    esi
c001224d:	5f                   	pop    edi
c001224e:	5d                   	pop    ebp
c001224f:	c3                   	ret    
c0012250:	85 f6                	test   esi,esi
c0012252:	0f 84 34 ff ff ff    	je     c001218c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012258:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001225e:	e9 29 ff ff ff       	jmp    c001218c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012263:	85 f6                	test   esi,esi
c0012265:	0f 84 21 ff ff ff    	je     c001218c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001226b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012271:	e9 16 ff ff ff       	jmp    c001218c <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0012276 <SysClose(regs*)>:
c0012276:	53                   	push   ebx
c0012277:	83 ec 08             	sub    esp,0x8
c001227a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001227e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012281:	83 f8 02             	cmp    eax,0x2
c0012284:	76 41                	jbe    c00122c7 <SysClose(regs*)+0x51>
c0012286:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001228c:	83 fa 01             	cmp    edx,0x1
c001228f:	76 2d                	jbe    c00122be <SysClose(regs*)+0x48>
c0012291:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012296:	77 2f                	ja     c00122c7 <SysClose(regs*)+0x51>
c0012298:	83 ec 0c             	sub    esp,0xc
c001229b:	50                   	push   eax
c001229c:	e8 fa 71 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00122a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00122a4:	89 c3                	mov    ebx,eax
c00122a6:	e8 a1 98 ff ff       	call   c000bb4c <File::close()>
c00122ab:	83 c4 10             	add    esp,0x10
c00122ae:	85 db                	test   ebx,ebx
c00122b0:	74 0c                	je     c00122be <SysClose(regs*)+0x48>
c00122b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122b4:	83 ec 0c             	sub    esp,0xc
c00122b7:	53                   	push   ebx
c00122b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00122bb:	83 c4 10             	add    esp,0x10
c00122be:	83 c4 08             	add    esp,0x8
c00122c1:	31 c0                	xor    eax,eax
c00122c3:	5b                   	pop    ebx
c00122c4:	31 d2                	xor    edx,edx
c00122c6:	c3                   	ret    
c00122c7:	83 c4 08             	add    esp,0x8
c00122ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122cf:	5b                   	pop    ebx
c00122d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122d5:	c3                   	ret    

c00122d6 <SysOpenDir(regs*)>:
c00122d6:	56                   	push   esi
c00122d7:	53                   	push   ebx
c00122d8:	83 ec 04             	sub    esp,0x4
c00122db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122df:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00122e2:	85 c9                	test   ecx,ecx
c00122e4:	74 5d                	je     c0012343 <SysOpenDir(regs*)+0x6d>
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	68 14 01 00 00       	push   0x114
c00122ee:	e8 e0 57 ff ff       	call   c0007ad3 <malloc>
c00122f3:	83 c4 0c             	add    esp,0xc
c00122f6:	89 c6                	mov    esi,eax
c00122f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012300:	50                   	push   eax
c0012301:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012304:	52                   	push   edx
c0012305:	56                   	push   esi
c0012306:	e8 a5 9c ff ff       	call   c000bfb0 <Directory::Directory(char const*, Process*)>
c001230b:	83 c4 10             	add    esp,0x10
c001230e:	85 f6                	test   esi,esi
c0012310:	74 31                	je     c0012343 <SysOpenDir(regs*)+0x6d>
c0012312:	83 ec 0c             	sub    esp,0xc
c0012315:	56                   	push   esi
c0012316:	e8 5d 9d ff ff       	call   c000c078 <Directory::open()>
c001231b:	83 c4 10             	add    esp,0x10
c001231e:	85 c0                	test   eax,eax
c0012320:	75 21                	jne    c0012343 <SysOpenDir(regs*)+0x6d>
c0012322:	83 ec 0c             	sub    esp,0xc
c0012325:	56                   	push   esi
c0012326:	e8 73 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001232b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001232e:	83 c4 10             	add    esp,0x10
c0012331:	89 02                	mov    DWORD PTR [edx],eax
c0012333:	c1 f8 1f             	sar    eax,0x1f
c0012336:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012339:	83 c4 04             	add    esp,0x4
c001233c:	31 c0                	xor    eax,eax
c001233e:	5b                   	pop    ebx
c001233f:	31 d2                	xor    edx,edx
c0012341:	5e                   	pop    esi
c0012342:	c3                   	ret    
c0012343:	83 c4 04             	add    esp,0x4
c0012346:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001234b:	5b                   	pop    ebx
c001234c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012351:	5e                   	pop    esi
c0012352:	c3                   	ret    

c0012353 <SysMakeDir(regs*)>:
c0012353:	56                   	push   esi
c0012354:	53                   	push   ebx
c0012355:	83 ec 10             	sub    esp,0x10
c0012358:	68 14 01 00 00       	push   0x114
c001235d:	e8 71 57 ff ff       	call   c0007ad3 <malloc>
c0012362:	83 c4 0c             	add    esp,0xc
c0012365:	89 c3                	mov    ebx,eax
c0012367:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001236c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001236f:	50                   	push   eax
c0012370:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012374:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012377:	52                   	push   edx
c0012378:	53                   	push   ebx
c0012379:	e8 32 9c ff ff       	call   c000bfb0 <Directory::Directory(char const*, Process*)>
c001237e:	83 c4 10             	add    esp,0x10
c0012381:	85 db                	test   ebx,ebx
c0012383:	74 2c                	je     c00123b1 <SysMakeDir(regs*)+0x5e>
c0012385:	83 ec 0c             	sub    esp,0xc
c0012388:	53                   	push   ebx
c0012389:	e8 ca 9e ff ff       	call   c000c258 <Directory::create()>
c001238e:	89 c6                	mov    esi,eax
c0012390:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012392:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012395:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012398:	83 c4 10             	add    esp,0x10
c001239b:	31 c0                	xor    eax,eax
c001239d:	85 f6                	test   esi,esi
c001239f:	0f 95 c0             	setne  al
c00123a2:	31 d2                	xor    edx,edx
c00123a4:	f7 d8                	neg    eax
c00123a6:	83 d2 00             	adc    edx,0x0
c00123a9:	83 c4 04             	add    esp,0x4
c00123ac:	5b                   	pop    ebx
c00123ad:	f7 da                	neg    edx
c00123af:	5e                   	pop    esi
c00123b0:	c3                   	ret    
c00123b1:	83 c4 04             	add    esp,0x4
c00123b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123b9:	5b                   	pop    ebx
c00123ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123bf:	5e                   	pop    esi
c00123c0:	c3                   	ret    

c00123c1 <SysCloseDir(regs*)>:
c00123c1:	53                   	push   ebx
c00123c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123c7:	83 ec 08             	sub    esp,0x8
c00123ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ce:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00123d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123d6:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00123d9:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00123df:	77 2a                	ja     c001240b <SysCloseDir(regs*)+0x4a>
c00123e1:	83 ec 0c             	sub    esp,0xc
c00123e4:	51                   	push   ecx
c00123e5:	e8 b1 70 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00123ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00123ed:	89 c3                	mov    ebx,eax
c00123ef:	e8 e0 9c ff ff       	call   c000c0d4 <Directory::close()>
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	85 db                	test   ebx,ebx
c00123f9:	74 0c                	je     c0012407 <SysCloseDir(regs*)+0x46>
c00123fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123fd:	83 ec 0c             	sub    esp,0xc
c0012400:	53                   	push   ebx
c0012401:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012404:	83 c4 10             	add    esp,0x10
c0012407:	31 c0                	xor    eax,eax
c0012409:	31 d2                	xor    edx,edx
c001240b:	83 c4 08             	add    esp,0x8
c001240e:	5b                   	pop    ebx
c001240f:	c3                   	ret    

c0012410 <SysWait(regs*)>:
c0012410:	83 ec 10             	sub    esp,0x10
c0012413:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012417:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001241a:	52                   	push   edx
c001241b:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001241e:	51                   	push   ecx
c001241f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012422:	50                   	push   eax
c0012423:	e8 10 3e 00 00       	call   c0016238 <waitTask(int, int*, int)>
c0012428:	83 c4 1c             	add    esp,0x1c
c001242b:	89 c2                	mov    edx,eax
c001242d:	c1 fa 1f             	sar    edx,0x1f
c0012430:	c3                   	ret    

c0012431 <SysNotImpl(regs*)>:
c0012431:	83 ec 18             	sub    esp,0x18
c0012434:	68 46 24 02 c0       	push   0xc0022446
c0012439:	e8 d9 f0 ff ff       	call   c0011517 <KePanic(char const*)>
c001243e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012443:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012448:	83 c4 1c             	add    esp,0x1c
c001244b:	c3                   	ret    

c001244c <SysPanic(regs*)>:
c001244c:	83 ec 18             	sub    esp,0x18
c001244f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012453:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012456:	50                   	push   eax
c0012457:	e8 bb f0 ff ff       	call   c0011517 <KePanic(char const*)>
c001245c:	b8 01 00 00 00       	mov    eax,0x1
c0012461:	31 d2                	xor    edx,edx
c0012463:	83 c4 1c             	add    esp,0x1c
c0012466:	c3                   	ret    

c0012467 <SysRmdir(regs*)>:
c0012467:	56                   	push   esi
c0012468:	53                   	push   ebx
c0012469:	83 ec 10             	sub    esp,0x10
c001246c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012470:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012473:	68 14 01 00 00       	push   0x114
c0012478:	e8 56 56 ff ff       	call   c0007ad3 <malloc>
c001247d:	6a 00                	push   0x0
c001247f:	89 c3                	mov    ebx,eax
c0012481:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012486:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012489:	50                   	push   eax
c001248a:	56                   	push   esi
c001248b:	53                   	push   ebx
c001248c:	e8 61 95 ff ff       	call   c000b9f2 <File::File(char const*, Process*, bool)>
c0012491:	83 c4 14             	add    esp,0x14
c0012494:	53                   	push   ebx
c0012495:	e8 22 98 ff ff       	call   c000bcbc <File::unlink()>
c001249a:	83 c4 10             	add    esp,0x10
c001249d:	85 db                	test   ebx,ebx
c001249f:	89 c6                	mov    esi,eax
c00124a1:	74 0c                	je     c00124af <SysRmdir(regs*)+0x48>
c00124a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124a5:	83 ec 0c             	sub    esp,0xc
c00124a8:	53                   	push   ebx
c00124a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124ac:	83 c4 10             	add    esp,0x10
c00124af:	31 c0                	xor    eax,eax
c00124b1:	85 f6                	test   esi,esi
c00124b3:	0f 95 c0             	setne  al
c00124b6:	31 d2                	xor    edx,edx
c00124b8:	f7 d8                	neg    eax
c00124ba:	83 d2 00             	adc    edx,0x0
c00124bd:	83 c4 04             	add    esp,0x4
c00124c0:	5b                   	pop    ebx
c00124c1:	f7 da                	neg    edx
c00124c3:	5e                   	pop    esi
c00124c4:	c3                   	ret    

c00124c5 <SysUnlink(regs*)>:
c00124c5:	56                   	push   esi
c00124c6:	53                   	push   ebx
c00124c7:	83 ec 10             	sub    esp,0x10
c00124ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124ce:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00124d1:	68 14 01 00 00       	push   0x114
c00124d6:	e8 f8 55 ff ff       	call   c0007ad3 <malloc>
c00124db:	6a 00                	push   0x0
c00124dd:	89 c3                	mov    ebx,eax
c00124df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124e7:	50                   	push   eax
c00124e8:	56                   	push   esi
c00124e9:	53                   	push   ebx
c00124ea:	e8 03 95 ff ff       	call   c000b9f2 <File::File(char const*, Process*, bool)>
c00124ef:	83 c4 14             	add    esp,0x14
c00124f2:	53                   	push   ebx
c00124f3:	e8 c4 97 ff ff       	call   c000bcbc <File::unlink()>
c00124f8:	83 c4 10             	add    esp,0x10
c00124fb:	85 db                	test   ebx,ebx
c00124fd:	89 c6                	mov    esi,eax
c00124ff:	74 0c                	je     c001250d <SysUnlink(regs*)+0x48>
c0012501:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012503:	83 ec 0c             	sub    esp,0xc
c0012506:	53                   	push   ebx
c0012507:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001250a:	83 c4 10             	add    esp,0x10
c001250d:	31 c0                	xor    eax,eax
c001250f:	85 f6                	test   esi,esi
c0012511:	0f 95 c0             	setne  al
c0012514:	31 d2                	xor    edx,edx
c0012516:	f7 d8                	neg    eax
c0012518:	83 d2 00             	adc    edx,0x0
c001251b:	83 c4 04             	add    esp,0x4
c001251e:	5b                   	pop    ebx
c001251f:	f7 da                	neg    edx
c0012521:	5e                   	pop    esi
c0012522:	c3                   	ret    

c0012523 <SysGetArgv(regs*)>:
c0012523:	83 ec 0c             	sub    esp,0xc
c0012526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001252a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001252d:	85 c0                	test   eax,eax
c001252f:	78 2c                	js     c001255d <SysGetArgv(regs*)+0x3a>
c0012531:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012537:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001253a:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012540:	7d 1b                	jge    c001255d <SysGetArgv(regs*)+0x3a>
c0012542:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012549:	85 c0                	test   eax,eax
c001254b:	74 18                	je     c0012565 <SysGetArgv(regs*)+0x42>
c001254d:	83 ec 08             	sub    esp,0x8
c0012550:	50                   	push   eax
c0012551:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012554:	50                   	push   eax
c0012555:	e8 f6 e0 fe ff       	call   c0000650 <strcpy>
c001255a:	83 c4 10             	add    esp,0x10
c001255d:	31 c0                	xor    eax,eax
c001255f:	31 d2                	xor    edx,edx
c0012561:	83 c4 0c             	add    esp,0xc
c0012564:	c3                   	ret    
c0012565:	b8 01 00 00 00       	mov    eax,0x1
c001256a:	31 d2                	xor    edx,edx
c001256c:	83 c4 0c             	add    esp,0xc
c001256f:	c3                   	ret    

c0012570 <SysUSleep(regs*)>:
c0012570:	83 ec 1c             	sub    esp,0x1c
c0012573:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012577:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001257a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001257d:	6a 00                	push   0x0
c001257f:	6a 64                	push   0x64
c0012581:	52                   	push   edx
c0012582:	50                   	push   eax
c0012583:	e8 38 d1 00 00       	call   c001f6c0 <__udivdi3>
c0012588:	83 c4 14             	add    esp,0x14
c001258b:	50                   	push   eax
c001258c:	e8 8b 3d 00 00       	call   c001631c <milliTenthSleep(unsigned int)>
c0012591:	31 c0                	xor    eax,eax
c0012593:	31 d2                	xor    edx,edx
c0012595:	83 c4 1c             	add    esp,0x1c
c0012598:	c3                   	ret    

c0012599 <SysSpawn(regs*)>:
c0012599:	56                   	push   esi
c001259a:	53                   	push   ebx
c001259b:	83 ec 04             	sub    esp,0x4
c001259e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125a2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00125a5:	85 f6                	test   esi,esi
c00125a7:	75 0a                	jne    c00125b3 <SysSpawn(regs*)+0x1a>
c00125a9:	83 c4 04             	add    esp,0x4
c00125ac:	31 c0                	xor    eax,eax
c00125ae:	5b                   	pop    ebx
c00125af:	31 d2                	xor    edx,edx
c00125b1:	5e                   	pop    esi
c00125b2:	c3                   	ret    
c00125b3:	83 ec 0c             	sub    esp,0xc
c00125b6:	68 24 07 00 00       	push   0x724
c00125bb:	e8 13 55 ff ff       	call   c0007ad3 <malloc>
c00125c0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00125c3:	83 c4 10             	add    esp,0x10
c00125c6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00125c9:	89 c6                	mov    esi,eax
c00125cb:	31 c0                	xor    eax,eax
c00125cd:	85 c9                	test   ecx,ecx
c00125cf:	75 08                	jne    c00125d9 <SysSpawn(regs*)+0x40>
c00125d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125d9:	52                   	push   edx
c00125da:	50                   	push   eax
c00125db:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125de:	50                   	push   eax
c00125df:	56                   	push   esi
c00125e0:	e8 9f 33 00 00       	call   c0015984 <Process::Process(char const*, Process*, char**)>
c00125e5:	83 c4 10             	add    esp,0x10
c00125e8:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00125ef:	75 b8                	jne    c00125a9 <SysSpawn(regs*)+0x10>
c00125f1:	83 ec 0c             	sub    esp,0xc
c00125f4:	56                   	push   esi
c00125f5:	e8 c2 38 00 00       	call   c0015ebc <Process::createUserThread()>
c00125fa:	8b 06                	mov    eax,DWORD PTR [esi]
c00125fc:	83 c4 10             	add    esp,0x10
c00125ff:	83 c4 04             	add    esp,0x4
c0012602:	5b                   	pop    ebx
c0012603:	89 c2                	mov    edx,eax
c0012605:	c1 fa 1f             	sar    edx,0x1f
c0012608:	5e                   	pop    esi
c0012609:	c3                   	ret    

c001260a <SysGetEnv(regs*)>:
c001260a:	57                   	push   edi
c001260b:	56                   	push   esi
c001260c:	53                   	push   ebx
c001260d:	83 ec 1c             	sub    esp,0x1c
c0012610:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012615:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012619:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001261c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001261f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012622:	51                   	push   ecx
c0012623:	e8 a7 ed ff ff       	call   c00113cf <KeGetProcessTotalEnvCount(Process*)>
c0012628:	83 c4 10             	add    esp,0x10
c001262b:	39 c7                	cmp    edi,eax
c001262d:	7c 12                	jl     c0012641 <SysGetEnv(regs*)+0x37>
c001262f:	31 c0                	xor    eax,eax
c0012631:	31 d2                	xor    edx,edx
c0012633:	85 f6                	test   esi,esi
c0012635:	74 03                	je     c001263a <SysGetEnv(regs*)+0x30>
c0012637:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001263a:	83 c4 10             	add    esp,0x10
c001263d:	5b                   	pop    ebx
c001263e:	5e                   	pop    esi
c001263f:	5f                   	pop    edi
c0012640:	c3                   	ret    
c0012641:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012645:	83 ec 04             	sub    esp,0x4
c0012648:	57                   	push   edi
c0012649:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001264f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012652:	57                   	push   edi
c0012653:	50                   	push   eax
c0012654:	e8 96 ed ff ff       	call   c00113ef <KeGetProcessEnvPair(Process*, int)>
c0012659:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001265c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012660:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012664:	83 c4 0c             	add    esp,0xc
c0012667:	85 d2                	test   edx,edx
c0012669:	75 23                	jne    c001268e <SysGetEnv(regs*)+0x84>
c001266b:	83 ec 0c             	sub    esp,0xc
c001266e:	50                   	push   eax
c001266f:	e8 0c df fe ff       	call   c0000580 <strlen>
c0012674:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012677:	89 c3                	mov    ebx,eax
c0012679:	e8 02 df fe ff       	call   c0000580 <strlen>
c001267e:	83 c4 10             	add    esp,0x10
c0012681:	31 d2                	xor    edx,edx
c0012683:	83 c4 10             	add    esp,0x10
c0012686:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001268a:	5b                   	pop    ebx
c001268b:	5e                   	pop    esi
c001268c:	5f                   	pop    edi
c001268d:	c3                   	ret    
c001268e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012691:	83 ec 08             	sub    esp,0x8
c0012694:	50                   	push   eax
c0012695:	56                   	push   esi
c0012696:	e8 b5 df fe ff       	call   c0000650 <strcpy>
c001269b:	58                   	pop    eax
c001269c:	5a                   	pop    edx
c001269d:	68 60 24 02 c0       	push   0xc0022460
c00126a2:	56                   	push   esi
c00126a3:	e8 c8 e1 fe ff       	call   c0000870 <strcat>
c00126a8:	59                   	pop    ecx
c00126a9:	5b                   	pop    ebx
c00126aa:	57                   	push   edi
c00126ab:	56                   	push   esi
c00126ac:	e8 bf e1 fe ff       	call   c0000870 <strcat>
c00126b1:	83 c4 10             	add    esp,0x10
c00126b4:	31 c0                	xor    eax,eax
c00126b6:	83 c4 10             	add    esp,0x10
c00126b9:	31 d2                	xor    edx,edx
c00126bb:	5b                   	pop    ebx
c00126bc:	5e                   	pop    esi
c00126bd:	5f                   	pop    edi
c00126be:	c3                   	ret    

c00126bf <SysSetFatAttrib(regs*)>:
c00126bf:	57                   	push   edi
c00126c0:	56                   	push   esi
c00126c1:	53                   	push   ebx
c00126c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00126c6:	83 ec 0c             	sub    esp,0xc
c00126c9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00126cc:	68 14 01 00 00       	push   0x114
c00126d1:	e8 fd 53 ff ff       	call   c0007ad3 <malloc>
c00126d6:	83 c4 0c             	add    esp,0xc
c00126d9:	89 c3                	mov    ebx,eax
c00126db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126e3:	50                   	push   eax
c00126e4:	57                   	push   edi
c00126e5:	53                   	push   ebx
c00126e6:	e8 e5 93 ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c00126eb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00126ee:	83 c4 0c             	add    esp,0xc
c00126f1:	0f b6 d4             	movzx  edx,ah
c00126f4:	0f b6 c0             	movzx  eax,al
c00126f7:	52                   	push   edx
c00126f8:	50                   	push   eax
c00126f9:	53                   	push   ebx
c00126fa:	e8 57 96 ff ff       	call   c000bd56 <File::chfatattr(unsigned char, unsigned char)>
c00126ff:	83 c4 10             	add    esp,0x10
c0012702:	85 db                	test   ebx,ebx
c0012704:	89 c6                	mov    esi,eax
c0012706:	74 0c                	je     c0012714 <SysSetFatAttrib(regs*)+0x55>
c0012708:	8b 03                	mov    eax,DWORD PTR [ebx]
c001270a:	83 ec 0c             	sub    esp,0xc
c001270d:	53                   	push   ebx
c001270e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012711:	83 c4 10             	add    esp,0x10
c0012714:	5b                   	pop    ebx
c0012715:	31 c0                	xor    eax,eax
c0012717:	85 f6                	test   esi,esi
c0012719:	0f 95 c0             	setne  al
c001271c:	31 d2                	xor    edx,edx
c001271e:	5e                   	pop    esi
c001271f:	f7 d8                	neg    eax
c0012721:	83 d2 00             	adc    edx,0x0
c0012724:	f7 da                	neg    edx
c0012726:	5f                   	pop    edi
c0012727:	c3                   	ret    

c0012728 <SysPipe(regs*)>:
c0012728:	57                   	push   edi
c0012729:	56                   	push   esi
c001272a:	53                   	push   ebx
c001272b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001272f:	83 ec 0c             	sub    esp,0xc
c0012732:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012735:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012738:	6a 20                	push   0x20
c001273a:	e8 94 53 ff ff       	call   c0007ad3 <malloc>
c001273f:	89 c3                	mov    ebx,eax
c0012741:	58                   	pop    eax
c0012742:	5a                   	pop    edx
c0012743:	68 00 50 00 00       	push   0x5000
c0012748:	53                   	push   ebx
c0012749:	e8 f0 5c ff ff       	call   c000843e <Pipe::Pipe(int)>
c001274e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012751:	e8 48 6a ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012756:	89 07                	mov    DWORD PTR [edi],eax
c0012758:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001275b:	e8 3e 6a ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012760:	83 c4 10             	add    esp,0x10
c0012763:	31 d2                	xor    edx,edx
c0012765:	89 06                	mov    DWORD PTR [esi],eax
c0012767:	31 c0                	xor    eax,eax
c0012769:	5b                   	pop    ebx
c001276a:	5e                   	pop    esi
c001276b:	5f                   	pop    edi
c001276c:	c3                   	ret    

c001276d <SysGetUnixTime(regs*)>:
c001276d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012772:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012778:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001277c:	e9 1d 9d ff ff       	jmp    c000c49e <Clock::timeInSecondsLocal()>

c0012781 <string_ends_with(char const*, char const*)>:
c0012781:	57                   	push   edi
c0012782:	56                   	push   esi
c0012783:	53                   	push   ebx
c0012784:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012788:	83 ec 0c             	sub    esp,0xc
c001278b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001278f:	53                   	push   ebx
c0012790:	e8 eb dd fe ff       	call   c0000580 <strlen>
c0012795:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012798:	89 c6                	mov    esi,eax
c001279a:	e8 e1 dd fe ff       	call   c0000580 <strlen>
c001279f:	83 c4 10             	add    esp,0x10
c00127a2:	31 d2                	xor    edx,edx
c00127a4:	39 c6                	cmp    esi,eax
c00127a6:	7d 06                	jge    c00127ae <string_ends_with(char const*, char const*)+0x2d>
c00127a8:	5b                   	pop    ebx
c00127a9:	89 d0                	mov    eax,edx
c00127ab:	5e                   	pop    esi
c00127ac:	5f                   	pop    edi
c00127ad:	c3                   	ret    
c00127ae:	83 ec 08             	sub    esp,0x8
c00127b1:	29 c6                	sub    esi,eax
c00127b3:	57                   	push   edi
c00127b4:	01 f3                	add    ebx,esi
c00127b6:	53                   	push   ebx
c00127b7:	e8 c4 df fe ff       	call   c0000780 <strcmp>
c00127bc:	83 c4 10             	add    esp,0x10
c00127bf:	31 d2                	xor    edx,edx
c00127c1:	5b                   	pop    ebx
c00127c2:	5e                   	pop    esi
c00127c3:	85 c0                	test   eax,eax
c00127c5:	5f                   	pop    edi
c00127c6:	0f 94 c2             	sete   dl
c00127c9:	89 d0                	mov    eax,edx
c00127cb:	c3                   	ret    

c00127cc <SysOpen(regs*)>:
c00127cc:	56                   	push   esi
c00127cd:	53                   	push   ebx
c00127ce:	81 ec 04 01 00 00    	sub    esp,0x104
c00127d4:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00127db:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00127de:	85 c0                	test   eax,eax
c00127e0:	0f 84 c4 01 00 00    	je     c00129aa <SysOpen(regs*)+0x1de>
c00127e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00127e9:	85 c0                	test   eax,eax
c00127eb:	0f 84 b9 01 00 00    	je     c00129aa <SysOpen(regs*)+0x1de>
c00127f1:	6a 00                	push   0x0
c00127f3:	68 62 24 02 c0       	push   0xc0022462
c00127f8:	50                   	push   eax
c00127f9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00127fd:	56                   	push   esi
c00127fe:	e8 c1 8f ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012803:	89 34 24             	mov    DWORD PTR [esp],esi
c0012806:	e8 75 dd fe ff       	call   c0000580 <strlen>
c001280b:	83 c4 10             	add    esp,0x10
c001280e:	83 e8 01             	sub    eax,0x1
c0012811:	74 29                	je     c001283c <SysOpen(regs*)+0x70>
c0012813:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012817:	83 fa 2e             	cmp    edx,0x2e
c001281a:	74 1c                	je     c0012838 <SysOpen(regs*)+0x6c>
c001281c:	83 fa 3a             	cmp    edx,0x3a
c001281f:	74 17                	je     c0012838 <SysOpen(regs*)+0x6c>
c0012821:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012825:	83 e8 01             	sub    eax,0x1
c0012828:	74 12                	je     c001283c <SysOpen(regs*)+0x70>
c001282a:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001282e:	83 fa 3a             	cmp    edx,0x3a
c0012831:	74 05                	je     c0012838 <SysOpen(regs*)+0x6c>
c0012833:	83 fa 2e             	cmp    edx,0x2e
c0012836:	75 e9                	jne    c0012821 <SysOpen(regs*)+0x55>
c0012838:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001283c:	83 ec 08             	sub    esp,0x8
c001283f:	68 66 24 02 c0       	push   0xc0022466
c0012844:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012847:	50                   	push   eax
c0012848:	e8 34 ff ff ff       	call   c0012781 <string_ends_with(char const*, char const*)>
c001284d:	83 c4 10             	add    esp,0x10
c0012850:	85 c0                	test   eax,eax
c0012852:	74 1d                	je     c0012871 <SysOpen(regs*)+0xa5>
c0012854:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012857:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001285d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012864:	81 c4 04 01 00 00    	add    esp,0x104
c001286a:	31 c0                	xor    eax,eax
c001286c:	5b                   	pop    ebx
c001286d:	31 d2                	xor    edx,edx
c001286f:	5e                   	pop    esi
c0012870:	c3                   	ret    
c0012871:	83 ec 08             	sub    esp,0x8
c0012874:	68 6b 24 02 c0       	push   0xc002246b
c0012879:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001287c:	50                   	push   eax
c001287d:	e8 ff fe ff ff       	call   c0012781 <string_ends_with(char const*, char const*)>
c0012882:	83 c4 10             	add    esp,0x10
c0012885:	85 c0                	test   eax,eax
c0012887:	75 cb                	jne    c0012854 <SysOpen(regs*)+0x88>
c0012889:	83 ec 08             	sub    esp,0x8
c001288c:	68 67 24 02 c0       	push   0xc0022467
c0012891:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012894:	50                   	push   eax
c0012895:	e8 e6 de fe ff       	call   c0000780 <strcmp>
c001289a:	83 c4 10             	add    esp,0x10
c001289d:	85 c0                	test   eax,eax
c001289f:	74 b3                	je     c0012854 <SysOpen(regs*)+0x88>
c00128a1:	83 ec 08             	sub    esp,0x8
c00128a4:	68 66 24 02 c0       	push   0xc0022466
c00128a9:	56                   	push   esi
c00128aa:	e8 d2 fe ff ff       	call   c0012781 <string_ends_with(char const*, char const*)>
c00128af:	83 c4 10             	add    esp,0x10
c00128b2:	85 c0                	test   eax,eax
c00128b4:	75 9e                	jne    c0012854 <SysOpen(regs*)+0x88>
c00128b6:	83 ec 08             	sub    esp,0x8
c00128b9:	68 70 24 02 c0       	push   0xc0022470
c00128be:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128c1:	50                   	push   eax
c00128c2:	e8 ba fe ff ff       	call   c0012781 <string_ends_with(char const*, char const*)>
c00128c7:	83 c4 10             	add    esp,0x10
c00128ca:	85 c0                	test   eax,eax
c00128cc:	0f 85 eb 00 00 00    	jne    c00129bd <SysOpen(regs*)+0x1f1>
c00128d2:	83 ec 08             	sub    esp,0x8
c00128d5:	68 75 24 02 c0       	push   0xc0022475
c00128da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128dd:	50                   	push   eax
c00128de:	e8 9e fe ff ff       	call   c0012781 <string_ends_with(char const*, char const*)>
c00128e3:	83 c4 10             	add    esp,0x10
c00128e6:	85 c0                	test   eax,eax
c00128e8:	0f 85 cf 00 00 00    	jne    c00129bd <SysOpen(regs*)+0x1f1>
c00128ee:	83 ec 08             	sub    esp,0x8
c00128f1:	68 71 24 02 c0       	push   0xc0022471
c00128f6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00128f9:	51                   	push   ecx
c00128fa:	e8 81 de fe ff       	call   c0000780 <strcmp>
c00128ff:	83 c4 10             	add    esp,0x10
c0012902:	85 c0                	test   eax,eax
c0012904:	0f 84 b3 00 00 00    	je     c00129bd <SysOpen(regs*)+0x1f1>
c001290a:	83 ec 08             	sub    esp,0x8
c001290d:	68 70 24 02 c0       	push   0xc0022470
c0012912:	56                   	push   esi
c0012913:	e8 69 fe ff ff       	call   c0012781 <string_ends_with(char const*, char const*)>
c0012918:	83 c4 10             	add    esp,0x10
c001291b:	85 c0                	test   eax,eax
c001291d:	0f 85 9a 00 00 00    	jne    c00129bd <SysOpen(regs*)+0x1f1>
c0012923:	83 ec 0c             	sub    esp,0xc
c0012926:	68 14 01 00 00       	push   0x114
c001292b:	e8 a3 51 ff ff       	call   c0007ad3 <malloc>
c0012930:	83 c4 0c             	add    esp,0xc
c0012933:	89 c6                	mov    esi,eax
c0012935:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001293a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001293d:	50                   	push   eax
c001293e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012941:	52                   	push   edx
c0012942:	56                   	push   esi
c0012943:	e8 88 91 ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c0012948:	83 c4 10             	add    esp,0x10
c001294b:	85 f6                	test   esi,esi
c001294d:	74 5b                	je     c00129aa <SysOpen(regs*)+0x1de>
c001294f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012952:	0f b6 c2             	movzx  eax,dl
c0012955:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012958:	89 d0                	mov    eax,edx
c001295a:	83 e0 01             	and    eax,0x1
c001295d:	f6 c2 02             	test   dl,0x2
c0012960:	74 03                	je     c0012965 <SysOpen(regs*)+0x199>
c0012962:	83 c8 02             	or     eax,0x2
c0012965:	f6 c2 04             	test   dl,0x4
c0012968:	74 03                	je     c001296d <SysOpen(regs*)+0x1a1>
c001296a:	83 c8 04             	or     eax,0x4
c001296d:	f6 c2 08             	test   dl,0x8
c0012970:	74 03                	je     c0012975 <SysOpen(regs*)+0x1a9>
c0012972:	83 c8 0a             	or     eax,0xa
c0012975:	80 e2 10             	and    dl,0x10
c0012978:	74 03                	je     c001297d <SysOpen(regs*)+0x1b1>
c001297a:	83 c8 12             	or     eax,0x12
c001297d:	83 ec 08             	sub    esp,0x8
c0012980:	50                   	push   eax
c0012981:	56                   	push   esi
c0012982:	e8 67 91 ff ff       	call   c000baee <File::open(FileOpenMode)>
c0012987:	83 c4 10             	add    esp,0x10
c001298a:	85 c0                	test   eax,eax
c001298c:	75 1c                	jne    c00129aa <SysOpen(regs*)+0x1de>
c001298e:	83 ec 0c             	sub    esp,0xc
c0012991:	56                   	push   esi
c0012992:	e8 07 68 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012997:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001299a:	83 c4 10             	add    esp,0x10
c001299d:	89 02                	mov    DWORD PTR [edx],eax
c001299f:	c1 f8 1f             	sar    eax,0x1f
c00129a2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00129a5:	e9 ba fe ff ff       	jmp    c0012864 <SysOpen(regs*)+0x98>
c00129aa:	81 c4 04 01 00 00    	add    esp,0x104
c00129b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00129b5:	5b                   	pop    ebx
c00129b6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00129bb:	5e                   	pop    esi
c00129bc:	c3                   	ret    
c00129bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00129c0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00129c6:	e9 92 fe ff ff       	jmp    c001285d <SysOpen(regs*)+0x91>

c00129cb <KeSystemCall(regs*, void*)>:
c00129cb:	53                   	push   ebx
c00129cc:	83 ec 08             	sub    esp,0x8
c00129cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00129d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00129d6:	83 f8 3e             	cmp    eax,0x3e
c00129d9:	77 16                	ja     c00129f1 <KeSystemCall(regs*, void*)+0x26>
c00129db:	8b 14 85 80 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc380]
c00129e2:	85 d2                	test   edx,edx
c00129e4:	74 0b                	je     c00129f1 <KeSystemCall(regs*, void*)+0x26>
c00129e6:	83 ec 0c             	sub    esp,0xc
c00129e9:	53                   	push   ebx
c00129ea:	ff d2                	call   edx
c00129ec:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00129ef:	eb 0d                	jmp    c00129fe <KeSystemCall(regs*, void*)+0x33>
c00129f1:	52                   	push   edx
c00129f2:	52                   	push   edx
c00129f3:	50                   	push   eax
c00129f4:	68 7a 24 02 c0       	push   0xc002247a
c00129f9:	e8 0c 7f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00129fe:	83 c4 10             	add    esp,0x10
c0012a01:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012a06:	83 c4 08             	add    esp,0x8
c0012a09:	31 d2                	xor    edx,edx
c0012a0b:	5b                   	pop    ebx
c0012a0c:	c3                   	ret    
c0012a0d:	66 90                	xchg   ax,ax
c0012a0f:	90                   	nop

c0012a10 <KeSwitchEndian16(unsigned short)>:
c0012a10:	83 ec 04             	sub    esp,0x4
c0012a13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a17:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012a1b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012a1f:	c1 f8 08             	sar    eax,0x8
c0012a22:	89 c2                	mov    edx,eax
c0012a24:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012a28:	c1 e0 08             	shl    eax,0x8
c0012a2b:	09 d0                	or     eax,edx
c0012a2d:	83 c4 04             	add    esp,0x4
c0012a30:	c3                   	ret    
c0012a31:	8d 76 00             	lea    esi,[esi+0x0]

c0012a34 <KeSwitchEndian32(unsigned int)>:
c0012a34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a38:	c1 e8 18             	shr    eax,0x18
c0012a3b:	89 c2                	mov    edx,eax
c0012a3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a41:	c1 e0 08             	shl    eax,0x8
c0012a44:	25 00 00 ff 00       	and    eax,0xff0000
c0012a49:	09 c2                	or     edx,eax
c0012a4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a4f:	c1 e8 08             	shr    eax,0x8
c0012a52:	25 00 ff 00 00       	and    eax,0xff00
c0012a57:	09 c2                	or     edx,eax
c0012a59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a5d:	c1 e0 18             	shl    eax,0x18
c0012a60:	09 d0                	or     eax,edx
c0012a62:	c3                   	ret    
c0012a63:	90                   	nop

c0012a64 <EthernetCRC32(unsigned char*, int)>:
c0012a64:	83 ec 10             	sub    esp,0x10
c0012a67:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012a6c:	75 0a                	jne    c0012a78 <EthernetCRC32(unsigned char*, int)+0x14>
c0012a6e:	b8 00 00 00 00       	mov    eax,0x0
c0012a73:	e9 8c 00 00 00       	jmp    c0012b04 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012a78:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012a7d:	7f 09                	jg     c0012a88 <EthernetCRC32(unsigned char*, int)+0x24>
c0012a7f:	b8 00 00 00 00       	mov    eax,0x0
c0012a84:	eb 7e                	jmp    c0012b04 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012a86:	66 90                	xchg   ax,ax
c0012a88:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012a90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012a98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a9c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012aa0:	7d 5a                	jge    c0012afc <EthernetCRC32(unsigned char*, int)+0x98>
c0012aa2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012aa6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012aaa:	01 d0                	add    eax,edx
c0012aac:	8a 00                	mov    al,BYTE PTR [eax]
c0012aae:	0f b6 c0             	movzx  eax,al
c0012ab1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012ab5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012abd:	8d 76 00             	lea    esi,[esi+0x0]
c0012ac0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012ac5:	7f 2d                	jg     c0012af4 <EthernetCRC32(unsigned char*, int)+0x90>
c0012ac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012acb:	83 e0 01             	and    eax,0x1
c0012ace:	74 10                	je     c0012ae0 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ad4:	d1 e8                	shr    eax,1
c0012ad6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012adb:	eb 0b                	jmp    c0012ae8 <EthernetCRC32(unsigned char*, int)+0x84>
c0012add:	8d 76 00             	lea    esi,[esi+0x0]
c0012ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ae4:	d1 e8                	shr    eax,1
c0012ae6:	66 90                	xchg   ax,ax
c0012ae8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012aec:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012af1:	eb cd                	jmp    c0012ac0 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012af3:	90                   	nop
c0012af4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012af9:	eb 9d                	jmp    c0012a98 <EthernetCRC32(unsigned char*, int)+0x34>
c0012afb:	90                   	nop
c0012afc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b00:	f7 d0                	not    eax
c0012b02:	66 90                	xchg   ax,ax
c0012b04:	83 c4 10             	add    esp,0x10
c0012b07:	c3                   	ret    

c0012b08 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012b08:	83 ec 2c             	sub    esp,0x2c
c0012b0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012b0f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012b14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b23:	0f b7 c0             	movzx  eax,ax
c0012b26:	3d 06 08 00 00       	cmp    eax,0x806
c0012b2b:	75 13                	jne    c0012b40 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012b2d:	83 ec 0c             	sub    esp,0xc
c0012b30:	68 8e 24 02 c0       	push   0xc002248e
c0012b35:	e8 d0 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012b3a:	83 c4 10             	add    esp,0x10
c0012b3d:	eb 25                	jmp    c0012b64 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012b3f:	90                   	nop
c0012b40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b47:	0f b7 c0             	movzx  eax,ax
c0012b4a:	3d 00 08 00 00       	cmp    eax,0x800
c0012b4f:	75 13                	jne    c0012b64 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012b51:	83 ec 0c             	sub    esp,0xc
c0012b54:	68 a4 24 02 c0       	push   0xc00224a4
c0012b59:	e8 ac 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	8d 76 00             	lea    esi,[esi+0x0]
c0012b64:	90                   	nop
c0012b65:	83 c4 2c             	add    esp,0x2c
c0012b68:	c3                   	ret    

c0012b69 <CmOpen(char const*)>:
c0012b69:	57                   	push   edi
c0012b6a:	56                   	push   esi
c0012b6b:	53                   	push   ebx
c0012b6c:	83 ec 1c             	sub    esp,0x1c
c0012b6f:	6a 30                	push   0x30
c0012b71:	e8 5d 4f ff ff       	call   c0007ad3 <malloc>
c0012b76:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012b7d:	89 c3                	mov    ebx,eax
c0012b7f:	e8 4f 4f ff ff       	call   c0007ad3 <malloc>
c0012b84:	83 c4 0c             	add    esp,0xc
c0012b87:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012b8d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012b91:	89 c6                	mov    esi,eax
c0012b93:	50                   	push   eax
c0012b94:	e8 37 8f ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c0012b99:	83 c4 0c             	add    esp,0xc
c0012b9c:	89 33                	mov    DWORD PTR [ebx],esi
c0012b9e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012ba2:	50                   	push   eax
c0012ba3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ba7:	50                   	push   eax
c0012ba8:	56                   	push   esi
c0012ba9:	e8 42 92 ff ff       	call   c000bdf0 <File::stat(unsigned long long*, bool*)>
c0012bae:	5a                   	pop    edx
c0012baf:	59                   	pop    ecx
c0012bb0:	6a 01                	push   0x1
c0012bb2:	ff 33                	push   DWORD PTR [ebx]
c0012bb4:	e8 35 8f ff ff       	call   c000baee <File::open(FileOpenMode)>
c0012bb9:	5e                   	pop    esi
c0012bba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012bbe:	e8 10 4f ff ff       	call   c0007ad3 <malloc>
c0012bc3:	5a                   	pop    edx
c0012bc4:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012bc8:	89 c7                	mov    edi,eax
c0012bca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bcc:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bce:	56                   	push   esi
c0012bcf:	57                   	push   edi
c0012bd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012bd4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012bd8:	50                   	push   eax
c0012bd9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012bdc:	83 c4 14             	add    esp,0x14
c0012bdf:	ff 33                	push   DWORD PTR [ebx]
c0012be1:	e8 66 8f ff ff       	call   c000bb4c <File::close()>
c0012be6:	59                   	pop    ecx
c0012be7:	58                   	pop    eax
c0012be8:	6a 13                	push   0x13
c0012bea:	ff 33                	push   DWORD PTR [ebx]
c0012bec:	e8 fd 8e ff ff       	call   c000baee <File::open(FileOpenMode)>
c0012bf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bf3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bf5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bf8:	57                   	push   edi
c0012bf9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012bfd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c01:	50                   	push   eax
c0012c02:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012c05:	83 c4 14             	add    esp,0x14
c0012c08:	57                   	push   edi
c0012c09:	e8 d5 4e ff ff       	call   c0007ae3 <free>
c0012c0e:	83 c4 10             	add    esp,0x10
c0012c11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012c14:	75 10                	jne    c0012c26 <CmOpen(char const*)+0xbd>
c0012c16:	83 ec 0c             	sub    esp,0xc
c0012c19:	68 b9 24 02 c0       	push   0xc00224b9
c0012c1e:	e8 f4 e8 ff ff       	call   c0011517 <KePanic(char const*)>
c0012c23:	83 c4 10             	add    esp,0x10
c0012c26:	50                   	push   eax
c0012c27:	6a 00                	push   0x0
c0012c29:	6a 00                	push   0x0
c0012c2b:	ff 33                	push   DWORD PTR [ebx]
c0012c2d:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012c30:	e8 77 8f ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0012c35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c37:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c39:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c3c:	57                   	push   edi
c0012c3d:	6a 00                	push   0x0
c0012c3f:	6a 2b                	push   0x2b
c0012c41:	50                   	push   eax
c0012c42:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c45:	83 c4 1c             	add    esp,0x1c
c0012c48:	6a 00                	push   0x0
c0012c4a:	6a 00                	push   0x0
c0012c4c:	ff 33                	push   DWORD PTR [ebx]
c0012c4e:	e8 59 8f ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0012c53:	83 c4 0c             	add    esp,0xc
c0012c56:	6a 08                	push   0x8
c0012c58:	68 ca 24 02 c0       	push   0xc00224ca
c0012c5d:	57                   	push   edi
c0012c5e:	e8 1d d7 fe ff       	call   c0000380 <memcmp>
c0012c63:	83 c4 10             	add    esp,0x10
c0012c66:	85 c0                	test   eax,eax
c0012c68:	74 10                	je     c0012c7a <CmOpen(char const*)+0x111>
c0012c6a:	83 ec 0c             	sub    esp,0xc
c0012c6d:	68 d3 24 02 c0       	push   0xc00224d3
c0012c72:	e8 a0 e8 ff ff       	call   c0011517 <KePanic(char const*)>
c0012c77:	83 c4 10             	add    esp,0x10
c0012c7a:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012c7e:	83 c4 10             	add    esp,0x10
c0012c81:	89 d8                	mov    eax,ebx
c0012c83:	5b                   	pop    ebx
c0012c84:	5e                   	pop    esi
c0012c85:	5f                   	pop    edi
c0012c86:	c3                   	ret    

c0012c87 <CmClose(Reghive_Tag*)>:
c0012c87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c8b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012c8f:	74 0b                	je     c0012c9c <CmClose(Reghive_Tag*)+0x15>
c0012c91:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c97:	e9 b0 8e ff ff       	jmp    c000bb4c <File::close()>
c0012c9c:	c3                   	ret    

c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012c9d:	53                   	push   ebx
c0012c9e:	83 ec 18             	sub    esp,0x18
c0012ca1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ca5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ca9:	74 29                	je     c0012cd4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012cab:	50                   	push   eax
c0012cac:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012cb1:	99                   	cdq    
c0012cb2:	52                   	push   edx
c0012cb3:	50                   	push   eax
c0012cb4:	ff 33                	push   DWORD PTR [ebx]
c0012cb6:	e8 f1 8e ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0012cbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cbd:	5a                   	pop    edx
c0012cbe:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012cc2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cc4:	51                   	push   ecx
c0012cc5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012cc9:	6a 00                	push   0x0
c0012ccb:	6a 2b                	push   0x2b
c0012ccd:	50                   	push   eax
c0012cce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012cd1:	83 c4 20             	add    esp,0x20
c0012cd4:	83 c4 18             	add    esp,0x18
c0012cd7:	5b                   	pop    ebx
c0012cd8:	c3                   	ret    

c0012cd9 <CmGetString(Reghive_Tag*, int, char*)>:
c0012cd9:	55                   	push   ebp
c0012cda:	57                   	push   edi
c0012cdb:	56                   	push   esi
c0012cdc:	53                   	push   ebx
c0012cdd:	31 db                	xor    ebx,ebx
c0012cdf:	83 ec 70             	sub    esp,0x70
c0012ce2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012ce6:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012ced:	50                   	push   eax
c0012cee:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012cf5:	55                   	push   ebp
c0012cf6:	e8 a2 ff ff ff       	call   c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012cfb:	83 c4 10             	add    esp,0x10
c0012cfe:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012d03:	c1 e0 08             	shl    eax,0x8
c0012d06:	89 c2                	mov    edx,eax
c0012d08:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012d0d:	09 d0                	or     eax,edx
c0012d0f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012d14:	c1 e0 08             	shl    eax,0x8
c0012d17:	09 d0                	or     eax,edx
c0012d19:	74 25                	je     c0012d40 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012d1b:	52                   	push   edx
c0012d1c:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012d20:	52                   	push   edx
c0012d21:	6b fb 0d             	imul   edi,ebx,0xd
c0012d24:	50                   	push   eax
c0012d25:	55                   	push   ebp
c0012d26:	e8 72 ff ff ff       	call   c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d2b:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012d2f:	b9 27 00 00 00       	mov    ecx,0x27
c0012d34:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012d3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d3d:	83 c4 10             	add    esp,0x10
c0012d40:	83 c3 03             	add    ebx,0x3
c0012d43:	83 fb 15             	cmp    ebx,0x15
c0012d46:	75 b6                	jne    c0012cfe <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012d48:	83 c4 6c             	add    esp,0x6c
c0012d4b:	5b                   	pop    ebx
c0012d4c:	5e                   	pop    esi
c0012d4d:	5f                   	pop    edi
c0012d4e:	5d                   	pop    ebp
c0012d4f:	c3                   	ret    

c0012d50 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012d50:	83 ec 40             	sub    esp,0x40
c0012d53:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012d57:	50                   	push   eax
c0012d58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d60:	e8 38 ff ff ff       	call   c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d65:	83 c4 10             	add    esp,0x10
c0012d68:	83 c8 ff             	or     eax,0xffffffff
c0012d6b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012d70:	75 19                	jne    c0012d8b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012d72:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012d77:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012d7c:	c1 e0 08             	shl    eax,0x8
c0012d7f:	09 c2                	or     edx,eax
c0012d81:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012d86:	c1 e0 10             	shl    eax,0x10
c0012d89:	09 d0                	or     eax,edx
c0012d8b:	83 c4 3c             	add    esp,0x3c
c0012d8e:	c3                   	ret    

c0012d8f <CmGetNext(Reghive_Tag*, int)>:
c0012d8f:	83 ec 40             	sub    esp,0x40
c0012d92:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012d96:	50                   	push   eax
c0012d97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d9b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d9f:	e8 f9 fe ff ff       	call   c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012da4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012da9:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012dae:	c1 e0 08             	shl    eax,0x8
c0012db1:	09 c2                	or     edx,eax
c0012db3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012db8:	83 c4 4c             	add    esp,0x4c
c0012dbb:	c1 e0 10             	shl    eax,0x10
c0012dbe:	09 d0                	or     eax,edx
c0012dc0:	c3                   	ret    

c0012dc1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012dc1:	53                   	push   ebx
c0012dc2:	83 ec 18             	sub    esp,0x18
c0012dc5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012dc9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012dcd:	74 29                	je     c0012df8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012dcf:	50                   	push   eax
c0012dd0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012dd5:	99                   	cdq    
c0012dd6:	52                   	push   edx
c0012dd7:	50                   	push   eax
c0012dd8:	ff 33                	push   DWORD PTR [ebx]
c0012dda:	e8 cd 8d ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0012ddf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012de1:	5a                   	pop    edx
c0012de2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012de6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012de8:	51                   	push   ecx
c0012de9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ded:	6a 00                	push   0x0
c0012def:	6a 2b                	push   0x2b
c0012df1:	50                   	push   eax
c0012df2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012df5:	83 c4 20             	add    esp,0x20
c0012df8:	83 c4 18             	add    esp,0x18
c0012dfb:	5b                   	pop    ebx
c0012dfc:	c3                   	ret    

c0012dfd <CmFreeExtent(Reghive_Tag*, int)>:
c0012dfd:	53                   	push   ebx
c0012dfe:	83 ec 3c             	sub    esp,0x3c
c0012e01:	6a 2b                	push   0x2b
c0012e03:	6a 00                	push   0x0
c0012e05:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012e09:	53                   	push   ebx
c0012e0a:	e8 e1 d6 fe ff       	call   c00004f0 <memset>
c0012e0f:	83 c4 0c             	add    esp,0xc
c0012e12:	53                   	push   ebx
c0012e13:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e1b:	e8 a1 ff ff ff       	call   c0012dc1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e20:	83 c4 48             	add    esp,0x48
c0012e23:	5b                   	pop    ebx
c0012e24:	c3                   	ret    

c0012e25 <CmUpdateHeader(Reghive_Tag*)>:
c0012e25:	83 ec 0c             	sub    esp,0xc
c0012e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e2c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e30:	74 10                	je     c0012e42 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012e32:	52                   	push   edx
c0012e33:	8d 50 05             	lea    edx,[eax+0x5]
c0012e36:	52                   	push   edx
c0012e37:	6a 00                	push   0x0
c0012e39:	50                   	push   eax
c0012e3a:	e8 82 ff ff ff       	call   c0012dc1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e3f:	83 c4 10             	add    esp,0x10
c0012e42:	83 c4 0c             	add    esp,0xc
c0012e45:	c3                   	ret    

c0012e46 <CmExpand(Reghive_Tag*, int)>:
c0012e46:	55                   	push   ebp
c0012e47:	57                   	push   edi
c0012e48:	83 cf ff             	or     edi,0xffffffff
c0012e4b:	56                   	push   esi
c0012e4c:	53                   	push   ebx
c0012e4d:	83 ec 3c             	sub    esp,0x3c
c0012e50:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e54:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e58:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e5c:	74 59                	je     c0012eb7 <CmExpand(Reghive_Tag*, int)+0x71>
c0012e5e:	50                   	push   eax
c0012e5f:	31 d2                	xor    edx,edx
c0012e61:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012e65:	31 ff                	xor    edi,edi
c0012e67:	52                   	push   edx
c0012e68:	50                   	push   eax
c0012e69:	ff 33                	push   DWORD PTR [ebx]
c0012e6b:	e8 3c 8d ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0012e70:	83 c4 0c             	add    esp,0xc
c0012e73:	6a 2b                	push   0x2b
c0012e75:	6a 00                	push   0x0
c0012e77:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012e7b:	55                   	push   ebp
c0012e7c:	e8 6f d6 fe ff       	call   c00004f0 <memset>
c0012e81:	83 c4 10             	add    esp,0x10
c0012e84:	39 f7                	cmp    edi,esi
c0012e86:	7d 1b                	jge    c0012ea3 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012e88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e8a:	83 ec 0c             	sub    esp,0xc
c0012e8d:	47                   	inc    edi
c0012e8e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012e92:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e94:	51                   	push   ecx
c0012e95:	55                   	push   ebp
c0012e96:	6a 00                	push   0x0
c0012e98:	6a 2b                	push   0x2b
c0012e9a:	50                   	push   eax
c0012e9b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012e9e:	83 c4 20             	add    esp,0x20
c0012ea1:	eb e1                	jmp    c0012e84 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012ea3:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012ea6:	83 ec 0c             	sub    esp,0xc
c0012ea9:	01 fe                	add    esi,edi
c0012eab:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012eae:	53                   	push   ebx
c0012eaf:	e8 71 ff ff ff       	call   c0012e25 <CmUpdateHeader(Reghive_Tag*)>
c0012eb4:	83 c4 10             	add    esp,0x10
c0012eb7:	83 c4 3c             	add    esp,0x3c
c0012eba:	89 f8                	mov    eax,edi
c0012ebc:	5b                   	pop    ebx
c0012ebd:	5e                   	pop    esi
c0012ebe:	5f                   	pop    edi
c0012ebf:	5d                   	pop    ebp
c0012ec0:	c3                   	ret    

c0012ec1 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012ec1:	55                   	push   ebp
c0012ec2:	57                   	push   edi
c0012ec3:	56                   	push   esi
c0012ec4:	53                   	push   ebx
c0012ec5:	83 cb ff             	or     ebx,0xffffffff
c0012ec8:	83 ec 1c             	sub    esp,0x1c
c0012ecb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012ecf:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012ed3:	74 68                	je     c0012f3d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ed5:	51                   	push   ecx
c0012ed6:	be 2b 00 00 00       	mov    esi,0x2b
c0012edb:	6a 00                	push   0x0
c0012edd:	31 ff                	xor    edi,edi
c0012edf:	6a 00                	push   0x0
c0012ee1:	31 db                	xor    ebx,ebx
c0012ee3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012ee6:	e8 c1 8c ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0012eeb:	83 c4 10             	add    esp,0x10
c0012eee:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012ef1:	76 3b                	jbe    c0012f2e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012ef3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ef6:	83 ec 0c             	sub    esp,0xc
c0012ef9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012efd:	8b 10                	mov    edx,DWORD PTR [eax]
c0012eff:	51                   	push   ecx
c0012f00:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012f04:	51                   	push   ecx
c0012f05:	6a 00                	push   0x0
c0012f07:	6a 01                	push   0x1
c0012f09:	50                   	push   eax
c0012f0a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012f0d:	83 c4 20             	add    esp,0x20
c0012f10:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012f15:	74 26                	je     c0012f3d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f17:	52                   	push   edx
c0012f18:	43                   	inc    ebx
c0012f19:	57                   	push   edi
c0012f1a:	56                   	push   esi
c0012f1b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f1e:	e8 89 8c ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0012f23:	83 c6 2b             	add    esi,0x2b
c0012f26:	83 d7 00             	adc    edi,0x0
c0012f29:	83 c4 10             	add    esp,0x10
c0012f2c:	eb c0                	jmp    c0012eee <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012f2e:	50                   	push   eax
c0012f2f:	50                   	push   eax
c0012f30:	6a 40                	push   0x40
c0012f32:	55                   	push   ebp
c0012f33:	e8 0e ff ff ff       	call   c0012e46 <CmExpand(Reghive_Tag*, int)>
c0012f38:	83 c4 10             	add    esp,0x10
c0012f3b:	89 c3                	mov    ebx,eax
c0012f3d:	83 c4 1c             	add    esp,0x1c
c0012f40:	89 d8                	mov    eax,ebx
c0012f42:	5b                   	pop    ebx
c0012f43:	5e                   	pop    esi
c0012f44:	5f                   	pop    edi
c0012f45:	5d                   	pop    ebp
c0012f46:	c3                   	ret    

c0012f47 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012f47:	55                   	push   ebp
c0012f48:	57                   	push   edi
c0012f49:	56                   	push   esi
c0012f4a:	53                   	push   ebx
c0012f4b:	81 ec 88 00 00 00    	sub    esp,0x88
c0012f51:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012f58:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012f5f:	e8 5d ff ff ff       	call   c0012ec1 <CmFindUnusedExtent(Reghive_Tag*)>
c0012f64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f68:	83 c4 0c             	add    esp,0xc
c0012f6b:	6a 2b                	push   0x2b
c0012f6d:	6a 00                	push   0x0
c0012f6f:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012f73:	55                   	push   ebp
c0012f74:	e8 77 d5 fe ff       	call   c00004f0 <memset>
c0012f79:	83 c4 10             	add    esp,0x10
c0012f7c:	85 db                	test   ebx,ebx
c0012f7e:	74 12                	je     c0012f92 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012f80:	51                   	push   ecx
c0012f81:	55                   	push   ebp
c0012f82:	53                   	push   ebx
c0012f83:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012f8a:	e8 0e fd ff ff       	call   c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f8f:	83 c4 10             	add    esp,0x10
c0012f92:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012f96:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012f9d:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012fa2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fa4:	85 db                	test   ebx,ebx
c0012fa6:	74 49                	je     c0012ff1 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012fa8:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012fad:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012fb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012fb6:	c1 e0 08             	shl    eax,0x8
c0012fb9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012fbf:	09 c8                	or     eax,ecx
c0012fc1:	74 11                	je     c0012fd4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012fc3:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012fc7:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012fcb:	c1 e8 10             	shr    eax,0x10
c0012fce:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012fd2:	eb 0f                	jmp    c0012fe3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012fd4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012fd9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012fde:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012fe3:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012fe7:	c1 ea 08             	shr    edx,0x8
c0012fea:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012fef:	eb 0f                	jmp    c0013000 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012ff1:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012ff6:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012ffb:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013000:	52                   	push   edx
c0013001:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013005:	50                   	push   eax
c0013006:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001300a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013011:	e8 ab fd ff ff       	call   c0012dc1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013016:	83 c4 10             	add    esp,0x10
c0013019:	85 db                	test   ebx,ebx
c001301b:	74 12                	je     c001302f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c001301d:	50                   	push   eax
c001301e:	55                   	push   ebp
c001301f:	53                   	push   ebx
c0013020:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013027:	e8 95 fd ff ff       	call   c0012dc1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013033:	83 c4 7c             	add    esp,0x7c
c0013036:	5b                   	pop    ebx
c0013037:	5e                   	pop    esi
c0013038:	5f                   	pop    edi
c0013039:	5d                   	pop    ebp
c001303a:	c3                   	ret    

c001303b <CmSetString(Reghive_Tag*, int, char const*)>:
c001303b:	55                   	push   ebp
c001303c:	57                   	push   edi
c001303d:	56                   	push   esi
c001303e:	53                   	push   ebx
c001303f:	bb 27 00 00 00       	mov    ebx,0x27
c0013044:	81 ec 88 00 00 00    	sub    esp,0x88
c001304a:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0013051:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013058:	e8 23 d5 fe ff       	call   c0000580 <strlen>
c001305d:	8d 48 26             	lea    ecx,[eax+0x26]
c0013060:	89 c8                	mov    eax,ecx
c0013062:	99                   	cdq    
c0013063:	f7 fb                	idiv   ebx
c0013065:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013069:	83 c4 10             	add    esp,0x10
c001306c:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013072:	7e 10                	jle    c0013084 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	68 e4 24 02 c0       	push   0xc00224e4
c001307c:	e8 96 e4 ff ff       	call   c0011517 <KePanic(char const*)>
c0013081:	83 c4 10             	add    esp,0x10
c0013084:	53                   	push   ebx
c0013085:	31 ed                	xor    ebp,ebp
c0013087:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001308b:	53                   	push   ebx
c001308c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013093:	57                   	push   edi
c0013094:	e8 04 fc ff ff       	call   c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013099:	83 c4 10             	add    esp,0x10
c001309c:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00130a0:	89 f0                	mov    eax,esi
c00130a2:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00130a6:	c1 e0 08             	shl    eax,0x8
c00130a9:	09 c6                	or     esi,eax
c00130ab:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00130af:	c1 e6 08             	shl    esi,0x8
c00130b2:	09 c6                	or     esi,eax
c00130b4:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00130b8:	7e 72                	jle    c001312c <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00130ba:	85 f6                	test   esi,esi
c00130bc:	75 25                	jne    c00130e3 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00130be:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00130c3:	8d 44 24 45          	lea    eax,[esp+0x45]
c00130c7:	50                   	push   eax
c00130c8:	6a 00                	push   0x0
c00130ca:	6a 00                	push   0x0
c00130cc:	57                   	push   edi
c00130cd:	e8 75 fe ff ff       	call   c0012f47 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00130d2:	83 c4 10             	add    esp,0x10
c00130d5:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00130d8:	89 c6                	mov    esi,eax
c00130da:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00130dd:	c1 f8 10             	sar    eax,0x10
c00130e0:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00130e3:	51                   	push   ecx
c00130e4:	8d 54 24 49          	lea    edx,[esp+0x49]
c00130e8:	52                   	push   edx
c00130e9:	56                   	push   esi
c00130ea:	57                   	push   edi
c00130eb:	e8 ad fb ff ff       	call   c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130f0:	83 c4 0c             	add    esp,0xc
c00130f3:	6a 27                	push   0x27
c00130f5:	6a 00                	push   0x0
c00130f7:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00130fb:	51                   	push   ecx
c00130fc:	e8 ef d3 fe ff       	call   c00004f0 <memset>
c0013101:	6b c5 27             	imul   eax,ebp,0x27
c0013104:	83 c4 0c             	add    esp,0xc
c0013107:	6a 27                	push   0x27
c0013109:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013110:	50                   	push   eax
c0013111:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013115:	51                   	push   ecx
c0013116:	e8 75 d5 fe ff       	call   c0000690 <strncpy>
c001311b:	83 c4 0c             	add    esp,0xc
c001311e:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013122:	52                   	push   edx
c0013123:	56                   	push   esi
c0013124:	57                   	push   edi
c0013125:	e8 97 fc ff ff       	call   c0012dc1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001312a:	eb 19                	jmp    c0013145 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c001312c:	85 f6                	test   esi,esi
c001312e:	74 18                	je     c0013148 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0013130:	52                   	push   edx
c0013131:	52                   	push   edx
c0013132:	56                   	push   esi
c0013133:	57                   	push   edi
c0013134:	e8 c4 fc ff ff       	call   c0012dfd <CmFreeExtent(Reghive_Tag*, int)>
c0013139:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001313d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013141:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013145:	83 c4 10             	add    esp,0x10
c0013148:	45                   	inc    ebp
c0013149:	83 c3 03             	add    ebx,0x3
c001314c:	83 fd 07             	cmp    ebp,0x7
c001314f:	0f 85 47 ff ff ff    	jne    c001309c <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013155:	50                   	push   eax
c0013156:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001315a:	50                   	push   eax
c001315b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013162:	57                   	push   edi
c0013163:	e8 59 fc ff ff       	call   c0012dc1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013168:	81 c4 8c 00 00 00    	add    esp,0x8c
c001316e:	5b                   	pop    ebx
c001316f:	5e                   	pop    esi
c0013170:	5f                   	pop    edi
c0013171:	5d                   	pop    ebp
c0013172:	c3                   	ret    

c0013173 <CmGetMatch(char*, char*, bool, bool*)>:
c0013173:	56                   	push   esi
c0013174:	53                   	push   ebx
c0013175:	50                   	push   eax
c0013176:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001317b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001317f:	74 25                	je     c00131a6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013181:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013184:	31 db                	xor    ebx,ebx
c0013186:	50                   	push   eax
c0013187:	50                   	push   eax
c0013188:	8d 04 9d 80 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc280]
c001318f:	50                   	push   eax
c0013190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013194:	e8 e7 d5 fe ff       	call   c0000780 <strcmp>
c0013199:	83 c4 10             	add    esp,0x10
c001319c:	85 c0                	test   eax,eax
c001319e:	74 2e                	je     c00131ce <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00131a0:	43                   	inc    ebx
c00131a1:	83 fb 3f             	cmp    ebx,0x3f
c00131a4:	75 e0                	jne    c0013186 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00131a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00131a9:	31 db                	xor    ebx,ebx
c00131ab:	51                   	push   ecx
c00131ac:	51                   	push   ecx
c00131ad:	8d 04 9d 80 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc280]
c00131b4:	50                   	push   eax
c00131b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00131b9:	e8 c2 d5 fe ff       	call   c0000780 <strcmp>
c00131be:	83 c4 10             	add    esp,0x10
c00131c1:	85 c0                	test   eax,eax
c00131c3:	74 09                	je     c00131ce <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00131c5:	43                   	inc    ebx
c00131c6:	83 fb 3f             	cmp    ebx,0x3f
c00131c9:	75 e0                	jne    c00131ab <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00131cb:	83 cb ff             	or     ebx,0xffffffff
c00131ce:	5a                   	pop    edx
c00131cf:	89 d8                	mov    eax,ebx
c00131d1:	5b                   	pop    ebx
c00131d2:	5e                   	pop    esi
c00131d3:	c3                   	ret    

c00131d4 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00131d4:	55                   	push   ebp
c00131d5:	31 c0                	xor    eax,eax
c00131d7:	57                   	push   edi
c00131d8:	56                   	push   esi
c00131d9:	53                   	push   ebx
c00131da:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131de:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00131e2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00131e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00131ea:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00131ec:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00131ef:	83 fd 1f             	cmp    ebp,0x1f
c00131f2:	7f 0b                	jg     c00131ff <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00131f4:	0f b6 c2             	movzx  eax,dl
c00131f7:	d3 e0                	shl    eax,cl
c00131f9:	09 07                	or     DWORD PTR [edi],eax
c00131fb:	b0 01                	mov    al,0x1
c00131fd:	01 33                	add    DWORD PTR [ebx],esi
c00131ff:	5b                   	pop    ebx
c0013200:	5e                   	pop    esi
c0013201:	5f                   	pop    edi
c0013202:	5d                   	pop    ebp
c0013203:	c3                   	ret    

c0013204 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0013204:	57                   	push   edi
c0013205:	56                   	push   esi
c0013206:	53                   	push   ebx
c0013207:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001320b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001320f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0013213:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013217:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013219:	7c 17                	jl     c0013232 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001321b:	8b 17                	mov    edx,DWORD PTR [edi]
c001321d:	b8 01 00 00 00       	mov    eax,0x1
c0013222:	d3 e0                	shl    eax,cl
c0013224:	48                   	dec    eax
c0013225:	21 d0                	and    eax,edx
c0013227:	d3 ea                	shr    edx,cl
c0013229:	89 17                	mov    DWORD PTR [edi],edx
c001322b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001322d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013230:	eb 05                	jmp    c0013237 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013232:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013235:	31 c0                	xor    eax,eax
c0013237:	5b                   	pop    ebx
c0013238:	5e                   	pop    esi
c0013239:	5f                   	pop    edi
c001323a:	c3                   	ret    

c001323b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001323b:	83 ec 40             	sub    esp,0x40
c001323e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013242:	50                   	push   eax
c0013243:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013247:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001324b:	e8 4d fa ff ff       	call   c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013250:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013254:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013258:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001325c:	89 10                	mov    DWORD PTR [eax],edx
c001325e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013261:	83 c4 4c             	add    esp,0x4c
c0013264:	c3                   	ret    

c0013265 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013265:	55                   	push   ebp
c0013266:	57                   	push   edi
c0013267:	56                   	push   esi
c0013268:	53                   	push   ebx
c0013269:	83 ec 40             	sub    esp,0x40
c001326c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013270:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013274:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013278:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c001327c:	53                   	push   ebx
c001327d:	56                   	push   esi
c001327e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013282:	e8 16 fa ff ff       	call   c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013287:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001328b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001328f:	83 c4 0c             	add    esp,0xc
c0013292:	53                   	push   ebx
c0013293:	56                   	push   esi
c0013294:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013298:	e8 24 fb ff ff       	call   c0012dc1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001329d:	83 c4 4c             	add    esp,0x4c
c00132a0:	5b                   	pop    ebx
c00132a1:	5e                   	pop    esi
c00132a2:	5f                   	pop    edi
c00132a3:	5d                   	pop    ebp
c00132a4:	c3                   	ret    

c00132a5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00132a5:	55                   	push   ebp
c00132a6:	57                   	push   edi
c00132a7:	56                   	push   esi
c00132a8:	31 f6                	xor    esi,esi
c00132aa:	53                   	push   ebx
c00132ab:	31 db                	xor    ebx,ebx
c00132ad:	83 ec 40             	sub    esp,0x40
c00132b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00132b8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00132c0:	6a 12                	push   0x12
c00132c2:	68 ee 00 00 00       	push   0xee
c00132c7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00132cb:	e8 20 d2 fe ff       	call   c00004f0 <memset>
c00132d0:	83 c4 10             	add    esp,0x10
c00132d3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00132d7:	6a 08                	push   0x8
c00132d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00132dd:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00132e1:	50                   	push   eax
c00132e2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00132e6:	55                   	push   ebp
c00132e7:	57                   	push   edi
c00132e8:	e8 e7 fe ff ff       	call   c00131d4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00132ed:	83 c4 10             	add    esp,0x10
c00132f0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00132f4:	50                   	push   eax
c00132f5:	6a 06                	push   0x6
c00132f7:	55                   	push   ebp
c00132f8:	57                   	push   edi
c00132f9:	e8 06 ff ff ff       	call   c0013204 <CmGetShift(unsigned int*, int*, int, bool*)>
c00132fe:	83 c4 10             	add    esp,0x10
c0013301:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013306:	74 07                	je     c001330f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013308:	46                   	inc    esi
c0013309:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001330d:	eb e1                	jmp    c00132f0 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001330f:	43                   	inc    ebx
c0013310:	83 fb 12             	cmp    ebx,0x12
c0013313:	75 c2                	jne    c00132d7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013315:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013319:	31 f6                	xor    esi,esi
c001331b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001331e:	50                   	push   eax
c001331f:	50                   	push   eax
c0013320:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0013325:	46                   	inc    esi
c0013326:	8d 04 85 80 3d 02 c0 	lea    eax,[eax*4-0x3ffdc280]
c001332d:	50                   	push   eax
c001332e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013332:	e8 39 d5 fe ff       	call   c0000870 <strcat>
c0013337:	83 c4 10             	add    esp,0x10
c001333a:	83 fe 18             	cmp    esi,0x18
c001333d:	75 df                	jne    c001331e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001333f:	83 c4 3c             	add    esp,0x3c
c0013342:	31 c0                	xor    eax,eax
c0013344:	5b                   	pop    ebx
c0013345:	5e                   	pop    esi
c0013346:	5f                   	pop    edi
c0013347:	5d                   	pop    ebp
c0013348:	c3                   	ret    

c0013349 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013349:	83 ec 40             	sub    esp,0x40
c001334c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013350:	50                   	push   eax
c0013351:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013355:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013359:	e8 3f f9 ff ff       	call   c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001335e:	58                   	pop    eax
c001335f:	5a                   	pop    edx
c0013360:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013364:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013368:	50                   	push   eax
c0013369:	e8 37 ff ff ff       	call   c00132a5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001336e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013373:	83 c4 4c             	add    esp,0x4c
c0013376:	c3                   	ret    

c0013377 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013377:	55                   	push   ebp
c0013378:	57                   	push   edi
c0013379:	56                   	push   esi
c001337a:	53                   	push   ebx
c001337b:	31 db                	xor    ebx,ebx
c001337d:	83 ec 70             	sub    esp,0x70
c0013380:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013387:	6a 30                	push   0x30
c0013389:	6a 00                	push   0x0
c001338b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001338f:	56                   	push   esi
c0013390:	e8 5b d1 fe ff       	call   c00004f0 <memset>
c0013395:	83 c4 10             	add    esp,0x10
c0013398:	83 ec 0c             	sub    esp,0xc
c001339b:	57                   	push   edi
c001339c:	e8 df d1 fe ff       	call   c0000580 <strlen>
c00133a1:	83 c4 10             	add    esp,0x10
c00133a4:	39 d8                	cmp    eax,ebx
c00133a6:	76 16                	jbe    c00133be <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00133a8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00133ac:	83 ec 0c             	sub    esp,0xc
c00133af:	50                   	push   eax
c00133b0:	e8 ab d5 fe ff       	call   c0000960 <toupper>
c00133b5:	83 c4 10             	add    esp,0x10
c00133b8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00133bb:	43                   	inc    ebx
c00133bc:	eb da                	jmp    c0013398 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00133be:	52                   	push   edx
c00133bf:	31 db                	xor    ebx,ebx
c00133c1:	6a 18                	push   0x18
c00133c3:	31 ff                	xor    edi,edi
c00133c5:	6a 3f                	push   0x3f
c00133c7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00133cb:	50                   	push   eax
c00133cc:	e8 1f d1 fe ff       	call   c00004f0 <memset>
c00133d1:	83 c4 10             	add    esp,0x10
c00133d4:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00133d8:	8d 74 24 10          	lea    esi,[esp+0x10]
c00133dc:	84 c0                	test   al,al
c00133de:	0f 84 af 00 00 00    	je     c0013493 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00133e4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00133e8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00133eb:	83 ec 0c             	sub    esp,0xc
c00133ee:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c00133f3:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00133f7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00133fb:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0013400:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013404:	56                   	push   esi
c0013405:	e8 76 d1 fe ff       	call   c0000580 <strlen>
c001340a:	83 c4 10             	add    esp,0x10
c001340d:	85 c0                	test   eax,eax
c001340f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013413:	74 0b                	je     c0013420 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013415:	50                   	push   eax
c0013416:	6a 01                	push   0x1
c0013418:	56                   	push   esi
c0013419:	8d 44 24 20          	lea    eax,[esp+0x20]
c001341d:	50                   	push   eax
c001341e:	eb 0a                	jmp    c001342a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013420:	50                   	push   eax
c0013421:	6a 00                	push   0x0
c0013423:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013427:	50                   	push   eax
c0013428:	6a 00                	push   0x0
c001342a:	e8 44 fd ff ff       	call   c0013173 <CmGetMatch(char*, char*, bool, bool*)>
c001342f:	83 c4 10             	add    esp,0x10
c0013432:	83 f8 ff             	cmp    eax,0xffffffff
c0013435:	75 1a                	jne    c0013451 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013437:	83 ec 0c             	sub    esp,0xc
c001343a:	68 f9 24 02 c0       	push   0xc00224f9
c001343f:	e8 d3 e0 ff ff       	call   c0011517 <KePanic(char const*)>
c0013444:	83 c4 10             	add    esp,0x10
c0013447:	b8 02 00 00 00       	mov    eax,0x2
c001344c:	e9 bb 00 00 00       	jmp    c001350c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013451:	83 ff 18             	cmp    edi,0x18
c0013454:	75 1a                	jne    c0013470 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013456:	83 ec 0c             	sub    esp,0xc
c0013459:	68 0e 25 02 c0       	push   0xc002250e
c001345e:	e8 b4 e0 ff ff       	call   c0011517 <KePanic(char const*)>
c0013463:	83 c4 10             	add    esp,0x10
c0013466:	b8 01 00 00 00       	mov    eax,0x1
c001346b:	e9 9c 00 00 00       	jmp    c001350c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013470:	47                   	inc    edi
c0013471:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013476:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001347a:	0f 45 dd             	cmovne ebx,ebp
c001347d:	83 ec 0c             	sub    esp,0xc
c0013480:	56                   	push   esi
c0013481:	e8 fa d0 fe ff       	call   c0000580 <strlen>
c0013486:	83 c4 10             	add    esp,0x10
c0013489:	85 c0                	test   eax,eax
c001348b:	74 06                	je     c0013493 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001348d:	43                   	inc    ebx
c001348e:	e9 41 ff ff ff       	jmp    c00133d4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013493:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001349b:	31 db                	xor    ebx,ebx
c001349d:	31 ff                	xor    edi,edi
c001349f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00134a7:	50                   	push   eax
c00134a8:	6a 12                	push   0x12
c00134aa:	68 ee 00 00 00       	push   0xee
c00134af:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00134b6:	e8 35 d0 fe ff       	call   c00004f0 <memset>
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00134c2:	83 fb 17             	cmp    ebx,0x17
c00134c5:	7e 26                	jle    c00134ed <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00134c7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134cb:	50                   	push   eax
c00134cc:	6a 08                	push   0x8
c00134ce:	55                   	push   ebp
c00134cf:	56                   	push   esi
c00134d0:	e8 2f fd ff ff       	call   c0013204 <CmGetShift(unsigned int*, int*, int, bool*)>
c00134d5:	83 c4 10             	add    esp,0x10
c00134d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00134dd:	74 26                	je     c0013505 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00134df:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00134e6:	4b                   	dec    ebx
c00134e7:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00134ea:	47                   	inc    edi
c00134eb:	eb 1c                	jmp    c0013509 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00134ed:	6a 06                	push   0x6
c00134ef:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00134f4:	50                   	push   eax
c00134f5:	55                   	push   ebp
c00134f6:	56                   	push   esi
c00134f7:	e8 d8 fc ff ff       	call   c00131d4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00134fc:	83 c4 10             	add    esp,0x10
c00134ff:	84 c0                	test   al,al
c0013501:	75 06                	jne    c0013509 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013503:	eb c2                	jmp    c00134c7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0013505:	31 c0                	xor    eax,eax
c0013507:	eb 03                	jmp    c001350c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013509:	43                   	inc    ebx
c001350a:	eb b2                	jmp    c00134be <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c001350c:	83 c4 6c             	add    esp,0x6c
c001350f:	5b                   	pop    ebx
c0013510:	5e                   	pop    esi
c0013511:	5f                   	pop    edi
c0013512:	5d                   	pop    ebp
c0013513:	c3                   	ret    

c0013514 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013514:	53                   	push   ebx
c0013515:	83 ec 3c             	sub    esp,0x3c
c0013518:	6a 2b                	push   0x2b
c001351a:	6a 00                	push   0x0
c001351c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013520:	53                   	push   ebx
c0013521:	e8 ca cf fe ff       	call   c00004f0 <memset>
c0013526:	58                   	pop    eax
c0013527:	5a                   	pop    edx
c0013528:	8d 44 24 11          	lea    eax,[esp+0x11]
c001352c:	50                   	push   eax
c001352d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013531:	e8 41 fe ff ff       	call   c0013377 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013536:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001353b:	83 c4 0c             	add    esp,0xc
c001353e:	6a 15                	push   0x15
c0013540:	6a 00                	push   0x0
c0013542:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013546:	50                   	push   eax
c0013547:	e8 a4 cf fe ff       	call   c00004f0 <memset>
c001354c:	53                   	push   ebx
c001354d:	6a 00                	push   0x0
c001354f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013553:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013557:	e8 eb f9 ff ff       	call   c0012f47 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001355c:	83 c4 58             	add    esp,0x58
c001355f:	5b                   	pop    ebx
c0013560:	c3                   	ret    

c0013561 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013561:	56                   	push   esi
c0013562:	53                   	push   ebx
c0013563:	83 ec 48             	sub    esp,0x48
c0013566:	6a 12                	push   0x12
c0013568:	68 ff 00 00 00       	push   0xff
c001356d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013571:	56                   	push   esi
c0013572:	e8 79 cf fe ff       	call   c00004f0 <memset>
c0013577:	5a                   	pop    edx
c0013578:	59                   	pop    ecx
c0013579:	56                   	push   esi
c001357a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001357e:	e8 f4 fd ff ff       	call   c0013377 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013583:	83 c4 10             	add    esp,0x10
c0013586:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001358a:	85 db                	test   ebx,ebx
c001358c:	74 42                	je     c00135d0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001358e:	50                   	push   eax
c001358f:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013593:	50                   	push   eax
c0013594:	53                   	push   ebx
c0013595:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013599:	e8 ff f6 ff ff       	call   c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001359e:	83 c4 0c             	add    esp,0xc
c00135a1:	6a 12                	push   0x12
c00135a3:	8d 44 24 21          	lea    eax,[esp+0x21]
c00135a7:	50                   	push   eax
c00135a8:	56                   	push   esi
c00135a9:	e8 d2 cd fe ff       	call   c0000380 <memcmp>
c00135ae:	83 c4 10             	add    esp,0x10
c00135b1:	85 c0                	test   eax,eax
c00135b3:	74 1e                	je     c00135d3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00135b5:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00135ba:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00135bf:	c1 e3 08             	shl    ebx,0x8
c00135c2:	09 d8                	or     eax,ebx
c00135c4:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00135c9:	c1 e3 10             	shl    ebx,0x10
c00135cc:	09 c3                	or     ebx,eax
c00135ce:	eb ba                	jmp    c001358a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00135d0:	83 cb ff             	or     ebx,0xffffffff
c00135d3:	83 c4 44             	add    esp,0x44
c00135d6:	89 d8                	mov    eax,ebx
c00135d8:	5b                   	pop    ebx
c00135d9:	5e                   	pop    esi
c00135da:	c3                   	ret    

c00135db <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00135db:	57                   	push   edi
c00135dc:	56                   	push   esi
c00135dd:	53                   	push   ebx
c00135de:	83 ec 34             	sub    esp,0x34
c00135e1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00135e5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00135e9:	6a 2b                	push   0x2b
c00135eb:	6a 00                	push   0x0
c00135ed:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00135f1:	53                   	push   ebx
c00135f2:	e8 f9 ce fe ff       	call   c00004f0 <memset>
c00135f7:	58                   	pop    eax
c00135f8:	5a                   	pop    edx
c00135f9:	8d 44 24 11          	lea    eax,[esp+0x11]
c00135fd:	50                   	push   eax
c00135fe:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013602:	e8 70 fd ff ff       	call   c0013377 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013607:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c001360b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001360f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013613:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013617:	53                   	push   ebx
c0013618:	6a 00                	push   0x0
c001361a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001361e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013622:	e8 20 f9 ff ff       	call   c0012f47 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013627:	83 c4 50             	add    esp,0x50
c001362a:	5b                   	pop    ebx
c001362b:	5e                   	pop    esi
c001362c:	5f                   	pop    edi
c001362d:	c3                   	ret    

c001362e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001362e:	55                   	push   ebp
c001362f:	57                   	push   edi
c0013630:	56                   	push   esi
c0013631:	53                   	push   ebx
c0013632:	83 ec 40             	sub    esp,0x40
c0013635:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013639:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001363d:	6a 2b                	push   0x2b
c001363f:	6a 00                	push   0x0
c0013641:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013645:	56                   	push   esi
c0013646:	e8 a5 ce fe ff       	call   c00004f0 <memset>
c001364b:	5f                   	pop    edi
c001364c:	89 ef                	mov    edi,ebp
c001364e:	58                   	pop    eax
c001364f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013653:	50                   	push   eax
c0013654:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013658:	e8 1a fd ff ff       	call   c0013377 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001365d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013662:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013667:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001366c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013671:	83 c4 10             	add    esp,0x10
c0013674:	85 ed                	test   ebp,ebp
c0013676:	74 14                	je     c001368c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013678:	51                   	push   ecx
c0013679:	51                   	push   ecx
c001367a:	57                   	push   edi
c001367b:	53                   	push   ebx
c001367c:	e8 0e f7 ff ff       	call   c0012d8f <CmGetNext(Reghive_Tag*, int)>
c0013681:	83 c4 10             	add    esp,0x10
c0013684:	85 c0                	test   eax,eax
c0013686:	74 04                	je     c001368c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013688:	89 c7                	mov    edi,eax
c001368a:	eb e8                	jmp    c0013674 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001368c:	56                   	push   esi
c001368d:	6a 00                	push   0x0
c001368f:	57                   	push   edi
c0013690:	53                   	push   ebx
c0013691:	e8 b1 f8 ff ff       	call   c0012f47 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013696:	83 c4 0c             	add    esp,0xc
c0013699:	56                   	push   esi
c001369a:	50                   	push   eax
c001369b:	89 c7                	mov    edi,eax
c001369d:	53                   	push   ebx
c001369e:	e8 fa f5 ff ff       	call   c0012c9d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00136a3:	58                   	pop    eax
c00136a4:	5a                   	pop    edx
c00136a5:	6a 6c                	push   0x6c
c00136a7:	6a 00                	push   0x0
c00136a9:	6a 00                	push   0x0
c00136ab:	68 1f 25 02 c0       	push   0xc002251f
c00136b0:	57                   	push   edi
c00136b1:	53                   	push   ebx
c00136b2:	e8 24 ff ff ff       	call   c00135db <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00136b7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00136bb:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00136bf:	c1 e8 10             	shr    eax,0x10
c00136c2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00136c6:	83 c4 1c             	add    esp,0x1c
c00136c9:	56                   	push   esi
c00136ca:	57                   	push   edi
c00136cb:	53                   	push   ebx
c00136cc:	e8 f0 f6 ff ff       	call   c0012dc1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00136d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00136d6:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00136db:	c1 e0 08             	shl    eax,0x8
c00136de:	09 c2                	or     edx,eax
c00136e0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00136e5:	83 c4 4c             	add    esp,0x4c
c00136e8:	5b                   	pop    ebx
c00136e9:	5e                   	pop    esi
c00136ea:	c1 e0 10             	shl    eax,0x10
c00136ed:	09 d0                	or     eax,edx
c00136ef:	5f                   	pop    edi
c00136f0:	5d                   	pop    ebp
c00136f1:	c3                   	ret    

c00136f2 <zStrtok(char*, char const*)>:
c00136f2:	55                   	push   ebp
c00136f3:	57                   	push   edi
c00136f4:	56                   	push   esi
c00136f5:	53                   	push   ebx
c00136f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136fe:	85 db                	test   ebx,ebx
c0013700:	74 2f                	je     c0013731 <zStrtok(char*, char const*)+0x3f>
c0013702:	85 c0                	test   eax,eax
c0013704:	75 09                	jne    c001370f <zStrtok(char*, char const*)+0x1d>
c0013706:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001370b:	85 c0                	test   eax,eax
c001370d:	74 50                	je     c001375f <zStrtok(char*, char const*)+0x6d>
c001370f:	31 c9                	xor    ecx,ecx
c0013711:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013715:	74 03                	je     c001371a <zStrtok(char*, char const*)+0x28>
c0013717:	41                   	inc    ecx
c0013718:	eb f7                	jmp    c0013711 <zStrtok(char*, char const*)+0x1f>
c001371a:	31 d2                	xor    edx,edx
c001371c:	39 ca                	cmp    edx,ecx
c001371e:	74 15                	je     c0013735 <zStrtok(char*, char const*)+0x43>
c0013720:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013724:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013727:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001372a:	39 ee                	cmp    esi,ebp
c001372c:	74 13                	je     c0013741 <zStrtok(char*, char const*)+0x4f>
c001372e:	42                   	inc    edx
c001372f:	eb eb                	jmp    c001371c <zStrtok(char*, char const*)+0x2a>
c0013731:	31 c0                	xor    eax,eax
c0013733:	eb 2a                	jmp    c001375f <zStrtok(char*, char const*)+0x6d>
c0013735:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c001373f:	eb 1e                	jmp    c001375f <zStrtok(char*, char const*)+0x6d>
c0013741:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013744:	39 ce                	cmp    esi,ecx
c0013746:	75 0a                	jne    c0013752 <zStrtok(char*, char const*)+0x60>
c0013748:	40                   	inc    eax
c0013749:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001374e:	89 d8                	mov    eax,ebx
c0013750:	eb 0d                	jmp    c001375f <zStrtok(char*, char const*)+0x6d>
c0013752:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013755:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013759:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c001375f:	5b                   	pop    ebx
c0013760:	5e                   	pop    esi
c0013761:	5f                   	pop    edi
c0013762:	5d                   	pop    ebp
c0013763:	c3                   	ret    

c0013764 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013764:	57                   	push   edi
c0013765:	56                   	push   esi
c0013766:	53                   	push   ebx
c0013767:	81 ec 08 01 00 00    	sub    esp,0x108
c001376d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013774:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001377b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001377f:	53                   	push   ebx
c0013780:	e8 cb ce fe ff       	call   c0000650 <strcpy>
c0013785:	59                   	pop    ecx
c0013786:	5e                   	pop    esi
c0013787:	68 83 28 02 c0       	push   0xc0022883
c001378c:	53                   	push   ebx
c001378d:	bb 01 00 00 00       	mov    ebx,0x1
c0013792:	e8 5b ff ff ff       	call   c00136f2 <zStrtok(char*, char const*)>
c0013797:	83 c4 10             	add    esp,0x10
c001379a:	85 c0                	test   eax,eax
c001379c:	74 3b                	je     c00137d9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001379e:	52                   	push   edx
c001379f:	50                   	push   eax
c00137a0:	6a 01                	push   0x1
c00137a2:	57                   	push   edi
c00137a3:	e8 b9 fd ff ff       	call   c0013561 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00137a8:	59                   	pop    ecx
c00137a9:	5e                   	pop    esi
c00137aa:	89 c3                	mov    ebx,eax
c00137ac:	68 83 28 02 c0       	push   0xc0022883
c00137b1:	6a 00                	push   0x0
c00137b3:	e8 3a ff ff ff       	call   c00136f2 <zStrtok(char*, char const*)>
c00137b8:	83 c4 10             	add    esp,0x10
c00137bb:	85 c0                	test   eax,eax
c00137bd:	89 c6                	mov    esi,eax
c00137bf:	74 18                	je     c00137d9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00137c1:	52                   	push   edx
c00137c2:	52                   	push   edx
c00137c3:	53                   	push   ebx
c00137c4:	57                   	push   edi
c00137c5:	e8 86 f5 ff ff       	call   c0012d50 <CmEnterDirectory(Reghive_Tag*, int)>
c00137ca:	83 c4 10             	add    esp,0x10
c00137cd:	83 f8 ff             	cmp    eax,0xffffffff
c00137d0:	89 c3                	mov    ebx,eax
c00137d2:	74 05                	je     c00137d9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00137d4:	50                   	push   eax
c00137d5:	56                   	push   esi
c00137d6:	53                   	push   ebx
c00137d7:	eb c9                	jmp    c00137a2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00137d9:	81 c4 00 01 00 00    	add    esp,0x100
c00137df:	89 d8                	mov    eax,ebx
c00137e1:	5b                   	pop    ebx
c00137e2:	5e                   	pop    esi
c00137e3:	5f                   	pop    edi
c00137e4:	c3                   	ret    

c00137e5 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00137e5:	55                   	push   ebp
c00137e6:	57                   	push   edi
c00137e7:	56                   	push   esi
c00137e8:	53                   	push   ebx
c00137e9:	83 ec 5c             	sub    esp,0x5c
c00137ec:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00137f0:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00137f4:	85 db                	test   ebx,ebx
c00137f6:	0f 8e 84 00 00 00    	jle    c0013880 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00137fc:	57                   	push   edi
c00137fd:	31 ed                	xor    ebp,ebp
c00137ff:	6a 32                	push   0x32
c0013801:	6a 00                	push   0x0
c0013803:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013807:	57                   	push   edi
c0013808:	e8 e3 cc fe ff       	call   c00004f0 <memset>
c001380d:	83 c4 0c             	add    esp,0xc
c0013810:	57                   	push   edi
c0013811:	53                   	push   ebx
c0013812:	56                   	push   esi
c0013813:	e8 31 fb ff ff       	call   c0013349 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013818:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001381c:	83 c4 10             	add    esp,0x10
c001381f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013823:	7d 13                	jge    c0013838 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013825:	83 ec 0c             	sub    esp,0xc
c0013828:	45                   	inc    ebp
c0013829:	68 27 2c 02 c0       	push   0xc0022c27
c001382e:	e8 d7 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013833:	83 c4 10             	add    esp,0x10
c0013836:	eb e7                	jmp    c001381f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013838:	51                   	push   ecx
c0013839:	57                   	push   edi
c001383a:	53                   	push   ebx
c001383b:	68 25 25 02 c0       	push   0xc0022525
c0013840:	e8 c5 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013845:	83 c4 10             	add    esp,0x10
c0013848:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001384d:	75 1e                	jne    c001386d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001384f:	52                   	push   edx
c0013850:	52                   	push   edx
c0013851:	53                   	push   ebx
c0013852:	56                   	push   esi
c0013853:	e8 f8 f4 ff ff       	call   c0012d50 <CmEnterDirectory(Reghive_Tag*, int)>
c0013858:	83 c4 0c             	add    esp,0xc
c001385b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001385f:	8d 51 04             	lea    edx,[ecx+0x4]
c0013862:	52                   	push   edx
c0013863:	50                   	push   eax
c0013864:	56                   	push   esi
c0013865:	e8 7b ff ff ff       	call   c00137e5 <CmDisplayTree(Reghive_Tag*, int, int)>
c001386a:	83 c4 10             	add    esp,0x10
c001386d:	50                   	push   eax
c001386e:	50                   	push   eax
c001386f:	53                   	push   ebx
c0013870:	56                   	push   esi
c0013871:	e8 19 f5 ff ff       	call   c0012d8f <CmGetNext(Reghive_Tag*, int)>
c0013876:	83 c4 10             	add    esp,0x10
c0013879:	89 c3                	mov    ebx,eax
c001387b:	e9 74 ff ff ff       	jmp    c00137f4 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013880:	83 c4 5c             	add    esp,0x5c
c0013883:	5b                   	pop    ebx
c0013884:	5e                   	pop    esi
c0013885:	5f                   	pop    edi
c0013886:	5d                   	pop    ebp
c0013887:	c3                   	ret    

c0013888 <CmSplitFinalSlashInPlace(char*)>:
c0013888:	53                   	push   ebx
c0013889:	83 ec 14             	sub    esp,0x14
c001388c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013890:	53                   	push   ebx
c0013891:	e8 ea cc fe ff       	call   c0000580 <strlen>
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	48                   	dec    eax
c001389a:	85 c0                	test   eax,eax
c001389c:	74 15                	je     c00138b3 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001389e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00138a2:	8d 14 03             	lea    edx,[ebx+eax*1]
c00138a5:	75 09                	jne    c00138b0 <CmSplitFinalSlashInPlace(char*)+0x28>
c00138a7:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00138aa:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00138ae:	eb 05                	jmp    c00138b5 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00138b0:	48                   	dec    eax
c00138b1:	eb e7                	jmp    c001389a <CmSplitFinalSlashInPlace(char*)+0x12>
c00138b3:	31 c0                	xor    eax,eax
c00138b5:	83 c4 08             	add    esp,0x8
c00138b8:	5b                   	pop    ebx
c00138b9:	c3                   	ret    

c00138ba <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00138ba:	55                   	push   ebp
c00138bb:	57                   	push   edi
c00138bc:	56                   	push   esi
c00138bd:	53                   	push   ebx
c00138be:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00138c4:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00138cb:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00138ce:	8d 43 01             	lea    eax,[ebx+0x1]
c00138d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138d5:	89 f0                	mov    eax,esi
c00138d7:	3c 40                	cmp    al,0x40
c00138d9:	75 1b                	jne    c00138f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00138db:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00138de:	85 c0                	test   eax,eax
c00138e0:	74 08                	je     c00138ea <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00138e2:	83 f8 3a             	cmp    eax,0x3a
c00138e5:	74 03                	je     c00138ea <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00138e7:	43                   	inc    ebx
c00138e8:	eb f1                	jmp    c00138db <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00138ea:	85 c0                	test   eax,eax
c00138ec:	0f 84 45 01 00 00    	je     c0013a37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00138f2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00138f5:	43                   	inc    ebx
c00138f6:	50                   	push   eax
c00138f7:	6a 40                	push   0x40
c00138f9:	6a 00                	push   0x0
c00138fb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00138ff:	50                   	push   eax
c0013900:	e8 eb cb fe ff       	call   c00004f0 <memset>
c0013905:	89 f1                	mov    ecx,esi
c0013907:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001390e:	31 c0                	xor    eax,eax
c0013910:	83 c4 10             	add    esp,0x10
c0013913:	0f be f1             	movsx  esi,cl
c0013916:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013919:	85 d2                	test   edx,edx
c001391b:	89 d1                	mov    ecx,edx
c001391d:	0f 84 14 01 00 00    	je     c0013a37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013923:	3d c7 00 00 00       	cmp    eax,0xc7
c0013928:	0f 8f 09 01 00 00    	jg     c0013a37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001392e:	83 fa 0a             	cmp    edx,0xa
c0013931:	0f 85 f1 00 00 00    	jne    c0013a28 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013937:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001393c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013941:	89 c8                	mov    eax,ecx
c0013943:	a8 df                	test   al,0xdf
c0013945:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001394a:	83 f9 23             	cmp    ecx,0x23
c001394d:	0f 94 c2             	sete   dl
c0013950:	89 d5                	mov    ebp,edx
c0013952:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013956:	09 ea                	or     edx,ebp
c0013958:	80 e2 01             	and    dl,0x1
c001395b:	75 47                	jne    c00139a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001395d:	83 e8 09             	sub    eax,0x9
c0013960:	3c 01                	cmp    al,0x1
c0013962:	76 40                	jbe    c00139a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013964:	83 f9 5b             	cmp    ecx,0x5b
c0013967:	75 42                	jne    c00139ab <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013969:	83 fe 40             	cmp    esi,0x40
c001396c:	75 36                	jne    c00139a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001396e:	83 ec 0c             	sub    esp,0xc
c0013971:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013975:	55                   	push   ebp
c0013976:	e8 05 cc fe ff       	call   c0000580 <strlen>
c001397b:	83 c4 10             	add    esp,0x10
c001397e:	83 f8 3f             	cmp    eax,0x3f
c0013981:	0f 87 b0 00 00 00    	ja     c0013a37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013987:	50                   	push   eax
c0013988:	50                   	push   eax
c0013989:	55                   	push   ebp
c001398a:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c001398e:	55                   	push   ebp
c001398f:	e8 bc cc fe ff       	call   c0000650 <strcpy>
c0013994:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013997:	e8 e4 cb fe ff       	call   c0000580 <strlen>
c001399c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00139a1:	83 c4 10             	add    esp,0x10
c00139a4:	31 d2                	xor    edx,edx
c00139a6:	e9 84 00 00 00       	jmp    c0013a2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c00139ab:	83 fe 40             	cmp    esi,0x40
c00139ae:	74 06                	je     c00139b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c00139b0:	8d 54 24 58          	lea    edx,[esp+0x58]
c00139b4:	eb 19                	jmp    c00139cf <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00139b6:	51                   	push   ecx
c00139b7:	51                   	push   ecx
c00139b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139bc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139c0:	50                   	push   eax
c00139c1:	e8 ba cd fe ff       	call   c0000780 <strcmp>
c00139c6:	83 c4 10             	add    esp,0x10
c00139c9:	85 c0                	test   eax,eax
c00139cb:	75 d7                	jne    c00139a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00139cd:	eb e1                	jmp    c00139b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c00139cf:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00139d2:	85 c9                	test   ecx,ecx
c00139d4:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00139d9:	83 f9 3d             	cmp    ecx,0x3d
c00139dc:	0f 94 c0             	sete   al
c00139df:	89 c5                	mov    ebp,eax
c00139e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139e5:	09 e8                	or     eax,ebp
c00139e7:	a8 01                	test   al,0x1
c00139e9:	89 c5                	mov    ebp,eax
c00139eb:	75 03                	jne    c00139f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c00139ed:	42                   	inc    edx
c00139ee:	eb df                	jmp    c00139cf <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00139f0:	85 c9                	test   ecx,ecx
c00139f2:	74 43                	je     c0013a37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00139f8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00139fb:	52                   	push   edx
c00139fc:	52                   	push   edx
c00139fd:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013a01:	50                   	push   eax
c0013a02:	53                   	push   ebx
c0013a03:	e8 78 cd fe ff       	call   c0000780 <strcmp>
c0013a08:	83 c4 10             	add    esp,0x10
c0013a0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a0f:	85 c0                	test   eax,eax
c0013a11:	75 91                	jne    c00139a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a13:	50                   	push   eax
c0013a14:	42                   	inc    edx
c0013a15:	50                   	push   eax
c0013a16:	52                   	push   edx
c0013a17:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013a1e:	e8 2d cc fe ff       	call   c0000650 <strcpy>
c0013a23:	83 c4 10             	add    esp,0x10
c0013a26:	eb 11                	jmp    c0013a39 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013a28:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013a2c:	8d 50 01             	lea    edx,[eax+0x1]
c0013a2f:	47                   	inc    edi
c0013a30:	89 d0                	mov    eax,edx
c0013a32:	e9 df fe ff ff       	jmp    c0013916 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013a37:	31 ed                	xor    ebp,ebp
c0013a39:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013a3f:	89 e8                	mov    eax,ebp
c0013a41:	5b                   	pop    ebx
c0013a42:	5e                   	pop    esi
c0013a43:	5f                   	pop    edi
c0013a44:	5d                   	pop    ebp
c0013a45:	c3                   	ret    

c0013a46 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013a46:	57                   	push   edi
c0013a47:	56                   	push   esi
c0013a48:	53                   	push   ebx
c0013a49:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a4f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013a56:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013a5d:	53                   	push   ebx
c0013a5e:	e8 1d cb fe ff       	call   c0000580 <strlen>
c0013a63:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a66:	89 c7                	mov    edi,eax
c0013a68:	e8 13 cb fe ff       	call   c0000580 <strlen>
c0013a6d:	83 c4 10             	add    esp,0x10
c0013a70:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013a74:	3d ff 00 00 00       	cmp    eax,0xff
c0013a79:	0f 87 d3 00 00 00    	ja     c0013b52 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013a7f:	57                   	push   edi
c0013a80:	57                   	push   edi
c0013a81:	56                   	push   esi
c0013a82:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013a86:	56                   	push   esi
c0013a87:	e8 c4 cb fe ff       	call   c0000650 <strcpy>
c0013a8c:	58                   	pop    eax
c0013a8d:	5a                   	pop    edx
c0013a8e:	68 83 28 02 c0       	push   0xc0022883
c0013a93:	56                   	push   esi
c0013a94:	e8 d7 cd fe ff       	call   c0000870 <strcat>
c0013a99:	59                   	pop    ecx
c0013a9a:	5f                   	pop    edi
c0013a9b:	53                   	push   ebx
c0013a9c:	56                   	push   esi
c0013a9d:	e8 ce cd fe ff       	call   c0000870 <strcat>
c0013aa2:	58                   	pop    eax
c0013aa3:	5a                   	pop    edx
c0013aa4:	68 2f 25 02 c0       	push   0xc002252f
c0013aa9:	56                   	push   esi
c0013aaa:	e8 c1 cd fe ff       	call   c0000870 <strcat>
c0013aaf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013ab6:	e8 18 40 ff ff       	call   c0007ad3 <malloc>
c0013abb:	83 c4 0c             	add    esp,0xc
c0013abe:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013ac4:	56                   	push   esi
c0013ac5:	50                   	push   eax
c0013ac6:	89 c3                	mov    ebx,eax
c0013ac8:	e8 03 80 ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c0013acd:	83 c4 10             	add    esp,0x10
c0013ad0:	85 db                	test   ebx,ebx
c0013ad2:	74 7e                	je     c0013b52 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013ad4:	51                   	push   ecx
c0013ad5:	51                   	push   ecx
c0013ad6:	6a 01                	push   0x1
c0013ad8:	53                   	push   ebx
c0013ad9:	e8 10 80 ff ff       	call   c000baee <File::open(FileOpenMode)>
c0013ade:	83 c4 10             	add    esp,0x10
c0013ae1:	85 c0                	test   eax,eax
c0013ae3:	74 08                	je     c0013aed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013ae5:	83 ec 0c             	sub    esp,0xc
c0013ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013aea:	53                   	push   ebx
c0013aeb:	eb 5f                	jmp    c0013b4c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013aed:	52                   	push   edx
c0013aee:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013af2:	50                   	push   eax
c0013af3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013af7:	50                   	push   eax
c0013af8:	53                   	push   ebx
c0013af9:	e8 f2 82 ff ff       	call   c000bdf0 <File::stat(unsigned long long*, bool*)>
c0013afe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b02:	83 c4 10             	add    esp,0x10
c0013b05:	89 c1                	mov    ecx,eax
c0013b07:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013b0b:	74 31                	je     c0013b3e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b0d:	83 ec 0c             	sub    esp,0xc
c0013b10:	50                   	push   eax
c0013b11:	e8 bd 3f ff ff       	call   c0007ad3 <malloc>
c0013b16:	89 c6                	mov    esi,eax
c0013b18:	58                   	pop    eax
c0013b19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b1b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013b1f:	52                   	push   edx
c0013b20:	56                   	push   esi
c0013b21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b29:	53                   	push   ebx
c0013b2a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b2d:	83 c4 20             	add    esp,0x20
c0013b30:	85 c0                	test   eax,eax
c0013b32:	75 0a                	jne    c0013b3e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b38:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013b3c:	74 18                	je     c0013b56 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013b3e:	83 ec 0c             	sub    esp,0xc
c0013b41:	53                   	push   ebx
c0013b42:	e8 05 80 ff ff       	call   c000bb4c <File::close()>
c0013b47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b4f:	83 c4 10             	add    esp,0x10
c0013b52:	31 c0                	xor    eax,eax
c0013b54:	eb 3b                	jmp    c0013b91 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013b56:	83 ec 0c             	sub    esp,0xc
c0013b59:	53                   	push   ebx
c0013b5a:	e8 ed 7f ff ff       	call   c000bb4c <File::close()>
c0013b5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b64:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b67:	83 c4 0c             	add    esp,0xc
c0013b6a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013b71:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013b78:	56                   	push   esi
c0013b79:	e8 3c fd ff ff       	call   c00138ba <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013b7e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b81:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013b85:	e8 59 3f ff ff       	call   c0007ae3 <free>
c0013b8a:	83 c4 10             	add    esp,0x10
c0013b8d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013b91:	81 c4 20 01 00 00    	add    esp,0x120
c0013b97:	5b                   	pop    ebx
c0013b98:	5e                   	pop    esi
c0013b99:	5f                   	pop    edi
c0013b9a:	c3                   	ret    

c0013b9b <Reg::getLine(char*, char*, char*)>:
c0013b9b:	57                   	push   edi
c0013b9c:	56                   	push   esi
c0013b9d:	53                   	push   ebx
c0013b9e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ba2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ba6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013baa:	57                   	push   edi
c0013bab:	56                   	push   esi
c0013bac:	53                   	push   ebx
c0013bad:	68 34 25 02 c0       	push   0xc0022534
c0013bb2:	e8 8f fe ff ff       	call   c0013a46 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013bb7:	83 c4 10             	add    esp,0x10
c0013bba:	84 c0                	test   al,al
c0013bbc:	75 10                	jne    c0013bce <Reg::getLine(char*, char*, char*)+0x33>
c0013bbe:	57                   	push   edi
c0013bbf:	56                   	push   esi
c0013bc0:	53                   	push   ebx
c0013bc1:	68 59 25 02 c0       	push   0xc0022559
c0013bc6:	e8 7b fe ff ff       	call   c0013a46 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013bcb:	83 c4 10             	add    esp,0x10
c0013bce:	5b                   	pop    ebx
c0013bcf:	5e                   	pop    esi
c0013bd0:	5f                   	pop    edi
c0013bd1:	c3                   	ret    

c0013bd2 <Reg::readInt(char*, char*, int*)>:
c0013bd2:	55                   	push   ebp
c0013bd3:	57                   	push   edi
c0013bd4:	56                   	push   esi
c0013bd5:	53                   	push   ebx
c0013bd6:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013bdc:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013be0:	55                   	push   ebp
c0013be1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013be8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013bef:	e8 a7 ff ff ff       	call   c0013b9b <Reg::getLine(char*, char*, char*)>
c0013bf4:	83 c4 10             	add    esp,0x10
c0013bf7:	84 c0                	test   al,al
c0013bf9:	0f 84 b6 00 00 00    	je     c0013cb5 <Reg::readInt(char*, char*, int*)+0xe3>
c0013bff:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013c04:	83 fa 2b             	cmp    edx,0x2b
c0013c07:	74 0c                	je     c0013c15 <Reg::readInt(char*, char*, int*)+0x43>
c0013c09:	83 fa 2d             	cmp    edx,0x2d
c0013c0c:	75 0e                	jne    c0013c1c <Reg::readInt(char*, char*, int*)+0x4a>
c0013c0e:	ba 01 00 00 00       	mov    edx,0x1
c0013c13:	eb 0b                	jmp    c0013c20 <Reg::readInt(char*, char*, int*)+0x4e>
c0013c15:	ba 01 00 00 00       	mov    edx,0x1
c0013c1a:	eb 02                	jmp    c0013c1e <Reg::readInt(char*, char*, int*)+0x4c>
c0013c1c:	31 d2                	xor    edx,edx
c0013c1e:	31 c0                	xor    eax,eax
c0013c20:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013c25:	be 0a 00 00 00       	mov    esi,0xa
c0013c2a:	75 21                	jne    c0013c4d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c2c:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013c31:	83 f9 78             	cmp    ecx,0x78
c0013c34:	75 0a                	jne    c0013c40 <Reg::readInt(char*, char*, int*)+0x6e>
c0013c36:	83 c2 02             	add    edx,0x2
c0013c39:	be 10 00 00 00       	mov    esi,0x10
c0013c3e:	eb 0d                	jmp    c0013c4d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c40:	83 f9 62             	cmp    ecx,0x62
c0013c43:	75 08                	jne    c0013c4d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c45:	83 c2 02             	add    edx,0x2
c0013c48:	be 02 00 00 00       	mov    esi,0x2
c0013c4d:	01 d5                	add    ebp,edx
c0013c4f:	31 d2                	xor    edx,edx
c0013c51:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013c55:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013c59:	85 c9                	test   ecx,ecx
c0013c5b:	0f 94 c3             	sete   bl
c0013c5e:	83 f9 0d             	cmp    ecx,0xd
c0013c61:	89 df                	mov    edi,ebx
c0013c63:	0f 94 c3             	sete   bl
c0013c66:	09 df                	or     edi,ebx
c0013c68:	89 fb                	mov    ebx,edi
c0013c6a:	83 e7 01             	and    edi,0x1
c0013c6d:	75 35                	jne    c0013ca4 <Reg::readInt(char*, char*, int*)+0xd2>
c0013c6f:	0f af d6             	imul   edx,esi
c0013c72:	83 fe 10             	cmp    esi,0x10
c0013c75:	75 26                	jne    c0013c9d <Reg::readInt(char*, char*, int*)+0xcb>
c0013c77:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c7b:	83 ef 41             	sub    edi,0x41
c0013c7e:	89 fb                	mov    ebx,edi
c0013c80:	80 fb 05             	cmp    bl,0x5
c0013c83:	77 06                	ja     c0013c8b <Reg::readInt(char*, char*, int*)+0xb9>
c0013c85:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013c89:	eb 16                	jmp    c0013ca1 <Reg::readInt(char*, char*, int*)+0xcf>
c0013c8b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013c8f:	83 eb 61             	sub    ebx,0x61
c0013c92:	80 fb 05             	cmp    bl,0x5
c0013c95:	77 06                	ja     c0013c9d <Reg::readInt(char*, char*, int*)+0xcb>
c0013c97:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013c9b:	eb 04                	jmp    c0013ca1 <Reg::readInt(char*, char*, int*)+0xcf>
c0013c9d:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013ca1:	45                   	inc    ebp
c0013ca2:	eb ad                	jmp    c0013c51 <Reg::readInt(char*, char*, int*)+0x7f>
c0013ca4:	84 c0                	test   al,al
c0013ca6:	74 02                	je     c0013caa <Reg::readInt(char*, char*, int*)+0xd8>
c0013ca8:	f7 da                	neg    edx
c0013caa:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013cb1:	89 10                	mov    DWORD PTR [eax],edx
c0013cb3:	88 d8                	mov    al,bl
c0013cb5:	81 c4 ec 00 00 00    	add    esp,0xec
c0013cbb:	5b                   	pop    ebx
c0013cbc:	5e                   	pop    esi
c0013cbd:	5f                   	pop    edi
c0013cbe:	5d                   	pop    ebp
c0013cbf:	c3                   	ret    

c0013cc0 <Reg::readString(char*, char*, char*, int)>:
c0013cc0:	57                   	push   edi
c0013cc1:	56                   	push   esi
c0013cc2:	53                   	push   ebx
c0013cc3:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013cc9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013ccd:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013cd4:	57                   	push   edi
c0013cd5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013cdc:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013ce3:	e8 b3 fe ff ff       	call   c0013b9b <Reg::getLine(char*, char*, char*)>
c0013ce8:	83 c4 10             	add    esp,0x10
c0013ceb:	84 c0                	test   al,al
c0013ced:	89 c6                	mov    esi,eax
c0013cef:	74 44                	je     c0013d35 <Reg::readString(char*, char*, char*, int)+0x75>
c0013cf1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013cf8:	31 c0                	xor    eax,eax
c0013cfa:	4a                   	dec    edx
c0013cfb:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013cfe:	84 c9                	test   cl,cl
c0013d00:	74 0f                	je     c0013d11 <Reg::readString(char*, char*, char*, int)+0x51>
c0013d02:	39 c2                	cmp    edx,eax
c0013d04:	7e 0b                	jle    c0013d11 <Reg::readString(char*, char*, char*, int)+0x51>
c0013d06:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013d09:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013d0e:	40                   	inc    eax
c0013d0f:	eb ea                	jmp    c0013cfb <Reg::readString(char*, char*, char*, int)+0x3b>
c0013d11:	83 ec 0c             	sub    esp,0xc
c0013d14:	53                   	push   ebx
c0013d15:	e8 66 c8 fe ff       	call   c0000580 <strlen>
c0013d1a:	83 c4 10             	add    esp,0x10
c0013d1d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013d22:	75 11                	jne    c0013d35 <Reg::readString(char*, char*, char*, int)+0x75>
c0013d24:	83 ec 0c             	sub    esp,0xc
c0013d27:	53                   	push   ebx
c0013d28:	e8 53 c8 fe ff       	call   c0000580 <strlen>
c0013d2d:	83 c4 10             	add    esp,0x10
c0013d30:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013d35:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013d3b:	89 f0                	mov    eax,esi
c0013d3d:	5b                   	pop    ebx
c0013d3e:	5e                   	pop    esi
c0013d3f:	5f                   	pop    edi
c0013d40:	c3                   	ret    

c0013d41 <Reg::readBool(char*, char*, bool*)>:
c0013d41:	83 ec 20             	sub    esp,0x20
c0013d44:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d48:	50                   	push   eax
c0013d49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d51:	e8 7c fe ff ff       	call   c0013bd2 <Reg::readInt(char*, char*, int*)>
c0013d56:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013d5a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013d5f:	0f 95 02             	setne  BYTE PTR [edx]
c0013d62:	83 c4 2c             	add    esp,0x2c
c0013d65:	c3                   	ret    

c0013d66 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013d66:	53                   	push   ebx
c0013d67:	83 ec 1c             	sub    esp,0x1c
c0013d6a:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013d6e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013d72:	50                   	push   eax
c0013d73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d7b:	e8 c1 ff ff ff       	call   c0013d41 <Reg::readBool(char*, char*, bool*)>
c0013d80:	83 c4 10             	add    esp,0x10
c0013d83:	84 c0                	test   al,al
c0013d85:	74 04                	je     c0013d8b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013d87:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013d8b:	83 c4 18             	add    esp,0x18
c0013d8e:	88 d8                	mov    al,bl
c0013d90:	5b                   	pop    ebx
c0013d91:	c3                   	ret    

c0013d92 <Reg::readIntWithDefault(char*, char*, int)>:
c0013d92:	53                   	push   ebx
c0013d93:	83 ec 1c             	sub    esp,0x1c
c0013d96:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d9a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013d9e:	50                   	push   eax
c0013d9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013da3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013da7:	e8 26 fe ff ff       	call   c0013bd2 <Reg::readInt(char*, char*, int*)>
c0013dac:	83 c4 10             	add    esp,0x10
c0013daf:	84 c0                	test   al,al
c0013db1:	74 04                	je     c0013db7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013db3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013db7:	83 c4 18             	add    esp,0x18
c0013dba:	89 d8                	mov    eax,ebx
c0013dbc:	5b                   	pop    ebx
c0013dbd:	c3                   	ret    

c0013dbe <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013dbe:	57                   	push   edi
c0013dbf:	56                   	push   esi
c0013dc0:	53                   	push   ebx
c0013dc1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013dc5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013dc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013dcd:	56                   	push   esi
c0013dce:	57                   	push   edi
c0013dcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dd7:	e8 e4 fe ff ff       	call   c0013cc0 <Reg::readString(char*, char*, char*, int)>
c0013ddc:	83 c4 10             	add    esp,0x10
c0013ddf:	84 c0                	test   al,al
c0013de1:	75 16                	jne    c0013df9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013de3:	50                   	push   eax
c0013de4:	56                   	push   esi
c0013de5:	6a 00                	push   0x0
c0013de7:	57                   	push   edi
c0013de8:	e8 03 c7 fe ff       	call   c00004f0 <memset>
c0013ded:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013df0:	89 de                	mov    esi,ebx
c0013df2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013df4:	83 c4 10             	add    esp,0x10
c0013df7:	89 df                	mov    edi,ebx
c0013df9:	5b                   	pop    ebx
c0013dfa:	89 f8                	mov    eax,edi
c0013dfc:	5e                   	pop    esi
c0013dfd:	5f                   	pop    edi
c0013dfe:	c3                   	ret    

c0013dff <SysEject(regs*)>:
c0013dff:	83 ec 0c             	sub    esp,0xc
c0013e02:	83 ca ff             	or     edx,0xffffffff
c0013e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e09:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013e0c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013e11:	83 e9 41             	sub    ecx,0x41
c0013e14:	83 f9 19             	cmp    ecx,0x19
c0013e17:	77 18                	ja     c0013e31 <SysEject(regs*)+0x32>
c0013e19:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013e20:	85 c9                	test   ecx,ecx
c0013e22:	74 0d                	je     c0013e31 <SysEject(regs*)+0x32>
c0013e24:	83 ec 0c             	sub    esp,0xc
c0013e27:	51                   	push   ecx
c0013e28:	e8 a3 9e ff ff       	call   c000dcd0 <LogicalDisk::eject()>
c0013e2d:	83 c4 10             	add    esp,0x10
c0013e30:	99                   	cdq    
c0013e31:	83 c4 0c             	add    esp,0xc
c0013e34:	c3                   	ret    

c0013e35 <SysExit(regs*)>:
c0013e35:	83 ec 18             	sub    esp,0x18
c0013e38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e3c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e3f:	e8 3c 2b 00 00       	call   c0016980 <terminateTask(int)>
c0013e44:	83 c8 ff             	or     eax,0xffffffff
c0013e47:	83 c4 1c             	add    esp,0x1c
c0013e4a:	89 c2                	mov    edx,eax
c0013e4c:	c3                   	ret    

c0013e4d <SysGetCwd(regs*)>:
c0013e4d:	83 ec 10             	sub    esp,0x10
c0013e50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e54:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013e57:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e5f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e62:	e8 09 79 ff ff       	call   c000b770 <Fs::getcwd(Process*, char*, int)>
c0013e67:	83 c4 1c             	add    esp,0x1c
c0013e6a:	99                   	cdq    
c0013e6b:	c3                   	ret    

c0013e6c <SysGetPID(regs*)>:
c0013e6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e74:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e76:	99                   	cdq    
c0013e77:	c3                   	ret    

c0013e78 <SysGetRAMData(regs*)>:
c0013e78:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013e82:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013e88:	99                   	cdq    
c0013e89:	f7 f9                	idiv   ecx
c0013e8b:	c1 e0 18             	shl    eax,0x18
c0013e8e:	09 c8                	or     eax,ecx
c0013e90:	99                   	cdq    
c0013e91:	c3                   	ret    

c0013e92 <SysGetVGAPtr(regs*)>:
c0013e92:	55                   	push   ebp
c0013e93:	57                   	push   edi
c0013e94:	56                   	push   esi
c0013e95:	53                   	push   ebx
c0013e96:	83 ec 18             	sub    esp,0x18
c0013e99:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e9d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ea0:	e8 a7 25 00 00       	call   c001644c <Thr::processFromPID(int)>
c0013ea5:	83 c4 10             	add    esp,0x10
c0013ea8:	89 c1                	mov    ecx,eax
c0013eaa:	b8 01 00 00 00       	mov    eax,0x1
c0013eaf:	85 c9                	test   ecx,ecx
c0013eb1:	74 57                	je     c0013f0a <SysGetVGAPtr(regs*)+0x78>
c0013eb3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013eb7:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013ebd:	74 0c                	je     c0013ecb <SysGetVGAPtr(regs*)+0x39>
c0013ebf:	83 ec 0c             	sub    esp,0xc
c0013ec2:	55                   	push   ebp
c0013ec3:	e8 a7 48 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013ec8:	83 c4 10             	add    esp,0x10
c0013ecb:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013ece:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013ed3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013ed6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ed8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013edb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ede:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013ee4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ee7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013eea:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013ef0:	50                   	push   eax
c0013ef1:	50                   	push   eax
c0013ef2:	68 74 25 02 c0       	push   0xc0022574
c0013ef7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013efa:	05 a8 0f 00 00       	add    eax,0xfa8
c0013eff:	50                   	push   eax
c0013f00:	e8 4b c7 fe ff       	call   c0000650 <strcpy>
c0013f05:	83 c4 10             	add    esp,0x10
c0013f08:	31 c0                	xor    eax,eax
c0013f0a:	83 c4 0c             	add    esp,0xc
c0013f0d:	31 d2                	xor    edx,edx
c0013f0f:	5b                   	pop    ebx
c0013f10:	5e                   	pop    esi
c0013f11:	5f                   	pop    edi
c0013f12:	5d                   	pop    ebp
c0013f13:	c3                   	ret    

c0013f14 <SysKill(regs*)>:
c0013f14:	53                   	push   ebx
c0013f15:	83 ec 08             	sub    esp,0x8
c0013f18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f1c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013f20:	75 16                	jne    c0013f38 <SysKill(regs*)+0x24>
c0013f22:	83 ec 0c             	sub    esp,0xc
c0013f25:	68 7e 25 02 c0       	push   0xc002257e
c0013f2a:	e8 e8 d5 ff ff       	call   c0011517 <KePanic(char const*)>
c0013f2f:	83 c4 10             	add    esp,0x10
c0013f32:	e9 89 00 00 00       	jmp    c0013fc0 <SysKill(regs*)+0xac>
c0013f37:	90                   	nop
c0013f38:	83 ec 0c             	sub    esp,0xc
c0013f3b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013f40:	e8 67 bd 00 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f45:	8d 76 00             	lea    esi,[esi+0x0]
c0013f48:	83 c4 10             	add    esp,0x10
c0013f4b:	85 c0                	test   eax,eax
c0013f4d:	74 19                	je     c0013f68 <SysKill(regs*)+0x54>
c0013f4f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013f52:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013f55:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013f57:	74 33                	je     c0013f8c <SysKill(regs*)+0x78>
c0013f59:	52                   	push   edx
c0013f5a:	52                   	push   edx
c0013f5b:	50                   	push   eax
c0013f5c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013f61:	e8 66 c0 00 00       	call   c001ffcc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013f66:	eb e0                	jmp    c0013f48 <SysKill(regs*)+0x34>
c0013f68:	83 ec 0c             	sub    esp,0xc
c0013f6b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013f70:	e8 37 bd 00 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f75:	8d 76 00             	lea    esi,[esi+0x0]
c0013f78:	83 c4 10             	add    esp,0x10
c0013f7b:	85 c0                	test   eax,eax
c0013f7d:	74 41                	je     c0013fc0 <SysKill(regs*)+0xac>
c0013f7f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013f82:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013f85:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013f87:	75 27                	jne    c0013fb0 <SysKill(regs*)+0x9c>
c0013f89:	8d 76 00             	lea    esi,[esi+0x0]
c0013f8c:	51                   	push   ecx
c0013f8d:	51                   	push   ecx
c0013f8e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f99:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013f9f:	e8 0f da ff ff       	call   c00119b3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013fa4:	83 c4 10             	add    esp,0x10
c0013fa7:	31 c0                	xor    eax,eax
c0013fa9:	31 d2                	xor    edx,edx
c0013fab:	eb 1b                	jmp    c0013fc8 <SysKill(regs*)+0xb4>
c0013fad:	8d 76 00             	lea    esi,[esi+0x0]
c0013fb0:	52                   	push   edx
c0013fb1:	52                   	push   edx
c0013fb2:	50                   	push   eax
c0013fb3:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013fb8:	e8 0f c0 00 00       	call   c001ffcc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013fbd:	eb b9                	jmp    c0013f78 <SysKill(regs*)+0x64>
c0013fbf:	90                   	nop
c0013fc0:	83 c8 ff             	or     eax,0xffffffff
c0013fc3:	89 c2                	mov    edx,eax
c0013fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc8:	83 c4 08             	add    esp,0x8
c0013fcb:	5b                   	pop    ebx
c0013fcc:	c3                   	ret    

c0013fcd <SysLoadDLL(regs*)>:
c0013fcd:	56                   	push   esi
c0013fce:	31 d2                	xor    edx,edx
c0013fd0:	53                   	push   ebx
c0013fd1:	b8 01 00 00 00       	mov    eax,0x1
c0013fd6:	51                   	push   ecx
c0013fd7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fdb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013fdf:	0f 84 8c 00 00 00    	je     c0014071 <SysLoadDLL(regs*)+0xa4>
c0013fe5:	83 ec 0c             	sub    esp,0xc
c0013fe8:	68 14 01 00 00       	push   0x114
c0013fed:	e8 e1 3a ff ff       	call   c0007ad3 <malloc>
c0013ff2:	83 c4 0c             	add    esp,0xc
c0013ff5:	89 c3                	mov    ebx,eax
c0013ff7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ffc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fff:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014002:	53                   	push   ebx
c0014003:	e8 c8 7a ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c0014008:	83 c4 10             	add    esp,0x10
c001400b:	31 d2                	xor    edx,edx
c001400d:	85 db                	test   ebx,ebx
c001400f:	b8 02 00 00 00       	mov    eax,0x2
c0014014:	74 5b                	je     c0014071 <SysLoadDLL(regs*)+0xa4>
c0014016:	83 ec 0c             	sub    esp,0xc
c0014019:	53                   	push   ebx
c001401a:	e8 93 7d ff ff       	call   c000bdb2 <File::exists()>
c001401f:	83 c4 10             	add    esp,0x10
c0014022:	84 c0                	test   al,al
c0014024:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014026:	75 11                	jne    c0014039 <SysLoadDLL(regs*)+0x6c>
c0014028:	83 ec 0c             	sub    esp,0xc
c001402b:	53                   	push   ebx
c001402c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001402f:	83 c4 10             	add    esp,0x10
c0014032:	b8 03 00 00 00       	mov    eax,0x3
c0014037:	eb 36                	jmp    c001406f <SysLoadDLL(regs*)+0xa2>
c0014039:	83 ec 0c             	sub    esp,0xc
c001403c:	53                   	push   ebx
c001403d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014040:	58                   	pop    eax
c0014041:	5a                   	pop    edx
c0014042:	6a 00                	push   0x0
c0014044:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014047:	e8 49 15 00 00       	call   c0015595 <Thr::loadDLL(char const*, bool)>
c001404c:	83 c4 10             	add    esp,0x10
c001404f:	31 d2                	xor    edx,edx
c0014051:	89 c1                	mov    ecx,eax
c0014053:	b8 04 00 00 00       	mov    eax,0x4
c0014058:	85 c9                	test   ecx,ecx
c001405a:	74 15                	je     c0014071 <SysLoadDLL(regs*)+0xa4>
c001405c:	53                   	push   ebx
c001405d:	53                   	push   ebx
c001405e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014064:	51                   	push   ecx
c0014065:	e8 6b 17 00 00       	call   c00157d5 <Thr::executeDLL(unsigned long, void*)>
c001406a:	83 c4 10             	add    esp,0x10
c001406d:	31 c0                	xor    eax,eax
c001406f:	31 d2                	xor    edx,edx
c0014071:	59                   	pop    ecx
c0014072:	5b                   	pop    ebx
c0014073:	5e                   	pop    esi
c0014074:	c3                   	ret    

c0014075 <SysRead(regs*)>:
c0014075:	57                   	push   edi
c0014076:	56                   	push   esi
c0014077:	53                   	push   ebx
c0014078:	83 ec 10             	sub    esp,0x10
c001407b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001407f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014082:	83 f8 02             	cmp    eax,0x2
c0014085:	77 10                	ja     c0014097 <SysRead(regs*)+0x22>
c0014087:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001408c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001408f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014095:	eb 0e                	jmp    c00140a5 <SysRead(regs*)+0x30>
c0014097:	83 ec 0c             	sub    esp,0xc
c001409a:	50                   	push   eax
c001409b:	e8 fb 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00140a0:	83 c4 10             	add    esp,0x10
c00140a3:	89 c1                	mov    ecx,eax
c00140a5:	83 c8 ff             	or     eax,0xffffffff
c00140a8:	85 c9                	test   ecx,ecx
c00140aa:	89 c2                	mov    edx,eax
c00140ac:	74 28                	je     c00140d6 <SysRead(regs*)+0x61>
c00140ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00140b6:	83 ec 0c             	sub    esp,0xc
c00140b9:	31 ff                	xor    edi,edi
c00140bb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00140bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00140c1:	52                   	push   edx
c00140c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140c5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00140c8:	57                   	push   edi
c00140c9:	56                   	push   esi
c00140ca:	51                   	push   ecx
c00140cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00140d2:	83 c4 20             	add    esp,0x20
c00140d5:	99                   	cdq    
c00140d6:	83 c4 10             	add    esp,0x10
c00140d9:	5b                   	pop    ebx
c00140da:	5e                   	pop    esi
c00140db:	5f                   	pop    edi
c00140dc:	c3                   	ret    

c00140dd <SysRegisterSignal(regs*)>:
c00140dd:	83 ec 18             	sub    esp,0x18
c00140e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00140e4:	6a 00                	push   0x0
c00140e6:	6a 00                	push   0x0
c00140e8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00140eb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00140ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140f6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00140fc:	e8 7c d8 ff ff       	call   c001197d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014101:	83 c4 2c             	add    esp,0x2c
c0014104:	99                   	cdq    
c0014105:	c3                   	ret    

c0014106 <SysRegistryGetTypeFromPath(regs*)>:
c0014106:	57                   	push   edi
c0014107:	56                   	push   esi
c0014108:	53                   	push   ebx
c0014109:	81 ec 38 01 00 00    	sub    esp,0x138
c001410f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014116:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014119:	68 9f 25 02 c0       	push   0xc002259f
c001411e:	e8 e7 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014123:	5a                   	pop    edx
c0014124:	59                   	pop    ecx
c0014125:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014128:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001412b:	e8 34 f6 ff ff       	call   c0013764 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014130:	5f                   	pop    edi
c0014131:	5a                   	pop    edx
c0014132:	89 c6                	mov    esi,eax
c0014134:	50                   	push   eax
c0014135:	68 bf 25 02 c0       	push   0xc00225bf
c001413a:	e8 cb 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001413f:	83 c4 10             	add    esp,0x10
c0014142:	85 f6                	test   esi,esi
c0014144:	74 28                	je     c001416e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014146:	50                   	push   eax
c0014147:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001414b:	57                   	push   edi
c001414c:	56                   	push   esi
c001414d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014150:	e8 f4 f1 ff ff       	call   c0013349 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014155:	83 c4 0c             	add    esp,0xc
c0014158:	57                   	push   edi
c0014159:	50                   	push   eax
c001415a:	89 c3                	mov    ebx,eax
c001415c:	68 c7 25 02 c0       	push   0xc00225c7
c0014161:	e8 a4 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014166:	89 d8                	mov    eax,ebx
c0014168:	83 c4 10             	add    esp,0x10
c001416b:	99                   	cdq    
c001416c:	eb 05                	jmp    c0014173 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001416e:	83 c8 ff             	or     eax,0xffffffff
c0014171:	89 c2                	mov    edx,eax
c0014173:	81 c4 30 01 00 00    	add    esp,0x130
c0014179:	5b                   	pop    ebx
c001417a:	5e                   	pop    esi
c001417b:	5f                   	pop    edi
c001417c:	c3                   	ret    

c001417d <SysRegistryReadExtent(regs*)>:
c001417d:	83 ec 1c             	sub    esp,0x1c
c0014180:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014184:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014187:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001418a:	85 c0                	test   eax,eax
c001418c:	79 1f                	jns    c00141ad <SysRegistryReadExtent(regs*)+0x30>
c001418e:	52                   	push   edx
c001418f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014194:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014198:	52                   	push   edx
c0014199:	50                   	push   eax
c001419a:	51                   	push   ecx
c001419b:	e8 9b f0 ff ff       	call   c001323b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00141a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00141a8:	83 c4 10             	add    esp,0x10
c00141ab:	eb 14                	jmp    c00141c1 <SysRegistryReadExtent(regs*)+0x44>
c00141ad:	83 ec 04             	sub    esp,0x4
c00141b0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00141b3:	50                   	push   eax
c00141b4:	51                   	push   ecx
c00141b5:	e8 1f eb ff ff       	call   c0012cd9 <CmGetString(Reghive_Tag*, int, char*)>
c00141ba:	83 c4 10             	add    esp,0x10
c00141bd:	31 c0                	xor    eax,eax
c00141bf:	31 d2                	xor    edx,edx
c00141c1:	83 c4 1c             	add    esp,0x1c
c00141c4:	c3                   	ret    

c00141c5 <SysRegistryPathToExtentLookup(regs*)>:
c00141c5:	53                   	push   ebx
c00141c6:	83 ec 10             	sub    esp,0x10
c00141c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141d0:	68 dd 25 02 c0       	push   0xc00225dd
c00141d5:	e8 30 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00141da:	58                   	pop    eax
c00141db:	5a                   	pop    edx
c00141dc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141df:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141e2:	e8 7d f5 ff ff       	call   c0013764 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00141e7:	83 c4 18             	add    esp,0x18
c00141ea:	5b                   	pop    ebx
c00141eb:	99                   	cdq    
c00141ec:	c3                   	ret    

c00141ed <SysRegistryEnterDirectory(regs*)>:
c00141ed:	53                   	push   ebx
c00141ee:	83 ec 10             	sub    esp,0x10
c00141f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141f5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00141f8:	68 00 26 02 c0       	push   0xc0022600
c00141fd:	e8 08 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014202:	58                   	pop    eax
c0014203:	5a                   	pop    edx
c0014204:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014207:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001420a:	e8 41 eb ff ff       	call   c0012d50 <CmEnterDirectory(Reghive_Tag*, int)>
c001420f:	83 c4 18             	add    esp,0x18
c0014212:	5b                   	pop    ebx
c0014213:	99                   	cdq    
c0014214:	c3                   	ret    

c0014215 <SysRegistryGetNext(regs*)>:
c0014215:	53                   	push   ebx
c0014216:	83 ec 10             	sub    esp,0x10
c0014219:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001421d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014220:	68 1e 26 02 c0       	push   0xc002261e
c0014225:	e8 e0 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001422a:	58                   	pop    eax
c001422b:	5a                   	pop    edx
c001422c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001422f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014232:	e8 58 eb ff ff       	call   c0012d8f <CmGetNext(Reghive_Tag*, int)>
c0014237:	83 c4 18             	add    esp,0x18
c001423a:	5b                   	pop    ebx
c001423b:	99                   	cdq    
c001423c:	c3                   	ret    

c001423d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001423d:	57                   	push   edi
c001423e:	56                   	push   esi
c001423f:	53                   	push   ebx
c0014240:	81 ec 34 01 00 00    	sub    esp,0x134
c0014246:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001424d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014251:	57                   	push   edi
c0014252:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014255:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014258:	e8 ec f0 ff ff       	call   c0013349 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001425d:	89 c3                	mov    ebx,eax
c001425f:	58                   	pop    eax
c0014260:	5a                   	pop    edx
c0014261:	57                   	push   edi
c0014262:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014265:	e8 e6 c3 fe ff       	call   c0000650 <strcpy>
c001426a:	81 c4 40 01 00 00    	add    esp,0x140
c0014270:	89 d8                	mov    eax,ebx
c0014272:	5b                   	pop    ebx
c0014273:	99                   	cdq    
c0014274:	5e                   	pop    esi
c0014275:	5f                   	pop    edi
c0014276:	c3                   	ret    

c0014277 <SysRegistryOpen(regs*)>:
c0014277:	83 ec 18             	sub    esp,0x18
c001427a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001427e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014281:	e8 e3 e8 ff ff       	call   c0012b69 <CmOpen(char const*)>
c0014286:	83 c4 1c             	add    esp,0x1c
c0014289:	99                   	cdq    
c001428a:	c3                   	ret    

c001428b <SysRegistryClose(regs*)>:
c001428b:	83 ec 18             	sub    esp,0x18
c001428e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014292:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014295:	e8 ed e9 ff ff       	call   c0012c87 <CmClose(Reghive_Tag*)>
c001429a:	31 c0                	xor    eax,eax
c001429c:	31 d2                	xor    edx,edx
c001429e:	83 c4 1c             	add    esp,0x1c
c00142a1:	c3                   	ret    

c00142a2 <SysSbrk(regs*)>:
c00142a2:	56                   	push   esi
c00142a3:	53                   	push   ebx
c00142a4:	50                   	push   eax
c00142a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142b1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00142b4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00142ba:	85 db                	test   ebx,ebx
c00142bc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00142bf:	74 02                	je     c00142c3 <SysSbrk(regs*)+0x21>
c00142c1:	79 06                	jns    c00142c9 <SysSbrk(regs*)+0x27>
c00142c3:	89 f0                	mov    eax,esi
c00142c5:	31 d2                	xor    edx,edx
c00142c7:	eb 2a                	jmp    c00142f3 <SysSbrk(regs*)+0x51>
c00142c9:	83 c8 ff             	or     eax,0xffffffff
c00142cc:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00142d2:	89 c2                	mov    edx,eax
c00142d4:	77 1d                	ja     c00142f3 <SysSbrk(regs*)+0x51>
c00142d6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00142dc:	50                   	push   eax
c00142dd:	68 07 0c 00 00       	push   0xc07
c00142e2:	c1 ea 0c             	shr    edx,0xc
c00142e5:	52                   	push   edx
c00142e6:	51                   	push   ecx
c00142e7:	e8 1a 5b ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00142ec:	89 f0                	mov    eax,esi
c00142ee:	31 d2                	xor    edx,edx
c00142f0:	83 c4 10             	add    esp,0x10
c00142f3:	59                   	pop    ecx
c00142f4:	5b                   	pop    ebx
c00142f5:	5e                   	pop    esi
c00142f6:	c3                   	ret    

c00142f7 <SysSetCwd(regs*)>:
c00142f7:	83 ec 14             	sub    esp,0x14
c00142fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142fe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014301:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014306:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014309:	e8 43 7b ff ff       	call   c000be51 <Fs::setcwd(Process*, char*)>
c001430e:	83 c4 1c             	add    esp,0x1c
c0014311:	99                   	cdq    
c0014312:	c3                   	ret    

c0014313 <SysSetTime(regs*)>:
c0014313:	55                   	push   ebp
c0014314:	31 c9                	xor    ecx,ecx
c0014316:	57                   	push   edi
c0014317:	bd 0c 00 00 00       	mov    ebp,0xc
c001431c:	56                   	push   esi
c001431d:	53                   	push   ebx
c001431e:	31 db                	xor    ebx,ebx
c0014320:	83 ec 10             	sub    esp,0x10
c0014323:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014327:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001432a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001432d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014330:	89 c2                	mov    edx,eax
c0014332:	c1 e8 05             	shr    eax,0x5
c0014335:	83 e2 1f             	and    edx,0x1f
c0014338:	42                   	inc    edx
c0014339:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001433f:	c1 e7 10             	shl    edi,0x10
c0014342:	88 d1                	mov    cl,dl
c0014344:	31 d2                	xor    edx,edx
c0014346:	f7 f5                	div    ebp
c0014348:	89 dd                	mov    ebp,ebx
c001434a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014350:	88 d5                	mov    ch,dl
c0014352:	31 d2                	xor    edx,edx
c0014354:	0f b7 c1             	movzx  eax,cx
c0014357:	09 f8                	or     eax,edi
c0014359:	bf 3c 00 00 00       	mov    edi,0x3c
c001435e:	89 c1                	mov    ecx,eax
c0014360:	89 f0                	mov    eax,esi
c0014362:	f7 f7                	div    edi
c0014364:	c1 e2 10             	shl    edx,0x10
c0014367:	09 d5                	or     ebp,edx
c0014369:	31 d2                	xor    edx,edx
c001436b:	f7 f7                	div    edi
c001436d:	89 eb                	mov    ebx,ebp
c001436f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014374:	89 f0                	mov    eax,esi
c0014376:	88 d7                	mov    bh,dl
c0014378:	31 d2                	xor    edx,edx
c001437a:	f7 f7                	div    edi
c001437c:	bf 18 00 00 00       	mov    edi,0x18
c0014381:	31 d2                	xor    edx,edx
c0014383:	f7 f7                	div    edi
c0014385:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001438a:	88 d3                	mov    bl,dl
c001438c:	53                   	push   ebx
c001438d:	51                   	push   ecx
c001438e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014394:	e8 cb 82 ff ff       	call   c000c664 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014399:	83 c4 1c             	add    esp,0x1c
c001439c:	31 d2                	xor    edx,edx
c001439e:	5b                   	pop    ebx
c001439f:	5e                   	pop    esi
c00143a0:	83 f0 01             	xor    eax,0x1
c00143a3:	5f                   	pop    edi
c00143a4:	0f b6 c0             	movzx  eax,al
c00143a7:	5d                   	pop    ebp
c00143a8:	c3                   	ret    

c00143a9 <SysSymlink(regs*)>:
c00143a9:	53                   	push   ebx
c00143aa:	83 c8 ff             	or     eax,0xffffffff
c00143ad:	83 ec 08             	sub    esp,0x8
c00143b0:	89 c2                	mov    edx,eax
c00143b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143b6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00143b9:	85 c9                	test   ecx,ecx
c00143bb:	74 14                	je     c00143d1 <SysSymlink(regs*)+0x28>
c00143bd:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00143c0:	85 db                	test   ebx,ebx
c00143c2:	74 0d                	je     c00143d1 <SysSymlink(regs*)+0x28>
c00143c4:	50                   	push   eax
c00143c5:	50                   	push   eax
c00143c6:	53                   	push   ebx
c00143c7:	51                   	push   ecx
c00143c8:	e8 b4 6e ff ff       	call   c000b281 <KeCreateSymlink(char const*, char const*)>
c00143cd:	83 c4 10             	add    esp,0x10
c00143d0:	99                   	cdq    
c00143d1:	83 c4 08             	add    esp,0x8
c00143d4:	5b                   	pop    ebx
c00143d5:	c3                   	ret    

c00143d6 <SysTimezone(regs*)>:
c00143d6:	53                   	push   ebx
c00143d7:	83 ec 08             	sub    esp,0x8
c00143da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143de:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00143e2:	75 17                	jne    c00143fb <SysTimezone(regs*)+0x25>
c00143e4:	83 ec 0c             	sub    esp,0xc
c00143e7:	68 35 26 02 c0       	push   0xc0022635
c00143ec:	e8 19 65 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00143f1:	83 c8 ff             	or     eax,0xffffffff
c00143f4:	83 c4 10             	add    esp,0x10
c00143f7:	89 c2                	mov    edx,eax
c00143f9:	eb 20                	jmp    c001441b <SysTimezone(regs*)+0x45>
c00143fb:	83 ec 0c             	sub    esp,0xc
c00143fe:	68 4a 26 02 c0       	push   0xc002264a
c0014403:	e8 02 65 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014408:	58                   	pop    eax
c0014409:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001440c:	e8 b7 7f ff ff       	call   c000c3c8 <User::loadClockSettings(int)>
c0014411:	83 c4 10             	add    esp,0x10
c0014414:	b8 01 00 00 00       	mov    eax,0x1
c0014419:	31 d2                	xor    edx,edx
c001441b:	83 c4 08             	add    esp,0x8
c001441e:	5b                   	pop    ebx
c001441f:	c3                   	ret    

c0014420 <SysTruncate(regs*)>:
c0014420:	55                   	push   ebp
c0014421:	57                   	push   edi
c0014422:	31 ff                	xor    edi,edi
c0014424:	56                   	push   esi
c0014425:	53                   	push   ebx
c0014426:	83 ec 0c             	sub    esp,0xc
c0014429:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001442d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014430:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014434:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014437:	89 ce                	mov    esi,ecx
c0014439:	0f 84 9a 00 00 00    	je     c00144d9 <SysTruncate(regs*)+0xb9>
c001443f:	83 ec 0c             	sub    esp,0xc
c0014442:	68 14 01 00 00       	push   0x114
c0014447:	e8 87 36 ff ff       	call   c0007ad3 <malloc>
c001444c:	83 c4 0c             	add    esp,0xc
c001444f:	89 c3                	mov    ebx,eax
c0014451:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014456:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014459:	55                   	push   ebp
c001445a:	53                   	push   ebx
c001445b:	e8 70 76 ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c0014460:	83 c4 10             	add    esp,0x10
c0014463:	31 d2                	xor    edx,edx
c0014465:	85 db                	test   ebx,ebx
c0014467:	b8 03 00 00 00       	mov    eax,0x3
c001446c:	0f 84 a2 00 00 00    	je     c0014514 <SysTruncate(regs*)+0xf4>
c0014472:	51                   	push   ecx
c0014473:	51                   	push   ecx
c0014474:	6a 02                	push   0x2
c0014476:	53                   	push   ebx
c0014477:	e8 72 76 ff ff       	call   c000baee <File::open(FileOpenMode)>
c001447c:	83 c4 10             	add    esp,0x10
c001447f:	85 c0                	test   eax,eax
c0014481:	74 13                	je     c0014496 <SysTruncate(regs*)+0x76>
c0014483:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014485:	83 ec 0c             	sub    esp,0xc
c0014488:	53                   	push   ebx
c0014489:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001448c:	83 c4 10             	add    esp,0x10
c001448f:	b8 04 00 00 00       	mov    eax,0x4
c0014494:	eb 7c                	jmp    c0014512 <SysTruncate(regs*)+0xf2>
c0014496:	52                   	push   edx
c0014497:	57                   	push   edi
c0014498:	56                   	push   esi
c0014499:	53                   	push   ebx
c001449a:	e8 63 77 ff ff       	call   c000bc02 <File::truncate(unsigned long long)>
c001449f:	83 c4 10             	add    esp,0x10
c00144a2:	85 c0                	test   eax,eax
c00144a4:	74 1b                	je     c00144c1 <SysTruncate(regs*)+0xa1>
c00144a6:	83 ec 0c             	sub    esp,0xc
c00144a9:	53                   	push   ebx
c00144aa:	e8 9d 76 ff ff       	call   c000bb4c <File::close()>
c00144af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144b7:	83 c4 10             	add    esp,0x10
c00144ba:	b8 05 00 00 00       	mov    eax,0x5
c00144bf:	eb 51                	jmp    c0014512 <SysTruncate(regs*)+0xf2>
c00144c1:	83 ec 0c             	sub    esp,0xc
c00144c4:	53                   	push   ebx
c00144c5:	e8 82 76 ff ff       	call   c000bb4c <File::close()>
c00144ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144d2:	83 c4 10             	add    esp,0x10
c00144d5:	31 c0                	xor    eax,eax
c00144d7:	eb 39                	jmp    c0014512 <SysTruncate(regs*)+0xf2>
c00144d9:	31 d2                	xor    edx,edx
c00144db:	83 fd 02             	cmp    ebp,0x2
c00144de:	b8 01 00 00 00       	mov    eax,0x1
c00144e3:	7e 2f                	jle    c0014514 <SysTruncate(regs*)+0xf4>
c00144e5:	83 ec 0c             	sub    esp,0xc
c00144e8:	51                   	push   ecx
c00144e9:	e8 ad 4f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00144ee:	83 c4 10             	add    esp,0x10
c00144f1:	31 d2                	xor    edx,edx
c00144f3:	89 c1                	mov    ecx,eax
c00144f5:	b8 02 00 00 00       	mov    eax,0x2
c00144fa:	85 c9                	test   ecx,ecx
c00144fc:	74 16                	je     c0014514 <SysTruncate(regs*)+0xf4>
c00144fe:	50                   	push   eax
c00144ff:	57                   	push   edi
c0014500:	56                   	push   esi
c0014501:	51                   	push   ecx
c0014502:	e8 fb 76 ff ff       	call   c000bc02 <File::truncate(unsigned long long)>
c0014507:	83 c4 10             	add    esp,0x10
c001450a:	85 c0                	test   eax,eax
c001450c:	0f 95 c0             	setne  al
c001450f:	0f b6 c0             	movzx  eax,al
c0014512:	31 d2                	xor    edx,edx
c0014514:	83 c4 0c             	add    esp,0xc
c0014517:	5b                   	pop    ebx
c0014518:	5e                   	pop    esi
c0014519:	5f                   	pop    edi
c001451a:	5d                   	pop    ebp
c001451b:	c3                   	ret    

c001451c <SysWrite(regs*)>:
c001451c:	57                   	push   edi
c001451d:	56                   	push   esi
c001451e:	53                   	push   ebx
c001451f:	83 ec 10             	sub    esp,0x10
c0014522:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014526:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014529:	83 f8 02             	cmp    eax,0x2
c001452c:	77 10                	ja     c001453e <SysWrite(regs*)+0x22>
c001452e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014533:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014536:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001453c:	eb 0e                	jmp    c001454c <SysWrite(regs*)+0x30>
c001453e:	83 ec 0c             	sub    esp,0xc
c0014541:	50                   	push   eax
c0014542:	e8 54 4f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	89 c1                	mov    ecx,eax
c001454c:	83 c8 ff             	or     eax,0xffffffff
c001454f:	85 c9                	test   ecx,ecx
c0014551:	89 c2                	mov    edx,eax
c0014553:	74 28                	je     c001457d <SysWrite(regs*)+0x61>
c0014555:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001455d:	83 ec 0c             	sub    esp,0xc
c0014560:	31 ff                	xor    edi,edi
c0014562:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014566:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014568:	52                   	push   edx
c0014569:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001456c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001456f:	57                   	push   edi
c0014570:	56                   	push   esi
c0014571:	51                   	push   ecx
c0014572:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014575:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014579:	83 c4 20             	add    esp,0x20
c001457c:	99                   	cdq    
c001457d:	83 c4 10             	add    esp,0x10
c0014580:	5b                   	pop    ebx
c0014581:	5e                   	pop    esi
c0014582:	5f                   	pop    edi
c0014583:	c3                   	ret    

c0014584 <SysWsbe(regs*)>:
c0014584:	57                   	push   edi
c0014585:	b9 0b 00 00 00       	mov    ecx,0xb
c001458a:	56                   	push   esi
c001458b:	be 89 26 02 c0       	mov    esi,0xc0022689
c0014590:	53                   	push   ebx
c0014591:	83 ec 30             	sub    esp,0x30
c0014594:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014598:	fc                   	cld    
c0014599:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001459b:	83 ec 0c             	sub    esp,0xc
c001459e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00145a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145aa:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00145b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00145b2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00145b5:	57                   	push   edi
c00145b6:	e8 c5 bf fe ff       	call   c0000580 <strlen>
c00145bb:	5a                   	pop    edx
c00145bc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00145c0:	52                   	push   edx
c00145c1:	31 d2                	xor    edx,edx
c00145c3:	57                   	push   edi
c00145c4:	52                   	push   edx
c00145c5:	50                   	push   eax
c00145c6:	56                   	push   esi
c00145c7:	ff d3                	call   ebx
c00145c9:	83 c4 14             	add    esp,0x14
c00145cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00145d0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00145d3:	e8 a8 23 00 00       	call   c0016980 <terminateTask(int)>
c00145d8:	83 c4 40             	add    esp,0x40
c00145db:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00145e0:	5b                   	pop    ebx
c00145e1:	31 d2                	xor    edx,edx
c00145e3:	5e                   	pop    esi
c00145e4:	5f                   	pop    edi
c00145e5:	c3                   	ret    

c00145e6 <SysYield(regs*)>:
c00145e6:	83 ec 0c             	sub    esp,0xc
c00145e9:	fa                   	cli    
c00145ea:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00145f0:	e8 0b 1a 00 00       	call   c0016000 <schedule()>
c00145f5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00145fa:	48                   	dec    eax
c00145fb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014600:	75 01                	jne    c0014603 <SysYield(regs*)+0x1d>
c0014602:	fb                   	sti    
c0014603:	31 c0                	xor    eax,eax
c0014605:	31 d2                	xor    edx,edx
c0014607:	83 c4 0c             	add    esp,0xc
c001460a:	c3                   	ret    

c001460b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001460b:	55                   	push   ebp
c001460c:	57                   	push   edi
c001460d:	56                   	push   esi
c001460e:	53                   	push   ebx
c001460f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014615:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014620:	74 3b                	je     c001465d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014622:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001462a:	74 31                	je     c001465d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001462c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014634:	75 27                	jne    c001465d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014636:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001463d:	05 00 10 00 00       	add    eax,0x1000
c0014642:	89 c2                	mov    edx,eax
c0014644:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014649:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014650:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014656:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001465d:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014664:	83 ec 0c             	sub    esp,0xc
c0014667:	6a 01                	push   0x1
c0014669:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001466f:	e8 81 4f ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0014674:	83 c4 10             	add    esp,0x10
c0014677:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001467d:	89 c3                	mov    ebx,eax
c001467f:	0f 86 26 01 00 00    	jbe    c00147ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0014685:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001468d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014694:	c1 ee 0c             	shr    esi,0xc
c0014697:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001469b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00146a2:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00146a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00146ad:	29 ef                	sub    edi,ebp
c00146af:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00146b3:	0f 83 f9 00 00 00    	jae    c00147b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00146b9:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00146bf:	b8 00 10 00 00       	mov    eax,0x1000
c00146c4:	0f 47 f8             	cmova  edi,eax
c00146c7:	83 ec 0c             	sub    esp,0xc
c00146ca:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00146d1:	31 d2                	xor    edx,edx
c00146d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00146d5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00146d9:	50                   	push   eax
c00146da:	8d 74 24 30          	lea    esi,[esp+0x30]
c00146de:	56                   	push   esi
c00146df:	52                   	push   edx
c00146e0:	57                   	push   edi
c00146e1:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00146e8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146eb:	83 c4 20             	add    esp,0x20
c00146ee:	85 c0                	test   eax,eax
c00146f0:	75 06                	jne    c00146f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00146f2:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00146f6:	74 13                	je     c001470b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00146f8:	83 ec 0c             	sub    esp,0xc
c00146fb:	53                   	push   ebx
c00146fc:	e8 08 52 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014701:	83 c4 10             	add    esp,0x10
c0014704:	31 c0                	xor    eax,eax
c0014706:	e9 7c 01 00 00       	jmp    c0014887 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c001470b:	fa                   	cli    
c001470c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014712:	e8 cb 36 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014717:	6a 07                	push   0x7
c0014719:	53                   	push   ebx
c001471a:	50                   	push   eax
c001471b:	89 c7                	mov    edi,eax
c001471d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014722:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014725:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001472b:	e8 ce 55 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014730:	83 c4 0c             	add    esp,0xc
c0014733:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001473a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014740:	6a 00                	push   0x0
c0014742:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014747:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001474a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014750:	e8 0f 54 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014755:	58                   	pop    eax
c0014756:	5a                   	pop    edx
c0014757:	68 07 0c 00 00       	push   0xc07
c001475c:	55                   	push   ebp
c001475d:	57                   	push   edi
c001475e:	89 df                	mov    edi,ebx
c0014760:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014767:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001476d:	6a 00                	push   0x0
c001476f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014774:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014777:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001477d:	e8 e0 57 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014782:	b9 00 10 00 00       	mov    ecx,0x1000
c0014787:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014789:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001478e:	83 c4 20             	add    esp,0x20
c0014791:	48                   	dec    eax
c0014792:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014797:	85 c0                	test   eax,eax
c0014799:	75 01                	jne    c001479c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001479b:	fb                   	sti    
c001479c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00147a0:	81 c5 00 10 00 00    	add    ebp,0x1000
c00147a6:	e9 f0 fe ff ff       	jmp    c001469b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00147ab:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00147b2:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00147b9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00147bf:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00147c5:	0f 86 ae 00 00 00    	jbe    c0014879 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00147cb:	fa                   	cli    
c00147cc:	51                   	push   ecx
c00147cd:	31 ff                	xor    edi,edi
c00147cf:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00147d6:	c1 ee 0c             	shr    esi,0xc
c00147d9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147df:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147e5:	6a 00                	push   0x0
c00147e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147ef:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147f5:	e8 6a 53 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00147fa:	83 c4 10             	add    esp,0x10
c00147fd:	e8 e0 35 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014802:	47                   	inc    edi
c0014803:	6a 07                	push   0x7
c0014805:	53                   	push   ebx
c0014806:	50                   	push   eax
c0014807:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001480b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014811:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014814:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001481a:	e8 df 54 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001481f:	58                   	pop    eax
c0014820:	5a                   	pop    edx
c0014821:	68 07 0c 00 00       	push   0xc07
c0014826:	55                   	push   ebp
c0014827:	81 c5 00 10 00 00    	add    ebp,0x1000
c001482d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014831:	50                   	push   eax
c0014832:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014839:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001483f:	6a 00                	push   0x0
c0014841:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014846:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014849:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001484f:	e8 0e 57 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014854:	83 c4 1c             	add    esp,0x1c
c0014857:	68 00 10 00 00       	push   0x1000
c001485c:	6a 00                	push   0x0
c001485e:	53                   	push   ebx
c001485f:	e8 8c bc fe ff       	call   c00004f0 <memset>
c0014864:	83 c4 10             	add    esp,0x10
c0014867:	39 fe                	cmp    esi,edi
c0014869:	77 92                	ja     c00147fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001486b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014870:	48                   	dec    eax
c0014871:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014876:	75 01                	jne    c0014879 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014878:	fb                   	sti    
c0014879:	83 ec 0c             	sub    esp,0xc
c001487c:	53                   	push   ebx
c001487d:	e8 87 50 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014882:	83 c4 10             	add    esp,0x10
c0014885:	b0 01                	mov    al,0x1
c0014887:	81 c4 2c 10 00 00    	add    esp,0x102c
c001488d:	5b                   	pop    ebx
c001488e:	5e                   	pop    esi
c001488f:	5f                   	pop    edi
c0014890:	5d                   	pop    ebp
c0014891:	c3                   	ret    

c0014892 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014892:	55                   	push   ebp
c0014893:	57                   	push   edi
c0014894:	56                   	push   esi
c0014895:	53                   	push   ebx
c0014896:	83 ec 48             	sub    esp,0x48
c0014899:	68 14 01 00 00       	push   0x114
c001489e:	e8 30 32 ff ff       	call   c0007ad3 <malloc>
c00148a3:	83 c4 0c             	add    esp,0xc
c00148a6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00148aa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00148ae:	89 c7                	mov    edi,eax
c00148b0:	50                   	push   eax
c00148b1:	e8 1a 72 ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c00148b6:	58                   	pop    eax
c00148b7:	5a                   	pop    edx
c00148b8:	6a 01                	push   0x1
c00148ba:	57                   	push   edi
c00148bb:	e8 2e 72 ff ff       	call   c000baee <File::open(FileOpenMode)>
c00148c0:	83 c4 10             	add    esp,0x10
c00148c3:	85 c0                	test   eax,eax
c00148c5:	0f 85 4c 01 00 00    	jne    c0014a17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00148cb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00148d3:	83 ec 0c             	sub    esp,0xc
c00148d6:	6a 34                	push   0x34
c00148d8:	e8 f6 31 ff ff       	call   c0007ad3 <malloc>
c00148dd:	89 c3                	mov    ebx,eax
c00148df:	58                   	pop    eax
c00148e0:	8b 07                	mov    eax,DWORD PTR [edi]
c00148e2:	8d 74 24 38          	lea    esi,[esp+0x38]
c00148e6:	56                   	push   esi
c00148e7:	53                   	push   ebx
c00148e8:	6a 00                	push   0x0
c00148ea:	6a 34                	push   0x34
c00148ec:	57                   	push   edi
c00148ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148f0:	83 c4 20             	add    esp,0x20
c00148f3:	85 c0                	test   eax,eax
c00148f5:	0f 85 1c 01 00 00    	jne    c0014a17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00148fb:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014901:	0f 85 10 01 00 00    	jne    c0014a17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014907:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001490a:	85 c0                	test   eax,eax
c001490c:	0f 84 05 01 00 00    	je     c0014a17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014912:	31 d2                	xor    edx,edx
c0014914:	55                   	push   ebp
c0014915:	52                   	push   edx
c0014916:	50                   	push   eax
c0014917:	57                   	push   edi
c0014918:	e8 8f 72 ff ff       	call   c000bbac <File::seek(unsigned long long)>
c001491d:	83 c4 10             	add    esp,0x10
c0014920:	85 c0                	test   eax,eax
c0014922:	0f 85 ef 00 00 00    	jne    c0014a17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014928:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001492b:	83 ec 0c             	sub    esp,0xc
c001492e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014932:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014936:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001493a:	0f af c2             	imul   eax,edx
c001493d:	50                   	push   eax
c001493e:	e8 90 31 ff ff       	call   c0007ad3 <malloc>
c0014943:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014945:	89 34 24             	mov    DWORD PTR [esp],esi
c0014948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001494c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014950:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014954:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014958:	0f af c2             	imul   eax,edx
c001495b:	99                   	cdq    
c001495c:	52                   	push   edx
c001495d:	50                   	push   eax
c001495e:	57                   	push   edi
c001495f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014962:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014965:	83 c4 20             	add    esp,0x20
c0014968:	85 c0                	test   eax,eax
c001496a:	0f 84 a7 00 00 00    	je     c0014a17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014970:	31 d2                	xor    edx,edx
c0014972:	51                   	push   ecx
c0014973:	52                   	push   edx
c0014974:	50                   	push   eax
c0014975:	57                   	push   edi
c0014976:	e8 31 72 ff ff       	call   c000bbac <File::seek(unsigned long long)>
c001497b:	83 c4 10             	add    esp,0x10
c001497e:	85 c0                	test   eax,eax
c0014980:	0f 85 91 00 00 00    	jne    c0014a17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014986:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001498a:	83 ec 0c             	sub    esp,0xc
c001498d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014991:	0f af c2             	imul   eax,edx
c0014994:	50                   	push   eax
c0014995:	e8 39 31 ff ff       	call   c0007ad3 <malloc>
c001499a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001499c:	89 34 24             	mov    DWORD PTR [esp],esi
c001499f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00149a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149a7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00149ab:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00149af:	0f af c2             	imul   eax,edx
c00149b2:	99                   	cdq    
c00149b3:	52                   	push   edx
c00149b4:	50                   	push   eax
c00149b5:	57                   	push   edi
c00149b6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149b9:	83 c4 20             	add    esp,0x20
c00149bc:	31 c9                	xor    ecx,ecx
c00149be:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00149c6:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00149ca:	0f b7 e9             	movzx  ebp,cx
c00149cd:	0f 83 86 00 00 00    	jae    c0014a59 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00149d3:	c1 e5 05             	shl    ebp,0x5
c00149d6:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00149da:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00149de:	75 73                	jne    c0014a53 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00149e0:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00149e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149e7:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00149ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149ee:	52                   	push   edx
c00149ef:	31 d2                	xor    edx,edx
c00149f1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00149f4:	52                   	push   edx
c00149f5:	50                   	push   eax
c00149f6:	57                   	push   edi
c00149f7:	e8 b0 71 ff ff       	call   c000bbac <File::seek(unsigned long long)>
c00149fc:	83 c4 10             	add    esp,0x10
c00149ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a03:	85 c0                	test   eax,eax
c0014a05:	74 17                	je     c0014a1e <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014a07:	83 ec 0c             	sub    esp,0xc
c0014a0a:	68 b5 26 02 c0       	push   0xc00226b5
c0014a0f:	e8 f6 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014a14:	83 c4 10             	add    esp,0x10
c0014a17:	31 c0                	xor    eax,eax
c0014a19:	e9 8b 00 00 00       	jmp    c0014aa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014a1e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014a22:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014a25:	83 ec 0c             	sub    esp,0xc
c0014a28:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014a2b:	50                   	push   eax
c0014a2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014a30:	56                   	push   esi
c0014a31:	57                   	push   edi
c0014a32:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014a36:	e8 d0 fb ff ff       	call   c001460b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014a3b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014a3f:	83 c4 20             	add    esp,0x20
c0014a42:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014a46:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a4a:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014a4f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014a53:	41                   	inc    ecx
c0014a54:	e9 6d ff ff ff       	jmp    c00149c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014a59:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a5d:	83 ec 0c             	sub    esp,0xc
c0014a60:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014a64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a68:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014a6e:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014a74:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a79:	05 00 10 00 00       	add    eax,0x1000
c0014a7e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014a81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a85:	e8 59 30 ff ff       	call   c0007ae3 <free>
c0014a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a8d:	e8 51 30 ff ff       	call   c0007ae3 <free>
c0014a92:	58                   	pop    eax
c0014a93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a97:	e8 47 30 ff ff       	call   c0007ae3 <free>
c0014a9c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a9f:	e8 a8 70 ff ff       	call   c000bb4c <File::close()>
c0014aa4:	83 c4 10             	add    esp,0x10
c0014aa7:	b0 01                	mov    al,0x1
c0014aa9:	83 c4 3c             	add    esp,0x3c
c0014aac:	5b                   	pop    ebx
c0014aad:	5e                   	pop    esi
c0014aae:	5f                   	pop    edi
c0014aaf:	5d                   	pop    ebp
c0014ab0:	c3                   	ret    

c0014ab1 <Thr::runtimeReferenceHelper()>:
c0014ab1:	83 ec 18             	sub    esp,0x18
c0014ab4:	68 bd 26 02 c0       	push   0xc00226bd
c0014ab9:	e8 4c 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014abe:	fa                   	cli    
c0014abf:	83 c4 10             	add    esp,0x10
c0014ac2:	eb fe                	jmp    c0014ac2 <Thr::runtimeReferenceHelper()+0x11>

c0014ac4 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014ac4:	57                   	push   edi
c0014ac5:	56                   	push   esi
c0014ac6:	53                   	push   ebx
c0014ac7:	31 db                	xor    ebx,ebx
c0014ac9:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014acf:	7e 3c                	jle    c0014b0d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014ad1:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014ad8:	31 ff                	xor    edi,edi
c0014ada:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014ae1:	7e 27                	jle    c0014b0a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014ae3:	50                   	push   eax
c0014ae4:	50                   	push   eax
c0014ae5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ae9:	8b 06                	mov    eax,DWORD PTR [esi]
c0014aeb:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014af2:	50                   	push   eax
c0014af3:	e8 88 bc fe ff       	call   c0000780 <strcmp>
c0014af8:	83 c4 10             	add    esp,0x10
c0014afb:	85 c0                	test   eax,eax
c0014afd:	75 05                	jne    c0014b04 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014aff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b02:	eb 0b                	jmp    c0014b0f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014b04:	83 c6 10             	add    esi,0x10
c0014b07:	47                   	inc    edi
c0014b08:	eb d0                	jmp    c0014ada <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014b0a:	43                   	inc    ebx
c0014b0b:	eb bc                	jmp    c0014ac9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014b0d:	31 c0                	xor    eax,eax
c0014b0f:	5b                   	pop    ebx
c0014b10:	5e                   	pop    esi
c0014b11:	5f                   	pop    edi
c0014b12:	c3                   	ret    

c0014b13 <Thr::loadKernelSymbolTable(char const*)>:
c0014b13:	55                   	push   ebp
c0014b14:	57                   	push   edi
c0014b15:	56                   	push   esi
c0014b16:	53                   	push   ebx
c0014b17:	83 ec 68             	sub    esp,0x68
c0014b1a:	68 14 01 00 00       	push   0x114
c0014b1f:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014b25:	e8 a9 2f ff ff       	call   c0007ad3 <malloc>
c0014b2a:	83 c4 0c             	add    esp,0xc
c0014b2d:	56                   	push   esi
c0014b2e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014b32:	89 c3                	mov    ebx,eax
c0014b34:	50                   	push   eax
c0014b35:	e8 96 6f ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c0014b3a:	5e                   	pop    esi
c0014b3b:	5f                   	pop    edi
c0014b3c:	6a 01                	push   0x1
c0014b3e:	53                   	push   ebx
c0014b3f:	e8 aa 6f ff ff       	call   c000baee <File::open(FileOpenMode)>
c0014b44:	83 c4 10             	add    esp,0x10
c0014b47:	85 c0                	test   eax,eax
c0014b49:	74 0a                	je     c0014b55 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014b4b:	83 ec 0c             	sub    esp,0xc
c0014b4e:	68 df 26 02 c0       	push   0xc00226df
c0014b53:	eb 34                	jmp    c0014b89 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014b55:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014b5d:	83 ec 0c             	sub    esp,0xc
c0014b60:	6a 34                	push   0x34
c0014b62:	e8 6c 2f ff ff       	call   c0007ad3 <malloc>
c0014b67:	59                   	pop    ecx
c0014b68:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014b6c:	89 c7                	mov    edi,eax
c0014b6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b70:	56                   	push   esi
c0014b71:	57                   	push   edi
c0014b72:	6a 00                	push   0x0
c0014b74:	6a 34                	push   0x34
c0014b76:	53                   	push   ebx
c0014b77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b7a:	83 c4 20             	add    esp,0x20
c0014b7d:	85 c0                	test   eax,eax
c0014b7f:	74 17                	je     c0014b98 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014b81:	83 ec 0c             	sub    esp,0xc
c0014b84:	68 f6 26 02 c0       	push   0xc00226f6
c0014b89:	e8 89 c9 ff ff       	call   c0011517 <KePanic(char const*)>
c0014b8e:	83 c4 10             	add    esp,0x10
c0014b91:	31 c0                	xor    eax,eax
c0014b93:	e9 31 02 00 00       	jmp    c0014dc9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014b98:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014b9e:	75 e1                	jne    c0014b81 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014ba0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014ba3:	85 c0                	test   eax,eax
c0014ba5:	74 da                	je     c0014b81 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014ba7:	52                   	push   edx
c0014ba8:	31 d2                	xor    edx,edx
c0014baa:	52                   	push   edx
c0014bab:	50                   	push   eax
c0014bac:	53                   	push   ebx
c0014bad:	e8 fa 6f ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0014bb2:	83 c4 10             	add    esp,0x10
c0014bb5:	85 c0                	test   eax,eax
c0014bb7:	75 c8                	jne    c0014b81 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bb9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014bbd:	83 ec 0c             	sub    esp,0xc
c0014bc0:	31 ed                	xor    ebp,ebp
c0014bc2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014bc6:	0f af c2             	imul   eax,edx
c0014bc9:	50                   	push   eax
c0014bca:	e8 04 2f ff ff       	call   c0007ad3 <malloc>
c0014bcf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014bd1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bdc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014be0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014be4:	0f af c2             	imul   eax,edx
c0014be7:	99                   	cdq    
c0014be8:	52                   	push   edx
c0014be9:	50                   	push   eax
c0014bea:	53                   	push   ebx
c0014beb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bee:	83 c4 20             	add    esp,0x20
c0014bf1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014bf9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c01:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c11:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014c15:	0f b7 f5             	movzx  esi,bp
c0014c18:	0f 83 a7 00 00 00    	jae    c0014cc5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014c1e:	6b f6 28             	imul   esi,esi,0x28
c0014c21:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014c25:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014c28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c2c:	50                   	push   eax
c0014c2d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014c31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c35:	8b 16                	mov    edx,DWORD PTR [esi]
c0014c37:	6b c0 28             	imul   eax,eax,0x28
c0014c3a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014c3e:	89 d0                	mov    eax,edx
c0014c40:	31 d2                	xor    edx,edx
c0014c42:	52                   	push   edx
c0014c43:	50                   	push   eax
c0014c44:	53                   	push   ebx
c0014c45:	e8 62 6f ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0014c4a:	83 c4 0c             	add    esp,0xc
c0014c4d:	6a 20                	push   0x20
c0014c4f:	6a 00                	push   0x0
c0014c51:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014c55:	52                   	push   edx
c0014c56:	e8 95 b8 fe ff       	call   c00004f0 <memset>
c0014c5b:	58                   	pop    eax
c0014c5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c5e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014c62:	51                   	push   ecx
c0014c63:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014c67:	52                   	push   edx
c0014c68:	6a 00                	push   0x0
c0014c6a:	6a 1f                	push   0x1f
c0014c6c:	53                   	push   ebx
c0014c6d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c70:	83 c4 18             	add    esp,0x18
c0014c73:	68 0d 27 02 c0       	push   0xc002270d
c0014c78:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014c7c:	52                   	push   edx
c0014c7d:	e8 fe ba fe ff       	call   c0000780 <strcmp>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	85 c0                	test   eax,eax
c0014c87:	75 0f                	jne    c0014c98 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014c89:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c98:	50                   	push   eax
c0014c99:	50                   	push   eax
c0014c9a:	68 15 27 02 c0       	push   0xc0022715
c0014c9f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014ca3:	50                   	push   eax
c0014ca4:	e8 d7 ba fe ff       	call   c0000780 <strcmp>
c0014ca9:	83 c4 10             	add    esp,0x10
c0014cac:	85 c0                	test   eax,eax
c0014cae:	75 0f                	jne    c0014cbf <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014cb0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014cb3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014cbf:	45                   	inc    ebp
c0014cc0:	e9 4c ff ff ff       	jmp    c0014c11 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014cc5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014cca:	75 10                	jne    c0014cdc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014ccc:	83 ec 0c             	sub    esp,0xc
c0014ccf:	68 1d 27 02 c0       	push   0xc002271d
c0014cd4:	e8 3e c8 ff ff       	call   c0011517 <KePanic(char const*)>
c0014cd9:	83 c4 10             	add    esp,0x10
c0014cdc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014ce1:	75 10                	jne    c0014cf3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014ce3:	83 ec 0c             	sub    esp,0xc
c0014ce6:	68 1d 27 02 c0       	push   0xc002271d
c0014ceb:	e8 27 c8 ff ff       	call   c0011517 <KePanic(char const*)>
c0014cf0:	83 c4 10             	add    esp,0x10
c0014cf3:	50                   	push   eax
c0014cf4:	31 d2                	xor    edx,edx
c0014cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cfa:	52                   	push   edx
c0014cfb:	50                   	push   eax
c0014cfc:	53                   	push   ebx
c0014cfd:	e8 aa 6e ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0014d02:	5a                   	pop    edx
c0014d03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d07:	e8 c7 2d ff ff       	call   c0007ad3 <malloc>
c0014d0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014d10:	31 c9                	xor    ecx,ecx
c0014d12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d18:	5e                   	pop    esi
c0014d19:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014d1d:	55                   	push   ebp
c0014d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d22:	51                   	push   ecx
c0014d23:	52                   	push   edx
c0014d24:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d28:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014d2c:	53                   	push   ebx
c0014d2d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d30:	83 c4 14             	add    esp,0x14
c0014d33:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d37:	e8 97 2d ff ff       	call   c0007ad3 <malloc>
c0014d3c:	89 c6                	mov    esi,eax
c0014d3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d40:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d43:	56                   	push   esi
c0014d44:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014d48:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014d4c:	51                   	push   ecx
c0014d4d:	52                   	push   edx
c0014d4e:	53                   	push   ebx
c0014d4f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d52:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d56:	83 c4 1c             	add    esp,0x1c
c0014d59:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014d5f:	c1 e8 04             	shr    eax,0x4
c0014d62:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014d69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d6d:	31 d2                	xor    edx,edx
c0014d6f:	52                   	push   edx
c0014d70:	50                   	push   eax
c0014d71:	53                   	push   ebx
c0014d72:	e8 35 6e ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0014d77:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d79:	31 d2                	xor    edx,edx
c0014d7b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d7e:	56                   	push   esi
c0014d7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d83:	52                   	push   edx
c0014d84:	50                   	push   eax
c0014d85:	53                   	push   ebx
c0014d86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d89:	83 c4 14             	add    esp,0x14
c0014d8c:	53                   	push   ebx
c0014d8d:	e8 ba 6d ff ff       	call   c000bb4c <File::close()>
c0014d92:	5d                   	pop    ebp
c0014d93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d97:	e8 47 2d ff ff       	call   c0007ae3 <free>
c0014d9c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014d9f:	e8 3f 2d ff ff       	call   c0007ae3 <free>
c0014da4:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014da9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014dad:	83 c4 10             	add    esp,0x10
c0014db0:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014db7:	8d 50 01             	lea    edx,[eax+0x1]
c0014dba:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014dc1:	b0 01                	mov    al,0x1
c0014dc3:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014dc9:	83 c4 5c             	add    esp,0x5c
c0014dcc:	5b                   	pop    ebx
c0014dcd:	5e                   	pop    esi
c0014dce:	5f                   	pop    edi
c0014dcf:	5d                   	pop    ebp
c0014dd0:	c3                   	ret    

c0014dd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014dd1:	55                   	push   ebp
c0014dd2:	57                   	push   edi
c0014dd3:	56                   	push   esi
c0014dd4:	53                   	push   ebx
c0014dd5:	81 ec 68 03 00 00    	sub    esp,0x368
c0014ddb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014de2:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014de8:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014dec:	68 14 01 00 00       	push   0x114
c0014df1:	e8 dd 2c ff ff       	call   c0007ad3 <malloc>
c0014df6:	83 c4 0c             	add    esp,0xc
c0014df9:	56                   	push   esi
c0014dfa:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014e01:	50                   	push   eax
c0014e02:	89 c3                	mov    ebx,eax
c0014e04:	e8 c7 6c ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c0014e09:	5f                   	pop    edi
c0014e0a:	5d                   	pop    ebp
c0014e0b:	6a 01                	push   0x1
c0014e0d:	53                   	push   ebx
c0014e0e:	e8 db 6c ff ff       	call   c000baee <File::open(FileOpenMode)>
c0014e13:	83 c4 10             	add    esp,0x10
c0014e16:	85 c0                	test   eax,eax
c0014e18:	0f 85 b3 06 00 00    	jne    c00154d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e1e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014e26:	83 ec 0c             	sub    esp,0xc
c0014e29:	6a 34                	push   0x34
c0014e2b:	e8 a3 2c ff ff       	call   c0007ad3 <malloc>
c0014e30:	5e                   	pop    esi
c0014e31:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014e35:	89 c5                	mov    ebp,eax
c0014e37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e39:	56                   	push   esi
c0014e3a:	55                   	push   ebp
c0014e3b:	6a 00                	push   0x0
c0014e3d:	6a 34                	push   0x34
c0014e3f:	53                   	push   ebx
c0014e40:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e43:	83 c4 20             	add    esp,0x20
c0014e46:	85 c0                	test   eax,eax
c0014e48:	0f 85 83 06 00 00    	jne    c00154d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e4e:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014e55:	0f 85 76 06 00 00    	jne    c00154d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e5b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014e5e:	85 c0                	test   eax,eax
c0014e60:	0f 84 6b 06 00 00    	je     c00154d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e66:	31 d2                	xor    edx,edx
c0014e68:	51                   	push   ecx
c0014e69:	52                   	push   edx
c0014e6a:	50                   	push   eax
c0014e6b:	53                   	push   ebx
c0014e6c:	e8 3b 6d ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0014e71:	83 c4 10             	add    esp,0x10
c0014e74:	85 c0                	test   eax,eax
c0014e76:	0f 85 55 06 00 00    	jne    c00154d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e7c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014e7f:	83 ec 0c             	sub    esp,0xc
c0014e82:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014e86:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e8a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e8e:	0f af c2             	imul   eax,edx
c0014e91:	50                   	push   eax
c0014e92:	e8 3c 2c ff ff       	call   c0007ad3 <malloc>
c0014e97:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e99:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ea4:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014ea8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014eac:	0f af c2             	imul   eax,edx
c0014eaf:	99                   	cdq    
c0014eb0:	52                   	push   edx
c0014eb1:	50                   	push   eax
c0014eb2:	53                   	push   ebx
c0014eb3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014eb6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014eb9:	83 c4 20             	add    esp,0x20
c0014ebc:	85 c0                	test   eax,eax
c0014ebe:	0f 84 0d 06 00 00    	je     c00154d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ec4:	52                   	push   edx
c0014ec5:	31 d2                	xor    edx,edx
c0014ec7:	52                   	push   edx
c0014ec8:	50                   	push   eax
c0014ec9:	53                   	push   ebx
c0014eca:	e8 dd 6c ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0014ecf:	83 c4 10             	add    esp,0x10
c0014ed2:	85 c0                	test   eax,eax
c0014ed4:	0f 85 f7 05 00 00    	jne    c00154d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014eda:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014ede:	83 ec 0c             	sub    esp,0xc
c0014ee1:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014ee5:	0f af c2             	imul   eax,edx
c0014ee8:	50                   	push   eax
c0014ee9:	e8 e5 2b ff ff       	call   c0007ad3 <malloc>
c0014eee:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ef0:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ef3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ef7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014efb:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014eff:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014f03:	0f af c2             	imul   eax,edx
c0014f06:	99                   	cdq    
c0014f07:	52                   	push   edx
c0014f08:	50                   	push   eax
c0014f09:	53                   	push   ebx
c0014f0a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f0d:	83 c4 20             	add    esp,0x20
c0014f10:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014f16:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014f19:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014f1d:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014f21:	73 78                	jae    c0014f9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014f23:	c1 e7 05             	shl    edi,0x5
c0014f26:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014f2a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014f2d:	75 63                	jne    c0014f92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014f2f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014f32:	31 d2                	xor    edx,edx
c0014f34:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014f37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f3b:	50                   	push   eax
c0014f3c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014f3f:	52                   	push   edx
c0014f40:	50                   	push   eax
c0014f41:	53                   	push   ebx
c0014f42:	e8 65 6c ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0014f47:	83 c4 10             	add    esp,0x10
c0014f4a:	85 c0                	test   eax,eax
c0014f4c:	0f 85 7f 05 00 00    	jne    c00154d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f52:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014f59:	83 ec 0c             	sub    esp,0xc
c0014f5c:	31 d2                	xor    edx,edx
c0014f5e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014f62:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f64:	01 c6                	add    esi,eax
c0014f66:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f6d:	50                   	push   eax
c0014f6e:	56                   	push   esi
c0014f6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f73:	52                   	push   edx
c0014f74:	50                   	push   eax
c0014f75:	53                   	push   ebx
c0014f76:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f79:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014f7c:	83 c4 1c             	add    esp,0x1c
c0014f7f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014f82:	50                   	push   eax
c0014f83:	6a 00                	push   0x0
c0014f85:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014f89:	56                   	push   esi
c0014f8a:	e8 61 b5 fe ff       	call   c00004f0 <memset>
c0014f8f:	83 c4 10             	add    esp,0x10
c0014f92:	66 ff 04 24          	inc    WORD PTR [esp]
c0014f96:	e9 7b ff ff ff       	jmp    c0014f16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014f9b:	50                   	push   eax
c0014f9c:	68 00 01 00 00       	push   0x100
c0014fa1:	6a 00                	push   0x0
c0014fa3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014fa7:	50                   	push   eax
c0014fa8:	e8 43 b5 fe ff       	call   c00004f0 <memset>
c0014fad:	83 c4 0c             	add    esp,0xc
c0014fb0:	68 00 01 00 00       	push   0x100
c0014fb5:	6a 00                	push   0x0
c0014fb7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014fbe:	50                   	push   eax
c0014fbf:	e8 2c b5 fe ff       	call   c00004f0 <memset>
c0014fc4:	83 c4 10             	add    esp,0x10
c0014fc7:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014fce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014fd5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014fdd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014fe5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014fed:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014ff5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ff9:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014ffd:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015002:	0f 83 16 01 00 00    	jae    c001511e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015008:	6b ff 28             	imul   edi,edi,0x28
c001500b:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c001500f:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015012:	51                   	push   ecx
c0015013:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015017:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001501b:	8b 07                	mov    eax,DWORD PTR [edi]
c001501d:	6b d2 28             	imul   edx,edx,0x28
c0015020:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015024:	31 d2                	xor    edx,edx
c0015026:	52                   	push   edx
c0015027:	50                   	push   eax
c0015028:	53                   	push   ebx
c0015029:	e8 7e 6b ff ff       	call   c000bbac <File::seek(unsigned long long)>
c001502e:	83 c4 0c             	add    esp,0xc
c0015031:	6a 20                	push   0x20
c0015033:	6a 00                	push   0x0
c0015035:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001503c:	51                   	push   ecx
c001503d:	e8 ae b4 fe ff       	call   c00004f0 <memset>
c0015042:	58                   	pop    eax
c0015043:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015045:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015049:	52                   	push   edx
c001504a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015051:	51                   	push   ecx
c0015052:	6a 00                	push   0x0
c0015054:	6a 1f                	push   0x1f
c0015056:	53                   	push   ebx
c0015057:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001505a:	83 c4 1c             	add    esp,0x1c
c001505d:	6a 09                	push   0x9
c001505f:	68 37 27 02 c0       	push   0xc0022737
c0015064:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001506b:	51                   	push   ecx
c001506c:	e8 0f b3 fe ff       	call   c0000380 <memcmp>
c0015071:	83 c4 10             	add    esp,0x10
c0015074:	85 c0                	test   eax,eax
c0015076:	75 1a                	jne    c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0015078:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001507b:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001507e:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015082:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015085:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001508c:	89 d0                	mov    eax,edx
c001508e:	40                   	inc    eax
c001508f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015092:	52                   	push   edx
c0015093:	6a 09                	push   0x9
c0015095:	68 41 27 02 c0       	push   0xc0022741
c001509a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150a1:	50                   	push   eax
c00150a2:	e8 d9 b2 fe ff       	call   c0000380 <memcmp>
c00150a7:	83 c4 10             	add    esp,0x10
c00150aa:	85 c0                	test   eax,eax
c00150ac:	75 1a                	jne    c00150c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00150ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00150b1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00150b4:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00150b8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150bb:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00150c2:	89 c8                	mov    eax,ecx
c00150c4:	40                   	inc    eax
c00150c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00150c8:	50                   	push   eax
c00150c9:	50                   	push   eax
c00150ca:	68 0d 27 02 c0       	push   0xc002270d
c00150cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150d6:	50                   	push   eax
c00150d7:	e8 a4 b6 fe ff       	call   c0000780 <strcmp>
c00150dc:	83 c4 10             	add    esp,0x10
c00150df:	85 c0                	test   eax,eax
c00150e1:	75 0b                	jne    c00150ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c00150e3:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00150e7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150ee:	50                   	push   eax
c00150ef:	50                   	push   eax
c00150f0:	68 15 27 02 c0       	push   0xc0022715
c00150f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150fc:	50                   	push   eax
c00150fd:	e8 7e b6 fe ff       	call   c0000780 <strcmp>
c0015102:	83 c4 10             	add    esp,0x10
c0015105:	85 c0                	test   eax,eax
c0015107:	75 0b                	jne    c0015114 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015109:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c001510d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015110:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015114:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015119:	e9 d7 fe ff ff       	jmp    c0014ff5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c001511e:	50                   	push   eax
c001511f:	31 d2                	xor    edx,edx
c0015121:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015125:	52                   	push   edx
c0015126:	50                   	push   eax
c0015127:	53                   	push   ebx
c0015128:	e8 7f 6a ff ff       	call   c000bbac <File::seek(unsigned long long)>
c001512d:	58                   	pop    eax
c001512e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015132:	e8 9c 29 ff ff       	call   c0007ad3 <malloc>
c0015137:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015139:	31 d2                	xor    edx,edx
c001513b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001513f:	58                   	pop    eax
c0015140:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015144:	56                   	push   esi
c0015145:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001514d:	52                   	push   edx
c001514e:	50                   	push   eax
c001514f:	53                   	push   ebx
c0015150:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015153:	83 c4 14             	add    esp,0x14
c0015156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001515a:	e8 74 29 ff ff       	call   c0007ad3 <malloc>
c001515f:	31 d2                	xor    edx,edx
c0015161:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015165:	83 c4 0c             	add    esp,0xc
c0015168:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001516c:	52                   	push   edx
c001516d:	50                   	push   eax
c001516e:	53                   	push   ebx
c001516f:	e8 38 6a ff ff       	call   c000bbac <File::seek(unsigned long long)>
c0015174:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015176:	31 d2                	xor    edx,edx
c0015178:	89 34 24             	mov    DWORD PTR [esp],esi
c001517b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001517f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015183:	52                   	push   edx
c0015184:	50                   	push   eax
c0015185:	53                   	push   ebx
c0015186:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015189:	83 c4 20             	add    esp,0x20
c001518c:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0015191:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015199:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001519d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00151a1:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00151a4:	0f 84 2b 03 00 00    	je     c00154d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00151aa:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00151b1:	31 d2                	xor    edx,edx
c00151b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00151b7:	c1 e8 03             	shr    eax,0x3
c00151ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00151be:	51                   	push   ecx
c00151bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151c3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00151c7:	52                   	push   edx
c00151c8:	50                   	push   eax
c00151c9:	53                   	push   ebx
c00151ca:	e8 dd 69 ff ff       	call   c000bbac <File::seek(unsigned long long)>
c00151cf:	5e                   	pop    esi
c00151d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151d4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00151db:	e8 f3 28 ff ff       	call   c0007ad3 <malloc>
c00151e0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00151e2:	31 d2                	xor    edx,edx
c00151e4:	89 c7                	mov    edi,eax
c00151e6:	58                   	pop    eax
c00151e7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00151eb:	50                   	push   eax
c00151ec:	57                   	push   edi
c00151ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151f1:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00151f8:	52                   	push   edx
c00151f9:	50                   	push   eax
c00151fa:	53                   	push   ebx
c00151fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00151fe:	83 c4 20             	add    esp,0x20
c0015201:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015209:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001520d:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015211:	0f 8d a5 02 00 00    	jge    c00154bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0015217:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001521c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015220:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015223:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015227:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001522b:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001522f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015233:	c1 e8 08             	shr    eax,0x8
c0015236:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001523a:	89 c2                	mov    edx,eax
c001523c:	c1 e2 04             	shl    edx,0x4
c001523f:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015243:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015246:	85 f6                	test   esi,esi
c0015248:	0f 85 cf 00 00 00    	jne    c001531d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001524e:	83 ec 0c             	sub    esp,0xc
c0015251:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015255:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015259:	03 02                	add    eax,DWORD PTR [edx]
c001525b:	50                   	push   eax
c001525c:	e8 63 f8 ff ff       	call   c0014ac4 <Thr::getAddressOfKernelSymbol(char const*)>
c0015261:	83 c4 10             	add    esp,0x10
c0015264:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015268:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001526d:	85 c0                	test   eax,eax
c001526f:	89 c6                	mov    esi,eax
c0015271:	0f 85 a6 00 00 00    	jne    c001531d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015277:	83 ec 0c             	sub    esp,0xc
c001527a:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c001527e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015282:	03 02                	add    eax,DWORD PTR [edx]
c0015284:	50                   	push   eax
c0015285:	e8 76 c4 ff ff       	call   c0011700 <KeResolveCompatibilitySymbol(char*)>
c001528a:	83 c4 10             	add    esp,0x10
c001528d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015291:	85 c0                	test   eax,eax
c0015293:	89 c6                	mov    esi,eax
c0015295:	0f 85 82 00 00 00    	jne    c001531d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001529b:	50                   	push   eax
c001529c:	50                   	push   eax
c001529d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152a1:	03 02                	add    eax,DWORD PTR [edx]
c00152a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00152a7:	50                   	push   eax
c00152a8:	68 4b 27 02 c0       	push   0xc002274b
c00152ad:	e8 58 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00152b2:	58                   	pop    eax
c00152b3:	5a                   	pop    edx
c00152b4:	68 65 27 02 c0       	push   0xc0022765
c00152b9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00152c0:	51                   	push   ecx
c00152c1:	e8 8a b3 fe ff       	call   c0000650 <strcpy>
c00152c6:	59                   	pop    ecx
c00152c7:	58                   	pop    eax
c00152c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00152cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152d0:	03 02                	add    eax,DWORD PTR [edx]
c00152d2:	50                   	push   eax
c00152d3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00152da:	51                   	push   ecx
c00152db:	e8 90 b5 fe ff       	call   c0000870 <strcat>
c00152e0:	58                   	pop    eax
c00152e1:	5a                   	pop    edx
c00152e2:	68 fb 27 02 c0       	push   0xc00227fb
c00152e7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00152ee:	51                   	push   ecx
c00152ef:	e8 7c b5 fe ff       	call   c0000870 <strcat>
c00152f4:	83 c4 10             	add    esp,0x10
c00152f7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00152fc:	0f 84 77 01 00 00    	je     c0015479 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015302:	83 ec 0c             	sub    esp,0xc
c0015305:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001530c:	51                   	push   ecx
c001530d:	e8 05 c2 ff ff       	call   c0011517 <KePanic(char const*)>
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015319:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001531d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015322:	83 f8 01             	cmp    eax,0x1
c0015325:	0f 85 9b 00 00 00    	jne    c00153c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001532b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001532f:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015336:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c001533a:	01 d0                	add    eax,edx
c001533c:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015344:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015348:	0f 94 c0             	sete   al
c001534b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015353:	0f 94 c1             	sete   cl
c0015356:	09 c1                	or     ecx,eax
c0015358:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001535c:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015361:	0f b6 c9             	movzx  ecx,cl
c0015364:	8b 00                	mov    eax,DWORD PTR [eax]
c0015366:	74 41                	je     c00153a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0015368:	8d 14 06             	lea    edx,[esi+eax*1]
c001536b:	85 c9                	test   ecx,ecx
c001536d:	75 15                	jne    c0015384 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001536f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015373:	66 83 f8 0c          	cmp    ax,0xc
c0015377:	76 05                	jbe    c001537e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0015379:	b8 0c 00 00 00       	mov    eax,0xc
c001537e:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015382:	76 37                	jbe    c00153bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015384:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015389:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001538d:	0f 84 e6 00 00 00    	je     c0015479 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015393:	83 ec 0c             	sub    esp,0xc
c0015396:	68 7c 27 02 c0       	push   0xc002277c
c001539b:	e8 77 c1 ff ff       	call   c0011517 <KePanic(char const*)>
c00153a0:	83 c4 10             	add    esp,0x10
c00153a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153a7:	eb 12                	jmp    c00153bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153a9:	01 c2                	add    edx,eax
c00153ab:	85 c9                	test   ecx,ecx
c00153ad:	75 0c                	jne    c00153bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153af:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00153b3:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00153b7:	77 02                	ja     c00153bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153b9:	01 f2                	add    edx,esi
c00153bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153bf:	89 10                	mov    DWORD PTR [eax],edx
c00153c1:	e9 ed 00 00 00       	jmp    c00154b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00153c6:	83 f8 02             	cmp    eax,0x2
c00153c9:	0f 85 81 00 00 00    	jne    c0015450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c00153cf:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00153d6:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00153da:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00153de:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00153e6:	74 21                	je     c0015409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00153e8:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00153f0:	74 17                	je     c0015409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00153f2:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c00153f6:	ba 0a 00 00 00       	mov    edx,0xa
c00153fb:	83 f9 0e             	cmp    ecx,0xe
c00153fe:	77 03                	ja     c0015403 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0015400:	8d 51 fc             	lea    edx,[ecx-0x4]
c0015403:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0015407:	76 1f                	jbe    c0015428 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015409:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001540e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015412:	74 65                	je     c0015479 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015414:	83 ec 0c             	sub    esp,0xc
c0015417:	68 98 27 02 c0       	push   0xc0022798
c001541c:	e8 f6 c0 ff ff       	call   c0011517 <KePanic(char const*)>
c0015421:	83 c4 10             	add    esp,0x10
c0015424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015428:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001542d:	8b 10                	mov    edx,DWORD PTR [eax]
c001542f:	74 15                	je     c0015446 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015431:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015435:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001543c:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015440:	01 d1                	add    ecx,edx
c0015442:	01 ce                	add    esi,ecx
c0015444:	eb 06                	jmp    c001544c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015446:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c001544a:	01 d6                	add    esi,edx
c001544c:	89 30                	mov    DWORD PTR [eax],esi
c001544e:	eb 63                	jmp    c00154b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015450:	56                   	push   esi
c0015451:	56                   	push   esi
c0015452:	50                   	push   eax
c0015453:	68 b4 27 02 c0       	push   0xc00227b4
c0015458:	e8 ad 54 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015465:	74 12                	je     c0015479 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015467:	83 ec 0c             	sub    esp,0xc
c001546a:	68 bf 27 02 c0       	push   0xc00227bf
c001546f:	e8 a3 c0 ff ff       	call   c0011517 <KePanic(char const*)>
c0015474:	83 c4 10             	add    esp,0x10
c0015477:	eb 3a                	jmp    c00154b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015479:	83 ec 0c             	sub    esp,0xc
c001547c:	53                   	push   ebx
c001547d:	e8 ca 66 ff ff       	call   c000bb4c <File::close()>
c0015482:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015484:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015487:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001548a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001548d:	e8 51 26 ff ff       	call   c0007ae3 <free>
c0015492:	59                   	pop    ecx
c0015493:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015497:	e8 47 26 ff ff       	call   c0007ae3 <free>
c001549c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001549f:	e8 3f 26 ff ff       	call   c0007ae3 <free>
c00154a4:	5b                   	pop    ebx
c00154a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154a9:	e8 35 26 ff ff       	call   c0007ae3 <free>
c00154ae:	83 c4 10             	add    esp,0x10
c00154b1:	eb 1e                	jmp    c00154d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00154b3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00154b7:	e9 4d fd ff ff       	jmp    c0015209 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00154bc:	83 ec 0c             	sub    esp,0xc
c00154bf:	57                   	push   edi
c00154c0:	e8 1e 26 ff ff       	call   c0007ae3 <free>
c00154c5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00154c9:	83 c4 10             	add    esp,0x10
c00154cc:	e9 cc fc ff ff       	jmp    c001519d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00154d1:	31 c0                	xor    eax,eax
c00154d3:	eb 32                	jmp    c0015507 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00154d5:	83 ec 0c             	sub    esp,0xc
c00154d8:	53                   	push   ebx
c00154d9:	e8 6e 66 ff ff       	call   c000bb4c <File::close()>
c00154de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00154e6:	58                   	pop    eax
c00154e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00154eb:	e8 f3 25 ff ff       	call   c0007ae3 <free>
c00154f0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00154f3:	e8 eb 25 ff ff       	call   c0007ae3 <free>
c00154f8:	5a                   	pop    edx
c00154f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154fd:	e8 e1 25 ff ff       	call   c0007ae3 <free>
c0015502:	83 c4 10             	add    esp,0x10
c0015505:	b0 01                	mov    al,0x1
c0015507:	81 c4 5c 03 00 00    	add    esp,0x35c
c001550d:	5b                   	pop    ebx
c001550e:	5e                   	pop    esi
c001550f:	5f                   	pop    edi
c0015510:	5d                   	pop    ebp
c0015511:	c3                   	ret    

c0015512 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015512:	56                   	push   esi
c0015513:	31 d2                	xor    edx,edx
c0015515:	53                   	push   ebx
c0015516:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001551c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015520:	39 d3                	cmp    ebx,edx
c0015522:	7e 1b                	jle    c001553f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015524:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c001552b:	39 c8                	cmp    eax,ecx
c001552d:	77 0d                	ja     c001553c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001552f:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015536:	01 c6                	add    esi,eax
c0015538:	39 ce                	cmp    esi,ecx
c001553a:	77 05                	ja     c0015541 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001553c:	42                   	inc    edx
c001553d:	eb e1                	jmp    c0015520 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001553f:	31 c0                	xor    eax,eax
c0015541:	5b                   	pop    ebx
c0015542:	5e                   	pop    esi
c0015543:	c3                   	ret    

c0015544 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015544:	53                   	push   ebx
c0015545:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001554b:	31 c0                	xor    eax,eax
c001554d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015551:	39 c3                	cmp    ebx,eax
c0015553:	7e 22                	jle    c0015577 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015555:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c001555c:	39 ca                	cmp    edx,ecx
c001555e:	77 14                	ja     c0015574 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015560:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c0015567:	39 ca                	cmp    edx,ecx
c0015569:	76 09                	jbe    c0015574 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001556b:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015572:	eb 05                	jmp    c0015579 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015574:	40                   	inc    eax
c0015575:	eb da                	jmp    c0015551 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015577:	31 c0                	xor    eax,eax
c0015579:	5b                   	pop    ebx
c001557a:	c3                   	ret    

c001557b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001557b:	53                   	push   ebx
c001557c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015580:	53                   	push   ebx
c0015581:	e8 8c ff ff ff       	call   c0015512 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015586:	5a                   	pop    edx
c0015587:	31 d2                	xor    edx,edx
c0015589:	85 c0                	test   eax,eax
c001558b:	74 04                	je     c0015591 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001558d:	89 da                	mov    edx,ebx
c001558f:	29 c2                	sub    edx,eax
c0015591:	5b                   	pop    ebx
c0015592:	89 d0                	mov    eax,edx
c0015594:	c3                   	ret    

c0015595 <Thr::loadDLL(char const*, bool)>:
c0015595:	55                   	push   ebp
c0015596:	57                   	push   edi
c0015597:	56                   	push   esi
c0015598:	53                   	push   ebx
c0015599:	81 ec 34 01 00 00    	sub    esp,0x134
c001559f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00155a6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00155ad:	56                   	push   esi
c00155ae:	68 d7 27 02 c0       	push   0xc00227d7
c00155b3:	e8 52 53 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00155b8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00155bf:	e8 0f 25 ff ff       	call   c0007ad3 <malloc>
c00155c4:	83 c4 0c             	add    esp,0xc
c00155c7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00155cd:	56                   	push   esi
c00155ce:	50                   	push   eax
c00155cf:	89 c3                	mov    ebx,eax
c00155d1:	e8 fa 64 ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c00155d6:	83 c4 10             	add    esp,0x10
c00155d9:	85 db                	test   ebx,ebx
c00155db:	75 3c                	jne    c0015619 <Thr::loadDLL(char const*, bool)+0x84>
c00155dd:	89 e8                	mov    eax,ebp
c00155df:	84 c0                	test   al,al
c00155e1:	0f 84 e1 01 00 00    	je     c00157c8 <Thr::loadDLL(char const*, bool)+0x233>
c00155e7:	50                   	push   eax
c00155e8:	50                   	push   eax
c00155e9:	68 e8 27 02 c0       	push   0xc00227e8
c00155ee:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00155f2:	57                   	push   edi
c00155f3:	e8 58 b0 fe ff       	call   c0000650 <strcpy>
c00155f8:	58                   	pop    eax
c00155f9:	5a                   	pop    edx
c00155fa:	56                   	push   esi
c00155fb:	57                   	push   edi
c00155fc:	e8 6f b2 fe ff       	call   c0000870 <strcat>
c0015601:	59                   	pop    ecx
c0015602:	58                   	pop    eax
c0015603:	68 fb 27 02 c0       	push   0xc00227fb
c0015608:	57                   	push   edi
c0015609:	e8 62 b2 fe ff       	call   c0000870 <strcat>
c001560e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015611:	e8 01 bf ff ff       	call   c0011517 <KePanic(char const*)>
c0015616:	83 c4 10             	add    esp,0x10
c0015619:	50                   	push   eax
c001561a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001561e:	50                   	push   eax
c001561f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015623:	50                   	push   eax
c0015624:	53                   	push   ebx
c0015625:	e8 c6 67 ff ff       	call   c000bdf0 <File::stat(unsigned long long*, bool*)>
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	85 db                	test   ebx,ebx
c001562f:	74 0c                	je     c001563d <Thr::loadDLL(char const*, bool)+0xa8>
c0015631:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015633:	83 ec 0c             	sub    esp,0xc
c0015636:	53                   	push   ebx
c0015637:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001563a:	83 c4 10             	add    esp,0x10
c001563d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015642:	75 0a                	jne    c001564e <Thr::loadDLL(char const*, bool)+0xb9>
c0015644:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015648:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001564c:	75 3e                	jne    c001568c <Thr::loadDLL(char const*, bool)+0xf7>
c001564e:	89 e8                	mov    eax,ebp
c0015650:	31 db                	xor    ebx,ebx
c0015652:	84 c0                	test   al,al
c0015654:	0f 84 6e 01 00 00    	je     c00157c8 <Thr::loadDLL(char const*, bool)+0x233>
c001565a:	50                   	push   eax
c001565b:	50                   	push   eax
c001565c:	68 e8 27 02 c0       	push   0xc00227e8
c0015661:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015665:	53                   	push   ebx
c0015666:	e8 e5 af fe ff       	call   c0000650 <strcpy>
c001566b:	58                   	pop    eax
c001566c:	5a                   	pop    edx
c001566d:	56                   	push   esi
c001566e:	53                   	push   ebx
c001566f:	e8 fc b1 fe ff       	call   c0000870 <strcat>
c0015674:	59                   	pop    ecx
c0015675:	5f                   	pop    edi
c0015676:	68 fb 27 02 c0       	push   0xc00227fb
c001567b:	53                   	push   ebx
c001567c:	e8 ef b1 fe ff       	call   c0000870 <strcat>
c0015681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015684:	e8 8e be ff ff       	call   c0011517 <KePanic(char const*)>
c0015689:	83 c4 10             	add    esp,0x10
c001568c:	53                   	push   ebx
c001568d:	6a 03                	push   0x3
c001568f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015693:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015697:	05 ff 0f 00 00       	add    eax,0xfff
c001569c:	83 d2 00             	adc    edx,0x0
c001569f:	0f ac d0 0c          	shrd   eax,edx,0xc
c00156a3:	50                   	push   eax
c00156a4:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00156aa:	e8 57 47 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00156af:	89 c3                	mov    ebx,eax
c00156b1:	58                   	pop    eax
c00156b2:	5a                   	pop    edx
c00156b3:	53                   	push   ebx
c00156b4:	68 52 0d 02 c0       	push   0xc0020d52
c00156b9:	e8 4c 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00156be:	89 34 24             	mov    DWORD PTR [esp],esi
c00156c1:	e8 ba ae fe ff       	call   c0000580 <strlen>
c00156c6:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c00156cc:	40                   	inc    eax
c00156cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00156d0:	e8 fe 23 ff ff       	call   c0007ad3 <malloc>
c00156d5:	59                   	pop    ecx
c00156d6:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c00156dd:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00156e2:	5f                   	pop    edi
c00156e3:	56                   	push   esi
c00156e4:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00156eb:	e8 60 af fe ff       	call   c0000650 <strcpy>
c00156f0:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00156f5:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c00156fc:	8d 50 01             	lea    edx,[eax+0x1]
c00156ff:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c0015705:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015709:	83 c4 0c             	add    esp,0xc
c001570c:	6a 01                	push   0x1
c001570e:	53                   	push   ebx
c001570f:	56                   	push   esi
c0015710:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c0015717:	e8 b5 f6 ff ff       	call   c0014dd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001571c:	83 c4 10             	add    esp,0x10
c001571f:	89 c7                	mov    edi,eax
c0015721:	89 f8                	mov    eax,edi
c0015723:	83 f0 01             	xor    eax,0x1
c0015726:	84 c0                	test   al,al
c0015728:	74 18                	je     c0015742 <Thr::loadDLL(char const*, bool)+0x1ad>
c001572a:	89 e8                	mov    eax,ebp
c001572c:	84 c0                	test   al,al
c001572e:	74 12                	je     c0015742 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015730:	83 ec 0c             	sub    esp,0xc
c0015733:	68 fd 27 02 c0       	push   0xc00227fd
c0015738:	e8 da bd ff ff       	call   c0011517 <KePanic(char const*)>
c001573d:	83 c4 10             	add    esp,0x10
c0015740:	eb 06                	jmp    c0015748 <Thr::loadDLL(char const*, bool)+0x1b3>
c0015742:	89 f8                	mov    eax,edi
c0015744:	84 c0                	test   al,al
c0015746:	75 10                	jne    c0015758 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015748:	83 ec 0c             	sub    esp,0xc
c001574b:	68 1c 28 02 c0       	push   0xc002281c
c0015750:	e8 c2 bd ff ff       	call   c0011517 <KePanic(char const*)>
c0015755:	83 c4 10             	add    esp,0x10
c0015758:	31 f6                	xor    esi,esi
c001575a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001575e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015762:	05 ff 0f 00 00       	add    eax,0xfff
c0015767:	83 d2 00             	adc    edx,0x0
c001576a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001576e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015772:	c1 ea 0c             	shr    edx,0xc
c0015775:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015779:	ba 00 00 00 00       	mov    edx,0x0
c001577e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015782:	89 d0                	mov    eax,edx
c0015784:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015788:	73 32                	jae    c00157bc <Thr::loadDLL(char const*, bool)+0x227>
c001578a:	50                   	push   eax
c001578b:	50                   	push   eax
c001578c:	89 f0                	mov    eax,esi
c001578e:	c1 e0 0c             	shl    eax,0xc
c0015791:	01 d8                	add    eax,ebx
c0015793:	50                   	push   eax
c0015794:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001579a:	e8 4b 41 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c001579f:	83 c4 10             	add    esp,0x10
c00157a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a4:	a8 60                	test   al,0x60
c00157a6:	75 11                	jne    c00157b9 <Thr::loadDLL(char const*, bool)+0x224>
c00157a8:	83 ec 0c             	sub    esp,0xc
c00157ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00157b0:	50                   	push   eax
c00157b1:	e8 c3 25 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00157b6:	83 c4 10             	add    esp,0x10
c00157b9:	46                   	inc    esi
c00157ba:	eb 9e                	jmp    c001575a <Thr::loadDLL(char const*, bool)+0x1c5>
c00157bc:	89 f8                	mov    eax,edi
c00157be:	84 c0                	test   al,al
c00157c0:	b8 00 00 00 00       	mov    eax,0x0
c00157c5:	0f 44 d8             	cmove  ebx,eax
c00157c8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00157ce:	89 d8                	mov    eax,ebx
c00157d0:	5b                   	pop    ebx
c00157d1:	5e                   	pop    esi
c00157d2:	5f                   	pop    edi
c00157d3:	5d                   	pop    ebp
c00157d4:	c3                   	ret    

c00157d5 <Thr::executeDLL(unsigned long, void*)>:
c00157d5:	56                   	push   esi
c00157d6:	53                   	push   ebx
c00157d7:	52                   	push   edx
c00157d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157dc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00157e0:	85 db                	test   ebx,ebx
c00157e2:	75 10                	jne    c00157f4 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00157e4:	83 ec 0c             	sub    esp,0xc
c00157e7:	68 38 28 02 c0       	push   0xc0022838
c00157ec:	e8 26 bd ff ff       	call   c0011517 <KePanic(char const*)>
c00157f1:	83 c4 10             	add    esp,0x10
c00157f4:	50                   	push   eax
c00157f5:	50                   	push   eax
c00157f6:	53                   	push   ebx
c00157f7:	68 62 28 02 c0       	push   0xc0022862
c00157fc:	e8 09 51 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015801:	89 d8                	mov    eax,ebx
c0015803:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015807:	83 c4 14             	add    esp,0x14
c001580a:	5b                   	pop    ebx
c001580b:	5e                   	pop    esi
c001580c:	ff e0                	jmp    eax
c001580e:	66 90                	xchg   ax,ax

c0015810 <userModeEntryPoint(void*)>:
c0015810:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015815:	83 e8 01             	sub    eax,0x1
c0015818:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001581d:	75 01                	jne    c0015820 <userModeEntryPoint(void*)+0x10>
c001581f:	fb                   	sti    
c0015820:	fb                   	sti    
c0015821:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015826:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015829:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001582f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015833:	e9 07 aa fe ff       	jmp    c000023f <goToUsermode>

c0015838 <changeTSS>:
c0015838:	83 ec 14             	sub    esp,0x14
c001583b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015840:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015843:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015848:	c1 e2 15             	shl    edx,0x15
c001584b:	29 d0                	sub    eax,edx
c001584d:	50                   	push   eax
c001584e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0015853:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015859:	05 7c 11 00 00       	add    eax,0x117c
c001585e:	50                   	push   eax
c001585f:	e8 d8 36 ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c0015864:	83 c4 1c             	add    esp,0x1c
c0015867:	c3                   	ret    

c0015868 <switchToThread(ThreadControlBlock*)>:
c0015868:	57                   	push   edi
c0015869:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001586f:	56                   	push   esi
c0015870:	53                   	push   ebx
c0015871:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015875:	85 c9                	test   ecx,ecx
c0015877:	0f 85 8b 00 00 00    	jne    c0015908 <switchToThread(ThreadControlBlock*)+0xa0>
c001587d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015881:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015887:	74 7b                	je     c0015904 <switchToThread(ThreadControlBlock*)+0x9c>
c0015889:	b8 00 04 00 00       	mov    eax,0x400
c001588e:	29 d0                	sub    eax,edx
c0015890:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015893:	d1 f8                	sar    eax,1
c0015895:	01 d0                	add    eax,edx
c0015897:	90                   	nop
c0015898:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001589b:	e8 04 28 00 00       	call   c00180a4 <HalQueryPerformanceCounter()>
c00158a0:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c00158a5:	89 c6                	mov    esi,eax
c00158a7:	89 d7                	mov    edi,edx
c00158a9:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c00158af:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c00158b4:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c00158ba:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c00158c0:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c00158c6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00158cc:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c00158d2:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c00158d8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00158db:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00158de:	01 c6                	add    esi,eax
c00158e0:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00158e3:	11 d7                	adc    edi,edx
c00158e5:	83 ec 0c             	sub    esp,0xc
c00158e8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00158eb:	53                   	push   ebx
c00158ec:	e8 86 a9 fe ff       	call   c0000277 <switchToThreadASM>
c00158f1:	0f 20 c0             	mov    eax,cr0
c00158f4:	83 c8 08             	or     eax,0x8
c00158f7:	0f 22 c0             	mov    cr0,eax
c00158fa:	83 c4 10             	add    esp,0x10
c00158fd:	5b                   	pop    ebx
c00158fe:	5e                   	pop    esi
c00158ff:	5f                   	pop    edi
c0015900:	c3                   	ret    
c0015901:	8d 76 00             	lea    esi,[esi+0x0]
c0015904:	31 c0                	xor    eax,eax
c0015906:	eb 90                	jmp    c0015898 <switchToThread(ThreadControlBlock*)+0x30>
c0015908:	5b                   	pop    ebx
c0015909:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015913:	5e                   	pop    esi
c0015914:	5f                   	pop    edi
c0015915:	c3                   	ret    
c0015916:	66 90                	xchg   ax,ax

c0015918 <Process::addArgs(char**)>:
c0015918:	57                   	push   edi
c0015919:	56                   	push   esi
c001591a:	53                   	push   ebx
c001591b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001591f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015923:	85 f6                	test   esi,esi
c0015925:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c001592f:	74 4f                	je     c0015980 <Process::addArgs(char**)+0x68>
c0015931:	8b 06                	mov    eax,DWORD PTR [esi]
c0015933:	85 c0                	test   eax,eax
c0015935:	74 49                	je     c0015980 <Process::addArgs(char**)+0x68>
c0015937:	31 db                	xor    ebx,ebx
c0015939:	8d 76 00             	lea    esi,[esi+0x0]
c001593c:	83 ec 0c             	sub    esp,0xc
c001593f:	50                   	push   eax
c0015940:	e8 3b ac fe ff       	call   c0000580 <strlen>
c0015945:	83 c0 01             	add    eax,0x1
c0015948:	89 04 24             	mov    DWORD PTR [esp],eax
c001594b:	e8 83 21 ff ff       	call   c0007ad3 <malloc>
c0015950:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015957:	5a                   	pop    edx
c0015958:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001595b:	83 c3 01             	add    ebx,0x1
c001595e:	59                   	pop    ecx
c001595f:	52                   	push   edx
c0015960:	50                   	push   eax
c0015961:	e8 ea ac fe ff       	call   c0000650 <strcpy>
c0015966:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c001596c:	83 c4 10             	add    esp,0x10
c001596f:	83 c1 01             	add    ecx,0x1
c0015972:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015978:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001597b:	85 c0                	test   eax,eax
c001597d:	75 bd                	jne    c001593c <Process::addArgs(char**)+0x24>
c001597f:	90                   	nop
c0015980:	5b                   	pop    ebx
c0015981:	5e                   	pop    esi
c0015982:	5f                   	pop    edi
c0015983:	c3                   	ret    

c0015984 <Process::Process(char const*, Process*, char**)>:
c0015984:	56                   	push   esi
c0015985:	53                   	push   ebx
c0015986:	83 ec 14             	sub    esp,0x14
c0015989:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001598d:	05 0c 02 00 00       	add    eax,0x20c
c0015992:	bb 07 00 00 00       	mov    ebx,0x7
c0015997:	89 c6                	mov    esi,eax
c0015999:	8d 76 00             	lea    esi,[esi+0x0]
c001599c:	85 db                	test   ebx,ebx
c001599e:	78 14                	js     c00159b4 <Process::Process(char const*, Process*, char**)+0x30>
c00159a0:	83 ec 0c             	sub    esp,0xc
c00159a3:	56                   	push   esi
c00159a4:	e8 2f a6 00 00       	call   c001ffd8 <ThreadControlBlock::ThreadControlBlock()>
c00159a9:	83 c4 10             	add    esp,0x10
c00159ac:	83 c6 5f             	add    esi,0x5f
c00159af:	83 eb 01             	sub    ebx,0x1
c00159b2:	eb e8                	jmp    c001599c <Process::Process(char const*, Process*, char**)+0x18>
c00159b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159b8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00159bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159c3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00159ca:	83 ec 0c             	sub    esp,0xc
c00159cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00159d1:	e8 36 b9 ff ff       	call   c001130c <KeNewProcessEnv(Process*)>
c00159d6:	83 c4 10             	add    esp,0x10
c00159d9:	89 c2                	mov    edx,eax
c00159db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159df:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00159e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159e9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00159f2:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c00159f7:	8d 50 01             	lea    edx,[eax+0x1]
c00159fa:	89 15 80 3e 02 c0    	mov    DWORD PTR ds:0xc0023e80,edx
c0015a00:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a04:	89 02                	mov    DWORD PTR [edx],eax
c0015a06:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015a0e:	83 ec 0c             	sub    esp,0xc
c0015a11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a15:	e8 b9 20 ff ff       	call   c0007ad3 <malloc>
c0015a1a:	83 c4 10             	add    esp,0x10
c0015a1d:	89 c3                	mov    ebx,eax
c0015a1f:	83 ec 08             	sub    esp,0x8
c0015a22:	6a 00                	push   0x0
c0015a24:	53                   	push   ebx
c0015a25:	e8 28 46 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015a2a:	83 c4 10             	add    esp,0x10
c0015a2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a31:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015a37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a3b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015a45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a49:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a4d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015a53:	e8 d6 be ff ff       	call   c001192e <KeInitSignals()>
c0015a58:	89 c2                	mov    edx,eax
c0015a5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a5e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a68:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a6e:	85 c0                	test   eax,eax
c0015a70:	74 42                	je     c0015ab4 <Process::Process(char const*, Process*, char**)+0x130>
c0015a72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a76:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a7c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015a82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a86:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a90:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a96:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa0:	05 0c 01 00 00       	add    eax,0x10c
c0015aa5:	83 ec 08             	sub    esp,0x8
c0015aa8:	52                   	push   edx
c0015aa9:	50                   	push   eax
c0015aaa:	e8 a1 ab fe ff       	call   c0000650 <strcpy>
c0015aaf:	83 c4 10             	add    esp,0x10
c0015ab2:	eb 64                	jmp    c0015b18 <Process::Process(char const*, Process*, char**)+0x194>
c0015ab4:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015abc:	83 ec 0c             	sub    esp,0xc
c0015abf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015ac3:	e8 0b 20 ff ff       	call   c0007ad3 <malloc>
c0015ac8:	83 c4 10             	add    esp,0x10
c0015acb:	89 c3                	mov    ebx,eax
c0015acd:	83 ec 08             	sub    esp,0x8
c0015ad0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ad4:	53                   	push   ebx
c0015ad5:	e8 92 31 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015ada:	83 c4 10             	add    esp,0x10
c0015add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ae1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015ae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aeb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015af1:	83 ec 0c             	sub    esp,0xc
c0015af4:	50                   	push   eax
c0015af5:	e8 20 2a ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b01:	05 0c 01 00 00       	add    eax,0x10c
c0015b06:	83 ec 08             	sub    esp,0x8
c0015b09:	68 81 28 02 c0       	push   0xc0022881
c0015b0e:	50                   	push   eax
c0015b0f:	e8 3c ab fe ff       	call   c0000650 <strcpy>
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	90                   	nop
c0015b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1c:	83 c0 0c             	add    eax,0xc
c0015b1f:	83 ec 08             	sub    esp,0x8
c0015b22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b26:	50                   	push   eax
c0015b27:	e8 24 ab fe ff       	call   c0000650 <strcpy>
c0015b2c:	83 c4 10             	add    esp,0x10
c0015b2f:	83 ec 08             	sub    esp,0x8
c0015b32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015b36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b3a:	e8 d9 fd ff ff       	call   c0015918 <Process::addArgs(char**)>
c0015b3f:	83 c4 10             	add    esp,0x10
c0015b42:	83 ec 08             	sub    esp,0x8
c0015b45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b4d:	e8 40 ed ff ff       	call   c0014892 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015b52:	83 c4 10             	add    esp,0x10
c0015b55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015b59:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b5d:	83 f0 01             	xor    eax,0x1
c0015b60:	88 c2                	mov    dl,al
c0015b62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b66:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015b6c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015b71:	83 ec 04             	sub    esp,0x4
c0015b74:	50                   	push   eax
c0015b75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b79:	68 d8 28 02 c0       	push   0xc00228d8
c0015b7e:	e8 87 4d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015b83:	83 c4 10             	add    esp,0x10
c0015b86:	90                   	nop
c0015b87:	83 c4 14             	add    esp,0x14
c0015b8a:	5b                   	pop    ebx
c0015b8b:	5e                   	pop    esi
c0015b8c:	c3                   	ret    
c0015b8d:	90                   	nop
c0015b8e:	66 90                	xchg   ax,ax

c0015b90 <Process::Process(bool, char const*, Process*, char**)>:
c0015b90:	56                   	push   esi
c0015b91:	53                   	push   ebx
c0015b92:	83 ec 24             	sub    esp,0x24
c0015b95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015b99:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015b9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ba1:	05 0c 02 00 00       	add    eax,0x20c
c0015ba6:	bb 07 00 00 00       	mov    ebx,0x7
c0015bab:	89 c6                	mov    esi,eax
c0015bad:	8d 76 00             	lea    esi,[esi+0x0]
c0015bb0:	85 db                	test   ebx,ebx
c0015bb2:	78 14                	js     c0015bc8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015bb4:	83 ec 0c             	sub    esp,0xc
c0015bb7:	56                   	push   esi
c0015bb8:	e8 1b a4 00 00       	call   c001ffd8 <ThreadControlBlock::ThreadControlBlock()>
c0015bbd:	83 c4 10             	add    esp,0x10
c0015bc0:	83 c6 5f             	add    esi,0x5f
c0015bc3:	83 eb 01             	sub    ebx,0x1
c0015bc6:	eb e8                	jmp    c0015bb0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015bc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bcc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015bd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bd7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015bde:	83 ec 0c             	sub    esp,0xc
c0015be1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015be5:	e8 22 b7 ff ff       	call   c001130c <KeNewProcessEnv(Process*)>
c0015bea:	83 c4 10             	add    esp,0x10
c0015bed:	89 c2                	mov    edx,eax
c0015bef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bf3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015bf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bfd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015c06:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0015c0b:	8d 50 01             	lea    edx,[eax+0x1]
c0015c0e:	89 15 80 3e 02 c0    	mov    DWORD PTR ds:0xc0023e80,edx
c0015c14:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c18:	89 02                	mov    DWORD PTR [edx],eax
c0015c1a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015c22:	83 ec 0c             	sub    esp,0xc
c0015c25:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015c29:	e8 a5 1e ff ff       	call   c0007ad3 <malloc>
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	89 c3                	mov    ebx,eax
c0015c33:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015c38:	83 ec 08             	sub    esp,0x8
c0015c3b:	50                   	push   eax
c0015c3c:	53                   	push   ebx
c0015c3d:	e8 10 44 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015c42:	83 c4 10             	add    esp,0x10
c0015c45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c49:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015c4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c53:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015c5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c61:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c65:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015c6b:	e8 be bc ff ff       	call   c001192e <KeInitSignals()>
c0015c70:	89 c2                	mov    edx,eax
c0015c72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c76:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015c7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c80:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c86:	85 c0                	test   eax,eax
c0015c88:	74 42                	je     c0015ccc <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015c8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c8e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c94:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015c9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c9e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015ca4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ca8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015cb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cb8:	05 0c 01 00 00       	add    eax,0x10c
c0015cbd:	83 ec 08             	sub    esp,0x8
c0015cc0:	52                   	push   edx
c0015cc1:	50                   	push   eax
c0015cc2:	e8 89 a9 fe ff       	call   c0000650 <strcpy>
c0015cc7:	83 c4 10             	add    esp,0x10
c0015cca:	eb 64                	jmp    c0015d30 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015ccc:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015cd4:	83 ec 0c             	sub    esp,0xc
c0015cd7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015cdb:	e8 f3 1d ff ff       	call   c0007ad3 <malloc>
c0015ce0:	83 c4 10             	add    esp,0x10
c0015ce3:	89 c3                	mov    ebx,eax
c0015ce5:	83 ec 08             	sub    esp,0x8
c0015ce8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015cec:	53                   	push   ebx
c0015ced:	e8 7a 2f ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015cf2:	83 c4 10             	add    esp,0x10
c0015cf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cf9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015cff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d09:	83 ec 0c             	sub    esp,0xc
c0015d0c:	50                   	push   eax
c0015d0d:	e8 08 28 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015d12:	83 c4 10             	add    esp,0x10
c0015d15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d19:	05 0c 01 00 00       	add    eax,0x10c
c0015d1e:	83 ec 08             	sub    esp,0x8
c0015d21:	68 81 28 02 c0       	push   0xc0022881
c0015d26:	50                   	push   eax
c0015d27:	e8 24 a9 fe ff       	call   c0000650 <strcpy>
c0015d2c:	83 c4 10             	add    esp,0x10
c0015d2f:	90                   	nop
c0015d30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d34:	83 c0 0c             	add    eax,0xc
c0015d37:	83 ec 08             	sub    esp,0x8
c0015d3a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d3e:	50                   	push   eax
c0015d3f:	e8 0c a9 fe ff       	call   c0000650 <strcpy>
c0015d44:	83 c4 10             	add    esp,0x10
c0015d47:	83 ec 08             	sub    esp,0x8
c0015d4a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015d4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d52:	e8 c1 fb ff ff       	call   c0015918 <Process::addArgs(char**)>
c0015d57:	83 c4 10             	add    esp,0x10
c0015d5a:	90                   	nop
c0015d5b:	83 c4 24             	add    esp,0x24
c0015d5e:	5b                   	pop    ebx
c0015d5f:	5e                   	pop    esi
c0015d60:	c3                   	ret    
c0015d61:	8d 76 00             	lea    esi,[esi+0x0]

c0015d64 <taskStartupFunction>:
c0015d64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d69:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015d6c:	c3                   	ret    
c0015d6d:	90                   	nop
c0015d6e:	66 90                	xchg   ax,ax

c0015d70 <Semaphore::Semaphore(int)>:
c0015d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d78:	89 10                	mov    DWORD PTR [eax],edx
c0015d7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d7e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015d85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015d90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015d9b:	90                   	nop
c0015d9c:	c3                   	ret    
c0015d9d:	90                   	nop
c0015d9e:	66 90                	xchg   ax,ax

c0015da0 <Mutex::Mutex()>:
c0015da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015da4:	6a 01                	push   0x1
c0015da6:	50                   	push   eax
c0015da7:	e8 c4 ff ff ff       	call   c0015d70 <Semaphore::Semaphore(int)>
c0015dac:	83 c4 08             	add    esp,0x8
c0015daf:	90                   	nop
c0015db0:	c3                   	ret    
c0015db1:	90                   	nop
c0015db2:	66 90                	xchg   ax,ax

c0015db4 <Process::createThread(void (*)(void*), void*, int)>:
c0015db4:	57                   	push   edi
c0015db5:	31 c9                	xor    ecx,ecx
c0015db7:	56                   	push   esi
c0015db8:	53                   	push   ebx
c0015db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015dbd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015dc4:	89 f2                	mov    edx,esi
c0015dc6:	66 90                	xchg   ax,ax
c0015dc8:	0f b7 c2             	movzx  eax,dx
c0015dcb:	80 e2 01             	and    dl,0x1
c0015dce:	74 14                	je     c0015de4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015dd0:	d1 f8                	sar    eax,1
c0015dd2:	83 c1 01             	add    ecx,0x1
c0015dd5:	83 f9 10             	cmp    ecx,0x10
c0015dd8:	89 c2                	mov    edx,eax
c0015dda:	75 ec                	jne    c0015dc8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015ddc:	31 db                	xor    ebx,ebx
c0015dde:	89 d8                	mov    eax,ebx
c0015de0:	5b                   	pop    ebx
c0015de1:	5e                   	pop    esi
c0015de2:	5f                   	pop    edi
c0015de3:	c3                   	ret    
c0015de4:	b8 01 00 00 00       	mov    eax,0x1
c0015de9:	d3 e0                	shl    eax,cl
c0015deb:	09 c6                	or     esi,eax
c0015ded:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015df4:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015df7:	c1 e0 05             	shl    eax,0x5
c0015dfa:	29 c8                	sub    eax,ecx
c0015dfc:	01 d8                	add    eax,ebx
c0015dfe:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015e05:	75 0d                	jne    c0015e14 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015e07:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015e11:	8d 76 00             	lea    esi,[esi+0x0]
c0015e14:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015e1a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015e1d:	83 ec 0c             	sub    esp,0xc
c0015e20:	c1 e6 05             	shl    esi,0x5
c0015e23:	29 ce                	sub    esi,ecx
c0015e25:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015e28:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015e2b:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015e31:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015e37:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015e3d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015e44:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015e4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015e4e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015e54:	89 ca                	mov    edx,ecx
c0015e56:	f7 da                	neg    edx
c0015e58:	c1 e2 15             	shl    edx,0x15
c0015e5b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015e61:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015e67:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015e6b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015e75:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015e7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e7f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015e85:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015e8f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015e99:	68 00 01 00 00       	push   0x100
c0015e9e:	e8 30 1c ff ff       	call   c0007ad3 <malloc>
c0015ea3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015ea6:	58                   	pop    eax
c0015ea7:	5a                   	pop    edx
c0015ea8:	53                   	push   ebx
c0015ea9:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015eae:	e8 bd 9e 00 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015eb3:	83 c4 10             	add    esp,0x10
c0015eb6:	89 d8                	mov    eax,ebx
c0015eb8:	5b                   	pop    ebx
c0015eb9:	5e                   	pop    esi
c0015eba:	5f                   	pop    edi
c0015ebb:	c3                   	ret    

c0015ebc <Process::createUserThread()>:
c0015ebc:	83 ec 0c             	sub    esp,0xc
c0015ebf:	68 80 00 00 00       	push   0x80
c0015ec4:	6a 00                	push   0x0
c0015ec6:	68 10 58 01 c0       	push   0xc0015810
c0015ecb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ecf:	50                   	push   eax
c0015ed0:	e8 df fe ff ff       	call   c0015db4 <Process::createThread(void (*)(void*), void*, int)>
c0015ed5:	83 c4 1c             	add    esp,0x1c
c0015ed8:	c3                   	ret    
c0015ed9:	8d 76 00             	lea    esi,[esi+0x0]

c0015edc <setupMultitasking(void (*)())>:
c0015edc:	56                   	push   esi
c0015edd:	53                   	push   ebx
c0015ede:	83 ec 04             	sub    esp,0x4
c0015ee1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ee5:	eb 11                	jmp    c0015ef8 <setupMultitasking(void (*)())+0x1c>
c0015ee7:	90                   	nop
c0015ee8:	83 ec 0c             	sub    esp,0xc
c0015eeb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015ef0:	e8 bf 9d 00 00       	call   c001fcb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ef5:	83 c4 10             	add    esp,0x10
c0015ef8:	83 ec 0c             	sub    esp,0xc
c0015efb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f00:	e8 8b 9d 00 00       	call   c001fc90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f05:	83 c4 10             	add    esp,0x10
c0015f08:	84 c0                	test   al,al
c0015f0a:	74 dc                	je     c0015ee8 <setupMultitasking(void (*)())+0xc>
c0015f0c:	83 ec 0c             	sub    esp,0xc
c0015f0f:	68 24 07 00 00       	push   0x724
c0015f14:	e8 ba 1b ff ff       	call   c0007ad3 <malloc>
c0015f19:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015f20:	6a 00                	push   0x0
c0015f22:	68 85 28 02 c0       	push   0xc0022885
c0015f27:	6a 01                	push   0x1
c0015f29:	50                   	push   eax
c0015f2a:	89 c3                	mov    ebx,eax
c0015f2c:	e8 5f fc ff ff       	call   c0015b90 <Process::Process(bool, char const*, Process*, char**)>
c0015f31:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015f37:	83 c4 14             	add    esp,0x14
c0015f3a:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015f40:	50                   	push   eax
c0015f41:	e8 29 28 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015f46:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015f4d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015f57:	83 c8 01             	or     eax,0x1
c0015f5a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015f61:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f67:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015f6a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015f74:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015f7a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015f84:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015f8a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015f94:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015f9e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015fa4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015faa:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015fb4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015fbe:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015fc5:	e8 09 1b ff ff       	call   c0007ad3 <malloc>
c0015fca:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015fd0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015fd6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015fdc:	5a                   	pop    edx
c0015fdd:	59                   	pop    ecx
c0015fde:	68 81 28 02 c0       	push   0xc0022881
c0015fe3:	50                   	push   eax
c0015fe4:	e8 67 a6 fe ff       	call   c0000650 <strcpy>
c0015fe9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015ff0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015ff4:	83 c4 14             	add    esp,0x14
c0015ff7:	5b                   	pop    ebx
c0015ff8:	5e                   	pop    esi
c0015ff9:	e9 6b a2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015ffe:	66 90                	xchg   ax,ax

c0016000 <schedule()>:
c0016000:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016006:	85 d2                	test   edx,edx
c0016008:	74 0e                	je     c0016018 <schedule()+0x18>
c001600a:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016014:	c3                   	ret    
c0016015:	8d 76 00             	lea    esi,[esi+0x0]
c0016018:	53                   	push   ebx
c0016019:	83 ec 14             	sub    esp,0x14
c001601c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016021:	e8 6a 9c 00 00       	call   c001fc90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016026:	83 c4 10             	add    esp,0x10
c0016029:	84 c0                	test   al,al
c001602b:	75 3f                	jne    c001606c <schedule()+0x6c>
c001602d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016032:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016035:	83 fa 01             	cmp    edx,0x1
c0016038:	74 3a                	je     c0016074 <schedule()+0x74>
c001603a:	66 90                	xchg   ax,ax
c001603c:	83 ec 0c             	sub    esp,0xc
c001603f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016044:	e8 63 9c 00 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016049:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016050:	89 c3                	mov    ebx,eax
c0016052:	e8 5d 9c 00 00       	call   c001fcb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016057:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001605e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016061:	e8 02 f8 ff ff       	call   c0015868 <switchToThread(ThreadControlBlock*)>
c0016066:	83 c4 10             	add    esp,0x10
c0016069:	8d 76 00             	lea    esi,[esi+0x0]
c001606c:	83 c4 08             	add    esp,0x8
c001606f:	5b                   	pop    ebx
c0016070:	c3                   	ret    
c0016071:	8d 76 00             	lea    esi,[esi+0x0]
c0016074:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001607b:	83 ec 08             	sub    esp,0x8
c001607e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016083:	50                   	push   eax
c0016084:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016089:	e8 e2 9c 00 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001608e:	83 c4 10             	add    esp,0x10
c0016091:	eb a9                	jmp    c001603c <schedule()+0x3c>
c0016093:	90                   	nop

c0016094 <Semaphore::tryAcquire()>:
c0016094:	53                   	push   ebx
c0016095:	83 ec 08             	sub    esp,0x8
c0016098:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001609c:	fa                   	cli    
c001609d:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00160a3:	8d 42 01             	lea    eax,[edx+0x1]
c00160a6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00160ab:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00160b0:	8d 58 01             	lea    ebx,[eax+0x1]
c00160b3:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c00160b9:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00160bc:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00160be:	7c 2c                	jl     c00160ec <Semaphore::tryAcquire()+0x58>
c00160c0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00160c5:	85 c0                	test   eax,eax
c00160c7:	75 0b                	jne    c00160d4 <Semaphore::tryAcquire()+0x40>
c00160c9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00160ce:	85 c0                	test   eax,eax
c00160d0:	75 5a                	jne    c001612c <Semaphore::tryAcquire()+0x98>
c00160d2:	66 90                	xchg   ax,ax
c00160d4:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00160da:	31 c0                	xor    eax,eax
c00160dc:	85 d2                	test   edx,edx
c00160de:	75 04                	jne    c00160e4 <Semaphore::tryAcquire()+0x50>
c00160e0:	fb                   	sti    
c00160e1:	8d 76 00             	lea    esi,[esi+0x0]
c00160e4:	83 c4 08             	add    esp,0x8
c00160e7:	5b                   	pop    ebx
c00160e8:	c3                   	ret    
c00160e9:	8d 76 00             	lea    esi,[esi+0x0]
c00160ec:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00160f1:	83 c3 01             	add    ebx,0x1
c00160f4:	85 c0                	test   eax,eax
c00160f6:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00160f9:	75 21                	jne    c001611c <Semaphore::tryAcquire()+0x88>
c00160fb:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c0016101:	85 c9                	test   ecx,ecx
c0016103:	74 17                	je     c001611c <Semaphore::tryAcquire()+0x88>
c0016105:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001610f:	e8 ec fe ff ff       	call   c0016000 <schedule()>
c0016114:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016119:	8d 50 ff             	lea    edx,[eax-0x1]
c001611c:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016122:	85 d2                	test   edx,edx
c0016124:	b0 01                	mov    al,0x1
c0016126:	75 bc                	jne    c00160e4 <Semaphore::tryAcquire()+0x50>
c0016128:	eb b6                	jmp    c00160e0 <Semaphore::tryAcquire()+0x4c>
c001612a:	66 90                	xchg   ax,ax
c001612c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016136:	e8 c5 fe ff ff       	call   c0016000 <schedule()>
c001613b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016140:	8d 50 ff             	lea    edx,[eax-0x1]
c0016143:	31 c0                	xor    eax,eax
c0016145:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001614b:	85 d2                	test   edx,edx
c001614d:	75 95                	jne    c00160e4 <Semaphore::tryAcquire()+0x50>
c001614f:	eb 8f                	jmp    c00160e0 <Semaphore::tryAcquire()+0x4c>
c0016151:	90                   	nop
c0016152:	66 90                	xchg   ax,ax

c0016154 <Semaphore::assertLocked(char const*)>:
c0016154:	83 ec 0c             	sub    esp,0xc
c0016157:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001615b:	fa                   	cli    
c001615c:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016162:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016167:	83 c1 01             	add    ecx,0x1
c001616a:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016170:	8d 48 01             	lea    ecx,[eax+0x1]
c0016173:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016179:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001617b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001617e:	7c 28                	jl     c00161a8 <Semaphore::assertLocked(char const*)+0x54>
c0016180:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016185:	85 c0                	test   eax,eax
c0016187:	75 0b                	jne    c0016194 <Semaphore::assertLocked(char const*)+0x40>
c0016189:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001618e:	85 c0                	test   eax,eax
c0016190:	75 32                	jne    c00161c4 <Semaphore::assertLocked(char const*)+0x70>
c0016192:	66 90                	xchg   ax,ax
c0016194:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016199:	83 e8 01             	sub    eax,0x1
c001619c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161a1:	75 01                	jne    c00161a4 <Semaphore::assertLocked(char const*)+0x50>
c00161a3:	fb                   	sti    
c00161a4:	83 c4 0c             	add    esp,0xc
c00161a7:	c3                   	ret    
c00161a8:	83 ec 0c             	sub    esp,0xc
c00161ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00161af:	52                   	push   edx
c00161b0:	e8 62 b3 ff ff       	call   c0011517 <KePanic(char const*)>
c00161b5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00161ba:	83 c4 10             	add    esp,0x10
c00161bd:	83 e8 01             	sub    eax,0x1
c00161c0:	eb be                	jmp    c0016180 <Semaphore::assertLocked(char const*)+0x2c>
c00161c2:	66 90                	xchg   ax,ax
c00161c4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161ce:	e8 2d fe ff ff       	call   c0016000 <schedule()>
c00161d3:	eb bf                	jmp    c0016194 <Semaphore::assertLocked(char const*)+0x40>
c00161d5:	8d 76 00             	lea    esi,[esi+0x0]

c00161d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00161d8:	83 ec 0c             	sub    esp,0xc
c00161db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00161e7:	e8 14 fe ff ff       	call   c0016000 <schedule()>
c00161ec:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161f1:	83 e8 01             	sub    eax,0x1
c00161f4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161f9:	75 01                	jne    c00161fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00161fb:	fb                   	sti    
c00161fc:	83 c4 0c             	add    esp,0xc
c00161ff:	c3                   	ret    

c0016200 <blockTask(TaskState)>:
c0016200:	83 ec 0c             	sub    esp,0xc
c0016203:	fa                   	cli    
c0016204:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016209:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001620d:	83 c0 01             	add    eax,0x1
c0016210:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016215:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001621a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001621d:	e8 de fd ff ff       	call   c0016000 <schedule()>
c0016222:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016227:	83 e8 01             	sub    eax,0x1
c001622a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001622f:	75 03                	jne    c0016234 <blockTask(TaskState)+0x34>
c0016231:	fb                   	sti    
c0016232:	66 90                	xchg   ax,ax
c0016234:	83 c4 0c             	add    esp,0xc
c0016237:	c3                   	ret    

c0016238 <waitTask(int, int*, int)>:
c0016238:	83 ec 18             	sub    esp,0x18
c001623b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016240:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016244:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016247:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001624b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016250:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016253:	6a 07                	push   0x7
c0016255:	e8 a6 ff ff ff       	call   c0016200 <blockTask(TaskState)>
c001625a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001625f:	83 c4 10             	add    esp,0x10
c0016262:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016265:	85 d2                	test   edx,edx
c0016267:	74 0b                	je     c0016274 <waitTask(int, int*, int)+0x3c>
c0016269:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001626c:	89 02                	mov    DWORD PTR [edx],eax
c001626e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016273:	90                   	nop
c0016274:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016277:	83 c4 0c             	add    esp,0xc
c001627a:	c3                   	ret    
c001627b:	90                   	nop

c001627c <milliTenthSleepUntil(unsigned int)>:
c001627c:	83 ec 0c             	sub    esp,0xc
c001627f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016283:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016289:	76 05                	jbe    c0016290 <milliTenthSleepUntil(unsigned int)+0x14>
c001628b:	90                   	nop
c001628c:	83 c4 0c             	add    esp,0xc
c001628f:	c3                   	ret    
c0016290:	fa                   	cli    
c0016291:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016297:	83 ec 08             	sub    esp,0x8
c001629a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00162a0:	83 c2 01             	add    edx,0x1
c00162a3:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00162a9:	83 c1 01             	add    ecx,0x1
c00162ac:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00162b2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00162b8:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00162bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162c0:	50                   	push   eax
c00162c1:	68 d8 c6 02 c0       	push   0xc002c6d8
c00162c6:	e8 a5 9a 00 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162cb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00162d2:	e8 29 ff ff ff       	call   c0016200 <blockTask(TaskState)>
c00162d7:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162dc:	83 c4 10             	add    esp,0x10
c00162df:	83 e8 01             	sub    eax,0x1
c00162e2:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00162e7:	85 c0                	test   eax,eax
c00162e9:	75 09                	jne    c00162f4 <milliTenthSleepUntil(unsigned int)+0x78>
c00162eb:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00162f0:	85 c0                	test   eax,eax
c00162f2:	75 14                	jne    c0016308 <milliTenthSleepUntil(unsigned int)+0x8c>
c00162f4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162f9:	83 e8 01             	sub    eax,0x1
c00162fc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016301:	75 89                	jne    c001628c <milliTenthSleepUntil(unsigned int)+0x10>
c0016303:	fb                   	sti    
c0016304:	83 c4 0c             	add    esp,0xc
c0016307:	c3                   	ret    
c0016308:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016312:	e8 e9 fc ff ff       	call   c0016000 <schedule()>
c0016317:	eb db                	jmp    c00162f4 <milliTenthSleepUntil(unsigned int)+0x78>
c0016319:	8d 76 00             	lea    esi,[esi+0x0]

c001631c <milliTenthSleep(unsigned int)>:
c001631c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016320:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016325:	01 c2                	add    edx,eax
c0016327:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001632b:	e9 4c ff ff ff       	jmp    c001627c <milliTenthSleepUntil(unsigned int)>

c0016330 <sleep(unsigned int)>:
c0016330:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0016338:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001633c:	eb de                	jmp    c001631c <milliTenthSleep(unsigned int)>
c001633e:	66 90                	xchg   ax,ax

c0016340 <Semaphore::acquire()>:
c0016340:	83 ec 0c             	sub    esp,0xc
c0016343:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016347:	fa                   	cli    
c0016348:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001634d:	83 c0 01             	add    eax,0x1
c0016350:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016355:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001635a:	8d 48 01             	lea    ecx,[eax+0x1]
c001635d:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016363:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016366:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016368:	7d 2e                	jge    c0016398 <Semaphore::acquire()+0x58>
c001636a:	83 c1 01             	add    ecx,0x1
c001636d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016370:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016375:	85 c0                	test   eax,eax
c0016377:	75 0b                	jne    c0016384 <Semaphore::acquire()+0x44>
c0016379:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001637e:	85 c0                	test   eax,eax
c0016380:	75 66                	jne    c00163e8 <Semaphore::acquire()+0xa8>
c0016382:	66 90                	xchg   ax,ax
c0016384:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016389:	83 e8 01             	sub    eax,0x1
c001638c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016391:	75 01                	jne    c0016394 <Semaphore::acquire()+0x54>
c0016393:	fb                   	sti    
c0016394:	83 c4 0c             	add    esp,0xc
c0016397:	c3                   	ret    
c0016398:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001639d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00163a4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00163a7:	85 c9                	test   ecx,ecx
c00163a9:	74 51                	je     c00163fc <Semaphore::acquire()+0xbc>
c00163ab:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00163ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00163b4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00163b7:	90                   	nop
c00163b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163bd:	83 ec 0c             	sub    esp,0xc
c00163c0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00163c3:	68 04 29 02 c0       	push   0xc0022904
c00163c8:	e8 3d 45 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00163cd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00163d4:	e8 27 fe ff ff       	call   c0016200 <blockTask(TaskState)>
c00163d9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163de:	83 c4 10             	add    esp,0x10
c00163e1:	83 e8 01             	sub    eax,0x1
c00163e4:	eb 8a                	jmp    c0016370 <Semaphore::acquire()+0x30>
c00163e6:	66 90                	xchg   ax,ax
c00163e8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00163f2:	e8 09 fc ff ff       	call   c0016000 <schedule()>
c00163f7:	eb 8b                	jmp    c0016384 <Semaphore::acquire()+0x44>
c00163f9:	8d 76 00             	lea    esi,[esi+0x0]
c00163fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016401:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016404:	eb b2                	jmp    c00163b8 <Semaphore::acquire()+0x78>
c0016406:	66 90                	xchg   ax,ax

c0016408 <taskReturned>:
c0016408:	83 ec 18             	sub    esp,0x18
c001640b:	68 24 29 02 c0       	push   0xc0022924
c0016410:	e8 02 b1 ff ff       	call   c0011517 <KePanic(char const*)>
c0016415:	83 c4 10             	add    esp,0x10
c0016418:	83 ec 0c             	sub    esp,0xc
c001641b:	6a 02                	push   0x2
c001641d:	e8 de fd ff ff       	call   c0016200 <blockTask(TaskState)>
c0016422:	fa                   	cli    
c0016423:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016428:	83 c0 01             	add    eax,0x1
c001642b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016430:	e8 cb fb ff ff       	call   c0016000 <schedule()>
c0016435:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001643a:	83 c4 10             	add    esp,0x10
c001643d:	83 e8 01             	sub    eax,0x1
c0016440:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016445:	85 c0                	test   eax,eax
c0016447:	75 cf                	jne    c0016418 <taskReturned+0x10>
c0016449:	fb                   	sti    
c001644a:	eb cc                	jmp    c0016418 <taskReturned+0x10>

c001644c <Thr::processFromPID(int)>:
c001644c:	57                   	push   edi
c001644d:	56                   	push   esi
c001644e:	53                   	push   ebx
c001644f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016453:	fa                   	cli    
c0016454:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001645a:	83 ec 0c             	sub    esp,0xc
c001645d:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016462:	83 c1 01             	add    ecx,0x1
c0016465:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001646b:	e8 3c 98 00 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016470:	83 c4 10             	add    esp,0x10
c0016473:	89 c7                	mov    edi,eax
c0016475:	eb 15                	jmp    c001648c <Thr::processFromPID(int)+0x40>
c0016477:	90                   	nop
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016480:	e8 27 98 00 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016485:	83 c4 10             	add    esp,0x10
c0016488:	39 f8                	cmp    eax,edi
c001648a:	74 50                	je     c00164dc <Thr::processFromPID(int)+0x90>
c001648c:	83 ec 0c             	sub    esp,0xc
c001648f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016494:	e8 13 98 00 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016499:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00164a0:	89 c3                	mov    ebx,eax
c00164a2:	e8 0d 98 00 00       	call   c001fcb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164a7:	58                   	pop    eax
c00164a8:	5a                   	pop    edx
c00164a9:	53                   	push   ebx
c00164aa:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164af:	e8 bc 98 00 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164b4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164b7:	83 c4 10             	add    esp,0x10
c00164ba:	39 30                	cmp    DWORD PTR [eax],esi
c00164bc:	75 ba                	jne    c0016478 <Thr::processFromPID(int)+0x2c>
c00164be:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164c3:	83 e8 01             	sub    eax,0x1
c00164c6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164cb:	74 0b                	je     c00164d8 <Thr::processFromPID(int)+0x8c>
c00164cd:	8d 76 00             	lea    esi,[esi+0x0]
c00164d0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164d3:	90                   	nop
c00164d4:	5b                   	pop    ebx
c00164d5:	5e                   	pop    esi
c00164d6:	5f                   	pop    edi
c00164d7:	c3                   	ret    
c00164d8:	fb                   	sti    
c00164d9:	eb f5                	jmp    c00164d0 <Thr::processFromPID(int)+0x84>
c00164db:	90                   	nop
c00164dc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164e1:	8d 50 ff             	lea    edx,[eax-0x1]
c00164e4:	31 c0                	xor    eax,eax
c00164e6:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00164ec:	85 d2                	test   edx,edx
c00164ee:	75 e4                	jne    c00164d4 <Thr::processFromPID(int)+0x88>
c00164f0:	fb                   	sti    
c00164f1:	5b                   	pop    ebx
c00164f2:	5e                   	pop    esi
c00164f3:	5f                   	pop    edi
c00164f4:	c3                   	ret    
c00164f5:	8d 76 00             	lea    esi,[esi+0x0]

c00164f8 <unblockTask(ThreadControlBlock*)>:
c00164f8:	53                   	push   ebx
c00164f9:	83 ec 08             	sub    esp,0x8
c00164fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016500:	fa                   	cli    
c0016501:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016506:	83 c0 01             	add    eax,0x1
c0016509:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001650e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016511:	85 c0                	test   eax,eax
c0016513:	74 67                	je     c001657c <unblockTask(ThreadControlBlock*)+0x84>
c0016515:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016518:	83 f8 01             	cmp    eax,0x1
c001651b:	74 37                	je     c0016554 <unblockTask(ThreadControlBlock*)+0x5c>
c001651d:	83 ec 0c             	sub    esp,0xc
c0016520:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016525:	e8 82 97 00 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001652a:	83 c4 10             	add    esp,0x10
c001652d:	85 c0                	test   eax,eax
c001652f:	75 1b                	jne    c001654c <unblockTask(ThreadControlBlock*)+0x54>
c0016531:	eb 5d                	jmp    c0016590 <unblockTask(ThreadControlBlock*)+0x98>
c0016533:	90                   	nop
c0016534:	83 ec 08             	sub    esp,0x8
c0016537:	50                   	push   eax
c0016538:	68 e4 c6 02 c0       	push   0xc002c6e4
c001653d:	e8 8a 9a 00 00       	call   c001ffcc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016542:	83 c4 10             	add    esp,0x10
c0016545:	85 c0                	test   eax,eax
c0016547:	74 47                	je     c0016590 <unblockTask(ThreadControlBlock*)+0x98>
c0016549:	8d 76 00             	lea    esi,[esi+0x0]
c001654c:	39 c3                	cmp    ebx,eax
c001654e:	75 e4                	jne    c0016534 <unblockTask(ThreadControlBlock*)+0x3c>
c0016550:	eb 12                	jmp    c0016564 <unblockTask(ThreadControlBlock*)+0x6c>
c0016552:	66 90                	xchg   ax,ax
c0016554:	83 ec 0c             	sub    esp,0xc
c0016557:	68 a3 28 02 c0       	push   0xc00228a3
c001655c:	e8 a9 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016561:	83 c4 10             	add    esp,0x10
c0016564:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016569:	83 e8 01             	sub    eax,0x1
c001656c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016571:	75 01                	jne    c0016574 <unblockTask(ThreadControlBlock*)+0x7c>
c0016573:	fb                   	sti    
c0016574:	83 c4 08             	add    esp,0x8
c0016577:	5b                   	pop    ebx
c0016578:	c3                   	ret    
c0016579:	8d 76 00             	lea    esi,[esi+0x0]
c001657c:	83 ec 0c             	sub    esp,0xc
c001657f:	68 8c 28 02 c0       	push   0xc002288c
c0016584:	e8 81 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016589:	83 c4 10             	add    esp,0x10
c001658c:	eb d6                	jmp    c0016564 <unblockTask(ThreadControlBlock*)+0x6c>
c001658e:	66 90                	xchg   ax,ax
c0016590:	83 ec 08             	sub    esp,0x8
c0016593:	53                   	push   ebx
c0016594:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016599:	e8 d2 97 00 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001659e:	83 c4 10             	add    esp,0x10
c00165a1:	eb c1                	jmp    c0016564 <unblockTask(ThreadControlBlock*)+0x6c>
c00165a3:	90                   	nop

c00165a4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00165a4:	55                   	push   ebp
c00165a5:	57                   	push   edi
c00165a6:	56                   	push   esi
c00165a7:	53                   	push   ebx
c00165a8:	83 ec 1c             	sub    esp,0x1c
c00165ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00165af:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165b2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00165b8:	85 ed                	test   ebp,ebp
c00165ba:	7e 28                	jle    c00165e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00165bc:	31 f6                	xor    esi,esi
c00165be:	66 90                	xchg   ax,ax
c00165c0:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00165c7:	83 ec 0c             	sub    esp,0xc
c00165ca:	83 c6 01             	add    esi,0x1
c00165cd:	57                   	push   edi
c00165ce:	e8 10 15 ff ff       	call   c0007ae3 <free>
c00165d3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165d6:	83 c4 10             	add    esp,0x10
c00165d9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00165df:	7f df                	jg     c00165c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00165e1:	8d 76 00             	lea    esi,[esi+0x0]
c00165e4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00165ee:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165f3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00165f6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00165f9:	d3 c0                	rol    eax,cl
c00165fb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016602:	21 c8                	and    eax,ecx
c0016604:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001660b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001660e:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016616:	89 f7                	mov    edi,esi
c0016618:	0f 85 72 01 00 00    	jne    c0016790 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001661e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016624:	85 ed                	test   ebp,ebp
c0016626:	74 1c                	je     c0016644 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016628:	83 ec 0c             	sub    esp,0xc
c001662b:	55                   	push   ebp
c001662c:	e8 f7 ab ff ff       	call   c0011228 <EnvVarContainer::~EnvVarContainer()>
c0016631:	59                   	pop    ecx
c0016632:	5e                   	pop    esi
c0016633:	6a 0c                	push   0xc
c0016635:	55                   	push   ebp
c0016636:	e8 d1 41 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001663b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001663e:	83 c4 10             	add    esp,0x10
c0016641:	89 f7                	mov    edi,esi
c0016643:	90                   	nop
c0016644:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001664a:	85 c0                	test   eax,eax
c001664c:	0f 84 b2 00 00 00    	je     c0016704 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016652:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016655:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016659:	31 c9                	xor    ecx,ecx
c001665b:	eb 17                	jmp    c0016674 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001665d:	8d 76 00             	lea    esi,[esi+0x0]
c0016660:	83 c1 01             	add    ecx,0x1
c0016663:	83 f9 10             	cmp    ecx,0x10
c0016666:	0f 84 98 00 00 00    	je     c0016704 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001666c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016672:	66 90                	xchg   ax,ax
c0016674:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001667b:	d3 fa                	sar    edx,cl
c001667d:	80 e2 01             	and    dl,0x1
c0016680:	74 de                	je     c0016660 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016682:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016685:	c1 e2 05             	shl    edx,0x5
c0016688:	29 ca                	sub    edx,ecx
c001668a:	01 d0                	add    eax,edx
c001668c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016692:	83 fd 07             	cmp    ebp,0x7
c0016695:	75 c9                	jne    c0016660 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016697:	05 40 02 00 00       	add    eax,0x240
c001669c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001669f:	83 fd ff             	cmp    ebp,0xffffffff
c00166a2:	0f 8c f0 00 00 00    	jl     c0016798 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00166a8:	0f 84 ae 01 00 00    	je     c001685c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00166ae:	85 ed                	test   ebp,ebp
c00166b0:	0f 84 92 01 00 00    	je     c0016848 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00166b6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00166b8:	75 a6                	jne    c0016660 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00166be:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166c4:	01 d0                	add    eax,edx
c00166c6:	66 90                	xchg   ax,ax
c00166c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00166cc:	83 ec 0c             	sub    esp,0xc
c00166cf:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00166d5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166d8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00166de:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00166e5:	50                   	push   eax
c00166e6:	e8 0d fe ff ff       	call   c00164f8 <unblockTask(ThreadControlBlock*)>
c00166eb:	83 c4 10             	add    esp,0x10
c00166ee:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166f1:	89 f7                	mov    edi,esi
c00166f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166f7:	83 c1 01             	add    ecx,0x1
c00166fa:	83 f9 10             	cmp    ecx,0x10
c00166fd:	0f 85 69 ff ff ff    	jne    c001666c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016703:	90                   	nop
c0016704:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001670a:	85 c0                	test   eax,eax
c001670c:	74 62                	je     c0016770 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001670e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016714:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001671a:	74 54                	je     c0016770 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001671c:	83 ec 0c             	sub    esp,0xc
c001671f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016724:	e8 83 95 00 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016729:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016730:	89 c7                	mov    edi,eax
c0016732:	e8 59 95 00 00       	call   c001fc90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016737:	83 c4 10             	add    esp,0x10
c001673a:	84 c0                	test   al,al
c001673c:	0f 84 ce 00 00 00    	je     c0016810 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016742:	66 90                	xchg   ax,ax
c0016744:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016747:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001674d:	85 d2                	test   edx,edx
c001674f:	74 0f                	je     c0016760 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016751:	8b 02                	mov    eax,DWORD PTR [edx]
c0016753:	83 ec 0c             	sub    esp,0xc
c0016756:	52                   	push   edx
c0016757:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001675a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001676a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001676d:	8d 76 00             	lea    esi,[esi+0x0]
c0016770:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016776:	85 db                	test   ebx,ebx
c0016778:	74 16                	je     c0016790 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001677a:	83 ec 0c             	sub    esp,0xc
c001677d:	53                   	push   ebx
c001677e:	e8 0d 34 ff ff       	call   c0009b90 <VAS::~VAS()>
c0016783:	58                   	pop    eax
c0016784:	5a                   	pop    edx
c0016785:	6a 14                	push   0x14
c0016787:	53                   	push   ebx
c0016788:	e8 7f 40 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001678d:	83 c4 10             	add    esp,0x10
c0016790:	83 c4 1c             	add    esp,0x1c
c0016793:	5b                   	pop    ebx
c0016794:	5e                   	pop    esi
c0016795:	5f                   	pop    edi
c0016796:	5d                   	pop    ebp
c0016797:	c3                   	ret    
c0016798:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001679c:	83 ec 0c             	sub    esp,0xc
c001679f:	68 58 29 02 c0       	push   0xc0022958
c00167a4:	e8 6e ad ff ff       	call   c0011517 <KePanic(char const*)>
c00167a9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167ac:	83 c4 10             	add    esp,0x10
c00167af:	89 f7                	mov    edi,esi
c00167b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00167b5:	e9 a6 fe ff ff       	jmp    c0016660 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167ba:	66 90                	xchg   ax,ax
c00167bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00167c2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00167c8:	75 1e                	jne    c00167e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00167ca:	83 ec 0c             	sub    esp,0xc
c00167cd:	68 c0 29 02 c0       	push   0xc00229c0
c00167d2:	e8 33 41 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00167d7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00167de:	e8 1d fa ff ff       	call   c0016200 <blockTask(TaskState)>
c00167e3:	83 c4 10             	add    esp,0x10
c00167e6:	66 90                	xchg   ax,ax
c00167e8:	83 ec 08             	sub    esp,0x8
c00167eb:	56                   	push   esi
c00167ec:	68 e4 c6 02 c0       	push   0xc002c6e4
c00167f1:	e8 7a 95 00 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00167f6:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00167fd:	e8 aa 94 00 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016802:	83 c4 10             	add    esp,0x10
c0016805:	39 f8                	cmp    eax,edi
c0016807:	0f 84 37 ff ff ff    	je     c0016744 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001680d:	8d 76 00             	lea    esi,[esi+0x0]
c0016810:	83 ec 0c             	sub    esp,0xc
c0016813:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016818:	e8 8f 94 00 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001681d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016824:	89 c6                	mov    esi,eax
c0016826:	e8 89 94 00 00       	call   c001fcb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001682b:	83 c4 10             	add    esp,0x10
c001682e:	39 f3                	cmp    ebx,esi
c0016830:	74 b6                	je     c00167e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016832:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016835:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016838:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001683e:	75 a8                	jne    c00167e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016840:	e9 77 ff ff ff       	jmp    c00167bc <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016845:	8d 76 00             	lea    esi,[esi+0x0]
c0016848:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001684c:	83 ec 0c             	sub    esp,0xc
c001684f:	68 8c 29 02 c0       	push   0xc002298c
c0016854:	e9 4b ff ff ff       	jmp    c00167a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016859:	8d 76 00             	lea    esi,[esi+0x0]
c001685c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016860:	8b 36                	mov    esi,DWORD PTR [esi]
c0016862:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016865:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016868:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001686e:	01 d7                	add    edi,edx
c0016870:	89 f8                	mov    eax,edi
c0016872:	e9 51 fe ff ff       	jmp    c00166c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016877:	90                   	nop

c0016878 <cleanerTaskFunction(void*)>:
c0016878:	53                   	push   ebx
c0016879:	83 ec 08             	sub    esp,0x8
c001687c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016881:	83 e8 01             	sub    eax,0x1
c0016884:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016889:	75 01                	jne    c001688c <cleanerTaskFunction(void*)+0x14>
c001688b:	fb                   	sti    
c001688c:	fa                   	cli    
c001688d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016892:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016899:	8d 50 01             	lea    edx,[eax+0x1]
c001689c:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00168a2:	0f 84 c4 00 00 00    	je     c001696c <cleanerTaskFunction(void*)+0xf4>
c00168a8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00168ad:	85 c0                	test   eax,eax
c00168af:	75 03                	jne    c00168b4 <cleanerTaskFunction(void*)+0x3c>
c00168b1:	fb                   	sti    
c00168b2:	66 90                	xchg   ax,ax
c00168b4:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c00168bb:	fa                   	cli    
c00168bc:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00168c2:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00168c8:	83 c2 01             	add    edx,0x1
c00168cb:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00168d1:	83 c1 01             	add    ecx,0x1
c00168d4:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00168da:	fa                   	cli    
c00168db:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c00168e1:	83 c3 01             	add    ebx,0x1
c00168e4:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c00168ea:	eb 28                	jmp    c0016914 <cleanerTaskFunction(void*)+0x9c>
c00168ec:	83 ec 0c             	sub    esp,0xc
c00168ef:	68 cc c6 02 c0       	push   0xc002c6cc
c00168f4:	e8 b3 93 00 00       	call   c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168f9:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016900:	89 c3                	mov    ebx,eax
c0016902:	e8 ad 93 00 00       	call   c001fcb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016907:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001690a:	e8 95 fc ff ff       	call   c00165a4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001690f:	83 c4 10             	add    esp,0x10
c0016912:	66 90                	xchg   ax,ax
c0016914:	83 ec 0c             	sub    esp,0xc
c0016917:	68 cc c6 02 c0       	push   0xc002c6cc
c001691c:	e8 6f 93 00 00       	call   c001fc90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016921:	83 c4 10             	add    esp,0x10
c0016924:	84 c0                	test   al,al
c0016926:	74 c4                	je     c00168ec <cleanerTaskFunction(void*)+0x74>
c0016928:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001692d:	83 e8 01             	sub    eax,0x1
c0016930:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016935:	75 01                	jne    c0016938 <cleanerTaskFunction(void*)+0xc0>
c0016937:	fb                   	sti    
c0016938:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001693d:	83 e8 01             	sub    eax,0x1
c0016940:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016945:	0f 85 31 ff ff ff    	jne    c001687c <cleanerTaskFunction(void*)+0x4>
c001694b:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016950:	85 c0                	test   eax,eax
c0016952:	0f 84 24 ff ff ff    	je     c001687c <cleanerTaskFunction(void*)+0x4>
c0016958:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016962:	e8 99 f6 ff ff       	call   c0016000 <schedule()>
c0016967:	e9 10 ff ff ff       	jmp    c001687c <cleanerTaskFunction(void*)+0x4>
c001696c:	83 ec 0c             	sub    esp,0xc
c001696f:	6a 02                	push   0x2
c0016971:	e8 62 f8 ff ff       	call   c00161d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016976:	83 c4 10             	add    esp,0x10
c0016979:	e9 36 ff ff ff       	jmp    c00168b4 <cleanerTaskFunction(void*)+0x3c>
c001697e:	66 90                	xchg   ax,ax

c0016980 <terminateTask(int)>:
c0016980:	83 ec 14             	sub    esp,0x14
c0016983:	fa                   	cli    
c0016984:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001698a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016990:	83 c2 01             	add    edx,0x1
c0016993:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016999:	83 c1 01             	add    ecx,0x1
c001699c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00169a2:	fa                   	cli    
c00169a3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00169ac:	83 c0 01             	add    eax,0x1
c00169af:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169b9:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00169bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169c1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00169c4:	50                   	push   eax
c00169c5:	68 cc c6 02 c0       	push   0xc002c6cc
c00169ca:	e8 a1 93 00 00       	call   c001fd70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169d4:	83 c4 10             	add    esp,0x10
c00169d7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00169de:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c00169e3:	85 c0                	test   eax,eax
c00169e5:	74 65                	je     c0016a4c <terminateTask(int)+0xcc>
c00169e7:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c00169ee:	83 ec 0c             	sub    esp,0xc
c00169f1:	50                   	push   eax
c00169f2:	e8 01 fb ff ff       	call   c00164f8 <unblockTask(ThreadControlBlock*)>
c00169f7:	83 c4 10             	add    esp,0x10
c00169fa:	66 90                	xchg   ax,ax
c00169fc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a01:	83 e8 01             	sub    eax,0x1
c0016a04:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a09:	75 01                	jne    c0016a0c <terminateTask(int)+0x8c>
c0016a0b:	fb                   	sti    
c0016a0c:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a11:	83 e8 01             	sub    eax,0x1
c0016a14:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a19:	75 09                	jne    c0016a24 <terminateTask(int)+0xa4>
c0016a1b:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016a22:	75 3c                	jne    c0016a60 <terminateTask(int)+0xe0>
c0016a24:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a29:	83 e8 01             	sub    eax,0x1
c0016a2c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a31:	75 01                	jne    c0016a34 <terminateTask(int)+0xb4>
c0016a33:	fb                   	sti    
c0016a34:	fa                   	cli    
c0016a35:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a3a:	83 c0 01             	add    eax,0x1
c0016a3d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a42:	66 90                	xchg   ax,ax
c0016a44:	e8 b7 f5 ff ff       	call   c0016000 <schedule()>
c0016a49:	eb d9                	jmp    c0016a24 <terminateTask(int)+0xa4>
c0016a4b:	90                   	nop
c0016a4c:	83 ec 0c             	sub    esp,0xc
c0016a4f:	68 ba 28 02 c0       	push   0xc00228ba
c0016a54:	e8 b1 3e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016a59:	83 c4 10             	add    esp,0x10
c0016a5c:	eb 9e                	jmp    c00169fc <terminateTask(int)+0x7c>
c0016a5e:	66 90                	xchg   ax,ax
c0016a60:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a6a:	eb d8                	jmp    c0016a44 <terminateTask(int)+0xc4>

c0016a6c <Thr::terminateFromIRQ(int)>:
c0016a6c:	83 ec 18             	sub    esp,0x18
c0016a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a73:	50                   	push   eax
c0016a74:	e8 07 ff ff ff       	call   c0016980 <terminateTask(int)>
c0016a79:	90                   	nop
c0016a7a:	66 90                	xchg   ax,ax

c0016a7c <Semaphore::release()>:
c0016a7c:	83 ec 0c             	sub    esp,0xc
c0016a7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016a83:	fa                   	cli    
c0016a84:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a89:	83 c0 01             	add    eax,0x1
c0016a8c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a91:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a96:	8d 48 01             	lea    ecx,[eax+0x1]
c0016a99:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a9f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016aa2:	85 c9                	test   ecx,ecx
c0016aa4:	74 42                	je     c0016ae8 <Semaphore::release()+0x6c>
c0016aa6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016aa9:	83 ec 0c             	sub    esp,0xc
c0016aac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016aaf:	51                   	push   ecx
c0016ab0:	e8 43 fa ff ff       	call   c00164f8 <unblockTask(ThreadControlBlock*)>
c0016ab5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016aba:	83 c4 10             	add    esp,0x10
c0016abd:	83 e8 01             	sub    eax,0x1
c0016ac0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ac5:	85 c0                	test   eax,eax
c0016ac7:	75 0b                	jne    c0016ad4 <Semaphore::release()+0x58>
c0016ac9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016ace:	85 c0                	test   eax,eax
c0016ad0:	75 22                	jne    c0016af4 <Semaphore::release()+0x78>
c0016ad2:	66 90                	xchg   ax,ax
c0016ad4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ad9:	83 e8 01             	sub    eax,0x1
c0016adc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ae1:	75 01                	jne    c0016ae4 <Semaphore::release()+0x68>
c0016ae3:	fb                   	sti    
c0016ae4:	83 c4 0c             	add    esp,0xc
c0016ae7:	c3                   	ret    
c0016ae8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016aeb:	83 e9 01             	sub    ecx,0x1
c0016aee:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016af1:	eb cd                	jmp    c0016ac0 <Semaphore::release()+0x44>
c0016af3:	90                   	nop
c0016af4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016afe:	e8 fd f4 ff ff       	call   c0016000 <schedule()>
c0016b03:	eb cf                	jmp    c0016ad4 <Semaphore::release()+0x58>
c0016b05:	8d 76 00             	lea    esi,[esi+0x0]

c0016b08 <__static_initialization_and_destruction_0(int, int)>:
c0016b08:	83 ec 0c             	sub    esp,0xc
c0016b0b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016b10:	0f 85 8e 00 00 00    	jne    c0016ba4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b16:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016b1e:	0f 85 80 00 00 00    	jne    c0016ba4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016b2c:	e8 f3 94 00 00       	call   c0020024 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b31:	83 c4 10             	add    esp,0x10
c0016b34:	83 ec 04             	sub    esp,0x4
c0016b37:	68 90 35 02 c0       	push   0xc0023590
c0016b3c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016b41:	68 d4 ff 01 c0       	push   0xc001ffd4
c0016b46:	e8 71 3c ff ff       	call   c000a7bc <__cxa_atexit>
c0016b4b:	83 c4 10             	add    esp,0x10
c0016b4e:	83 ec 0c             	sub    esp,0xc
c0016b51:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016b56:	e8 c9 94 00 00       	call   c0020024 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b5b:	83 c4 10             	add    esp,0x10
c0016b5e:	83 ec 04             	sub    esp,0x4
c0016b61:	68 90 35 02 c0       	push   0xc0023590
c0016b66:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016b6b:	68 d4 ff 01 c0       	push   0xc001ffd4
c0016b70:	e8 47 3c ff ff       	call   c000a7bc <__cxa_atexit>
c0016b75:	83 c4 10             	add    esp,0x10
c0016b78:	83 ec 0c             	sub    esp,0xc
c0016b7b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b80:	e8 9f 94 00 00       	call   c0020024 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b85:	83 c4 10             	add    esp,0x10
c0016b88:	83 ec 04             	sub    esp,0x4
c0016b8b:	68 90 35 02 c0       	push   0xc0023590
c0016b90:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b95:	68 d4 ff 01 c0       	push   0xc001ffd4
c0016b9a:	e8 1d 3c ff ff       	call   c000a7bc <__cxa_atexit>
c0016b9f:	83 c4 10             	add    esp,0x10
c0016ba2:	66 90                	xchg   ax,ax
c0016ba4:	90                   	nop
c0016ba5:	83 c4 0c             	add    esp,0xc
c0016ba8:	c3                   	ret    
c0016ba9:	8d 76 00             	lea    esi,[esi+0x0]

c0016bac <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016bac:	83 ec 0c             	sub    esp,0xc
c0016baf:	83 ec 08             	sub    esp,0x8
c0016bb2:	68 ff ff 00 00       	push   0xffff
c0016bb7:	6a 01                	push   0x1
c0016bb9:	e8 4a ff ff ff       	call   c0016b08 <__static_initialization_and_destruction_0(int, int)>
c0016bbe:	83 c4 10             	add    esp,0x10
c0016bc1:	83 c4 0c             	add    esp,0xc
c0016bc4:	c3                   	ret    

c0016bc5 <Vm::inbv(unsigned short)>:
c0016bc5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016bc9:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016bce:	75 06                	jne    c0016bd6 <Vm::inbv(unsigned short)+0x11>
c0016bd0:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016bd5:	c3                   	ret    
c0016bd6:	ec                   	in     al,dx
c0016bd7:	c3                   	ret    

c0016bd8 <Vm::outbv(unsigned short, unsigned char)>:
c0016bd8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016be0:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016be5:	75 25                	jne    c0016c0c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016be7:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016bed:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016bf3:	8d 51 01             	lea    edx,[ecx+0x1]
c0016bf6:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016bfc:	83 fa 20             	cmp    edx,0x20
c0016bff:	75 0c                	jne    c0016c0d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016c01:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016c0b:	c3                   	ret    
c0016c0c:	ee                   	out    dx,al
c0016c0d:	c3                   	ret    

c0016c0e <Vm::realToLinear(unsigned short, unsigned short)>:
c0016c0e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c13:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c18:	c1 e0 04             	shl    eax,0x4
c0016c1b:	01 d0                	add    eax,edx
c0016c1d:	c3                   	ret    

c0016c1e <Vm::getSegment(unsigned int)>:
c0016c1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c22:	c1 e8 10             	shr    eax,0x10
c0016c25:	c3                   	ret    

c0016c26 <Vm::getOffset(unsigned int)>:
c0016c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c2a:	c3                   	ret    

c0016c2b <Vm::mainloop2()>:
c0016c2b:	83 ec 18             	sub    esp,0x18
c0016c2e:	fa                   	cli    
c0016c2f:	6a 02                	push   0x2
c0016c31:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016c37:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016c3e:	e8 95 f5 ff ff       	call   c00161d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016c43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c48:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016c4c:	52                   	push   edx
c0016c4d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016c51:	52                   	push   edx
c0016c52:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016c56:	52                   	push   edx
c0016c57:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016c5b:	50                   	push   eax
c0016c5c:	e8 ae 95 fe ff       	call   c000020f <goToVM86>
c0016c61:	83 c4 2c             	add    esp,0x2c
c0016c64:	c3                   	ret    

c0016c65 <Vm::mainVm8086Loop(void*)>:
c0016c65:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c6a:	48                   	dec    eax
c0016c6b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c70:	75 01                	jne    c0016c73 <Vm::mainVm8086Loop(void*)+0xe>
c0016c72:	fb                   	sti    
c0016c73:	eb b6                	jmp    c0016c2b <Vm::mainloop2()>

c0016c75 <Vm::mainloop3(unsigned long)>:
c0016c75:	83 ec 18             	sub    esp,0x18
c0016c78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c7c:	fa                   	cli    
c0016c7d:	6a 02                	push   0x2
c0016c7f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016c85:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016c8c:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016c91:	e8 42 f5 ff ff       	call   c00161d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016c96:	83 c4 1c             	add    esp,0x1c
c0016c99:	eb 90                	jmp    c0016c2b <Vm::mainloop2()>

c0016c9b <Vm::initialise8086()>:
c0016c9b:	83 ec 0c             	sub    esp,0xc
c0016c9e:	68 80 00 00 00       	push   0x80
c0016ca3:	6a 00                	push   0x0
c0016ca5:	68 65 6c 01 c0       	push   0xc0016c65
c0016caa:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016cb0:	e8 ff f0 ff ff       	call   c0015db4 <Process::createThread(void (*)(void*), void*, int)>
c0016cb5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016cbc:	68 00 01 00 00       	push   0x100
c0016cc1:	6a 00                	push   0x0
c0016cc3:	6a 00                	push   0x0
c0016cc5:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016cca:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016ccf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016cd5:	e8 2e 32 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016cda:	83 c4 2c             	add    esp,0x2c
c0016cdd:	c3                   	ret    

c0016cde <Vm::finish8086()>:
c0016cde:	53                   	push   ebx
c0016cdf:	83 ec 08             	sub    esp,0x8
c0016ce2:	fa                   	cli    
c0016ce3:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ce9:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016cf0:	75 15                	jne    c0016d07 <Vm::finish8086()+0x29>
c0016cf2:	e8 09 f3 ff ff       	call   c0016000 <schedule()>
c0016cf7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016cfc:	48                   	dec    eax
c0016cfd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d02:	75 de                	jne    c0016ce2 <Vm::finish8086()+0x4>
c0016d04:	fb                   	sti    
c0016d05:	eb db                	jmp    c0016ce2 <Vm::finish8086()+0x4>
c0016d07:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016d0e:	83 ec 0c             	sub    esp,0xc
c0016d11:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016d17:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016d1d:	e8 d6 f7 ff ff       	call   c00164f8 <unblockTask(ThreadControlBlock*)>
c0016d22:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d27:	83 c4 10             	add    esp,0x10
c0016d2a:	8d 50 ff             	lea    edx,[eax-0x1]
c0016d2d:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016d33:	85 d2                	test   edx,edx
c0016d35:	75 01                	jne    c0016d38 <Vm::finish8086()+0x5a>
c0016d37:	fb                   	sti    
c0016d38:	83 c4 08             	add    esp,0x8
c0016d3b:	89 d8                	mov    eax,ebx
c0016d3d:	5b                   	pop    ebx
c0016d3e:	c3                   	ret    

c0016d3f <Vm::getOutput8086(unsigned char*)>:
c0016d3f:	57                   	push   edi
c0016d40:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d46:	56                   	push   esi
c0016d47:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016d4c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016d50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d52:	5e                   	pop    esi
c0016d53:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016d58:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016d62:	5f                   	pop    edi
c0016d63:	c3                   	ret    

c0016d64 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016d64:	55                   	push   ebp
c0016d65:	57                   	push   edi
c0016d66:	56                   	push   esi
c0016d67:	53                   	push   ebx
c0016d68:	83 ec 0c             	sub    esp,0xc
c0016d6b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016d6f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016d73:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016d77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016d7b:	fa                   	cli    
c0016d7c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d82:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016d89:	75 15                	jne    c0016da0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016d8b:	e8 70 f2 ff ff       	call   c0016000 <schedule()>
c0016d90:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d95:	48                   	dec    eax
c0016d96:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d9b:	75 de                	jne    c0016d7b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016d9d:	fb                   	sti    
c0016d9e:	eb db                	jmp    c0016d7b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016da0:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016daa:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016daf:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016db3:	0f b7 ff             	movzx  edi,di
c0016db6:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016dba:	0f b7 f6             	movzx  esi,si
c0016dbd:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016dc1:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016dc5:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016dc9:	50                   	push   eax
c0016dca:	6a 20                	push   0x20
c0016dcc:	6a 00                	push   0x0
c0016dce:	68 40 c7 02 c0       	push   0xc002c740
c0016dd3:	e8 18 97 fe ff       	call   c00004f0 <memset>
c0016dd8:	5a                   	pop    edx
c0016dd9:	59                   	pop    ecx
c0016dda:	57                   	push   edi
c0016ddb:	56                   	push   esi
c0016ddc:	e8 2d fe ff ff       	call   c0016c0e <Vm::realToLinear(unsigned short, unsigned short)>
c0016de1:	83 c4 10             	add    esp,0x10
c0016de4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016de8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016dec:	89 c7                	mov    edi,eax
c0016dee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016df0:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016df7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dfc:	48                   	dec    eax
c0016dfd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e02:	75 01                	jne    c0016e05 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016e04:	fb                   	sti    
c0016e05:	83 ec 0c             	sub    esp,0xc
c0016e08:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e0e:	e8 e5 f6 ff ff       	call   c00164f8 <unblockTask(ThreadControlBlock*)>
c0016e13:	83 c4 1c             	add    esp,0x1c
c0016e16:	b0 01                	mov    al,0x1
c0016e18:	5b                   	pop    ebx
c0016e19:	5e                   	pop    esi
c0016e1a:	5f                   	pop    edi
c0016e1b:	5d                   	pop    ebp
c0016e1c:	c3                   	ret    

c0016e1d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e1d:	55                   	push   ebp
c0016e1e:	57                   	push   edi
c0016e1f:	56                   	push   esi
c0016e20:	53                   	push   ebx
c0016e21:	83 ec 34             	sub    esp,0x34
c0016e24:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016e28:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016e2c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016e30:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016e34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e3c:	68 e8 29 02 c0       	push   0xc00229e8
c0016e41:	e8 c4 3a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016e46:	83 c4 10             	add    esp,0x10
c0016e49:	fa                   	cli    
c0016e4a:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016e50:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e56:	84 db                	test   bl,bl
c0016e58:	75 15                	jne    c0016e6f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016e5a:	e8 a1 f1 ff ff       	call   c0016000 <schedule()>
c0016e5f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e64:	48                   	dec    eax
c0016e65:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e6a:	75 dd                	jne    c0016e49 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016e6c:	fb                   	sti    
c0016e6d:	eb da                	jmp    c0016e49 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016e6f:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e7d:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016e82:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016e86:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e8a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e8e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e92:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e96:	50                   	push   eax
c0016e97:	6a 20                	push   0x20
c0016e99:	6a 00                	push   0x0
c0016e9b:	68 40 c7 02 c0       	push   0xc002c740
c0016ea0:	e8 4b 96 fe ff       	call   c00004f0 <memset>
c0016ea5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016eac:	e8 22 0c ff ff       	call   c0007ad3 <malloc>
c0016eb1:	83 c4 0c             	add    esp,0xc
c0016eb4:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016eba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ebe:	89 c5                	mov    ebp,eax
c0016ec0:	50                   	push   eax
c0016ec1:	e8 0a 4c ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c0016ec6:	83 c4 10             	add    esp,0x10
c0016ec9:	85 ed                	test   ebp,ebp
c0016ecb:	75 0a                	jne    c0016ed7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016ecd:	83 ec 0c             	sub    esp,0xc
c0016ed0:	68 0a 2a 02 c0       	push   0xc0022a0a
c0016ed5:	eb 2b                	jmp    c0016f02 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016ed7:	50                   	push   eax
c0016ed8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016edc:	50                   	push   eax
c0016edd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016ee1:	50                   	push   eax
c0016ee2:	55                   	push   ebp
c0016ee3:	e8 08 4f ff ff       	call   c000bdf0 <File::stat(unsigned long long*, bool*)>
c0016ee8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016eec:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016ef0:	83 c4 10             	add    esp,0x10
c0016ef3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016ef8:	74 27                	je     c0016f21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016efa:	83 ec 0c             	sub    esp,0xc
c0016efd:	68 1e 2a 02 c0       	push   0xc0022a1e
c0016f02:	e8 10 a6 ff ff       	call   c0011517 <KePanic(char const*)>
c0016f07:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f0c:	83 c4 10             	add    esp,0x10
c0016f0f:	48                   	dec    eax
c0016f10:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f15:	85 c0                	test   eax,eax
c0016f17:	75 01                	jne    c0016f1a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016f19:	fb                   	sti    
c0016f1a:	31 db                	xor    ebx,ebx
c0016f1c:	e9 90 00 00 00       	jmp    c0016fb1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016f21:	51                   	push   ecx
c0016f22:	51                   	push   ecx
c0016f23:	6a 01                	push   0x1
c0016f25:	55                   	push   ebp
c0016f26:	e8 c3 4b ff ff       	call   c000baee <File::open(FileOpenMode)>
c0016f2b:	83 c4 10             	add    esp,0x10
c0016f2e:	85 c0                	test   eax,eax
c0016f30:	74 26                	je     c0016f58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016f32:	83 ec 0c             	sub    esp,0xc
c0016f35:	68 37 2a 02 c0       	push   0xc0022a37
c0016f3a:	e8 d8 a5 ff ff       	call   c0011517 <KePanic(char const*)>
c0016f3f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f44:	83 c4 10             	add    esp,0x10
c0016f47:	48                   	dec    eax
c0016f48:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f4d:	85 c0                	test   eax,eax
c0016f4f:	75 c9                	jne    c0016f1a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016f51:	fb                   	sti    
c0016f52:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016f56:	eb 59                	jmp    c0016fb1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016f58:	50                   	push   eax
c0016f59:	0f b7 ff             	movzx  edi,di
c0016f5c:	50                   	push   eax
c0016f5d:	0f b7 f6             	movzx  esi,si
c0016f60:	57                   	push   edi
c0016f61:	56                   	push   esi
c0016f62:	e8 a7 fc ff ff       	call   c0016c0e <Vm::realToLinear(unsigned short, unsigned short)>
c0016f67:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f6a:	5a                   	pop    edx
c0016f6b:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016f6f:	56                   	push   esi
c0016f70:	50                   	push   eax
c0016f71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f79:	55                   	push   ebp
c0016f7a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f7d:	83 c4 14             	add    esp,0x14
c0016f80:	55                   	push   ebp
c0016f81:	e8 c6 4b ff ff       	call   c000bb4c <File::close()>
c0016f86:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f8b:	83 c4 10             	add    esp,0x10
c0016f8e:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016f95:	48                   	dec    eax
c0016f96:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f9b:	85 c0                	test   eax,eax
c0016f9d:	75 01                	jne    c0016fa0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016f9f:	fb                   	sti    
c0016fa0:	83 ec 0c             	sub    esp,0xc
c0016fa3:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016fa9:	e8 4a f5 ff ff       	call   c00164f8 <unblockTask(ThreadControlBlock*)>
c0016fae:	83 c4 10             	add    esp,0x10
c0016fb1:	83 c4 2c             	add    esp,0x2c
c0016fb4:	88 d8                	mov    al,bl
c0016fb6:	5b                   	pop    ebx
c0016fb7:	5e                   	pop    esi
c0016fb8:	5f                   	pop    edi
c0016fb9:	5d                   	pop    ebp
c0016fba:	c3                   	ret    

c0016fbb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016fbb:	57                   	push   edi
c0016fbc:	56                   	push   esi
c0016fbd:	53                   	push   ebx
c0016fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016fc6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016fca:	83 e8 06             	sub    eax,0x6
c0016fcd:	0f b7 c0             	movzx  eax,ax
c0016fd0:	50                   	push   eax
c0016fd1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016fd6:	50                   	push   eax
c0016fd7:	e8 32 fc ff ff       	call   c0016c0e <Vm::realToLinear(unsigned short, unsigned short)>
c0016fdc:	5a                   	pop    edx
c0016fdd:	59                   	pop    ecx
c0016fde:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016fe1:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016fe4:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016fe7:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016fed:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016ff0:	8d 51 02             	lea    edx,[ecx+0x2]
c0016ff3:	66 89 10             	mov    WORD PTR [eax],dx
c0016ff6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016ffa:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016ffe:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017002:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017005:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017009:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001700f:	89 f1                	mov    ecx,esi
c0017011:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017015:	89 f2                	mov    edx,esi
c0017017:	0f b6 d6             	movzx  edx,dh
c001701a:	0f b6 f1             	movzx  esi,cl
c001701d:	74 0a                	je     c0017029 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001701f:	c1 e2 08             	shl    edx,0x8
c0017022:	09 f2                	or     edx,esi
c0017024:	80 ce 02             	or     dh,0x2
c0017027:	eb 08                	jmp    c0017031 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0017029:	c1 e2 08             	shl    edx,0x8
c001702c:	09 f2                	or     edx,esi
c001702e:	80 e6 fd             	and    dh,0xfd
c0017031:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017035:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001703a:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001703e:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017046:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017049:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017054:	5b                   	pop    ebx
c0017055:	5e                   	pop    esi
c0017056:	5f                   	pop    edi
c0017057:	c3                   	ret    

c0017058 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017058:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001705d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017062:	c1 e0 04             	shl    eax,0x4
c0017065:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017068:	c3                   	ret    

c0017069 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017069:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001706e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017073:	c1 e0 04             	shl    eax,0x4
c0017076:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001707a:	c3                   	ret    

c001707b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001707b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017080:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017085:	c1 e0 04             	shl    eax,0x4
c0017088:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001708b:	c3                   	ret    

c001708c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001708c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017091:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017096:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001709a:	c1 e0 04             	shl    eax,0x4
c001709d:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00170a0:	c3                   	ret    

c00170a1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00170a1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170a6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170af:	c1 e0 04             	shl    eax,0x4
c00170b2:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00170b6:	c3                   	ret    

c00170b7 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00170b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170bc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170c5:	c1 e0 04             	shl    eax,0x4
c00170c8:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00170cb:	c3                   	ret    

c00170cc <Vm::faultHandler(regs*)>:
c00170cc:	55                   	push   ebp
c00170cd:	57                   	push   edi
c00170ce:	56                   	push   esi
c00170cf:	53                   	push   ebx
c00170d0:	83 ec 2c             	sub    esp,0x2c
c00170d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00170d7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00170da:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00170de:	0f b7 f8             	movzx  edi,ax
c00170e1:	0f b7 c0             	movzx  eax,ax
c00170e4:	52                   	push   edx
c00170e5:	50                   	push   eax
c00170e6:	e8 23 fb ff ff       	call   c0016c0e <Vm::realToLinear(unsigned short, unsigned short)>
c00170eb:	5a                   	pop    edx
c00170ec:	59                   	pop    ecx
c00170ed:	89 c1                	mov    ecx,eax
c00170ef:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00170f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170f6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00170fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170ff:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017102:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017106:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001710b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001710f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017113:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017117:	e8 f2 fa ff ff       	call   c0016c0e <Vm::realToLinear(unsigned short, unsigned short)>
c001711c:	5e                   	pop    esi
c001711d:	be 06 00 00 00       	mov    esi,0x6
c0017122:	5d                   	pop    ebp
c0017123:	31 ed                	xor    ebp,ebp
c0017125:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001712a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001712d:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017133:	0f 84 74 02 00 00    	je     c00173ad <Vm::faultHandler(regs*)+0x2e1>
c0017139:	0f 87 94 00 00 00    	ja     c00171d3 <Vm::faultHandler(regs*)+0x107>
c001713f:	83 fa 66             	cmp    edx,0x66
c0017142:	0f 84 e2 01 00 00    	je     c001732a <Vm::faultHandler(regs*)+0x25e>
c0017148:	77 47                	ja     c0017191 <Vm::faultHandler(regs*)+0xc5>
c001714a:	83 fa 36             	cmp    edx,0x36
c001714d:	0f 84 ca 01 00 00    	je     c001731d <Vm::faultHandler(regs*)+0x251>
c0017153:	77 1a                	ja     c001716f <Vm::faultHandler(regs*)+0xa3>
c0017155:	83 fa 26             	cmp    edx,0x26
c0017158:	0f 84 98 01 00 00    	je     c00172f6 <Vm::faultHandler(regs*)+0x22a>
c001715e:	83 fa 2e             	cmp    edx,0x2e
c0017161:	0f 85 27 06 00 00    	jne    c001778e <Vm::faultHandler(regs*)+0x6c2>
c0017167:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001716a:	31 f6                	xor    esi,esi
c001716c:	41                   	inc    ecx
c001716d:	eb bb                	jmp    c001712a <Vm::faultHandler(regs*)+0x5e>
c001716f:	83 fa 64             	cmp    edx,0x64
c0017172:	0f 84 8b 01 00 00    	je     c0017303 <Vm::faultHandler(regs*)+0x237>
c0017178:	0f 87 92 01 00 00    	ja     c0017310 <Vm::faultHandler(regs*)+0x244>
c001717e:	83 fa 3e             	cmp    edx,0x3e
c0017181:	0f 85 07 06 00 00    	jne    c001778e <Vm::faultHandler(regs*)+0x6c2>
c0017187:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001718a:	be 01 00 00 00       	mov    esi,0x1
c001718f:	eb db                	jmp    c001716c <Vm::faultHandler(regs*)+0xa0>
c0017191:	83 fa 6d             	cmp    edx,0x6d
c0017194:	0f 84 34 03 00 00    	je     c00174ce <Vm::faultHandler(regs*)+0x402>
c001719a:	77 17                	ja     c00171b3 <Vm::faultHandler(regs*)+0xe7>
c001719c:	83 fa 67             	cmp    edx,0x67
c001719f:	0f 84 92 01 00 00    	je     c0017337 <Vm::faultHandler(regs*)+0x26b>
c00171a5:	83 fa 6c             	cmp    edx,0x6c
c00171a8:	0f 84 b1 02 00 00    	je     c001745f <Vm::faultHandler(regs*)+0x393>
c00171ae:	e9 db 05 00 00       	jmp    c001778e <Vm::faultHandler(regs*)+0x6c2>
c00171b3:	83 fa 6f             	cmp    edx,0x6f
c00171b6:	0f 84 40 04 00 00    	je     c00175fc <Vm::faultHandler(regs*)+0x530>
c00171bc:	0f 82 a2 03 00 00    	jb     c0017564 <Vm::faultHandler(regs*)+0x498>
c00171c2:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00171c8:	0f 84 76 01 00 00    	je     c0017344 <Vm::faultHandler(regs*)+0x278>
c00171ce:	e9 bb 05 00 00       	jmp    c001778e <Vm::faultHandler(regs*)+0x6c2>
c00171d3:	81 fa ec 00 00 00    	cmp    edx,0xec
c00171d9:	0f 84 57 05 00 00    	je     c0017736 <Vm::faultHandler(regs*)+0x66a>
c00171df:	0f 87 a9 00 00 00    	ja     c001728e <Vm::faultHandler(regs*)+0x1c2>
c00171e5:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00171eb:	0f 84 d6 04 00 00    	je     c00176c7 <Vm::faultHandler(regs*)+0x5fb>
c00171f1:	77 78                	ja     c001726b <Vm::faultHandler(regs*)+0x19f>
c00171f3:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00171f9:	0f 84 0e 02 00 00    	je     c001740d <Vm::faultHandler(regs*)+0x341>
c00171ff:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017205:	0f 85 83 05 00 00    	jne    c001778e <Vm::faultHandler(regs*)+0x6c2>
c001720b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001720f:	89 d1                	mov    ecx,edx
c0017211:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017214:	c1 e1 08             	shl    ecx,0x8
c0017217:	09 ca                	or     edx,ecx
c0017219:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001721c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017220:	89 d1                	mov    ecx,edx
c0017222:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017226:	c1 e1 08             	shl    ecx,0x8
c0017229:	09 ca                	or     edx,ecx
c001722b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001722e:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017232:	89 d1                	mov    ecx,edx
c0017234:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017238:	c1 e1 08             	shl    ecx,0x8
c001723b:	09 ca                	or     edx,ecx
c001723d:	81 ca 00 02 02 00    	or     edx,0x20200
c0017243:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017246:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001724a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017250:	d1 e8                	shr    eax,1
c0017252:	83 e0 01             	and    eax,0x1
c0017255:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017258:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001725b:	83 c0 06             	add    eax,0x6
c001725e:	25 ff ff 00 00       	and    eax,0xffff
c0017263:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017266:	e9 1f 05 00 00       	jmp    c001778a <Vm::faultHandler(regs*)+0x6be>
c001726b:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017271:	0f 84 95 04 00 00    	je     c001770c <Vm::faultHandler(regs*)+0x640>
c0017277:	0f 82 66 04 00 00    	jb     c00176e3 <Vm::faultHandler(regs*)+0x617>
c001727d:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017283:	0f 84 9a 04 00 00    	je     c0017723 <Vm::faultHandler(regs*)+0x657>
c0017289:	e9 00 05 00 00       	jmp    c001778e <Vm::faultHandler(regs*)+0x6c2>
c001728e:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017294:	0f 84 dd 04 00 00    	je     c0017777 <Vm::faultHandler(regs*)+0x6ab>
c001729a:	77 2e                	ja     c00172ca <Vm::faultHandler(regs*)+0x1fe>
c001729c:	81 fa ed 00 00 00    	cmp    edx,0xed
c00172a2:	0f 84 aa 04 00 00    	je     c0017752 <Vm::faultHandler(regs*)+0x686>
c00172a8:	81 fa ee 00 00 00    	cmp    edx,0xee
c00172ae:	0f 85 da 04 00 00    	jne    c001778e <Vm::faultHandler(regs*)+0x6c2>
c00172b4:	50                   	push   eax
c00172b5:	50                   	push   eax
c00172b6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00172ba:	50                   	push   eax
c00172bb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00172bf:	50                   	push   eax
c00172c0:	e8 13 f9 ff ff       	call   c0016bd8 <Vm::outbv(unsigned short, unsigned char)>
c00172c5:	e9 a5 04 00 00       	jmp    c001776f <Vm::faultHandler(regs*)+0x6a3>
c00172ca:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00172d0:	0f 84 6d 01 00 00    	je     c0017443 <Vm::faultHandler(regs*)+0x377>
c00172d6:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00172dc:	0f 84 6f 01 00 00    	je     c0017451 <Vm::faultHandler(regs*)+0x385>
c00172e2:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00172e8:	0f 85 a0 04 00 00    	jne    c001778e <Vm::faultHandler(regs*)+0x6c2>
c00172ee:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172f1:	e9 76 fe ff ff       	jmp    c001716c <Vm::faultHandler(regs*)+0xa0>
c00172f6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172f9:	be 02 00 00 00       	mov    esi,0x2
c00172fe:	e9 69 fe ff ff       	jmp    c001716c <Vm::faultHandler(regs*)+0xa0>
c0017303:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017306:	be 03 00 00 00       	mov    esi,0x3
c001730b:	e9 5c fe ff ff       	jmp    c001716c <Vm::faultHandler(regs*)+0xa0>
c0017310:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017313:	be 04 00 00 00       	mov    esi,0x4
c0017318:	e9 4f fe ff ff       	jmp    c001716c <Vm::faultHandler(regs*)+0xa0>
c001731d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017320:	be 05 00 00 00       	mov    esi,0x5
c0017325:	e9 42 fe ff ff       	jmp    c001716c <Vm::faultHandler(regs*)+0xa0>
c001732a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001732d:	bd 01 00 00 00       	mov    ebp,0x1
c0017332:	e9 35 fe ff ff       	jmp    c001716c <Vm::faultHandler(regs*)+0xa0>
c0017337:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001733a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001733f:	e9 28 fe ff ff       	jmp    c001716c <Vm::faultHandler(regs*)+0xa0>
c0017344:	83 e5 01             	and    ebp,0x1
c0017347:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001734a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001734e:	74 30                	je     c0017380 <Vm::faultHandler(regs*)+0x2b4>
c0017350:	83 e9 04             	sub    ecx,0x4
c0017353:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017359:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001735f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017362:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017365:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001736b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001736f:	0f 84 12 04 00 00    	je     c0017787 <Vm::faultHandler(regs*)+0x6bb>
c0017375:	80 ce 02             	or     dh,0x2
c0017378:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001737b:	e9 07 04 00 00       	jmp    c0017787 <Vm::faultHandler(regs*)+0x6bb>
c0017380:	83 e9 02             	sub    ecx,0x2
c0017383:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017389:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001738c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017390:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017396:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001739a:	74 05                	je     c00173a1 <Vm::faultHandler(regs*)+0x2d5>
c001739c:	80 ce 02             	or     dh,0x2
c001739f:	eb 03                	jmp    c00173a4 <Vm::faultHandler(regs*)+0x2d8>
c00173a1:	80 e6 fd             	and    dh,0xfd
c00173a4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00173a8:	e9 da 03 00 00       	jmp    c0017787 <Vm::faultHandler(regs*)+0x6bb>
c00173ad:	83 e5 01             	and    ebp,0x1
c00173b0:	74 2a                	je     c00173dc <Vm::faultHandler(regs*)+0x310>
c00173b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00173b4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00173ba:	81 ca 00 02 02 00    	or     edx,0x20200
c00173c0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00173c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173cb:	c1 e8 09             	shr    eax,0x9
c00173ce:	83 e0 01             	and    eax,0x1
c00173d1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173d4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173d7:	83 c0 04             	add    eax,0x4
c00173da:	eb 24                	jmp    c0017400 <Vm::faultHandler(regs*)+0x334>
c00173dc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00173df:	81 ca 00 02 02 00    	or     edx,0x20200
c00173e5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173e8:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00173eb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173f1:	c1 e8 09             	shr    eax,0x9
c00173f4:	83 e0 01             	and    eax,0x1
c00173f7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173fa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173fd:	83 c0 02             	add    eax,0x2
c0017400:	25 ff ff 00 00       	and    eax,0xffff
c0017405:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017408:	e9 7a 03 00 00       	jmp    c0017787 <Vm::faultHandler(regs*)+0x6bb>
c001740d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017411:	3d ee 00 00 00       	cmp    eax,0xee
c0017416:	75 10                	jne    c0017428 <Vm::faultHandler(regs*)+0x35c>
c0017418:	83 ec 0c             	sub    esp,0xc
c001741b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001741e:	e8 52 f8 ff ff       	call   c0016c75 <Vm::mainloop3(unsigned long)>
c0017423:	e9 4a 03 00 00       	jmp    c0017772 <Vm::faultHandler(regs*)+0x6a6>
c0017428:	83 ec 0c             	sub    esp,0xc
c001742b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001742f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017433:	51                   	push   ecx
c0017434:	50                   	push   eax
c0017435:	53                   	push   ebx
c0017436:	e8 80 fb ff ff       	call   c0016fbb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001743b:	83 c4 20             	add    esp,0x20
c001743e:	e9 47 03 00 00       	jmp    c001778a <Vm::faultHandler(regs*)+0x6be>
c0017443:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017448:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001744c:	e9 36 03 00 00       	jmp    c0017787 <Vm::faultHandler(regs*)+0x6bb>
c0017451:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017456:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001745a:	e9 28 03 00 00       	jmp    c0017787 <Vm::faultHandler(regs*)+0x6bb>
c001745f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017464:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017467:	74 2b                	je     c0017494 <Vm::faultHandler(regs*)+0x3c8>
c0017469:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017470:	76 22                	jbe    c0017494 <Vm::faultHandler(regs*)+0x3c8>
c0017472:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017476:	50                   	push   eax
c0017477:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001747b:	50                   	push   eax
c001747c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017480:	50                   	push   eax
c0017481:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017485:	50                   	push   eax
c0017486:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001748a:	50                   	push   eax
c001748b:	6a 6c                	push   0x6c
c001748d:	6a 6c                	push   0x6c
c001748f:	e9 c0 01 00 00       	jmp    c0017654 <Vm::faultHandler(regs*)+0x588>
c0017494:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017498:	83 ec 0c             	sub    esp,0xc
c001749b:	0f b7 f6             	movzx  esi,si
c001749e:	50                   	push   eax
c001749f:	e8 21 f7 ff ff       	call   c0016bc5 <Vm::inbv(unsigned short)>
c00174a4:	83 c4 0c             	add    esp,0xc
c00174a7:	0f b6 c0             	movzx  eax,al
c00174aa:	50                   	push   eax
c00174ab:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00174af:	50                   	push   eax
c00174b0:	56                   	push   esi
c00174b1:	e8 d6 fb ff ff       	call   c001708c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00174b6:	83 c4 10             	add    esp,0x10
c00174b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00174bc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00174c0:	74 03                	je     c00174c5 <Vm::faultHandler(regs*)+0x3f9>
c00174c2:	48                   	dec    eax
c00174c3:	eb 01                	jmp    c00174c6 <Vm::faultHandler(regs*)+0x3fa>
c00174c5:	40                   	inc    eax
c00174c6:	0f b7 c0             	movzx  eax,ax
c00174c9:	e9 8e 00 00 00       	jmp    c001755c <Vm::faultHandler(regs*)+0x490>
c00174ce:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00174d3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00174d6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00174d9:	74 29                	je     c0017504 <Vm::faultHandler(regs*)+0x438>
c00174db:	3d ff ff 00 00       	cmp    eax,0xffff
c00174e0:	76 22                	jbe    c0017504 <Vm::faultHandler(regs*)+0x438>
c00174e2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00174e6:	50                   	push   eax
c00174e7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00174eb:	50                   	push   eax
c00174ec:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00174f0:	50                   	push   eax
c00174f1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00174f5:	50                   	push   eax
c00174f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174fa:	50                   	push   eax
c00174fb:	6a 6d                	push   0x6d
c00174fd:	6a 6d                	push   0x6d
c00174ff:	e9 50 01 00 00       	jmp    c0017654 <Vm::faultHandler(regs*)+0x588>
c0017504:	83 e5 01             	and    ebp,0x1
c0017507:	0f b7 c8             	movzx  ecx,ax
c001750a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001750d:	0f b7 f6             	movzx  esi,si
c0017510:	74 1e                	je     c0017530 <Vm::faultHandler(regs*)+0x464>
c0017512:	ed                   	in     eax,dx
c0017513:	55                   	push   ebp
c0017514:	50                   	push   eax
c0017515:	51                   	push   ecx
c0017516:	56                   	push   esi
c0017517:	e8 9b fb ff ff       	call   c00170b7 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001751c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001751f:	83 c4 10             	add    esp,0x10
c0017522:	8d 50 04             	lea    edx,[eax+0x4]
c0017525:	83 e8 04             	sub    eax,0x4
c0017528:	81 e2 ff ff 00 00    	and    edx,0xffff
c001752e:	eb 20                	jmp    c0017550 <Vm::faultHandler(regs*)+0x484>
c0017530:	66 ed                	in     ax,dx
c0017532:	57                   	push   edi
c0017533:	0f b7 c0             	movzx  eax,ax
c0017536:	50                   	push   eax
c0017537:	51                   	push   ecx
c0017538:	56                   	push   esi
c0017539:	e8 63 fb ff ff       	call   c00170a1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001753e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017541:	83 c4 10             	add    esp,0x10
c0017544:	8d 50 02             	lea    edx,[eax+0x2]
c0017547:	83 e8 02             	sub    eax,0x2
c001754a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017550:	25 ff ff 00 00       	and    eax,0xffff
c0017555:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017559:	0f 44 c2             	cmove  eax,edx
c001755c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001755f:	e9 23 02 00 00       	jmp    c0017787 <Vm::faultHandler(regs*)+0x6bb>
c0017564:	8d 46 ff             	lea    eax,[esi-0x1]
c0017567:	0f b6 f0             	movzx  esi,al
c001756a:	83 fe 05             	cmp    esi,0x5
c001756d:	77 23                	ja     c0017592 <Vm::faultHandler(regs*)+0x4c6>
c001756f:	ff 24 b5 ac 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd554]
c0017576:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001757b:	eb 15                	jmp    c0017592 <Vm::faultHandler(regs*)+0x4c6>
c001757d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017581:	eb 0f                	jmp    c0017592 <Vm::faultHandler(regs*)+0x4c6>
c0017583:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017587:	eb 09                	jmp    c0017592 <Vm::faultHandler(regs*)+0x4c6>
c0017589:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001758d:	eb 03                	jmp    c0017592 <Vm::faultHandler(regs*)+0x4c6>
c001758f:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017592:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017597:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001759a:	74 29                	je     c00175c5 <Vm::faultHandler(regs*)+0x4f9>
c001759c:	3d ff ff 00 00       	cmp    eax,0xffff
c00175a1:	76 22                	jbe    c00175c5 <Vm::faultHandler(regs*)+0x4f9>
c00175a3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175a7:	50                   	push   eax
c00175a8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175ac:	50                   	push   eax
c00175ad:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175b1:	50                   	push   eax
c00175b2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175b6:	50                   	push   eax
c00175b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175bb:	50                   	push   eax
c00175bc:	6a 6e                	push   0x6e
c00175be:	6a 6e                	push   0x6e
c00175c0:	e9 8f 00 00 00       	jmp    c0017654 <Vm::faultHandler(regs*)+0x588>
c00175c5:	52                   	push   edx
c00175c6:	0f b7 c0             	movzx  eax,ax
c00175c9:	52                   	push   edx
c00175ca:	50                   	push   eax
c00175cb:	57                   	push   edi
c00175cc:	e8 87 fa ff ff       	call   c0017058 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00175d1:	59                   	pop    ecx
c00175d2:	5e                   	pop    esi
c00175d3:	0f b6 c0             	movzx  eax,al
c00175d6:	50                   	push   eax
c00175d7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00175db:	50                   	push   eax
c00175dc:	e8 f7 f5 ff ff       	call   c0016bd8 <Vm::outbv(unsigned short, unsigned char)>
c00175e1:	83 c4 10             	add    esp,0x10
c00175e4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00175e7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175eb:	74 03                	je     c00175f0 <Vm::faultHandler(regs*)+0x524>
c00175ed:	48                   	dec    eax
c00175ee:	eb 01                	jmp    c00175f1 <Vm::faultHandler(regs*)+0x525>
c00175f0:	40                   	inc    eax
c00175f1:	0f b7 c0             	movzx  eax,ax
c00175f4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00175f7:	e9 8b 01 00 00       	jmp    c0017787 <Vm::faultHandler(regs*)+0x6bb>
c00175fc:	8d 46 ff             	lea    eax,[esi-0x1]
c00175ff:	0f b6 f0             	movzx  esi,al
c0017602:	83 fe 05             	cmp    esi,0x5
c0017605:	77 1e                	ja     c0017625 <Vm::faultHandler(regs*)+0x559>
c0017607:	ff 24 b5 c4 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd53c]
c001760e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017612:	eb 11                	jmp    c0017625 <Vm::faultHandler(regs*)+0x559>
c0017614:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017617:	eb 0c                	jmp    c0017625 <Vm::faultHandler(regs*)+0x559>
c0017619:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001761c:	eb 07                	jmp    c0017625 <Vm::faultHandler(regs*)+0x559>
c001761e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017621:	eb 02                	jmp    c0017625 <Vm::faultHandler(regs*)+0x559>
c0017623:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017625:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001762a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001762d:	74 37                	je     c0017666 <Vm::faultHandler(regs*)+0x59a>
c001762f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017635:	76 2f                	jbe    c0017666 <Vm::faultHandler(regs*)+0x59a>
c0017637:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001763b:	50                   	push   eax
c001763c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017640:	50                   	push   eax
c0017641:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017645:	50                   	push   eax
c0017646:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001764a:	50                   	push   eax
c001764b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001764f:	50                   	push   eax
c0017650:	6a 6f                	push   0x6f
c0017652:	6a 6f                	push   0x6f
c0017654:	68 50 2a 02 c0       	push   0xc0022a50
c0017659:	e8 ac 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001765e:	83 c4 20             	add    esp,0x20
c0017661:	e9 86 01 00 00       	jmp    c00177ec <Vm::faultHandler(regs*)+0x720>
c0017666:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017669:	0f b7 d7             	movzx  edx,di
c001766c:	0f b7 c6             	movzx  eax,si
c001766f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017672:	81 e1 00 04 00 00    	and    ecx,0x400
c0017678:	83 e5 01             	and    ebp,0x1
c001767b:	74 1c                	je     c0017699 <Vm::faultHandler(regs*)+0x5cd>
c001767d:	55                   	push   ebp
c001767e:	55                   	push   ebp
c001767f:	50                   	push   eax
c0017680:	52                   	push   edx
c0017681:	e8 f5 f9 ff ff       	call   c001707b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017686:	83 c4 10             	add    esp,0x10
c0017689:	89 fa                	mov    edx,edi
c001768b:	ef                   	out    dx,eax
c001768c:	8d 46 04             	lea    eax,[esi+0x4]
c001768f:	83 ee 04             	sub    esi,0x4
c0017692:	25 ff ff 00 00       	and    eax,0xffff
c0017697:	eb 1b                	jmp    c00176b4 <Vm::faultHandler(regs*)+0x5e8>
c0017699:	55                   	push   ebp
c001769a:	55                   	push   ebp
c001769b:	50                   	push   eax
c001769c:	52                   	push   edx
c001769d:	e8 c7 f9 ff ff       	call   c0017069 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00176a2:	83 c4 10             	add    esp,0x10
c00176a5:	89 fa                	mov    edx,edi
c00176a7:	66 ef                	out    dx,ax
c00176a9:	8d 46 02             	lea    eax,[esi+0x2]
c00176ac:	83 ee 02             	sub    esi,0x2
c00176af:	25 ff ff 00 00       	and    eax,0xffff
c00176b4:	81 e6 ff ff 00 00    	and    esi,0xffff
c00176ba:	85 c9                	test   ecx,ecx
c00176bc:	0f 44 f0             	cmove  esi,eax
c00176bf:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00176c2:	e9 c0 00 00 00       	jmp    c0017787 <Vm::faultHandler(regs*)+0x6bb>
c00176c7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00176ce:	83 ec 0c             	sub    esp,0xc
c00176d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176d5:	50                   	push   eax
c00176d6:	e8 ea f4 ff ff       	call   c0016bc5 <Vm::inbv(unsigned short)>
c00176db:	0f b6 c0             	movzx  eax,al
c00176de:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00176e1:	eb 3a                	jmp    c001771d <Vm::faultHandler(regs*)+0x651>
c00176e3:	83 e5 01             	and    ebp,0x1
c00176e6:	74 07                	je     c00176ef <Vm::faultHandler(regs*)+0x623>
c00176e8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00176ec:	ed                   	in     eax,dx
c00176ed:	eb 14                	jmp    c0017703 <Vm::faultHandler(regs*)+0x637>
c00176ef:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00176f2:	66 31 f6             	xor    si,si
c00176f5:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00176f8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00176fc:	66 ed                	in     ax,dx
c00176fe:	0f b7 c0             	movzx  eax,ax
c0017701:	09 f0                	or     eax,esi
c0017703:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017706:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001770a:	eb 7e                	jmp    c001778a <Vm::faultHandler(regs*)+0x6be>
c001770c:	52                   	push   edx
c001770d:	52                   	push   edx
c001770e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017712:	50                   	push   eax
c0017713:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017717:	50                   	push   eax
c0017718:	e8 bb f4 ff ff       	call   c0016bd8 <Vm::outbv(unsigned short, unsigned char)>
c001771d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017721:	eb 4f                	jmp    c0017772 <Vm::faultHandler(regs*)+0x6a6>
c0017723:	83 e5 01             	and    ebp,0x1
c0017726:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017729:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001772d:	74 03                	je     c0017732 <Vm::faultHandler(regs*)+0x666>
c001772f:	ef                   	out    dx,eax
c0017730:	eb d4                	jmp    c0017706 <Vm::faultHandler(regs*)+0x63a>
c0017732:	66 ef                	out    dx,ax
c0017734:	eb d0                	jmp    c0017706 <Vm::faultHandler(regs*)+0x63a>
c0017736:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001773a:	83 ec 0c             	sub    esp,0xc
c001773d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017744:	50                   	push   eax
c0017745:	e8 7b f4 ff ff       	call   c0016bc5 <Vm::inbv(unsigned short)>
c001774a:	0f b6 c0             	movzx  eax,al
c001774d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017750:	eb 1d                	jmp    c001776f <Vm::faultHandler(regs*)+0x6a3>
c0017752:	83 e5 01             	and    ebp,0x1
c0017755:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017758:	74 03                	je     c001775d <Vm::faultHandler(regs*)+0x691>
c001775a:	ed                   	in     eax,dx
c001775b:	eb 0d                	jmp    c001776a <Vm::faultHandler(regs*)+0x69e>
c001775d:	66 ed                	in     ax,dx
c001775f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017762:	0f b7 c0             	movzx  eax,ax
c0017765:	66 31 d2             	xor    dx,dx
c0017768:	09 d0                	or     eax,edx
c001776a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001776d:	eb 18                	jmp    c0017787 <Vm::faultHandler(regs*)+0x6bb>
c001776f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017772:	83 c4 10             	add    esp,0x10
c0017775:	eb 13                	jmp    c001778a <Vm::faultHandler(regs*)+0x6be>
c0017777:	83 e5 01             	and    ebp,0x1
c001777a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001777d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017780:	74 03                	je     c0017785 <Vm::faultHandler(regs*)+0x6b9>
c0017782:	ef                   	out    dx,eax
c0017783:	eb 02                	jmp    c0017787 <Vm::faultHandler(regs*)+0x6bb>
c0017785:	66 ef                	out    dx,ax
c0017787:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001778a:	b0 01                	mov    al,0x1
c001778c:	eb 60                	jmp    c00177ee <Vm::faultHandler(regs*)+0x722>
c001778e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017792:	50                   	push   eax
c0017793:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017797:	50                   	push   eax
c0017798:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001779c:	50                   	push   eax
c001779d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177a1:	50                   	push   eax
c00177a2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177a6:	50                   	push   eax
c00177a7:	52                   	push   edx
c00177a8:	52                   	push   edx
c00177a9:	68 7d 2a 02 c0       	push   0xc0022a7d
c00177ae:	e8 57 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00177b3:	83 c4 20             	add    esp,0x20
c00177b6:	83 ec 0c             	sub    esp,0xc
c00177b9:	6a 60                	push   0x60
c00177bb:	e8 05 f4 ff ff       	call   c0016bc5 <Vm::inbv(unsigned short)>
c00177c0:	83 c4 10             	add    esp,0x10
c00177c3:	0f b6 d0             	movzx  edx,al
c00177c6:	83 fa 1c             	cmp    edx,0x1c
c00177c9:	74 05                	je     c00177d0 <Vm::faultHandler(regs*)+0x704>
c00177cb:	83 fa 5a             	cmp    edx,0x5a
c00177ce:	75 e6                	jne    c00177b6 <Vm::faultHandler(regs*)+0x6ea>
c00177d0:	0f b6 c0             	movzx  eax,al
c00177d3:	83 f8 1c             	cmp    eax,0x1c
c00177d6:	74 05                	je     c00177dd <Vm::faultHandler(regs*)+0x711>
c00177d8:	83 f8 5a             	cmp    eax,0x5a
c00177db:	75 0f                	jne    c00177ec <Vm::faultHandler(regs*)+0x720>
c00177dd:	83 ec 0c             	sub    esp,0xc
c00177e0:	6a 60                	push   0x60
c00177e2:	e8 de f3 ff ff       	call   c0016bc5 <Vm::inbv(unsigned short)>
c00177e7:	83 c4 10             	add    esp,0x10
c00177ea:	eb e4                	jmp    c00177d0 <Vm::faultHandler(regs*)+0x704>
c00177ec:	31 c0                	xor    eax,eax
c00177ee:	83 c4 2c             	add    esp,0x2c
c00177f1:	5b                   	pop    ebx
c00177f2:	5e                   	pop    esi
c00177f3:	5f                   	pop    edi
c00177f4:	5d                   	pop    ebp
c00177f5:	c3                   	ret    

c00177f6 <noCopro(unsigned long)>:
c00177f6:	c3                   	ret    

c00177f7 <nmiHandler(regs*, void*)>:
c00177f7:	83 ec 0c             	sub    esp,0xc
c00177fa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00177ff:	83 ec 0c             	sub    esp,0xc
c0017802:	50                   	push   eax
c0017803:	e8 ce fa fe ff       	call   c00072d6 <Computer::handleNMI()>
c0017808:	83 c4 10             	add    esp,0x10
c001780b:	90                   	nop
c001780c:	83 c4 0c             	add    esp,0xc
c001780f:	c3                   	ret    

c0017810 <doubleFault(regs*, void*)>:
c0017810:	55                   	push   ebp
c0017811:	89 e5                	mov    ebp,esp
c0017813:	83 ec 08             	sub    esp,0x8
c0017816:	83 ec 0c             	sub    esp,0xc
c0017819:	68 dc 2a 02 c0       	push   0xc0022adc
c001781e:	e8 f4 9c ff ff       	call   c0011517 <KePanic(char const*)>
c0017823:	83 c4 10             	add    esp,0x10
c0017826:	90                   	nop
c0017827:	c9                   	leave  
c0017828:	c3                   	ret    

c0017829 <displayDebugInfo(regs*)>:
c0017829:	83 ec 1c             	sub    esp,0x1c
c001782c:	0f 20 c0             	mov    eax,cr0
c001782f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017833:	0f 20 d0             	mov    eax,cr2
c0017836:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001783a:	0f 20 d8             	mov    eax,cr3
c001783d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017841:	0f 20 e0             	mov    eax,cr4
c0017844:	89 04 24             	mov    DWORD PTR [esp],eax
c0017847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001784b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001784e:	83 ec 08             	sub    esp,0x8
c0017851:	50                   	push   eax
c0017852:	68 f8 2a 02 c0       	push   0xc0022af8
c0017857:	e8 ae 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001785c:	83 c4 10             	add    esp,0x10
c001785f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017863:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017866:	83 ec 08             	sub    esp,0x8
c0017869:	50                   	push   eax
c001786a:	68 e9 2a 02 c0       	push   0xc0022ae9
c001786f:	e8 96 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017874:	83 c4 10             	add    esp,0x10
c0017877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001787b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001787e:	83 ec 08             	sub    esp,0x8
c0017881:	50                   	push   eax
c0017882:	68 f4 2a 02 c0       	push   0xc0022af4
c0017887:	e8 7e 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001788c:	83 c4 10             	add    esp,0x10
c001788f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017893:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017896:	83 ec 08             	sub    esp,0x8
c0017899:	50                   	push   eax
c001789a:	68 03 2b 02 c0       	push   0xc0022b03
c001789f:	e8 66 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178a4:	83 c4 10             	add    esp,0x10
c00178a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ab:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00178ae:	83 ec 08             	sub    esp,0x8
c00178b1:	50                   	push   eax
c00178b2:	68 0e 2b 02 c0       	push   0xc0022b0e
c00178b7:	e8 4e 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178bc:	83 c4 10             	add    esp,0x10
c00178bf:	83 ec 08             	sub    esp,0x8
c00178c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00178c6:	68 19 2b 02 c0       	push   0xc0022b19
c00178cb:	e8 3a 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178d0:	83 c4 10             	add    esp,0x10
c00178d3:	83 ec 08             	sub    esp,0x8
c00178d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00178da:	68 24 2b 02 c0       	push   0xc0022b24
c00178df:	e8 26 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178e4:	83 c4 10             	add    esp,0x10
c00178e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178eb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00178ee:	c1 e0 05             	shl    eax,0x5
c00178f1:	8d 90 a0 3e 02 c0    	lea    edx,[eax-0x3ffdc160]
c00178f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178fb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00178fe:	83 ec 04             	sub    esp,0x4
c0017901:	52                   	push   edx
c0017902:	50                   	push   eax
c0017903:	68 2f 2b 02 c0       	push   0xc0022b2f
c0017908:	e8 fd 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001790d:	83 c4 10             	add    esp,0x10
c0017910:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017915:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001791b:	83 ec 0c             	sub    esp,0xc
c001791e:	50                   	push   eax
c001791f:	e8 4b 0e ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0017924:	83 c4 10             	add    esp,0x10
c0017927:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001792c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017932:	83 ec 08             	sub    esp,0x8
c0017935:	68 3e 2b 02 c0       	push   0xc0022b3e
c001793a:	50                   	push   eax
c001793b:	e8 6c 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017940:	83 c4 10             	add    esp,0x10
c0017943:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017948:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001794e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017952:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017955:	83 ec 08             	sub    esp,0x8
c0017958:	52                   	push   edx
c0017959:	50                   	push   eax
c001795a:	e8 07 11 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001795f:	83 c4 10             	add    esp,0x10
c0017962:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017967:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001796d:	83 ec 08             	sub    esp,0x8
c0017970:	68 4c 2b 02 c0       	push   0xc0022b4c
c0017975:	50                   	push   eax
c0017976:	e8 31 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001797b:	83 c4 10             	add    esp,0x10
c001797e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017983:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017989:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001798e:	8b 12                	mov    edx,DWORD PTR [edx]
c0017990:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017993:	83 c2 0c             	add    edx,0xc
c0017996:	83 ec 08             	sub    esp,0x8
c0017999:	52                   	push   edx
c001799a:	50                   	push   eax
c001799b:	e8 0c 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179a0:	83 c4 10             	add    esp,0x10
c00179a3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179ae:	83 ec 08             	sub    esp,0x8
c00179b1:	68 55 2b 02 c0       	push   0xc0022b55
c00179b6:	50                   	push   eax
c00179b7:	e8 f0 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179bc:	83 c4 10             	add    esp,0x10
c00179bf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179c4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179ca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179ce:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00179d1:	83 ec 08             	sub    esp,0x8
c00179d4:	52                   	push   edx
c00179d5:	50                   	push   eax
c00179d6:	e8 8b 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00179db:	83 c4 10             	add    esp,0x10
c00179de:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179e9:	83 ec 08             	sub    esp,0x8
c00179ec:	68 5d 2b 02 c0       	push   0xc0022b5d
c00179f1:	50                   	push   eax
c00179f2:	e8 b5 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179f7:	83 c4 10             	add    esp,0x10
c00179fa:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179ff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a05:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a09:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017a0c:	83 ec 08             	sub    esp,0x8
c0017a0f:	52                   	push   edx
c0017a10:	50                   	push   eax
c0017a11:	e8 50 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a16:	83 c4 10             	add    esp,0x10
c0017a19:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a24:	83 ec 08             	sub    esp,0x8
c0017a27:	68 65 2b 02 c0       	push   0xc0022b65
c0017a2c:	50                   	push   eax
c0017a2d:	e8 7a 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a32:	83 c4 10             	add    esp,0x10
c0017a35:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a44:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017a47:	83 ec 08             	sub    esp,0x8
c0017a4a:	52                   	push   edx
c0017a4b:	50                   	push   eax
c0017a4c:	e8 15 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a51:	83 c4 10             	add    esp,0x10
c0017a54:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a5f:	83 ec 08             	sub    esp,0x8
c0017a62:	68 6d 2b 02 c0       	push   0xc0022b6d
c0017a67:	50                   	push   eax
c0017a68:	e8 3f 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a6d:	83 c4 10             	add    esp,0x10
c0017a70:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a7f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a82:	83 ec 08             	sub    esp,0x8
c0017a85:	52                   	push   edx
c0017a86:	50                   	push   eax
c0017a87:	e8 da 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a8c:	83 c4 10             	add    esp,0x10
c0017a8f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a9a:	83 ec 08             	sub    esp,0x8
c0017a9d:	68 75 2b 02 c0       	push   0xc0022b75
c0017aa2:	50                   	push   eax
c0017aa3:	e8 04 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017aa8:	83 c4 10             	add    esp,0x10
c0017aab:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ab0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ab6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017aba:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017abd:	83 ec 08             	sub    esp,0x8
c0017ac0:	52                   	push   edx
c0017ac1:	50                   	push   eax
c0017ac2:	e8 9f 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017ac7:	83 c4 10             	add    esp,0x10
c0017aca:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017acf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad5:	83 ec 08             	sub    esp,0x8
c0017ad8:	68 7d 2b 02 c0       	push   0xc0022b7d
c0017add:	50                   	push   eax
c0017ade:	e8 c9 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ae3:	83 c4 10             	add    esp,0x10
c0017ae6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aeb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017af5:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017af8:	83 ec 08             	sub    esp,0x8
c0017afb:	52                   	push   edx
c0017afc:	50                   	push   eax
c0017afd:	e8 64 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b02:	83 c4 10             	add    esp,0x10
c0017b05:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b0a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b10:	83 ec 08             	sub    esp,0x8
c0017b13:	68 85 2b 02 c0       	push   0xc0022b85
c0017b18:	50                   	push   eax
c0017b19:	e8 8e 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b1e:	83 c4 10             	add    esp,0x10
c0017b21:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b2c:	83 ec 08             	sub    esp,0x8
c0017b2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b33:	50                   	push   eax
c0017b34:	e8 2d 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b41:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b47:	83 ec 08             	sub    esp,0x8
c0017b4a:	68 8e 2b 02 c0       	push   0xc0022b8e
c0017b4f:	50                   	push   eax
c0017b50:	e8 57 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b55:	83 c4 10             	add    esp,0x10
c0017b58:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b5d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b63:	83 ec 08             	sub    esp,0x8
c0017b66:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b6a:	50                   	push   eax
c0017b6b:	e8 f6 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b70:	83 c4 10             	add    esp,0x10
c0017b73:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b78:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b7e:	83 ec 08             	sub    esp,0x8
c0017b81:	68 96 2b 02 c0       	push   0xc0022b96
c0017b86:	50                   	push   eax
c0017b87:	e8 20 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b8c:	83 c4 10             	add    esp,0x10
c0017b8f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b9a:	83 ec 08             	sub    esp,0x8
c0017b9d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017ba1:	50                   	push   eax
c0017ba2:	e8 bf 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017ba7:	83 c4 10             	add    esp,0x10
c0017baa:	fa                   	cli    
c0017bab:	f4                   	hlt    
c0017bac:	eb fe                	jmp    c0017bac <displayDebugInfo(regs*)+0x383>

c0017bae <HalSystemIdle()>:
c0017bae:	56                   	push   esi
c0017baf:	53                   	push   ebx
c0017bb0:	83 ec 14             	sub    esp,0x14
c0017bb3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017bb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017bbe:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017bc4:	83 e0 04             	and    eax,0x4
c0017bc7:	0f b6 c0             	movzx  eax,al
c0017bca:	85 c0                	test   eax,eax
c0017bcc:	0f 95 c0             	setne  al
c0017bcf:	0f b6 c0             	movzx  eax,al
c0017bd2:	85 c0                	test   eax,eax
c0017bd4:	74 4c                	je     c0017c22 <HalSystemIdle()+0x74>
c0017bd6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017bdb:	83 ec 08             	sub    esp,0x8
c0017bde:	68 e1 00 00 00       	push   0xe1
c0017be3:	50                   	push   eax
c0017be4:	e8 f9 f4 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017be9:	83 c4 10             	add    esp,0x10
c0017bec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017bf4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017bf9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017bfd:	83 e2 02             	and    edx,0x2
c0017c00:	89 d3                	mov    ebx,edx
c0017c02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c06:	83 e2 00             	and    edx,0x0
c0017c09:	89 d6                	mov    esi,edx
c0017c0b:	56                   	push   esi
c0017c0c:	53                   	push   ebx
c0017c0d:	68 e1 00 00 00       	push   0xe1
c0017c12:	50                   	push   eax
c0017c13:	e8 f6 f4 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017c18:	83 c4 10             	add    esp,0x10
c0017c1b:	e8 74 85 fe ff       	call   c0000194 <doTPAUSE>
c0017c20:	eb 01                	jmp    c0017c23 <HalSystemIdle()+0x75>
c0017c22:	f4                   	hlt    
c0017c23:	90                   	nop
c0017c24:	83 c4 14             	add    esp,0x14
c0017c27:	5b                   	pop    ebx
c0017c28:	5e                   	pop    esi
c0017c29:	c3                   	ret    

c0017c2a <displayProgramFault(char const*)>:
c0017c2a:	83 ec 0c             	sub    esp,0xc
c0017c2d:	83 ec 0c             	sub    esp,0xc
c0017c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c34:	e8 d1 2c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017c39:	83 c4 10             	add    esp,0x10
c0017c3c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c41:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c4c:	85 c0                	test   eax,eax
c0017c4e:	74 21                	je     c0017c71 <displayProgramFault(char const*)+0x47>
c0017c50:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c57:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c60:	6a 04                	push   0x4
c0017c62:	6a 0f                	push   0xf
c0017c64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c68:	50                   	push   eax
c0017c69:	e8 b0 0e ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017c6e:	83 c4 10             	add    esp,0x10
c0017c71:	90                   	nop
c0017c72:	83 c4 0c             	add    esp,0xc
c0017c75:	c3                   	ret    

c0017c76 <gpFault(regs*, void*)>:
c0017c76:	83 ec 1c             	sub    esp,0x1c
c0017c79:	c7 05 74 c7 02 c0 cc 70 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc00170cc
c0017c83:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017c88:	85 c0                	test   eax,eax
c0017c8a:	74 1e                	je     c0017caa <gpFault(regs*, void*)+0x34>
c0017c8c:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017c91:	83 ec 0c             	sub    esp,0xc
c0017c94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c98:	ff d0                	call   eax
c0017c9a:	83 c4 10             	add    esp,0x10
c0017c9d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ca1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017ca6:	85 c0                	test   eax,eax
c0017ca8:	75 2e                	jne    c0017cd8 <gpFault(regs*, void*)+0x62>
c0017caa:	83 ec 0c             	sub    esp,0xc
c0017cad:	68 9e 2b 02 c0       	push   0xc0022b9e
c0017cb2:	e8 73 ff ff ff       	call   c0017c2a <displayProgramFault(char const*)>
c0017cb7:	83 c4 10             	add    esp,0x10
c0017cba:	83 ec 0c             	sub    esp,0xc
c0017cbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cc1:	e8 63 fb ff ff       	call   c0017829 <displayDebugInfo(regs*)>
c0017cc6:	83 c4 10             	add    esp,0x10
c0017cc9:	83 ec 0c             	sub    esp,0xc
c0017ccc:	6a 00                	push   0x0
c0017cce:	e8 99 ed ff ff       	call   c0016a6c <Thr::terminateFromIRQ(int)>
c0017cd3:	83 c4 10             	add    esp,0x10
c0017cd6:	eb 01                	jmp    c0017cd9 <gpFault(regs*, void*)+0x63>
c0017cd8:	90                   	nop
c0017cd9:	83 c4 1c             	add    esp,0x1c
c0017cdc:	c3                   	ret    

c0017cdd <pgFault(regs*, void*)>:
c0017cdd:	83 ec 1c             	sub    esp,0x1c
c0017ce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ce4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017ce7:	0f 20 d0             	mov    eax,cr2
c0017cea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cf2:	83 ec 04             	sub    esp,0x4
c0017cf5:	52                   	push   edx
c0017cf6:	50                   	push   eax
c0017cf7:	68 7c 2c 02 c0       	push   0xc0022c7c
c0017cfc:	e8 09 2c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017d01:	83 c4 10             	add    esp,0x10
c0017d04:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d0b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d0e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017d14:	0f 20 d2             	mov    edx,cr2
c0017d17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d1f:	83 ec 08             	sub    esp,0x8
c0017d22:	52                   	push   edx
c0017d23:	50                   	push   eax
c0017d24:	e8 51 26 ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017d29:	83 c4 10             	add    esp,0x10
c0017d2c:	0f b6 c0             	movzx  eax,al
c0017d2f:	85 c0                	test   eax,eax
c0017d31:	75 2e                	jne    c0017d61 <pgFault(regs*, void*)+0x84>
c0017d33:	83 ec 0c             	sub    esp,0xc
c0017d36:	68 b7 2b 02 c0       	push   0xc0022bb7
c0017d3b:	e8 ea fe ff ff       	call   c0017c2a <displayProgramFault(char const*)>
c0017d40:	83 c4 10             	add    esp,0x10
c0017d43:	83 ec 0c             	sub    esp,0xc
c0017d46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d4a:	e8 da fa ff ff       	call   c0017829 <displayDebugInfo(regs*)>
c0017d4f:	83 c4 10             	add    esp,0x10
c0017d52:	83 ec 0c             	sub    esp,0xc
c0017d55:	6a 00                	push   0x0
c0017d57:	e8 10 ed ff ff       	call   c0016a6c <Thr::terminateFromIRQ(int)>
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	eb 01                	jmp    c0017d62 <pgFault(regs*, void*)+0x85>
c0017d61:	90                   	nop
c0017d62:	83 c4 1c             	add    esp,0x1c
c0017d65:	c3                   	ret    

c0017d66 <otherISRHandler(regs*, void*)>:
c0017d66:	83 ec 0c             	sub    esp,0xc
c0017d69:	83 ec 0c             	sub    esp,0xc
c0017d6c:	68 a4 2c 02 c0       	push   0xc0022ca4
c0017d71:	e8 b4 fe ff ff       	call   c0017c2a <displayProgramFault(char const*)>
c0017d76:	83 c4 10             	add    esp,0x10
c0017d79:	83 ec 0c             	sub    esp,0xc
c0017d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d80:	e8 a4 fa ff ff       	call   c0017829 <displayDebugInfo(regs*)>
c0017d85:	83 c4 10             	add    esp,0x10
c0017d88:	83 ec 0c             	sub    esp,0xc
c0017d8b:	6a 00                	push   0x0
c0017d8d:	e8 da ec ff ff       	call   c0016a6c <Thr::terminateFromIRQ(int)>
c0017d92:	83 c4 10             	add    esp,0x10
c0017d95:	90                   	nop
c0017d96:	83 c4 0c             	add    esp,0xc
c0017d99:	c3                   	ret    

c0017d9a <opcodeFault(regs*, void*)>:
c0017d9a:	55                   	push   ebp
c0017d9b:	89 e5                	mov    ebp,esp
c0017d9d:	83 ec 08             	sub    esp,0x8
c0017da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017da3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017da6:	83 ec 08             	sub    esp,0x8
c0017da9:	50                   	push   eax
c0017daa:	68 c2 2b 02 c0       	push   0xc0022bc2
c0017daf:	e8 56 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017db4:	83 c4 10             	add    esp,0x10
c0017db7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017dbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017dc2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017dc8:	0f b6 c0             	movzx  eax,al
c0017dcb:	85 c0                	test   eax,eax
c0017dcd:	74 21                	je     c0017df0 <opcodeFault(regs*, void*)+0x56>
c0017dcf:	83 ec 0c             	sub    esp,0xc
c0017dd2:	68 cc 2c 02 c0       	push   0xc0022ccc
c0017dd7:	e8 2e 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017ddc:	83 c4 10             	add    esp,0x10
c0017ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017de2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017de5:	8d 50 19             	lea    edx,[eax+0x19]
c0017de8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017deb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017dee:	eb 2b                	jmp    c0017e1b <opcodeFault(regs*, void*)+0x81>
c0017df0:	83 ec 0c             	sub    esp,0xc
c0017df3:	68 d0 2b 02 c0       	push   0xc0022bd0
c0017df8:	e8 2d fe ff ff       	call   c0017c2a <displayProgramFault(char const*)>
c0017dfd:	83 c4 10             	add    esp,0x10
c0017e00:	83 ec 0c             	sub    esp,0xc
c0017e03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017e06:	e8 1e fa ff ff       	call   c0017829 <displayDebugInfo(regs*)>
c0017e0b:	83 c4 10             	add    esp,0x10
c0017e0e:	83 ec 0c             	sub    esp,0xc
c0017e11:	6a 00                	push   0x0
c0017e13:	e8 54 ec ff ff       	call   c0016a6c <Thr::terminateFromIRQ(int)>
c0017e18:	83 c4 10             	add    esp,0x10
c0017e1b:	c9                   	leave  
c0017e1c:	c3                   	ret    

c0017e1d <i386SaveCoprocessor(void*)>:
c0017e1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e21:	83 c0 3f             	add    eax,0x3f
c0017e24:	83 e0 c0             	and    eax,0xffffffc0
c0017e27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e2b:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017e31 <i386LoadCoprocessor(void*)>:
c0017e31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e35:	83 c0 3f             	add    eax,0x3f
c0017e38:	83 e0 c0             	and    eax,0xffffffc0
c0017e3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e3f:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017e45 <x87EmulHandler(regs*, void*)>:
c0017e45:	53                   	push   ebx
c0017e46:	83 ec 08             	sub    esp,0x8
c0017e49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e4e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017e52:	74 10                	je     c0017e64 <x87EmulHandler(regs*, void*)+0x1f>
c0017e54:	83 ec 0c             	sub    esp,0xc
c0017e57:	68 dd 2b 02 c0       	push   0xc0022bdd
c0017e5c:	e8 b6 96 ff ff       	call   c0011517 <KePanic(char const*)>
c0017e61:	83 c4 10             	add    esp,0x10
c0017e64:	0f 20 c0             	mov    eax,cr0
c0017e67:	a8 08                	test   al,0x8
c0017e69:	74 59                	je     c0017ec4 <x87EmulHandler(regs*, void*)+0x7f>
c0017e6b:	0f 06                	clts   
c0017e6d:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017e72:	85 c0                	test   eax,eax
c0017e74:	74 0e                	je     c0017e84 <x87EmulHandler(regs*, void*)+0x3f>
c0017e76:	83 ec 0c             	sub    esp,0xc
c0017e79:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017e7c:	e8 9c ff ff ff       	call   c0017e1d <i386SaveCoprocessor(void*)>
c0017e81:	83 c4 10             	add    esp,0x10
c0017e84:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017e8a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017e8e:	75 12                	jne    c0017ea2 <x87EmulHandler(regs*, void*)+0x5d>
c0017e90:	83 ec 0c             	sub    esp,0xc
c0017e93:	68 40 02 00 00       	push   0x240
c0017e98:	e8 36 fc fe ff       	call   c0007ad3 <malloc>
c0017e9d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017ea0:	eb 10                	jmp    c0017eb2 <x87EmulHandler(regs*, void*)+0x6d>
c0017ea2:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017ea7:	83 ec 0c             	sub    esp,0xc
c0017eaa:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017ead:	e8 7f ff ff ff       	call   c0017e31 <i386LoadCoprocessor(void*)>
c0017eb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017eb7:	83 c4 10             	add    esp,0x10
c0017eba:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017ebf:	83 c4 08             	add    esp,0x8
c0017ec2:	5b                   	pop    ebx
c0017ec3:	c3                   	ret    
c0017ec4:	83 ec 0c             	sub    esp,0xc
c0017ec7:	68 f1 2b 02 c0       	push   0xc0022bf1
c0017ecc:	e8 39 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017ed1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ed9:	83 c4 18             	add    esp,0x18
c0017edc:	5b                   	pop    ebx
c0017edd:	e9 8a eb ff ff       	jmp    c0016a6c <Thr::terminateFromIRQ(int)>

c0017ee2 <HalInitialiseCoprocessor()>:
c0017ee2:	83 ec 10             	sub    esp,0x10
c0017ee5:	6a 00                	push   0x0
c0017ee7:	68 45 7e 01 c0       	push   0xc0017e45
c0017eec:	6a 07                	push   0x7
c0017eee:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017ef8:	e8 89 4f ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017efd:	e8 ae 70 00 00       	call   c001efb0 <avxDetect>
c0017f02:	83 c4 10             	add    esp,0x10
c0017f05:	85 c0                	test   eax,eax
c0017f07:	74 1c                	je     c0017f25 <HalInitialiseCoprocessor()+0x43>
c0017f09:	c7 05 70 c7 02 c0 da ef 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001efda
c0017f13:	c7 05 6c c7 02 c0 eb ef 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001efeb
c0017f1d:	83 c4 0c             	add    esp,0xc
c0017f20:	e9 d7 70 00 00       	jmp    c001effc <avxInit>
c0017f25:	e8 16 74 00 00       	call   c001f340 <absolutelyNoChanceInHell>
c0017f2a:	85 c0                	test   eax,eax
c0017f2c:	74 1c                	je     c0017f4a <HalInitialiseCoprocessor()+0x68>
c0017f2e:	c7 05 70 c7 02 c0 58 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f358
c0017f38:	c7 05 6c c7 02 c0 60 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f360
c0017f42:	83 c4 0c             	add    esp,0xc
c0017f45:	e9 1e 74 00 00       	jmp    c001f368 <sseInit>
c0017f4a:	e8 37 74 00 00       	call   c001f386 <x87Detect>
c0017f4f:	85 c0                	test   eax,eax
c0017f51:	74 1c                	je     c0017f6f <HalInitialiseCoprocessor()+0x8d>
c0017f53:	c7 05 70 c7 02 c0 a1 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f3a1
c0017f5d:	c7 05 6c c7 02 c0 a8 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3a8
c0017f67:	83 c4 0c             	add    esp,0xc
c0017f6a:	e9 40 74 00 00       	jmp    c001f3af <x87Init>
c0017f6f:	c7 05 70 c7 02 c0 f6 77 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc00177f6
c0017f79:	c7 05 6c c7 02 c0 f6 77 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc00177f6
c0017f83:	0f 20 c0             	mov    eax,cr0
c0017f86:	83 c8 04             	or     eax,0x4
c0017f89:	0f 22 c0             	mov    cr0,eax
c0017f8c:	83 c4 0c             	add    esp,0xc
c0017f8f:	c3                   	ret    

c0017f90 <HalPanic(char const*)>:
c0017f90:	53                   	push   ebx
c0017f91:	83 ec 10             	sub    esp,0x10
c0017f94:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017f98:	fa                   	cli    
c0017f99:	53                   	push   ebx
c0017f9a:	68 07 2c 02 c0       	push   0xc0022c07
c0017f9f:	e8 66 29 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017fa4:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0017fa9:	83 c4 10             	add    esp,0x10
c0017fac:	85 c0                	test   eax,eax
c0017fae:	74 09                	je     c0017fb9 <HalPanic(char const*)+0x29>
c0017fb0:	83 ec 0c             	sub    esp,0xc
c0017fb3:	53                   	push   ebx
c0017fb4:	ff d0                	call   eax
c0017fb6:	83 c4 10             	add    esp,0x10
c0017fb9:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0017fbe:	85 c0                	test   eax,eax
c0017fc0:	0f 84 dc 00 00 00    	je     c00180a2 <HalPanic(char const*)+0x112>
c0017fc6:	52                   	push   edx
c0017fc7:	6a 01                	push   0x1
c0017fc9:	6a 0f                	push   0xf
c0017fcb:	50                   	push   eax
c0017fcc:	e8 f9 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017fd1:	59                   	pop    ecx
c0017fd2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017fd8:	e8 dd 07 ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017fdd:	58                   	pop    eax
c0017fde:	5a                   	pop    edx
c0017fdf:	68 04 0e 02 c0       	push   0xc0020e04
c0017fe4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017fea:	e8 13 06 ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017fef:	83 c4 0c             	add    esp,0xc
c0017ff2:	6a 01                	push   0x1
c0017ff4:	6a 0f                	push   0xf
c0017ff6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017ffc:	e8 c9 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018001:	59                   	pop    ecx
c0018002:	58                   	pop    eax
c0018003:	68 20 2c 02 c0       	push   0xc0022c20
c0018008:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001800e:	e8 99 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018013:	83 c4 0c             	add    esp,0xc
c0018016:	6a 0f                	push   0xf
c0018018:	6a 01                	push   0x1
c001801a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018020:	e8 a5 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018025:	58                   	pop    eax
c0018026:	5a                   	pop    edx
c0018027:	68 29 2c 02 c0       	push   0xc0022c29
c001802c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018032:	e8 75 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018037:	83 c4 0c             	add    esp,0xc
c001803a:	6a 01                	push   0x1
c001803c:	6a 0f                	push   0xf
c001803e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018044:	e8 81 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018049:	59                   	pop    ecx
c001804a:	58                   	pop    eax
c001804b:	68 6d 2c 02 c0       	push   0xc0022c6d
c0018050:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018056:	e8 51 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001805b:	58                   	pop    eax
c001805c:	5a                   	pop    edx
c001805d:	68 36 2c 02 c0       	push   0xc0022c36
c0018062:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018068:	e8 3f 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001806d:	59                   	pop    ecx
c001806e:	58                   	pop    eax
c001806f:	68 70 2c 02 c0       	push   0xc0022c70
c0018074:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001807a:	e8 2d 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001807f:	58                   	pop    eax
c0018080:	5a                   	pop    edx
c0018081:	53                   	push   ebx
c0018082:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018088:	e8 1f 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001808d:	59                   	pop    ecx
c001808e:	5b                   	pop    ebx
c001808f:	68 6d 2c 02 c0       	push   0xc0022c6d
c0018094:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001809a:	e8 0d 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001809f:	83 c4 10             	add    esp,0x10
c00180a2:	eb fe                	jmp    c00180a2 <HalPanic(char const*)+0x112>

c00180a4 <HalQueryPerformanceCounter()>:
c00180a4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00180a9:	31 d2                	xor    edx,edx
c00180ab:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00180b1:	31 c0                	xor    eax,eax
c00180b3:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00180ba:	74 02                	je     c00180be <HalQueryPerformanceCounter()+0x1a>
c00180bc:	0f 31                	rdtsc  
c00180be:	c3                   	ret    

c00180bf <HalInitialise()>:
c00180bf:	53                   	push   ebx
c00180c0:	83 ec 08             	sub    esp,0x8
c00180c3:	e8 f5 4f ff ff       	call   c000d0bd <setupINTS()>
c00180c8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00180cd:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c00180d4:	75 0f                	jne    c00180e5 <HalInitialise()+0x26>
c00180d6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00180dc:	83 e2 fe             	and    edx,0xfffffffe
c00180df:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00180e5:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c00180ec:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00180f2:	83 e2 fe             	and    edx,0xfffffffe
c00180f5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00180fb:	e8 a0 02 00 00       	call   c00183a0 <picOpen()>
c0018100:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018107:	74 0a                	je     c0018113 <HalInitialise()+0x54>
c0018109:	e8 e2 01 00 00       	call   c00182f0 <picDisable()>
c001810e:	e8 0d 68 00 00       	call   c001e920 <apicOpen()>
c0018113:	50                   	push   eax
c0018114:	bb 0f 00 00 00       	mov    ebx,0xf
c0018119:	6a 00                	push   0x0
c001811b:	68 66 7d 01 c0       	push   0xc0017d66
c0018120:	6a 00                	push   0x0
c0018122:	e8 5f 4d ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018127:	83 c4 0c             	add    esp,0xc
c001812a:	6a 00                	push   0x0
c001812c:	68 66 7d 01 c0       	push   0xc0017d66
c0018131:	6a 01                	push   0x1
c0018133:	e8 4e 4d ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018138:	83 c4 0c             	add    esp,0xc
c001813b:	6a 00                	push   0x0
c001813d:	68 f7 77 01 c0       	push   0xc00177f7
c0018142:	6a 02                	push   0x2
c0018144:	e8 3d 4d ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018149:	83 c4 0c             	add    esp,0xc
c001814c:	6a 00                	push   0x0
c001814e:	68 66 7d 01 c0       	push   0xc0017d66
c0018153:	6a 03                	push   0x3
c0018155:	e8 2c 4d ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001815a:	83 c4 0c             	add    esp,0xc
c001815d:	6a 00                	push   0x0
c001815f:	68 66 7d 01 c0       	push   0xc0017d66
c0018164:	6a 04                	push   0x4
c0018166:	e8 1b 4d ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001816b:	83 c4 0c             	add    esp,0xc
c001816e:	6a 00                	push   0x0
c0018170:	68 66 7d 01 c0       	push   0xc0017d66
c0018175:	6a 05                	push   0x5
c0018177:	e8 0a 4d ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001817c:	83 c4 0c             	add    esp,0xc
c001817f:	6a 00                	push   0x0
c0018181:	68 9a 7d 01 c0       	push   0xc0017d9a
c0018186:	6a 06                	push   0x6
c0018188:	e8 f9 4c ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001818d:	83 c4 0c             	add    esp,0xc
c0018190:	6a 00                	push   0x0
c0018192:	68 10 78 01 c0       	push   0xc0017810
c0018197:	6a 08                	push   0x8
c0018199:	e8 e8 4c ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001819e:	83 c4 0c             	add    esp,0xc
c00181a1:	6a 00                	push   0x0
c00181a3:	68 66 7d 01 c0       	push   0xc0017d66
c00181a8:	6a 09                	push   0x9
c00181aa:	e8 d7 4c ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181af:	83 c4 0c             	add    esp,0xc
c00181b2:	6a 00                	push   0x0
c00181b4:	68 66 7d 01 c0       	push   0xc0017d66
c00181b9:	6a 0a                	push   0xa
c00181bb:	e8 c6 4c ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181c0:	83 c4 0c             	add    esp,0xc
c00181c3:	6a 00                	push   0x0
c00181c5:	68 66 7d 01 c0       	push   0xc0017d66
c00181ca:	6a 0b                	push   0xb
c00181cc:	e8 b5 4c ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181d1:	83 c4 0c             	add    esp,0xc
c00181d4:	6a 00                	push   0x0
c00181d6:	68 76 7c 01 c0       	push   0xc0017c76
c00181db:	6a 0d                	push   0xd
c00181dd:	e8 a4 4c ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181e2:	83 c4 0c             	add    esp,0xc
c00181e5:	6a 00                	push   0x0
c00181e7:	68 dd 7c 01 c0       	push   0xc0017cdd
c00181ec:	6a 0e                	push   0xe
c00181ee:	e8 93 4c ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181f3:	83 c4 10             	add    esp,0x10
c00181f6:	50                   	push   eax
c00181f7:	6a 00                	push   0x0
c00181f9:	68 66 7d 01 c0       	push   0xc0017d66
c00181fe:	53                   	push   ebx
c00181ff:	43                   	inc    ebx
c0018200:	e8 81 4c ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018205:	83 c4 10             	add    esp,0x10
c0018208:	83 fb 1e             	cmp    ebx,0x1e
c001820b:	75 e9                	jne    c00181f6 <HalInitialise()+0x137>
c001820d:	50                   	push   eax
c001820e:	6a 00                	push   0x0
c0018210:	68 cb 29 01 c0       	push   0xc00129cb
c0018215:	6a 60                	push   0x60
c0018217:	e8 6a 4c ff ff       	call   c000ce86 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001821c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018221:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001822b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018232:	e8 9c f8 fe ff       	call   c0007ad3 <malloc>
c0018237:	89 04 24             	mov    DWORD PTR [esp],eax
c001823a:	89 c3                	mov    ebx,eax
c001823c:	e8 37 09 00 00       	call   c0018b78 <RTC::RTC()>
c0018241:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001824b:	5a                   	pop    edx
c001824c:	59                   	pop    ecx
c001824d:	53                   	push   ebx
c001824e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018254:	e8 f7 46 ff ff       	call   c000c950 <Device::addChild(Device*)>
c0018259:	8b 03                	mov    eax,DWORD PTR [ebx]
c001825b:	6a 00                	push   0x0
c001825d:	6a 00                	push   0x0
c001825f:	6a 00                	push   0x0
c0018261:	53                   	push   ebx
c0018262:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018265:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001826a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018270:	83 c4 28             	add    esp,0x28
c0018273:	5b                   	pop    ebx
c0018274:	c3                   	ret    

c0018275 <HalMakeBeep(int)>:
c0018275:	53                   	push   ebx
c0018276:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001827a:	85 db                	test   ebx,ebx
c001827c:	75 07                	jne    c0018285 <HalMakeBeep(int)+0x10>
c001827e:	e4 61                	in     al,0x61
c0018280:	83 e0 fc             	and    eax,0xfffffffc
c0018283:	eb 26                	jmp    c00182ab <HalMakeBeep(int)+0x36>
c0018285:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001828a:	99                   	cdq    
c001828b:	f7 fb                	idiv   ebx
c001828d:	89 c1                	mov    ecx,eax
c001828f:	b0 b6                	mov    al,0xb6
c0018291:	e6 43                	out    0x43,al
c0018293:	88 c8                	mov    al,cl
c0018295:	e6 42                	out    0x42,al
c0018297:	89 c8                	mov    eax,ecx
c0018299:	c1 e8 08             	shr    eax,0x8
c001829c:	e6 42                	out    0x42,al
c001829e:	e4 61                	in     al,0x61
c00182a0:	89 c2                	mov    edx,eax
c00182a2:	83 ca 03             	or     edx,0x3
c00182a5:	38 d0                	cmp    al,dl
c00182a7:	74 04                	je     c00182ad <HalMakeBeep(int)+0x38>
c00182a9:	88 d0                	mov    al,dl
c00182ab:	e6 61                	out    0x61,al
c00182ad:	5b                   	pop    ebx
c00182ae:	c3                   	ret    

c00182af <HalGetRand()>:
c00182af:	31 c0                	xor    eax,eax
c00182b1:	c3                   	ret    

c00182b2 <HalEndOfInterrupt(int)>:
c00182b2:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00182b9:	74 23                	je     c00182de <HalEndOfInterrupt(int)+0x2c>
c00182bb:	83 ec 14             	sub    esp,0x14
c00182be:	6a 1b                	push   0x1b
c00182c0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00182c6:	e8 17 ee fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00182cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00182d0:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00182da:	83 c4 1c             	add    esp,0x1c
c00182dd:	c3                   	ret    
c00182de:	e9 41 02 00 00       	jmp    c0018524 <picEOI(int)>

c00182e3 <HalRestart()>:
c00182e3:	c3                   	ret    

c00182e4 <HalShutdown()>:
c00182e4:	c3                   	ret    

c00182e5 <HalSleep()>:
c00182e5:	c3                   	ret    
c00182e6:	66 90                	xchg   ax,ax

c00182e8 <picIoWait()>:
c00182e8:	eb 00                	jmp    c00182ea <picIoWait()+0x2>
c00182ea:	eb 00                	jmp    c00182ec <picIoWait()+0x4>
c00182ec:	90                   	nop
c00182ed:	c3                   	ret    
c00182ee:	66 90                	xchg   ax,ax

c00182f0 <picDisable()>:
c00182f0:	83 ec 10             	sub    esp,0x10
c00182f3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00182fa:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00182ff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018303:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018308:	ee                   	out    dx,al
c0018309:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018310:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018315:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018319:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001831e:	ee                   	out    dx,al
c001831f:	90                   	nop
c0018320:	83 c4 10             	add    esp,0x10
c0018323:	c3                   	ret    

c0018324 <picGetIRQReg(int)>:
c0018324:	83 ec 10             	sub    esp,0x10
c0018327:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001832b:	0f b6 c0             	movzx  eax,al
c001832e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018335:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018339:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001833d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018342:	ee                   	out    dx,al
c0018343:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018347:	0f b6 c0             	movzx  eax,al
c001834a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018351:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018355:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018359:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001835e:	ee                   	out    dx,al
c001835f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018366:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001836b:	89 c2                	mov    edx,eax
c001836d:	ec                   	in     al,dx
c001836e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018372:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018376:	0f b6 c0             	movzx  eax,al
c0018379:	c1 e0 08             	shl    eax,0x8
c001837c:	89 c1                	mov    ecx,eax
c001837e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018385:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001838a:	89 c2                	mov    edx,eax
c001838c:	ec                   	in     al,dx
c001838d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018391:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018395:	0f b6 c0             	movzx  eax,al
c0018398:	09 c8                	or     eax,ecx
c001839a:	83 c4 10             	add    esp,0x10
c001839d:	c3                   	ret    
c001839e:	66 90                	xchg   ax,ax

c00183a0 <picOpen()>:
c00183a0:	83 ec 50             	sub    esp,0x50
c00183a3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00183aa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00183af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00183b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00183b7:	ee                   	out    dx,al
c00183b8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00183bf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00183c4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00183c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00183cc:	ee                   	out    dx,al
c00183cd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00183d5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00183dd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00183e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183e8:	89 c2                	mov    edx,eax
c00183ea:	ec                   	in     al,dx
c00183eb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00183ef:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00183f3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00183f7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00183fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018402:	89 c2                	mov    edx,eax
c0018404:	ec                   	in     al,dx
c0018405:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018409:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001840d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018411:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018418:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001841d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018421:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018425:	ee                   	out    dx,al
c0018426:	e8 bd fe ff ff       	call   c00182e8 <picIoWait()>
c001842b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018432:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018437:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001843b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001843f:	ee                   	out    dx,al
c0018440:	e8 a3 fe ff ff       	call   c00182e8 <picIoWait()>
c0018445:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018449:	0f b6 c0             	movzx  eax,al
c001844c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018453:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018457:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001845b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001845f:	ee                   	out    dx,al
c0018460:	e8 83 fe ff ff       	call   c00182e8 <picIoWait()>
c0018465:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018469:	0f b6 c0             	movzx  eax,al
c001846c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018473:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018477:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001847b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001847f:	ee                   	out    dx,al
c0018480:	e8 63 fe ff ff       	call   c00182e8 <picIoWait()>
c0018485:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001848c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018491:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018495:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018499:	ee                   	out    dx,al
c001849a:	e8 49 fe ff ff       	call   c00182e8 <picIoWait()>
c001849f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00184a6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00184ab:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00184af:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00184b3:	ee                   	out    dx,al
c00184b4:	e8 2f fe ff ff       	call   c00182e8 <picIoWait()>
c00184b9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00184c0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00184c5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00184c9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00184cd:	ee                   	out    dx,al
c00184ce:	e8 15 fe ff ff       	call   c00182e8 <picIoWait()>
c00184d3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00184da:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00184df:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00184e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00184e7:	ee                   	out    dx,al
c00184e8:	e8 fb fd ff ff       	call   c00182e8 <picIoWait()>
c00184ed:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00184f2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00184f9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00184fd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018501:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018505:	ee                   	out    dx,al
c0018506:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001850b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018512:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018516:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001851a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001851e:	ee                   	out    dx,al
c001851f:	90                   	nop
c0018520:	83 c4 50             	add    esp,0x50
c0018523:	c3                   	ret    

c0018524 <picEOI(int)>:
c0018524:	83 ec 10             	sub    esp,0x10
c0018527:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001852c:	75 1e                	jne    c001854c <picEOI(int)+0x28>
c001852e:	6a 0b                	push   0xb
c0018530:	e8 ef fd ff ff       	call   c0018324 <picGetIRQReg(int)>
c0018535:	83 c4 04             	add    esp,0x4
c0018538:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001853d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018542:	25 80 00 00 00       	and    eax,0x80
c0018547:	74 73                	je     c00185bc <picEOI(int)+0x98>
c0018549:	8d 76 00             	lea    esi,[esi+0x0]
c001854c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018551:	75 31                	jne    c0018584 <picEOI(int)+0x60>
c0018553:	6a 0b                	push   0xb
c0018555:	e8 ca fd ff ff       	call   c0018324 <picGetIRQReg(int)>
c001855a:	83 c4 04             	add    esp,0x4
c001855d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018562:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018566:	98                   	cwde   
c0018567:	85 c0                	test   eax,eax
c0018569:	78 19                	js     c0018584 <picEOI(int)+0x60>
c001856b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018572:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018577:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001857b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018580:	ee                   	out    dx,al
c0018581:	eb 3d                	jmp    c00185c0 <picEOI(int)+0x9c>
c0018583:	90                   	nop
c0018584:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018589:	7e 19                	jle    c00185a4 <picEOI(int)+0x80>
c001858b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018592:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018597:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001859b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00185a0:	ee                   	out    dx,al
c00185a1:	8d 76 00             	lea    esi,[esi+0x0]
c00185a4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00185ab:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00185b0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00185b4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00185b9:	ee                   	out    dx,al
c00185ba:	eb 04                	jmp    c00185c0 <picEOI(int)+0x9c>
c00185bc:	90                   	nop
c00185bd:	8d 76 00             	lea    esi,[esi+0x0]
c00185c0:	83 c4 10             	add    esp,0x10
c00185c3:	c3                   	ret    

c00185c4 <RTC::open(int, int, void*)>:
c00185c4:	31 c0                	xor    eax,eax
c00185c6:	c3                   	ret    
c00185c7:	90                   	nop

c00185c8 <RTC::close(int, int, void*)>:
c00185c8:	31 c0                	xor    eax,eax
c00185ca:	c3                   	ret    
c00185cb:	90                   	nop

c00185cc <RTC::timeInSecondsUTC()>:
c00185cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00185d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00185dc:	c3                   	ret    
c00185dd:	90                   	nop

c00185de <RTC::timeInDatetimeUTC()>:
c00185de:	53                   	push   ebx
c00185df:	83 ec 14             	sub    esp,0x14
c00185e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00185ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00185ec:	50                   	push   eax
c00185ed:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00185f0:	83 c4 0c             	add    esp,0xc
c00185f3:	52                   	push   edx
c00185f4:	50                   	push   eax
c00185f5:	53                   	push   ebx
c00185f6:	e8 c9 40 ff ff       	call   c000c6c4 <secondsToDatetime(unsigned long long)>
c00185fb:	89 d8                	mov    eax,ebx
c00185fd:	83 c4 14             	add    esp,0x14
c0018600:	5b                   	pop    ebx
c0018601:	c2 04 00             	ret    0x4

c0018604 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018604:	56                   	push   esi
c0018605:	53                   	push   ebx
c0018606:	83 ec 14             	sub    esp,0x14
c0018609:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001860d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001860f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018612:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018616:	52                   	push   edx
c0018617:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001861b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001861f:	50                   	push   eax
c0018620:	e8 9f 40 ff ff       	call   c000c6c4 <secondsToDatetime(unsigned long long)>
c0018625:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018629:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001862d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018631:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018635:	89 f0                	mov    eax,esi
c0018637:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001863b:	83 c4 20             	add    esp,0x20
c001863e:	5b                   	pop    ebx
c001863f:	5e                   	pop    esi
c0018640:	ff e0                	jmp    eax

c0018642 <RTC::~RTC()>:
c0018642:	83 ec 0c             	sub    esp,0xc
c0018645:	ba 0c 2d 02 c0       	mov    edx,0xc0022d0c
c001864a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001864e:	89 10                	mov    DWORD PTR [eax],edx
c0018650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018654:	83 ec 0c             	sub    esp,0xc
c0018657:	50                   	push   eax
c0018658:	e8 f3 3d ff ff       	call   c000c450 <Clock::~Clock()>
c001865d:	83 c4 10             	add    esp,0x10
c0018660:	90                   	nop
c0018661:	83 c4 0c             	add    esp,0xc
c0018664:	c3                   	ret    
c0018665:	90                   	nop

c0018666 <RTC::~RTC()>:
c0018666:	83 ec 0c             	sub    esp,0xc
c0018669:	83 ec 0c             	sub    esp,0xc
c001866c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018670:	e8 cd ff ff ff       	call   c0018642 <RTC::~RTC()>
c0018675:	83 c4 10             	add    esp,0x10
c0018678:	83 ec 08             	sub    esp,0x8
c001867b:	68 60 01 00 00       	push   0x160
c0018680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018684:	e8 83 21 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018689:	83 c4 10             	add    esp,0x10
c001868c:	83 c4 0c             	add    esp,0xc
c001868f:	c3                   	ret    

c0018690 <RTC::get_update_in_progress_flag()>:
c0018690:	83 ec 14             	sub    esp,0x14
c0018693:	6a 0a                	push   0xa
c0018695:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001869b:	e8 fa ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186a0:	83 c4 1c             	add    esp,0x1c
c00186a3:	0f b6 c0             	movzx  eax,al
c00186a6:	c1 e8 07             	shr    eax,0x7
c00186a9:	c3                   	ret    

c00186aa <RTC::completeRTCRefresh()>:
c00186aa:	55                   	push   ebp
c00186ab:	57                   	push   edi
c00186ac:	56                   	push   esi
c00186ad:	53                   	push   ebx
c00186ae:	83 ec 3c             	sub    esp,0x3c
c00186b1:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00186b7:	83 ec 0c             	sub    esp,0xc
c00186ba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00186be:	e8 cd ff ff ff       	call   c0018690 <RTC::get_update_in_progress_flag()>
c00186c3:	83 c4 10             	add    esp,0x10
c00186c6:	84 c0                	test   al,al
c00186c8:	74 0e                	je     c00186d8 <RTC::completeRTCRefresh()+0x2e>
c00186ca:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00186d0:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00186d6:	73 df                	jae    c00186b7 <RTC::completeRTCRefresh()+0xd>
c00186d8:	50                   	push   eax
c00186d9:	50                   	push   eax
c00186da:	6a 00                	push   0x0
c00186dc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186e2:	e8 b3 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186e7:	89 c7                	mov    edi,eax
c00186e9:	58                   	pop    eax
c00186ea:	5a                   	pop    edx
c00186eb:	6a 02                	push   0x2
c00186ed:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186f3:	e8 a2 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186f8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00186fc:	59                   	pop    ecx
c00186fd:	5b                   	pop    ebx
c00186fe:	6a 04                	push   0x4
c0018700:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018706:	e8 8f ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001870b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001870f:	5e                   	pop    esi
c0018710:	5d                   	pop    ebp
c0018711:	6a 07                	push   0x7
c0018713:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018719:	e8 7c ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001871e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018722:	58                   	pop    eax
c0018723:	5a                   	pop    edx
c0018724:	6a 08                	push   0x8
c0018726:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001872c:	e8 69 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018731:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018735:	59                   	pop    ecx
c0018736:	5b                   	pop    ebx
c0018737:	6a 09                	push   0x9
c0018739:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001873f:	e8 56 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018744:	0f b6 c0             	movzx  eax,al
c0018747:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001874b:	83 c4 10             	add    esp,0x10
c001874e:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018754:	83 ec 0c             	sub    esp,0xc
c0018757:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001875b:	e8 30 ff ff ff       	call   c0018690 <RTC::get_update_in_progress_flag()>
c0018760:	83 c4 10             	add    esp,0x10
c0018763:	84 c0                	test   al,al
c0018765:	74 0e                	je     c0018775 <RTC::completeRTCRefresh()+0xcb>
c0018767:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001876d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018773:	73 df                	jae    c0018754 <RTC::completeRTCRefresh()+0xaa>
c0018775:	51                   	push   ecx
c0018776:	51                   	push   ecx
c0018777:	6a 00                	push   0x0
c0018779:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001877f:	e8 16 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018784:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018788:	5b                   	pop    ebx
c0018789:	5e                   	pop    esi
c001878a:	6a 02                	push   0x2
c001878c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018792:	e8 03 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018797:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001879b:	5d                   	pop    ebp
c001879c:	58                   	pop    eax
c001879d:	6a 04                	push   0x4
c001879f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187a5:	e8 f0 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187aa:	88 c3                	mov    bl,al
c00187ac:	58                   	pop    eax
c00187ad:	5a                   	pop    edx
c00187ae:	6a 07                	push   0x7
c00187b0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187b6:	e8 df e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187bb:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00187bf:	59                   	pop    ecx
c00187c0:	5e                   	pop    esi
c00187c1:	6a 08                	push   0x8
c00187c3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187c9:	e8 cc e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187ce:	5d                   	pop    ebp
c00187cf:	89 c6                	mov    esi,eax
c00187d1:	58                   	pop    eax
c00187d2:	6a 09                	push   0x9
c00187d4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187da:	e8 bb e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187df:	89 f9                	mov    ecx,edi
c00187e1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00187e5:	83 c4 10             	add    esp,0x10
c00187e8:	0f b6 e8             	movzx  ebp,al
c00187eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00187f0:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00187f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00187f8:	74 27                	je     c0018821 <RTC::completeRTCRefresh()+0x177>
c00187fa:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00187fe:	89 f0                	mov    eax,esi
c0018800:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018804:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018808:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001880c:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018810:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018814:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018818:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001881c:	e9 2d ff ff ff       	jmp    c001874e <RTC::completeRTCRefresh()+0xa4>
c0018821:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018826:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001882a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001882e:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0018832:	75 c6                	jne    c00187fa <RTC::completeRTCRefresh()+0x150>
c0018834:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018839:	89 f1                	mov    ecx,esi
c001883b:	0f b6 fb             	movzx  edi,bl
c001883e:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018842:	0f b6 c9             	movzx  ecx,cl
c0018845:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018849:	89 f1                	mov    ecx,esi
c001884b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001884f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018853:	0f 94 c2             	sete   dl
c0018856:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001885a:	0f 94 c0             	sete   al
c001885d:	21 d0                	and    eax,edx
c001885f:	31 d2                	xor    edx,edx
c0018861:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018865:	0f 94 c2             	sete   dl
c0018868:	85 c2                	test   edx,eax
c001886a:	74 8e                	je     c00187fa <RTC::completeRTCRefresh()+0x150>
c001886c:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018870:	75 88                	jne    c00187fa <RTC::completeRTCRefresh()+0x150>
c0018872:	52                   	push   edx
c0018873:	52                   	push   edx
c0018874:	6a 0b                	push   0xb
c0018876:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001887c:	e8 19 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018881:	83 c4 10             	add    esp,0x10
c0018884:	a8 04                	test   al,0x4
c0018886:	75 7a                	jne    c0018902 <RTC::completeRTCRefresh()+0x258>
c0018888:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001888c:	c1 ef 04             	shr    edi,0x4
c001888f:	83 e6 0f             	and    esi,0xf
c0018892:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018896:	c1 ed 04             	shr    ebp,0x4
c0018899:	6b ed 0a             	imul   ebp,ebp,0xa
c001889c:	c1 ea 04             	shr    edx,0x4
c001889f:	6b d2 0a             	imul   edx,edx,0xa
c00188a2:	83 e1 0f             	and    ecx,0xf
c00188a5:	01 d1                	add    ecx,edx
c00188a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00188ab:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00188af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00188b3:	c1 ea 04             	shr    edx,0x4
c00188b6:	6b d2 0a             	imul   edx,edx,0xa
c00188b9:	83 e1 0f             	and    ecx,0xf
c00188bc:	01 d1                	add    ecx,edx
c00188be:	89 fa                	mov    edx,edi
c00188c0:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00188c4:	83 e2 07             	and    edx,0x7
c00188c7:	89 d9                	mov    ecx,ebx
c00188c9:	6b d2 0a             	imul   edx,edx,0xa
c00188cc:	83 e1 0f             	and    ecx,0xf
c00188cf:	83 e3 80             	and    ebx,0xffffff80
c00188d2:	01 d1                	add    ecx,edx
c00188d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188d8:	09 cb                	or     ebx,ecx
c00188da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00188de:	c1 ea 04             	shr    edx,0x4
c00188e1:	6b d2 0a             	imul   edx,edx,0xa
c00188e4:	83 e1 0f             	and    ecx,0xf
c00188e7:	01 d1                	add    ecx,edx
c00188e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188ed:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00188f1:	c1 ea 04             	shr    edx,0x4
c00188f4:	6b d2 0a             	imul   edx,edx,0xa
c00188f7:	01 d6                	add    esi,edx
c00188f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00188fd:	83 e2 0f             	and    edx,0xf
c0018900:	01 d5                	add    ebp,edx
c0018902:	a8 02                	test   al,0x2
c0018904:	75 15                	jne    c001891b <RTC::completeRTCRefresh()+0x271>
c0018906:	f6 c3 80             	test   bl,0x80
c0018909:	74 10                	je     c001891b <RTC::completeRTCRefresh()+0x271>
c001890b:	83 e3 7f             	and    ebx,0x7f
c001890e:	b9 18 00 00 00       	mov    ecx,0x18
c0018913:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018916:	99                   	cdq    
c0018917:	f7 f9                	idiv   ecx
c0018919:	88 d3                	mov    bl,dl
c001891b:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018921:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018927:	77 06                	ja     c001892f <RTC::completeRTCRefresh()+0x285>
c0018929:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001892f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018934:	31 c9                	xor    ecx,ecx
c0018936:	31 d2                	xor    edx,edx
c0018938:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001893c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018940:	89 cd                	mov    ebp,ecx
c0018942:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018946:	c1 e7 10             	shl    edi,0x10
c0018949:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001894f:	c1 e0 10             	shl    eax,0x10
c0018952:	09 c5                	or     ebp,eax
c0018954:	89 e9                	mov    ecx,ebp
c0018956:	0f b7 c2             	movzx  eax,dx
c0018959:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001895d:	09 f8                	or     eax,edi
c001895f:	89 c2                	mov    edx,eax
c0018961:	50                   	push   eax
c0018962:	50                   	push   eax
c0018963:	88 d9                	mov    cl,bl
c0018965:	51                   	push   ecx
c0018966:	52                   	push   edx
c0018967:	e8 d3 3b ff ff       	call   c000c53f <datetimeToSeconds(datetime_t)>
c001896c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018970:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018976:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001897c:	83 c4 4c             	add    esp,0x4c
c001897f:	5b                   	pop    ebx
c0018980:	5e                   	pop    esi
c0018981:	5f                   	pop    edi
c0018982:	5d                   	pop    ebp
c0018983:	c3                   	ret    

c0018984 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018984:	55                   	push   ebp
c0018985:	57                   	push   edi
c0018986:	56                   	push   esi
c0018987:	53                   	push   ebx
c0018988:	83 ec 30             	sub    esp,0x30
c001898b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001898f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018993:	6a 00                	push   0x0
c0018995:	6a 00                	push   0x0
c0018997:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001899d:	e8 10 e9 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189a2:	83 c4 0c             	add    esp,0xc
c00189a5:	6a 00                	push   0x0
c00189a7:	6a 02                	push   0x2
c00189a9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189af:	e8 fe e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189b4:	89 f8                	mov    eax,edi
c00189b6:	89 f9                	mov    ecx,edi
c00189b8:	0f b6 c4             	movzx  eax,ah
c00189bb:	31 d2                	xor    edx,edx
c00189bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00189c1:	c1 e9 10             	shr    ecx,0x10
c00189c4:	89 f0                	mov    eax,esi
c00189c6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00189ca:	89 f0                	mov    eax,esi
c00189cc:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00189d0:	0f b6 c4             	movzx  eax,ah
c00189d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189d7:	89 f0                	mov    eax,esi
c00189d9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00189dd:	c1 e8 10             	shr    eax,0x10
c00189e0:	b9 64 00 00 00       	mov    ecx,0x64
c00189e5:	f7 f1                	div    ecx
c00189e7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00189eb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00189ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00189f3:	59                   	pop    ecx
c00189f4:	5b                   	pop    ebx
c00189f5:	89 fb                	mov    ebx,edi
c00189f7:	6a 0b                	push   0xb
c00189f9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189ff:	e8 96 e7 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018a04:	83 c4 10             	add    esp,0x10
c0018a07:	a8 04                	test   al,0x4
c0018a09:	89 c5                	mov    ebp,eax
c0018a0b:	75 6e                	jne    c0018a7b <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018a0d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018a11:	31 d2                	xor    edx,edx
c0018a13:	0f b6 c1             	movzx  eax,cl
c0018a16:	b9 0a 00 00 00       	mov    ecx,0xa
c0018a1b:	f7 f1                	div    ecx
c0018a1d:	c1 e0 04             	shl    eax,0x4
c0018a20:	09 d0                	or     eax,edx
c0018a22:	31 d2                	xor    edx,edx
c0018a24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a28:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018a2d:	f7 f1                	div    ecx
c0018a2f:	c1 e0 04             	shl    eax,0x4
c0018a32:	09 d0                	or     eax,edx
c0018a34:	31 d2                	xor    edx,edx
c0018a36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a3a:	0f b6 c3             	movzx  eax,bl
c0018a3d:	f7 f1                	div    ecx
c0018a3f:	c1 e0 04             	shl    eax,0x4
c0018a42:	09 d0                	or     eax,edx
c0018a44:	31 d2                	xor    edx,edx
c0018a46:	89 c3                	mov    ebx,eax
c0018a48:	89 f0                	mov    eax,esi
c0018a4a:	0f b6 c0             	movzx  eax,al
c0018a4d:	f7 f1                	div    ecx
c0018a4f:	c1 e0 04             	shl    eax,0x4
c0018a52:	09 d0                	or     eax,edx
c0018a54:	31 d2                	xor    edx,edx
c0018a56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a5a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a5f:	f7 f1                	div    ecx
c0018a61:	c1 e0 04             	shl    eax,0x4
c0018a64:	09 d0                	or     eax,edx
c0018a66:	31 d2                	xor    edx,edx
c0018a68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018a6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a70:	f7 f1                	div    ecx
c0018a72:	c1 e0 04             	shl    eax,0x4
c0018a75:	09 d0                	or     eax,edx
c0018a77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a7b:	83 e5 02             	and    ebp,0x2
c0018a7e:	75 1e                	jne    c0018a9e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018a80:	0f b6 c3             	movzx  eax,bl
c0018a83:	83 f8 0b             	cmp    eax,0xb
c0018a86:	76 10                	jbe    c0018a98 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018a88:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018a8b:	84 d2                	test   dl,dl
c0018a8d:	88 d3                	mov    bl,dl
c0018a8f:	75 02                	jne    c0018a93 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018a91:	b3 0c                	mov    bl,0xc
c0018a93:	83 cb 80             	or     ebx,0xffffff80
c0018a96:	eb 06                	jmp    c0018a9e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018a98:	85 c0                	test   eax,eax
c0018a9a:	75 02                	jne    c0018a9e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018a9c:	b3 0c                	mov    bl,0xc
c0018a9e:	50                   	push   eax
c0018a9f:	0f b6 db             	movzx  ebx,bl
c0018aa2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018aa7:	52                   	push   edx
c0018aa8:	6a 00                	push   0x0
c0018aaa:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ab0:	e8 fd e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ab5:	83 c4 0c             	add    esp,0xc
c0018ab8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018abd:	50                   	push   eax
c0018abe:	6a 02                	push   0x2
c0018ac0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ac6:	e8 e7 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018acb:	83 c4 0c             	add    esp,0xc
c0018ace:	53                   	push   ebx
c0018acf:	6a 04                	push   0x4
c0018ad1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ad7:	e8 d6 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018adc:	83 c4 0c             	add    esp,0xc
c0018adf:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018ae4:	52                   	push   edx
c0018ae5:	6a 07                	push   0x7
c0018ae7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018aed:	e8 c0 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018af2:	83 c4 0c             	add    esp,0xc
c0018af5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018afa:	50                   	push   eax
c0018afb:	6a 08                	push   0x8
c0018afd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b03:	e8 aa e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b08:	83 c4 0c             	add    esp,0xc
c0018b0b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018b10:	55                   	push   ebp
c0018b11:	6a 09                	push   0x9
c0018b13:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b19:	e8 94 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b1e:	5a                   	pop    edx
c0018b1f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018b23:	e8 82 fb ff ff       	call   c00186aa <RTC::completeRTCRefresh()>
c0018b28:	83 c4 3c             	add    esp,0x3c
c0018b2b:	b0 01                	mov    al,0x1
c0018b2d:	5b                   	pop    ebx
c0018b2e:	5e                   	pop    esi
c0018b2f:	5f                   	pop    edi
c0018b30:	5d                   	pop    ebp
c0018b31:	c3                   	ret    

c0018b32 <rtcIRQHandler(regs*, void*)>:
c0018b32:	53                   	push   ebx
c0018b33:	83 ec 10             	sub    esp,0x10
c0018b36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018b3a:	6a 0c                	push   0xc
c0018b3c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b42:	e8 53 e6 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018b47:	83 c4 10             	add    esp,0x10
c0018b4a:	a8 80                	test   al,0x80
c0018b4c:	74 24                	je     c0018b72 <rtcIRQHandler(regs*, void*)+0x40>
c0018b4e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018b55:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018b5c:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018b63:	75 0d                	jne    c0018b72 <rtcIRQHandler(regs*, void*)+0x40>
c0018b65:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b69:	83 c4 08             	add    esp,0x8
c0018b6c:	5b                   	pop    ebx
c0018b6d:	e9 38 fb ff ff       	jmp    c00186aa <RTC::completeRTCRefresh()>
c0018b72:	83 c4 08             	add    esp,0x8
c0018b75:	5b                   	pop    ebx
c0018b76:	c3                   	ret    
c0018b77:	90                   	nop

c0018b78 <RTC::RTC()>:
c0018b78:	83 ec 1c             	sub    esp,0x1c
c0018b7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b7f:	83 ec 08             	sub    esp,0x8
c0018b82:	68 ef 2c 02 c0       	push   0xc0022cef
c0018b87:	50                   	push   eax
c0018b88:	e8 8d 38 ff ff       	call   c000c41a <Clock::Clock(char const*)>
c0018b8d:	83 c4 10             	add    esp,0x10
c0018b90:	ba 0c 2d 02 c0       	mov    edx,0xc0022d0c
c0018b95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b99:	89 10                	mov    DWORD PTR [eax],edx
c0018b9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b9f:	83 ec 0c             	sub    esp,0xc
c0018ba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ba6:	6a 01                	push   0x1
c0018ba8:	68 32 8b 01 c0       	push   0xc0018b32
c0018bad:	6a 08                	push   0x8
c0018baf:	50                   	push   eax
c0018bb0:	e8 47 3d ff ff       	call   c000c8fc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018bb5:	83 c4 20             	add    esp,0x20
c0018bb8:	89 c2                	mov    edx,eax
c0018bba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bbe:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018bc4:	fa                   	cli    
c0018bc5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018bca:	83 c0 01             	add    eax,0x1
c0018bcd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018bd2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018bd7:	83 ec 08             	sub    esp,0x8
c0018bda:	6a 0b                	push   0xb
c0018bdc:	50                   	push   eax
c0018bdd:	e8 b8 e5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018be2:	83 c4 10             	add    esp,0x10
c0018be5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018be9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018bee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018bf2:	83 ca 10             	or     edx,0x10
c0018bf5:	0f b6 d2             	movzx  edx,dl
c0018bf8:	83 ec 04             	sub    esp,0x4
c0018bfb:	52                   	push   edx
c0018bfc:	6a 0b                	push   0xb
c0018bfe:	50                   	push   eax
c0018bff:	e8 ae e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c04:	83 c4 10             	add    esp,0x10
c0018c07:	83 ec 0c             	sub    esp,0xc
c0018c0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c0e:	e8 97 fa ff ff       	call   c00186aa <RTC::completeRTCRefresh()>
c0018c13:	83 c4 10             	add    esp,0x10
c0018c16:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c1b:	83 e8 01             	sub    eax,0x1
c0018c1e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c23:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c28:	85 c0                	test   eax,eax
c0018c2a:	75 01                	jne    c0018c2d <RTC::RTC()+0xb5>
c0018c2c:	fb                   	sti    
c0018c2d:	90                   	nop
c0018c2e:	83 c4 1c             	add    esp,0x1c
c0018c31:	c3                   	ret    
c0018c32:	66 90                	xchg   ax,ax

c0018c34 <HalConsoleScroll(int, int)>:
c0018c34:	83 ec 10             	sub    esp,0x10
c0018c37:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018c3f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018c47:	90                   	nop
c0018c48:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018c4d:	0f 8f e1 00 00 00    	jg     c0018d34 <HalConsoleScroll(int, int)+0x100>
c0018c53:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018c5b:	90                   	nop
c0018c5c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018c64:	0f 8f be 00 00 00    	jg     c0018d28 <HalConsoleScroll(int, int)+0xf4>
c0018c6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c6e:	89 d0                	mov    eax,edx
c0018c70:	c1 e0 02             	shl    eax,0x2
c0018c73:	01 d0                	add    eax,edx
c0018c75:	c1 e0 05             	shl    eax,0x5
c0018c78:	89 c2                	mov    edx,eax
c0018c7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c7e:	01 d0                	add    eax,edx
c0018c80:	89 c2                	mov    edx,eax
c0018c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018c86:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018c89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c8d:	89 d0                	mov    eax,edx
c0018c8f:	c1 e0 02             	shl    eax,0x2
c0018c92:	01 d0                	add    eax,edx
c0018c94:	c1 e0 05             	shl    eax,0x5
c0018c97:	89 c2                	mov    edx,eax
c0018c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c9d:	01 d0                	add    eax,edx
c0018c9f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018ca5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ca9:	01 d0                	add    eax,edx
c0018cab:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018cad:	88 10                	mov    BYTE PTR [eax],dl
c0018caf:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018cb4:	75 66                	jne    c0018d1c <HalConsoleScroll(int, int)+0xe8>
c0018cb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cba:	83 e0 01             	and    eax,0x1
c0018cbd:	74 39                	je     c0018cf8 <HalConsoleScroll(int, int)+0xc4>
c0018cbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cc3:	83 e0 0f             	and    eax,0xf
c0018cc6:	88 c2                	mov    dl,al
c0018cc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ccc:	c1 e0 04             	shl    eax,0x4
c0018ccf:	09 d0                	or     eax,edx
c0018cd1:	88 c1                	mov    cl,al
c0018cd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018cd7:	89 d0                	mov    eax,edx
c0018cd9:	c1 e0 02             	shl    eax,0x2
c0018cdc:	01 d0                	add    eax,edx
c0018cde:	c1 e0 05             	shl    eax,0x5
c0018ce1:	89 c2                	mov    edx,eax
c0018ce3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ce7:	01 d0                	add    eax,edx
c0018ce9:	89 c2                	mov    edx,eax
c0018ceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cef:	01 d0                	add    eax,edx
c0018cf1:	88 ca                	mov    dl,cl
c0018cf3:	88 10                	mov    BYTE PTR [eax],dl
c0018cf5:	eb 25                	jmp    c0018d1c <HalConsoleScroll(int, int)+0xe8>
c0018cf7:	90                   	nop
c0018cf8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018cfc:	89 d0                	mov    eax,edx
c0018cfe:	c1 e0 02             	shl    eax,0x2
c0018d01:	01 d0                	add    eax,edx
c0018d03:	c1 e0 05             	shl    eax,0x5
c0018d06:	89 c2                	mov    edx,eax
c0018d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d0c:	01 d0                	add    eax,edx
c0018d0e:	89 c2                	mov    edx,eax
c0018d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d14:	01 d0                	add    eax,edx
c0018d16:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018d19:	8d 76 00             	lea    esi,[esi+0x0]
c0018d1c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018d21:	e9 36 ff ff ff       	jmp    c0018c5c <HalConsoleScroll(int, int)+0x28>
c0018d26:	66 90                	xchg   ax,ax
c0018d28:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018d2d:	e9 16 ff ff ff       	jmp    c0018c48 <HalConsoleScroll(int, int)+0x14>
c0018d32:	66 90                	xchg   ax,ax
c0018d34:	90                   	nop
c0018d35:	83 c4 10             	add    esp,0x10
c0018d38:	c3                   	ret    
c0018d39:	8d 76 00             	lea    esi,[esi+0x0]

c0018d3c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018d3c:	83 ec 14             	sub    esp,0x14
c0018d3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d43:	88 04 24             	mov    BYTE PTR [esp],al
c0018d46:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018d49:	0f b6 c0             	movzx  eax,al
c0018d4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d50:	89 d1                	mov    ecx,edx
c0018d52:	83 e1 0f             	and    ecx,0xf
c0018d55:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d59:	c1 e2 04             	shl    edx,0x4
c0018d5c:	0f b6 d2             	movzx  edx,dl
c0018d5f:	09 ca                	or     edx,ecx
c0018d61:	c1 e2 08             	shl    edx,0x8
c0018d64:	09 d0                	or     eax,edx
c0018d66:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018d6b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018d73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d77:	89 d0                	mov    eax,edx
c0018d79:	c1 e0 02             	shl    eax,0x2
c0018d7c:	01 d0                	add    eax,edx
c0018d7e:	c1 e0 04             	shl    eax,0x4
c0018d81:	89 c2                	mov    edx,eax
c0018d83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d87:	01 d0                	add    eax,edx
c0018d89:	d1 e0                	shl    eax,1
c0018d8b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018d8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d93:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018d98:	66 89 10             	mov    WORD PTR [eax],dx
c0018d9b:	90                   	nop
c0018d9c:	83 c4 14             	add    esp,0x14
c0018d9f:	c3                   	ret    

c0018da0 <HalConsoleCursorUpdate(int, int)>:
c0018da0:	83 ec 20             	sub    esp,0x20
c0018da3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018da7:	89 c2                	mov    edx,eax
c0018da9:	c1 e2 02             	shl    edx,0x2
c0018dac:	01 d0                	add    eax,edx
c0018dae:	c1 e0 04             	shl    eax,0x4
c0018db1:	89 c2                	mov    edx,eax
c0018db3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018db7:	01 d0                	add    eax,edx
c0018db9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018dbe:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018dc5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018dca:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018dce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018dd2:	ee                   	out    dx,al
c0018dd3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018dd8:	0f b6 c0             	movzx  eax,al
c0018ddb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018de2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018de6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018dea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018dee:	ee                   	out    dx,al
c0018def:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018df6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018dfb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018dff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e03:	ee                   	out    dx,al
c0018e04:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018e09:	c1 e8 08             	shr    eax,0x8
c0018e0c:	0f b6 c0             	movzx  eax,al
c0018e0f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018e16:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018e1a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018e1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e22:	ee                   	out    dx,al
c0018e23:	90                   	nop
c0018e24:	83 c4 20             	add    esp,0x20
c0018e27:	c3                   	ret    

c0018e28 <FAT::getName()>:
c0018e28:	b8 40 2d 02 c0       	mov    eax,0xc0022d40
c0018e2d:	c3                   	ret    
c0018e2e:	66 90                	xchg   ax,ax

c0018e30 <FAT::tell(void*, unsigned long long*)>:
c0018e30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e35:	75 09                	jne    c0018e40 <FAT::tell(void*, unsigned long long*)+0x10>
c0018e37:	b8 04 00 00 00       	mov    eax,0x4
c0018e3c:	c3                   	ret    
c0018e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e40:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e45:	75 09                	jne    c0018e50 <FAT::tell(void*, unsigned long long*)+0x20>
c0018e47:	b8 04 00 00 00       	mov    eax,0x4
c0018e4c:	c3                   	ret    
c0018e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e54:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018e57:	ba 00 00 00 00       	mov    edx,0x0
c0018e5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e60:	89 01                	mov    DWORD PTR [ecx],eax
c0018e62:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e65:	b8 00 00 00 00       	mov    eax,0x0
c0018e6a:	c3                   	ret    
c0018e6b:	90                   	nop

c0018e6c <FAT::stat(void*, unsigned long long*)>:
c0018e6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e71:	75 09                	jne    c0018e7c <FAT::stat(void*, unsigned long long*)+0x10>
c0018e73:	b8 04 00 00 00       	mov    eax,0x4
c0018e78:	c3                   	ret    
c0018e79:	8d 76 00             	lea    esi,[esi+0x0]
c0018e7c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e81:	75 09                	jne    c0018e8c <FAT::stat(void*, unsigned long long*)+0x20>
c0018e83:	b8 04 00 00 00       	mov    eax,0x4
c0018e88:	c3                   	ret    
c0018e89:	8d 76 00             	lea    esi,[esi+0x0]
c0018e8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018e93:	ba 00 00 00 00       	mov    edx,0x0
c0018e98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e9c:	89 01                	mov    DWORD PTR [ecx],eax
c0018e9e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ea1:	b8 00 00 00 00       	mov    eax,0x0
c0018ea6:	c3                   	ret    
c0018ea7:	90                   	nop

c0018ea8 <FAT::~FAT()>:
c0018ea8:	83 ec 0c             	sub    esp,0xc
c0018eab:	ba 8c 2d 02 c0       	mov    edx,0xc0022d8c
c0018eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eb4:	89 10                	mov    DWORD PTR [eax],edx
c0018eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eba:	83 ec 0c             	sub    esp,0xc
c0018ebd:	50                   	push   eax
c0018ebe:	e8 7b 28 ff ff       	call   c000b73e <Filesystem::~Filesystem()>
c0018ec3:	83 c4 10             	add    esp,0x10
c0018ec6:	90                   	nop
c0018ec7:	83 c4 0c             	add    esp,0xc
c0018eca:	c3                   	ret    
c0018ecb:	90                   	nop

c0018ecc <FAT::~FAT()>:
c0018ecc:	83 ec 0c             	sub    esp,0xc
c0018ecf:	83 ec 0c             	sub    esp,0xc
c0018ed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ed6:	e8 cd ff ff ff       	call   c0018ea8 <FAT::~FAT()>
c0018edb:	83 c4 10             	add    esp,0x10
c0018ede:	83 ec 08             	sub    esp,0x8
c0018ee1:	6a 08                	push   0x8
c0018ee3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ee7:	e8 20 19 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018eec:	83 c4 10             	add    esp,0x10
c0018eef:	83 c4 0c             	add    esp,0xc
c0018ef2:	c3                   	ret    
c0018ef3:	90                   	nop

c0018ef4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018ef4:	83 ec 1c             	sub    esp,0x1c
c0018ef7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018efe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018f03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f07:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0018f11:	75 35                	jne    c0018f48 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018f13:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f17:	88 c2                	mov    dl,al
c0018f19:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018f1e:	01 d0                	add    eax,edx
c0018f20:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f24:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018f2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f2e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018f35:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018f3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f3e:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018f45:	eb 19                	jmp    c0018f60 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018f47:	90                   	nop
c0018f48:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f4c:	88 c2                	mov    dl,al
c0018f4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f52:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018f59:	01 d0                	add    eax,edx
c0018f5b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f5f:	90                   	nop
c0018f60:	83 ec 04             	sub    esp,0x4
c0018f63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f6b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018f6f:	50                   	push   eax
c0018f70:	e8 7e c0 fe ff       	call   c0004ff3 <f_getlabel>
c0018f75:	83 c4 10             	add    esp,0x10
c0018f78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018f7c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f81:	75 09                	jne    c0018f8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018f83:	b8 00 00 00 00       	mov    eax,0x0
c0018f88:	eb 0a                	jmp    c0018f94 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018f8a:	66 90                	xchg   ax,ax
c0018f8c:	b8 01 00 00 00       	mov    eax,0x1
c0018f91:	8d 76 00             	lea    esi,[esi+0x0]
c0018f94:	83 c4 1c             	add    esp,0x1c
c0018f97:	c3                   	ret    

c0018f98 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018f98:	53                   	push   ebx
c0018f99:	83 ec 58             	sub    esp,0x58
c0018f9c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018fa4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018fa8:	b9 00 00 00 00       	mov    ecx,0x0
c0018fad:	b8 3c 00 00 00       	mov    eax,0x3c
c0018fb2:	83 e0 f8             	and    eax,0xfffffff8
c0018fb5:	89 c3                	mov    ebx,eax
c0018fb7:	b8 00 00 00 00       	mov    eax,0x0
c0018fbc:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018fc0:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018fc4:	83 c0 08             	add    eax,0x8
c0018fc7:	39 d8                	cmp    eax,ebx
c0018fc9:	72 f1                	jb     c0018fbc <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018fcb:	01 c2                	add    edx,eax
c0018fcd:	89 0a                	mov    DWORD PTR [edx],ecx
c0018fcf:	83 c2 04             	add    edx,0x4
c0018fd2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018fd6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fdd:	83 f8 ff             	cmp    eax,0xffffffff
c0018fe0:	75 36                	jne    c0019018 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018fe2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018fe6:	88 c2                	mov    dl,al
c0018fe8:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fed:	01 d0                	add    eax,edx
c0018fef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ff3:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018ff9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ffd:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019004:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019009:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001900d:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019014:	eb 1a                	jmp    c0019030 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019016:	66 90                	xchg   ax,ax
c0019018:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001901c:	88 c2                	mov    dl,al
c001901e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019022:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019029:	01 d0                	add    eax,edx
c001902b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001902f:	90                   	nop
c0019030:	83 ec 08             	sub    esp,0x8
c0019033:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019037:	8d 44 24 18          	lea    eax,[esp+0x18]
c001903b:	50                   	push   eax
c001903c:	e8 2f 78 fe ff       	call   c0000870 <strcat>
c0019041:	83 c4 10             	add    esp,0x10
c0019044:	83 ec 0c             	sub    esp,0xc
c0019047:	8d 44 24 18          	lea    eax,[esp+0x18]
c001904b:	50                   	push   eax
c001904c:	e8 f6 c0 fe ff       	call   c0005147 <f_setlabel>
c0019051:	83 c4 10             	add    esp,0x10
c0019054:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019058:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001905d:	75 09                	jne    c0019068 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001905f:	b8 00 00 00 00       	mov    eax,0x0
c0019064:	eb 0a                	jmp    c0019070 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0019066:	66 90                	xchg   ax,ax
c0019068:	b8 01 00 00 00       	mov    eax,0x1
c001906d:	8d 76 00             	lea    esi,[esi+0x0]
c0019070:	83 c4 58             	add    esp,0x58
c0019073:	5b                   	pop    ebx
c0019074:	c3                   	ret    
c0019075:	90                   	nop
c0019076:	66 90                	xchg   ax,ax

c0019078 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019078:	83 ec 2c             	sub    esp,0x2c
c001907b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019083:	83 ec 08             	sub    esp,0x8
c0019086:	68 64 2d 02 c0       	push   0xc0022d64
c001908b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001908f:	e8 ec 76 fe ff       	call   c0000780 <strcmp>
c0019094:	83 c4 10             	add    esp,0x10
c0019097:	85 c0                	test   eax,eax
c0019099:	0f 94 c0             	sete   al
c001909c:	0f b6 c0             	movzx  eax,al
c001909f:	85 c0                	test   eax,eax
c00190a1:	74 0d                	je     c00190b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00190a3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00190ab:	e9 c0 00 00 00       	jmp    c0019170 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00190b0:	83 ec 08             	sub    esp,0x8
c00190b3:	68 56 2d 02 c0       	push   0xc0022d56
c00190b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190bc:	e8 bf 76 fe ff       	call   c0000780 <strcmp>
c00190c1:	83 c4 10             	add    esp,0x10
c00190c4:	85 c0                	test   eax,eax
c00190c6:	0f 94 c0             	sete   al
c00190c9:	0f b6 c0             	movzx  eax,al
c00190cc:	85 c0                	test   eax,eax
c00190ce:	74 10                	je     c00190e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00190d0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00190d8:	e9 93 00 00 00       	jmp    c0019170 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00190dd:	8d 76 00             	lea    esi,[esi+0x0]
c00190e0:	83 ec 08             	sub    esp,0x8
c00190e3:	68 5c 2d 02 c0       	push   0xc0022d5c
c00190e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190ec:	e8 8f 76 fe ff       	call   c0000780 <strcmp>
c00190f1:	83 c4 10             	add    esp,0x10
c00190f4:	85 c0                	test   eax,eax
c00190f6:	0f 94 c0             	sete   al
c00190f9:	0f b6 c0             	movzx  eax,al
c00190fc:	85 c0                	test   eax,eax
c00190fe:	74 0c                	je     c001910c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019100:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019108:	eb 66                	jmp    c0019170 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001910a:	66 90                	xchg   ax,ax
c001910c:	83 ec 08             	sub    esp,0x8
c001910f:	68 bc 04 02 c0       	push   0xc00204bc
c0019114:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019118:	e8 63 76 fe ff       	call   c0000780 <strcmp>
c001911d:	83 c4 10             	add    esp,0x10
c0019120:	85 c0                	test   eax,eax
c0019122:	0f 94 c0             	sete   al
c0019125:	0f b6 c0             	movzx  eax,al
c0019128:	85 c0                	test   eax,eax
c001912a:	74 0c                	je     c0019138 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001912c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019134:	eb 3a                	jmp    c0019170 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019136:	66 90                	xchg   ax,ax
c0019138:	83 ec 08             	sub    esp,0x8
c001913b:	68 62 2d 02 c0       	push   0xc0022d62
c0019140:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019144:	e8 37 76 fe ff       	call   c0000780 <strcmp>
c0019149:	83 c4 10             	add    esp,0x10
c001914c:	85 c0                	test   eax,eax
c001914e:	0f 94 c0             	sete   al
c0019151:	0f b6 c0             	movzx  eax,al
c0019154:	85 c0                	test   eax,eax
c0019156:	74 0c                	je     c0019164 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019158:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019160:	eb 0e                	jmp    c0019170 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019162:	66 90                	xchg   ax,ax
c0019164:	b8 08 00 00 00       	mov    eax,0x8
c0019169:	e9 ea 00 00 00       	jmp    c0019258 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001916e:	66 90                	xchg   ax,ax
c0019170:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019177:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001917c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019180:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019187:	83 f8 ff             	cmp    eax,0xffffffff
c001918a:	75 34                	jne    c00191c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001918c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019190:	88 c2                	mov    dl,al
c0019192:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019197:	01 d0                	add    eax,edx
c0019199:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001919d:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00191a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191a7:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00191ae:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191b3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00191b7:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00191be:	eb 18                	jmp    c00191d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00191c0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00191c4:	88 c2                	mov    dl,al
c00191c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191ca:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191d1:	01 d0                	add    eax,edx
c00191d3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00191d7:	90                   	nop
c00191d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191dc:	88 04 24             	mov    BYTE PTR [esp],al
c00191df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00191e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00191ef:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00191f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00191fc:	83 ec 0c             	sub    esp,0xc
c00191ff:	68 00 20 00 00       	push   0x2000
c0019204:	e8 ca e8 fe ff       	call   c0007ad3 <malloc>
c0019209:	83 c4 10             	add    esp,0x10
c001920c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019210:	68 00 20 00 00       	push   0x2000
c0019215:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019219:	8d 44 24 08          	lea    eax,[esp+0x8]
c001921d:	50                   	push   eax
c001921e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019222:	50                   	push   eax
c0019223:	e8 1c c2 fe ff       	call   c0005444 <f_mkfs>
c0019228:	83 c4 10             	add    esp,0x10
c001922b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001922f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019234:	75 0a                	jne    c0019240 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019236:	b8 00 00 00 00       	mov    eax,0x0
c001923b:	eb 1b                	jmp    c0019258 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001923d:	8d 76 00             	lea    esi,[esi+0x0]
c0019240:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019245:	75 09                	jne    c0019250 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019247:	b8 09 00 00 00       	mov    eax,0x9
c001924c:	eb 0a                	jmp    c0019258 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001924e:	66 90                	xchg   ax,ax
c0019250:	b8 01 00 00 00       	mov    eax,0x1
c0019255:	8d 76 00             	lea    esi,[esi+0x0]
c0019258:	83 c4 2c             	add    esp,0x2c
c001925b:	c3                   	ret    

c001925c <FAT::tryMount(LogicalDisk*, int)>:
c001925c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019262:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019267:	83 f8 14             	cmp    eax,0x14
c001926a:	75 18                	jne    c0019284 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001926c:	83 ec 0c             	sub    esp,0xc
c001926f:	68 68 2d 02 c0       	push   0xc0022d68
c0019274:	e8 9e 82 ff ff       	call   c0011517 <KePanic(char const*)>
c0019279:	83 c4 10             	add    esp,0x10
c001927c:	b0 00                	mov    al,0x0
c001927e:	e9 ed 01 00 00       	jmp    c0019470 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019283:	90                   	nop
c0019284:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001928b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019291:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019297:	3d 00 02 00 00       	cmp    eax,0x200
c001929c:	74 0a                	je     c00192a8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001929e:	b0 00                	mov    al,0x0
c00192a0:	e9 cb 01 00 00       	jmp    c0019470 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192a5:	8d 76 00             	lea    esi,[esi+0x0]
c00192a8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00192b0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00192b7:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192be:	83 f8 ff             	cmp    eax,0xffffffff
c00192c1:	74 09                	je     c00192cc <FAT::tryMount(LogicalDisk*, int)+0x70>
c00192c3:	b0 01                	mov    al,0x1
c00192c5:	e9 a6 01 00 00       	jmp    c0019470 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192ca:	66 90                	xchg   ax,ax
c00192cc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00192d6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00192de:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00192e5:	88 c2                	mov    dl,al
c00192e7:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192ec:	01 d0                	add    eax,edx
c00192ee:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00192f5:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00192fb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019302:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019309:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001930e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019315:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001931c:	83 ec 0c             	sub    esp,0xc
c001931f:	68 34 02 00 00       	push   0x234
c0019324:	e8 aa e7 fe ff       	call   c0007ad3 <malloc>
c0019329:	83 c4 10             	add    esp,0x10
c001932c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019333:	83 ec 04             	sub    esp,0x4
c0019336:	6a 00                	push   0x0
c0019338:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001933f:	50                   	push   eax
c0019340:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019347:	e8 f2 a8 fe ff       	call   c0003c3e <f_mount>
c001934c:	83 c4 10             	add    esp,0x10
c001934f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019356:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001935e:	74 1c                	je     c001937c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019360:	83 ec 0c             	sub    esp,0xc
c0019363:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001936a:	e8 84 e7 fe ff       	call   c0007af3 <rfree>
c001936f:	83 c4 10             	add    esp,0x10
c0019372:	b0 00                	mov    al,0x0
c0019374:	e9 f7 00 00 00       	jmp    c0019470 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019379:	8d 76 00             	lea    esi,[esi+0x0]
c001937c:	83 ec 04             	sub    esp,0x4
c001937f:	68 00 01 00 00       	push   0x100
c0019384:	6a 00                	push   0x0
c0019386:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001938d:	50                   	push   eax
c001938e:	e8 5d 71 fe ff       	call   c00004f0 <memset>
c0019393:	83 c4 10             	add    esp,0x10
c0019396:	83 ec 08             	sub    esp,0x8
c0019399:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00193a0:	50                   	push   eax
c00193a1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00193a8:	50                   	push   eax
c00193a9:	e8 c2 74 fe ff       	call   c0000870 <strcat>
c00193ae:	83 c4 10             	add    esp,0x10
c00193b1:	83 ec 08             	sub    esp,0x8
c00193b4:	68 76 2d 02 c0       	push   0xc0022d76
c00193b9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00193c0:	50                   	push   eax
c00193c1:	e8 aa 74 fe ff       	call   c0000870 <strcat>
c00193c6:	83 c4 10             	add    esp,0x10
c00193c9:	83 ec 04             	sub    esp,0x4
c00193cc:	6a 01                	push   0x1
c00193ce:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00193d5:	50                   	push   eax
c00193d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00193da:	50                   	push   eax
c00193db:	e8 c0 a8 fe ff       	call   c0003ca0 <f_open>
c00193e0:	83 c4 10             	add    esp,0x10
c00193e3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00193ea:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00193f1:	85 c0                	test   eax,eax
c00193f3:	74 0b                	je     c0019400 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00193f5:	78 31                	js     c0019428 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00193f7:	83 e8 04             	sub    eax,0x4
c00193fa:	83 f8 01             	cmp    eax,0x1
c00193fd:	77 29                	ja     c0019428 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00193ff:	90                   	nop
c0019400:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019408:	83 ec 0c             	sub    esp,0xc
c001940b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001940f:	50                   	push   eax
c0019410:	e8 3b b0 fe ff       	call   c0004450 <f_close>
c0019415:	83 c4 10             	add    esp,0x10
c0019418:	90                   	nop
c0019419:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019421:	85 c0                	test   eax,eax
c0019423:	74 43                	je     c0019468 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019425:	eb 31                	jmp    c0019458 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019427:	90                   	nop
c0019428:	83 ec 0c             	sub    esp,0xc
c001942b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019432:	e8 bc e6 fe ff       	call   c0007af3 <rfree>
c0019437:	83 c4 10             	add    esp,0x10
c001943a:	83 ec 04             	sub    esp,0x4
c001943d:	6a 00                	push   0x0
c001943f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019446:	50                   	push   eax
c0019447:	6a 00                	push   0x0
c0019449:	e8 f0 a7 fe ff       	call   c0003c3e <f_mount>
c001944e:	83 c4 10             	add    esp,0x10
c0019451:	b0 00                	mov    al,0x0
c0019453:	eb 1b                	jmp    c0019470 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019455:	8d 76 00             	lea    esi,[esi+0x0]
c0019458:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001945d:	83 c0 01             	add    eax,0x1
c0019460:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019465:	8d 76 00             	lea    esi,[esi+0x0]
c0019468:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001946f:	90                   	nop
c0019470:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019476:	c3                   	ret    
c0019477:	90                   	nop

c0019478 <FAT::allocateSwapfile(char const*, int)>:
c0019478:	55                   	push   ebp
c0019479:	57                   	push   edi
c001947a:	56                   	push   esi
c001947b:	53                   	push   ebx
c001947c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019482:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001948d:	83 ec 0c             	sub    esp,0xc
c0019490:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019497:	e8 37 e6 fe ff       	call   c0007ad3 <malloc>
c001949c:	83 c4 10             	add    esp,0x10
c001949f:	89 c7                	mov    edi,eax
c00194a1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00194a6:	83 ec 04             	sub    esp,0x4
c00194a9:	50                   	push   eax
c00194aa:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00194b1:	57                   	push   edi
c00194b2:	e8 19 26 ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c00194b7:	83 c4 10             	add    esp,0x10
c00194ba:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00194c1:	83 ec 04             	sub    esp,0x4
c00194c4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00194c8:	50                   	push   eax
c00194c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00194cd:	50                   	push   eax
c00194ce:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00194d5:	e8 16 29 ff ff       	call   c000bdf0 <File::stat(unsigned long long*, bool*)>
c00194da:	83 c4 10             	add    esp,0x10
c00194dd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00194e4:	c1 e0 14             	shl    eax,0x14
c00194e7:	89 c7                	mov    edi,eax
c00194e9:	89 c5                	mov    ebp,eax
c00194eb:	c1 fd 1f             	sar    ebp,0x1f
c00194ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194f6:	89 f9                	mov    ecx,edi
c00194f8:	31 c1                	xor    ecx,eax
c00194fa:	89 cb                	mov    ebx,ecx
c00194fc:	89 e9                	mov    ecx,ebp
c00194fe:	31 d1                	xor    ecx,edx
c0019500:	89 ce                	mov    esi,ecx
c0019502:	89 f0                	mov    eax,esi
c0019504:	09 d8                	or     eax,ebx
c0019506:	0f 84 9c 00 00 00    	je     c00195a8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001950c:	83 ec 0c             	sub    esp,0xc
c001950f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019516:	e8 a1 27 ff ff       	call   c000bcbc <File::unlink()>
c001951b:	83 c4 10             	add    esp,0x10
c001951e:	83 ec 08             	sub    esp,0x8
c0019521:	6a 12                	push   0x12
c0019523:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001952a:	e8 bf 25 ff ff       	call   c000baee <File::open(FileOpenMode)>
c001952f:	83 c4 10             	add    esp,0x10
c0019532:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019539:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001953f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019546:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001954d:	c1 e0 14             	shl    eax,0x14
c0019550:	83 ec 04             	sub    esp,0x4
c0019553:	6a 01                	push   0x1
c0019555:	50                   	push   eax
c0019556:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001955d:	e8 75 bd fe ff       	call   c00052d7 <f_expand>
c0019562:	83 c4 10             	add    esp,0x10
c0019565:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001956c:	8b 00                	mov    eax,DWORD PTR [eax]
c001956e:	83 c0 10             	add    eax,0x10
c0019571:	8b 00                	mov    eax,DWORD PTR [eax]
c0019573:	83 ec 0c             	sub    esp,0xc
c0019576:	8d 54 24 24          	lea    edx,[esp+0x24]
c001957a:	52                   	push   edx
c001957b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001957f:	52                   	push   edx
c0019580:	6a 00                	push   0x0
c0019582:	68 00 04 00 00       	push   0x400
c0019587:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001958e:	ff d0                	call   eax
c0019590:	83 c4 20             	add    esp,0x20
c0019593:	83 ec 0c             	sub    esp,0xc
c0019596:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001959d:	e8 aa 25 ff ff       	call   c000bb4c <File::close()>
c00195a2:	83 c4 10             	add    esp,0x10
c00195a5:	8d 76 00             	lea    esi,[esi+0x0]
c00195a8:	83 ec 08             	sub    esp,0x8
c00195ab:	6a 01                	push   0x1
c00195ad:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195b4:	e8 35 25 ff ff       	call   c000baee <File::open(FileOpenMode)>
c00195b9:	83 c4 10             	add    esp,0x10
c00195bc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00195c5:	83 c0 0c             	add    eax,0xc
c00195c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00195ca:	83 ec 0c             	sub    esp,0xc
c00195cd:	8d 54 24 24          	lea    edx,[esp+0x24]
c00195d1:	52                   	push   edx
c00195d2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00195d6:	52                   	push   edx
c00195d7:	6a 00                	push   0x0
c00195d9:	6a 04                	push   0x4
c00195db:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00195e2:	ff d0                	call   eax
c00195e4:	83 c4 20             	add    esp,0x20
c00195e7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195ee:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00195f4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00195fb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019602:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019605:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001960c:	83 ec 0c             	sub    esp,0xc
c001960f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019616:	e8 31 25 ff ff       	call   c000bb4c <File::close()>
c001961b:	83 c4 10             	add    esp,0x10
c001961e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019625:	ba 00 00 00 00       	mov    edx,0x0
c001962a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019630:	5b                   	pop    ebx
c0019631:	5e                   	pop    esi
c0019632:	5f                   	pop    edi
c0019633:	5d                   	pop    ebp
c0019634:	c3                   	ret    
c0019635:	90                   	nop
c0019636:	66 90                	xchg   ax,ax

c0019638 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019638:	57                   	push   edi
c0019639:	56                   	push   esi
c001963a:	53                   	push   ebx
c001963b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019641:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019649:	74 0d                	je     c0019658 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001964b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019653:	75 0f                	jne    c0019664 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019655:	8d 76 00             	lea    esi,[esi+0x0]
c0019658:	b8 04 00 00 00       	mov    eax,0x4
c001965d:	e9 3a 01 00 00       	jmp    c001979c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019662:	66 90                	xchg   ax,ax
c0019664:	83 ec 08             	sub    esp,0x8
c0019667:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001966e:	50                   	push   eax
c001966f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019676:	e8 a1 b0 fe ff       	call   c000471c <f_readdir>
c001967b:	83 c4 10             	add    esp,0x10
c001967e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019685:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001968c:	83 ec 0c             	sub    esp,0xc
c001968f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019696:	83 c0 16             	add    eax,0x16
c0019699:	50                   	push   eax
c001969a:	e8 e1 6e fe ff       	call   c0000580 <strlen>
c001969f:	83 c4 10             	add    esp,0x10
c00196a2:	ba 00 00 00 00       	mov    edx,0x0
c00196a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196ab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00196af:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00196b6:	0f b6 c0             	movzx  eax,al
c00196b9:	83 e0 10             	and    eax,0x10
c00196bc:	74 0a                	je     c00196c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00196be:	b8 02 00 00 00       	mov    eax,0x2
c00196c3:	eb 0b                	jmp    c00196d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00196c5:	8d 76 00             	lea    esi,[esi+0x0]
c00196c8:	b8 01 00 00 00       	mov    eax,0x1
c00196cd:	8d 76 00             	lea    esi,[esi+0x0]
c00196d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00196d4:	83 ec 08             	sub    esp,0x8
c00196d7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00196de:	83 c0 16             	add    eax,0x16
c00196e1:	50                   	push   eax
c00196e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196e6:	83 c0 10             	add    eax,0x10
c00196e9:	50                   	push   eax
c00196ea:	e8 61 6f fe ff       	call   c0000650 <strcpy>
c00196ef:	83 c4 10             	add    esp,0x10
c00196f2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00196f9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019700:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019704:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001970b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019712:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019719:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019720:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019727:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001972e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019735:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001973c:	89 c6                	mov    esi,eax
c001973e:	89 d7                	mov    edi,edx
c0019740:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019742:	89 c8                	mov    eax,ecx
c0019744:	89 fa                	mov    edx,edi
c0019746:	89 f3                	mov    ebx,esi
c0019748:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001974f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019756:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001975d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019764:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001976a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019771:	0f be c0             	movsx  eax,al
c0019774:	85 c0                	test   eax,eax
c0019776:	75 08                	jne    c0019780 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019778:	b8 07 00 00 00       	mov    eax,0x7
c001977d:	eb 1d                	jmp    c001979c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001977f:	90                   	nop
c0019780:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019787:	85 c0                	test   eax,eax
c0019789:	75 09                	jne    c0019794 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001978b:	b8 00 00 00 00       	mov    eax,0x0
c0019790:	eb 0a                	jmp    c001979c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019792:	66 90                	xchg   ax,ax
c0019794:	b8 01 00 00 00       	mov    eax,0x1
c0019799:	8d 76 00             	lea    esi,[esi+0x0]
c001979c:	81 c4 50 02 00 00    	add    esp,0x250
c00197a2:	5b                   	pop    ebx
c00197a3:	5e                   	pop    esi
c00197a4:	5f                   	pop    edi
c00197a5:	c3                   	ret    
c00197a6:	66 90                	xchg   ax,ax

c00197a8 <FAT::read(void*, unsigned long, void*, int*)>:
c00197a8:	83 ec 1c             	sub    esp,0x1c
c00197ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00197b0:	74 0a                	je     c00197bc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00197b2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00197b7:	75 0b                	jne    c00197c4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00197b9:	8d 76 00             	lea    esi,[esi+0x0]
c00197bc:	b8 04 00 00 00       	mov    eax,0x4
c00197c1:	eb 41                	jmp    c0019804 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00197c3:	90                   	nop
c00197c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197c8:	50                   	push   eax
c00197c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00197cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00197d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197d5:	e8 89 a7 fe ff       	call   c0003f63 <f_read>
c00197da:	83 c4 10             	add    esp,0x10
c00197dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197e5:	89 c2                	mov    edx,eax
c00197e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00197eb:	89 10                	mov    DWORD PTR [eax],edx
c00197ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197f1:	85 c0                	test   eax,eax
c00197f3:	75 07                	jne    c00197fc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00197f5:	b8 00 00 00 00       	mov    eax,0x0
c00197fa:	eb 08                	jmp    c0019804 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00197fc:	b8 01 00 00 00       	mov    eax,0x1
c0019801:	8d 76 00             	lea    esi,[esi+0x0]
c0019804:	83 c4 1c             	add    esp,0x1c
c0019807:	c3                   	ret    

c0019808 <FAT::write(void*, unsigned long, void*, int*)>:
c0019808:	83 ec 1c             	sub    esp,0x1c
c001980b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019810:	74 0a                	je     c001981c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019812:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019817:	75 0b                	jne    c0019824 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019819:	8d 76 00             	lea    esi,[esi+0x0]
c001981c:	b8 04 00 00 00       	mov    eax,0x4
c0019821:	eb 41                	jmp    c0019864 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019823:	90                   	nop
c0019824:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019828:	50                   	push   eax
c0019829:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001982d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019831:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019835:	e8 0a a9 fe ff       	call   c0004144 <f_write>
c001983a:	83 c4 10             	add    esp,0x10
c001983d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019845:	89 c2                	mov    edx,eax
c0019847:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001984b:	89 10                	mov    DWORD PTR [eax],edx
c001984d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019851:	85 c0                	test   eax,eax
c0019853:	75 07                	jne    c001985c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019855:	b8 00 00 00 00       	mov    eax,0x0
c001985a:	eb 08                	jmp    c0019864 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001985c:	b8 01 00 00 00       	mov    eax,0x1
c0019861:	8d 76 00             	lea    esi,[esi+0x0]
c0019864:	83 c4 1c             	add    esp,0x1c
c0019867:	c3                   	ret    

c0019868 <FAT::close(void*)>:
c0019868:	83 ec 1c             	sub    esp,0x1c
c001986b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019870:	75 0a                	jne    c001987c <FAT::close(void*)+0x14>
c0019872:	b8 04 00 00 00       	mov    eax,0x4
c0019877:	eb 3f                	jmp    c00198b8 <FAT::close(void*)+0x50>
c0019879:	8d 76 00             	lea    esi,[esi+0x0]
c001987c:	83 ec 0c             	sub    esp,0xc
c001987f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019883:	e8 c8 ab fe ff       	call   c0004450 <f_close>
c0019888:	83 c4 10             	add    esp,0x10
c001988b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001988f:	83 ec 0c             	sub    esp,0xc
c0019892:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019896:	e8 48 e2 fe ff       	call   c0007ae3 <free>
c001989b:	83 c4 10             	add    esp,0x10
c001989e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198a2:	85 c0                	test   eax,eax
c00198a4:	75 0a                	jne    c00198b0 <FAT::close(void*)+0x48>
c00198a6:	b8 00 00 00 00       	mov    eax,0x0
c00198ab:	eb 0b                	jmp    c00198b8 <FAT::close(void*)+0x50>
c00198ad:	8d 76 00             	lea    esi,[esi+0x0]
c00198b0:	b8 01 00 00 00       	mov    eax,0x1
c00198b5:	8d 76 00             	lea    esi,[esi+0x0]
c00198b8:	83 c4 1c             	add    esp,0x1c
c00198bb:	c3                   	ret    

c00198bc <FAT::closeDir(void*)>:
c00198bc:	83 ec 1c             	sub    esp,0x1c
c00198bf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198c4:	75 0a                	jne    c00198d0 <FAT::closeDir(void*)+0x14>
c00198c6:	b8 04 00 00 00       	mov    eax,0x4
c00198cb:	eb 3f                	jmp    c001990c <FAT::closeDir(void*)+0x50>
c00198cd:	8d 76 00             	lea    esi,[esi+0x0]
c00198d0:	83 ec 0c             	sub    esp,0xc
c00198d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198d7:	e8 1e ae fe ff       	call   c00046fa <f_closedir>
c00198dc:	83 c4 10             	add    esp,0x10
c00198df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198e3:	83 ec 0c             	sub    esp,0xc
c00198e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198ea:	e8 f4 e1 fe ff       	call   c0007ae3 <free>
c00198ef:	83 c4 10             	add    esp,0x10
c00198f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198f6:	85 c0                	test   eax,eax
c00198f8:	75 0a                	jne    c0019904 <FAT::closeDir(void*)+0x48>
c00198fa:	b8 00 00 00 00       	mov    eax,0x0
c00198ff:	eb 0b                	jmp    c001990c <FAT::closeDir(void*)+0x50>
c0019901:	8d 76 00             	lea    esi,[esi+0x0]
c0019904:	b8 01 00 00 00       	mov    eax,0x1
c0019909:	8d 76 00             	lea    esi,[esi+0x0]
c001990c:	83 c4 1c             	add    esp,0x1c
c001990f:	c3                   	ret    

c0019910 <FAT::truncate(void*, unsigned long long)>:
c0019910:	83 ec 2c             	sub    esp,0x2c
c0019913:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019917:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001991b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001991f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019923:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019928:	75 0a                	jne    c0019934 <FAT::truncate(void*, unsigned long long)+0x24>
c001992a:	b8 04 00 00 00       	mov    eax,0x4
c001992f:	eb 47                	jmp    c0019978 <FAT::truncate(void*, unsigned long long)+0x68>
c0019931:	8d 76 00             	lea    esi,[esi+0x0]
c0019934:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019938:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001993b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001993f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019947:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001994b:	83 ec 08             	sub    esp,0x8
c001994e:	50                   	push   eax
c001994f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019953:	e8 27 ab fe ff       	call   c000447f <f_lseek>
c0019958:	83 c4 10             	add    esp,0x10
c001995b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001995f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019963:	85 c0                	test   eax,eax
c0019965:	75 09                	jne    c0019970 <FAT::truncate(void*, unsigned long long)+0x60>
c0019967:	b8 00 00 00 00       	mov    eax,0x0
c001996c:	eb 0a                	jmp    c0019978 <FAT::truncate(void*, unsigned long long)+0x68>
c001996e:	66 90                	xchg   ax,ax
c0019970:	b8 01 00 00 00       	mov    eax,0x1
c0019975:	8d 76 00             	lea    esi,[esi+0x0]
c0019978:	83 c4 2c             	add    esp,0x2c
c001997b:	c3                   	ret    

c001997c <FAT::seek(void*, unsigned long long)>:
c001997c:	83 ec 2c             	sub    esp,0x2c
c001997f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019983:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019987:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001998b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001998f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019994:	75 0a                	jne    c00199a0 <FAT::seek(void*, unsigned long long)+0x24>
c0019996:	b8 04 00 00 00       	mov    eax,0x4
c001999b:	eb 33                	jmp    c00199d0 <FAT::seek(void*, unsigned long long)+0x54>
c001999d:	8d 76 00             	lea    esi,[esi+0x0]
c00199a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199a4:	83 ec 08             	sub    esp,0x8
c00199a7:	50                   	push   eax
c00199a8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00199ac:	e8 ce aa fe ff       	call   c000447f <f_lseek>
c00199b1:	83 c4 10             	add    esp,0x10
c00199b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00199b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199bc:	85 c0                	test   eax,eax
c00199be:	75 08                	jne    c00199c8 <FAT::seek(void*, unsigned long long)+0x4c>
c00199c0:	b8 00 00 00 00       	mov    eax,0x0
c00199c5:	eb 09                	jmp    c00199d0 <FAT::seek(void*, unsigned long long)+0x54>
c00199c7:	90                   	nop
c00199c8:	b8 01 00 00 00       	mov    eax,0x1
c00199cd:	8d 76 00             	lea    esi,[esi+0x0]
c00199d0:	83 c4 2c             	add    esp,0x2c
c00199d3:	c3                   	ret    

c00199d4 <fatWrapperReadDisk>:
c00199d4:	53                   	push   ebx
c00199d5:	83 ec 18             	sub    esp,0x18
c00199d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199dc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00199e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00199e5:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c00199ec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00199f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00199f4:	ba 00 00 00 00       	mov    edx,0x0
c00199f9:	83 ec 0c             	sub    esp,0xc
c00199fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a00:	53                   	push   ebx
c0019a01:	52                   	push   edx
c0019a02:	50                   	push   eax
c0019a03:	51                   	push   ecx
c0019a04:	e8 31 43 ff ff       	call   c000dd3a <LogicalDisk::read(unsigned long long, int, void*)>
c0019a09:	83 c4 20             	add    esp,0x20
c0019a0c:	83 c4 18             	add    esp,0x18
c0019a0f:	5b                   	pop    ebx
c0019a10:	c3                   	ret    
c0019a11:	8d 76 00             	lea    esi,[esi+0x0]

c0019a14 <fatWrapperWriteDisk>:
c0019a14:	53                   	push   ebx
c0019a15:	83 ec 18             	sub    esp,0x18
c0019a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a1c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a25:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a2c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a34:	ba 00 00 00 00       	mov    edx,0x0
c0019a39:	83 ec 0c             	sub    esp,0xc
c0019a3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a40:	53                   	push   ebx
c0019a41:	52                   	push   edx
c0019a42:	50                   	push   eax
c0019a43:	51                   	push   ecx
c0019a44:	e8 5d 43 ff ff       	call   c000dda6 <LogicalDisk::write(unsigned long long, int, void*)>
c0019a49:	83 c4 20             	add    esp,0x20
c0019a4c:	83 c4 18             	add    esp,0x18
c0019a4f:	5b                   	pop    ebx
c0019a50:	c3                   	ret    
c0019a51:	8d 76 00             	lea    esi,[esi+0x0]

c0019a54 <fatWrapperIoctl>:
c0019a54:	53                   	push   ebx
c0019a55:	83 ec 28             	sub    esp,0x28
c0019a58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019a5c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019a60:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a64:	88 d0                	mov    al,dl
c0019a66:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019a6f:	83 f8 02             	cmp    eax,0x2
c0019a72:	75 34                	jne    c0019aa8 <fatWrapperIoctl+0x54>
c0019a74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a81:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019a88:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019a8e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019a94:	89 c2                	mov    edx,eax
c0019a96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a9a:	66 89 10             	mov    WORD PTR [eax],dx
c0019a9d:	b8 00 00 00 00       	mov    eax,0x0
c0019aa2:	e9 c5 00 00 00       	jmp    c0019b6c <fatWrapperIoctl+0x118>
c0019aa7:	90                   	nop
c0019aa8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019aad:	83 f8 01             	cmp    eax,0x1
c0019ab0:	75 6a                	jne    c0019b1c <fatWrapperIoctl+0xc8>
c0019ab2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ab6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019aba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019abf:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019ac6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019acc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019ad2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019ad8:	89 c8                	mov    eax,ecx
c0019ada:	89 da                	mov    edx,ebx
c0019adc:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019ae0:	c1 e0 0a             	shl    eax,0xa
c0019ae3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019ae8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019aef:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019af5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019afb:	89 cb                	mov    ebx,ecx
c0019afd:	c1 fb 1f             	sar    ebx,0x1f
c0019b00:	53                   	push   ebx
c0019b01:	51                   	push   ecx
c0019b02:	52                   	push   edx
c0019b03:	50                   	push   eax
c0019b04:	e8 b7 5b 00 00       	call   c001f6c0 <__udivdi3>
c0019b09:	83 c4 10             	add    esp,0x10
c0019b0c:	89 c2                	mov    edx,eax
c0019b0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b12:	89 10                	mov    DWORD PTR [eax],edx
c0019b14:	b8 00 00 00 00       	mov    eax,0x0
c0019b19:	eb 51                	jmp    c0019b6c <fatWrapperIoctl+0x118>
c0019b1b:	90                   	nop
c0019b1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b21:	85 c0                	test   eax,eax
c0019b23:	75 07                	jne    c0019b2c <fatWrapperIoctl+0xd8>
c0019b25:	b8 00 00 00 00       	mov    eax,0x0
c0019b2a:	eb 40                	jmp    c0019b6c <fatWrapperIoctl+0x118>
c0019b2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b31:	83 f8 03             	cmp    eax,0x3
c0019b34:	75 1a                	jne    c0019b50 <fatWrapperIoctl+0xfc>
c0019b36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b42:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019b48:	b8 00 00 00 00       	mov    eax,0x0
c0019b4d:	eb 1d                	jmp    c0019b6c <fatWrapperIoctl+0x118>
c0019b4f:	90                   	nop
c0019b50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b55:	83 f8 04             	cmp    eax,0x4
c0019b58:	75 0a                	jne    c0019b64 <fatWrapperIoctl+0x110>
c0019b5a:	b8 00 00 00 00       	mov    eax,0x0
c0019b5f:	eb 0b                	jmp    c0019b6c <fatWrapperIoctl+0x118>
c0019b61:	8d 76 00             	lea    esi,[esi+0x0]
c0019b64:	b8 04 00 00 00       	mov    eax,0x4
c0019b69:	8d 76 00             	lea    esi,[esi+0x0]
c0019b6c:	83 c4 28             	add    esp,0x28
c0019b6f:	5b                   	pop    ebx
c0019b70:	c3                   	ret    
c0019b71:	90                   	nop
c0019b72:	66 90                	xchg   ax,ax

c0019b74 <FAT::FAT()>:
c0019b74:	83 ec 1c             	sub    esp,0x1c
c0019b77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b7b:	83 ec 0c             	sub    esp,0xc
c0019b7e:	50                   	push   eax
c0019b7f:	e8 96 1b ff ff       	call   c000b71a <Filesystem::Filesystem()>
c0019b84:	83 c4 10             	add    esp,0x10
c0019b87:	ba 8c 2d 02 c0       	mov    edx,0xc0022d8c
c0019b8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b90:	89 10                	mov    DWORD PTR [eax],edx
c0019b92:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019b9c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ba4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019ba9:	7f 19                	jg     c0019bc4 <FAT::FAT()+0x50>
c0019bab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019baf:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019bba:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019bbf:	eb e3                	jmp    c0019ba4 <FAT::FAT()+0x30>
c0019bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc4:	90                   	nop
c0019bc5:	83 c4 1c             	add    esp,0x1c
c0019bc8:	c3                   	ret    
c0019bc9:	90                   	nop
c0019bca:	66 90                	xchg   ax,ax

c0019bcc <FAT::fixFilepath(char*)>:
c0019bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bd0:	8a 00                	mov    al,BYTE PTR [eax]
c0019bd2:	0f be c0             	movsx  eax,al
c0019bd5:	83 f8 40             	cmp    eax,0x40
c0019bd8:	7e 2e                	jle    c0019c08 <FAT::fixFilepath(char*)+0x3c>
c0019bda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bde:	8a 00                	mov    al,BYTE PTR [eax]
c0019be0:	83 e8 41             	sub    eax,0x41
c0019be3:	88 c2                	mov    dl,al
c0019be5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019be9:	88 10                	mov    BYTE PTR [eax],dl
c0019beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bef:	8a 00                	mov    al,BYTE PTR [eax]
c0019bf1:	0f be c0             	movsx  eax,al
c0019bf4:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019bfb:	83 c0 30             	add    eax,0x30
c0019bfe:	88 c2                	mov    dl,al
c0019c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c04:	88 10                	mov    BYTE PTR [eax],dl
c0019c06:	66 90                	xchg   ax,ax
c0019c08:	90                   	nop
c0019c09:	c3                   	ret    
c0019c0a:	66 90                	xchg   ax,ax

c0019c0c <FAT::open(char const*, void**, FileOpenMode)>:
c0019c0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c1a:	74 0c                	je     c0019c28 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019c1c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019c24:	75 0e                	jne    c0019c34 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019c26:	66 90                	xchg   ax,ax
c0019c28:	b8 04 00 00 00       	mov    eax,0x4
c0019c2d:	e9 46 01 00 00       	jmp    c0019d78 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019c32:	66 90                	xchg   ax,ax
c0019c34:	83 ec 08             	sub    esp,0x8
c0019c37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c42:	50                   	push   eax
c0019c43:	e8 08 6a fe ff       	call   c0000650 <strcpy>
c0019c48:	83 c4 10             	add    esp,0x10
c0019c4b:	83 ec 08             	sub    esp,0x8
c0019c4e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019c52:	50                   	push   eax
c0019c53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c5a:	e8 6d ff ff ff       	call   c0019bcc <FAT::fixFilepath(char*)>
c0019c5f:	83 c4 10             	add    esp,0x10
c0019c62:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019c6a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019c71:	83 e0 01             	and    eax,0x1
c0019c74:	74 12                	je     c0019c88 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019c76:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019c7d:	83 c8 01             	or     eax,0x1
c0019c80:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019c87:	90                   	nop
c0019c88:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019c8f:	83 e0 04             	and    eax,0x4
c0019c92:	74 24                	je     c0019cb8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019c94:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019c9b:	83 c8 30             	or     eax,0x30
c0019c9e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ca5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cac:	83 c8 02             	or     eax,0x2
c0019caf:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cb6:	66 90                	xchg   ax,ax
c0019cb8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019cbf:	83 e0 02             	and    eax,0x2
c0019cc2:	74 14                	je     c0019cd8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019cc4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019ccb:	83 c8 02             	or     eax,0x2
c0019cce:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019cdf:	83 e0 08             	and    eax,0x8
c0019ce2:	74 14                	je     c0019cf8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019ce4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019ceb:	83 c8 04             	or     eax,0x4
c0019cee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cf8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019cff:	83 e0 10             	and    eax,0x10
c0019d02:	74 14                	je     c0019d18 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019d04:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d0b:	83 c8 08             	or     eax,0x8
c0019d0e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d15:	8d 76 00             	lea    esi,[esi+0x0]
c0019d18:	83 ec 0c             	sub    esp,0xc
c0019d1b:	68 28 02 00 00       	push   0x228
c0019d20:	e8 ae dd fe ff       	call   c0007ad3 <malloc>
c0019d25:	83 c4 10             	add    esp,0x10
c0019d28:	89 c2                	mov    edx,eax
c0019d2a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d31:	89 10                	mov    DWORD PTR [eax],edx
c0019d33:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019d3b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d42:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d44:	83 ec 04             	sub    esp,0x4
c0019d47:	52                   	push   edx
c0019d48:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019d4c:	52                   	push   edx
c0019d4d:	50                   	push   eax
c0019d4e:	e8 4d 9f fe ff       	call   c0003ca0 <f_open>
c0019d53:	83 c4 10             	add    esp,0x10
c0019d56:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019d5d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019d65:	74 09                	je     c0019d70 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019d67:	b8 01 00 00 00       	mov    eax,0x1
c0019d6c:	eb 0a                	jmp    c0019d78 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d6e:	66 90                	xchg   ax,ax
c0019d70:	b8 00 00 00 00       	mov    eax,0x0
c0019d75:	8d 76 00             	lea    esi,[esi+0x0]
c0019d78:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d7e:	c3                   	ret    
c0019d7f:	90                   	nop

c0019d80 <FAT::openDir(char const*, void**)>:
c0019d80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d86:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d8e:	74 0c                	je     c0019d9c <FAT::openDir(char const*, void**)+0x1c>
c0019d90:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d98:	75 0e                	jne    c0019da8 <FAT::openDir(char const*, void**)+0x28>
c0019d9a:	66 90                	xchg   ax,ax
c0019d9c:	b8 04 00 00 00       	mov    eax,0x4
c0019da1:	e9 82 00 00 00       	jmp    c0019e28 <FAT::openDir(char const*, void**)+0xa8>
c0019da6:	66 90                	xchg   ax,ax
c0019da8:	83 ec 08             	sub    esp,0x8
c0019dab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019db2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019db6:	50                   	push   eax
c0019db7:	e8 94 68 fe ff       	call   c0000650 <strcpy>
c0019dbc:	83 c4 10             	add    esp,0x10
c0019dbf:	83 ec 08             	sub    esp,0x8
c0019dc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dc6:	50                   	push   eax
c0019dc7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dce:	e8 f9 fd ff ff       	call   c0019bcc <FAT::fixFilepath(char*)>
c0019dd3:	83 c4 10             	add    esp,0x10
c0019dd6:	83 ec 0c             	sub    esp,0xc
c0019dd9:	6a 30                	push   0x30
c0019ddb:	e8 f3 dc fe ff       	call   c0007ad3 <malloc>
c0019de0:	83 c4 10             	add    esp,0x10
c0019de3:	89 c2                	mov    edx,eax
c0019de5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019dec:	89 10                	mov    DWORD PTR [eax],edx
c0019dee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019df5:	8b 00                	mov    eax,DWORD PTR [eax]
c0019df7:	83 ec 08             	sub    esp,0x8
c0019dfa:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019dfe:	52                   	push   edx
c0019dff:	50                   	push   eax
c0019e00:	e8 2a a8 fe ff       	call   c000462f <f_opendir>
c0019e05:	83 c4 10             	add    esp,0x10
c0019e08:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e0f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019e17:	74 07                	je     c0019e20 <FAT::openDir(char const*, void**)+0xa0>
c0019e19:	b8 01 00 00 00       	mov    eax,0x1
c0019e1e:	eb 08                	jmp    c0019e28 <FAT::openDir(char const*, void**)+0xa8>
c0019e20:	b8 00 00 00 00       	mov    eax,0x0
c0019e25:	8d 76 00             	lea    esi,[esi+0x0]
c0019e28:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e2e:	c3                   	ret    
c0019e2f:	90                   	nop

c0019e30 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019e30:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e36:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019e3e:	75 0c                	jne    c0019e4c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019e40:	b8 04 00 00 00       	mov    eax,0x4
c0019e45:	e9 d6 00 00 00       	jmp    c0019f20 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e4a:	66 90                	xchg   ax,ax
c0019e4c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019e54:	75 0a                	jne    c0019e60 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019e56:	b8 04 00 00 00       	mov    eax,0x4
c0019e5b:	e9 c0 00 00 00       	jmp    c0019f20 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e60:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019e68:	75 0a                	jne    c0019e74 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019e6a:	b8 04 00 00 00       	mov    eax,0x4
c0019e6f:	e9 ac 00 00 00       	jmp    c0019f20 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e74:	83 ec 08             	sub    esp,0x8
c0019e77:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e7e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019e85:	50                   	push   eax
c0019e86:	e8 c5 67 fe ff       	call   c0000650 <strcpy>
c0019e8b:	83 c4 10             	add    esp,0x10
c0019e8e:	83 ec 08             	sub    esp,0x8
c0019e91:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019e98:	50                   	push   eax
c0019e99:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ea0:	e8 27 fd ff ff       	call   c0019bcc <FAT::fixFilepath(char*)>
c0019ea5:	83 c4 10             	add    esp,0x10
c0019ea8:	83 ec 08             	sub    esp,0x8
c0019eab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019eaf:	50                   	push   eax
c0019eb0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019eb7:	50                   	push   eax
c0019eb8:	e8 f1 a8 fe ff       	call   c00047ae <f_stat>
c0019ebd:	83 c4 10             	add    esp,0x10
c0019ec0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019ec7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019ece:	85 c0                	test   eax,eax
c0019ed0:	74 0a                	je     c0019edc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019ed2:	83 f8 04             	cmp    eax,0x4
c0019ed5:	74 39                	je     c0019f10 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019ed7:	eb 3f                	jmp    c0019f18 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0019edc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019ee0:	0f b6 c0             	movzx  eax,al
c0019ee3:	83 e0 10             	and    eax,0x10
c0019ee6:	0f 95 c2             	setne  dl
c0019ee9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019ef0:	88 10                	mov    BYTE PTR [eax],dl
c0019ef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ef6:	ba 00 00 00 00       	mov    edx,0x0
c0019efb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019f02:	89 01                	mov    DWORD PTR [ecx],eax
c0019f04:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f07:	b8 00 00 00 00       	mov    eax,0x0
c0019f0c:	eb 12                	jmp    c0019f20 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f0e:	66 90                	xchg   ax,ax
c0019f10:	b8 02 00 00 00       	mov    eax,0x2
c0019f15:	eb 09                	jmp    c0019f20 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f17:	90                   	nop
c0019f18:	b8 01 00 00 00       	mov    eax,0x1
c0019f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f20:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f26:	c3                   	ret    
c0019f27:	90                   	nop

c0019f28 <FAT::unlink(char const*)>:
c0019f28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f36:	75 08                	jne    c0019f40 <FAT::unlink(char const*)+0x18>
c0019f38:	b8 04 00 00 00       	mov    eax,0x4
c0019f3d:	eb 61                	jmp    c0019fa0 <FAT::unlink(char const*)+0x78>
c0019f3f:	90                   	nop
c0019f40:	83 ec 08             	sub    esp,0x8
c0019f43:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f4a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f4e:	50                   	push   eax
c0019f4f:	e8 fc 66 fe ff       	call   c0000650 <strcpy>
c0019f54:	83 c4 10             	add    esp,0x10
c0019f57:	83 ec 08             	sub    esp,0x8
c0019f5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f5e:	50                   	push   eax
c0019f5f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f66:	e8 61 fc ff ff       	call   c0019bcc <FAT::fixFilepath(char*)>
c0019f6b:	83 c4 10             	add    esp,0x10
c0019f6e:	83 ec 0c             	sub    esp,0xc
c0019f71:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f75:	50                   	push   eax
c0019f76:	e8 a5 aa fe ff       	call   c0004a20 <f_unlink>
c0019f7b:	83 c4 10             	add    esp,0x10
c0019f7e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f85:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019f8c:	85 c0                	test   eax,eax
c0019f8e:	75 08                	jne    c0019f98 <FAT::unlink(char const*)+0x70>
c0019f90:	b8 00 00 00 00       	mov    eax,0x0
c0019f95:	eb 09                	jmp    c0019fa0 <FAT::unlink(char const*)+0x78>
c0019f97:	90                   	nop
c0019f98:	b8 01 00 00 00       	mov    eax,0x1
c0019f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019fa0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019fa6:	c3                   	ret    
c0019fa7:	90                   	nop

c0019fa8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019fa8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019fae:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019fb5:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019fbc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019fc0:	88 d0                	mov    al,dl
c0019fc2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019fc6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019fce:	75 0c                	jne    c0019fdc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019fd0:	b8 04 00 00 00       	mov    eax,0x4
c0019fd5:	e9 7e 01 00 00       	jmp    c001a158 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019fda:	66 90                	xchg   ax,ax
c0019fdc:	83 ec 08             	sub    esp,0x8
c0019fdf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019fe6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019fea:	50                   	push   eax
c0019feb:	e8 60 66 fe ff       	call   c0000650 <strcpy>
c0019ff0:	83 c4 10             	add    esp,0x10
c0019ff3:	83 ec 08             	sub    esp,0x8
c0019ff6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019ffa:	50                   	push   eax
c0019ffb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a002:	e8 c5 fb ff ff       	call   c0019bcc <FAT::fixFilepath(char*)>
c001a007:	83 c4 10             	add    esp,0x10
c001a00a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a012:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a01a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a01f:	83 e0 01             	and    eax,0x1
c001a022:	74 14                	je     c001a038 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a024:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a02b:	83 c8 01             	or     eax,0x1
c001a02e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a035:	8d 76 00             	lea    esi,[esi+0x0]
c001a038:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a03d:	83 e0 02             	and    eax,0x2
c001a040:	74 12                	je     c001a054 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a042:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a049:	83 c8 20             	or     eax,0x20
c001a04c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a053:	90                   	nop
c001a054:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a059:	83 e0 04             	and    eax,0x4
c001a05c:	74 12                	je     c001a070 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a05e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a065:	83 c8 04             	or     eax,0x4
c001a068:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a06f:	90                   	nop
c001a070:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a075:	83 e0 08             	and    eax,0x8
c001a078:	74 12                	je     c001a08c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a07a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a081:	83 c8 02             	or     eax,0x2
c001a084:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a08b:	90                   	nop
c001a08c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a091:	83 e0 01             	and    eax,0x1
c001a094:	74 12                	je     c001a0a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a096:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a09d:	83 c8 01             	or     eax,0x1
c001a0a0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0a7:	90                   	nop
c001a0a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0ad:	83 e0 02             	and    eax,0x2
c001a0b0:	74 12                	je     c001a0c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a0b2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0b9:	83 c8 20             	or     eax,0x20
c001a0bc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0c3:	90                   	nop
c001a0c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0c9:	83 e0 04             	and    eax,0x4
c001a0cc:	74 12                	je     c001a0e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a0ce:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0d5:	83 c8 04             	or     eax,0x4
c001a0d8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0df:	90                   	nop
c001a0e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0e5:	83 e0 08             	and    eax,0x8
c001a0e8:	74 12                	je     c001a0fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a0ea:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0f1:	83 c8 02             	or     eax,0x2
c001a0f4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0fb:	90                   	nop
c001a0fc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a103:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a10a:	09 d0                	or     eax,edx
c001a10c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a113:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a11b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a123:	83 ec 04             	sub    esp,0x4
c001a126:	52                   	push   edx
c001a127:	50                   	push   eax
c001a128:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a12c:	50                   	push   eax
c001a12d:	e8 61 ad fe ff       	call   c0004e93 <f_chmod>
c001a132:	83 c4 10             	add    esp,0x10
c001a135:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a13c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a143:	85 c0                	test   eax,eax
c001a145:	75 09                	jne    c001a150 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a147:	b8 00 00 00 00       	mov    eax,0x0
c001a14c:	eb 0a                	jmp    c001a158 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a14e:	66 90                	xchg   ax,ax
c001a150:	b8 01 00 00 00       	mov    eax,0x1
c001a155:	8d 76 00             	lea    esi,[esi+0x0]
c001a158:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a15e:	c3                   	ret    
c001a15f:	90                   	nop

c001a160 <FAT::rename(char const*, char const*)>:
c001a160:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a166:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a16e:	74 0c                	je     c001a17c <FAT::rename(char const*, char const*)+0x1c>
c001a170:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a178:	75 0e                	jne    c001a188 <FAT::rename(char const*, char const*)+0x28>
c001a17a:	66 90                	xchg   ax,ax
c001a17c:	b8 04 00 00 00       	mov    eax,0x4
c001a181:	e9 9e 00 00 00       	jmp    c001a224 <FAT::rename(char const*, char const*)+0xc4>
c001a186:	66 90                	xchg   ax,ax
c001a188:	83 ec 08             	sub    esp,0x8
c001a18b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a192:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a199:	50                   	push   eax
c001a19a:	e8 b1 64 fe ff       	call   c0000650 <strcpy>
c001a19f:	83 c4 10             	add    esp,0x10
c001a1a2:	83 ec 08             	sub    esp,0x8
c001a1a5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a1ac:	50                   	push   eax
c001a1ad:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1b4:	e8 13 fa ff ff       	call   c0019bcc <FAT::fixFilepath(char*)>
c001a1b9:	83 c4 10             	add    esp,0x10
c001a1bc:	83 ec 08             	sub    esp,0x8
c001a1bf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a1c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a1ca:	50                   	push   eax
c001a1cb:	e8 80 64 fe ff       	call   c0000650 <strcpy>
c001a1d0:	83 c4 10             	add    esp,0x10
c001a1d3:	83 ec 08             	sub    esp,0x8
c001a1d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1da:	50                   	push   eax
c001a1db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1e2:	e8 e5 f9 ff ff       	call   c0019bcc <FAT::fixFilepath(char*)>
c001a1e7:	83 c4 10             	add    esp,0x10
c001a1ea:	83 ec 08             	sub    esp,0x8
c001a1ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1f1:	50                   	push   eax
c001a1f2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a1f9:	50                   	push   eax
c001a1fa:	e8 dc aa fe ff       	call   c0004cdb <f_rename>
c001a1ff:	83 c4 10             	add    esp,0x10
c001a202:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a209:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a210:	85 c0                	test   eax,eax
c001a212:	75 08                	jne    c001a21c <FAT::rename(char const*, char const*)+0xbc>
c001a214:	b8 00 00 00 00       	mov    eax,0x0
c001a219:	eb 09                	jmp    c001a224 <FAT::rename(char const*, char const*)+0xc4>
c001a21b:	90                   	nop
c001a21c:	b8 01 00 00 00       	mov    eax,0x1
c001a221:	8d 76 00             	lea    esi,[esi+0x0]
c001a224:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a22a:	c3                   	ret    
c001a22b:	90                   	nop

c001a22c <FAT::mkdir(char const*)>:
c001a22c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a232:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a23a:	75 08                	jne    c001a244 <FAT::mkdir(char const*)+0x18>
c001a23c:	b8 04 00 00 00       	mov    eax,0x4
c001a241:	eb 61                	jmp    c001a2a4 <FAT::mkdir(char const*)+0x78>
c001a243:	90                   	nop
c001a244:	83 ec 08             	sub    esp,0x8
c001a247:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a24e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a252:	50                   	push   eax
c001a253:	e8 f8 63 fe ff       	call   c0000650 <strcpy>
c001a258:	83 c4 10             	add    esp,0x10
c001a25b:	83 ec 08             	sub    esp,0x8
c001a25e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a262:	50                   	push   eax
c001a263:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a26a:	e8 5d f9 ff ff       	call   c0019bcc <FAT::fixFilepath(char*)>
c001a26f:	83 c4 10             	add    esp,0x10
c001a272:	83 ec 0c             	sub    esp,0xc
c001a275:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a279:	50                   	push   eax
c001a27a:	e8 c1 a8 fe ff       	call   c0004b40 <f_mkdir>
c001a27f:	83 c4 10             	add    esp,0x10
c001a282:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a289:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a290:	85 c0                	test   eax,eax
c001a292:	75 08                	jne    c001a29c <FAT::mkdir(char const*)+0x70>
c001a294:	b8 00 00 00 00       	mov    eax,0x0
c001a299:	eb 09                	jmp    c001a2a4 <FAT::mkdir(char const*)+0x78>
c001a29b:	90                   	nop
c001a29c:	b8 01 00 00 00       	mov    eax,0x1
c001a2a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a2aa:	c3                   	ret    
c001a2ab:	90                   	nop

c001a2ac <FAT::exists(char const*)>:
c001a2ac:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a2b2:	83 ec 08             	sub    esp,0x8
c001a2b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a2bc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a2c0:	50                   	push   eax
c001a2c1:	e8 8a 63 fe ff       	call   c0000650 <strcpy>
c001a2c6:	83 c4 10             	add    esp,0x10
c001a2c9:	83 ec 08             	sub    esp,0x8
c001a2cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a2d0:	50                   	push   eax
c001a2d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a2d8:	e8 ef f8 ff ff       	call   c0019bcc <FAT::fixFilepath(char*)>
c001a2dd:	83 c4 10             	add    esp,0x10
c001a2e0:	83 ec 08             	sub    esp,0x8
c001a2e3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a2ea:	50                   	push   eax
c001a2eb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a2ef:	50                   	push   eax
c001a2f0:	e8 b9 a4 fe ff       	call   c00047ae <f_stat>
c001a2f5:	83 c4 10             	add    esp,0x10
c001a2f8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a2ff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a306:	85 c0                	test   eax,eax
c001a308:	75 06                	jne    c001a310 <FAT::exists(char const*)+0x64>
c001a30a:	b0 01                	mov    al,0x1
c001a30c:	eb 06                	jmp    c001a314 <FAT::exists(char const*)+0x68>
c001a30e:	66 90                	xchg   ax,ax
c001a310:	b0 00                	mov    al,0x0
c001a312:	66 90                	xchg   ax,ax
c001a314:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a31a:	c3                   	ret    
c001a31b:	90                   	nop

c001a31c <isoReadDiscSectorHelper>:
c001a31c:	83 ec 2c             	sub    esp,0x2c
c001a31f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a323:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a327:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a32c:	83 e8 41             	sub    eax,0x41
c001a32f:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a336:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a33a:	ba 00 00 00 00       	mov    edx,0x0
c001a33f:	83 ec 0c             	sub    esp,0xc
c001a342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a346:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a34a:	52                   	push   edx
c001a34b:	50                   	push   eax
c001a34c:	51                   	push   ecx
c001a34d:	e8 e8 39 ff ff       	call   c000dd3a <LogicalDisk::read(unsigned long long, int, void*)>
c001a352:	83 c4 20             	add    esp,0x20
c001a355:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a359:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a35e:	74 0c                	je     c001a36c <isoReadDiscSectorHelper+0x50>
c001a360:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a364:	c1 e0 0b             	shl    eax,0xb
c001a367:	eb 0b                	jmp    c001a374 <isoReadDiscSectorHelper+0x58>
c001a369:	8d 76 00             	lea    esi,[esi+0x0]
c001a36c:	b8 00 00 00 00       	mov    eax,0x0
c001a371:	8d 76 00             	lea    esi,[esi+0x0]
c001a374:	83 c4 2c             	add    esp,0x2c
c001a377:	c3                   	ret    

c001a378 <iso_kprintf>:
c001a378:	83 ec 0c             	sub    esp,0xc
c001a37b:	83 ec 08             	sub    esp,0x8
c001a37e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a382:	68 3a 2b 02 c0       	push   0xc0022b3a
c001a387:	e8 7e 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a38c:	83 c4 10             	add    esp,0x10
c001a38f:	90                   	nop
c001a390:	83 c4 0c             	add    esp,0xc
c001a393:	c3                   	ret    

c001a394 <iso_kprintfd>:
c001a394:	83 ec 0c             	sub    esp,0xc
c001a397:	83 ec 08             	sub    esp,0x8
c001a39a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a39e:	68 9a 12 02 c0       	push   0xc002129a
c001a3a3:	e8 62 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a3a8:	83 c4 10             	add    esp,0x10
c001a3ab:	90                   	nop
c001a3ac:	83 c4 0c             	add    esp,0xc
c001a3af:	c3                   	ret    

c001a3b0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a3b0:	b8 08 00 00 00       	mov    eax,0x8
c001a3b5:	c3                   	ret    

c001a3b6 <ISO9660::truncate(void*, unsigned long long)>:
c001a3b6:	b8 01 00 00 00       	mov    eax,0x1
c001a3bb:	c3                   	ret    

c001a3bc <ISO9660::getName()>:
c001a3bc:	b8 f0 2d 02 c0       	mov    eax,0xc0022df0
c001a3c1:	c3                   	ret    

c001a3c2 <ISO9660::closeDir(void*)>:
c001a3c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3c8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a3cb:	90                   	nop

c001a3cc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a3cc:	b8 01 00 00 00       	mov    eax,0x1
c001a3d1:	c3                   	ret    

c001a3d2 <ISO9660::unlink(char const*)>:
c001a3d2:	b8 01 00 00 00       	mov    eax,0x1
c001a3d7:	c3                   	ret    

c001a3d8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a3d8:	b8 03 00 00 00       	mov    eax,0x3
c001a3dd:	c3                   	ret    

c001a3de <ISO9660::rename(char const*, char const*)>:
c001a3de:	b8 01 00 00 00       	mov    eax,0x1
c001a3e3:	c3                   	ret    

c001a3e4 <ISO9660::mkdir(char const*)>:
c001a3e4:	b8 01 00 00 00       	mov    eax,0x1
c001a3e9:	c3                   	ret    

c001a3ea <ISO9660::~ISO9660()>:
c001a3ea:	83 ec 0c             	sub    esp,0xc
c001a3ed:	ba 30 2f 02 c0       	mov    edx,0xc0022f30
c001a3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3f6:	89 10                	mov    DWORD PTR [eax],edx
c001a3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3fc:	83 ec 0c             	sub    esp,0xc
c001a3ff:	50                   	push   eax
c001a400:	e8 39 13 ff ff       	call   c000b73e <Filesystem::~Filesystem()>
c001a405:	83 c4 10             	add    esp,0x10
c001a408:	90                   	nop
c001a409:	83 c4 0c             	add    esp,0xc
c001a40c:	c3                   	ret    
c001a40d:	90                   	nop

c001a40e <ISO9660::~ISO9660()>:
c001a40e:	83 ec 0c             	sub    esp,0xc
c001a411:	83 ec 0c             	sub    esp,0xc
c001a414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a418:	e8 cd ff ff ff       	call   c001a3ea <ISO9660::~ISO9660()>
c001a41d:	83 c4 10             	add    esp,0x10
c001a420:	83 ec 08             	sub    esp,0x8
c001a423:	6a 08                	push   0x8
c001a425:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a429:	e8 de 03 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a42e:	83 c4 10             	add    esp,0x10
c001a431:	83 c4 0c             	add    esp,0xc
c001a434:	c3                   	ret    
c001a435:	90                   	nop

c001a436 <ISO9660::exists(char const*)>:
c001a436:	83 ec 18             	sub    esp,0x18
c001a439:	68 0b 2e 02 c0       	push   0xc0022e0b
c001a43e:	e8 d4 70 ff ff       	call   c0011517 <KePanic(char const*)>
c001a443:	31 c0                	xor    eax,eax
c001a445:	83 c4 1c             	add    esp,0x1c
c001a448:	c3                   	ret    
c001a449:	90                   	nop

c001a44a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a44a:	56                   	push   esi
c001a44b:	53                   	push   ebx
c001a44c:	53                   	push   ebx
c001a44d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a451:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a455:	85 db                	test   ebx,ebx
c001a457:	0f 84 ca 00 00 00    	je     c001a527 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a45d:	85 f6                	test   esi,esi
c001a45f:	0f 84 c2 00 00 00    	je     c001a527 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a465:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a46a:	b8 03 00 00 00       	mov    eax,0x3
c001a46f:	0f 85 b7 00 00 00    	jne    c001a52c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a475:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a477:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a47d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a484:	74 1b                	je     c001a4a1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a486:	85 c0                	test   eax,eax
c001a488:	74 10                	je     c001a49a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a48a:	83 ec 0c             	sub    esp,0xc
c001a48d:	68 29 2e 02 c0       	push   0xc0022e29
c001a492:	e8 80 70 ff ff       	call   c0011517 <KePanic(char const*)>
c001a497:	83 c4 10             	add    esp,0x10
c001a49a:	8a 03                	mov    al,BYTE PTR [ebx]
c001a49c:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a4a1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a4a4:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a4ab:	85 c0                	test   eax,eax
c001a4ad:	74 09                	je     c001a4b8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a4af:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a4b6:	74 48                	je     c001a500 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a4b8:	83 ec 0c             	sub    esp,0xc
c001a4bb:	68 39 2e 02 c0       	push   0xc0022e39
c001a4c0:	e8 45 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a4c5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a4c8:	83 c4 10             	add    esp,0x10
c001a4cb:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a4d2:	85 c0                	test   eax,eax
c001a4d4:	74 17                	je     c001a4ed <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a4d6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a4dd:	83 ec 0c             	sub    esp,0xc
c001a4e0:	68 59 2e 02 c0       	push   0xc0022e59
c001a4e5:	e8 20 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a4ea:	83 c4 10             	add    esp,0x10
c001a4ed:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a4f4:	83 ec 0c             	sub    esp,0xc
c001a4f7:	50                   	push   eax
c001a4f8:	e8 6a c5 fe ff       	call   c0006a67 <init_percd>
c001a4fd:	83 c4 10             	add    esp,0x10
c001a500:	51                   	push   ecx
c001a501:	83 c3 03             	add    ebx,0x3
c001a504:	51                   	push   ecx
c001a505:	6a 00                	push   0x0
c001a507:	53                   	push   ebx
c001a508:	e8 1d c0 fe ff       	call   c000652a <iso_open>
c001a50d:	83 c4 10             	add    esp,0x10
c001a510:	89 c2                	mov    edx,eax
c001a512:	b8 01 00 00 00       	mov    eax,0x1
c001a517:	83 fa ff             	cmp    edx,0xffffffff
c001a51a:	74 10                	je     c001a52c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a51c:	83 c2 32             	add    edx,0x32
c001a51f:	31 c0                	xor    eax,eax
c001a521:	01 d2                	add    edx,edx
c001a523:	89 16                	mov    DWORD PTR [esi],edx
c001a525:	eb 05                	jmp    c001a52c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a527:	b8 04 00 00 00       	mov    eax,0x4
c001a52c:	5a                   	pop    edx
c001a52d:	5b                   	pop    ebx
c001a52e:	5e                   	pop    esi
c001a52f:	c3                   	ret    

c001a530 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a530:	53                   	push   ebx
c001a531:	83 ec 08             	sub    esp,0x8
c001a534:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a538:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a53c:	85 c0                	test   eax,eax
c001a53e:	74 2d                	je     c001a56d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a540:	85 db                	test   ebx,ebx
c001a542:	74 29                	je     c001a56d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a544:	52                   	push   edx
c001a545:	b9 02 00 00 00       	mov    ecx,0x2
c001a54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a54e:	99                   	cdq    
c001a54f:	f7 f9                	idiv   ecx
c001a551:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a555:	83 e8 32             	sub    eax,0x32
c001a558:	50                   	push   eax
c001a559:	e8 74 c0 fe ff       	call   c00065d2 <iso_read>
c001a55e:	83 c4 10             	add    esp,0x10
c001a561:	89 03                	mov    DWORD PTR [ebx],eax
c001a563:	09 d0                	or     eax,edx
c001a565:	0f 94 c0             	sete   al
c001a568:	0f b6 c0             	movzx  eax,al
c001a56b:	eb 05                	jmp    c001a572 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a56d:	b8 04 00 00 00       	mov    eax,0x4
c001a572:	83 c4 08             	add    esp,0x8
c001a575:	5b                   	pop    ebx
c001a576:	c3                   	ret    
c001a577:	90                   	nop

c001a578 <ISO9660::seek(void*, unsigned long long)>:
c001a578:	57                   	push   edi
c001a579:	b8 04 00 00 00       	mov    eax,0x4
c001a57e:	56                   	push   esi
c001a57f:	51                   	push   ecx
c001a580:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a584:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a588:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a58c:	85 d2                	test   edx,edx
c001a58e:	74 26                	je     c001a5b6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a590:	89 d0                	mov    eax,edx
c001a592:	b9 02 00 00 00       	mov    ecx,0x2
c001a597:	6a 00                	push   0x0
c001a599:	99                   	cdq    
c001a59a:	f7 f9                	idiv   ecx
c001a59c:	57                   	push   edi
c001a59d:	56                   	push   esi
c001a59e:	83 e8 32             	sub    eax,0x32
c001a5a1:	50                   	push   eax
c001a5a2:	e8 41 c1 fe ff       	call   c00066e8 <iso_seek>
c001a5a7:	83 c4 10             	add    esp,0x10
c001a5aa:	31 f0                	xor    eax,esi
c001a5ac:	31 fa                	xor    edx,edi
c001a5ae:	09 d0                	or     eax,edx
c001a5b0:	0f 95 c0             	setne  al
c001a5b3:	0f b6 c0             	movzx  eax,al
c001a5b6:	5a                   	pop    edx
c001a5b7:	5e                   	pop    esi
c001a5b8:	5f                   	pop    edi
c001a5b9:	c3                   	ret    

c001a5ba <ISO9660::tell(void*, unsigned long long*)>:
c001a5ba:	53                   	push   ebx
c001a5bb:	83 ec 08             	sub    esp,0x8
c001a5be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5c6:	85 c0                	test   eax,eax
c001a5c8:	74 24                	je     c001a5ee <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a5ca:	85 db                	test   ebx,ebx
c001a5cc:	74 20                	je     c001a5ee <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a5ce:	b9 02 00 00 00       	mov    ecx,0x2
c001a5d3:	99                   	cdq    
c001a5d4:	f7 f9                	idiv   ecx
c001a5d6:	83 ec 0c             	sub    esp,0xc
c001a5d9:	83 e8 32             	sub    eax,0x32
c001a5dc:	50                   	push   eax
c001a5dd:	e8 8a c1 fe ff       	call   c000676c <iso_tell>
c001a5e2:	83 c4 10             	add    esp,0x10
c001a5e5:	89 03                	mov    DWORD PTR [ebx],eax
c001a5e7:	31 c0                	xor    eax,eax
c001a5e9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a5ec:	eb 05                	jmp    c001a5f3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a5ee:	b8 04 00 00 00       	mov    eax,0x4
c001a5f3:	83 c4 08             	add    esp,0x8
c001a5f6:	5b                   	pop    ebx
c001a5f7:	c3                   	ret    

c001a5f8 <ISO9660::stat(void*, unsigned long long*)>:
c001a5f8:	56                   	push   esi
c001a5f9:	53                   	push   ebx
c001a5fa:	83 ec 10             	sub    esp,0x10
c001a5fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a601:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a605:	68 7d 2e 02 c0       	push   0xc0022e7d
c001a60a:	e8 fb 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a60f:	83 c4 10             	add    esp,0x10
c001a612:	85 db                	test   ebx,ebx
c001a614:	74 2a                	je     c001a640 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a616:	85 f6                	test   esi,esi
c001a618:	74 26                	je     c001a640 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a61a:	89 d8                	mov    eax,ebx
c001a61c:	b9 02 00 00 00       	mov    ecx,0x2
c001a621:	99                   	cdq    
c001a622:	83 ec 0c             	sub    esp,0xc
c001a625:	f7 f9                	idiv   ecx
c001a627:	83 e8 32             	sub    eax,0x32
c001a62a:	50                   	push   eax
c001a62b:	e8 6d c1 fe ff       	call   c000679d <iso_total>
c001a630:	83 c4 10             	add    esp,0x10
c001a633:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a63a:	89 06                	mov    DWORD PTR [esi],eax
c001a63c:	31 c0                	xor    eax,eax
c001a63e:	eb 05                	jmp    c001a645 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a640:	b8 04 00 00 00       	mov    eax,0x4
c001a645:	5a                   	pop    edx
c001a646:	5b                   	pop    ebx
c001a647:	5e                   	pop    esi
c001a648:	c3                   	ret    
c001a649:	90                   	nop

c001a64a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a64a:	55                   	push   ebp
c001a64b:	57                   	push   edi
c001a64c:	56                   	push   esi
c001a64d:	53                   	push   ebx
c001a64e:	83 ec 18             	sub    esp,0x18
c001a651:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a655:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a659:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a65d:	68 85 2e 02 c0       	push   0xc0022e85
c001a662:	e8 a3 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a667:	83 c4 10             	add    esp,0x10
c001a66a:	85 ff                	test   edi,edi
c001a66c:	0f 94 c0             	sete   al
c001a66f:	85 f6                	test   esi,esi
c001a671:	0f 94 c2             	sete   dl
c001a674:	09 d0                	or     eax,edx
c001a676:	a8 01                	test   al,0x1
c001a678:	0f 85 dd 00 00 00    	jne    c001a75b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a67e:	85 db                	test   ebx,ebx
c001a680:	0f 84 d5 00 00 00    	je     c001a75b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a686:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a689:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a68f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a696:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a69d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a69f:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a6a5:	74 1b                	je     c001a6c2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a6a7:	85 c0                	test   eax,eax
c001a6a9:	74 10                	je     c001a6bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a6ab:	83 ec 0c             	sub    esp,0xc
c001a6ae:	68 29 2e 02 c0       	push   0xc0022e29
c001a6b3:	e8 5f 6e ff ff       	call   c0011517 <KePanic(char const*)>
c001a6b8:	83 c4 10             	add    esp,0x10
c001a6bb:	8a 03                	mov    al,BYTE PTR [ebx]
c001a6bd:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a6c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a6c5:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a6cc:	85 c0                	test   eax,eax
c001a6ce:	74 09                	je     c001a6d9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a6d0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a6d7:	74 51                	je     c001a72a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a6d9:	83 ec 0c             	sub    esp,0xc
c001a6dc:	68 8d 2e 02 c0       	push   0xc0022e8d
c001a6e1:	e8 24 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a6e6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a6e9:	83 c4 10             	add    esp,0x10
c001a6ec:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a6f4:	74 21                	je     c001a717 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a6f6:	83 ec 0c             	sub    esp,0xc
c001a6f9:	68 ad 2e 02 c0       	push   0xc0022ead
c001a6fe:	e8 07 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a703:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a706:	83 c4 10             	add    esp,0x10
c001a709:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a710:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a717:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a71e:	83 ec 0c             	sub    esp,0xc
c001a721:	50                   	push   eax
c001a722:	e8 40 c3 fe ff       	call   c0006a67 <init_percd>
c001a727:	83 c4 10             	add    esp,0x10
c001a72a:	52                   	push   edx
c001a72b:	83 c3 03             	add    ebx,0x3
c001a72e:	52                   	push   edx
c001a72f:	6a 00                	push   0x0
c001a731:	53                   	push   ebx
c001a732:	e8 f3 bd fe ff       	call   c000652a <iso_open>
c001a737:	83 c4 10             	add    esp,0x10
c001a73a:	83 f8 ff             	cmp    eax,0xffffffff
c001a73d:	89 c5                	mov    ebp,eax
c001a73f:	75 21                	jne    c001a762 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a741:	50                   	push   eax
c001a742:	50                   	push   eax
c001a743:	6a 01                	push   0x1
c001a745:	53                   	push   ebx
c001a746:	e8 df bd fe ff       	call   c000652a <iso_open>
c001a74b:	83 c4 10             	add    esp,0x10
c001a74e:	ba 02 00 00 00       	mov    edx,0x2
c001a753:	40                   	inc    eax
c001a754:	74 2b                	je     c001a781 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a756:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a759:	eb 24                	jmp    c001a77f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a75b:	ba 04 00 00 00       	mov    edx,0x4
c001a760:	eb 1f                	jmp    c001a781 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a762:	83 ec 0c             	sub    esp,0xc
c001a765:	50                   	push   eax
c001a766:	e8 32 c0 fe ff       	call   c000679d <iso_total>
c001a76b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a772:	89 07                	mov    DWORD PTR [edi],eax
c001a774:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a777:	e8 38 be fe ff       	call   c00065b4 <iso_close>
c001a77c:	83 c4 10             	add    esp,0x10
c001a77f:	31 d2                	xor    edx,edx
c001a781:	83 c4 0c             	add    esp,0xc
c001a784:	89 d0                	mov    eax,edx
c001a786:	5b                   	pop    ebx
c001a787:	5e                   	pop    esi
c001a788:	5f                   	pop    edi
c001a789:	5d                   	pop    ebp
c001a78a:	c3                   	ret    
c001a78b:	90                   	nop

c001a78c <ISO9660::close(void*)>:
c001a78c:	83 ec 0c             	sub    esp,0xc
c001a78f:	b8 04 00 00 00       	mov    eax,0x4
c001a794:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a798:	85 d2                	test   edx,edx
c001a79a:	74 1b                	je     c001a7b7 <ISO9660::close(void*)+0x2b>
c001a79c:	89 d0                	mov    eax,edx
c001a79e:	b9 02 00 00 00       	mov    ecx,0x2
c001a7a3:	99                   	cdq    
c001a7a4:	83 ec 0c             	sub    esp,0xc
c001a7a7:	f7 f9                	idiv   ecx
c001a7a9:	83 e8 32             	sub    eax,0x32
c001a7ac:	50                   	push   eax
c001a7ad:	e8 02 be fe ff       	call   c00065b4 <iso_close>
c001a7b2:	83 c4 10             	add    esp,0x10
c001a7b5:	31 c0                	xor    eax,eax
c001a7b7:	83 c4 0c             	add    esp,0xc
c001a7ba:	c3                   	ret    
c001a7bb:	90                   	nop

c001a7bc <ISO9660::openDir(char const*, void**)>:
c001a7bc:	56                   	push   esi
c001a7bd:	53                   	push   ebx
c001a7be:	50                   	push   eax
c001a7bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a7c3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a7c7:	85 db                	test   ebx,ebx
c001a7c9:	0f 84 bd 00 00 00    	je     c001a88c <ISO9660::openDir(char const*, void**)+0xd0>
c001a7cf:	85 f6                	test   esi,esi
c001a7d1:	0f 84 b5 00 00 00    	je     c001a88c <ISO9660::openDir(char const*, void**)+0xd0>
c001a7d7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a7d9:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a7df:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7e6:	74 1b                	je     c001a803 <ISO9660::openDir(char const*, void**)+0x47>
c001a7e8:	85 c0                	test   eax,eax
c001a7ea:	74 10                	je     c001a7fc <ISO9660::openDir(char const*, void**)+0x40>
c001a7ec:	83 ec 0c             	sub    esp,0xc
c001a7ef:	68 29 2e 02 c0       	push   0xc0022e29
c001a7f4:	e8 1e 6d ff ff       	call   c0011517 <KePanic(char const*)>
c001a7f9:	83 c4 10             	add    esp,0x10
c001a7fc:	8a 03                	mov    al,BYTE PTR [ebx]
c001a7fe:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a803:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a806:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a80d:	85 c0                	test   eax,eax
c001a80f:	74 10                	je     c001a821 <ISO9660::openDir(char const*, void**)+0x65>
c001a811:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a818:	74 1a                	je     c001a834 <ISO9660::openDir(char const*, void**)+0x78>
c001a81a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a821:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a828:	83 ec 0c             	sub    esp,0xc
c001a82b:	50                   	push   eax
c001a82c:	e8 36 c2 fe ff       	call   c0006a67 <init_percd>
c001a831:	83 c4 10             	add    esp,0x10
c001a834:	50                   	push   eax
c001a835:	83 c3 03             	add    ebx,0x3
c001a838:	50                   	push   eax
c001a839:	6a 01                	push   0x1
c001a83b:	53                   	push   ebx
c001a83c:	e8 e9 bc fe ff       	call   c000652a <iso_open>
c001a841:	83 c4 10             	add    esp,0x10
c001a844:	83 f8 ff             	cmp    eax,0xffffffff
c001a847:	89 c3                	mov    ebx,eax
c001a849:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a84e:	75 1c                	jne    c001a86c <ISO9660::openDir(char const*, void**)+0xb0>
c001a850:	53                   	push   ebx
c001a851:	53                   	push   ebx
c001a852:	68 d1 2e 02 c0       	push   0xc0022ed1
c001a857:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a85d:	e8 4a e2 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a862:	83 c4 10             	add    esp,0x10
c001a865:	b8 01 00 00 00       	mov    eax,0x1
c001a86a:	eb 25                	jmp    c001a891 <ISO9660::openDir(char const*, void**)+0xd5>
c001a86c:	51                   	push   ecx
c001a86d:	01 db                	add    ebx,ebx
c001a86f:	51                   	push   ecx
c001a870:	83 c3 65             	add    ebx,0x65
c001a873:	68 e4 2e 02 c0       	push   0xc0022ee4
c001a878:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a87e:	e8 29 e2 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a883:	83 c4 10             	add    esp,0x10
c001a886:	31 c0                	xor    eax,eax
c001a888:	89 1e                	mov    DWORD PTR [esi],ebx
c001a88a:	eb 05                	jmp    c001a891 <ISO9660::openDir(char const*, void**)+0xd5>
c001a88c:	b8 04 00 00 00       	mov    eax,0x4
c001a891:	5a                   	pop    edx
c001a892:	5b                   	pop    ebx
c001a893:	5e                   	pop    esi
c001a894:	c3                   	ret    
c001a895:	90                   	nop

c001a896 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a896:	55                   	push   ebp
c001a897:	57                   	push   edi
c001a898:	56                   	push   esi
c001a899:	53                   	push   ebx
c001a89a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a8a0:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a8a7:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a8ae:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a8b5:	85 db                	test   ebx,ebx
c001a8b7:	0f 84 e4 00 00 00    	je     c001a9a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a8bd:	85 ed                	test   ebp,ebp
c001a8bf:	0f 84 dc 00 00 00    	je     c001a9a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a8c5:	83 ec 0c             	sub    esp,0xc
c001a8c8:	68 f7 2e 02 c0       	push   0xc0022ef7
c001a8cd:	e8 38 00 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a8d2:	89 d8                	mov    eax,ebx
c001a8d4:	b9 02 00 00 00       	mov    ecx,0x2
c001a8d9:	99                   	cdq    
c001a8da:	f7 f9                	idiv   ecx
c001a8dc:	83 e8 32             	sub    eax,0x32
c001a8df:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8e2:	e8 08 bf fe ff       	call   c00067ef <iso_readdir>
c001a8e7:	83 c4 10             	add    esp,0x10
c001a8ea:	85 c0                	test   eax,eax
c001a8ec:	89 c3                	mov    ebx,eax
c001a8ee:	75 38                	jne    c001a928 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a8f0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a8f5:	53                   	push   ebx
c001a8f6:	53                   	push   ebx
c001a8f7:	68 02 2f 02 c0       	push   0xc0022f02
c001a8fc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a902:	e8 a5 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a907:	83 c4 0c             	add    esp,0xc
c001a90a:	68 10 01 00 00       	push   0x110
c001a90f:	6a 00                	push   0x0
c001a911:	57                   	push   edi
c001a912:	e8 d9 5b fe ff       	call   c00004f0 <memset>
c001a917:	83 c4 10             	add    esp,0x10
c001a91a:	b8 01 00 00 00       	mov    eax,0x1
c001a91f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a926:	eb 7e                	jmp    c001a9a6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a928:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a92e:	8d 70 08             	lea    esi,[eax+0x8]
c001a931:	83 ec 0c             	sub    esp,0xc
c001a934:	56                   	push   esi
c001a935:	e8 46 5c fe ff       	call   c0000580 <strlen>
c001a93a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a942:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a946:	83 c4 10             	add    esp,0x10
c001a949:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a94d:	75 0a                	jne    c001a959 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a94f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a952:	b8 02 00 00 00       	mov    eax,0x2
c001a957:	74 05                	je     c001a95e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a959:	b8 01 00 00 00       	mov    eax,0x1
c001a95e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a962:	50                   	push   eax
c001a963:	50                   	push   eax
c001a964:	56                   	push   esi
c001a965:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a969:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a96d:	50                   	push   eax
c001a96e:	e8 dd 5c fe ff       	call   c0000650 <strcpy>
c001a973:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a97a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a97c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a983:	5a                   	pop    edx
c001a984:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a989:	59                   	pop    ecx
c001a98a:	68 15 2f 02 c0       	push   0xc0022f15
c001a98f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a995:	e8 12 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a99a:	83 c4 10             	add    esp,0x10
c001a99d:	31 c0                	xor    eax,eax
c001a99f:	eb 05                	jmp    c001a9a6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a9a1:	b8 04 00 00 00       	mov    eax,0x4
c001a9a6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a9ac:	5b                   	pop    ebx
c001a9ad:	5e                   	pop    esi
c001a9ae:	5f                   	pop    edi
c001a9af:	5d                   	pop    ebp
c001a9b0:	c3                   	ret    

c001a9b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a9b1:	57                   	push   edi
c001a9b2:	56                   	push   esi
c001a9b3:	53                   	push   ebx
c001a9b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a9b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a9bc:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001a9c2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a9c6:	0f be cb             	movsx  ecx,bl
c001a9c9:	75 0b                	jne    c001a9d6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a9cb:	0f be 05 40 41 02 c0 	movsx  eax,BYTE PTR ds:0xc0024140
c001a9d2:	39 c8                	cmp    eax,ecx
c001a9d4:	74 47                	je     c001aa1d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a9d6:	83 ec 0c             	sub    esp,0xc
c001a9d9:	31 d2                	xor    edx,edx
c001a9db:	68 a0 c8 02 c0       	push   0xc002c8a0
c001a9e0:	6a 01                	push   0x1
c001a9e2:	52                   	push   edx
c001a9e3:	56                   	push   esi
c001a9e4:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001a9eb:	e8 4a 33 ff ff       	call   c000dd3a <LogicalDisk::read(unsigned long long, int, void*)>
c001a9f0:	83 c4 20             	add    esp,0x20
c001a9f3:	85 c0                	test   eax,eax
c001a9f5:	75 0e                	jne    c001aa05 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a9f7:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001a9fd:	88 1d 40 41 02 c0    	mov    BYTE PTR ds:0xc0024140,bl
c001aa03:	eb 18                	jmp    c001aa1d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa05:	50                   	push   eax
c001aa06:	68 00 08 00 00       	push   0x800
c001aa0b:	6a 00                	push   0x0
c001aa0d:	57                   	push   edi
c001aa0e:	e8 dd 5a fe ff       	call   c00004f0 <memset>
c001aa13:	83 c4 10             	add    esp,0x10
c001aa16:	b8 01 00 00 00       	mov    eax,0x1
c001aa1b:	eb 0e                	jmp    c001aa2b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aa1d:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aa22:	b9 00 08 00 00       	mov    ecx,0x800
c001aa27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa29:	31 c0                	xor    eax,eax
c001aa2b:	5b                   	pop    ebx
c001aa2c:	5e                   	pop    esi
c001aa2d:	5f                   	pop    edi
c001aa2e:	c3                   	ret    
c001aa2f:	90                   	nop

c001aa30 <ISO9660::tryMount(LogicalDisk*, int)>:
c001aa30:	53                   	push   ebx
c001aa31:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aa37:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aa41:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aa48:	8d 58 41             	lea    ebx,[eax+0x41]
c001aa4b:	0f be db             	movsx  ebx,bl
c001aa4e:	53                   	push   ebx
c001aa4f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aa53:	50                   	push   eax
c001aa54:	6a 10                	push   0x10
c001aa56:	e8 56 ff ff ff       	call   c001a9b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aa5b:	83 c4 10             	add    esp,0x10
c001aa5e:	31 d2                	xor    edx,edx
c001aa60:	85 c0                	test   eax,eax
c001aa62:	75 33                	jne    c001aa97 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa64:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001aa69:	75 2c                	jne    c001aa97 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa6b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001aa70:	75 25                	jne    c001aa97 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa72:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001aa77:	75 1e                	jne    c001aa97 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa79:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001aa7e:	75 17                	jne    c001aa97 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa80:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001aa85:	75 10                	jne    c001aa97 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa87:	83 ec 0c             	sub    esp,0xc
c001aa8a:	53                   	push   ebx
c001aa8b:	e8 d7 bf fe ff       	call   c0006a67 <init_percd>
c001aa90:	83 c4 10             	add    esp,0x10
c001aa93:	40                   	inc    eax
c001aa94:	0f 95 c2             	setne  dl
c001aa97:	81 c4 08 08 00 00    	add    esp,0x808
c001aa9d:	88 d0                	mov    al,dl
c001aa9f:	5b                   	pop    ebx
c001aaa0:	c3                   	ret    
c001aaa1:	90                   	nop

c001aaa2 <ISO9660::ISO9660()>:
c001aaa2:	83 ec 0c             	sub    esp,0xc
c001aaa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaa9:	83 ec 0c             	sub    esp,0xc
c001aaac:	50                   	push   eax
c001aaad:	e8 68 0c ff ff       	call   c000b71a <Filesystem::Filesystem()>
c001aab2:	83 c4 10             	add    esp,0x10
c001aab5:	ba 30 2f 02 c0       	mov    edx,0xc0022f30
c001aaba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aabe:	89 10                	mov    DWORD PTR [eax],edx
c001aac0:	e8 b4 c0 fe ff       	call   c0006b79 <fs_iso9660_init>
c001aac5:	90                   	nop
c001aac6:	83 c4 0c             	add    esp,0xc
c001aac9:	c3                   	ret    

c001aaca <SoundCard::beginPlayback()>:
c001aaca:	c7 44 24 04 94 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f94
c001aad2:	e9 40 6a ff ff       	jmp    c0011517 <KePanic(char const*)>
c001aad7:	90                   	nop

c001aad8 <SoundCard::stopPlayback()>:
c001aad8:	c7 44 24 04 94 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f94
c001aae0:	e9 32 6a ff ff       	jmp    c0011517 <KePanic(char const*)>
c001aae5:	90                   	nop

c001aae6 <SoundCard::SoundCard(char const*)>:
c001aae6:	83 ec 1c             	sub    esp,0x1c
c001aae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaed:	83 ec 08             	sub    esp,0x8
c001aaf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aaf4:	50                   	push   eax
c001aaf5:	e8 ee 1f ff ff       	call   c000cae8 <Device::Device(char const*)>
c001aafa:	83 c4 10             	add    esp,0x10
c001aafd:	ba e0 2f 02 c0       	mov    edx,0xc0022fe0
c001ab02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab06:	89 10                	mov    DWORD PTR [eax],edx
c001ab08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab0c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab17:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ab21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab25:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ab2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab33:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ab3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab41:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ab4b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab53:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ab58:	7f 1a                	jg     c001ab74 <SoundCard::SoundCard(char const*)+0x8e>
c001ab5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab62:	83 c2 54             	add    edx,0x54
c001ab65:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ab6d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ab72:	eb df                	jmp    c001ab53 <SoundCard::SoundCard(char const*)+0x6d>
c001ab74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab78:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab7f:	90                   	nop
c001ab80:	83 c4 1c             	add    esp,0x1c
c001ab83:	c3                   	ret    

c001ab84 <SoundCard::~SoundCard()>:
c001ab84:	83 ec 0c             	sub    esp,0xc
c001ab87:	ba e0 2f 02 c0       	mov    edx,0xc0022fe0
c001ab8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab90:	89 10                	mov    DWORD PTR [eax],edx
c001ab92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab96:	83 ec 0c             	sub    esp,0xc
c001ab99:	50                   	push   eax
c001ab9a:	e8 b3 1c ff ff       	call   c000c852 <Device::~Device()>
c001ab9f:	83 c4 10             	add    esp,0x10
c001aba2:	90                   	nop
c001aba3:	83 c4 0c             	add    esp,0xc
c001aba6:	c3                   	ret    
c001aba7:	90                   	nop

c001aba8 <SoundCard::~SoundCard()>:
c001aba8:	83 ec 0c             	sub    esp,0xc
c001abab:	83 ec 0c             	sub    esp,0xc
c001abae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abb2:	e8 cd ff ff ff       	call   c001ab84 <SoundCard::~SoundCard()>
c001abb7:	83 c4 10             	add    esp,0x10
c001abba:	83 ec 08             	sub    esp,0x8
c001abbd:	68 e8 01 00 00       	push   0x1e8
c001abc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abc6:	e8 41 fc fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001abcb:	83 c4 10             	add    esp,0x10
c001abce:	83 c4 0c             	add    esp,0xc
c001abd1:	c3                   	ret    

c001abd2 <SoundCard::configureRates(int, int, int)>:
c001abd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abd6:	31 c0                	xor    eax,eax
c001abd8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001abdf:	75 20                	jne    c001ac01 <SoundCard::configureRates(int, int, int)+0x2f>
c001abe1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001abe5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001abeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abef:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001abf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001abff:	b0 01                	mov    al,0x1
c001ac01:	c3                   	ret    

c001ac02 <SoundCard::getSamples16(int, short*)>:
c001ac02:	55                   	push   ebp
c001ac03:	57                   	push   edi
c001ac04:	31 ff                	xor    edi,edi
c001ac06:	56                   	push   esi
c001ac07:	53                   	push   ebx
c001ac08:	31 db                	xor    ebx,ebx
c001ac0a:	83 ec 10             	sub    esp,0x10
c001ac0d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ac11:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac15:	8d 04 36             	lea    eax,[esi+esi*1]
c001ac18:	50                   	push   eax
c001ac19:	6a 00                	push   0x0
c001ac1b:	55                   	push   ebp
c001ac1c:	e8 cf 58 fe ff       	call   c00004f0 <memset>
c001ac21:	83 c4 10             	add    esp,0x10
c001ac24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac28:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ac2f:	85 c0                	test   eax,eax
c001ac31:	74 1a                	je     c001ac4d <SoundCard::getSamples16(int, short*)+0x4b>
c001ac33:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ac37:	75 14                	jne    c001ac4d <SoundCard::getSamples16(int, short*)+0x4b>
c001ac39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ac3d:	55                   	push   ebp
c001ac3e:	56                   	push   esi
c001ac3f:	50                   	push   eax
c001ac40:	e8 f3 02 00 00       	call   c001af38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ac45:	83 c4 10             	add    esp,0x10
c001ac48:	39 c3                	cmp    ebx,eax
c001ac4a:	0f 4c d8             	cmovl  ebx,eax
c001ac4d:	47                   	inc    edi
c001ac4e:	83 ff 20             	cmp    edi,0x20
c001ac51:	75 d1                	jne    c001ac24 <SoundCard::getSamples16(int, short*)+0x22>
c001ac53:	83 c4 0c             	add    esp,0xc
c001ac56:	89 d8                	mov    eax,ebx
c001ac58:	5b                   	pop    ebx
c001ac59:	5e                   	pop    esi
c001ac5a:	5f                   	pop    edi
c001ac5b:	5d                   	pop    ebp
c001ac5c:	c3                   	ret    
c001ac5d:	90                   	nop

c001ac5e <SoundCard::getSamples32(int, int*)>:
c001ac5e:	55                   	push   ebp
c001ac5f:	57                   	push   edi
c001ac60:	31 ff                	xor    edi,edi
c001ac62:	56                   	push   esi
c001ac63:	31 f6                	xor    esi,esi
c001ac65:	53                   	push   ebx
c001ac66:	83 ec 10             	sub    esp,0x10
c001ac69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ac6d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac71:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ac75:	c1 e0 02             	shl    eax,0x2
c001ac78:	50                   	push   eax
c001ac79:	6a 00                	push   0x0
c001ac7b:	55                   	push   ebp
c001ac7c:	e8 6f 58 fe ff       	call   c00004f0 <memset>
c001ac81:	83 c4 10             	add    esp,0x10
c001ac84:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ac8b:	85 c0                	test   eax,eax
c001ac8d:	74 1a                	je     c001aca9 <SoundCard::getSamples32(int, int*)+0x4b>
c001ac8f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ac93:	75 14                	jne    c001aca9 <SoundCard::getSamples32(int, int*)+0x4b>
c001ac95:	53                   	push   ebx
c001ac96:	55                   	push   ebp
c001ac97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac9b:	50                   	push   eax
c001ac9c:	e8 67 03 00 00       	call   c001b008 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001aca1:	83 c4 10             	add    esp,0x10
c001aca4:	39 c6                	cmp    esi,eax
c001aca6:	0f 4c f0             	cmovl  esi,eax
c001aca9:	47                   	inc    edi
c001acaa:	83 ff 20             	cmp    edi,0x20
c001acad:	75 d5                	jne    c001ac84 <SoundCard::getSamples32(int, int*)+0x26>
c001acaf:	85 f6                	test   esi,esi
c001acb1:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001acb8:	75 0f                	jne    c001acc9 <SoundCard::getSamples32(int, int*)+0x6b>
c001acba:	85 c0                	test   eax,eax
c001acbc:	74 1b                	je     c001acd9 <SoundCard::getSamples32(int, int*)+0x7b>
c001acbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acc0:	83 ec 0c             	sub    esp,0xc
c001acc3:	53                   	push   ebx
c001acc4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001acc7:	eb 0d                	jmp    c001acd6 <SoundCard::getSamples32(int, int*)+0x78>
c001acc9:	85 c0                	test   eax,eax
c001accb:	75 0c                	jne    c001acd9 <SoundCard::getSamples32(int, int*)+0x7b>
c001accd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001accf:	83 ec 0c             	sub    esp,0xc
c001acd2:	53                   	push   ebx
c001acd3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001acd6:	83 c4 10             	add    esp,0x10
c001acd9:	83 c4 0c             	add    esp,0xc
c001acdc:	89 f0                	mov    eax,esi
c001acde:	5b                   	pop    ebx
c001acdf:	5e                   	pop    esi
c001ace0:	5f                   	pop    edi
c001ace1:	5d                   	pop    ebp
c001ace2:	c3                   	ret    
c001ace3:	90                   	nop

c001ace4 <SoundCard::addChannel(SoundPort*)>:
c001ace4:	83 ec 0c             	sub    esp,0xc
c001ace7:	31 c0                	xor    eax,eax
c001ace9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aced:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001acf5:	74 1b                	je     c001ad12 <SoundCard::addChannel(SoundPort*)+0x2e>
c001acf7:	40                   	inc    eax
c001acf8:	83 f8 20             	cmp    eax,0x20
c001acfb:	75 f0                	jne    c001aced <SoundCard::addChannel(SoundPort*)+0x9>
c001acfd:	83 ec 0c             	sub    esp,0xc
c001ad00:	68 b9 2f 02 c0       	push   0xc0022fb9
c001ad05:	e8 0d 68 ff ff       	call   c0011517 <KePanic(char const*)>
c001ad0a:	83 c4 10             	add    esp,0x10
c001ad0d:	83 c8 ff             	or     eax,0xffffffff
c001ad10:	eb 0b                	jmp    c001ad1d <SoundCard::addChannel(SoundPort*)+0x39>
c001ad12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad16:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ad1d:	83 c4 0c             	add    esp,0xc
c001ad20:	c3                   	ret    
c001ad21:	90                   	nop

c001ad22 <SoundCard::removeChannel(int)>:
c001ad22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad2a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ad35:	c3                   	ret    
c001ad36:	66 90                	xchg   ax,ax

c001ad38 <SoundPort::SoundPort(int, int, int, int)>:
c001ad38:	83 ec 0c             	sub    esp,0xc
c001ad3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad3f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ad46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad4a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ad4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad56:	89 10                	mov    DWORD PTR [eax],edx
c001ad58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ad63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad67:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ad6e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ad73:	75 13                	jne    c001ad88 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ad75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad79:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad7b:	05 a0 0f 00 00       	add    eax,0xfa0
c001ad80:	d1 e0                	shl    eax,1
c001ad82:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad86:	66 90                	xchg   ax,ax
c001ad88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ad90:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ad93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad97:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ad9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ada2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ada5:	c1 e0 02             	shl    eax,0x2
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	50                   	push   eax
c001adac:	e8 22 cd fe ff       	call   c0007ad3 <malloc>
c001adb1:	83 c4 10             	add    esp,0x10
c001adb4:	89 c2                	mov    edx,eax
c001adb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001adbd:	90                   	nop
c001adbe:	83 c4 0c             	add    esp,0xc
c001adc1:	c3                   	ret    
c001adc2:	66 90                	xchg   ax,ax

c001adc4 <SoundPort::~SoundPort()>:
c001adc4:	83 ec 0c             	sub    esp,0xc
c001adc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adcb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001adce:	85 c0                	test   eax,eax
c001add0:	74 1e                	je     c001adf0 <SoundPort::~SoundPort()+0x2c>
c001add2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001add9:	83 ec 0c             	sub    esp,0xc
c001addc:	50                   	push   eax
c001addd:	e8 01 cd fe ff       	call   c0007ae3 <free>
c001ade2:	83 c4 10             	add    esp,0x10
c001ade5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001adf0:	90                   	nop
c001adf1:	83 c4 0c             	add    esp,0xc
c001adf4:	c3                   	ret    
c001adf5:	90                   	nop
c001adf6:	66 90                	xchg   ax,ax

c001adf8 <SoundPort::unpause()>:
c001adf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adfc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ae00:	c3                   	ret    
c001ae01:	90                   	nop
c001ae02:	66 90                	xchg   ax,ax

c001ae04 <SoundPort::pause()>:
c001ae04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae08:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae0c:	c3                   	ret    
c001ae0d:	90                   	nop
c001ae0e:	66 90                	xchg   ax,ax

c001ae10 <SoundPort::getBufferUsed()>:
c001ae10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae14:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae17:	c3                   	ret    

c001ae18 <SoundPort::getBufferSize()>:
c001ae18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae1c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae1f:	c3                   	ret    

c001ae20 <SoundPort::buffer16(short*, int)>:
c001ae20:	55                   	push   ebp
c001ae21:	57                   	push   edi
c001ae22:	56                   	push   esi
c001ae23:	53                   	push   ebx
c001ae24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae28:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ae2c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ae2f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ae32:	74 68                	je     c001ae9c <SoundPort::buffer16(short*, int)+0x7c>
c001ae34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ae38:	85 c9                	test   ecx,ecx
c001ae3a:	7e 60                	jle    c001ae9c <SoundPort::buffer16(short*, int)+0x7c>
c001ae3c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ae40:	8d 70 01             	lea    esi,[eax+0x1]
c001ae43:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ae46:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ae49:	c1 e1 0f             	shl    ecx,0xf
c001ae4c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ae4f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae52:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ae55:	74 4d                	je     c001aea4 <SoundPort::buffer16(short*, int)+0x84>
c001ae57:	31 f6                	xor    esi,esi
c001ae59:	eb 21                	jmp    c001ae7c <SoundPort::buffer16(short*, int)+0x5c>
c001ae5b:	90                   	nop
c001ae5c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ae61:	8d 79 01             	lea    edi,[ecx+0x1]
c001ae64:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001ae67:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001ae6a:	c1 e3 0f             	shl    ebx,0xf
c001ae6d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001ae70:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae73:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ae76:	74 1c                	je     c001ae94 <SoundPort::buffer16(short*, int)+0x74>
c001ae78:	89 c6                	mov    esi,eax
c001ae7a:	66 90                	xchg   ax,ax
c001ae7c:	8d 46 01             	lea    eax,[esi+0x1]
c001ae7f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ae83:	75 d7                	jne    c001ae5c <SoundPort::buffer16(short*, int)+0x3c>
c001ae85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae89:	8d 76 00             	lea    esi,[esi+0x0]
c001ae8c:	5b                   	pop    ebx
c001ae8d:	5e                   	pop    esi
c001ae8e:	5f                   	pop    edi
c001ae8f:	5d                   	pop    ebp
c001ae90:	c3                   	ret    
c001ae91:	8d 76 00             	lea    esi,[esi+0x0]
c001ae94:	5b                   	pop    ebx
c001ae95:	8d 46 02             	lea    eax,[esi+0x2]
c001ae98:	5e                   	pop    esi
c001ae99:	5f                   	pop    edi
c001ae9a:	5d                   	pop    ebp
c001ae9b:	c3                   	ret    
c001ae9c:	5b                   	pop    ebx
c001ae9d:	31 c0                	xor    eax,eax
c001ae9f:	5e                   	pop    esi
c001aea0:	5f                   	pop    edi
c001aea1:	5d                   	pop    ebp
c001aea2:	c3                   	ret    
c001aea3:	90                   	nop
c001aea4:	b8 01 00 00 00       	mov    eax,0x1
c001aea9:	eb e1                	jmp    c001ae8c <SoundPort::buffer16(short*, int)+0x6c>
c001aeab:	90                   	nop

c001aeac <SoundPort::buffer32(int*, int)>:
c001aeac:	55                   	push   ebp
c001aead:	57                   	push   edi
c001aeae:	56                   	push   esi
c001aeaf:	53                   	push   ebx
c001aeb0:	83 ec 04             	sub    esp,0x4
c001aeb3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aeb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aebb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aebf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aec2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aec5:	89 04 24             	mov    DWORD PTR [esp],eax
c001aec8:	74 5a                	je     c001af24 <SoundPort::buffer32(int*, int)+0x78>
c001aeca:	85 c0                	test   eax,eax
c001aecc:	7e 56                	jle    c001af24 <SoundPort::buffer32(int*, int)+0x78>
c001aece:	8d 71 01             	lea    esi,[ecx+0x1]
c001aed1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aed4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aed7:	8b 37                	mov    esi,DWORD PTR [edi]
c001aed9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001aedc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aedf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aee2:	74 4c                	je     c001af30 <SoundPort::buffer32(int*, int)+0x84>
c001aee4:	31 f6                	xor    esi,esi
c001aee6:	eb 1c                	jmp    c001af04 <SoundPort::buffer32(int*, int)+0x58>
c001aee8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aeeb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001aeee:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001aef1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001aef4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001aef8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aefb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aefe:	74 18                	je     c001af18 <SoundPort::buffer32(int*, int)+0x6c>
c001af00:	89 de                	mov    esi,ebx
c001af02:	66 90                	xchg   ax,ax
c001af04:	8d 5e 01             	lea    ebx,[esi+0x1]
c001af07:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001af0a:	75 dc                	jne    c001aee8 <SoundPort::buffer32(int*, int)+0x3c>
c001af0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af0f:	90                   	nop
c001af10:	83 c4 04             	add    esp,0x4
c001af13:	5b                   	pop    ebx
c001af14:	5e                   	pop    esi
c001af15:	5f                   	pop    edi
c001af16:	5d                   	pop    ebp
c001af17:	c3                   	ret    
c001af18:	8d 46 02             	lea    eax,[esi+0x2]
c001af1b:	83 c4 04             	add    esp,0x4
c001af1e:	5b                   	pop    ebx
c001af1f:	5e                   	pop    esi
c001af20:	5f                   	pop    edi
c001af21:	5d                   	pop    ebp
c001af22:	c3                   	ret    
c001af23:	90                   	nop
c001af24:	83 c4 04             	add    esp,0x4
c001af27:	31 c0                	xor    eax,eax
c001af29:	5b                   	pop    ebx
c001af2a:	5e                   	pop    esi
c001af2b:	5f                   	pop    edi
c001af2c:	5d                   	pop    ebp
c001af2d:	c3                   	ret    
c001af2e:	66 90                	xchg   ax,ax
c001af30:	b8 01 00 00 00       	mov    eax,0x1
c001af35:	eb d9                	jmp    c001af10 <SoundPort::buffer32(int*, int)+0x64>
c001af37:	90                   	nop

c001af38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001af38:	55                   	push   ebp
c001af39:	57                   	push   edi
c001af3a:	56                   	push   esi
c001af3b:	53                   	push   ebx
c001af3c:	83 ec 0c             	sub    esp,0xc
c001af3f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001af43:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af47:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af4b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001af4f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001af55:	39 03                	cmp    DWORD PTR [ebx],eax
c001af57:	74 13                	je     c001af6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001af59:	83 ec 0c             	sub    esp,0xc
c001af5c:	68 0c 30 02 c0       	push   0xc002300c
c001af61:	e8 b1 65 ff ff       	call   c0011517 <KePanic(char const*)>
c001af66:	83 c4 10             	add    esp,0x10
c001af69:	8d 76 00             	lea    esi,[esi+0x0]
c001af6c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001af72:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001af75:	74 11                	je     c001af88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001af77:	83 ec 0c             	sub    esp,0xc
c001af7a:	68 4b 30 02 c0       	push   0xc002304b
c001af7f:	e8 93 65 ff ff       	call   c0011517 <KePanic(char const*)>
c001af84:	83 c4 10             	add    esp,0x10
c001af87:	90                   	nop
c001af88:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001af8e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001af91:	74 11                	je     c001afa4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001af93:	83 ec 0c             	sub    esp,0xc
c001af96:	68 4b 30 02 c0       	push   0xc002304b
c001af9b:	e8 77 65 ff ff       	call   c0011517 <KePanic(char const*)>
c001afa0:	83 c4 10             	add    esp,0x10
c001afa3:	90                   	nop
c001afa4:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001afa7:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001afab:	85 f6                	test   esi,esi
c001afad:	7e 2d                	jle    c001afdc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001afaf:	31 c0                	xor    eax,eax
c001afb1:	8d 76 00             	lea    esi,[esi+0x0]
c001afb4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001afb7:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001afba:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001afc0:	85 c9                	test   ecx,ecx
c001afc2:	0f 49 d1             	cmovns edx,ecx
c001afc5:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001afc9:	c1 fa 0f             	sar    edx,0xf
c001afcc:	01 d1                	add    ecx,edx
c001afce:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001afd2:	83 c0 01             	add    eax,0x1
c001afd5:	39 f0                	cmp    eax,esi
c001afd7:	75 db                	jne    c001afb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001afd9:	8d 76 00             	lea    esi,[esi+0x0]
c001afdc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001afdf:	83 ec 04             	sub    esp,0x4
c001afe2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001afe5:	29 f0                	sub    eax,esi
c001afe7:	c1 e0 02             	shl    eax,0x2
c001afea:	50                   	push   eax
c001afeb:	8d 04 b2             	lea    eax,[edx+esi*4]
c001afee:	50                   	push   eax
c001afef:	52                   	push   edx
c001aff0:	e8 db 53 fe ff       	call   c00003d0 <memmove>
c001aff5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aff8:	29 f0                	sub    eax,esi
c001affa:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001affd:	83 c4 1c             	add    esp,0x1c
c001b000:	89 f0                	mov    eax,esi
c001b002:	5b                   	pop    ebx
c001b003:	5e                   	pop    esi
c001b004:	5f                   	pop    edi
c001b005:	5d                   	pop    ebp
c001b006:	c3                   	ret    
c001b007:	90                   	nop

c001b008 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b008:	55                   	push   ebp
c001b009:	57                   	push   edi
c001b00a:	56                   	push   esi
c001b00b:	53                   	push   ebx
c001b00c:	83 ec 0c             	sub    esp,0xc
c001b00f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b013:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b017:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b01b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b01f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b025:	39 03                	cmp    DWORD PTR [ebx],eax
c001b027:	74 13                	je     c001b03c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b029:	83 ec 0c             	sub    esp,0xc
c001b02c:	68 2c 30 02 c0       	push   0xc002302c
c001b031:	e8 e1 64 ff ff       	call   c0011517 <KePanic(char const*)>
c001b036:	83 c4 10             	add    esp,0x10
c001b039:	8d 76 00             	lea    esi,[esi+0x0]
c001b03c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b042:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b045:	74 11                	je     c001b058 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b047:	83 ec 0c             	sub    esp,0xc
c001b04a:	68 67 30 02 c0       	push   0xc0023067
c001b04f:	e8 c3 64 ff ff       	call   c0011517 <KePanic(char const*)>
c001b054:	83 c4 10             	add    esp,0x10
c001b057:	90                   	nop
c001b058:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b05e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b061:	74 11                	je     c001b074 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b063:	83 ec 0c             	sub    esp,0xc
c001b066:	68 67 30 02 c0       	push   0xc0023067
c001b06b:	e8 a7 64 ff ff       	call   c0011517 <KePanic(char const*)>
c001b070:	83 c4 10             	add    esp,0x10
c001b073:	90                   	nop
c001b074:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b077:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b07b:	85 ff                	test   edi,edi
c001b07d:	7e 21                	jle    c001b0a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b07f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b086:	31 c0                	xor    eax,eax
c001b088:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b08b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b08e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b091:	01 d5                	add    ebp,edx
c001b093:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b096:	83 c0 04             	add    eax,0x4
c001b099:	39 c1                	cmp    ecx,eax
c001b09b:	75 eb                	jne    c001b088 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b09d:	8d 76 00             	lea    esi,[esi+0x0]
c001b0a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b0a3:	83 ec 04             	sub    esp,0x4
c001b0a6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0a9:	29 f8                	sub    eax,edi
c001b0ab:	c1 e0 02             	shl    eax,0x2
c001b0ae:	50                   	push   eax
c001b0af:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b0b2:	50                   	push   eax
c001b0b3:	52                   	push   edx
c001b0b4:	e8 17 53 fe ff       	call   c00003d0 <memmove>
c001b0b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b0bc:	29 f8                	sub    eax,edi
c001b0be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b0c1:	83 c4 1c             	add    esp,0x1c
c001b0c4:	89 f8                	mov    eax,edi
c001b0c6:	5b                   	pop    ebx
c001b0c7:	5e                   	pop    esi
c001b0c8:	5f                   	pop    edi
c001b0c9:	5d                   	pop    ebp
c001b0ca:	c3                   	ret    
c001b0cb:	90                   	nop

c001b0cc <PCI::open(int, int, void*)>:
c001b0cc:	83 ec 18             	sub    esp,0x18
c001b0cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b0d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b0dd:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0df:	50                   	push   eax
c001b0e0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b0e3:	31 c0                	xor    eax,eax
c001b0e5:	83 c4 1c             	add    esp,0x1c
c001b0e8:	c3                   	ret    
c001b0e9:	90                   	nop

c001b0ea <PCI::close(int, int, void*)>:
c001b0ea:	31 c0                	xor    eax,eax
c001b0ec:	c3                   	ret    
c001b0ed:	90                   	nop

c001b0ee <PCI::PCI()>:
c001b0ee:	83 ec 0c             	sub    esp,0xc
c001b0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0f5:	83 ec 08             	sub    esp,0x8
c001b0f8:	68 83 30 02 c0       	push   0xc0023083
c001b0fd:	50                   	push   eax
c001b0fe:	e8 a9 11 ff ff       	call   c000c2ac <Bus::Bus(char const*)>
c001b103:	83 c4 10             	add    esp,0x10
c001b106:	ba 2c 31 02 c0       	mov    edx,0xc002312c
c001b10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b10f:	89 10                	mov    DWORD PTR [eax],edx
c001b111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b115:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b11f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b123:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b12c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b132:	0f b6 d0             	movzx  edx,al
c001b135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b139:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b144:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b14a:	0f b6 d0             	movzx  edx,al
c001b14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b151:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b15a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b160:	8d 50 01             	lea    edx,[eax+0x1]
c001b163:	88 d1                	mov    cl,dl
c001b165:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b169:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b16f:	0f b6 d0             	movzx  edx,al
c001b172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b176:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b17a:	83 c9 c0             	or     ecx,0xffffffc0
c001b17d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b181:	90                   	nop
c001b182:	83 c4 0c             	add    esp,0xc
c001b185:	c3                   	ret    

c001b186 <PCI::readBAR8(unsigned int, int)>:
c001b186:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b18a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b18e:	f6 c2 01             	test   dl,0x1
c001b191:	74 07                	je     c001b19a <PCI::readBAR8(unsigned int, int)+0x14>
c001b193:	83 e2 fc             	and    edx,0xfffffffc
c001b196:	01 c2                	add    edx,eax
c001b198:	ec                   	in     al,dx
c001b199:	c3                   	ret    
c001b19a:	83 e2 f0             	and    edx,0xfffffff0
c001b19d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b1a0:	c3                   	ret    
c001b1a1:	90                   	nop

c001b1a2 <PCI::readBAR16(unsigned int, int)>:
c001b1a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1aa:	f6 c2 01             	test   dl,0x1
c001b1ad:	74 08                	je     c001b1b7 <PCI::readBAR16(unsigned int, int)+0x15>
c001b1af:	83 e2 fc             	and    edx,0xfffffffc
c001b1b2:	01 c2                	add    edx,eax
c001b1b4:	66 ed                	in     ax,dx
c001b1b6:	c3                   	ret    
c001b1b7:	83 e2 f0             	and    edx,0xfffffff0
c001b1ba:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b1be:	c3                   	ret    
c001b1bf:	90                   	nop

c001b1c0 <PCI::readBAR32(unsigned int, int)>:
c001b1c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1c8:	f6 c2 01             	test   dl,0x1
c001b1cb:	74 07                	je     c001b1d4 <PCI::readBAR32(unsigned int, int)+0x14>
c001b1cd:	83 e2 fc             	and    edx,0xfffffffc
c001b1d0:	01 c2                	add    edx,eax
c001b1d2:	ed                   	in     eax,dx
c001b1d3:	c3                   	ret    
c001b1d4:	83 e2 f0             	and    edx,0xfffffff0
c001b1d7:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b1da:	c3                   	ret    
c001b1db:	90                   	nop

c001b1dc <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b1dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1e8:	f6 c2 01             	test   dl,0x1
c001b1eb:	74 07                	je     c001b1f4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b1ed:	83 e2 fc             	and    edx,0xfffffffc
c001b1f0:	01 ca                	add    edx,ecx
c001b1f2:	ee                   	out    dx,al
c001b1f3:	c3                   	ret    
c001b1f4:	83 e2 f0             	and    edx,0xfffffff0
c001b1f7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b1fa:	c3                   	ret    
c001b1fb:	90                   	nop

c001b1fc <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b1fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b200:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b204:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b208:	f6 c2 01             	test   dl,0x1
c001b20b:	74 08                	je     c001b215 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b20d:	83 e2 fc             	and    edx,0xfffffffc
c001b210:	01 ca                	add    edx,ecx
c001b212:	66 ef                	out    dx,ax
c001b214:	c3                   	ret    
c001b215:	83 e2 f0             	and    edx,0xfffffff0
c001b218:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b21c:	c3                   	ret    
c001b21d:	90                   	nop

c001b21e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b21e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b222:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b226:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b22a:	f6 c2 01             	test   dl,0x1
c001b22d:	74 07                	je     c001b236 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b22f:	83 e2 fc             	and    edx,0xfffffffc
c001b232:	01 ca                	add    edx,ecx
c001b234:	ef                   	out    dx,eax
c001b235:	c3                   	ret    
c001b236:	83 e2 f0             	and    edx,0xfffffff0
c001b239:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b23c:	c3                   	ret    
c001b23d:	90                   	nop

c001b23e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b23e:	55                   	push   ebp
c001b23f:	57                   	push   edi
c001b240:	56                   	push   esi
c001b241:	53                   	push   ebx
c001b242:	83 ec 0c             	sub    esp,0xc
c001b245:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b24a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b24e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b252:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b256:	83 fe 07             	cmp    esi,0x7
c001b259:	76 10                	jbe    c001b26b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b25b:	83 ec 0c             	sub    esp,0xc
c001b25e:	68 8b 30 02 c0       	push   0xc002308b
c001b263:	e8 af 62 ff ff       	call   c0011517 <KePanic(char const*)>
c001b268:	83 c4 10             	add    esp,0x10
c001b26b:	0f b6 db             	movzx  ebx,bl
c001b26e:	83 fb 0f             	cmp    ebx,0xf
c001b271:	76 10                	jbe    c001b283 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b273:	83 ec 0c             	sub    esp,0xc
c001b276:	68 bb 30 02 c0       	push   0xc00230bb
c001b27b:	e8 97 62 ff ff       	call   c0011517 <KePanic(char const*)>
c001b280:	83 c4 10             	add    esp,0x10
c001b283:	8d 04 36             	lea    eax,[esi+esi*1]
c001b286:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b28b:	83 c8 f0             	or     eax,0xfffffff0
c001b28e:	ee                   	out    dx,al
c001b28f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b294:	89 e8                	mov    eax,ebp
c001b296:	ee                   	out    dx,al
c001b297:	89 f9                	mov    ecx,edi
c001b299:	89 d8                	mov    eax,ebx
c001b29b:	0f b6 d9             	movzx  ebx,cl
c001b29e:	83 c4 0c             	add    esp,0xc
c001b2a1:	c1 e0 08             	shl    eax,0x8
c001b2a4:	83 e3 fc             	and    ebx,0xfffffffc
c001b2a7:	09 d8                	or     eax,ebx
c001b2a9:	5b                   	pop    ebx
c001b2aa:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b2af:	5e                   	pop    esi
c001b2b0:	5f                   	pop    edi
c001b2b1:	5d                   	pop    ebp
c001b2b2:	c3                   	ret    
c001b2b3:	90                   	nop

c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2b4:	57                   	push   edi
c001b2b5:	56                   	push   esi
c001b2b6:	53                   	push   ebx
c001b2b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b2c7:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b2cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2d1:	83 ff 01             	cmp    edi,0x1
c001b2d4:	75 3f                	jne    c001b315 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b2d6:	89 de                	mov    esi,ebx
c001b2d8:	0f b6 c0             	movzx  eax,al
c001b2db:	c1 e0 10             	shl    eax,0x10
c001b2de:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b2e4:	0f b6 c9             	movzx  ecx,cl
c001b2e7:	09 f0                	or     eax,esi
c001b2e9:	c1 e1 08             	shl    ecx,0x8
c001b2ec:	0f b6 d2             	movzx  edx,dl
c001b2ef:	c1 e2 0b             	shl    edx,0xb
c001b2f2:	09 c8                	or     eax,ecx
c001b2f4:	09 d0                	or     eax,edx
c001b2f6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b2fb:	0d 00 00 00 80       	or     eax,0x80000000
c001b300:	ef                   	out    dx,eax
c001b301:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b306:	ed                   	in     eax,dx
c001b307:	83 e3 02             	and    ebx,0x2
c001b30a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b311:	d3 e8                	shr    eax,cl
c001b313:	eb 44                	jmp    c001b359 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b315:	83 ff 02             	cmp    edi,0x2
c001b318:	75 2d                	jne    c001b347 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b31a:	83 ec 0c             	sub    esp,0xc
c001b31d:	0f b6 fb             	movzx  edi,bl
c001b320:	57                   	push   edi
c001b321:	0f b6 c9             	movzx  ecx,cl
c001b324:	51                   	push   ecx
c001b325:	0f b6 d2             	movzx  edx,dl
c001b328:	52                   	push   edx
c001b329:	0f b6 c0             	movzx  eax,al
c001b32c:	50                   	push   eax
c001b32d:	56                   	push   esi
c001b32e:	e8 0b ff ff ff       	call   c001b23e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b333:	89 c2                	mov    edx,eax
c001b335:	ed                   	in     eax,dx
c001b336:	83 e3 02             	and    ebx,0x2
c001b339:	83 c4 20             	add    esp,0x20
c001b33c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b343:	d3 e8                	shr    eax,cl
c001b345:	eb 12                	jmp    c001b359 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b347:	83 ec 0c             	sub    esp,0xc
c001b34a:	68 eb 30 02 c0       	push   0xc00230eb
c001b34f:	e8 c3 61 ff ff       	call   c0011517 <KePanic(char const*)>
c001b354:	83 c4 10             	add    esp,0x10
c001b357:	31 c0                	xor    eax,eax
c001b359:	5b                   	pop    ebx
c001b35a:	5e                   	pop    esi
c001b35b:	5f                   	pop    edi
c001b35c:	c3                   	ret    
c001b35d:	90                   	nop

c001b35e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b35e:	83 ec 18             	sub    esp,0x18
c001b361:	6a 00                	push   0x0
c001b363:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b368:	50                   	push   eax
c001b369:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b36e:	50                   	push   eax
c001b36f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b374:	50                   	push   eax
c001b375:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b379:	e8 36 ff ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b37e:	83 c4 2c             	add    esp,0x2c
c001b381:	c3                   	ret    

c001b382 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b382:	83 ec 18             	sub    esp,0x18
c001b385:	6a 0e                	push   0xe
c001b387:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b38c:	50                   	push   eax
c001b38d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b392:	50                   	push   eax
c001b393:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b398:	50                   	push   eax
c001b399:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b39d:	e8 12 ff ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3a2:	83 c4 2c             	add    esp,0x2c
c001b3a5:	0f b6 c0             	movzx  eax,al
c001b3a8:	c3                   	ret    
c001b3a9:	90                   	nop

c001b3aa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b3aa:	55                   	push   ebp
c001b3ab:	57                   	push   edi
c001b3ac:	56                   	push   esi
c001b3ad:	53                   	push   ebx
c001b3ae:	83 ec 18             	sub    esp,0x18
c001b3b1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b3b6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b3bb:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b3c0:	6a 0a                	push   0xa
c001b3c2:	56                   	push   esi
c001b3c3:	55                   	push   ebp
c001b3c4:	57                   	push   edi
c001b3c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b3c9:	e8 e6 fe ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3ce:	83 c4 14             	add    esp,0x14
c001b3d1:	6a 0a                	push   0xa
c001b3d3:	56                   	push   esi
c001b3d4:	55                   	push   ebp
c001b3d5:	57                   	push   edi
c001b3d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b3da:	89 c3                	mov    ebx,eax
c001b3dc:	0f b6 db             	movzx  ebx,bl
c001b3df:	e8 d0 fe ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3e4:	83 c4 2c             	add    esp,0x2c
c001b3e7:	25 00 ff 00 00       	and    eax,0xff00
c001b3ec:	09 d8                	or     eax,ebx
c001b3ee:	5b                   	pop    ebx
c001b3ef:	5e                   	pop    esi
c001b3f0:	5f                   	pop    edi
c001b3f1:	5d                   	pop    ebp
c001b3f2:	c3                   	ret    
c001b3f3:	90                   	nop

c001b3f4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b3f4:	83 ec 18             	sub    esp,0x18
c001b3f7:	6a 08                	push   0x8
c001b3f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3fe:	50                   	push   eax
c001b3ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b404:	50                   	push   eax
c001b405:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b40a:	50                   	push   eax
c001b40b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b40f:	e8 a0 fe ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b414:	83 c4 2c             	add    esp,0x2c
c001b417:	0f b6 c4             	movzx  eax,ah
c001b41a:	c3                   	ret    
c001b41b:	90                   	nop

c001b41c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b41c:	83 ec 18             	sub    esp,0x18
c001b41f:	6a 08                	push   0x8
c001b421:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b426:	50                   	push   eax
c001b427:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b42c:	50                   	push   eax
c001b42d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b432:	50                   	push   eax
c001b433:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b437:	e8 78 fe ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b43c:	83 c4 2c             	add    esp,0x2c
c001b43f:	c3                   	ret    

c001b440 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b440:	83 ec 18             	sub    esp,0x18
c001b443:	6a 3c                	push   0x3c
c001b445:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b44a:	50                   	push   eax
c001b44b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b450:	50                   	push   eax
c001b451:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b456:	50                   	push   eax
c001b457:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b45b:	e8 54 fe ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b460:	83 c4 2c             	add    esp,0x2c
c001b463:	c3                   	ret    

c001b464 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b464:	83 ec 18             	sub    esp,0x18
c001b467:	6a 18                	push   0x18
c001b469:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b46e:	50                   	push   eax
c001b46f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b474:	50                   	push   eax
c001b475:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b47a:	50                   	push   eax
c001b47b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b47f:	e8 30 fe ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b484:	83 c4 2c             	add    esp,0x2c
c001b487:	0f b6 c4             	movzx  eax,ah
c001b48a:	c3                   	ret    
c001b48b:	90                   	nop

c001b48c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b48c:	55                   	push   ebp
c001b48d:	57                   	push   edi
c001b48e:	56                   	push   esi
c001b48f:	53                   	push   ebx
c001b490:	83 ec 28             	sub    esp,0x28
c001b493:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b497:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b49c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b4a1:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b4a6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b4ad:	8d 43 12             	lea    eax,[ebx+0x12]
c001b4b0:	83 c3 10             	add    ebx,0x10
c001b4b3:	0f b6 c0             	movzx  eax,al
c001b4b6:	0f b6 db             	movzx  ebx,bl
c001b4b9:	50                   	push   eax
c001b4ba:	51                   	push   ecx
c001b4bb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b4bf:	57                   	push   edi
c001b4c0:	55                   	push   ebp
c001b4c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b4c5:	e8 ea fd ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ca:	83 c4 14             	add    esp,0x14
c001b4cd:	53                   	push   ebx
c001b4ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b4d2:	51                   	push   ecx
c001b4d3:	89 c6                	mov    esi,eax
c001b4d5:	57                   	push   edi
c001b4d6:	55                   	push   ebp
c001b4d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b4db:	c1 e6 10             	shl    esi,0x10
c001b4de:	e8 d1 fd ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4e3:	83 c4 3c             	add    esp,0x3c
c001b4e6:	5b                   	pop    ebx
c001b4e7:	0f b7 c0             	movzx  eax,ax
c001b4ea:	09 f0                	or     eax,esi
c001b4ec:	5e                   	pop    esi
c001b4ed:	5f                   	pop    edi
c001b4ee:	5d                   	pop    ebp
c001b4ef:	c3                   	ret    

c001b4f0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b4f0:	55                   	push   ebp
c001b4f1:	57                   	push   edi
c001b4f2:	56                   	push   esi
c001b4f3:	53                   	push   ebx
c001b4f4:	83 ec 0c             	sub    esp,0xc
c001b4f7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b4fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b4ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b503:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b507:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b50d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b511:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b515:	83 f9 01             	cmp    ecx,0x1
c001b518:	75 5d                	jne    c001b577 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b51a:	0f b6 c8             	movzx  ecx,al
c001b51d:	89 f0                	mov    eax,esi
c001b51f:	25 fc 00 00 00       	and    eax,0xfc
c001b524:	0f b6 d2             	movzx  edx,dl
c001b527:	c1 e1 10             	shl    ecx,0x10
c001b52a:	c1 e2 0b             	shl    edx,0xb
c001b52d:	09 c1                	or     ecx,eax
c001b52f:	89 f8                	mov    eax,edi
c001b531:	0f b6 f8             	movzx  edi,al
c001b534:	c1 e7 08             	shl    edi,0x8
c001b537:	09 f9                	or     ecx,edi
c001b539:	09 d1                	or     ecx,edx
c001b53b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b540:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b546:	89 c8                	mov    eax,ecx
c001b548:	ef                   	out    dx,eax
c001b549:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b54e:	ed                   	in     eax,dx
c001b54f:	83 e6 02             	and    esi,0x2
c001b552:	0f b7 db             	movzx  ebx,bx
c001b555:	74 0a                	je     c001b561 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b557:	c1 e3 10             	shl    ebx,0x10
c001b55a:	0f b7 d0             	movzx  edx,ax
c001b55d:	09 d3                	or     ebx,edx
c001b55f:	eb 05                	jmp    c001b566 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b561:	66 31 c0             	xor    ax,ax
c001b564:	09 c3                	or     ebx,eax
c001b566:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b56b:	89 c8                	mov    eax,ecx
c001b56d:	ef                   	out    dx,eax
c001b56e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b573:	89 d8                	mov    eax,ebx
c001b575:	eb 41                	jmp    c001b5b8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b577:	83 f9 02             	cmp    ecx,0x2
c001b57a:	75 45                	jne    c001b5c1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b57c:	89 f1                	mov    ecx,esi
c001b57e:	83 ec 0c             	sub    esp,0xc
c001b581:	0f b6 f1             	movzx  esi,cl
c001b584:	89 f9                	mov    ecx,edi
c001b586:	56                   	push   esi
c001b587:	0f b6 f9             	movzx  edi,cl
c001b58a:	57                   	push   edi
c001b58b:	0f b6 d2             	movzx  edx,dl
c001b58e:	52                   	push   edx
c001b58f:	0f b6 c0             	movzx  eax,al
c001b592:	50                   	push   eax
c001b593:	55                   	push   ebp
c001b594:	e8 a5 fc ff ff       	call   c001b23e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b599:	89 c2                	mov    edx,eax
c001b59b:	ed                   	in     eax,dx
c001b59c:	83 c4 20             	add    esp,0x20
c001b59f:	f6 c2 02             	test   dl,0x2
c001b5a2:	0f b7 db             	movzx  ebx,bx
c001b5a5:	74 0c                	je     c001b5b3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b5a7:	0f b7 c8             	movzx  ecx,ax
c001b5aa:	89 d8                	mov    eax,ebx
c001b5ac:	c1 e0 10             	shl    eax,0x10
c001b5af:	09 c8                	or     eax,ecx
c001b5b1:	eb 05                	jmp    c001b5b8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b5b3:	66 31 c0             	xor    ax,ax
c001b5b6:	09 d8                	or     eax,ebx
c001b5b8:	ef                   	out    dx,eax
c001b5b9:	83 c4 0c             	add    esp,0xc
c001b5bc:	5b                   	pop    ebx
c001b5bd:	5e                   	pop    esi
c001b5be:	5f                   	pop    edi
c001b5bf:	5d                   	pop    ebp
c001b5c0:	c3                   	ret    
c001b5c1:	c7 44 24 20 eb 30 02 c0 	mov    DWORD PTR [esp+0x20],0xc00230eb
c001b5c9:	83 c4 0c             	add    esp,0xc
c001b5cc:	5b                   	pop    ebx
c001b5cd:	5e                   	pop    esi
c001b5ce:	5f                   	pop    edi
c001b5cf:	5d                   	pop    ebp
c001b5d0:	e9 42 5f ff ff       	jmp    c0011517 <KePanic(char const*)>
c001b5d5:	90                   	nop

c001b5d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b5d6:	55                   	push   ebp
c001b5d7:	57                   	push   edi
c001b5d8:	56                   	push   esi
c001b5d9:	53                   	push   ebx
c001b5da:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b5e0:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b5e7:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b5ee:	0f 85 bd 00 00 00    	jne    c001b6b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b5f4:	83 ec 0c             	sub    esp,0xc
c001b5f7:	68 14 01 00 00       	push   0x114
c001b5fc:	e8 d2 c4 fe ff       	call   c0007ad3 <malloc>
c001b601:	83 c4 0c             	add    esp,0xc
c001b604:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b60a:	68 f1 30 02 c0       	push   0xc00230f1
c001b60f:	50                   	push   eax
c001b610:	89 c3                	mov    ebx,eax
c001b612:	e8 b9 04 ff ff       	call   c000bad0 <File::File(char const*, Process*)>
c001b617:	83 c4 10             	add    esp,0x10
c001b61a:	85 db                	test   ebx,ebx
c001b61c:	0f 84 6b 02 00 00    	je     c001b88d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b622:	57                   	push   edi
c001b623:	57                   	push   edi
c001b624:	6a 01                	push   0x1
c001b626:	53                   	push   ebx
c001b627:	e8 c2 04 ff ff       	call   c000baee <File::open(FileOpenMode)>
c001b62c:	83 c4 10             	add    esp,0x10
c001b62f:	85 c0                	test   eax,eax
c001b631:	0f 85 56 02 00 00    	jne    c001b88d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b637:	52                   	push   edx
c001b638:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b63c:	50                   	push   eax
c001b63d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b641:	50                   	push   eax
c001b642:	53                   	push   ebx
c001b643:	e8 a8 07 ff ff       	call   c000bdf0 <File::stat(unsigned long long*, bool*)>
c001b648:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b64c:	40                   	inc    eax
c001b64d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b650:	e8 7e c4 fe ff       	call   c0007ad3 <malloc>
c001b655:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b659:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b65d:	59                   	pop    ecx
c001b65e:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b663:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b665:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b669:	51                   	push   ecx
c001b66a:	50                   	push   eax
c001b66b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b66f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b673:	53                   	push   ebx
c001b674:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b677:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b67b:	83 c4 20             	add    esp,0x20
c001b67e:	89 c8                	mov    eax,ecx
c001b680:	99                   	cdq    
c001b681:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b685:	0f 85 02 02 00 00    	jne    c001b88d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b68b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b68f:	0f 85 f8 01 00 00    	jne    c001b88d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b695:	83 ec 0c             	sub    esp,0xc
c001b698:	53                   	push   ebx
c001b699:	e8 ae 04 ff ff       	call   c000bb4c <File::close()>
c001b69e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6a2:	83 c4 10             	add    esp,0x10
c001b6a5:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b6ac:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b6b1:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b6b9:	31 c9                	xor    ecx,ecx
c001b6bb:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b6c2:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b6c8:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b6cf:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b6d5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b6da:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b6e2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b6e7:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b6ef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b6f3:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b6fb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b6ff:	39 cd                	cmp    ebp,ecx
c001b701:	0f 8e 86 01 00 00    	jle    c001b88d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b707:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b70a:	d4 40                	aam    0x40
c001b70c:	d5 39                	aad    0x39
c001b70e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b712:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b716:	d4 40                	aam    0x40
c001b718:	d5 39                	aad    0x39
c001b71a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b71e:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b722:	d4 40                	aam    0x40
c001b724:	d5 39                	aad    0x39
c001b726:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b72a:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b72e:	d4 40                	aam    0x40
c001b730:	d5 39                	aad    0x39
c001b732:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b736:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b73a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b73e:	3c 56                	cmp    al,0x56
c001b740:	74 47                	je     c001b789 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b742:	d4 40                	aam    0x40
c001b744:	d5 39                	aad    0x39
c001b746:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b749:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b74d:	0f b6 db             	movzx  ebx,bl
c001b750:	c1 e3 04             	shl    ebx,0x4
c001b753:	d4 40                	aam    0x40
c001b755:	d5 39                	aad    0x39
c001b757:	83 e8 30             	sub    eax,0x30
c001b75a:	0f b6 c0             	movzx  eax,al
c001b75d:	09 c3                	or     ebx,eax
c001b75f:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b763:	c1 e3 04             	shl    ebx,0x4
c001b766:	d4 40                	aam    0x40
c001b768:	d5 39                	aad    0x39
c001b76a:	83 e8 30             	sub    eax,0x30
c001b76d:	0f b6 c0             	movzx  eax,al
c001b770:	09 c3                	or     ebx,eax
c001b772:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b776:	c1 e3 04             	shl    ebx,0x4
c001b779:	d4 40                	aam    0x40
c001b77b:	d5 39                	aad    0x39
c001b77d:	83 e8 30             	sub    eax,0x30
c001b780:	0f b6 c0             	movzx  eax,al
c001b783:	09 c3                	or     ebx,eax
c001b785:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b789:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b78d:	80 fb 58             	cmp    bl,0x58
c001b790:	74 49                	je     c001b7db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b792:	88 d8                	mov    al,bl
c001b794:	d4 40                	aam    0x40
c001b796:	d5 39                	aad    0x39
c001b798:	83 e8 30             	sub    eax,0x30
c001b79b:	0f b6 f8             	movzx  edi,al
c001b79e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b7a2:	c1 e7 04             	shl    edi,0x4
c001b7a5:	d4 40                	aam    0x40
c001b7a7:	d5 39                	aad    0x39
c001b7a9:	83 e8 30             	sub    eax,0x30
c001b7ac:	0f b6 c0             	movzx  eax,al
c001b7af:	09 c7                	or     edi,eax
c001b7b1:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b7b5:	c1 e7 04             	shl    edi,0x4
c001b7b8:	d4 40                	aam    0x40
c001b7ba:	d5 39                	aad    0x39
c001b7bc:	83 e8 30             	sub    eax,0x30
c001b7bf:	0f b6 c0             	movzx  eax,al
c001b7c2:	09 c7                	or     edi,eax
c001b7c4:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b7c8:	c1 e7 04             	shl    edi,0x4
c001b7cb:	d4 40                	aam    0x40
c001b7cd:	d5 39                	aad    0x39
c001b7cf:	83 e8 30             	sub    eax,0x30
c001b7d2:	0f b6 c0             	movzx  eax,al
c001b7d5:	09 c7                	or     edi,eax
c001b7d7:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b7db:	8d 41 10             	lea    eax,[ecx+0x10]
c001b7de:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b7e2:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b7e6:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b7ea:	83 f9 0a             	cmp    ecx,0xa
c001b7ed:	74 07                	je     c001b7f6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b7ef:	47                   	inc    edi
c001b7f0:	39 c5                	cmp    ebp,eax
c001b7f2:	75 16                	jne    c001b80a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b7f4:	89 e8                	mov    eax,ebp
c001b7f6:	83 f9 0a             	cmp    ecx,0xa
c001b7f9:	0f 94 c1             	sete   cl
c001b7fc:	0f b6 c9             	movzx  ecx,cl
c001b7ff:	01 c1                	add    ecx,eax
c001b801:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b806:	75 0f                	jne    c001b817 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b808:	eb 1c                	jmp    c001b826 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b80a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b80d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b811:	40                   	inc    eax
c001b812:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b815:	eb cb                	jmp    c001b7e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b817:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b81b:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b820:	0f 85 d9 fe ff ff    	jne    c001b6ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b826:	80 fb 58             	cmp    bl,0x58
c001b829:	74 10                	je     c001b83b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b82b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b830:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b835:	0f 85 c4 fe ff ff    	jne    c001b6ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b83b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b83f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b843:	83 e8 30             	sub    eax,0x30
c001b846:	c1 e0 04             	shl    eax,0x4
c001b849:	83 eb 30             	sub    ebx,0x30
c001b84c:	09 d8                	or     eax,ebx
c001b84e:	0f b6 c0             	movzx  eax,al
c001b851:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b855:	0f 85 a4 fe ff ff    	jne    c001b6ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b85b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b85f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b863:	83 e8 30             	sub    eax,0x30
c001b866:	c1 e0 04             	shl    eax,0x4
c001b869:	83 eb 30             	sub    ebx,0x30
c001b86c:	09 d8                	or     eax,ebx
c001b86e:	0f b6 c0             	movzx  eax,al
c001b871:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b875:	0f 85 84 fe ff ff    	jne    c001b6ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b87b:	50                   	push   eax
c001b87c:	50                   	push   eax
c001b87d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b881:	50                   	push   eax
c001b882:	56                   	push   esi
c001b883:	e8 c8 4d fe ff       	call   c0000650 <strcpy>
c001b888:	83 c4 10             	add    esp,0x10
c001b88b:	eb 05                	jmp    c001b892 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b88d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b890:	31 f6                	xor    esi,esi
c001b892:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b898:	89 f0                	mov    eax,esi
c001b89a:	5b                   	pop    ebx
c001b89b:	5e                   	pop    esi
c001b89c:	5f                   	pop    edi
c001b89d:	5d                   	pop    ebp
c001b89e:	c3                   	ret    
c001b89f:	90                   	nop

c001b8a0 <PCI::checkBus(unsigned char)>:
c001b8a0:	56                   	push   esi
c001b8a1:	53                   	push   ebx
c001b8a2:	31 db                	xor    ebx,ebx
c001b8a4:	51                   	push   ecx
c001b8a5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b8aa:	52                   	push   edx
c001b8ab:	53                   	push   ebx
c001b8ac:	43                   	inc    ebx
c001b8ad:	56                   	push   esi
c001b8ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8b2:	e8 0f 03 00 00       	call   c001bbc6 <PCI::checkDevice(unsigned char, unsigned char)>
c001b8b7:	83 c4 10             	add    esp,0x10
c001b8ba:	83 fb 20             	cmp    ebx,0x20
c001b8bd:	75 eb                	jne    c001b8aa <PCI::checkBus(unsigned char)+0xa>
c001b8bf:	58                   	pop    eax
c001b8c0:	5b                   	pop    ebx
c001b8c1:	5e                   	pop    esi
c001b8c2:	c3                   	ret    
c001b8c3:	90                   	nop

c001b8c4 <PCI::foundDevice(PCIDeviceInfo)>:
c001b8c4:	55                   	push   ebp
c001b8c5:	57                   	push   edi
c001b8c6:	56                   	push   esi
c001b8c7:	53                   	push   ebx
c001b8c8:	83 ec 1c             	sub    esp,0x1c
c001b8cb:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b8d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b8d4:	3d ff ff 00 00       	cmp    eax,0xffff
c001b8d9:	0f 84 63 01 00 00    	je     c001ba42 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b8df:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b8e4:	66 3d 06 04          	cmp    ax,0x406
c001b8e8:	75 2c                	jne    c001b916 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b8ea:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b8ef:	50                   	push   eax
c001b8f0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b8f5:	50                   	push   eax
c001b8f6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b8fb:	50                   	push   eax
c001b8fc:	53                   	push   ebx
c001b8fd:	e8 62 fb ff ff       	call   c001b464 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b902:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b906:	0f b6 c0             	movzx  eax,al
c001b909:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b90d:	83 c4 2c             	add    esp,0x2c
c001b910:	5b                   	pop    ebx
c001b911:	5e                   	pop    esi
c001b912:	5f                   	pop    edi
c001b913:	5d                   	pop    ebp
c001b914:	eb 8a                	jmp    c001b8a0 <PCI::checkBus(unsigned char)>
c001b916:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b91b:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b921:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b925:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b929:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b92d:	85 d2                	test   edx,edx
c001b92f:	74 34                	je     c001b965 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b931:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b934:	85 c9                	test   ecx,ecx
c001b936:	74 29                	je     c001b961 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b938:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b93e:	31 f5                	xor    ebp,esi
c001b940:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b946:	75 19                	jne    c001b961 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b948:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b94e:	75 11                	jne    c001b961 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b950:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b957:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b95b:	0f 84 e1 00 00 00    	je     c001ba42 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b961:	8b 12                	mov    edx,DWORD PTR [edx]
c001b963:	eb c8                	jmp    c001b92d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b965:	3d 01 06 00 00       	cmp    eax,0x601
c001b96a:	75 19                	jne    c001b985 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b96c:	83 ec 0c             	sub    esp,0xc
c001b96f:	68 64 01 00 00       	push   0x164
c001b974:	e8 5a c1 fe ff       	call   c0007ad3 <malloc>
c001b979:	89 04 24             	mov    DWORD PTR [esp],eax
c001b97c:	89 c5                	mov    ebp,eax
c001b97e:	e8 ab 0e 00 00       	call   c001c82e <SATABus::SATABus()>
c001b983:	eb 1e                	jmp    c001b9a3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b985:	3d 01 01 00 00       	cmp    eax,0x101
c001b98a:	75 62                	jne    c001b9ee <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b98c:	83 ec 0c             	sub    esp,0xc
c001b98f:	68 70 02 00 00       	push   0x270
c001b994:	e8 3a c1 fe ff       	call   c0007ad3 <malloc>
c001b999:	89 04 24             	mov    DWORD PTR [esp],eax
c001b99c:	89 c5                	mov    ebp,eax
c001b99e:	e8 f3 02 00 00       	call   c001bc96 <IDE::IDE()>
c001b9a3:	58                   	pop    eax
c001b9a4:	5a                   	pop    edx
c001b9a5:	55                   	push   ebp
c001b9a6:	53                   	push   ebx
c001b9a7:	e8 a4 0f ff ff       	call   c000c950 <Device::addChild(Device*)>
c001b9ac:	83 ec 1c             	sub    esp,0x1c
c001b9af:	b9 09 00 00 00       	mov    ecx,0x9
c001b9b4:	fc                   	cld    
c001b9b5:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b9b9:	89 e7                	mov    edi,esp
c001b9bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b9bd:	55                   	push   ebp
c001b9be:	e8 d3 0e ff ff       	call   c000c896 <Device::preOpenPCI(PCIDeviceInfo)>
c001b9c3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b9c6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b9ca:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b9d2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b9da:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b9e2:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b9e5:	83 c4 4c             	add    esp,0x4c
c001b9e8:	5b                   	pop    ebx
c001b9e9:	5e                   	pop    esi
c001b9ea:	5f                   	pop    edi
c001b9eb:	5d                   	pop    ebp
c001b9ec:	ff e0                	jmp    eax
c001b9ee:	83 ec 0c             	sub    esp,0xc
c001b9f1:	68 58 01 00 00       	push   0x158
c001b9f6:	e8 d8 c0 fe ff       	call   c0007ad3 <malloc>
c001b9fb:	5a                   	pop    edx
c001b9fc:	59                   	pop    ecx
c001b9fd:	68 0a 31 02 c0       	push   0xc002310a
c001ba02:	50                   	push   eax
c001ba03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ba07:	e8 e2 11 ff ff       	call   c000cbee <DriverlessDevice::DriverlessDevice(char const*)>
c001ba0c:	5e                   	pop    esi
c001ba0d:	5f                   	pop    edi
c001ba0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba12:	50                   	push   eax
c001ba13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ba17:	53                   	push   ebx
c001ba18:	e8 33 0f ff ff       	call   c000c950 <Device::addChild(Device*)>
c001ba1d:	83 c4 10             	add    esp,0x10
c001ba20:	b9 09 00 00 00       	mov    ecx,0x9
c001ba25:	fc                   	cld    
c001ba26:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ba2a:	89 fe                	mov    esi,edi
c001ba2c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba32:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ba36:	83 c4 1c             	add    esp,0x1c
c001ba39:	5b                   	pop    ebx
c001ba3a:	5e                   	pop    esi
c001ba3b:	5f                   	pop    edi
c001ba3c:	5d                   	pop    ebp
c001ba3d:	e9 54 0e ff ff       	jmp    c000c896 <Device::preOpenPCI(PCIDeviceInfo)>
c001ba42:	83 c4 1c             	add    esp,0x1c
c001ba45:	5b                   	pop    ebx
c001ba46:	5e                   	pop    esi
c001ba47:	5f                   	pop    edi
c001ba48:	5d                   	pop    ebp
c001ba49:	c3                   	ret    

c001ba4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ba4a:	55                   	push   ebp
c001ba4b:	57                   	push   edi
c001ba4c:	56                   	push   esi
c001ba4d:	53                   	push   ebx
c001ba4e:	83 ec 68             	sub    esp,0x68
c001ba51:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ba58:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ba5c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba60:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ba67:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ba6c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ba70:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ba77:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001ba7c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ba80:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001ba85:	6a 0c                	push   0xc
c001ba87:	57                   	push   edi
c001ba88:	53                   	push   ebx
c001ba89:	56                   	push   esi
c001ba8a:	55                   	push   ebp
c001ba8b:	e8 24 f8 ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba90:	83 c4 20             	add    esp,0x20
c001ba93:	57                   	push   edi
c001ba94:	53                   	push   ebx
c001ba95:	56                   	push   esi
c001ba96:	55                   	push   ebp
c001ba97:	e8 0e f9 ff ff       	call   c001b3aa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ba9c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001baa1:	57                   	push   edi
c001baa2:	53                   	push   ebx
c001baa3:	56                   	push   esi
c001baa4:	55                   	push   ebp
c001baa5:	e8 96 f9 ff ff       	call   c001b440 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001baaa:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001baae:	83 c4 14             	add    esp,0x14
c001bab1:	6a 3c                	push   0x3c
c001bab3:	57                   	push   edi
c001bab4:	53                   	push   ebx
c001bab5:	56                   	push   esi
c001bab6:	55                   	push   ebp
c001bab7:	e8 f8 f7 ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001babc:	0f b6 c4             	movzx  eax,ah
c001babf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bac3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bac7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bacb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bad0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bad6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001badc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bae0:	83 c4 20             	add    esp,0x20
c001bae3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bae8:	74 30                	je     c001bb1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001baea:	31 c0                	xor    eax,eax
c001baec:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001baf0:	7e 28                	jle    c001bb1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001baf2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bafa:	39 cb                	cmp    ebx,ecx
c001bafc:	75 19                	jne    c001bb17 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bafe:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bb06:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bb0a:	75 0b                	jne    c001bb17 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb0c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bb13:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bb17:	40                   	inc    eax
c001bb18:	eb d2                	jmp    c001baec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bb1a:	31 d2                	xor    edx,edx
c001bb1c:	83 ec 0c             	sub    esp,0xc
c001bb1f:	57                   	push   edi
c001bb20:	53                   	push   ebx
c001bb21:	56                   	push   esi
c001bb22:	52                   	push   edx
c001bb23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bb27:	55                   	push   ebp
c001bb28:	e8 5f f9 ff ff       	call   c001b48c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb2d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bb31:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bb35:	42                   	inc    edx
c001bb36:	83 c4 20             	add    esp,0x20
c001bb39:	83 fa 06             	cmp    edx,0x6
c001bb3c:	75 de                	jne    c001bb1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bb3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb42:	83 ec 0c             	sub    esp,0xc
c001bb45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb49:	c1 e2 08             	shl    edx,0x8
c001bb4c:	0f b6 c4             	movzx  eax,ah
c001bb4f:	09 d0                	or     eax,edx
c001bb51:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bb56:	6a 02                	push   0x2
c001bb58:	57                   	push   edi
c001bb59:	53                   	push   ebx
c001bb5a:	56                   	push   esi
c001bb5b:	55                   	push   ebp
c001bb5c:	e8 53 f7 ff ff       	call   c001b2b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb61:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bb66:	83 c4 20             	add    esp,0x20
c001bb69:	57                   	push   edi
c001bb6a:	53                   	push   ebx
c001bb6b:	56                   	push   esi
c001bb6c:	55                   	push   ebp
c001bb6d:	e8 82 f8 ff ff       	call   c001b3f4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bb72:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bb76:	57                   	push   edi
c001bb77:	53                   	push   ebx
c001bb78:	56                   	push   esi
c001bb79:	55                   	push   ebp
c001bb7a:	e8 df f7 ff ff       	call   c001b35e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb7f:	b9 09 00 00 00       	mov    ecx,0x9
c001bb84:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bb89:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bb8d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bb91:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bb95:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bb99:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bb9d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bba1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bba5:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bba9:	83 ec 0c             	sub    esp,0xc
c001bbac:	fc                   	cld    
c001bbad:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bbb1:	89 e7                	mov    edi,esp
c001bbb3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bbb5:	55                   	push   ebp
c001bbb6:	e8 09 fd ff ff       	call   c001b8c4 <PCI::foundDevice(PCIDeviceInfo)>
c001bbbb:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bbc1:	5b                   	pop    ebx
c001bbc2:	5e                   	pop    esi
c001bbc3:	5f                   	pop    edi
c001bbc4:	5d                   	pop    ebp
c001bbc5:	c3                   	ret    

c001bbc6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bbc6:	55                   	push   ebp
c001bbc7:	57                   	push   edi
c001bbc8:	56                   	push   esi
c001bbc9:	53                   	push   ebx
c001bbca:	83 ec 0c             	sub    esp,0xc
c001bbcd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bbd2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bbd7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bbdb:	6a 00                	push   0x0
c001bbdd:	56                   	push   esi
c001bbde:	57                   	push   edi
c001bbdf:	55                   	push   ebp
c001bbe0:	e8 79 f7 ff ff       	call   c001b35e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bbe5:	6a 00                	push   0x0
c001bbe7:	56                   	push   esi
c001bbe8:	57                   	push   edi
c001bbe9:	55                   	push   ebp
c001bbea:	e8 5b fe ff ff       	call   c001ba4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bbef:	83 c4 20             	add    esp,0x20
c001bbf2:	6a 00                	push   0x0
c001bbf4:	56                   	push   esi
c001bbf5:	57                   	push   edi
c001bbf6:	55                   	push   ebp
c001bbf7:	e8 86 f7 ff ff       	call   c001b382 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bbfc:	83 c4 10             	add    esp,0x10
c001bbff:	a8 80                	test   al,0x80
c001bc01:	74 2d                	je     c001bc30 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bc03:	bb 01 00 00 00       	mov    ebx,0x1
c001bc08:	53                   	push   ebx
c001bc09:	56                   	push   esi
c001bc0a:	57                   	push   edi
c001bc0b:	55                   	push   ebp
c001bc0c:	e8 4d f7 ff ff       	call   c001b35e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc11:	83 c4 10             	add    esp,0x10
c001bc14:	0f b7 c0             	movzx  eax,ax
c001bc17:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc1c:	74 0c                	je     c001bc2a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bc1e:	53                   	push   ebx
c001bc1f:	56                   	push   esi
c001bc20:	57                   	push   edi
c001bc21:	55                   	push   ebp
c001bc22:	e8 23 fe ff ff       	call   c001ba4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc27:	83 c4 10             	add    esp,0x10
c001bc2a:	43                   	inc    ebx
c001bc2b:	83 fb 08             	cmp    ebx,0x8
c001bc2e:	75 d8                	jne    c001bc08 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bc30:	83 c4 0c             	add    esp,0xc
c001bc33:	5b                   	pop    ebx
c001bc34:	5e                   	pop    esi
c001bc35:	5f                   	pop    edi
c001bc36:	5d                   	pop    ebp
c001bc37:	c3                   	ret    

c001bc38 <PCI::detect()>:
c001bc38:	56                   	push   esi
c001bc39:	53                   	push   ebx
c001bc3a:	53                   	push   ebx
c001bc3b:	31 db                	xor    ebx,ebx
c001bc3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc41:	6a 00                	push   0x0
c001bc43:	6a 00                	push   0x0
c001bc45:	6a 00                	push   0x0
c001bc47:	56                   	push   esi
c001bc48:	e8 35 f7 ff ff       	call   c001b382 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc4d:	83 c4 10             	add    esp,0x10
c001bc50:	a8 80                	test   al,0x80
c001bc52:	75 21                	jne    c001bc75 <PCI::detect()+0x3d>
c001bc54:	51                   	push   ecx
c001bc55:	51                   	push   ecx
c001bc56:	6a 00                	push   0x0
c001bc58:	56                   	push   esi
c001bc59:	e8 42 fc ff ff       	call   c001b8a0 <PCI::checkBus(unsigned char)>
c001bc5e:	83 c4 10             	add    esp,0x10
c001bc61:	eb 2a                	jmp    c001bc8d <PCI::detect()+0x55>
c001bc63:	52                   	push   edx
c001bc64:	52                   	push   edx
c001bc65:	53                   	push   ebx
c001bc66:	43                   	inc    ebx
c001bc67:	56                   	push   esi
c001bc68:	e8 33 fc ff ff       	call   c001b8a0 <PCI::checkBus(unsigned char)>
c001bc6d:	83 c4 10             	add    esp,0x10
c001bc70:	83 fb 08             	cmp    ebx,0x8
c001bc73:	74 18                	je     c001bc8d <PCI::detect()+0x55>
c001bc75:	53                   	push   ebx
c001bc76:	6a 00                	push   0x0
c001bc78:	6a 00                	push   0x0
c001bc7a:	56                   	push   esi
c001bc7b:	e8 de f6 ff ff       	call   c001b35e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc80:	83 c4 10             	add    esp,0x10
c001bc83:	0f b7 c0             	movzx  eax,ax
c001bc86:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc8b:	74 d6                	je     c001bc63 <PCI::detect()+0x2b>
c001bc8d:	58                   	pop    eax
c001bc8e:	5b                   	pop    ebx
c001bc8f:	5e                   	pop    esi
c001bc90:	c3                   	ret    
c001bc91:	90                   	nop

c001bc92 <IDE::close(int, int, void*)>:
c001bc92:	83 c8 ff             	or     eax,0xffffffff
c001bc95:	c3                   	ret    

c001bc96 <IDE::IDE()>:
c001bc96:	83 ec 0c             	sub    esp,0xc
c001bc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc9d:	83 ec 08             	sub    esp,0x8
c001bca0:	68 50 31 02 c0       	push   0xc0023150
c001bca5:	50                   	push   eax
c001bca6:	e8 e9 0f ff ff       	call   c000cc94 <HardDiskController::HardDiskController(char const*)>
c001bcab:	83 c4 10             	add    esp,0x10
c001bcae:	ba e0 31 02 c0       	mov    edx,0xc00231e0
c001bcb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcb7:	89 10                	mov    DWORD PTR [eax],edx
c001bcb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcbd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bcc4:	90                   	nop
c001bcc5:	83 c4 0c             	add    esp,0xc
c001bcc8:	c3                   	ret    
c001bcc9:	90                   	nop

c001bcca <IDE::prepareInterrupt(unsigned char)>:
c001bcca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bccf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bcd3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bcdb:	c3                   	ret    

c001bcdc <selectDrive(unsigned char, unsigned char)>:
c001bcdc:	c3                   	ret    
c001bcdd:	90                   	nop

c001bcde <IDE::getBase(unsigned char)>:
c001bcde:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bce3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bce7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bcef:	c3                   	ret    

c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bcf0:	55                   	push   ebp
c001bcf1:	57                   	push   edi
c001bcf2:	56                   	push   esi
c001bcf3:	53                   	push   ebx
c001bcf4:	83 ec 1c             	sub    esp,0x1c
c001bcf7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bcfb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bcff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bd03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd07:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bd0a:	80 f9 03             	cmp    cl,0x3
c001bd0d:	77 4f                	ja     c001bd5e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bd0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd13:	0f b6 f2             	movzx  esi,dl
c001bd16:	0f b6 db             	movzx  ebx,bl
c001bd19:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bd1c:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bd21:	80 ca 80             	or     dl,0x80
c001bd24:	52                   	push   edx
c001bd25:	6a 0c                	push   0xc
c001bd27:	56                   	push   esi
c001bd28:	57                   	push   edi
c001bd29:	e8 c2 ff ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd2e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bd33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd37:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bd3b:	ee                   	out    dx,al
c001bd3c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bd41:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bd45:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bd49:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bd51:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bd55:	83 c4 2c             	add    esp,0x2c
c001bd58:	5b                   	pop    ebx
c001bd59:	5e                   	pop    esi
c001bd5a:	5f                   	pop    edi
c001bd5b:	5d                   	pop    ebp
c001bd5c:	eb 92                	jmp    c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd5e:	0f b6 cb             	movzx  ecx,bl
c001bd61:	83 f9 07             	cmp    ecx,0x7
c001bd64:	77 12                	ja     c001bd78 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bd66:	0f b6 d2             	movzx  edx,dl
c001bd69:	0f b6 db             	movzx  ebx,bl
c001bd6c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001bd74:	01 da                	add    edx,ebx
c001bd76:	eb 2f                	jmp    c001bda7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bd78:	83 f9 0d             	cmp    ecx,0xd
c001bd7b:	77 13                	ja     c001bd90 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bd7d:	0f b6 d2             	movzx  edx,dl
c001bd80:	0f b6 db             	movzx  ebx,bl
c001bd83:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bd8a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bd8e:	eb 17                	jmp    c001bda7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bd90:	83 f9 15             	cmp    ecx,0x15
c001bd93:	77 13                	ja     c001bda8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bd95:	0f b6 d2             	movzx  edx,dl
c001bd98:	0f b6 db             	movzx  ebx,bl
c001bd9b:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bda3:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bda7:	ee                   	out    dx,al
c001bda8:	83 c4 1c             	add    esp,0x1c
c001bdab:	5b                   	pop    ebx
c001bdac:	5e                   	pop    esi
c001bdad:	5f                   	pop    edi
c001bdae:	5d                   	pop    ebp
c001bdaf:	c3                   	ret    

c001bdb0 <IDE::read(unsigned char, unsigned char)>:
c001bdb0:	57                   	push   edi
c001bdb1:	56                   	push   esi
c001bdb2:	53                   	push   ebx
c001bdb3:	83 ec 10             	sub    esp,0x10
c001bdb6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bdba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bdbe:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bdc2:	8d 42 f8             	lea    eax,[edx-0x8]
c001bdc5:	3c 03                	cmp    al,0x3
c001bdc7:	77 48                	ja     c001be11 <IDE::read(unsigned char, unsigned char)+0x61>
c001bdc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bdcd:	0f b6 f1             	movzx  esi,cl
c001bdd0:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001bdd3:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001bdd8:	0c 80                	or     al,0x80
c001bdda:	50                   	push   eax
c001bddb:	6a 0c                	push   0xc
c001bddd:	56                   	push   esi
c001bdde:	53                   	push   ebx
c001bddf:	e8 0c ff ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bde4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bde8:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001bded:	0f b6 d2             	movzx  edx,dl
c001bdf0:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bdf4:	ec                   	in     al,dx
c001bdf5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bdf9:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001bdfe:	52                   	push   edx
c001bdff:	6a 0c                	push   0xc
c001be01:	56                   	push   esi
c001be02:	53                   	push   ebx
c001be03:	e8 e8 fe ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be08:	83 c4 20             	add    esp,0x20
c001be0b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001be0f:	eb 4c                	jmp    c001be5d <IDE::read(unsigned char, unsigned char)+0xad>
c001be11:	0f b6 f2             	movzx  esi,dl
c001be14:	83 fe 07             	cmp    esi,0x7
c001be17:	77 12                	ja     c001be2b <IDE::read(unsigned char, unsigned char)+0x7b>
c001be19:	0f b6 c9             	movzx  ecx,cl
c001be1c:	0f b6 d2             	movzx  edx,dl
c001be1f:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001be27:	01 c2                	add    edx,eax
c001be29:	eb 31                	jmp    c001be5c <IDE::read(unsigned char, unsigned char)+0xac>
c001be2b:	83 fe 0d             	cmp    esi,0xd
c001be2e:	77 13                	ja     c001be43 <IDE::read(unsigned char, unsigned char)+0x93>
c001be30:	0f b6 c9             	movzx  ecx,cl
c001be33:	0f b6 d2             	movzx  edx,dl
c001be36:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001be3d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001be41:	eb 19                	jmp    c001be5c <IDE::read(unsigned char, unsigned char)+0xac>
c001be43:	31 c0                	xor    eax,eax
c001be45:	83 fe 15             	cmp    esi,0x15
c001be48:	77 13                	ja     c001be5d <IDE::read(unsigned char, unsigned char)+0xad>
c001be4a:	0f b6 c9             	movzx  ecx,cl
c001be4d:	0f b6 d2             	movzx  edx,dl
c001be50:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001be58:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001be5c:	ec                   	in     al,dx
c001be5d:	83 c4 10             	add    esp,0x10
c001be60:	5b                   	pop    ebx
c001be61:	5e                   	pop    esi
c001be62:	5f                   	pop    edi
c001be63:	c3                   	ret    

c001be64 <IDE::waitInterrupt(unsigned char)>:
c001be64:	55                   	push   ebp
c001be65:	57                   	push   edi
c001be66:	56                   	push   esi
c001be67:	53                   	push   ebx
c001be68:	31 db                	xor    ebx,ebx
c001be6a:	83 ec 0c             	sub    esp,0xc
c001be6d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001be71:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001be76:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001be7e:	89 e8                	mov    eax,ebp
c001be80:	84 c0                	test   al,al
c001be82:	75 30                	jne    c001beb4 <IDE::waitInterrupt(unsigned char)+0x50>
c001be84:	50                   	push   eax
c001be85:	6a 0c                	push   0xc
c001be87:	56                   	push   esi
c001be88:	57                   	push   edi
c001be89:	e8 22 ff ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001be8e:	83 c4 10             	add    esp,0x10
c001be91:	a8 01                	test   al,0x1
c001be93:	75 27                	jne    c001bebc <IDE::waitInterrupt(unsigned char)+0x58>
c001be95:	f6 c3 04             	test   bl,0x4
c001be98:	75 12                	jne    c001beac <IDE::waitInterrupt(unsigned char)+0x48>
c001be9a:	83 fb 32             	cmp    ebx,0x32
c001be9d:	7e 0d                	jle    c001beac <IDE::waitInterrupt(unsigned char)+0x48>
c001be9f:	83 ec 0c             	sub    esp,0xc
c001bea2:	6a 64                	push   0x64
c001bea4:	e8 73 a4 ff ff       	call   c001631c <milliTenthSleep(unsigned int)>
c001bea9:	83 c4 10             	add    esp,0x10
c001beac:	83 fb 3c             	cmp    ebx,0x3c
c001beaf:	74 0b                	je     c001bebc <IDE::waitInterrupt(unsigned char)+0x58>
c001beb1:	43                   	inc    ebx
c001beb2:	eb c2                	jmp    c001be76 <IDE::waitInterrupt(unsigned char)+0x12>
c001beb4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bebc:	83 c4 0c             	add    esp,0xc
c001bebf:	89 e8                	mov    eax,ebp
c001bec1:	5b                   	pop    ebx
c001bec2:	5e                   	pop    esi
c001bec3:	5f                   	pop    edi
c001bec4:	5d                   	pop    ebp
c001bec5:	c3                   	ret    

c001bec6 <ideChannel0IRQHandler(regs*, void*)>:
c001bec6:	83 ec 10             	sub    esp,0x10
c001bec9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001becd:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bed4:	6a 07                	push   0x7
c001bed6:	6a 00                	push   0x0
c001bed8:	50                   	push   eax
c001bed9:	e8 d2 fe ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001bede:	83 c4 1c             	add    esp,0x1c
c001bee1:	c3                   	ret    

c001bee2 <ideChannel1IRQHandler(regs*, void*)>:
c001bee2:	83 ec 10             	sub    esp,0x10
c001bee5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bee9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bef0:	6a 07                	push   0x7
c001bef2:	6a 01                	push   0x1
c001bef4:	50                   	push   eax
c001bef5:	e8 b6 fe ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001befa:	83 c4 1c             	add    esp,0x1c
c001befd:	c3                   	ret    

c001befe <IDE::enableIRQs(unsigned char, bool)>:
c001befe:	57                   	push   edi
c001beff:	b8 02 00 00 00       	mov    eax,0x2
c001bf04:	56                   	push   esi
c001bf05:	53                   	push   ebx
c001bf06:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bf0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bf13:	74 02                	je     c001bf17 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bf15:	31 c0                	xor    eax,eax
c001bf17:	0f b6 db             	movzx  ebx,bl
c001bf1a:	bf 04 00 00 00       	mov    edi,0x4
c001bf1f:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bf26:	50                   	push   eax
c001bf27:	6a 0c                	push   0xc
c001bf29:	53                   	push   ebx
c001bf2a:	56                   	push   esi
c001bf2b:	e8 c0 fd ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf30:	83 c4 10             	add    esp,0x10
c001bf33:	50                   	push   eax
c001bf34:	6a 0c                	push   0xc
c001bf36:	53                   	push   ebx
c001bf37:	56                   	push   esi
c001bf38:	e8 73 fe ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001bf3d:	83 c4 10             	add    esp,0x10
c001bf40:	4f                   	dec    edi
c001bf41:	75 f0                	jne    c001bf33 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bf43:	5b                   	pop    ebx
c001bf44:	5e                   	pop    esi
c001bf45:	5f                   	pop    edi
c001bf46:	c3                   	ret    
c001bf47:	90                   	nop

c001bf48 <IDE::open(int, int, void*)>:
c001bf48:	55                   	push   ebp
c001bf49:	57                   	push   edi
c001bf4a:	56                   	push   esi
c001bf4b:	53                   	push   ebx
c001bf4c:	83 ec 1c             	sub    esp,0x1c
c001bf4f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bf53:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bf5a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bf63:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bf6c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bf73:	0f 85 da 02 00 00    	jne    c001c253 <IDE::open(int, int, void*)+0x30b>
c001bf79:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bf7f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bf83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf87:	83 e0 7f             	and    eax,0x7f
c001bf8a:	83 f8 05             	cmp    eax,0x5
c001bf8d:	74 05                	je     c001bf94 <IDE::open(int, int, void*)+0x4c>
c001bf8f:	83 f8 0f             	cmp    eax,0xf
c001bf92:	75 32                	jne    c001bfc6 <IDE::open(int, int, void*)+0x7e>
c001bf94:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bf9a:	83 e0 fc             	and    eax,0xfffffffc
c001bf9d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bfa4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bfaa:	83 e0 fc             	and    eax,0xfffffffc
c001bfad:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bfb4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bfba:	83 e0 fc             	and    eax,0xfffffffc
c001bfbd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bfc4:	eb 14                	jmp    c001bfda <IDE::open(int, int, void*)+0x92>
c001bfc6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bfd0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bfda:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001bfe1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bfe6:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bfed:	89 fa                	mov    edx,edi
c001bfef:	89 f1                	mov    ecx,esi
c001bff1:	c1 e1 10             	shl    ecx,0x10
c001bff4:	89 e8                	mov    eax,ebp
c001bff6:	c1 e0 0b             	shl    eax,0xb
c001bff9:	09 c1                	or     ecx,eax
c001bffb:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c002:	c1 e0 08             	shl    eax,0x8
c001c005:	09 c1                	or     ecx,eax
c001c007:	89 c8                	mov    eax,ecx
c001c009:	0d 08 00 00 80       	or     eax,0x80000008
c001c00e:	ef                   	out    dx,eax
c001c00f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c014:	ed                   	in     eax,dx
c001c015:	c1 e8 10             	shr    eax,0x10
c001c018:	3d ff ff 00 00       	cmp    eax,0xffff
c001c01d:	0f 84 f9 00 00 00    	je     c001c11c <IDE::open(int, int, void*)+0x1d4>
c001c023:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c029:	89 fa                	mov    edx,edi
c001c02b:	89 c8                	mov    eax,ecx
c001c02d:	ef                   	out    dx,eax
c001c02e:	b0 fe                	mov    al,0xfe
c001c030:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c035:	ee                   	out    dx,al
c001c036:	89 c8                	mov    eax,ecx
c001c038:	89 fa                	mov    edx,edi
c001c03a:	ef                   	out    dx,eax
c001c03b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c040:	ed                   	in     eax,dx
c001c041:	3c fe                	cmp    al,0xfe
c001c043:	0f 85 a4 00 00 00    	jne    c001c0ed <IDE::open(int, int, void*)+0x1a5>
c001c049:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c04f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c056:	74 30                	je     c001c088 <IDE::open(int, int, void*)+0x140>
c001c058:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c05e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c062:	83 ec 0c             	sub    esp,0xc
c001c065:	40                   	inc    eax
c001c066:	0f b6 c0             	movzx  eax,al
c001c069:	50                   	push   eax
c001c06a:	55                   	push   ebp
c001c06b:	56                   	push   esi
c001c06c:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c072:	51                   	push   ecx
c001c073:	e8 74 38 ff ff       	call   c000f8ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c078:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c07d:	83 c4 1c             	add    esp,0x1c
c001c080:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c086:	eb 0a                	jmp    c001c092 <IDE::open(int, int, void*)+0x14a>
c001c088:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c092:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c099:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c09e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c0a5:	89 ea                	mov    edx,ebp
c001c0a7:	c1 e1 10             	shl    ecx,0x10
c001c0aa:	c1 e0 08             	shl    eax,0x8
c001c0ad:	09 c1                	or     ecx,eax
c001c0af:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c0b6:	c1 e0 0b             	shl    eax,0xb
c001c0b9:	09 c1                	or     ecx,eax
c001c0bb:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c0c1:	89 c8                	mov    eax,ecx
c001c0c3:	ef                   	out    dx,eax
c001c0c4:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c0ca:	be fc 0c 00 00       	mov    esi,0xcfc
c001c0cf:	89 f2                	mov    edx,esi
c001c0d1:	89 f8                	mov    eax,edi
c001c0d3:	ee                   	out    dx,al
c001c0d4:	89 c8                	mov    eax,ecx
c001c0d6:	89 ea                	mov    edx,ebp
c001c0d8:	ef                   	out    dx,eax
c001c0d9:	89 f2                	mov    edx,esi
c001c0db:	ed                   	in     eax,dx
c001c0dc:	0f b6 c0             	movzx  eax,al
c001c0df:	39 f8                	cmp    eax,edi
c001c0e1:	74 49                	je     c001c12c <IDE::open(int, int, void*)+0x1e4>
c001c0e3:	83 ec 0c             	sub    esp,0xc
c001c0e6:	68 68 31 02 c0       	push   0xc0023168
c001c0eb:	eb 37                	jmp    c001c124 <IDE::open(int, int, void*)+0x1dc>
c001c0ed:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c0f6:	75 1a                	jne    c001c112 <IDE::open(int, int, void*)+0x1ca>
c001c0f8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c0fd:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c102:	74 05                	je     c001c109 <IDE::open(int, int, void*)+0x1c1>
c001c104:	83 c0 80             	add    eax,0xffffff80
c001c107:	75 09                	jne    c001c112 <IDE::open(int, int, void*)+0x1ca>
c001c109:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c110:	eb 1a                	jmp    c001c12c <IDE::open(int, int, void*)+0x1e4>
c001c112:	83 ec 0c             	sub    esp,0xc
c001c115:	68 70 31 02 c0       	push   0xc0023170
c001c11a:	eb 08                	jmp    c001c124 <IDE::open(int, int, void*)+0x1dc>
c001c11c:	83 ec 0c             	sub    esp,0xc
c001c11f:	68 a1 31 02 c0       	push   0xc00231a1
c001c124:	e8 ee 53 ff ff       	call   c0011517 <KePanic(char const*)>
c001c129:	83 c4 10             	add    esp,0x10
c001c12c:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c133:	74 1a                	je     c001c14f <IDE::open(int, int, void*)+0x207>
c001c135:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c13b:	83 e0 fc             	and    eax,0xfffffffc
c001c13e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c145:	83 c0 08             	add    eax,0x8
c001c148:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c14f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c155:	89 c2                	mov    edx,eax
c001c157:	83 e2 0f             	and    edx,0xf
c001c15a:	83 fa 08             	cmp    edx,0x8
c001c15d:	75 0a                	jne    c001c169 <IDE::open(int, int, void*)+0x221>
c001c15f:	83 e8 02             	sub    eax,0x2
c001c162:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c169:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c16f:	89 c2                	mov    edx,eax
c001c171:	83 e2 0f             	and    edx,0xf
c001c174:	83 fa 08             	cmp    edx,0x8
c001c177:	75 0a                	jne    c001c183 <IDE::open(int, int, void*)+0x23b>
c001c179:	83 e8 02             	sub    eax,0x2
c001c17c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c183:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c18a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c191:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c194:	89 d0                	mov    eax,edx
c001c196:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c19a:	8d 7a 01             	lea    edi,[edx+0x1]
c001c19d:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c1a1:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c1a5:	83 e1 3f             	and    ecx,0x3f
c001c1a8:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c1ac:	89 f9                	mov    ecx,edi
c001c1ae:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c1b5:	8d 78 02             	lea    edi,[eax+0x2]
c001c1b8:	0f b6 c9             	movzx  ecx,cl
c001c1bb:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c1be:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c1c2:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c1c6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c1ca:	83 e2 3f             	and    edx,0x3f
c001c1cd:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c1d1:	89 f9                	mov    ecx,edi
c001c1d3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c1d9:	8d 78 03             	lea    edi,[eax+0x3]
c001c1dc:	0f b6 d1             	movzx  edx,cl
c001c1df:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c1e2:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c1e6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c1ea:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c1ee:	83 e1 3f             	and    ecx,0x3f
c001c1f1:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c1f5:	89 f9                	mov    ecx,edi
c001c1f7:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c1fd:	8d 78 04             	lea    edi,[eax+0x4]
c001c200:	0f b6 c9             	movzx  ecx,cl
c001c203:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c206:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c20a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c20e:	89 fa                	mov    edx,edi
c001c210:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c216:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c21a:	83 e2 3f             	and    edx,0x3f
c001c21d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c221:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c228:	66 85 f6             	test   si,si
c001c22b:	74 65                	je     c001c292 <IDE::open(int, int, void*)+0x34a>
c001c22d:	89 f9                	mov    ecx,edi
c001c22f:	83 c0 05             	add    eax,0x5
c001c232:	0f b6 d1             	movzx  edx,cl
c001c235:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c238:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c23c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c240:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c246:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c24a:	83 e0 3f             	and    eax,0x3f
c001c24d:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c251:	eb 3f                	jmp    c001c292 <IDE::open(int, int, void*)+0x34a>
c001c253:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c25a:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c260:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c267:	05 06 02 00 00       	add    eax,0x206
c001c26c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c273:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c27a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c281:	05 06 02 00 00       	add    eax,0x206
c001c286:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c28d:	e9 bd fe ff ff       	jmp    c001c14f <IDE::open(int, int, void*)+0x207>
c001c292:	50                   	push   eax
c001c293:	50                   	push   eax
c001c294:	6a 00                	push   0x0
c001c296:	53                   	push   ebx
c001c297:	e8 2e fa ff ff       	call   c001bcca <IDE::prepareInterrupt(unsigned char)>
c001c29c:	5a                   	pop    edx
c001c29d:	59                   	pop    ecx
c001c29e:	6a 01                	push   0x1
c001c2a0:	53                   	push   ebx
c001c2a1:	e8 24 fa ff ff       	call   c001bcca <IDE::prepareInterrupt(unsigned char)>
c001c2a6:	83 c4 0c             	add    esp,0xc
c001c2a9:	6a 00                	push   0x0
c001c2ab:	6a 00                	push   0x0
c001c2ad:	53                   	push   ebx
c001c2ae:	e8 4b fc ff ff       	call   c001befe <IDE::enableIRQs(unsigned char, bool)>
c001c2b3:	83 c4 0c             	add    esp,0xc
c001c2b6:	6a 00                	push   0x0
c001c2b8:	6a 01                	push   0x1
c001c2ba:	53                   	push   ebx
c001c2bb:	e8 3e fc ff ff       	call   c001befe <IDE::enableIRQs(unsigned char, bool)>
c001c2c0:	83 c4 10             	add    esp,0x10
c001c2c3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c2ca:	74 34                	je     c001c300 <IDE::open(int, int, void*)+0x3b8>
c001c2cc:	83 ec 0c             	sub    esp,0xc
c001c2cf:	53                   	push   ebx
c001c2d0:	6a 01                	push   0x1
c001c2d2:	68 c6 be 01 c0       	push   0xc001bec6
c001c2d7:	6a 0e                	push   0xe
c001c2d9:	53                   	push   ebx
c001c2da:	e8 1d 06 ff ff       	call   c000c8fc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c2df:	83 c4 14             	add    esp,0x14
c001c2e2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c2e8:	53                   	push   ebx
c001c2e9:	6a 01                	push   0x1
c001c2eb:	68 e2 be 01 c0       	push   0xc001bee2
c001c2f0:	6a 0f                	push   0xf
c001c2f2:	53                   	push   ebx
c001c2f3:	e8 04 06 ff ff       	call   c000c8fc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c2f8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c2fe:	eb 38                	jmp    c001c338 <IDE::open(int, int, void*)+0x3f0>
c001c300:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c30a:	83 ec 0c             	sub    esp,0xc
c001c30d:	53                   	push   ebx
c001c30e:	6a 00                	push   0x0
c001c310:	68 c6 be 01 c0       	push   0xc001bec6
c001c315:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c31b:	53                   	push   ebx
c001c31c:	e8 db 05 ff ff       	call   c000c8fc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c321:	83 c4 14             	add    esp,0x14
c001c324:	53                   	push   ebx
c001c325:	6a 00                	push   0x0
c001c327:	68 e2 be 01 c0       	push   0xc001bee2
c001c32c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c332:	53                   	push   ebx
c001c333:	e8 c4 05 ff ff       	call   c000c8fc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c338:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c33a:	83 c4 20             	add    esp,0x20
c001c33d:	83 ec 0c             	sub    esp,0xc
c001c340:	53                   	push   ebx
c001c341:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c344:	83 c4 0c             	add    esp,0xc
c001c347:	6a 07                	push   0x7
c001c349:	6a 00                	push   0x0
c001c34b:	53                   	push   ebx
c001c34c:	e8 5f fa ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c351:	83 c4 0c             	add    esp,0xc
c001c354:	6a 07                	push   0x7
c001c356:	6a 01                	push   0x1
c001c358:	53                   	push   ebx
c001c359:	e8 52 fa ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c35e:	83 c4 0c             	add    esp,0xc
c001c361:	6a 01                	push   0x1
c001c363:	6a 00                	push   0x0
c001c365:	53                   	push   ebx
c001c366:	e8 93 fb ff ff       	call   c001befe <IDE::enableIRQs(unsigned char, bool)>
c001c36b:	83 c4 0c             	add    esp,0xc
c001c36e:	6a 01                	push   0x1
c001c370:	6a 01                	push   0x1
c001c372:	53                   	push   ebx
c001c373:	e8 86 fb ff ff       	call   c001befe <IDE::enableIRQs(unsigned char, bool)>
c001c378:	83 c4 2c             	add    esp,0x2c
c001c37b:	31 c0                	xor    eax,eax
c001c37d:	5b                   	pop    ebx
c001c37e:	5e                   	pop    esi
c001c37f:	5f                   	pop    edi
c001c380:	5d                   	pop    ebp
c001c381:	c3                   	ret    

c001c382 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c382:	55                   	push   ebp
c001c383:	57                   	push   edi
c001c384:	56                   	push   esi
c001c385:	53                   	push   ebx
c001c386:	83 ec 1c             	sub    esp,0x1c
c001c389:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c38d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c391:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c395:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c399:	8d 42 f8             	lea    eax,[edx-0x8]
c001c39c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c3a0:	3c 03                	cmp    al,0x3
c001c3a2:	77 5a                	ja     c001c3fe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c3a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c3a8:	0f b6 db             	movzx  ebx,bl
c001c3ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c3af:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c3b2:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c3b7:	0c 80                	or     al,0x80
c001c3b9:	50                   	push   eax
c001c3ba:	6a 0c                	push   0xc
c001c3bc:	53                   	push   ebx
c001c3bd:	56                   	push   esi
c001c3be:	e8 2d f9 ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c3c7:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c3cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c3d0:	0f b6 d2             	movzx  edx,dl
c001c3d3:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c3d7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c3d9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c3de:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c3e2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c3e6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c3f2:	83 c4 2c             	add    esp,0x2c
c001c3f5:	5b                   	pop    ebx
c001c3f6:	5e                   	pop    esi
c001c3f7:	5f                   	pop    edi
c001c3f8:	5d                   	pop    ebp
c001c3f9:	e9 f2 f8 ff ff       	jmp    c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3fe:	0f b6 c2             	movzx  eax,dl
c001c401:	83 f8 07             	cmp    eax,0x7
c001c404:	77 12                	ja     c001c418 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c406:	0f b6 db             	movzx  ebx,bl
c001c409:	0f b6 c2             	movzx  eax,dl
c001c40c:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c414:	01 c2                	add    edx,eax
c001c416:	eb 2f                	jmp    c001c447 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c418:	83 f8 0d             	cmp    eax,0xd
c001c41b:	77 13                	ja     c001c430 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c41d:	0f b6 db             	movzx  ebx,bl
c001c420:	0f b6 d2             	movzx  edx,dl
c001c423:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c42a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c42e:	eb 17                	jmp    c001c447 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c430:	83 f8 15             	cmp    eax,0x15
c001c433:	77 14                	ja     c001c449 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c435:	0f b6 db             	movzx  ebx,bl
c001c438:	0f b6 d2             	movzx  edx,dl
c001c43b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c443:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c447:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c449:	83 c4 1c             	add    esp,0x1c
c001c44c:	5b                   	pop    ebx
c001c44d:	5e                   	pop    esi
c001c44e:	5f                   	pop    edi
c001c44f:	5d                   	pop    ebp
c001c450:	c3                   	ret    
c001c451:	90                   	nop

c001c452 <IDE::detect()>:
c001c452:	55                   	push   ebp
c001c453:	57                   	push   edi
c001c454:	56                   	push   esi
c001c455:	53                   	push   ebx
c001c456:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c45c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c463:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c46a:	0f 85 9e 02 00 00    	jne    c001c70e <IDE::detect()+0x2bc>
c001c470:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c477:	31 f6                	xor    esi,esi
c001c479:	31 ff                	xor    edi,edi
c001c47b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c483:	89 f8                	mov    eax,edi
c001c485:	c1 e0 06             	shl    eax,0x6
c001c488:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c490:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c494:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c49c:	c1 e0 04             	shl    eax,0x4
c001c49f:	83 c8 a0             	or     eax,0xffffffa0
c001c4a2:	0f b6 c0             	movzx  eax,al
c001c4a5:	50                   	push   eax
c001c4a6:	6a 06                	push   0x6
c001c4a8:	56                   	push   esi
c001c4a9:	53                   	push   ebx
c001c4aa:	e8 41 f8 ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4af:	83 c4 0c             	add    esp,0xc
c001c4b2:	6a 0c                	push   0xc
c001c4b4:	56                   	push   esi
c001c4b5:	53                   	push   ebx
c001c4b6:	e8 f5 f8 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c4bb:	83 c4 0c             	add    esp,0xc
c001c4be:	6a 0c                	push   0xc
c001c4c0:	56                   	push   esi
c001c4c1:	53                   	push   ebx
c001c4c2:	e8 e9 f8 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c4c7:	83 c4 0c             	add    esp,0xc
c001c4ca:	6a 0c                	push   0xc
c001c4cc:	56                   	push   esi
c001c4cd:	53                   	push   ebx
c001c4ce:	e8 dd f8 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c4d3:	83 c4 0c             	add    esp,0xc
c001c4d6:	6a 0c                	push   0xc
c001c4d8:	56                   	push   esi
c001c4d9:	53                   	push   ebx
c001c4da:	e8 d1 f8 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c4df:	68 ec 00 00 00       	push   0xec
c001c4e4:	6a 07                	push   0x7
c001c4e6:	56                   	push   esi
c001c4e7:	53                   	push   ebx
c001c4e8:	e8 03 f8 ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4ed:	83 c4 1c             	add    esp,0x1c
c001c4f0:	6a 0c                	push   0xc
c001c4f2:	56                   	push   esi
c001c4f3:	53                   	push   ebx
c001c4f4:	e8 b7 f8 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c4f9:	83 c4 0c             	add    esp,0xc
c001c4fc:	6a 0c                	push   0xc
c001c4fe:	56                   	push   esi
c001c4ff:	53                   	push   ebx
c001c500:	e8 ab f8 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c505:	83 c4 0c             	add    esp,0xc
c001c508:	6a 0c                	push   0xc
c001c50a:	56                   	push   esi
c001c50b:	53                   	push   ebx
c001c50c:	e8 9f f8 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c511:	83 c4 0c             	add    esp,0xc
c001c514:	6a 0c                	push   0xc
c001c516:	56                   	push   esi
c001c517:	53                   	push   ebx
c001c518:	e8 93 f8 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c51d:	83 c4 0c             	add    esp,0xc
c001c520:	6a 0c                	push   0xc
c001c522:	56                   	push   esi
c001c523:	53                   	push   ebx
c001c524:	e8 87 f8 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c529:	83 c4 10             	add    esp,0x10
c001c52c:	84 c0                	test   al,al
c001c52e:	0f 84 61 01 00 00    	je     c001c695 <IDE::detect()+0x243>
c001c534:	31 ed                	xor    ebp,ebp
c001c536:	50                   	push   eax
c001c537:	6a 0c                	push   0xc
c001c539:	56                   	push   esi
c001c53a:	53                   	push   ebx
c001c53b:	e8 70 f8 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c540:	83 c4 10             	add    esp,0x10
c001c543:	a8 01                	test   al,0x1
c001c545:	0f 85 6b 01 00 00    	jne    c001c6b6 <IDE::detect()+0x264>
c001c54b:	a8 80                	test   al,0x80
c001c54d:	75 04                	jne    c001c553 <IDE::detect()+0x101>
c001c54f:	a8 08                	test   al,0x8
c001c551:	75 23                	jne    c001c576 <IDE::detect()+0x124>
c001c553:	45                   	inc    ebp
c001c554:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c55a:	7e da                	jle    c001c536 <IDE::detect()+0xe4>
c001c55c:	83 ec 0c             	sub    esp,0xc
c001c55f:	6a 32                	push   0x32
c001c561:	e8 b6 9d ff ff       	call   c001631c <milliTenthSleep(unsigned int)>
c001c566:	83 c4 10             	add    esp,0x10
c001c569:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c56f:	75 c5                	jne    c001c536 <IDE::detect()+0xe4>
c001c571:	e9 40 01 00 00       	jmp    c001c6b6 <IDE::detect()+0x264>
c001c576:	31 c9                	xor    ecx,ecx
c001c578:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c57c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c580:	83 ec 0c             	sub    esp,0xc
c001c583:	68 80 00 00 00       	push   0x80
c001c588:	55                   	push   ebp
c001c589:	6a 00                	push   0x0
c001c58b:	56                   	push   esi
c001c58c:	53                   	push   ebx
c001c58d:	e8 f0 fd ff ff       	call   c001c382 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c592:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c597:	89 f8                	mov    eax,edi
c001c599:	c1 e0 06             	shl    eax,0x6
c001c59c:	01 d8                	add    eax,ebx
c001c59e:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c5a5:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c5ac:	89 d1                	mov    ecx,edx
c001c5ae:	89 f2                	mov    edx,esi
c001c5b0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c5b6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c5ba:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c5c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c5c4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c5cb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c5d3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c5da:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c5e2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c5e8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c5ef:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c5f5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c5f9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c5fd:	83 c4 20             	add    esp,0x20
c001c600:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c603:	83 c5 02             	add    ebp,0x2
c001c606:	83 c0 02             	add    eax,0x2
c001c609:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c60f:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c612:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c618:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c61c:	75 e2                	jne    c001c600 <IDE::detect()+0x1ae>
c001c61e:	89 f8                	mov    eax,edi
c001c620:	c1 e0 06             	shl    eax,0x6
c001c623:	01 d8                	add    eax,ebx
c001c625:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c62c:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c633:	c1 ea 09             	shr    edx,0x9
c001c636:	83 e2 01             	and    edx,0x1
c001c639:	80 e1 01             	and    cl,0x1
c001c63c:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c642:	75 22                	jne    c001c666 <IDE::detect()+0x214>
c001c644:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c64b:	74 47                	je     c001c694 <IDE::detect()+0x242>
c001c64d:	83 ec 0c             	sub    esp,0xc
c001c650:	68 7c 01 00 00       	push   0x17c
c001c655:	e8 79 b4 fe ff       	call   c0007ad3 <malloc>
c001c65a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c65d:	89 c5                	mov    ebp,eax
c001c65f:	e8 16 05 00 00       	call   c001cb7a <ATA::ATA()>
c001c664:	eb 17                	jmp    c001c67d <IDE::detect()+0x22b>
c001c666:	83 ec 0c             	sub    esp,0xc
c001c669:	68 84 01 00 00       	push   0x184
c001c66e:	e8 60 b4 fe ff       	call   c0007ad3 <malloc>
c001c673:	89 04 24             	mov    DWORD PTR [esp],eax
c001c676:	89 c5                	mov    ebp,eax
c001c678:	e8 6f 0e 00 00       	call   c001d4ec <ATAPI::ATAPI()>
c001c67d:	5a                   	pop    edx
c001c67e:	59                   	pop    ecx
c001c67f:	55                   	push   ebp
c001c680:	53                   	push   ebx
c001c681:	e8 ca 02 ff ff       	call   c000c950 <Device::addChild(Device*)>
c001c686:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c689:	53                   	push   ebx
c001c68a:	57                   	push   edi
c001c68b:	6a 00                	push   0x0
c001c68d:	55                   	push   ebp
c001c68e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c691:	83 c4 20             	add    esp,0x20
c001c694:	47                   	inc    edi
c001c695:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c69a:	74 0d                	je     c001c6a9 <IDE::detect()+0x257>
c001c69c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c6a4:	e9 da fd ff ff       	jmp    c001c483 <IDE::detect()+0x31>
c001c6a9:	4e                   	dec    esi
c001c6aa:	74 62                	je     c001c70e <IDE::detect()+0x2bc>
c001c6ac:	be 01 00 00 00       	mov    esi,0x1
c001c6b1:	e9 c5 fd ff ff       	jmp    c001c47b <IDE::detect()+0x29>
c001c6b6:	50                   	push   eax
c001c6b7:	6a 04                	push   0x4
c001c6b9:	56                   	push   esi
c001c6ba:	53                   	push   ebx
c001c6bb:	e8 f0 f6 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c6c0:	83 c4 0c             	add    esp,0xc
c001c6c3:	6a 05                	push   0x5
c001c6c5:	56                   	push   esi
c001c6c6:	53                   	push   ebx
c001c6c7:	89 c5                	mov    ebp,eax
c001c6c9:	e8 e2 f6 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c6ce:	89 e9                	mov    ecx,ebp
c001c6d0:	83 c4 10             	add    esp,0x10
c001c6d3:	0f b6 e9             	movzx  ebp,cl
c001c6d6:	83 fd 14             	cmp    ebp,0x14
c001c6d9:	74 2d                	je     c001c708 <IDE::detect()+0x2b6>
c001c6db:	83 fd 69             	cmp    ebp,0x69
c001c6de:	75 b5                	jne    c001c695 <IDE::detect()+0x243>
c001c6e0:	3c 96                	cmp    al,0x96
c001c6e2:	75 b1                	jne    c001c695 <IDE::detect()+0x243>
c001c6e4:	68 a1 00 00 00       	push   0xa1
c001c6e9:	6a 07                	push   0x7
c001c6eb:	56                   	push   esi
c001c6ec:	53                   	push   ebx
c001c6ed:	e8 fe f5 ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6f2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c6f9:	e8 1e 9c ff ff       	call   c001631c <milliTenthSleep(unsigned int)>
c001c6fe:	83 c4 10             	add    esp,0x10
c001c701:	b1 01                	mov    cl,0x1
c001c703:	e9 70 fe ff ff       	jmp    c001c578 <IDE::detect()+0x126>
c001c708:	3c eb                	cmp    al,0xeb
c001c70a:	75 cf                	jne    c001c6db <IDE::detect()+0x289>
c001c70c:	eb d6                	jmp    c001c6e4 <IDE::detect()+0x292>
c001c70e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c714:	5b                   	pop    ebx
c001c715:	5e                   	pop    esi
c001c716:	5f                   	pop    edi
c001c717:	5d                   	pop    ebp
c001c718:	c3                   	ret    
c001c719:	90                   	nop

c001c71a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c71a:	55                   	push   ebp
c001c71b:	57                   	push   edi
c001c71c:	56                   	push   esi
c001c71d:	53                   	push   ebx
c001c71e:	83 ec 1c             	sub    esp,0x1c
c001c721:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c725:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c729:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c72d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c731:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c735:	88 c3                	mov    bl,al
c001c737:	25 ff 00 00 00       	and    eax,0xff
c001c73c:	0f 84 88 00 00 00    	je     c001c7ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c742:	83 ec 0c             	sub    esp,0xc
c001c745:	89 c7                	mov    edi,eax
c001c747:	68 cb 31 02 c0       	push   0xc00231cb
c001c74c:	e8 b9 e1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c751:	83 c4 10             	add    esp,0x10
c001c754:	83 ff 01             	cmp    edi,0x1
c001c757:	74 6b                	je     c001c7c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c759:	83 ff 02             	cmp    edi,0x2
c001c75c:	75 58                	jne    c001c7b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c75e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c763:	50                   	push   eax
c001c764:	6a 01                	push   0x1
c001c766:	01 ff                	add    edi,edi
c001c768:	09 fe                	or     esi,edi
c001c76a:	89 f0                	mov    eax,esi
c001c76c:	0f b6 f0             	movzx  esi,al
c001c76f:	c1 e6 06             	shl    esi,0x6
c001c772:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c77a:	50                   	push   eax
c001c77b:	55                   	push   ebp
c001c77c:	e8 2f f6 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c781:	83 c4 10             	add    esp,0x10
c001c784:	a8 01                	test   al,0x1
c001c786:	74 02                	je     c001c78a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c788:	b3 07                	mov    bl,0x7
c001c78a:	a8 02                	test   al,0x2
c001c78c:	74 02                	je     c001c790 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c78e:	b3 03                	mov    bl,0x3
c001c790:	a8 04                	test   al,0x4
c001c792:	74 02                	je     c001c796 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c794:	b3 14                	mov    bl,0x14
c001c796:	a8 08                	test   al,0x8
c001c798:	74 02                	je     c001c79c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c79a:	b3 03                	mov    bl,0x3
c001c79c:	a8 10                	test   al,0x10
c001c79e:	74 02                	je     c001c7a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c7a0:	b3 15                	mov    bl,0x15
c001c7a2:	a8 20                	test   al,0x20
c001c7a4:	74 02                	je     c001c7a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c7a6:	b3 03                	mov    bl,0x3
c001c7a8:	a8 40                	test   al,0x40
c001c7aa:	74 02                	je     c001c7ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c7ac:	b3 16                	mov    bl,0x16
c001c7ae:	a8 80                	test   al,0x80
c001c7b0:	74 18                	je     c001c7ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7b2:	b3 0d                	mov    bl,0xd
c001c7b4:	eb 14                	jmp    c001c7ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7b6:	83 ff 03             	cmp    edi,0x3
c001c7b9:	74 0d                	je     c001c7c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c7bb:	83 ff 04             	cmp    edi,0x4
c001c7be:	75 0a                	jne    c001c7ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7c0:	b3 08                	mov    bl,0x8
c001c7c2:	eb 06                	jmp    c001c7ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7c4:	b3 13                	mov    bl,0x13
c001c7c6:	eb 02                	jmp    c001c7ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7c8:	b3 17                	mov    bl,0x17
c001c7ca:	83 c4 1c             	add    esp,0x1c
c001c7cd:	88 d8                	mov    al,bl
c001c7cf:	5b                   	pop    ebx
c001c7d0:	5e                   	pop    esi
c001c7d1:	5f                   	pop    edi
c001c7d2:	5d                   	pop    ebp
c001c7d3:	c3                   	ret    

c001c7d4 <IDE::polling(unsigned char, unsigned int)>:
c001c7d4:	57                   	push   edi
c001c7d5:	56                   	push   esi
c001c7d6:	53                   	push   ebx
c001c7d7:	bb 04 00 00 00       	mov    ebx,0x4
c001c7dc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c7e0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c7e5:	52                   	push   edx
c001c7e6:	6a 0c                	push   0xc
c001c7e8:	56                   	push   esi
c001c7e9:	57                   	push   edi
c001c7ea:	e8 c1 f5 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c7ef:	83 c4 10             	add    esp,0x10
c001c7f2:	4b                   	dec    ebx
c001c7f3:	75 f0                	jne    c001c7e5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c7f5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c7fa:	50                   	push   eax
c001c7fb:	6a 0c                	push   0xc
c001c7fd:	56                   	push   esi
c001c7fe:	57                   	push   edi
c001c7ff:	e8 ac f5 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001c804:	83 c4 10             	add    esp,0x10
c001c807:	a8 01                	test   al,0x1
c001c809:	75 17                	jne    c001c822 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c80b:	a8 20                	test   al,0x20
c001c80d:	75 0f                	jne    c001c81e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c80f:	4b                   	dec    ebx
c001c810:	74 10                	je     c001c822 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c812:	a8 80                	test   al,0x80
c001c814:	75 e4                	jne    c001c7fa <IDE::polling(unsigned char, unsigned int)+0x26>
c001c816:	a8 08                	test   al,0x8
c001c818:	74 e0                	je     c001c7fa <IDE::polling(unsigned char, unsigned int)+0x26>
c001c81a:	31 c0                	xor    eax,eax
c001c81c:	eb 06                	jmp    c001c824 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c81e:	b0 01                	mov    al,0x1
c001c820:	eb 02                	jmp    c001c824 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c822:	b0 02                	mov    al,0x2
c001c824:	5b                   	pop    ebx
c001c825:	5e                   	pop    esi
c001c826:	5f                   	pop    edi
c001c827:	c3                   	ret    

c001c828 <SATABus::close(int, int, void*)>:
c001c828:	31 c0                	xor    eax,eax
c001c82a:	c3                   	ret    
c001c82b:	90                   	nop

c001c82c <SATABus::detect()>:
c001c82c:	c3                   	ret    
c001c82d:	90                   	nop

c001c82e <SATABus::SATABus()>:
c001c82e:	83 ec 0c             	sub    esp,0xc
c001c831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c835:	83 ec 08             	sub    esp,0x8
c001c838:	68 04 32 02 c0       	push   0xc0023204
c001c83d:	50                   	push   eax
c001c83e:	e8 51 04 ff ff       	call   c000cc94 <HardDiskController::HardDiskController(char const*)>
c001c843:	83 c4 10             	add    esp,0x10
c001c846:	ba 30 32 02 c0       	mov    edx,0xc0023230
c001c84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84f:	89 10                	mov    DWORD PTR [eax],edx
c001c851:	83 ec 0c             	sub    esp,0xc
c001c854:	6a 50                	push   0x50
c001c856:	e8 56 b6 fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c85b:	83 c4 10             	add    esp,0x10
c001c85e:	89 c2                	mov    edx,eax
c001c860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c864:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c86a:	83 ec 0c             	sub    esp,0xc
c001c86d:	6a 50                	push   0x50
c001c86f:	e8 81 cd fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c874:	83 c4 10             	add    esp,0x10
c001c877:	89 c2                	mov    edx,eax
c001c879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c883:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c888:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c88c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c892:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c896:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c89c:	83 ec 0c             	sub    esp,0xc
c001c89f:	6a 03                	push   0x3
c001c8a1:	6a 50                	push   0x50
c001c8a3:	51                   	push   ecx
c001c8a4:	52                   	push   edx
c001c8a5:	50                   	push   eax
c001c8a6:	e8 5d d6 fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c8ab:	83 c4 20             	add    esp,0x20
c001c8ae:	90                   	nop
c001c8af:	83 c4 0c             	add    esp,0xc
c001c8b2:	c3                   	ret    
c001c8b3:	90                   	nop

c001c8b4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c8b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8b8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c8bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c8be:	09 c2                	or     edx,eax
c001c8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c8ca:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8cc:	31 c0                	xor    eax,eax
c001c8ce:	c1 e9 08             	shr    ecx,0x8
c001c8d1:	83 e1 0f             	and    ecx,0xf
c001c8d4:	39 c8                	cmp    eax,ecx
c001c8d6:	74 0a                	je     c001c8e2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c8d8:	f6 c2 01             	test   dl,0x1
c001c8db:	74 08                	je     c001c8e5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c8dd:	d1 ea                	shr    edx,1
c001c8df:	40                   	inc    eax
c001c8e0:	eb f2                	jmp    c001c8d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c8e2:	83 c8 ff             	or     eax,0xffffffff
c001c8e5:	c3                   	ret    

c001c8e6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c8e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8ea:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c8ed:	89 c2                	mov    edx,eax
c001c8ef:	c1 ea 08             	shr    edx,0x8
c001c8f2:	83 e2 0f             	and    edx,0xf
c001c8f5:	4a                   	dec    edx
c001c8f6:	75 32                	jne    c001c92a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c8f8:	83 e0 0f             	and    eax,0xf
c001c8fb:	83 f8 03             	cmp    eax,0x3
c001c8fe:	75 2a                	jne    c001c92a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c900:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c903:	b8 02 00 00 00       	mov    eax,0x2
c001c908:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c90e:	74 1c                	je     c001c92c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c910:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c916:	b8 04 00 00 00       	mov    eax,0x4
c001c91b:	74 0f                	je     c001c92c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c91d:	31 c0                	xor    eax,eax
c001c91f:	83 fa 03             	cmp    edx,0x3
c001c922:	0f 94 c0             	sete   al
c001c925:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c929:	c3                   	ret    
c001c92a:	31 c0                	xor    eax,eax
c001c92c:	c3                   	ret    
c001c92d:	90                   	nop

c001c92e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c92e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c932:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c935:	0f ba e2 0f          	bt     edx,0xf
c001c939:	72 f7                	jb     c001c932 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c93b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c93e:	83 ca 10             	or     edx,0x10
c001c941:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c944:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c947:	83 ca 01             	or     edx,0x1
c001c94a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c94d:	c3                   	ret    

c001c94e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c94e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c952:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c955:	83 e2 fe             	and    edx,0xfffffffe
c001c958:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c95b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c95e:	83 e2 ef             	and    edx,0xffffffef
c001c961:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c964:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c967:	0f ba e2 0e          	bt     edx,0xe
c001c96b:	72 f7                	jb     c001c964 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c96d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c970:	0f ba e2 0f          	bt     edx,0xf
c001c974:	72 ee                	jb     c001c964 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c976:	c3                   	ret    
c001c977:	90                   	nop

c001c978 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c978:	55                   	push   ebp
c001c979:	57                   	push   edi
c001c97a:	56                   	push   esi
c001c97b:	53                   	push   ebx
c001c97c:	83 ec 1c             	sub    esp,0x1c
c001c97f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c983:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c987:	53                   	push   ebx
c001c988:	57                   	push   edi
c001c989:	e8 c0 ff ff ff       	call   c001c94e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c98e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c992:	83 ec 0c             	sub    esp,0xc
c001c995:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c99b:	c1 e5 0a             	shl    ebp,0xa
c001c99e:	01 e8                	add    eax,ebp
c001c9a0:	89 03                	mov    DWORD PTR [ebx],eax
c001c9a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9a4:	68 00 04 00 00       	push   0x400
c001c9a9:	6a 00                	push   0x0
c001c9ab:	50                   	push   eax
c001c9ac:	e8 3f 3b fe ff       	call   c00004f0 <memset>
c001c9b1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c9b7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c9bb:	83 c4 1c             	add    esp,0x1c
c001c9be:	01 e8                	add    eax,ebp
c001c9c0:	89 03                	mov    DWORD PTR [ebx],eax
c001c9c2:	c1 e6 08             	shl    esi,0x8
c001c9c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c9cc:	81 c6 00 80 00 00    	add    esi,0x8000
c001c9d2:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c9d8:	01 f0                	add    eax,esi
c001c9da:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c9dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9e0:	68 00 01 00 00       	push   0x100
c001c9e5:	6a 00                	push   0x0
c001c9e7:	50                   	push   eax
c001c9e8:	e8 03 3b fe ff       	call   c00004f0 <memset>
c001c9ed:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c9f3:	31 d2                	xor    edx,edx
c001c9f5:	01 f0                	add    eax,esi
c001c9f7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c9fa:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ca01:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001ca07:	01 ee                	add    esi,ebp
c001ca09:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ca0d:	83 c4 10             	add    esp,0x10
c001ca10:	c1 e5 0d             	shl    ebp,0xd
c001ca13:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001ca19:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001ca1f:	83 c6 20             	add    esi,0x20
c001ca22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca26:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ca2c:	01 e8                	add    eax,ebp
c001ca2e:	01 d0                	add    eax,edx
c001ca30:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ca33:	52                   	push   edx
c001ca34:	68 00 01 00 00       	push   0x100
c001ca39:	6a 00                	push   0x0
c001ca3b:	50                   	push   eax
c001ca3c:	e8 af 3a fe ff       	call   c00004f0 <memset>
c001ca41:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca47:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001ca4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca52:	83 c4 10             	add    esp,0x10
c001ca55:	01 e8                	add    eax,ebp
c001ca57:	01 d0                	add    eax,edx
c001ca59:	81 c2 00 01 00 00    	add    edx,0x100
c001ca5f:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ca62:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001ca68:	75 af                	jne    c001ca19 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001ca6a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ca71:	50                   	push   eax
c001ca72:	50                   	push   eax
c001ca73:	53                   	push   ebx
c001ca74:	57                   	push   edi
c001ca75:	e8 b4 fe ff ff       	call   c001c92e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ca7a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ca81:	83 c4 2c             	add    esp,0x2c
c001ca84:	5b                   	pop    ebx
c001ca85:	5e                   	pop    esi
c001ca86:	5f                   	pop    edi
c001ca87:	5d                   	pop    ebp
c001ca88:	c3                   	ret    
c001ca89:	90                   	nop

c001ca8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ca8a:	55                   	push   ebp
c001ca8b:	57                   	push   edi
c001ca8c:	56                   	push   esi
c001ca8d:	53                   	push   ebx
c001ca8e:	31 db                	xor    ebx,ebx
c001ca90:	83 ec 0c             	sub    esp,0xc
c001ca93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ca97:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ca9b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ca9e:	f7 c7 01 00 00 00    	test   edi,0x1
c001caa4:	74 7a                	je     c001cb20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001caa6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001caaa:	89 d8                	mov    eax,ebx
c001caac:	c1 e0 07             	shl    eax,0x7
c001caaf:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cab6:	55                   	push   ebp
c001cab7:	56                   	push   esi
c001cab8:	e8 29 fe ff ff       	call   c001c8e6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cabd:	5a                   	pop    edx
c001cabe:	59                   	pop    ecx
c001cabf:	83 f8 01             	cmp    eax,0x1
c001cac2:	75 21                	jne    c001cae5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cac4:	50                   	push   eax
c001cac5:	53                   	push   ebx
c001cac6:	55                   	push   ebp
c001cac7:	56                   	push   esi
c001cac8:	e8 ab fe ff ff       	call   c001c978 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cacd:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cad4:	e8 fa af fe ff       	call   c0007ad3 <malloc>
c001cad9:	89 04 24             	mov    DWORD PTR [esp],eax
c001cadc:	89 c5                	mov    ebp,eax
c001cade:	e8 c1 10 00 00       	call   c001dba4 <SATA::SATA()>
c001cae3:	eb 24                	jmp    c001cb09 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cae5:	83 f8 04             	cmp    eax,0x4
c001cae8:	75 36                	jne    c001cb20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001caea:	51                   	push   ecx
c001caeb:	53                   	push   ebx
c001caec:	55                   	push   ebp
c001caed:	56                   	push   esi
c001caee:	e8 85 fe ff ff       	call   c001c978 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001caf3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cafa:	e8 d4 af fe ff       	call   c0007ad3 <malloc>
c001caff:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb02:	89 c5                	mov    ebp,eax
c001cb04:	e8 f5 17 00 00       	call   c001e2fe <SATAPI::SATAPI()>
c001cb09:	58                   	pop    eax
c001cb0a:	5a                   	pop    edx
c001cb0b:	55                   	push   ebp
c001cb0c:	56                   	push   esi
c001cb0d:	e8 3e fe fe ff       	call   c000c950 <Device::addChild(Device*)>
c001cb12:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cb15:	56                   	push   esi
c001cb16:	6a 00                	push   0x0
c001cb18:	53                   	push   ebx
c001cb19:	55                   	push   ebp
c001cb1a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cb1d:	83 c4 20             	add    esp,0x20
c001cb20:	d1 ef                	shr    edi,1
c001cb22:	43                   	inc    ebx
c001cb23:	83 fb 20             	cmp    ebx,0x20
c001cb26:	0f 85 72 ff ff ff    	jne    c001ca9e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cb2c:	83 c4 0c             	add    esp,0xc
c001cb2f:	5b                   	pop    ebx
c001cb30:	5e                   	pop    esi
c001cb31:	5f                   	pop    edi
c001cb32:	5d                   	pop    ebp
c001cb33:	c3                   	ret    

c001cb34 <SATABus::open(int, int, void*)>:
c001cb34:	83 ec 14             	sub    esp,0x14
c001cb37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb3b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cb41:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cb47:	52                   	push   edx
c001cb48:	50                   	push   eax
c001cb49:	e8 3c ff ff ff       	call   c001ca8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cb4e:	31 c0                	xor    eax,eax
c001cb50:	83 c4 1c             	add    esp,0x1c
c001cb53:	c3                   	ret    

c001cb54 <ATA::close(int, int, void*)>:
c001cb54:	83 ec 0c             	sub    esp,0xc
c001cb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb5b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cb61:	85 c0                	test   eax,eax
c001cb63:	74 0c                	je     c001cb71 <ATA::close(int, int, void*)+0x1d>
c001cb65:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb67:	83 ec 0c             	sub    esp,0xc
c001cb6a:	50                   	push   eax
c001cb6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cb6e:	83 c4 10             	add    esp,0x10
c001cb71:	31 c0                	xor    eax,eax
c001cb73:	83 c4 0c             	add    esp,0xc
c001cb76:	c3                   	ret    
c001cb77:	90                   	nop

c001cb78 <ATA::powerSaving(PowerSavingLevel)>:
c001cb78:	c3                   	ret    
c001cb79:	90                   	nop

c001cb7a <ATA::ATA()>:
c001cb7a:	83 ec 0c             	sub    esp,0xc
c001cb7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb81:	83 ec 04             	sub    esp,0x4
c001cb84:	68 00 02 00 00       	push   0x200
c001cb89:	68 fd 32 02 c0       	push   0xc00232fd
c001cb8e:	50                   	push   eax
c001cb8f:	e8 8a 01 ff ff       	call   c000cd1e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb94:	83 c4 10             	add    esp,0x10
c001cb97:	ba 70 32 02 c0       	mov    edx,0xc0023270
c001cb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba0:	89 10                	mov    DWORD PTR [eax],edx
c001cba2:	90                   	nop
c001cba3:	83 c4 0c             	add    esp,0xc
c001cba6:	c3                   	ret    
c001cba7:	90                   	nop

c001cba8 <ATA::flush(bool)>:
c001cba8:	53                   	push   ebx
c001cba9:	83 ec 08             	sub    esp,0x8
c001cbac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cbb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cbb5:	83 f8 01             	cmp    eax,0x1
c001cbb8:	19 c0                	sbb    eax,eax
c001cbba:	83 e0 fd             	and    eax,0xfffffffd
c001cbbd:	05 ea 00 00 00       	add    eax,0xea
c001cbc2:	50                   	push   eax
c001cbc3:	6a 07                	push   0x7
c001cbc5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbcc:	50                   	push   eax
c001cbcd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbd3:	e8 18 f1 ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbd8:	83 c4 0c             	add    esp,0xc
c001cbdb:	6a 00                	push   0x0
c001cbdd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbe4:	50                   	push   eax
c001cbe5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbeb:	e8 e4 fb ff ff       	call   c001c7d4 <IDE::polling(unsigned char, unsigned int)>
c001cbf0:	83 c4 18             	add    esp,0x18
c001cbf3:	5b                   	pop    ebx
c001cbf4:	c3                   	ret    
c001cbf5:	90                   	nop

c001cbf6 <ATA::readyForCommand()>:
c001cbf6:	56                   	push   esi
c001cbf7:	53                   	push   ebx
c001cbf8:	53                   	push   ebx
c001cbf9:	31 db                	xor    ebx,ebx
c001cbfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cbff:	51                   	push   ecx
c001cc00:	6a 0c                	push   0xc
c001cc02:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cc09:	50                   	push   eax
c001cc0a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cc10:	e8 9b f1 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001cc15:	83 c4 10             	add    esp,0x10
c001cc18:	a8 88                	test   al,0x88
c001cc1a:	74 1f                	je     c001cc3b <ATA::readyForCommand()+0x45>
c001cc1c:	43                   	inc    ebx
c001cc1d:	83 fb 63             	cmp    ebx,0x63
c001cc20:	7e dd                	jle    c001cbff <ATA::readyForCommand()+0x9>
c001cc22:	83 ec 0c             	sub    esp,0xc
c001cc25:	6a 0a                	push   0xa
c001cc27:	e8 f0 96 ff ff       	call   c001631c <milliTenthSleep(unsigned int)>
c001cc2c:	83 c4 10             	add    esp,0x10
c001cc2f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cc35:	75 c8                	jne    c001cbff <ATA::readyForCommand()+0x9>
c001cc37:	31 c0                	xor    eax,eax
c001cc39:	eb 02                	jmp    c001cc3d <ATA::readyForCommand()+0x47>
c001cc3b:	b0 01                	mov    al,0x1
c001cc3d:	5a                   	pop    edx
c001cc3e:	5b                   	pop    ebx
c001cc3f:	5e                   	pop    esi
c001cc40:	c3                   	ret    
c001cc41:	90                   	nop

c001cc42 <ATA::access(unsigned long long, int, void*, bool)>:
c001cc42:	55                   	push   ebp
c001cc43:	57                   	push   edi
c001cc44:	56                   	push   esi
c001cc45:	53                   	push   ebx
c001cc46:	83 ec 2c             	sub    esp,0x2c
c001cc49:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cc4d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cc51:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cc55:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cc59:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc5d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cc61:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cc65:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cc6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc6f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cc75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cc79:	c1 e0 06             	shl    eax,0x6
c001cc7c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cc84:	74 5b                	je     c001cce1 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cc86:	89 fa                	mov    edx,edi
c001cc88:	89 f0                	mov    eax,esi
c001cc8a:	c1 ea 1c             	shr    edx,0x1c
c001cc8d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001cc91:	89 d1                	mov    ecx,edx
c001cc93:	09 c1                	or     ecx,eax
c001cc95:	74 25                	je     c001ccbc <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cc97:	31 ed                	xor    ebp,ebp
c001cc99:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cca0:	89 fa                	mov    edx,edi
c001cca2:	89 f0                	mov    eax,esi
c001cca4:	0f ad d0             	shrd   eax,edx,cl
c001cca7:	d3 ea                	shr    edx,cl
c001cca9:	f6 c1 20             	test   cl,0x20
c001ccac:	74 02                	je     c001ccb0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ccae:	89 d0                	mov    eax,edx
c001ccb0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ccb4:	45                   	inc    ebp
c001ccb5:	83 fd 06             	cmp    ebp,0x6
c001ccb8:	75 df                	jne    c001cc99 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ccba:	eb 71                	jmp    c001cd2d <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001ccbc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ccc1:	89 f0                	mov    eax,esi
c001ccc3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ccca:	0f ac f8 10          	shrd   eax,edi,0x10
c001ccce:	bf 01 00 00 00       	mov    edi,0x1
c001ccd3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ccd7:	c1 ee 18             	shr    esi,0x18
c001ccda:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ccdf:	eb 53                	jmp    c001cd34 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cce1:	6a 00                	push   0x0
c001cce3:	6a 3f                	push   0x3f
c001cce5:	57                   	push   edi
c001cce6:	56                   	push   esi
c001cce7:	e8 d4 2a 00 00       	call   c001f7c0 <__umoddi3>
c001ccec:	83 c4 10             	add    esp,0x10
c001ccef:	40                   	inc    eax
c001ccf0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ccf4:	6a 00                	push   0x0
c001ccf6:	68 f0 03 00 00       	push   0x3f0
c001ccfb:	57                   	push   edi
c001ccfc:	56                   	push   esi
c001ccfd:	e8 be 29 00 00       	call   c001f6c0 <__udivdi3>
c001cd02:	83 c4 10             	add    esp,0x10
c001cd05:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cd0a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd11:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd16:	6a 00                	push   0x0
c001cd18:	6a 3f                	push   0x3f
c001cd1a:	57                   	push   edi
c001cd1b:	31 ff                	xor    edi,edi
c001cd1d:	56                   	push   esi
c001cd1e:	e8 9d 29 00 00       	call   c001f6c0 <__udivdi3>
c001cd23:	83 c4 10             	add    esp,0x10
c001cd26:	83 e0 0f             	and    eax,0xf
c001cd29:	89 c6                	mov    esi,eax
c001cd2b:	eb 07                	jmp    c001cd34 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cd2d:	31 f6                	xor    esi,esi
c001cd2f:	bf 02 00 00 00       	mov    edi,0x2
c001cd34:	50                   	push   eax
c001cd35:	6a 00                	push   0x0
c001cd37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd3e:	50                   	push   eax
c001cd3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd43:	e8 b6 f1 ff ff       	call   c001befe <IDE::enableIRQs(unsigned char, bool)>
c001cd48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd4b:	e8 a6 fe ff ff       	call   c001cbf6 <ATA::readyForCommand()>
c001cd50:	83 c4 10             	add    esp,0x10
c001cd53:	84 c0                	test   al,al
c001cd55:	75 0a                	jne    c001cd61 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001cd57:	be 01 00 00 00       	mov    esi,0x1
c001cd5c:	e9 9b 02 00 00       	jmp    c001cffc <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cd61:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cd67:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd6d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cd74:	c1 e0 04             	shl    eax,0x4
c001cd77:	09 c6                	or     esi,eax
c001cd79:	f7 c7 03 00 00 00    	test   edi,0x3
c001cd7f:	75 05                	jne    c001cd86 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001cd81:	83 ce a0             	or     esi,0xffffffa0
c001cd84:	eb 03                	jmp    c001cd89 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cd86:	83 ce e0             	or     esi,0xffffffe0
c001cd89:	89 f0                	mov    eax,esi
c001cd8b:	0f b6 f0             	movzx  esi,al
c001cd8e:	56                   	push   esi
c001cd8f:	6a 06                	push   0x6
c001cd91:	51                   	push   ecx
c001cd92:	52                   	push   edx
c001cd93:	e8 58 ef ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd98:	83 c4 10             	add    esp,0x10
c001cd9b:	6a 00                	push   0x0
c001cd9d:	6a 01                	push   0x1
c001cd9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cda6:	50                   	push   eax
c001cda7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdad:	e8 3e ef ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdb2:	89 f8                	mov    eax,edi
c001cdb4:	83 c4 10             	add    esp,0x10
c001cdb7:	0f b6 f0             	movzx  esi,al
c001cdba:	83 fe 02             	cmp    esi,0x2
c001cdbd:	75 6e                	jne    c001ce2d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001cdbf:	6a 00                	push   0x0
c001cdc1:	6a 08                	push   0x8
c001cdc3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdca:	50                   	push   eax
c001cdcb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdd1:	e8 1a ef ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdd6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cddb:	50                   	push   eax
c001cddc:	6a 09                	push   0x9
c001cdde:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cde5:	50                   	push   eax
c001cde6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdec:	e8 ff ee ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdf1:	83 c4 20             	add    esp,0x20
c001cdf4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cdf9:	50                   	push   eax
c001cdfa:	6a 0a                	push   0xa
c001cdfc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce03:	50                   	push   eax
c001ce04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce0a:	e8 e1 ee ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce0f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ce14:	50                   	push   eax
c001ce15:	6a 0b                	push   0xb
c001ce17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce1e:	50                   	push   eax
c001ce1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce25:	e8 c6 ee ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce2a:	83 c4 20             	add    esp,0x20
c001ce2d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ce32:	50                   	push   eax
c001ce33:	6a 02                	push   0x2
c001ce35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce3c:	50                   	push   eax
c001ce3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce43:	e8 a8 ee ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce48:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ce4d:	50                   	push   eax
c001ce4e:	6a 03                	push   0x3
c001ce50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce57:	50                   	push   eax
c001ce58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce5e:	e8 8d ee ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce63:	83 c4 20             	add    esp,0x20
c001ce66:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ce6b:	50                   	push   eax
c001ce6c:	6a 04                	push   0x4
c001ce6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce75:	50                   	push   eax
c001ce76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce7c:	e8 6f ee ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce86:	50                   	push   eax
c001ce87:	6a 05                	push   0x5
c001ce89:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce90:	50                   	push   eax
c001ce91:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce97:	e8 54 ee ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce9c:	83 c4 20             	add    esp,0x20
c001ce9f:	83 fe 02             	cmp    esi,0x2
c001cea2:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cea7:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001ceac:	85 c9                	test   ecx,ecx
c001ceae:	74 07                	je     c001ceb7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001ceb0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ceb5:	75 47                	jne    c001cefe <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001ceb7:	89 f8                	mov    eax,edi
c001ceb9:	0f b6 f8             	movzx  edi,al
c001cebc:	31 c0                	xor    eax,eax
c001cebe:	83 ff 02             	cmp    edi,0x2
c001cec1:	0f 95 c0             	setne  al
c001cec4:	89 c6                	mov    esi,eax
c001cec6:	74 0c                	je     c001ced4 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cec8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cecd:	b8 30 00 00 00       	mov    eax,0x30
c001ced2:	75 2f                	jne    c001cf03 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001ced4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ced8:	83 f2 01             	xor    edx,0x1
c001cedb:	85 c9                	test   ecx,ecx
c001cedd:	74 09                	je     c001cee8 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cedf:	84 d2                	test   dl,dl
c001cee1:	b8 24 00 00 00       	mov    eax,0x24
c001cee6:	75 1b                	jne    c001cf03 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cee8:	85 f6                	test   esi,esi
c001ceea:	0f 84 67 fe ff ff    	je     c001cd57 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cef0:	84 d2                	test   dl,dl
c001cef2:	b8 20 00 00 00       	mov    eax,0x20
c001cef7:	75 0a                	jne    c001cf03 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cef9:	e9 59 fe ff ff       	jmp    c001cd57 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cefe:	b8 34 00 00 00       	mov    eax,0x34
c001cf03:	50                   	push   eax
c001cf04:	6a 07                	push   0x7
c001cf06:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf0d:	50                   	push   eax
c001cf0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf14:	e8 d7 ed ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf19:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cf1d:	83 c4 10             	add    esp,0x10
c001cf20:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cf25:	85 f6                	test   esi,esi
c001cf27:	0f 84 b5 00 00 00    	je     c001cfe2 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cf2d:	50                   	push   eax
c001cf2e:	6a 01                	push   0x1
c001cf30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf37:	50                   	push   eax
c001cf38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf3e:	e8 91 f8 ff ff       	call   c001c7d4 <IDE::polling(unsigned char, unsigned int)>
c001cf43:	83 c4 10             	add    esp,0x10
c001cf46:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cf4c:	0f b6 c0             	movzx  eax,al
c001cf4f:	85 c0                	test   eax,eax
c001cf51:	74 1f                	je     c001cf72 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cf53:	50                   	push   eax
c001cf54:	89 c6                	mov    esi,eax
c001cf56:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cf5d:	0f b6 d2             	movzx  edx,dl
c001cf60:	50                   	push   eax
c001cf61:	52                   	push   edx
c001cf62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf68:	e8 ad f7 ff ff       	call   c001c71a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf6d:	e9 87 00 00 00       	jmp    c001cff9 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cf72:	85 ed                	test   ebp,ebp
c001cf74:	74 3b                	je     c001cfb1 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cf76:	31 ff                	xor    edi,edi
c001cf78:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cf7c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cf80:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cf85:	50                   	push   eax
c001cf86:	50                   	push   eax
c001cf87:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf8e:	50                   	push   eax
c001cf8f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf95:	e8 44 ed ff ff       	call   c001bcde <IDE::getBase(unsigned char)>
c001cf9a:	89 c2                	mov    edx,eax
c001cf9c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cfa1:	66 ef                	out    dx,ax
c001cfa3:	47                   	inc    edi
c001cfa4:	83 c4 10             	add    esp,0x10
c001cfa7:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cfad:	75 c9                	jne    c001cf78 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001cfaf:	eb 23                	jmp    c001cfd4 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cfb1:	51                   	push   ecx
c001cfb2:	0f b6 d2             	movzx  edx,dl
c001cfb5:	51                   	push   ecx
c001cfb6:	52                   	push   edx
c001cfb7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfbd:	e8 1c ed ff ff       	call   c001bcde <IDE::getBase(unsigned char)>
c001cfc2:	b9 00 01 00 00       	mov    ecx,0x100
c001cfc7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cfcb:	89 c2                	mov    edx,eax
c001cfcd:	fc                   	cld    
c001cfce:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cfd1:	83 c4 10             	add    esp,0x10
c001cfd4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cfdc:	4e                   	dec    esi
c001cfdd:	e9 43 ff ff ff       	jmp    c001cf25 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001cfe2:	31 f6                	xor    esi,esi
c001cfe4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cfe9:	74 11                	je     c001cffc <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cfeb:	50                   	push   eax
c001cfec:	50                   	push   eax
c001cfed:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001cff2:	50                   	push   eax
c001cff3:	53                   	push   ebx
c001cff4:	e8 af fb ff ff       	call   c001cba8 <ATA::flush(bool)>
c001cff9:	83 c4 10             	add    esp,0x10
c001cffc:	83 c4 2c             	add    esp,0x2c
c001cfff:	89 f0                	mov    eax,esi
c001d001:	5b                   	pop    ebx
c001d002:	5e                   	pop    esi
c001d003:	5f                   	pop    edi
c001d004:	5d                   	pop    ebp
c001d005:	c3                   	ret    

c001d006 <ATA::detectCHS()>:
c001d006:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d00a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d010:	c1 e0 06             	shl    eax,0x6
c001d013:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d019:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d023:	c7 44 24 04 54 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023254
c001d02b:	e9 e7 44 ff ff       	jmp    c0011517 <KePanic(char const*)>

c001d030 <ATA::open(int, int, void*)>:
c001d030:	53                   	push   ebx
c001d031:	83 ec 08             	sub    esp,0x8
c001d034:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d038:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d03c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d040:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d046:	c1 e0 06             	shl    eax,0x6
c001d049:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d04f:	01 d0                	add    eax,edx
c001d051:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d058:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d05e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d065:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d06f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d076:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d07c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d083:	75 0c                	jne    c001d091 <ATA::open(int, int, void*)+0x61>
c001d085:	83 ec 0c             	sub    esp,0xc
c001d088:	53                   	push   ebx
c001d089:	e8 78 ff ff ff       	call   c001d006 <ATA::detectCHS()>
c001d08e:	83 c4 10             	add    esp,0x10
c001d091:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d097:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d09d:	c1 e0 06             	shl    eax,0x6
c001d0a0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d0a7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d0b1:	d1 e8                	shr    eax,1
c001d0b3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d0b9:	6a 04                	push   0x4
c001d0bb:	6a 0c                	push   0xc
c001d0bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0c4:	50                   	push   eax
c001d0c5:	52                   	push   edx
c001d0c6:	e8 25 ec ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0cb:	90                   	nop
c001d0cc:	90                   	nop
c001d0cd:	6a 00                	push   0x0
c001d0cf:	6a 0c                	push   0xc
c001d0d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0d8:	50                   	push   eax
c001d0d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0df:	e8 0c ec ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0e4:	83 c4 14             	add    esp,0x14
c001d0e7:	53                   	push   ebx
c001d0e8:	e8 99 fc fe ff       	call   c000cd86 <PhysicalDisk::startCache()>
c001d0ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0f0:	e8 dd 0e ff ff       	call   c000dfd2 <createPartitionsForDisk(PhysicalDisk*)>
c001d0f5:	83 c4 18             	add    esp,0x18
c001d0f8:	31 c0                	xor    eax,eax
c001d0fa:	5b                   	pop    ebx
c001d0fb:	c3                   	ret    

c001d0fc <combineCharAndColour(char, unsigned char)>:
c001d0fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d101:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d107:	c1 e0 08             	shl    eax,0x8
c001d10a:	09 d0                	or     eax,edx
c001d10c:	c3                   	ret    

c001d10d <combineColours(unsigned char, unsigned char)>:
c001d10d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d112:	c1 e0 04             	shl    eax,0x4
c001d115:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d119:	c3                   	ret    

c001d11a <ATA::read(unsigned long long, int, void*)>:
c001d11a:	55                   	push   ebp
c001d11b:	57                   	push   edi
c001d11c:	56                   	push   esi
c001d11d:	be 04 00 00 00       	mov    esi,0x4
c001d122:	53                   	push   ebx
c001d123:	83 ec 0c             	sub    esp,0xc
c001d126:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d12a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d12e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d132:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d136:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d139:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d13f:	0f 87 a1 01 00 00    	ja     c001d2e6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d145:	85 c9                	test   ecx,ecx
c001d147:	be 06 00 00 00       	mov    esi,0x6
c001d14c:	0f 84 94 01 00 00    	je     c001d2e6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d152:	55                   	push   ebp
c001d153:	55                   	push   ebp
c001d154:	6a 00                	push   0x0
c001d156:	51                   	push   ecx
c001d157:	53                   	push   ebx
c001d158:	52                   	push   edx
c001d159:	50                   	push   eax
c001d15a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d15e:	e8 df fa ff ff       	call   c001cc42 <ATA::access(unsigned long long, int, void*, bool)>
c001d163:	83 c4 20             	add    esp,0x20
c001d166:	85 c0                	test   eax,eax
c001d168:	89 c6                	mov    esi,eax
c001d16a:	0f 85 71 01 00 00    	jne    c001d2e1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d170:	50                   	push   eax
c001d171:	bd 10 27 00 00       	mov    ebp,0x2710
c001d176:	50                   	push   eax
c001d177:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d17d:	6a 0f                	push   0xf
c001d17f:	6a 00                	push   0x0
c001d181:	89 da                	mov    edx,ebx
c001d183:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d189:	e8 7f ff ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001d18e:	59                   	pop    ecx
c001d18f:	b9 0a 00 00 00       	mov    ecx,0xa
c001d194:	5b                   	pop    ebx
c001d195:	0f b6 d8             	movzx  ebx,al
c001d198:	89 d0                	mov    eax,edx
c001d19a:	53                   	push   ebx
c001d19b:	99                   	cdq    
c001d19c:	f7 fd                	idiv   ebp
c001d19e:	99                   	cdq    
c001d19f:	f7 f9                	idiv   ecx
c001d1a1:	83 c2 30             	add    edx,0x30
c001d1a4:	0f b6 d2             	movzx  edx,dl
c001d1a7:	52                   	push   edx
c001d1a8:	e8 4f ff ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d1ad:	5f                   	pop    edi
c001d1ae:	bf e8 03 00 00       	mov    edi,0x3e8
c001d1b3:	5a                   	pop    edx
c001d1b4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d1ba:	53                   	push   ebx
c001d1bb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1c0:	99                   	cdq    
c001d1c1:	f7 ff                	idiv   edi
c001d1c3:	99                   	cdq    
c001d1c4:	f7 f9                	idiv   ecx
c001d1c6:	8d 42 30             	lea    eax,[edx+0x30]
c001d1c9:	0f b6 c0             	movzx  eax,al
c001d1cc:	50                   	push   eax
c001d1cd:	e8 2a ff ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d1d2:	5f                   	pop    edi
c001d1d3:	bf 64 00 00 00       	mov    edi,0x64
c001d1d8:	5a                   	pop    edx
c001d1d9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d1df:	53                   	push   ebx
c001d1e0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1e5:	99                   	cdq    
c001d1e6:	f7 ff                	idiv   edi
c001d1e8:	99                   	cdq    
c001d1e9:	f7 f9                	idiv   ecx
c001d1eb:	8d 42 30             	lea    eax,[edx+0x30]
c001d1ee:	0f b6 c0             	movzx  eax,al
c001d1f1:	50                   	push   eax
c001d1f2:	e8 05 ff ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d1f7:	5a                   	pop    edx
c001d1f8:	5a                   	pop    edx
c001d1f9:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d1ff:	53                   	push   ebx
c001d200:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d205:	99                   	cdq    
c001d206:	f7 f9                	idiv   ecx
c001d208:	99                   	cdq    
c001d209:	f7 f9                	idiv   ecx
c001d20b:	8d 42 30             	lea    eax,[edx+0x30]
c001d20e:	0f b6 c0             	movzx  eax,al
c001d211:	50                   	push   eax
c001d212:	e8 e5 fe ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d217:	5a                   	pop    edx
c001d218:	5a                   	pop    edx
c001d219:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d21f:	53                   	push   ebx
c001d220:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d225:	99                   	cdq    
c001d226:	f7 f9                	idiv   ecx
c001d228:	83 c2 30             	add    edx,0x30
c001d22b:	0f b6 d2             	movzx  edx,dl
c001d22e:	52                   	push   edx
c001d22f:	e8 c8 fe ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d234:	5a                   	pop    edx
c001d235:	5a                   	pop    edx
c001d236:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d23c:	53                   	push   ebx
c001d23d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d242:	99                   	cdq    
c001d243:	f7 fd                	idiv   ebp
c001d245:	99                   	cdq    
c001d246:	f7 f9                	idiv   ecx
c001d248:	8d 42 30             	lea    eax,[edx+0x30]
c001d24b:	0f b6 c0             	movzx  eax,al
c001d24e:	50                   	push   eax
c001d24f:	e8 a8 fe ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d254:	5d                   	pop    ebp
c001d255:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d25a:	5a                   	pop    edx
c001d25b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d261:	53                   	push   ebx
c001d262:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d267:	99                   	cdq    
c001d268:	f7 fd                	idiv   ebp
c001d26a:	99                   	cdq    
c001d26b:	f7 f9                	idiv   ecx
c001d26d:	8d 42 30             	lea    eax,[edx+0x30]
c001d270:	0f b6 c0             	movzx  eax,al
c001d273:	50                   	push   eax
c001d274:	e8 83 fe ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d279:	5d                   	pop    ebp
c001d27a:	5a                   	pop    edx
c001d27b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d281:	53                   	push   ebx
c001d282:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d287:	99                   	cdq    
c001d288:	f7 ff                	idiv   edi
c001d28a:	99                   	cdq    
c001d28b:	f7 f9                	idiv   ecx
c001d28d:	8d 42 30             	lea    eax,[edx+0x30]
c001d290:	0f b6 c0             	movzx  eax,al
c001d293:	50                   	push   eax
c001d294:	e8 63 fe ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d299:	5f                   	pop    edi
c001d29a:	5d                   	pop    ebp
c001d29b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d2a1:	53                   	push   ebx
c001d2a2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2a7:	99                   	cdq    
c001d2a8:	f7 f9                	idiv   ecx
c001d2aa:	99                   	cdq    
c001d2ab:	f7 f9                	idiv   ecx
c001d2ad:	8d 42 30             	lea    eax,[edx+0x30]
c001d2b0:	0f b6 c0             	movzx  eax,al
c001d2b3:	50                   	push   eax
c001d2b4:	e8 43 fe ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d2b9:	5a                   	pop    edx
c001d2ba:	5f                   	pop    edi
c001d2bb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d2c1:	53                   	push   ebx
c001d2c2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2c7:	99                   	cdq    
c001d2c8:	f7 f9                	idiv   ecx
c001d2ca:	83 c2 30             	add    edx,0x30
c001d2cd:	0f b6 d2             	movzx  edx,dl
c001d2d0:	52                   	push   edx
c001d2d1:	e8 26 fe ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d2d6:	83 c4 10             	add    esp,0x10
c001d2d9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d2df:	eb 05                	jmp    c001d2e6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2e1:	be 01 00 00 00       	mov    esi,0x1
c001d2e6:	83 c4 0c             	add    esp,0xc
c001d2e9:	89 f0                	mov    eax,esi
c001d2eb:	5b                   	pop    ebx
c001d2ec:	5e                   	pop    esi
c001d2ed:	5f                   	pop    edi
c001d2ee:	5d                   	pop    ebp
c001d2ef:	c3                   	ret    

c001d2f0 <ATA::write(unsigned long long, int, void*)>:
c001d2f0:	55                   	push   ebp
c001d2f1:	57                   	push   edi
c001d2f2:	56                   	push   esi
c001d2f3:	be 04 00 00 00       	mov    esi,0x4
c001d2f8:	53                   	push   ebx
c001d2f9:	83 ec 0c             	sub    esp,0xc
c001d2fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d300:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d304:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d308:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d30c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d30f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d315:	0f 87 9c 01 00 00    	ja     c001d4b7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d31b:	85 c9                	test   ecx,ecx
c001d31d:	be 06 00 00 00       	mov    esi,0x6
c001d322:	0f 84 8f 01 00 00    	je     c001d4b7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d328:	55                   	push   ebp
c001d329:	55                   	push   ebp
c001d32a:	6a 01                	push   0x1
c001d32c:	51                   	push   ecx
c001d32d:	53                   	push   ebx
c001d32e:	52                   	push   edx
c001d32f:	50                   	push   eax
c001d330:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d334:	e8 09 f9 ff ff       	call   c001cc42 <ATA::access(unsigned long long, int, void*, bool)>
c001d339:	83 c4 20             	add    esp,0x20
c001d33c:	85 c0                	test   eax,eax
c001d33e:	89 c6                	mov    esi,eax
c001d340:	0f 85 6c 01 00 00    	jne    c001d4b2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d346:	50                   	push   eax
c001d347:	bd 10 27 00 00       	mov    ebp,0x2710
c001d34c:	50                   	push   eax
c001d34d:	6a 0f                	push   0xf
c001d34f:	6a 00                	push   0x0
c001d351:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d357:	e8 b1 fd ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001d35c:	5a                   	pop    edx
c001d35d:	59                   	pop    ecx
c001d35e:	b9 0a 00 00 00       	mov    ecx,0xa
c001d363:	0f b6 d8             	movzx  ebx,al
c001d366:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d36b:	53                   	push   ebx
c001d36c:	99                   	cdq    
c001d36d:	f7 fd                	idiv   ebp
c001d36f:	99                   	cdq    
c001d370:	f7 f9                	idiv   ecx
c001d372:	8d 42 30             	lea    eax,[edx+0x30]
c001d375:	0f b6 c0             	movzx  eax,al
c001d378:	50                   	push   eax
c001d379:	e8 7e fd ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d37e:	5f                   	pop    edi
c001d37f:	bf e8 03 00 00       	mov    edi,0x3e8
c001d384:	5a                   	pop    edx
c001d385:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d38b:	53                   	push   ebx
c001d38c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d391:	99                   	cdq    
c001d392:	f7 ff                	idiv   edi
c001d394:	99                   	cdq    
c001d395:	f7 f9                	idiv   ecx
c001d397:	8d 42 30             	lea    eax,[edx+0x30]
c001d39a:	0f b6 c0             	movzx  eax,al
c001d39d:	50                   	push   eax
c001d39e:	e8 59 fd ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d3a3:	5f                   	pop    edi
c001d3a4:	bf 64 00 00 00       	mov    edi,0x64
c001d3a9:	5a                   	pop    edx
c001d3aa:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d3b0:	53                   	push   ebx
c001d3b1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3b6:	99                   	cdq    
c001d3b7:	f7 ff                	idiv   edi
c001d3b9:	99                   	cdq    
c001d3ba:	f7 f9                	idiv   ecx
c001d3bc:	8d 42 30             	lea    eax,[edx+0x30]
c001d3bf:	0f b6 c0             	movzx  eax,al
c001d3c2:	50                   	push   eax
c001d3c3:	e8 34 fd ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d3c8:	5a                   	pop    edx
c001d3c9:	5a                   	pop    edx
c001d3ca:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d3d0:	53                   	push   ebx
c001d3d1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3d6:	99                   	cdq    
c001d3d7:	f7 f9                	idiv   ecx
c001d3d9:	99                   	cdq    
c001d3da:	f7 f9                	idiv   ecx
c001d3dc:	8d 42 30             	lea    eax,[edx+0x30]
c001d3df:	0f b6 c0             	movzx  eax,al
c001d3e2:	50                   	push   eax
c001d3e3:	e8 14 fd ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d3e8:	5a                   	pop    edx
c001d3e9:	5a                   	pop    edx
c001d3ea:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d3f0:	53                   	push   ebx
c001d3f1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3f6:	99                   	cdq    
c001d3f7:	f7 f9                	idiv   ecx
c001d3f9:	83 c2 30             	add    edx,0x30
c001d3fc:	0f b6 d2             	movzx  edx,dl
c001d3ff:	52                   	push   edx
c001d400:	e8 f7 fc ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d405:	5a                   	pop    edx
c001d406:	5a                   	pop    edx
c001d407:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d40d:	53                   	push   ebx
c001d40e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d413:	99                   	cdq    
c001d414:	f7 fd                	idiv   ebp
c001d416:	99                   	cdq    
c001d417:	f7 f9                	idiv   ecx
c001d419:	8d 42 30             	lea    eax,[edx+0x30]
c001d41c:	0f b6 c0             	movzx  eax,al
c001d41f:	50                   	push   eax
c001d420:	e8 d7 fc ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d425:	5d                   	pop    ebp
c001d426:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d42b:	5a                   	pop    edx
c001d42c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d432:	53                   	push   ebx
c001d433:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d438:	99                   	cdq    
c001d439:	f7 fd                	idiv   ebp
c001d43b:	99                   	cdq    
c001d43c:	f7 f9                	idiv   ecx
c001d43e:	8d 42 30             	lea    eax,[edx+0x30]
c001d441:	0f b6 c0             	movzx  eax,al
c001d444:	50                   	push   eax
c001d445:	e8 b2 fc ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d44a:	5d                   	pop    ebp
c001d44b:	5a                   	pop    edx
c001d44c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d452:	53                   	push   ebx
c001d453:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d458:	99                   	cdq    
c001d459:	f7 ff                	idiv   edi
c001d45b:	99                   	cdq    
c001d45c:	f7 f9                	idiv   ecx
c001d45e:	8d 42 30             	lea    eax,[edx+0x30]
c001d461:	0f b6 c0             	movzx  eax,al
c001d464:	50                   	push   eax
c001d465:	e8 92 fc ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d46a:	5f                   	pop    edi
c001d46b:	5d                   	pop    ebp
c001d46c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d472:	53                   	push   ebx
c001d473:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d478:	99                   	cdq    
c001d479:	f7 f9                	idiv   ecx
c001d47b:	99                   	cdq    
c001d47c:	f7 f9                	idiv   ecx
c001d47e:	8d 42 30             	lea    eax,[edx+0x30]
c001d481:	0f b6 c0             	movzx  eax,al
c001d484:	50                   	push   eax
c001d485:	e8 72 fc ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d48a:	5a                   	pop    edx
c001d48b:	5f                   	pop    edi
c001d48c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d492:	53                   	push   ebx
c001d493:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d498:	99                   	cdq    
c001d499:	f7 f9                	idiv   ecx
c001d49b:	83 c2 30             	add    edx,0x30
c001d49e:	0f b6 d2             	movzx  edx,dl
c001d4a1:	52                   	push   edx
c001d4a2:	e8 55 fc ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001d4a7:	83 c4 10             	add    esp,0x10
c001d4aa:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d4b0:	eb 05                	jmp    c001d4b7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4b2:	be 01 00 00 00       	mov    esi,0x1
c001d4b7:	83 c4 0c             	add    esp,0xc
c001d4ba:	89 f0                	mov    eax,esi
c001d4bc:	5b                   	pop    ebx
c001d4bd:	5e                   	pop    esi
c001d4be:	5f                   	pop    edi
c001d4bf:	5d                   	pop    ebp
c001d4c0:	c3                   	ret    
c001d4c1:	90                   	nop

c001d4c2 <ATAPI::write(unsigned long long, int, void*)>:
c001d4c2:	b8 03 00 00 00       	mov    eax,0x3
c001d4c7:	c3                   	ret    

c001d4c8 <ATAPI::close(int, int, void*)>:
c001d4c8:	83 ec 0c             	sub    esp,0xc
c001d4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4d5:	85 c0                	test   eax,eax
c001d4d7:	74 0c                	je     c001d4e5 <ATAPI::close(int, int, void*)+0x1d>
c001d4d9:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4db:	83 ec 0c             	sub    esp,0xc
c001d4de:	50                   	push   eax
c001d4df:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d4e2:	83 c4 10             	add    esp,0x10
c001d4e5:	31 c0                	xor    eax,eax
c001d4e7:	83 c4 0c             	add    esp,0xc
c001d4ea:	c3                   	ret    
c001d4eb:	90                   	nop

c001d4ec <ATAPI::ATAPI()>:
c001d4ec:	83 ec 0c             	sub    esp,0xc
c001d4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4f3:	83 ec 04             	sub    esp,0x4
c001d4f6:	68 00 08 00 00       	push   0x800
c001d4fb:	68 9d 33 02 c0       	push   0xc002339d
c001d500:	50                   	push   eax
c001d501:	e8 18 f8 fe ff       	call   c000cd1e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d506:	83 c4 10             	add    esp,0x10
c001d509:	ba b8 32 02 c0       	mov    edx,0xc00232b8
c001d50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d512:	89 10                	mov    DWORD PTR [eax],edx
c001d514:	90                   	nop
c001d515:	83 c4 0c             	add    esp,0xc
c001d518:	c3                   	ret    
c001d519:	90                   	nop

c001d51a <ATAPI::readyForCommand()>:
c001d51a:	56                   	push   esi
c001d51b:	53                   	push   ebx
c001d51c:	53                   	push   ebx
c001d51d:	31 db                	xor    ebx,ebx
c001d51f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d523:	51                   	push   ecx
c001d524:	6a 0c                	push   0xc
c001d526:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d52d:	50                   	push   eax
c001d52e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d534:	e8 77 e8 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001d539:	83 c4 10             	add    esp,0x10
c001d53c:	a8 88                	test   al,0x88
c001d53e:	74 25                	je     c001d565 <ATAPI::readyForCommand()+0x4b>
c001d540:	43                   	inc    ebx
c001d541:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d547:	7e da                	jle    c001d523 <ATAPI::readyForCommand()+0x9>
c001d549:	83 ec 0c             	sub    esp,0xc
c001d54c:	68 5e 01 00 00       	push   0x15e
c001d551:	e8 c6 8d ff ff       	call   c001631c <milliTenthSleep(unsigned int)>
c001d556:	83 c4 10             	add    esp,0x10
c001d559:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d55f:	75 c2                	jne    c001d523 <ATAPI::readyForCommand()+0x9>
c001d561:	31 c0                	xor    eax,eax
c001d563:	eb 02                	jmp    c001d567 <ATAPI::readyForCommand()+0x4d>
c001d565:	b0 01                	mov    al,0x1
c001d567:	5a                   	pop    edx
c001d568:	5b                   	pop    ebx
c001d569:	5e                   	pop    esi
c001d56a:	c3                   	ret    
c001d56b:	90                   	nop

c001d56c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d56c:	55                   	push   ebp
c001d56d:	57                   	push   edi
c001d56e:	56                   	push   esi
c001d56f:	53                   	push   ebx
c001d570:	83 ec 20             	sub    esp,0x20
c001d573:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d577:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d57b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d57f:	6a 01                	push   0x1
c001d581:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d588:	50                   	push   eax
c001d589:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d58f:	e8 6a e9 ff ff       	call   c001befe <IDE::enableIRQs(unsigned char, bool)>
c001d594:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d59b:	59                   	pop    ecx
c001d59c:	5e                   	pop    esi
c001d59d:	50                   	push   eax
c001d59e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5a4:	e8 21 e7 ff ff       	call   c001bcca <IDE::prepareInterrupt(unsigned char)>
c001d5a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5ac:	e8 69 ff ff ff       	call   c001d51a <ATAPI::readyForCommand()>
c001d5b1:	83 c4 10             	add    esp,0x10
c001d5b4:	84 c0                	test   al,al
c001d5b6:	75 0a                	jne    c001d5c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d5b8:	bb 01 00 00 00       	mov    ebx,0x1
c001d5bd:	e9 5f 02 00 00       	jmp    c001d821 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d5c2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d5c8:	c1 e0 04             	shl    eax,0x4
c001d5cb:	0f b6 c0             	movzx  eax,al
c001d5ce:	50                   	push   eax
c001d5cf:	6a 06                	push   0x6
c001d5d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5d8:	50                   	push   eax
c001d5d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5df:	e8 0c e7 ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5e4:	6a 00                	push   0x0
c001d5e6:	6a 01                	push   0x1
c001d5e8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5ef:	50                   	push   eax
c001d5f0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5f6:	e8 f5 e6 ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5fb:	83 c4 20             	add    esp,0x20
c001d5fe:	0f b6 c3             	movzx  eax,bl
c001d601:	50                   	push   eax
c001d602:	0f b6 df             	movzx  ebx,bh
c001d605:	6a 04                	push   0x4
c001d607:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d60e:	50                   	push   eax
c001d60f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d615:	e8 d6 e6 ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d61a:	53                   	push   ebx
c001d61b:	6a 05                	push   0x5
c001d61d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d624:	50                   	push   eax
c001d625:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d62b:	e8 c0 e6 ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d630:	83 c4 20             	add    esp,0x20
c001d633:	68 a0 00 00 00       	push   0xa0
c001d638:	6a 07                	push   0x7
c001d63a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d641:	50                   	push   eax
c001d642:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d648:	e8 a3 e6 ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d64d:	83 c4 0c             	add    esp,0xc
c001d650:	6a 01                	push   0x1
c001d652:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d659:	50                   	push   eax
c001d65a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d660:	e8 6f f1 ff ff       	call   c001c7d4 <IDE::polling(unsigned char, unsigned int)>
c001d665:	83 c4 10             	add    esp,0x10
c001d668:	0f b6 d8             	movzx  ebx,al
c001d66b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d671:	85 db                	test   ebx,ebx
c001d673:	74 20                	je     c001d695 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d675:	53                   	push   ebx
c001d676:	0f b6 c0             	movzx  eax,al
c001d679:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d680:	52                   	push   edx
c001d681:	50                   	push   eax
c001d682:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d688:	e8 8d f0 ff ff       	call   c001c71a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d68d:	83 c4 10             	add    esp,0x10
c001d690:	e9 8c 01 00 00       	jmp    c001d821 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d695:	52                   	push   edx
c001d696:	0f b6 c0             	movzx  eax,al
c001d699:	52                   	push   edx
c001d69a:	50                   	push   eax
c001d69b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6a1:	e8 38 e6 ff ff       	call   c001bcde <IDE::getBase(unsigned char)>
c001d6a6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d6aa:	b9 06 00 00 00       	mov    ecx,0x6
c001d6af:	89 c2                	mov    edx,eax
c001d6b1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d6b4:	89 e8                	mov    eax,ebp
c001d6b6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d6ba:	83 c4 10             	add    esp,0x10
c001d6bd:	0f b6 c0             	movzx  eax,al
c001d6c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6c4:	85 db                	test   ebx,ebx
c001d6c6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d6cc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d6d3:	0f 84 eb 00 00 00    	je     c001d7c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d6d9:	55                   	push   ebp
c001d6da:	55                   	push   ebp
c001d6db:	52                   	push   edx
c001d6dc:	50                   	push   eax
c001d6dd:	e8 82 e7 ff ff       	call   c001be64 <IDE::waitInterrupt(unsigned char)>
c001d6e2:	83 c4 10             	add    esp,0x10
c001d6e5:	84 c0                	test   al,al
c001d6e7:	0f 84 cb fe ff ff    	je     c001d5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d6ed:	56                   	push   esi
c001d6ee:	56                   	push   esi
c001d6ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6f6:	50                   	push   eax
c001d6f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6fd:	e8 c8 e5 ff ff       	call   c001bcca <IDE::prepareInterrupt(unsigned char)>
c001d702:	83 c4 0c             	add    esp,0xc
c001d705:	6a 04                	push   0x4
c001d707:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d70e:	50                   	push   eax
c001d70f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d715:	e8 96 e6 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001d71a:	83 c4 0c             	add    esp,0xc
c001d71d:	6a 05                	push   0x5
c001d71f:	89 c6                	mov    esi,eax
c001d721:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d728:	50                   	push   eax
c001d729:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d72f:	e8 7c e6 ff ff       	call   c001bdb0 <IDE::read(unsigned char, unsigned char)>
c001d734:	83 c4 10             	add    esp,0x10
c001d737:	0f b6 e8             	movzx  ebp,al
c001d73a:	89 f0                	mov    eax,esi
c001d73c:	c1 e5 08             	shl    ebp,0x8
c001d73f:	0f b6 f0             	movzx  esi,al
c001d742:	09 f5                	or     ebp,esi
c001d744:	31 f6                	xor    esi,esi
c001d746:	d1 fd                	sar    ebp,1
c001d748:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d74d:	74 5c                	je     c001d7ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d74f:	39 ee                	cmp    esi,ebp
c001d751:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d757:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d75e:	75 0d                	jne    c001d76d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d760:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d763:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d767:	4b                   	dec    ebx
c001d768:	e9 57 ff ff ff       	jmp    c001d6c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d76d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d771:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d775:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d77a:	51                   	push   ecx
c001d77b:	51                   	push   ecx
c001d77c:	52                   	push   edx
c001d77d:	50                   	push   eax
c001d77e:	e8 5b e5 ff ff       	call   c001bcde <IDE::getBase(unsigned char)>
c001d783:	89 c2                	mov    edx,eax
c001d785:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d78a:	66 ef                	out    dx,ax
c001d78c:	46                   	inc    esi
c001d78d:	83 c4 10             	add    esp,0x10
c001d790:	eb bd                	jmp    c001d74f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d792:	51                   	push   ecx
c001d793:	51                   	push   ecx
c001d794:	52                   	push   edx
c001d795:	50                   	push   eax
c001d796:	e8 43 e5 ff ff       	call   c001bcde <IDE::getBase(unsigned char)>
c001d79b:	89 c2                	mov    edx,eax
c001d79d:	66 ed                	in     ax,dx
c001d79f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d7a3:	83 c4 10             	add    esp,0x10
c001d7a6:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d7aa:	46                   	inc    esi
c001d7ab:	39 ee                	cmp    esi,ebp
c001d7ad:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7b3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7ba:	75 d6                	jne    c001d792 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d7bc:	01 f6                	add    esi,esi
c001d7be:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d7c2:	eb a3                	jmp    c001d767 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d7c4:	51                   	push   ecx
c001d7c5:	51                   	push   ecx
c001d7c6:	52                   	push   edx
c001d7c7:	50                   	push   eax
c001d7c8:	e8 97 e6 ff ff       	call   c001be64 <IDE::waitInterrupt(unsigned char)>
c001d7cd:	83 c4 10             	add    esp,0x10
c001d7d0:	84 c0                	test   al,al
c001d7d2:	0f 84 e0 fd ff ff    	je     c001d5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d7d8:	52                   	push   edx
c001d7d9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d7de:	52                   	push   edx
c001d7df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7e6:	50                   	push   eax
c001d7e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7ed:	e8 d8 e4 ff ff       	call   c001bcca <IDE::prepareInterrupt(unsigned char)>
c001d7f2:	83 c4 10             	add    esp,0x10
c001d7f5:	50                   	push   eax
c001d7f6:	50                   	push   eax
c001d7f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7fe:	50                   	push   eax
c001d7ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d805:	e8 d4 e4 ff ff       	call   c001bcde <IDE::getBase(unsigned char)>
c001d80a:	8d 50 07             	lea    edx,[eax+0x7]
c001d80d:	ec                   	in     al,dx
c001d80e:	83 c4 10             	add    esp,0x10
c001d811:	a8 88                	test   al,0x88
c001d813:	74 0a                	je     c001d81f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d815:	4b                   	dec    ebx
c001d816:	75 dd                	jne    c001d7f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d818:	bb 02 00 00 00       	mov    ebx,0x2
c001d81d:	eb 02                	jmp    c001d821 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d81f:	31 db                	xor    ebx,ebx
c001d821:	83 c4 1c             	add    esp,0x1c
c001d824:	89 d8                	mov    eax,ebx
c001d826:	5b                   	pop    ebx
c001d827:	5e                   	pop    esi
c001d828:	5f                   	pop    edi
c001d829:	5d                   	pop    ebp
c001d82a:	c3                   	ret    
c001d82b:	90                   	nop

c001d82c <ATAPI::diskRemoved()>:
c001d82c:	53                   	push   ebx
c001d82d:	83 ec 14             	sub    esp,0x14
c001d830:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d834:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d83b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d841:	e8 7a 04 ff ff       	call   c000dcc0 <LogicalDisk::unmount()>
c001d846:	58                   	pop    eax
c001d847:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d84d:	e8 52 0e ff ff       	call   c000e6a4 <VCache::writeWriteBuffer()>
c001d852:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d858:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d85c:	83 c4 18             	add    esp,0x18
c001d85f:	5b                   	pop    ebx
c001d860:	e9 2f 0e ff ff       	jmp    c000e694 <VCache::invalidateReadBuffer()>
c001d865:	90                   	nop

c001d866 <ATAPI::eject()>:
c001d866:	57                   	push   edi
c001d867:	b9 03 00 00 00       	mov    ecx,0x3
c001d86c:	53                   	push   ebx
c001d86d:	83 ec 14             	sub    esp,0x14
c001d870:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d874:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d878:	fc                   	cld    
c001d879:	31 c0                	xor    eax,eax
c001d87b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d87d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d882:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d887:	50                   	push   eax
c001d888:	50                   	push   eax
c001d889:	6a 00                	push   0x0
c001d88b:	6a 00                	push   0x0
c001d88d:	6a 00                	push   0x0
c001d88f:	6a 02                	push   0x2
c001d891:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d895:	50                   	push   eax
c001d896:	53                   	push   ebx
c001d897:	e8 d0 fc ff ff       	call   c001d56c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d89c:	83 c4 14             	add    esp,0x14
c001d89f:	53                   	push   ebx
c001d8a0:	e8 87 ff ff ff       	call   c001d82c <ATAPI::diskRemoved()>
c001d8a5:	83 c4 24             	add    esp,0x24
c001d8a8:	31 c0                	xor    eax,eax
c001d8aa:	5b                   	pop    ebx
c001d8ab:	5f                   	pop    edi
c001d8ac:	c3                   	ret    
c001d8ad:	90                   	nop

c001d8ae <ATAPI::diskInserted()>:
c001d8ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8b2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d8b9:	c3                   	ret    

c001d8ba <ATAPI::detectMedia()>:
c001d8ba:	56                   	push   esi
c001d8bb:	53                   	push   ebx
c001d8bc:	83 ec 28             	sub    esp,0x28
c001d8bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d8c3:	6a 0c                	push   0xc
c001d8c5:	6a 00                	push   0x0
c001d8c7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d8cb:	56                   	push   esi
c001d8cc:	e8 1f 2c fe ff       	call   c00004f0 <memset>
c001d8d1:	58                   	pop    eax
c001d8d2:	5a                   	pop    edx
c001d8d3:	6a 00                	push   0x0
c001d8d5:	6a 00                	push   0x0
c001d8d7:	6a 00                	push   0x0
c001d8d9:	6a 00                	push   0x0
c001d8db:	56                   	push   esi
c001d8dc:	53                   	push   ebx
c001d8dd:	e8 8a fc ff ff       	call   c001d56c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d8e2:	83 c4 1c             	add    esp,0x1c
c001d8e5:	6a 0c                	push   0xc
c001d8e7:	6a 00                	push   0x0
c001d8e9:	56                   	push   esi
c001d8ea:	e8 01 2c fe ff       	call   c00004f0 <memset>
c001d8ef:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d8f4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d8f9:	59                   	pop    ecx
c001d8fa:	58                   	pop    eax
c001d8fb:	6a 01                	push   0x1
c001d8fd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d901:	50                   	push   eax
c001d902:	6a 00                	push   0x0
c001d904:	6a 12                	push   0x12
c001d906:	56                   	push   esi
c001d907:	53                   	push   ebx
c001d908:	e8 5f fc ff ff       	call   c001d56c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d90d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d911:	83 c4 20             	add    esp,0x20
c001d914:	83 e0 7f             	and    eax,0x7f
c001d917:	83 f8 70             	cmp    eax,0x70
c001d91a:	74 15                	je     c001d931 <ATAPI::detectMedia()+0x77>
c001d91c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d923:	75 0c                	jne    c001d931 <ATAPI::detectMedia()+0x77>
c001d925:	83 ec 0c             	sub    esp,0xc
c001d928:	53                   	push   ebx
c001d929:	e8 80 ff ff ff       	call   c001d8ae <ATAPI::diskInserted()>
c001d92e:	83 c4 10             	add    esp,0x10
c001d931:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d935:	83 e0 0f             	and    eax,0xf
c001d938:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d93d:	0f b6 c0             	movzx  eax,al
c001d940:	75 19                	jne    c001d95b <ATAPI::detectMedia()+0xa1>
c001d942:	83 f8 02             	cmp    eax,0x2
c001d945:	75 14                	jne    c001d95b <ATAPI::detectMedia()+0xa1>
c001d947:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d94e:	74 24                	je     c001d974 <ATAPI::detectMedia()+0xba>
c001d950:	83 ec 0c             	sub    esp,0xc
c001d953:	53                   	push   ebx
c001d954:	e8 d3 fe ff ff       	call   c001d82c <ATAPI::diskRemoved()>
c001d959:	eb 16                	jmp    c001d971 <ATAPI::detectMedia()+0xb7>
c001d95b:	85 c0                	test   eax,eax
c001d95d:	75 15                	jne    c001d974 <ATAPI::detectMedia()+0xba>
c001d95f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d966:	75 0c                	jne    c001d974 <ATAPI::detectMedia()+0xba>
c001d968:	83 ec 0c             	sub    esp,0xc
c001d96b:	53                   	push   ebx
c001d96c:	e8 3d ff ff ff       	call   c001d8ae <ATAPI::diskInserted()>
c001d971:	83 c4 10             	add    esp,0x10
c001d974:	83 c4 24             	add    esp,0x24
c001d977:	5b                   	pop    ebx
c001d978:	5e                   	pop    esi
c001d979:	c3                   	ret    

c001d97a <ATAPI::open(int, int, void*)>:
c001d97a:	56                   	push   esi
c001d97b:	53                   	push   ebx
c001d97c:	50                   	push   eax
c001d97d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d981:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d985:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d989:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d98f:	c1 e0 06             	shl    eax,0x6
c001d992:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d998:	01 d0                	add    eax,edx
c001d99a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d9a1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d9a7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d9ae:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d9b8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d9bf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d9c5:	6a 04                	push   0x4
c001d9c7:	6a 0c                	push   0xc
c001d9c9:	51                   	push   ecx
c001d9ca:	52                   	push   edx
c001d9cb:	e8 20 e3 ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9d0:	90                   	nop
c001d9d1:	90                   	nop
c001d9d2:	6a 00                	push   0x0
c001d9d4:	6a 0c                	push   0xc
c001d9d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9dd:	50                   	push   eax
c001d9de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9e4:	e8 07 e3 ff ff       	call   c001bcf0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9e9:	83 c4 14             	add    esp,0x14
c001d9ec:	68 78 01 00 00       	push   0x178
c001d9f1:	e8 dd a0 fe ff       	call   c0007ad3 <malloc>
c001d9f6:	83 c4 0c             	add    esp,0xc
c001d9f9:	6a 00                	push   0x0
c001d9fb:	68 ff ff ff 7f       	push   0x7fffffff
c001da00:	6a 00                	push   0x0
c001da02:	6a 00                	push   0x0
c001da04:	53                   	push   ebx
c001da05:	68 4f 34 02 c0       	push   0xc002344f
c001da0a:	89 c6                	mov    esi,eax
c001da0c:	50                   	push   eax
c001da0d:	e8 ec 00 ff ff       	call   c000dafe <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da12:	83 c4 14             	add    esp,0x14
c001da15:	56                   	push   esi
c001da16:	e8 a3 01 ff ff       	call   c000dbbe <LogicalDisk::assignDriveLetter()>
c001da1b:	5a                   	pop    edx
c001da1c:	59                   	pop    ecx
c001da1d:	0f be c0             	movsx  eax,al
c001da20:	50                   	push   eax
c001da21:	68 a0 32 02 c0       	push   0xc00232a0
c001da26:	e8 df ce fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001da2b:	58                   	pop    eax
c001da2c:	5a                   	pop    edx
c001da2d:	56                   	push   esi
c001da2e:	53                   	push   ebx
c001da2f:	e8 1c ef fe ff       	call   c000c950 <Device::addChild(Device*)>
c001da34:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001da3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da3d:	e8 44 f3 fe ff       	call   c000cd86 <PhysicalDisk::startCache()>
c001da42:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001da49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da4c:	e8 69 fe ff ff       	call   c001d8ba <ATAPI::detectMedia()>
c001da51:	83 c4 14             	add    esp,0x14
c001da54:	31 c0                	xor    eax,eax
c001da56:	5b                   	pop    ebx
c001da57:	5e                   	pop    esi
c001da58:	c3                   	ret    
c001da59:	90                   	nop

c001da5a <ATAPI::read(unsigned long long, int, void*)>:
c001da5a:	55                   	push   ebp
c001da5b:	57                   	push   edi
c001da5c:	56                   	push   esi
c001da5d:	53                   	push   ebx
c001da5e:	83 ec 1c             	sub    esp,0x1c
c001da61:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001da65:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001da69:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001da6d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da74:	74 3c                	je     c001dab2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001da76:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001da7a:	b9 03 00 00 00       	mov    ecx,0x3
c001da7f:	fc                   	cld    
c001da80:	31 c0                	xor    eax,eax
c001da82:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001da84:	89 e8                	mov    eax,ebp
c001da86:	0f ce                	bswap  esi
c001da88:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001da8c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001da91:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001da95:	50                   	push   eax
c001da96:	50                   	push   eax
c001da97:	55                   	push   ebp
c001da98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001da9c:	c1 e5 0b             	shl    ebp,0xb
c001da9f:	6a 00                	push   0x0
c001daa1:	55                   	push   ebp
c001daa2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001daa6:	50                   	push   eax
c001daa7:	53                   	push   ebx
c001daa8:	e8 bf fa ff ff       	call   c001d56c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001daad:	83 c4 20             	add    esp,0x20
c001dab0:	eb 1a                	jmp    c001dacc <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dab2:	83 ec 0c             	sub    esp,0xc
c001dab5:	53                   	push   ebx
c001dab6:	e8 ff fd ff ff       	call   c001d8ba <ATAPI::detectMedia()>
c001dabb:	83 c4 10             	add    esp,0x10
c001dabe:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dac5:	75 af                	jne    c001da76 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dac7:	b8 02 00 00 00       	mov    eax,0x2
c001dacc:	83 c4 1c             	add    esp,0x1c
c001dacf:	5b                   	pop    ebx
c001dad0:	5e                   	pop    esi
c001dad1:	5f                   	pop    edi
c001dad2:	5d                   	pop    ebp
c001dad3:	c3                   	ret    

c001dad4 <SATA::close(int, int, void*)>:
c001dad4:	83 ec 0c             	sub    esp,0xc
c001dad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dadb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dae1:	85 c0                	test   eax,eax
c001dae3:	74 0c                	je     c001daf1 <SATA::close(int, int, void*)+0x1d>
c001dae5:	8b 10                	mov    edx,DWORD PTR [eax]
c001dae7:	83 ec 0c             	sub    esp,0xc
c001daea:	50                   	push   eax
c001daeb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001daee:	83 c4 10             	add    esp,0x10
c001daf1:	31 c0                	xor    eax,eax
c001daf3:	83 c4 0c             	add    esp,0xc
c001daf6:	c3                   	ret    
c001daf7:	90                   	nop

c001daf8 <SATA::powerSaving(PowerSavingLevel)>:
c001daf8:	c3                   	ret    
c001daf9:	90                   	nop

c001dafa <SATA::open(int, int, void*)>:
c001dafa:	56                   	push   esi
c001dafb:	53                   	push   ebx
c001dafc:	50                   	push   eax
c001dafd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db05:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001db0f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db19:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db23:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db2d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001db34:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001db3a:	e8 a3 a2 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001db3f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db45:	89 c6                	mov    esi,eax
c001db47:	e8 96 a2 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001db4c:	81 c6 00 10 00 00    	add    esi,0x1000
c001db52:	39 c6                	cmp    esi,eax
c001db54:	74 10                	je     c001db66 <SATA::open(int, int, void*)+0x6c>
c001db56:	83 ec 0c             	sub    esp,0xc
c001db59:	68 e8 32 02 c0       	push   0xc00232e8
c001db5e:	e8 b4 39 ff ff       	call   c0011517 <KePanic(char const*)>
c001db63:	83 c4 10             	add    esp,0x10
c001db66:	83 ec 0c             	sub    esp,0xc
c001db69:	6a 02                	push   0x2
c001db6b:	e8 85 ba fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001db70:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001db76:	6a 03                	push   0x3
c001db78:	50                   	push   eax
c001db79:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001db7f:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001db85:	e8 74 c1 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001db8a:	83 c4 14             	add    esp,0x14
c001db8d:	53                   	push   ebx
c001db8e:	e8 f3 f1 fe ff       	call   c000cd86 <PhysicalDisk::startCache()>
c001db93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db96:	e8 37 04 ff ff       	call   c000dfd2 <createPartitionsForDisk(PhysicalDisk*)>
c001db9b:	83 c4 14             	add    esp,0x14
c001db9e:	31 c0                	xor    eax,eax
c001dba0:	5b                   	pop    ebx
c001dba1:	5e                   	pop    esi
c001dba2:	c3                   	ret    
c001dba3:	90                   	nop

c001dba4 <SATA::SATA()>:
c001dba4:	83 ec 0c             	sub    esp,0xc
c001dba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbab:	83 ec 04             	sub    esp,0x4
c001dbae:	68 00 02 00 00       	push   0x200
c001dbb3:	68 fc 32 02 c0       	push   0xc00232fc
c001dbb8:	50                   	push   eax
c001dbb9:	e8 60 f1 fe ff       	call   c000cd1e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dbbe:	83 c4 10             	add    esp,0x10
c001dbc1:	ba 6c 33 02 c0       	mov    edx,0xc002336c
c001dbc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbca:	89 10                	mov    DWORD PTR [eax],edx
c001dbcc:	90                   	nop
c001dbcd:	83 c4 0c             	add    esp,0xc
c001dbd0:	c3                   	ret    
c001dbd1:	90                   	nop

c001dbd2 <SATA::access(unsigned long long, int, void*, bool)>:
c001dbd2:	55                   	push   ebp
c001dbd3:	57                   	push   edi
c001dbd4:	56                   	push   esi
c001dbd5:	53                   	push   ebx
c001dbd6:	83 ec 2c             	sub    esp,0x2c
c001dbd9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dbdd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dbe2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dbe6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dbea:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dbee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dbf2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dbf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dbfa:	7e 10                	jle    c001dc0c <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dbfc:	83 ec 0c             	sub    esp,0xc
c001dbff:	68 0c 33 02 c0       	push   0xc002330c
c001dc04:	e8 0e 39 ff ff       	call   c0011517 <KePanic(char const*)>
c001dc09:	83 c4 10             	add    esp,0x10
c001dc0c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dc12:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dc18:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dc1e:	89 e8                	mov    eax,ebp
c001dc20:	c1 e0 07             	shl    eax,0x7
c001dc23:	01 d0                	add    eax,edx
c001dc25:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dc2f:	8d 45 02             	lea    eax,[ebp+0x2]
c001dc32:	51                   	push   ecx
c001dc33:	c1 e0 07             	shl    eax,0x7
c001dc36:	51                   	push   ecx
c001dc37:	01 d0                	add    eax,edx
c001dc39:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dc3d:	50                   	push   eax
c001dc3e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dc44:	e8 6b ec ff ff       	call   c001c8b4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dc49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dc4d:	83 c4 10             	add    esp,0x10
c001dc50:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001dc55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc59:	0f 84 5b 01 00 00    	je     c001ddba <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dc5f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dc63:	c1 e0 09             	shl    eax,0x9
c001dc66:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dc6b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dc6f:	74 0e                	je     c001dc7f <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001dc71:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dc77:	89 c1                	mov    ecx,eax
c001dc79:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dc7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dc7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dc83:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dc89:	8d 45 02             	lea    eax,[ebp+0x2]
c001dc8c:	c1 e0 07             	shl    eax,0x7
c001dc8f:	01 d0                	add    eax,edx
c001dc91:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc93:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dc99:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dc9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dca3:	c1 e1 05             	shl    ecx,0x5
c001dca6:	01 c8                	add    eax,ecx
c001dca8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dcac:	83 e1 01             	and    ecx,0x1
c001dcaf:	89 ce                	mov    esi,ecx
c001dcb1:	8a 08                	mov    cl,BYTE PTR [eax]
c001dcb3:	c1 e6 06             	shl    esi,0x6
c001dcb6:	83 e1 bf             	and    ecx,0xffffffbf
c001dcb9:	09 f1                	or     ecx,esi
c001dcbb:	88 08                	mov    BYTE PTR [eax],cl
c001dcbd:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dcbf:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dcc5:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dccb:	89 08                	mov    DWORD PTR [eax],ecx
c001dccd:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dcd3:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dcd9:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dcdf:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dce2:	50                   	push   eax
c001dce3:	68 90 00 00 00       	push   0x90
c001dce8:	6a 00                	push   0x0
c001dcea:	56                   	push   esi
c001dceb:	e8 00 28 fe ff       	call   c00004f0 <memset>
c001dcf0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dcf6:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dcfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd00:	83 c4 10             	add    esp,0x10
c001dd03:	48                   	dec    eax
c001dd04:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dd09:	89 c1                	mov    ecx,eax
c001dd0b:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dd11:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dd16:	09 c8                	or     eax,ecx
c001dd18:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dd1e:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dd24:	83 c8 80             	or     eax,0xffffff80
c001dd27:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dd2d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dd30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd34:	25 00 7f 00 00       	and    eax,0x7f00
c001dd39:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dd3e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dd43:	66 89 06             	mov    WORD PTR [esi],ax
c001dd46:	b0 35                	mov    al,0x35
c001dd48:	75 02                	jne    c001dd4c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001dd4a:	b0 25                	mov    al,0x25
c001dd4c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001dd4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd53:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dd57:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001dd5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd5f:	c1 e8 10             	shr    eax,0x10
c001dd62:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dd65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd69:	c1 e8 18             	shr    eax,0x18
c001dd6c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dd6f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dd73:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001dd76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd7a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001dd7d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd81:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001dd85:	89 ee                	mov    esi,ebp
c001dd87:	31 c0                	xor    eax,eax
c001dd89:	c1 e6 07             	shl    esi,0x7
c001dd8c:	01 d6                	add    esi,edx
c001dd8e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001dd94:	80 e1 88             	and    cl,0x88
c001dd97:	74 0a                	je     c001dda3 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001dd99:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dd9e:	74 0a                	je     c001ddaa <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001dda0:	40                   	inc    eax
c001dda1:	eb eb                	jmp    c001dd8e <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001dda3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dda8:	75 17                	jne    c001ddc1 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001ddaa:	83 ec 0c             	sub    esp,0xc
c001ddad:	68 45 33 02 c0       	push   0xc0023345
c001ddb2:	e8 53 cb fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001ddb7:	83 c4 10             	add    esp,0x10
c001ddba:	b8 01 00 00 00       	mov    eax,0x1
c001ddbf:	eb 5b                	jmp    c001de1c <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001ddc1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ddc5:	c1 e5 07             	shl    ebp,0x7
c001ddc8:	b8 01 00 00 00       	mov    eax,0x1
c001ddcd:	01 ea                	add    edx,ebp
c001ddcf:	d3 e0                	shl    eax,cl
c001ddd1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ddd7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001dddd:	85 c8                	test   eax,ecx
c001dddf:	74 16                	je     c001ddf7 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001dde1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001dde7:	0f ba e1 1e          	bt     ecx,0x1e
c001ddeb:	73 ea                	jae    c001ddd7 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001dded:	83 ec 0c             	sub    esp,0xc
c001ddf0:	68 53 33 02 c0       	push   0xc0023353
c001ddf5:	eb bb                	jmp    c001ddb2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ddf7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ddfd:	0f ba e0 1e          	bt     eax,0x1e
c001de01:	72 b7                	jb     c001ddba <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001de03:	31 c0                	xor    eax,eax
c001de05:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001de0a:	75 10                	jne    c001de1c <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001de0c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001de12:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001de16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de1c:	83 c4 2c             	add    esp,0x2c
c001de1f:	5b                   	pop    ebx
c001de20:	5e                   	pop    esi
c001de21:	5f                   	pop    edi
c001de22:	5d                   	pop    ebp
c001de23:	c3                   	ret    

c001de24 <SATA::read(unsigned long long, int, void*)>:
c001de24:	55                   	push   ebp
c001de25:	57                   	push   edi
c001de26:	56                   	push   esi
c001de27:	be 04 00 00 00       	mov    esi,0x4
c001de2c:	53                   	push   ebx
c001de2d:	83 ec 0c             	sub    esp,0xc
c001de30:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001de34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de3c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001de40:	8d 7b ff             	lea    edi,[ebx-0x1]
c001de43:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001de49:	0f 87 1a 02 00 00    	ja     c001e069 <SATA::read(unsigned long long, int, void*)+0x245>
c001de4f:	85 c9                	test   ecx,ecx
c001de51:	be 06 00 00 00       	mov    esi,0x6
c001de56:	0f 84 0d 02 00 00    	je     c001e069 <SATA::read(unsigned long long, int, void*)+0x245>
c001de5c:	56                   	push   esi
c001de5d:	56                   	push   esi
c001de5e:	6a 00                	push   0x0
c001de60:	51                   	push   ecx
c001de61:	53                   	push   ebx
c001de62:	52                   	push   edx
c001de63:	50                   	push   eax
c001de64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de68:	e8 65 fd ff ff       	call   c001dbd2 <SATA::access(unsigned long long, int, void*, bool)>
c001de6d:	83 c4 20             	add    esp,0x20
c001de70:	85 c0                	test   eax,eax
c001de72:	89 c6                	mov    esi,eax
c001de74:	0f 85 ea 01 00 00    	jne    c001e064 <SATA::read(unsigned long long, int, void*)+0x240>
c001de7a:	50                   	push   eax
c001de7b:	50                   	push   eax
c001de7c:	6a 0f                	push   0xf
c001de7e:	6a 00                	push   0x0
c001de80:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001de86:	bb 0a 00 00 00       	mov    ebx,0xa
c001de8b:	e8 7d f2 ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001de90:	5a                   	pop    edx
c001de91:	59                   	pop    ecx
c001de92:	b9 10 27 00 00       	mov    ecx,0x2710
c001de97:	0f b6 c0             	movzx  eax,al
c001de9a:	50                   	push   eax
c001de9b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dea0:	99                   	cdq    
c001dea1:	f7 f9                	idiv   ecx
c001dea3:	99                   	cdq    
c001dea4:	f7 fb                	idiv   ebx
c001dea6:	8d 42 30             	lea    eax,[edx+0x30]
c001dea9:	0f b6 c0             	movzx  eax,al
c001deac:	50                   	push   eax
c001dead:	e8 4a f2 ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001deb2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001deb8:	5f                   	pop    edi
c001deb9:	5d                   	pop    ebp
c001deba:	bd e8 03 00 00       	mov    ebp,0x3e8
c001debf:	6a 0f                	push   0xf
c001dec1:	6a 00                	push   0x0
c001dec3:	e8 45 f2 ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001dec8:	5a                   	pop    edx
c001dec9:	59                   	pop    ecx
c001deca:	0f b6 c0             	movzx  eax,al
c001decd:	50                   	push   eax
c001dece:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001ded3:	99                   	cdq    
c001ded4:	f7 fd                	idiv   ebp
c001ded6:	99                   	cdq    
c001ded7:	f7 fb                	idiv   ebx
c001ded9:	8d 42 30             	lea    eax,[edx+0x30]
c001dedc:	0f b6 c0             	movzx  eax,al
c001dedf:	50                   	push   eax
c001dee0:	e8 17 f2 ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001dee5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001deeb:	5f                   	pop    edi
c001deec:	bf 64 00 00 00       	mov    edi,0x64
c001def1:	58                   	pop    eax
c001def2:	6a 0f                	push   0xf
c001def4:	6a 00                	push   0x0
c001def6:	e8 12 f2 ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001defb:	5a                   	pop    edx
c001defc:	59                   	pop    ecx
c001defd:	0f b6 c0             	movzx  eax,al
c001df00:	50                   	push   eax
c001df01:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df06:	99                   	cdq    
c001df07:	f7 ff                	idiv   edi
c001df09:	99                   	cdq    
c001df0a:	f7 fb                	idiv   ebx
c001df0c:	8d 42 30             	lea    eax,[edx+0x30]
c001df0f:	0f b6 c0             	movzx  eax,al
c001df12:	50                   	push   eax
c001df13:	e8 e4 f1 ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001df18:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df1e:	58                   	pop    eax
c001df1f:	5a                   	pop    edx
c001df20:	6a 0f                	push   0xf
c001df22:	6a 00                	push   0x0
c001df24:	e8 e4 f1 ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001df29:	59                   	pop    ecx
c001df2a:	5a                   	pop    edx
c001df2b:	0f b6 c0             	movzx  eax,al
c001df2e:	50                   	push   eax
c001df2f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df34:	99                   	cdq    
c001df35:	f7 fb                	idiv   ebx
c001df37:	99                   	cdq    
c001df38:	f7 fb                	idiv   ebx
c001df3a:	8d 42 30             	lea    eax,[edx+0x30]
c001df3d:	0f b6 c0             	movzx  eax,al
c001df40:	50                   	push   eax
c001df41:	e8 b6 f1 ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001df46:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001df4c:	59                   	pop    ecx
c001df4d:	58                   	pop    eax
c001df4e:	6a 0f                	push   0xf
c001df50:	6a 00                	push   0x0
c001df52:	e8 b6 f1 ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001df57:	5a                   	pop    edx
c001df58:	59                   	pop    ecx
c001df59:	0f b6 c0             	movzx  eax,al
c001df5c:	50                   	push   eax
c001df5d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df62:	99                   	cdq    
c001df63:	f7 fb                	idiv   ebx
c001df65:	83 c2 30             	add    edx,0x30
c001df68:	0f b6 d2             	movzx  edx,dl
c001df6b:	52                   	push   edx
c001df6c:	e8 8b f1 ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001df71:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001df77:	58                   	pop    eax
c001df78:	5a                   	pop    edx
c001df79:	6a 0f                	push   0xf
c001df7b:	6a 00                	push   0x0
c001df7d:	e8 8b f1 ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001df82:	59                   	pop    ecx
c001df83:	b9 10 27 00 00       	mov    ecx,0x2710
c001df88:	5a                   	pop    edx
c001df89:	0f b6 c0             	movzx  eax,al
c001df8c:	50                   	push   eax
c001df8d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001df92:	99                   	cdq    
c001df93:	f7 f9                	idiv   ecx
c001df95:	99                   	cdq    
c001df96:	f7 fb                	idiv   ebx
c001df98:	8d 42 30             	lea    eax,[edx+0x30]
c001df9b:	0f b6 c0             	movzx  eax,al
c001df9e:	50                   	push   eax
c001df9f:	e8 58 f1 ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001dfa4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dfaa:	59                   	pop    ecx
c001dfab:	58                   	pop    eax
c001dfac:	6a 0f                	push   0xf
c001dfae:	6a 00                	push   0x0
c001dfb0:	e8 58 f1 ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001dfb5:	5a                   	pop    edx
c001dfb6:	59                   	pop    ecx
c001dfb7:	0f b6 c0             	movzx  eax,al
c001dfba:	50                   	push   eax
c001dfbb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfc0:	99                   	cdq    
c001dfc1:	f7 fd                	idiv   ebp
c001dfc3:	99                   	cdq    
c001dfc4:	f7 fb                	idiv   ebx
c001dfc6:	8d 42 30             	lea    eax,[edx+0x30]
c001dfc9:	0f b6 c0             	movzx  eax,al
c001dfcc:	50                   	push   eax
c001dfcd:	e8 2a f1 ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001dfd2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dfd8:	5d                   	pop    ebp
c001dfd9:	58                   	pop    eax
c001dfda:	6a 0f                	push   0xf
c001dfdc:	6a 00                	push   0x0
c001dfde:	e8 2a f1 ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001dfe3:	5a                   	pop    edx
c001dfe4:	59                   	pop    ecx
c001dfe5:	0f b6 c0             	movzx  eax,al
c001dfe8:	50                   	push   eax
c001dfe9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfee:	99                   	cdq    
c001dfef:	f7 ff                	idiv   edi
c001dff1:	99                   	cdq    
c001dff2:	f7 fb                	idiv   ebx
c001dff4:	8d 42 30             	lea    eax,[edx+0x30]
c001dff7:	0f b6 c0             	movzx  eax,al
c001dffa:	50                   	push   eax
c001dffb:	e8 fc f0 ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e000:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e006:	5f                   	pop    edi
c001e007:	5d                   	pop    ebp
c001e008:	6a 0f                	push   0xf
c001e00a:	6a 00                	push   0x0
c001e00c:	e8 fc f0 ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001e011:	5a                   	pop    edx
c001e012:	59                   	pop    ecx
c001e013:	0f b6 c0             	movzx  eax,al
c001e016:	50                   	push   eax
c001e017:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e01c:	99                   	cdq    
c001e01d:	f7 fb                	idiv   ebx
c001e01f:	99                   	cdq    
c001e020:	f7 fb                	idiv   ebx
c001e022:	8d 42 30             	lea    eax,[edx+0x30]
c001e025:	0f b6 c0             	movzx  eax,al
c001e028:	50                   	push   eax
c001e029:	e8 ce f0 ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e02e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e034:	5f                   	pop    edi
c001e035:	5d                   	pop    ebp
c001e036:	6a 0f                	push   0xf
c001e038:	6a 00                	push   0x0
c001e03a:	e8 ce f0 ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001e03f:	5a                   	pop    edx
c001e040:	59                   	pop    ecx
c001e041:	0f b6 c0             	movzx  eax,al
c001e044:	50                   	push   eax
c001e045:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e04a:	99                   	cdq    
c001e04b:	f7 fb                	idiv   ebx
c001e04d:	83 c2 30             	add    edx,0x30
c001e050:	0f b6 d2             	movzx  edx,dl
c001e053:	52                   	push   edx
c001e054:	e8 a3 f0 ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e059:	83 c4 10             	add    esp,0x10
c001e05c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e062:	eb 05                	jmp    c001e069 <SATA::read(unsigned long long, int, void*)+0x245>
c001e064:	be 01 00 00 00       	mov    esi,0x1
c001e069:	83 c4 0c             	add    esp,0xc
c001e06c:	89 f0                	mov    eax,esi
c001e06e:	5b                   	pop    ebx
c001e06f:	5e                   	pop    esi
c001e070:	5f                   	pop    edi
c001e071:	5d                   	pop    ebp
c001e072:	c3                   	ret    
c001e073:	90                   	nop

c001e074 <SATA::write(unsigned long long, int, void*)>:
c001e074:	55                   	push   ebp
c001e075:	57                   	push   edi
c001e076:	56                   	push   esi
c001e077:	53                   	push   ebx
c001e078:	83 ec 0c             	sub    esp,0xc
c001e07b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e07f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e083:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e087:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e08b:	8d 70 ff             	lea    esi,[eax-0x1]
c001e08e:	b8 04 00 00 00       	mov    eax,0x4
c001e093:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e099:	0f 87 2c 02 00 00    	ja     c001e2cb <SATA::write(unsigned long long, int, void*)+0x257>
c001e09f:	85 db                	test   ebx,ebx
c001e0a1:	b8 06 00 00 00       	mov    eax,0x6
c001e0a6:	0f 84 1f 02 00 00    	je     c001e2cb <SATA::write(unsigned long long, int, void*)+0x257>
c001e0ac:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e0b0:	c1 e6 09             	shl    esi,0x9
c001e0b3:	01 de                	add    esi,ebx
c001e0b5:	50                   	push   eax
c001e0b6:	89 d7                	mov    edi,edx
c001e0b8:	50                   	push   eax
c001e0b9:	83 c7 01             	add    edi,0x1
c001e0bc:	6a 01                	push   0x1
c001e0be:	89 cd                	mov    ebp,ecx
c001e0c0:	53                   	push   ebx
c001e0c1:	83 d5 00             	adc    ebp,0x0
c001e0c4:	6a 01                	push   0x1
c001e0c6:	81 c3 00 02 00 00    	add    ebx,0x200
c001e0cc:	51                   	push   ecx
c001e0cd:	52                   	push   edx
c001e0ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0d2:	e8 fb fa ff ff       	call   c001dbd2 <SATA::access(unsigned long long, int, void*, bool)>
c001e0d7:	83 c4 20             	add    esp,0x20
c001e0da:	39 f3                	cmp    ebx,esi
c001e0dc:	89 fa                	mov    edx,edi
c001e0de:	89 e9                	mov    ecx,ebp
c001e0e0:	75 d3                	jne    c001e0b5 <SATA::write(unsigned long long, int, void*)+0x41>
c001e0e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0e6:	bd 10 27 00 00       	mov    ebp,0x2710
c001e0eb:	bb 0a 00 00 00       	mov    ebx,0xa
c001e0f0:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e0f6:	50                   	push   eax
c001e0f7:	50                   	push   eax
c001e0f8:	6a 0f                	push   0xf
c001e0fa:	6a 00                	push   0x0
c001e0fc:	e8 0c f0 ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001e101:	5a                   	pop    edx
c001e102:	59                   	pop    ecx
c001e103:	0f b6 c0             	movzx  eax,al
c001e106:	50                   	push   eax
c001e107:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e10c:	99                   	cdq    
c001e10d:	f7 fd                	idiv   ebp
c001e10f:	99                   	cdq    
c001e110:	f7 fb                	idiv   ebx
c001e112:	8d 42 30             	lea    eax,[edx+0x30]
c001e115:	0f b6 c0             	movzx  eax,al
c001e118:	50                   	push   eax
c001e119:	e8 de ef ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e11e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e124:	5e                   	pop    esi
c001e125:	5f                   	pop    edi
c001e126:	bf e8 03 00 00       	mov    edi,0x3e8
c001e12b:	6a 0f                	push   0xf
c001e12d:	6a 00                	push   0x0
c001e12f:	e8 d9 ef ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001e134:	5a                   	pop    edx
c001e135:	59                   	pop    ecx
c001e136:	0f b6 c0             	movzx  eax,al
c001e139:	50                   	push   eax
c001e13a:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e13f:	99                   	cdq    
c001e140:	f7 ff                	idiv   edi
c001e142:	99                   	cdq    
c001e143:	f7 fb                	idiv   ebx
c001e145:	8d 42 30             	lea    eax,[edx+0x30]
c001e148:	0f b6 c0             	movzx  eax,al
c001e14b:	50                   	push   eax
c001e14c:	e8 ab ef ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e151:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e157:	5e                   	pop    esi
c001e158:	be 64 00 00 00       	mov    esi,0x64
c001e15d:	58                   	pop    eax
c001e15e:	6a 0f                	push   0xf
c001e160:	6a 00                	push   0x0
c001e162:	e8 a6 ef ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001e167:	5a                   	pop    edx
c001e168:	59                   	pop    ecx
c001e169:	0f b6 c0             	movzx  eax,al
c001e16c:	50                   	push   eax
c001e16d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e172:	99                   	cdq    
c001e173:	f7 fe                	idiv   esi
c001e175:	99                   	cdq    
c001e176:	f7 fb                	idiv   ebx
c001e178:	8d 42 30             	lea    eax,[edx+0x30]
c001e17b:	0f b6 c0             	movzx  eax,al
c001e17e:	50                   	push   eax
c001e17f:	e8 78 ef ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e184:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e18a:	58                   	pop    eax
c001e18b:	5a                   	pop    edx
c001e18c:	6a 0f                	push   0xf
c001e18e:	6a 00                	push   0x0
c001e190:	e8 78 ef ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001e195:	59                   	pop    ecx
c001e196:	5a                   	pop    edx
c001e197:	0f b6 c0             	movzx  eax,al
c001e19a:	50                   	push   eax
c001e19b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1a0:	99                   	cdq    
c001e1a1:	f7 fb                	idiv   ebx
c001e1a3:	99                   	cdq    
c001e1a4:	f7 fb                	idiv   ebx
c001e1a6:	8d 42 30             	lea    eax,[edx+0x30]
c001e1a9:	0f b6 c0             	movzx  eax,al
c001e1ac:	50                   	push   eax
c001e1ad:	e8 4a ef ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e1b2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e1b8:	59                   	pop    ecx
c001e1b9:	58                   	pop    eax
c001e1ba:	6a 0f                	push   0xf
c001e1bc:	6a 00                	push   0x0
c001e1be:	e8 4a ef ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001e1c3:	5a                   	pop    edx
c001e1c4:	59                   	pop    ecx
c001e1c5:	0f b6 c0             	movzx  eax,al
c001e1c8:	50                   	push   eax
c001e1c9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1ce:	99                   	cdq    
c001e1cf:	f7 fb                	idiv   ebx
c001e1d1:	83 c2 30             	add    edx,0x30
c001e1d4:	0f b6 d2             	movzx  edx,dl
c001e1d7:	52                   	push   edx
c001e1d8:	e8 1f ef ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e1dd:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e1e3:	58                   	pop    eax
c001e1e4:	5a                   	pop    edx
c001e1e5:	6a 0f                	push   0xf
c001e1e7:	6a 00                	push   0x0
c001e1e9:	e8 1f ef ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001e1ee:	59                   	pop    ecx
c001e1ef:	5a                   	pop    edx
c001e1f0:	0f b6 c0             	movzx  eax,al
c001e1f3:	50                   	push   eax
c001e1f4:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1f9:	99                   	cdq    
c001e1fa:	f7 fd                	idiv   ebp
c001e1fc:	99                   	cdq    
c001e1fd:	f7 fb                	idiv   ebx
c001e1ff:	8d 42 30             	lea    eax,[edx+0x30]
c001e202:	0f b6 c0             	movzx  eax,al
c001e205:	50                   	push   eax
c001e206:	e8 f1 ee ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e20b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e211:	59                   	pop    ecx
c001e212:	5d                   	pop    ebp
c001e213:	6a 0f                	push   0xf
c001e215:	6a 00                	push   0x0
c001e217:	e8 f1 ee ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001e21c:	5a                   	pop    edx
c001e21d:	59                   	pop    ecx
c001e21e:	0f b6 c0             	movzx  eax,al
c001e221:	50                   	push   eax
c001e222:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e227:	99                   	cdq    
c001e228:	f7 ff                	idiv   edi
c001e22a:	99                   	cdq    
c001e22b:	f7 fb                	idiv   ebx
c001e22d:	8d 42 30             	lea    eax,[edx+0x30]
c001e230:	0f b6 c0             	movzx  eax,al
c001e233:	50                   	push   eax
c001e234:	e8 c3 ee ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e239:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e23f:	5f                   	pop    edi
c001e240:	5d                   	pop    ebp
c001e241:	6a 0f                	push   0xf
c001e243:	6a 00                	push   0x0
c001e245:	e8 c3 ee ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001e24a:	5a                   	pop    edx
c001e24b:	59                   	pop    ecx
c001e24c:	0f b6 c0             	movzx  eax,al
c001e24f:	50                   	push   eax
c001e250:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e255:	99                   	cdq    
c001e256:	f7 fe                	idiv   esi
c001e258:	99                   	cdq    
c001e259:	f7 fb                	idiv   ebx
c001e25b:	8d 42 30             	lea    eax,[edx+0x30]
c001e25e:	0f b6 c0             	movzx  eax,al
c001e261:	50                   	push   eax
c001e262:	e8 95 ee ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e267:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e26d:	5e                   	pop    esi
c001e26e:	5f                   	pop    edi
c001e26f:	6a 0f                	push   0xf
c001e271:	6a 00                	push   0x0
c001e273:	e8 95 ee ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001e278:	5d                   	pop    ebp
c001e279:	5a                   	pop    edx
c001e27a:	0f b6 c0             	movzx  eax,al
c001e27d:	50                   	push   eax
c001e27e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e283:	99                   	cdq    
c001e284:	f7 fb                	idiv   ebx
c001e286:	99                   	cdq    
c001e287:	f7 fb                	idiv   ebx
c001e289:	8d 42 30             	lea    eax,[edx+0x30]
c001e28c:	0f b6 c0             	movzx  eax,al
c001e28f:	50                   	push   eax
c001e290:	e8 67 ee ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e295:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e29b:	59                   	pop    ecx
c001e29c:	5e                   	pop    esi
c001e29d:	6a 0f                	push   0xf
c001e29f:	6a 00                	push   0x0
c001e2a1:	e8 67 ee ff ff       	call   c001d10d <combineColours(unsigned char, unsigned char)>
c001e2a6:	5f                   	pop    edi
c001e2a7:	5d                   	pop    ebp
c001e2a8:	0f b6 c0             	movzx  eax,al
c001e2ab:	50                   	push   eax
c001e2ac:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2b1:	99                   	cdq    
c001e2b2:	f7 fb                	idiv   ebx
c001e2b4:	83 c2 30             	add    edx,0x30
c001e2b7:	0f b6 d2             	movzx  edx,dl
c001e2ba:	52                   	push   edx
c001e2bb:	e8 3c ee ff ff       	call   c001d0fc <combineCharAndColour(char, unsigned char)>
c001e2c0:	83 c4 10             	add    esp,0x10
c001e2c3:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e2c9:	31 c0                	xor    eax,eax
c001e2cb:	83 c4 0c             	add    esp,0xc
c001e2ce:	5b                   	pop    ebx
c001e2cf:	5e                   	pop    esi
c001e2d0:	5f                   	pop    edi
c001e2d1:	5d                   	pop    ebp
c001e2d2:	c3                   	ret    
c001e2d3:	90                   	nop

c001e2d4 <SATAPI::write(unsigned long long, int, void*)>:
c001e2d4:	b8 03 00 00 00       	mov    eax,0x3
c001e2d9:	c3                   	ret    

c001e2da <SATAPI::close(int, int, void*)>:
c001e2da:	83 ec 0c             	sub    esp,0xc
c001e2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e2e7:	85 c0                	test   eax,eax
c001e2e9:	74 0c                	je     c001e2f7 <SATAPI::close(int, int, void*)+0x1d>
c001e2eb:	8b 10                	mov    edx,DWORD PTR [eax]
c001e2ed:	83 ec 0c             	sub    esp,0xc
c001e2f0:	50                   	push   eax
c001e2f1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e2f4:	83 c4 10             	add    esp,0x10
c001e2f7:	31 c0                	xor    eax,eax
c001e2f9:	83 c4 0c             	add    esp,0xc
c001e2fc:	c3                   	ret    
c001e2fd:	90                   	nop

c001e2fe <SATAPI::SATAPI()>:
c001e2fe:	83 ec 0c             	sub    esp,0xc
c001e301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e305:	83 ec 04             	sub    esp,0x4
c001e308:	68 00 08 00 00       	push   0x800
c001e30d:	68 9c 33 02 c0       	push   0xc002339c
c001e312:	50                   	push   eax
c001e313:	e8 06 ea fe ff       	call   c000cd1e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e318:	83 c4 10             	add    esp,0x10
c001e31b:	ba 90 34 02 c0       	mov    edx,0xc0023490
c001e320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e324:	89 10                	mov    DWORD PTR [eax],edx
c001e326:	90                   	nop
c001e327:	83 c4 0c             	add    esp,0xc
c001e32a:	c3                   	ret    
c001e32b:	90                   	nop

c001e32c <SATAPI::diskRemoved()>:
c001e32c:	c3                   	ret    
c001e32d:	90                   	nop

c001e32e <SATAPI::diskInserted()>:
c001e32e:	83 ec 18             	sub    esp,0x18
c001e331:	68 a8 33 02 c0       	push   0xc00233a8
c001e336:	e8 cf c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e33b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e33f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e346:	83 c4 1c             	add    esp,0x1c
c001e349:	c3                   	ret    

c001e34a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e34a:	55                   	push   ebp
c001e34b:	57                   	push   edi
c001e34c:	56                   	push   esi
c001e34d:	53                   	push   ebx
c001e34e:	83 ec 34             	sub    esp,0x34
c001e351:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e355:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e359:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e35d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e361:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e365:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e36b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e371:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e375:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e37b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e37f:	83 c0 02             	add    eax,0x2
c001e382:	c1 e0 07             	shl    eax,0x7
c001e385:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e389:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e38d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e391:	c1 e0 07             	shl    eax,0x7
c001e394:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e398:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e39c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e3a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e3aa:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e3b0:	e8 ff e4 ff ff       	call   c001c8b4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e3b5:	83 c4 10             	add    esp,0x10
c001e3b8:	89 c2                	mov    edx,eax
c001e3ba:	b8 01 00 00 00       	mov    eax,0x1
c001e3bf:	83 fa ff             	cmp    edx,0xffffffff
c001e3c2:	0f 84 5f 02 00 00    	je     c001e627 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e3c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e3cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3d0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e3d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3d8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e3de:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e3e4:	89 d1                	mov    ecx,edx
c001e3e6:	c1 e1 05             	shl    ecx,0x5
c001e3e9:	01 c8                	add    eax,ecx
c001e3eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e3ed:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e3f3:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e3f9:	89 08                	mov    DWORD PTR [eax],ecx
c001e3fb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e401:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e407:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e40d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e410:	50                   	push   eax
c001e411:	68 90 00 00 00       	push   0x90
c001e416:	6a 00                	push   0x0
c001e418:	53                   	push   ebx
c001e419:	e8 d2 20 fe ff       	call   c00004f0 <memset>
c001e41e:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e421:	b9 0c 00 00 00       	mov    ecx,0xc
c001e426:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e42a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e42c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e432:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e436:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e43a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e440:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e444:	48                   	dec    eax
c001e445:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e44a:	89 c1                	mov    ecx,eax
c001e44c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e452:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e457:	09 c8                	or     eax,ecx
c001e459:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e45f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e465:	83 c8 80             	or     eax,0xffffff80
c001e468:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e46e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e471:	25 00 7f 00 00       	and    eax,0x7f00
c001e476:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e47b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e47e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e482:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e48a:	c1 e8 10             	shr    eax,0x10
c001e48d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e494:	c1 e8 18             	shr    eax,0x18
c001e497:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e49a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e49e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e4a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4a5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e4a8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e4ac:	83 c4 10             	add    esp,0x10
c001e4af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e4b3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e4b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e4bb:	31 c0                	xor    eax,eax
c001e4bd:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e4c3:	80 e1 88             	and    cl,0x88
c001e4c6:	74 0a                	je     c001e4d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e4c8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e4cd:	74 0a                	je     c001e4d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e4cf:	40                   	inc    eax
c001e4d0:	eb eb                	jmp    c001e4bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e4d2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e4d7:	75 43                	jne    c001e51c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e4d9:	83 ec 0c             	sub    esp,0xc
c001e4dc:	68 c0 33 02 c0       	push   0xc00233c0
c001e4e1:	e8 24 c4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e4e6:	58                   	pop    eax
c001e4e7:	5a                   	pop    edx
c001e4e8:	68 d5 33 02 c0       	push   0xc00233d5
c001e4ed:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e4f3:	e8 b4 a5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e4f8:	59                   	pop    ecx
c001e4f9:	5b                   	pop    ebx
c001e4fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e4fe:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e504:	e8 45 e4 ff ff       	call   c001c94e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e509:	5e                   	pop    esi
c001e50a:	5f                   	pop    edi
c001e50b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e50f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e515:	e8 14 e4 ff ff       	call   c001c92e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e51a:	eb 48                	jmp    c001e564 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e51c:	b8 01 00 00 00       	mov    eax,0x1
c001e521:	88 d1                	mov    cl,dl
c001e523:	d3 e0                	shl    eax,cl
c001e525:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e52a:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e530:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e534:	89 c7                	mov    edi,eax
c001e536:	c1 e3 07             	shl    ebx,0x7
c001e539:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e53d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e543:	85 c7                	test   edi,eax
c001e545:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e54b:	0f 84 a3 00 00 00    	je     c001e5f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e551:	0f ba e0 1e          	bt     eax,0x1e
c001e555:	73 1a                	jae    c001e571 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e557:	83 ec 0c             	sub    esp,0xc
c001e55a:	68 e7 33 02 c0       	push   0xc00233e7
c001e55f:	e8 a6 c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e564:	83 c4 10             	add    esp,0x10
c001e567:	b8 01 00 00 00       	mov    eax,0x1
c001e56c:	e9 b6 00 00 00       	jmp    c001e627 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e571:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e577:	83 f8 0d             	cmp    eax,0xd
c001e57a:	77 0a                	ja     c001e586 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e57c:	83 ec 0c             	sub    esp,0xc
c001e57f:	68 c8 00 00 00       	push   0xc8
c001e584:	eb 28                	jmp    c001e5ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e586:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e58c:	83 f8 0d             	cmp    eax,0xd
c001e58f:	77 0a                	ja     c001e59b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e591:	83 ec 0c             	sub    esp,0xc
c001e594:	68 58 02 00 00       	push   0x258
c001e599:	eb 13                	jmp    c001e5ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e59b:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e5a1:	83 f8 06             	cmp    eax,0x6
c001e5a4:	77 10                	ja     c001e5b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e5a6:	83 ec 0c             	sub    esp,0xc
c001e5a9:	68 dc 05 00 00       	push   0x5dc
c001e5ae:	e8 69 7d ff ff       	call   c001631c <milliTenthSleep(unsigned int)>
c001e5b3:	83 c4 10             	add    esp,0x10
c001e5b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e5ba:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e5bd:	75 06                	jne    c001e5c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e5bf:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e5c3:	74 15                	je     c001e5da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e5c5:	83 fe 06             	cmp    esi,0x6
c001e5c8:	77 10                	ja     c001e5da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e5ca:	83 ec 0c             	sub    esp,0xc
c001e5cd:	68 c4 09 00 00       	push   0x9c4
c001e5d2:	e8 45 7d ff ff       	call   c001631c <milliTenthSleep(unsigned int)>
c001e5d7:	83 c4 10             	add    esp,0x10
c001e5da:	46                   	inc    esi
c001e5db:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e5e1:	0f 85 56 ff ff ff    	jne    c001e53d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e5e7:	83 ec 0c             	sub    esp,0xc
c001e5ea:	68 fa 33 02 c0       	push   0xc00233fa
c001e5ef:	e9 6b ff ff ff       	jmp    c001e55f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e5f4:	0f ba e0 1e          	bt     eax,0x1e
c001e5f8:	73 0d                	jae    c001e607 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e5fa:	83 ec 0c             	sub    esp,0xc
c001e5fd:	68 0e 34 02 c0       	push   0xc002340e
c001e602:	e9 58 ff ff ff       	jmp    c001e55f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e607:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e60c:	74 17                	je     c001e625 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e60e:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e613:	74 10                	je     c001e625 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e615:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e61b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e61f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e623:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e625:	31 c0                	xor    eax,eax
c001e627:	83 c4 2c             	add    esp,0x2c
c001e62a:	5b                   	pop    ebx
c001e62b:	5e                   	pop    esi
c001e62c:	5f                   	pop    edi
c001e62d:	5d                   	pop    ebp
c001e62e:	c3                   	ret    
c001e62f:	90                   	nop

c001e630 <SATAPI::eject()>:
c001e630:	57                   	push   edi
c001e631:	b9 03 00 00 00       	mov    ecx,0x3
c001e636:	83 ec 18             	sub    esp,0x18
c001e639:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e63d:	fc                   	cld    
c001e63e:	31 c0                	xor    eax,eax
c001e640:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e642:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e647:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e64c:	50                   	push   eax
c001e64d:	6a 00                	push   0x0
c001e64f:	6a 00                	push   0x0
c001e651:	6a 00                	push   0x0
c001e653:	6a 00                	push   0x0
c001e655:	6a 02                	push   0x2
c001e657:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e65b:	50                   	push   eax
c001e65c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e660:	e8 e5 fc ff ff       	call   c001e34a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e665:	83 c4 38             	add    esp,0x38
c001e668:	31 c0                	xor    eax,eax
c001e66a:	5f                   	pop    edi
c001e66b:	c3                   	ret    

c001e66c <SATAPI::detectMedia()>:
c001e66c:	53                   	push   ebx
c001e66d:	83 ec 14             	sub    esp,0x14
c001e670:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e674:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e67a:	e8 25 00 ff ff       	call   c000e6a4 <VCache::writeWriteBuffer()>
c001e67f:	59                   	pop    ecx
c001e680:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e686:	e8 09 00 ff ff       	call   c000e694 <VCache::invalidateReadBuffer()>
c001e68b:	c7 04 24 23 34 02 c0 	mov    DWORD PTR [esp],0xc0023423
c001e692:	e8 73 c2 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e697:	83 c4 10             	add    esp,0x10
c001e69a:	31 c0                	xor    eax,eax
c001e69c:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e6a3:	85 d2                	test   edx,edx
c001e6a5:	74 0f                	je     c001e6b6 <SATAPI::detectMedia()+0x4a>
c001e6a7:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e6ad:	75 07                	jne    c001e6b6 <SATAPI::detectMedia()+0x4a>
c001e6af:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e6b6:	40                   	inc    eax
c001e6b7:	83 f8 1a             	cmp    eax,0x1a
c001e6ba:	75 e0                	jne    c001e69c <SATAPI::detectMedia()+0x30>
c001e6bc:	83 c4 08             	add    esp,0x8
c001e6bf:	5b                   	pop    ebx
c001e6c0:	c3                   	ret    
c001e6c1:	90                   	nop

c001e6c2 <SATAPI::open(int, int, void*)>:
c001e6c2:	56                   	push   esi
c001e6c3:	53                   	push   ebx
c001e6c4:	51                   	push   ecx
c001e6c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e6cd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e6d7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e6dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6e1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e6eb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e6f5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e6fc:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e702:	e8 db 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e707:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e70d:	89 c6                	mov    esi,eax
c001e70f:	e8 ce 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e714:	81 c6 00 10 00 00    	add    esi,0x1000
c001e71a:	39 c6                	cmp    esi,eax
c001e71c:	74 10                	je     c001e72e <SATAPI::open(int, int, void*)+0x6c>
c001e71e:	83 ec 0c             	sub    esp,0xc
c001e721:	68 38 34 02 c0       	push   0xc0023438
c001e726:	e8 ec 2d ff ff       	call   c0011517 <KePanic(char const*)>
c001e72b:	83 c4 10             	add    esp,0x10
c001e72e:	83 ec 0c             	sub    esp,0xc
c001e731:	6a 02                	push   0x2
c001e733:	e8 bd ae fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e738:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e73e:	6a 03                	push   0x3
c001e740:	50                   	push   eax
c001e741:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e747:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e74d:	e8 ac b5 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e752:	83 c4 14             	add    esp,0x14
c001e755:	68 78 01 00 00       	push   0x178
c001e75a:	e8 74 93 fe ff       	call   c0007ad3 <malloc>
c001e75f:	83 c4 0c             	add    esp,0xc
c001e762:	6a 00                	push   0x0
c001e764:	68 ff ff ff 7f       	push   0x7fffffff
c001e769:	6a 00                	push   0x0
c001e76b:	6a 00                	push   0x0
c001e76d:	53                   	push   ebx
c001e76e:	68 4e 34 02 c0       	push   0xc002344e
c001e773:	89 c6                	mov    esi,eax
c001e775:	50                   	push   eax
c001e776:	e8 83 f3 fe ff       	call   c000dafe <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e77b:	83 c4 14             	add    esp,0x14
c001e77e:	56                   	push   esi
c001e77f:	e8 3a f4 fe ff       	call   c000dbbe <LogicalDisk::assignDriveLetter()>
c001e784:	5a                   	pop    edx
c001e785:	59                   	pop    ecx
c001e786:	0f be c0             	movsx  eax,al
c001e789:	50                   	push   eax
c001e78a:	68 a0 32 02 c0       	push   0xc00232a0
c001e78f:	e8 76 c1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e794:	58                   	pop    eax
c001e795:	5a                   	pop    edx
c001e796:	56                   	push   esi
c001e797:	53                   	push   ebx
c001e798:	e8 b3 e1 fe ff       	call   c000c950 <Device::addChild(Device*)>
c001e79d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e7a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7a6:	e8 db e5 fe ff       	call   c000cd86 <PhysicalDisk::startCache()>
c001e7ab:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e7b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7b5:	e8 b2 fe ff ff       	call   c001e66c <SATAPI::detectMedia()>
c001e7ba:	83 c4 14             	add    esp,0x14
c001e7bd:	31 c0                	xor    eax,eax
c001e7bf:	5b                   	pop    ebx
c001e7c0:	5e                   	pop    esi
c001e7c1:	c3                   	ret    

c001e7c2 <SATAPI::read(unsigned long long, int, void*)>:
c001e7c2:	55                   	push   ebp
c001e7c3:	57                   	push   edi
c001e7c4:	56                   	push   esi
c001e7c5:	53                   	push   ebx
c001e7c6:	83 ec 3c             	sub    esp,0x3c
c001e7c9:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e7cd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e7d1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e7d5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e7d9:	83 fd 04             	cmp    ebp,0x4
c001e7dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e7e4:	7e 10                	jle    c001e7f6 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e7e6:	83 ec 0c             	sub    esp,0xc
c001e7e9:	68 5c 34 02 c0       	push   0xc002345c
c001e7ee:	e8 24 2d ff ff       	call   c0011517 <KePanic(char const*)>
c001e7f3:	83 c4 10             	add    esp,0x10
c001e7f6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e7fc:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e802:	51                   	push   ecx
c001e803:	50                   	push   eax
c001e804:	83 c0 02             	add    eax,0x2
c001e807:	c1 e0 07             	shl    eax,0x7
c001e80a:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e810:	50                   	push   eax
c001e811:	52                   	push   edx
c001e812:	e8 61 e1 ff ff       	call   c001c978 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e817:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e81b:	b9 03 00 00 00       	mov    ecx,0x3
c001e820:	fc                   	cld    
c001e821:	31 c0                	xor    eax,eax
c001e823:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e825:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e82a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e82f:	83 c4 0c             	add    esp,0xc
c001e832:	6a 00                	push   0x0
c001e834:	6a 00                	push   0x0
c001e836:	6a 00                	push   0x0
c001e838:	6a 00                	push   0x0
c001e83a:	6a 02                	push   0x2
c001e83c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e840:	50                   	push   eax
c001e841:	53                   	push   ebx
c001e842:	e8 03 fb ff ff       	call   c001e34a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e847:	83 c4 20             	add    esp,0x20
c001e84a:	85 c0                	test   eax,eax
c001e84c:	89 c6                	mov    esi,eax
c001e84e:	75 46                	jne    c001e896 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e850:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e854:	b9 03 00 00 00       	mov    ecx,0x3
c001e859:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e85f:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e864:	0f c8                	bswap  eax
c001e866:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e86a:	89 e8                	mov    eax,ebp
c001e86c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e870:	50                   	push   eax
c001e871:	55                   	push   ebp
c001e872:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e876:	c1 e5 0b             	shl    ebp,0xb
c001e879:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e87d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e881:	55                   	push   ebp
c001e882:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e886:	50                   	push   eax
c001e887:	53                   	push   ebx
c001e888:	e8 bd fa ff ff       	call   c001e34a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e88d:	83 c4 20             	add    esp,0x20
c001e890:	85 c0                	test   eax,eax
c001e892:	89 c6                	mov    esi,eax
c001e894:	74 0c                	je     c001e8a2 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e896:	83 ec 0c             	sub    esp,0xc
c001e899:	53                   	push   ebx
c001e89a:	e8 cd fd ff ff       	call   c001e66c <SATAPI::detectMedia()>
c001e89f:	83 c4 10             	add    esp,0x10
c001e8a2:	83 c4 3c             	add    esp,0x3c
c001e8a5:	89 f0                	mov    eax,esi
c001e8a7:	5b                   	pop    ebx
c001e8a8:	5e                   	pop    esi
c001e8a9:	5f                   	pop    edi
c001e8aa:	5d                   	pop    ebp
c001e8ab:	c3                   	ret    

c001e8ac <IOAPIC::close(int, int, void*)>:
c001e8ac:	b8 00 00 00 00       	mov    eax,0x0
c001e8b1:	c3                   	ret    

c001e8b2 <apicGetBase()>:
c001e8b2:	55                   	push   ebp
c001e8b3:	89 e5                	mov    ebp,esp
c001e8b5:	83 ec 18             	sub    esp,0x18
c001e8b8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e8bd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e8c3:	83 e0 08             	and    eax,0x8
c001e8c6:	0f b6 c0             	movzx  eax,al
c001e8c9:	85 c0                	test   eax,eax
c001e8cb:	75 07                	jne    c001e8d4 <apicGetBase()+0x22>
c001e8cd:	b8 00 00 00 00       	mov    eax,0x0
c001e8d2:	eb 21                	jmp    c001e8f5 <apicGetBase()+0x43>
c001e8d4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e8d9:	83 ec 08             	sub    esp,0x8
c001e8dc:	6a 1b                	push   0x1b
c001e8de:	50                   	push   eax
c001e8df:	e8 fe 87 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e8e4:	83 c4 10             	add    esp,0x10
c001e8e7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e8ea:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e8ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8f0:	25 00 00 ff ff       	and    eax,0xffff0000
c001e8f5:	c9                   	leave  
c001e8f6:	c3                   	ret    
c001e8f7:	90                   	nop

c001e8f8 <IOAPIC::IOAPIC()>:
c001e8f8:	83 ec 0c             	sub    esp,0xc
c001e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ff:	83 ec 08             	sub    esp,0x8
c001e902:	68 c0 34 02 c0       	push   0xc00234c0
c001e907:	50                   	push   eax
c001e908:	e8 db e1 fe ff       	call   c000cae8 <Device::Device(char const*)>
c001e90d:	83 c4 10             	add    esp,0x10
c001e910:	ba d0 34 02 c0       	mov    edx,0xc00234d0
c001e915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e919:	89 10                	mov    DWORD PTR [eax],edx
c001e91b:	90                   	nop
c001e91c:	83 c4 0c             	add    esp,0xc
c001e91f:	c3                   	ret    

c001e920 <apicOpen()>:
c001e920:	55                   	push   ebp
c001e921:	89 e5                	mov    ebp,esp
c001e923:	53                   	push   ebx
c001e924:	83 ec 34             	sub    esp,0x34
c001e927:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e92c:	83 f0 01             	xor    eax,0x1
c001e92f:	0f b6 c0             	movzx  eax,al
c001e932:	85 c0                	test   eax,eax
c001e934:	0f 84 a3 00 00 00    	je     c001e9dd <apicOpen()+0xbd>
c001e93a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e93e:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e943:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e947:	0f b6 c0             	movzx  eax,al
c001e94a:	39 c2                	cmp    edx,eax
c001e94c:	0f 83 84 00 00 00    	jae    c001e9d6 <apicOpen()+0xb6>
c001e952:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e959:	83 ec 0c             	sub    esp,0xc
c001e95c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e95f:	e8 6f 91 fe ff       	call   c0007ad3 <malloc>
c001e964:	83 c4 10             	add    esp,0x10
c001e967:	89 c3                	mov    ebx,eax
c001e969:	83 ec 0c             	sub    esp,0xc
c001e96c:	53                   	push   ebx
c001e96d:	e8 86 ff ff ff       	call   c001e8f8 <IOAPIC::IOAPIC()>
c001e972:	83 c4 10             	add    esp,0x10
c001e975:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e978:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e97c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e97f:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e986:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001e98b:	83 c0 01             	add    eax,0x1
c001e98e:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001e993:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e998:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e99e:	83 ec 08             	sub    esp,0x8
c001e9a1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e9a4:	50                   	push   eax
c001e9a5:	e8 a6 df fe ff       	call   c000c950 <Device::addChild(Device*)>
c001e9aa:	83 c4 10             	add    esp,0x10
c001e9ad:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b2:	83 c0 08             	add    eax,0x8
c001e9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e9bb:	6a 00                	push   0x0
c001e9bd:	6a 00                	push   0x0
c001e9bf:	52                   	push   edx
c001e9c0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e9c3:	ff d0                	call   eax
c001e9c5:	83 c4 10             	add    esp,0x10
c001e9c8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e9cb:	83 c0 01             	add    eax,0x1
c001e9ce:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e9d1:	e9 68 ff ff ff       	jmp    c001e93e <apicOpen()+0x1e>
c001e9d6:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001e9dd:	e8 d0 fe ff ff       	call   c001e8b2 <apicGetBase()>
c001e9e2:	05 f0 00 00 00       	add    eax,0xf0
c001e9e7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e9ea:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e9ed:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ef:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e9f2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e9f9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ea00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea03:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ea06:	89 10                	mov    DWORD PTR [eax],edx
c001ea08:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ea0f:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001ea14:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ea17:	7d 7c                	jge    c001ea95 <apicOpen()+0x175>
c001ea19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea1c:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea23:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ea26:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea29:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea30:	c1 e8 08             	shr    eax,0x8
c001ea33:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ea37:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea3a:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea41:	c1 e8 18             	shr    eax,0x18
c001ea44:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ea47:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ea4b:	3d ff 00 00 00       	cmp    eax,0xff
c001ea50:	75 3a                	jne    c001ea8c <apicOpen()+0x16c>
c001ea52:	e8 5b fe ff ff       	call   c001e8b2 <apicGetBase()>
c001ea57:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ea5b:	83 fa 01             	cmp    edx,0x1
c001ea5e:	75 07                	jne    c001ea67 <apicOpen()+0x147>
c001ea60:	ba 60 03 00 00       	mov    edx,0x360
c001ea65:	eb 05                	jmp    c001ea6c <apicOpen()+0x14c>
c001ea67:	ba 50 03 00 00       	mov    edx,0x350
c001ea6c:	01 d0                	add    eax,edx
c001ea6e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ea71:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ea74:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea76:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ea79:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ea80:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ea84:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ea87:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ea8a:	89 10                	mov    DWORD PTR [eax],edx
c001ea8c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ea90:	e9 7a ff ff ff       	jmp    c001ea0f <apicOpen()+0xef>
c001ea95:	90                   	nop
c001ea96:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ea99:	c9                   	leave  
c001ea9a:	c3                   	ret    
c001ea9b:	90                   	nop

c001ea9c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ea9c:	55                   	push   ebp
c001ea9d:	89 e5                	mov    ebp,esp
c001ea9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaa2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eaa8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eaab:	72 1d                	jb     c001eaca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eaad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eab0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eab9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eabf:	01 d0                	add    eax,edx
c001eac1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eac4:	73 04                	jae    c001eaca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eac6:	b0 01                	mov    al,0x1
c001eac8:	eb 02                	jmp    c001eacc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eaca:	b0 00                	mov    al,0x0
c001eacc:	5d                   	pop    ebp
c001eacd:	c3                   	ret    

c001eace <IOAPIC::read(int)>:
c001eace:	55                   	push   ebp
c001eacf:	89 e5                	mov    ebp,esp
c001ead1:	83 ec 10             	sub    esp,0x10
c001ead4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ead7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eadd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eae0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eae3:	0f b6 d0             	movzx  edx,al
c001eae6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eae9:	89 10                	mov    DWORD PTR [eax],edx
c001eaeb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eaee:	83 c0 10             	add    eax,0x10
c001eaf1:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaf3:	c9                   	leave  
c001eaf4:	c3                   	ret    
c001eaf5:	90                   	nop

c001eaf6 <IOAPIC::open(int, int, void*)>:
c001eaf6:	55                   	push   ebp
c001eaf7:	89 e5                	mov    ebp,esp
c001eaf9:	57                   	push   edi
c001eafa:	56                   	push   esi
c001eafb:	53                   	push   ebx
c001eafc:	83 ec 04             	sub    esp,0x4
c001eaff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb02:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eb05:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb0e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb14:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001eb1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb1e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eb24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb27:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb2d:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001eb34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb37:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eb3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb40:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001eb46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb49:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb4f:	0f b6 f0             	movzx  esi,al
c001eb52:	89 d0                	mov    eax,edx
c001eb54:	ba 00 00 00 00       	mov    edx,0x0
c001eb59:	89 c7                	mov    edi,eax
c001eb5b:	83 e7 ff             	and    edi,0xffffffff
c001eb5e:	89 f9                	mov    ecx,edi
c001eb60:	0f b6 da             	movzx  ebx,dl
c001eb63:	89 c8                	mov    eax,ecx
c001eb65:	89 da                	mov    edx,ebx
c001eb67:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001eb6a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001eb6d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eb71:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001eb75:	83 e0 00             	and    eax,0x0
c001eb78:	09 d0                	or     eax,edx
c001eb7a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001eb7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb81:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb87:	8d 50 01             	lea    edx,[eax+0x1]
c001eb8a:	88 d1                	mov    cl,dl
c001eb8c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001eb8f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001eb95:	0f b6 d0             	movzx  edx,al
c001eb98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb9b:	83 c2 08             	add    edx,0x8
c001eb9e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001eba2:	0f b6 c9             	movzx  ecx,cl
c001eba5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ebab:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ebaf:	6a 01                	push   0x1
c001ebb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebb4:	e8 15 ff ff ff       	call   c001eace <IOAPIC::read(int)>
c001ebb9:	83 c4 08             	add    esp,0x8
c001ebbc:	c1 f8 10             	sar    eax,0x10
c001ebbf:	0f b6 c0             	movzx  eax,al
c001ebc2:	8d 50 01             	lea    edx,[eax+0x1]
c001ebc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebc8:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ebce:	b8 00 00 00 00       	mov    eax,0x0
c001ebd3:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ebd6:	5b                   	pop    ebx
c001ebd7:	5e                   	pop    esi
c001ebd8:	5f                   	pop    edi
c001ebd9:	5d                   	pop    ebp
c001ebda:	c3                   	ret    
c001ebdb:	90                   	nop

c001ebdc <IOAPIC::write(int, int)>:
c001ebdc:	55                   	push   ebp
c001ebdd:	89 e5                	mov    ebp,esp
c001ebdf:	83 ec 10             	sub    esp,0x10
c001ebe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebe5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ebeb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ebee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ebf1:	0f b6 d0             	movzx  edx,al
c001ebf4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebf7:	89 10                	mov    DWORD PTR [eax],edx
c001ebf9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebfc:	8d 50 10             	lea    edx,[eax+0x10]
c001ebff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec02:	89 02                	mov    DWORD PTR [edx],eax
c001ec04:	90                   	nop
c001ec05:	c9                   	leave  
c001ec06:	c3                   	ret    
c001ec07:	90                   	nop

c001ec08 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ec08:	55                   	push   ebp
c001ec09:	89 e5                	mov    ebp,esp
c001ec0b:	53                   	push   ebx
c001ec0c:	83 ec 2c             	sub    esp,0x2c
c001ec0f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec12:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ec15:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ec18:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ec1b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ec1e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec21:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec24:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ec27:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ec2a:	88 d8                	mov    al,bl
c001ec2c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ec2f:	88 c8                	mov    al,cl
c001ec31:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ec34:	88 d0                	mov    al,dl
c001ec36:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ec39:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec3d:	83 c0 08             	add    eax,0x8
c001ec40:	d1 e0                	shl    eax,1
c001ec42:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ec45:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec49:	83 c0 08             	add    eax,0x8
c001ec4c:	d1 e0                	shl    eax,1
c001ec4e:	83 c0 01             	add    eax,0x1
c001ec51:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ec54:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec57:	50                   	push   eax
c001ec58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec5b:	e8 6e fe ff ff       	call   c001eace <IOAPIC::read(int)>
c001ec60:	83 c4 08             	add    esp,0x8
c001ec63:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ec66:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ec6d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ec70:	c1 e0 18             	shl    eax,0x18
c001ec73:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ec76:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ec79:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec7c:	52                   	push   edx
c001ec7d:	50                   	push   eax
c001ec7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec81:	e8 56 ff ff ff       	call   c001ebdc <IOAPIC::write(int, int)>
c001ec86:	83 c4 0c             	add    esp,0xc
c001ec89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec8c:	50                   	push   eax
c001ec8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec90:	e8 39 fe ff ff       	call   c001eace <IOAPIC::read(int)>
c001ec95:	83 c4 08             	add    esp,0x8
c001ec98:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ec9b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001eca2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001eca9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ecb0:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ecb4:	85 c0                	test   eax,eax
c001ecb6:	74 09                	je     c001ecc1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ecb8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ecbf:	eb 07                	jmp    c001ecc8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ecc1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ecc8:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001eccc:	85 c0                	test   eax,eax
c001ecce:	74 09                	je     c001ecd9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ecd0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ecd7:	eb 07                	jmp    c001ece0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ecd9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ece0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ece7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001eceb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ecee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ecf1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ecf4:	52                   	push   edx
c001ecf5:	50                   	push   eax
c001ecf6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecf9:	e8 de fe ff ff       	call   c001ebdc <IOAPIC::write(int, int)>
c001ecfe:	83 c4 0c             	add    esp,0xc
c001ed01:	90                   	nop
c001ed02:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ed05:	c9                   	leave  
c001ed06:	c3                   	ret    
c001ed07:	90                   	nop

c001ed08 <APICTimer::close(int, int, void*)>:
c001ed08:	b8 00 00 00 00       	mov    eax,0x0
c001ed0d:	c3                   	ret    
c001ed0e:	66 90                	xchg   ax,ax

c001ed10 <apicTimerHandler(regs*, void*)>:
c001ed10:	83 ec 0c             	sub    esp,0xc
c001ed13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed17:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed19:	b8 10 27 00 00       	mov    eax,0x2710
c001ed1e:	ba 00 00 00 00       	mov    edx,0x0
c001ed23:	f7 f1                	div    ecx
c001ed25:	83 ec 0c             	sub    esp,0xc
c001ed28:	50                   	push   eax
c001ed29:	e8 8e f6 fe ff       	call   c000e3bc <timerHandler(unsigned int)>
c001ed2e:	83 c4 10             	add    esp,0x10
c001ed31:	90                   	nop
c001ed32:	83 c4 0c             	add    esp,0xc
c001ed35:	c3                   	ret    
c001ed36:	66 90                	xchg   ax,ax

c001ed38 <APICTimer::open(int, int, void*)>:
c001ed38:	83 ec 0c             	sub    esp,0xc
c001ed3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed41:	83 c0 24             	add    eax,0x24
c001ed44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed46:	83 ec 08             	sub    esp,0x8
c001ed49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed51:	ff d0                	call   eax
c001ed53:	83 c4 10             	add    esp,0x10
c001ed56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ed5e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ed64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed6c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ed72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed76:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ed7c:	83 ec 0c             	sub    esp,0xc
c001ed7f:	51                   	push   ecx
c001ed80:	6a 01                	push   0x1
c001ed82:	68 10 ed 01 c0       	push   0xc001ed10
c001ed87:	52                   	push   edx
c001ed88:	50                   	push   eax
c001ed89:	e8 6e db fe ff       	call   c000c8fc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed8e:	83 c4 20             	add    esp,0x20
c001ed91:	89 c2                	mov    edx,eax
c001ed93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed97:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ed9d:	b8 00 00 00 00       	mov    eax,0x0
c001eda2:	83 c4 0c             	add    esp,0xc
c001eda5:	c3                   	ret    
c001eda6:	66 90                	xchg   ax,ax

c001eda8 <APICTimer::write(int)>:
c001eda8:	83 ec 0c             	sub    esp,0xc
c001edab:	83 ec 0c             	sub    esp,0xc
c001edae:	68 f4 34 02 c0       	push   0xc00234f4
c001edb3:	e8 5f 27 ff ff       	call   c0011517 <KePanic(char const*)>
c001edb8:	83 c4 10             	add    esp,0x10
c001edbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001edc3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001edc9:	90                   	nop
c001edca:	83 c4 0c             	add    esp,0xc
c001edcd:	c3                   	ret    
c001edce:	66 90                	xchg   ax,ax

c001edd0 <APICTimer::APICTimer()>:
c001edd0:	83 ec 0c             	sub    esp,0xc
c001edd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd7:	83 ec 08             	sub    esp,0x8
c001edda:	68 04 35 02 c0       	push   0xc0023504
c001eddf:	50                   	push   eax
c001ede0:	e8 0b f5 fe ff       	call   c000e2f0 <Timer::Timer(char const*)>
c001ede5:	83 c4 10             	add    esp,0x10
c001ede8:	ba 18 35 02 c0       	mov    edx,0xc0023518
c001eded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf1:	89 10                	mov    DWORD PTR [eax],edx
c001edf3:	90                   	nop
c001edf4:	83 c4 0c             	add    esp,0xc
c001edf7:	c3                   	ret    

c001edf8 <PIT::write(int)>:
c001edf8:	83 ec 10             	sub    esp,0x10
c001edfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001edff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee03:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee0d:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ee12:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee17:	89 c2                	mov    edx,eax
c001ee19:	c1 fa 1f             	sar    edx,0x1f
c001ee1c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ee20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee24:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ee2b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ee30:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ee34:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ee39:	ee                   	out    dx,al
c001ee3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee3e:	0f b6 c0             	movzx  eax,al
c001ee41:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ee48:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ee4c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ee50:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ee55:	ee                   	out    dx,al
c001ee56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee5a:	c1 f8 08             	sar    eax,0x8
c001ee5d:	0f b6 c0             	movzx  eax,al
c001ee60:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ee67:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ee6b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ee6f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ee74:	ee                   	out    dx,al
c001ee75:	90                   	nop
c001ee76:	83 c4 10             	add    esp,0x10
c001ee79:	c3                   	ret    
c001ee7a:	66 90                	xchg   ax,ax

c001ee7c <pitHandler(regs*, void*)>:
c001ee7c:	83 ec 0c             	sub    esp,0xc
c001ee7f:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ee85:	b8 10 27 00 00       	mov    eax,0x2710
c001ee8a:	89 c2                	mov    edx,eax
c001ee8c:	c1 fa 1f             	sar    edx,0x1f
c001ee8f:	f7 f9                	idiv   ecx
c001ee91:	83 ec 0c             	sub    esp,0xc
c001ee94:	50                   	push   eax
c001ee95:	e8 22 f5 fe ff       	call   c000e3bc <timerHandler(unsigned int)>
c001ee9a:	83 c4 10             	add    esp,0x10
c001ee9d:	90                   	nop
c001ee9e:	83 c4 0c             	add    esp,0xc
c001eea1:	c3                   	ret    
c001eea2:	66 90                	xchg   ax,ax

c001eea4 <PIT::open(int, int, void*)>:
c001eea4:	83 ec 0c             	sub    esp,0xc
c001eea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeab:	8b 00                	mov    eax,DWORD PTR [eax]
c001eead:	83 c0 24             	add    eax,0x24
c001eeb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeb2:	83 ec 08             	sub    esp,0x8
c001eeb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eebd:	ff d0                	call   eax
c001eebf:	83 c4 10             	add    esp,0x10
c001eec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec6:	83 ec 0c             	sub    esp,0xc
c001eec9:	6a 00                	push   0x0
c001eecb:	6a 01                	push   0x1
c001eecd:	68 7c ee 01 c0       	push   0xc001ee7c
c001eed2:	6a 00                	push   0x0
c001eed4:	50                   	push   eax
c001eed5:	e8 22 da fe ff       	call   c000c8fc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eeda:	83 c4 20             	add    esp,0x20
c001eedd:	89 c2                	mov    edx,eax
c001eedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eee9:	b8 00 00 00 00       	mov    eax,0x0
c001eeee:	83 c4 0c             	add    esp,0xc
c001eef1:	c3                   	ret    
c001eef2:	66 90                	xchg   ax,ax

c001eef4 <PIT::close(int, int, void*)>:
c001eef4:	83 ec 0c             	sub    esp,0xc
c001eef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef09:	6a 01                	push   0x1
c001ef0b:	68 7c ee 01 c0       	push   0xc001ee7c
c001ef10:	6a 00                	push   0x0
c001ef12:	50                   	push   eax
c001ef13:	e8 1a da fe ff       	call   c000c932 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ef18:	83 c4 10             	add    esp,0x10
c001ef1b:	b8 00 00 00 00       	mov    eax,0x0
c001ef20:	83 c4 0c             	add    esp,0xc
c001ef23:	c3                   	ret    

c001ef24 <PIT::PIT()>:
c001ef24:	83 ec 0c             	sub    esp,0xc
c001ef27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2b:	83 ec 08             	sub    esp,0x8
c001ef2e:	68 40 35 02 c0       	push   0xc0023540
c001ef33:	50                   	push   eax
c001ef34:	e8 b7 f3 fe ff       	call   c000e2f0 <Timer::Timer(char const*)>
c001ef39:	83 c4 10             	add    esp,0x10
c001ef3c:	ba 68 35 02 c0       	mov    edx,0xc0023568
c001ef41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef45:	89 10                	mov    DWORD PTR [eax],edx
c001ef47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef51:	0f b6 d0             	movzx  edx,al
c001ef54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef58:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ef5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef63:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef69:	0f b6 d0             	movzx  edx,al
c001ef6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef70:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ef75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef79:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef7f:	8d 50 01             	lea    edx,[eax+0x1]
c001ef82:	88 d1                	mov    cl,dl
c001ef84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef88:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ef8e:	0f b6 d0             	movzx  edx,al
c001ef91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef95:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ef99:	83 e1 3f             	and    ecx,0x3f
c001ef9c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001efa0:	90                   	nop
c001efa1:	83 c4 0c             	add    esp,0xc
c001efa4:	c3                   	ret    
c001efa5:	66 90                	xchg   ax,ax
c001efa7:	66 90                	xchg   ax,ax
c001efa9:	66 90                	xchg   ax,ax
c001efab:	66 90                	xchg   ax,ax
c001efad:	66 90                	xchg   ax,ax
c001efaf:	90                   	nop

c001efb0 <avxDetect>:
c001efb0:	b8 01 00 00 00       	mov    eax,0x1
c001efb5:	0f a2                	cpuid  
c001efb7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001efbd:	74 15                	je     c001efd4 <avxDetect.noAVX>
c001efbf:	b8 01 00 00 00       	mov    eax,0x1
c001efc4:	0f a2                	cpuid  
c001efc6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001efcc:	74 06                	je     c001efd4 <avxDetect.noAVX>
c001efce:	b8 01 00 00 00       	mov    eax,0x1
c001efd3:	c3                   	ret    

c001efd4 <avxDetect.noAVX>:
c001efd4:	b8 00 00 00 00       	mov    eax,0x0
c001efd9:	c3                   	ret    

c001efda <avxSave>:
c001efda:	53                   	push   ebx
c001efdb:	52                   	push   edx
c001efdc:	31 c0                	xor    eax,eax
c001efde:	48                   	dec    eax
c001efdf:	89 c2                	mov    edx,eax
c001efe1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001efe5:	0f ae 23             	xsave  [ebx]
c001efe8:	5a                   	pop    edx
c001efe9:	5b                   	pop    ebx
c001efea:	c3                   	ret    

c001efeb <avxLoad>:
c001efeb:	53                   	push   ebx
c001efec:	52                   	push   edx
c001efed:	31 c0                	xor    eax,eax
c001efef:	48                   	dec    eax
c001eff0:	89 c2                	mov    edx,eax
c001eff2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eff6:	0f ae 2b             	xrstor [ebx]
c001eff9:	5a                   	pop    edx
c001effa:	5b                   	pop    ebx
c001effb:	c3                   	ret    

c001effc <avxInit>:
c001effc:	e8 67 03 00 00       	call   c001f368 <sseInit>
c001f001:	50                   	push   eax
c001f002:	51                   	push   ecx
c001f003:	0f 20 e0             	mov    eax,cr4
c001f006:	0d 00 00 04 00       	or     eax,0x40000
c001f00b:	0f 22 e0             	mov    cr4,eax
c001f00e:	31 c9                	xor    ecx,ecx
c001f010:	0f 01 d0             	xgetbv 
c001f013:	0d 07 00 00 00       	or     eax,0x7
c001f018:	0f 01 d1             	xsetbv 
c001f01b:	59                   	pop    ecx
c001f01c:	58                   	pop    eax
c001f01d:	c3                   	ret    

c001f01e <avxClose>:
c001f01e:	c3                   	ret    

c001f01f <wouldSheSayYes>:
c001f01f:	c3                   	ret    
c001f020:	49                   	dec    ecx
c001f021:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f025:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f029:	75 20                	jne    c001f04b <isr0+0xb>
c001f02b:	4e                   	dec    esi
c001f02c:	79 61                	jns    c001f08f <isr7+0x3>
c001f02e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f033:	66 90                	xchg   ax,ax
c001f035:	66 90                	xchg   ax,ax
c001f037:	66 90                	xchg   ax,ax
c001f039:	66 90                	xchg   ax,ax
c001f03b:	66 90                	xchg   ax,ax
c001f03d:	66 90                	xchg   ax,ax
c001f03f:	90                   	nop

c001f040 <isr0>:
c001f040:	fa                   	cli    
c001f041:	68 00 00 00 00       	push   0x0
c001f046:	68 00 00 00 00       	push   0x0
c001f04b:	e9 56 01 00 00       	jmp    c001f1a6 <int_common_stub>

c001f050 <isr1>:
c001f050:	fa                   	cli    
c001f051:	6a 00                	push   0x0
c001f053:	6a 01                	push   0x1
c001f055:	e9 4c 01 00 00       	jmp    c001f1a6 <int_common_stub>

c001f05a <isr2>:
c001f05a:	fa                   	cli    
c001f05b:	6a 00                	push   0x0
c001f05d:	6a 02                	push   0x2
c001f05f:	e9 42 01 00 00       	jmp    c001f1a6 <int_common_stub>

c001f064 <isr3>:
c001f064:	fa                   	cli    
c001f065:	6a 00                	push   0x0
c001f067:	6a 03                	push   0x3
c001f069:	e9 38 01 00 00       	jmp    c001f1a6 <int_common_stub>

c001f06e <isr4>:
c001f06e:	fa                   	cli    
c001f06f:	6a 00                	push   0x0
c001f071:	6a 04                	push   0x4
c001f073:	e9 2e 01 00 00       	jmp    c001f1a6 <int_common_stub>

c001f078 <isr5>:
c001f078:	fa                   	cli    
c001f079:	6a 00                	push   0x0
c001f07b:	6a 05                	push   0x5
c001f07d:	e9 24 01 00 00       	jmp    c001f1a6 <int_common_stub>

c001f082 <isr6>:
c001f082:	fa                   	cli    
c001f083:	6a 00                	push   0x0
c001f085:	6a 06                	push   0x6
c001f087:	e9 1a 01 00 00       	jmp    c001f1a6 <int_common_stub>

c001f08c <isr7>:
c001f08c:	fa                   	cli    
c001f08d:	6a 00                	push   0x0
c001f08f:	6a 07                	push   0x7
c001f091:	e9 10 01 00 00       	jmp    c001f1a6 <int_common_stub>

c001f096 <isr8>:
c001f096:	fa                   	cli    
c001f097:	6a 08                	push   0x8
c001f099:	e9 08 01 00 00       	jmp    c001f1a6 <int_common_stub>

c001f09e <isr9>:
c001f09e:	fa                   	cli    
c001f09f:	6a 00                	push   0x0
c001f0a1:	6a 09                	push   0x9
c001f0a3:	e9 fe 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f0a8 <isr10>:
c001f0a8:	fa                   	cli    
c001f0a9:	6a 0a                	push   0xa
c001f0ab:	e9 f6 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f0b0 <isr11>:
c001f0b0:	fa                   	cli    
c001f0b1:	6a 0b                	push   0xb
c001f0b3:	e9 ee 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f0b8 <isr12>:
c001f0b8:	fa                   	cli    
c001f0b9:	6a 0c                	push   0xc
c001f0bb:	e9 e6 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f0c0 <isr13>:
c001f0c0:	fa                   	cli    
c001f0c1:	6a 0d                	push   0xd
c001f0c3:	53                   	push   ebx
c001f0c4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0c8:	81 fb 96 f2 01 c0    	cmp    ebx,0xc001f296
c001f0ce:	5b                   	pop    ebx
c001f0cf:	0f 84 c3 01 00 00    	je     c001f298 <finishSignal2>
c001f0d5:	e9 cc 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f0da <isr14>:
c001f0da:	fa                   	cli    
c001f0db:	6a 0e                	push   0xe
c001f0dd:	e9 c4 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f0e2 <isr15>:
c001f0e2:	fa                   	cli    
c001f0e3:	6a 00                	push   0x0
c001f0e5:	6a 0f                	push   0xf
c001f0e7:	e9 ba 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f0ec <isr16>:
c001f0ec:	fa                   	cli    
c001f0ed:	6a 00                	push   0x0
c001f0ef:	6a 10                	push   0x10
c001f0f1:	e9 b0 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f0f6 <isr17>:
c001f0f6:	fa                   	cli    
c001f0f7:	6a 00                	push   0x0
c001f0f9:	6a 11                	push   0x11
c001f0fb:	e9 a6 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f100 <isr18>:
c001f100:	fa                   	cli    
c001f101:	6a 00                	push   0x0
c001f103:	6a 12                	push   0x12
c001f105:	e9 9c 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f10a <irq3>:
c001f10a:	fa                   	cli    
c001f10b:	6a 00                	push   0x0
c001f10d:	6a 23                	push   0x23
c001f10f:	e9 92 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f114 <irq4>:
c001f114:	fa                   	cli    
c001f115:	6a 00                	push   0x0
c001f117:	6a 24                	push   0x24
c001f119:	e9 88 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f11e <irq5>:
c001f11e:	fa                   	cli    
c001f11f:	6a 00                	push   0x0
c001f121:	6a 25                	push   0x25
c001f123:	e9 7e 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f128 <irq6>:
c001f128:	fa                   	cli    
c001f129:	6a 00                	push   0x0
c001f12b:	6a 26                	push   0x26
c001f12d:	e9 74 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f132 <irq7>:
c001f132:	fa                   	cli    
c001f133:	6a 00                	push   0x0
c001f135:	6a 27                	push   0x27
c001f137:	e9 6a 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f13c <irq8>:
c001f13c:	fa                   	cli    
c001f13d:	6a 00                	push   0x0
c001f13f:	6a 28                	push   0x28
c001f141:	e9 60 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f146 <irq9>:
c001f146:	fa                   	cli    
c001f147:	6a 00                	push   0x0
c001f149:	6a 29                	push   0x29
c001f14b:	e9 56 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f150 <irq10>:
c001f150:	fa                   	cli    
c001f151:	6a 00                	push   0x0
c001f153:	6a 2a                	push   0x2a
c001f155:	e9 4c 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f15a <irq11>:
c001f15a:	fa                   	cli    
c001f15b:	6a 00                	push   0x0
c001f15d:	6a 2b                	push   0x2b
c001f15f:	e9 42 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f164 <irq12>:
c001f164:	fa                   	cli    
c001f165:	6a 00                	push   0x0
c001f167:	6a 2c                	push   0x2c
c001f169:	e9 38 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f16e <irq13>:
c001f16e:	fa                   	cli    
c001f16f:	6a 00                	push   0x0
c001f171:	6a 2d                	push   0x2d
c001f173:	e9 2e 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f178 <irq14>:
c001f178:	fa                   	cli    
c001f179:	6a 00                	push   0x0
c001f17b:	6a 2e                	push   0x2e
c001f17d:	e9 24 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f182 <irq15>:
c001f182:	fa                   	cli    
c001f183:	6a 00                	push   0x0
c001f185:	6a 2f                	push   0x2f
c001f187:	e9 1a 00 00 00       	jmp    c001f1a6 <int_common_stub>

c001f18c <irq1>:
c001f18c:	fa                   	cli    
c001f18d:	6a 00                	push   0x0
c001f18f:	6a 21                	push   0x21
c001f191:	eb 13                	jmp    c001f1a6 <int_common_stub>

c001f193 <irq2>:
c001f193:	fa                   	cli    
c001f194:	6a 00                	push   0x0
c001f196:	6a 22                	push   0x22
c001f198:	eb 0c                	jmp    c001f1a6 <int_common_stub>

c001f19a <isr96>:
c001f19a:	6a 00                	push   0x0
c001f19c:	6a 60                	push   0x60
c001f19e:	fb                   	sti    
c001f19f:	eb 37                	jmp    c001f1d8 <syscall_common_stub>

c001f1a1 <irq0>:
c001f1a1:	fa                   	cli    
c001f1a2:	6a 00                	push   0x0
c001f1a4:	6a 20                	push   0x20

c001f1a6 <int_common_stub>:
c001f1a6:	60                   	pusha  
c001f1a7:	1e                   	push   ds
c001f1a8:	06                   	push   es
c001f1a9:	0f a0                	push   fs
c001f1ab:	0f a8                	push   gs
c001f1ad:	66 b8 10 00          	mov    ax,0x10
c001f1b1:	66 8e d8             	mov    ds,ax
c001f1b4:	66 8e c0             	mov    es,ax
c001f1b7:	66 8e e0             	mov    fs,ax
c001f1ba:	66 8e e8             	mov    gs,ax
c001f1bd:	54                   	push   esp
c001f1be:	fc                   	cld    
c001f1bf:	e8 38 dc fe ff       	call   c000cdfc <int_handler>
c001f1c4:	81 c4 04 00 00 00    	add    esp,0x4
c001f1ca:	0f a9                	pop    gs
c001f1cc:	0f a1                	pop    fs
c001f1ce:	07                   	pop    es
c001f1cf:	1f                   	pop    ds
c001f1d0:	61                   	popa   
c001f1d1:	81 c4 08 00 00 00    	add    esp,0x8
c001f1d7:	cf                   	iret   

c001f1d8 <syscall_common_stub>:
c001f1d8:	60                   	pusha  
c001f1d9:	1e                   	push   ds
c001f1da:	06                   	push   es
c001f1db:	0f a0                	push   fs
c001f1dd:	0f a8                	push   gs
c001f1df:	66 b8 10 00          	mov    ax,0x10
c001f1e3:	66 8e d8             	mov    ds,ax
c001f1e6:	66 8e c0             	mov    es,ax
c001f1e9:	66 8e e0             	mov    fs,ax
c001f1ec:	66 8e e8             	mov    gs,ax
c001f1ef:	54                   	push   esp
c001f1f0:	fc                   	cld    
c001f1f1:	e8 06 dc fe ff       	call   c000cdfc <int_handler>
c001f1f6:	81 c4 04 00 00 00    	add    esp,0x4
c001f1fc:	0f a9                	pop    gs
c001f1fe:	0f a1                	pop    fs
c001f200:	07                   	pop    es
c001f201:	1f                   	pop    ds
c001f202:	e8 20 29 ff ff       	call   c0011b27 <KiCheckSignalZ>
c001f207:	3d 00 00 00 00       	cmp    eax,0x0
c001f20c:	0f 84 c0 00 00 00    	je     c001f2d2 <skipSignals>
c001f212:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f217:	61                   	popa   
c001f218:	53                   	push   ebx
c001f219:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f21f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f222:	5b                   	pop    ebx
c001f223:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f228:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f22b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f22e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f231:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f234:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f237:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f23a:	81 c4 08 00 00 00    	add    esp,0x8
c001f240:	5e                   	pop    esi
c001f241:	5b                   	pop    ebx
c001f242:	59                   	pop    ecx
c001f243:	5a                   	pop    edx
c001f244:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f247:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f24a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f24d:	52                   	push   edx
c001f24e:	51                   	push   ecx
c001f24f:	53                   	push   ebx
c001f250:	56                   	push   esi
c001f251:	81 ec 08 00 00 00    	sub    esp,0x8
c001f257:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f25a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f25d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f260:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f263:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f266:	60                   	pusha  
c001f267:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f26d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f270:	89 e3                	mov    ebx,esp
c001f272:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f275:	52                   	push   edx
c001f276:	68 96 f2 01 c0       	push   0xc001f296
c001f27b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f27e:	89 dc                	mov    esp,ebx
c001f280:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f283:	68 23 00 00 00       	push   0x23
c001f288:	51                   	push   ecx
c001f289:	68 02 02 00 00       	push   0x202
c001f28e:	68 1b 00 00 00       	push   0x1b
c001f293:	ff 36                	push   DWORD PTR [esi]
c001f295:	cf                   	iret   

c001f296 <finishSignal>:
c001f296:	cd 0f                	int    0xf

c001f298 <finishSignal2>:
c001f298:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f29e:	e8 01 29 ff ff       	call   c0011ba4 <KiFinishSignalZ>
c001f2a3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f2a9:	68 23 00 00 00       	push   0x23
c001f2ae:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f2b1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f2b4:	68 1b 00 00 00       	push   0x1b
c001f2b9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f2bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f2bf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f2c2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f2c5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f2c8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f2cb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f2ce:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f2d1:	cf                   	iret   

c001f2d2 <skipSignals>:
c001f2d2:	61                   	popa   
c001f2d3:	81 c4 08 00 00 00    	add    esp,0x8
c001f2d9:	cf                   	iret   
c001f2da:	90                   	nop
c001f2db:	90                   	nop

c001f2dc <irq16>:
c001f2dc:	fa                   	cli    
c001f2dd:	6a 00                	push   0x0
c001f2df:	6a 30                	push   0x30
c001f2e1:	e9 c0 fe ff ff       	jmp    c001f1a6 <int_common_stub>

c001f2e6 <irq17>:
c001f2e6:	fa                   	cli    
c001f2e7:	6a 00                	push   0x0
c001f2e9:	6a 31                	push   0x31
c001f2eb:	e9 b6 fe ff ff       	jmp    c001f1a6 <int_common_stub>

c001f2f0 <irq18>:
c001f2f0:	fa                   	cli    
c001f2f1:	6a 00                	push   0x0
c001f2f3:	6a 32                	push   0x32
c001f2f5:	e9 ac fe ff ff       	jmp    c001f1a6 <int_common_stub>

c001f2fa <irq19>:
c001f2fa:	fa                   	cli    
c001f2fb:	6a 00                	push   0x0
c001f2fd:	6a 33                	push   0x33
c001f2ff:	e9 a2 fe ff ff       	jmp    c001f1a6 <int_common_stub>

c001f304 <irq20>:
c001f304:	fa                   	cli    
c001f305:	6a 00                	push   0x0
c001f307:	6a 34                	push   0x34
c001f309:	e9 98 fe ff ff       	jmp    c001f1a6 <int_common_stub>

c001f30e <irq21>:
c001f30e:	fa                   	cli    
c001f30f:	6a 00                	push   0x0
c001f311:	6a 35                	push   0x35
c001f313:	e9 8e fe ff ff       	jmp    c001f1a6 <int_common_stub>

c001f318 <irq22>:
c001f318:	fa                   	cli    
c001f319:	6a 00                	push   0x0
c001f31b:	6a 36                	push   0x36
c001f31d:	e9 84 fe ff ff       	jmp    c001f1a6 <int_common_stub>

c001f322 <irq23>:
c001f322:	fa                   	cli    
c001f323:	6a 00                	push   0x0
c001f325:	6a 37                	push   0x37
c001f327:	e9 7a fe ff ff       	jmp    c001f1a6 <int_common_stub>
c001f32c:	66 90                	xchg   ax,ax
c001f32e:	66 90                	xchg   ax,ax

c001f330 <i386GetRDRAND>:
c001f330:	b9 64 00 00 00       	mov    ecx,0x64

c001f335 <retry>:
c001f335:	0f c7 f0             	rdrand eax
c001f338:	72 05                	jb     c001f33f <retry.done>
c001f33a:	e2 f9                	loop   c001f335 <retry>

c001f33c <retry.fail>:
c001f33c:	31 c0                	xor    eax,eax
c001f33e:	c3                   	ret    

c001f33f <retry.done>:
c001f33f:	c3                   	ret    

c001f340 <absolutelyNoChanceInHell>:
c001f340:	b8 01 00 00 00       	mov    eax,0x1
c001f345:	0f a2                	cpuid  
c001f347:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f34d:	74 06                	je     c001f355 <sseDetect.noSSE>
c001f34f:	b8 01 00 00 00       	mov    eax,0x1
c001f354:	c3                   	ret    

c001f355 <sseDetect.noSSE>:
c001f355:	31 c0                	xor    eax,eax
c001f357:	c3                   	ret    

c001f358 <sseSave>:
c001f358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f35c:	0f ae 00             	fxsave [eax]
c001f35f:	c3                   	ret    

c001f360 <sseLoad>:
c001f360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f364:	0f ae 08             	fxrstor [eax]
c001f367:	c3                   	ret    

c001f368 <sseInit>:
c001f368:	e8 42 00 00 00       	call   c001f3af <x87Init>
c001f36d:	0f 20 e0             	mov    eax,cr4
c001f370:	66 0d 00 06          	or     ax,0x600
c001f374:	0f 22 e0             	mov    cr4,eax
c001f377:	c3                   	ret    

c001f378 <sseClose>:
c001f378:	c3                   	ret    
c001f379:	66 90                	xchg   ax,ax
c001f37b:	66 90                	xchg   ax,ax
c001f37d:	66 90                	xchg   ax,ax
c001f37f:	90                   	nop

c001f380 <value_37F>:
c001f380:	7f 03                	jg     c001f385 <value_37A+0x1>

c001f382 <value_37E>:
c001f382:	7e 03                	jle    c001f387 <x87Detect+0x1>

c001f384 <value_37A>:
c001f384:	7a 03                	jp     c001f389 <x87Detect+0x3>

c001f386 <x87Detect>:
c001f386:	b8 01 00 00 00       	mov    eax,0x1
c001f38b:	0f a2                	cpuid  
c001f38d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f393:	74 06                	je     c001f39b <x87Detect.nox87>
c001f395:	b8 01 00 00 00       	mov    eax,0x1
c001f39a:	c3                   	ret    

c001f39b <x87Detect.nox87>:
c001f39b:	b8 00 00 00 00       	mov    eax,0x0
c001f3a0:	c3                   	ret    

c001f3a1 <x87Save>:
c001f3a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3a5:	dd 30                	fnsave [eax]
c001f3a7:	c3                   	ret    

c001f3a8 <x87Load>:
c001f3a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ac:	dd 20                	frstor [eax]
c001f3ae:	c3                   	ret    

c001f3af <x87Init>:
c001f3af:	0f 20 c0             	mov    eax,cr0
c001f3b2:	66 25 fb ff          	and    ax,0xfffb
c001f3b6:	66 0d 22 00          	or     ax,0x22
c001f3ba:	0f 22 c0             	mov    cr0,eax
c001f3bd:	db e3                	fninit 
c001f3bf:	0f 06                	clts   
c001f3c1:	d9 2d 84 f3 01 c0    	fldcw  WORD PTR ds:0xc001f384
c001f3c7:	c3                   	ret    

c001f3c8 <x87Close>:
c001f3c8:	c3                   	ret    
c001f3c9:	66 90                	xchg   ax,ax
c001f3cb:	90                   	nop

c001f3cc <__do_global_ctors_aux>:
c001f3cc:	a1 80 03 02 c0       	mov    eax,ds:0xc0020380
c001f3d1:	83 f8 ff             	cmp    eax,0xffffffff
c001f3d4:	74 1a                	je     c001f3f0 <__do_global_ctors_aux+0x24>
c001f3d6:	55                   	push   ebp
c001f3d7:	89 e5                	mov    ebp,esp
c001f3d9:	53                   	push   ebx
c001f3da:	52                   	push   edx
c001f3db:	bb 80 03 02 c0       	mov    ebx,0xc0020380
c001f3e0:	ff d0                	call   eax
c001f3e2:	83 eb 04             	sub    ebx,0x4
c001f3e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f3e7:	83 f8 ff             	cmp    eax,0xffffffff
c001f3ea:	75 f4                	jne    c001f3e0 <__do_global_ctors_aux+0x14>
c001f3ec:	58                   	pop    eax
c001f3ed:	5b                   	pop    ebx
c001f3ee:	5d                   	pop    ebp
c001f3ef:	c3                   	ret    
c001f3f0:	c3                   	ret    
c001f3f1:	66 90                	xchg   ax,ax
c001f3f3:	90                   	nop

c001f3f4 <__divdi3>:
c001f3f4:	55                   	push   ebp
c001f3f5:	57                   	push   edi
c001f3f6:	56                   	push   esi
c001f3f7:	53                   	push   ebx
c001f3f8:	83 ec 1c             	sub    esp,0x1c
c001f3fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f3ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f403:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f406:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f40a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f40e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f412:	85 db                	test   ebx,ebx
c001f414:	0f 88 8e 00 00 00    	js     c001f4a8 <__divdi3+0xb4>
c001f41a:	89 dd                	mov    ebp,ebx
c001f41c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f424:	89 d3                	mov    ebx,edx
c001f426:	85 d2                	test   edx,edx
c001f428:	79 0d                	jns    c001f437 <__divdi3+0x43>
c001f42a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f42e:	f7 d8                	neg    eax
c001f430:	83 d2 00             	adc    edx,0x0
c001f433:	f7 da                	neg    edx
c001f435:	89 d3                	mov    ebx,edx
c001f437:	89 c7                	mov    edi,eax
c001f439:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f43c:	85 db                	test   ebx,ebx
c001f43e:	75 48                	jne    c001f488 <__divdi3+0x94>
c001f440:	39 ef                	cmp    edi,ebp
c001f442:	76 24                	jbe    c001f468 <__divdi3+0x74>
c001f444:	89 ea                	mov    edx,ebp
c001f446:	f7 f7                	div    edi
c001f448:	89 c1                	mov    ecx,eax
c001f44a:	31 f6                	xor    esi,esi
c001f44c:	89 c8                	mov    eax,ecx
c001f44e:	89 f2                	mov    edx,esi
c001f450:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f454:	85 c9                	test   ecx,ecx
c001f456:	74 07                	je     c001f45f <__divdi3+0x6b>
c001f458:	f7 d8                	neg    eax
c001f45a:	83 d2 00             	adc    edx,0x0
c001f45d:	f7 da                	neg    edx
c001f45f:	83 c4 1c             	add    esp,0x1c
c001f462:	5b                   	pop    ebx
c001f463:	5e                   	pop    esi
c001f464:	5f                   	pop    edi
c001f465:	5d                   	pop    ebp
c001f466:	c3                   	ret    
c001f467:	90                   	nop
c001f468:	85 ff                	test   edi,edi
c001f46a:	75 0b                	jne    c001f477 <__divdi3+0x83>
c001f46c:	b8 01 00 00 00       	mov    eax,0x1
c001f471:	31 d2                	xor    edx,edx
c001f473:	f7 f3                	div    ebx
c001f475:	89 c7                	mov    edi,eax
c001f477:	31 d2                	xor    edx,edx
c001f479:	89 e8                	mov    eax,ebp
c001f47b:	f7 f7                	div    edi
c001f47d:	89 c6                	mov    esi,eax
c001f47f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f482:	f7 f7                	div    edi
c001f484:	89 c1                	mov    ecx,eax
c001f486:	eb c4                	jmp    c001f44c <__divdi3+0x58>
c001f488:	39 eb                	cmp    ebx,ebp
c001f48a:	77 3c                	ja     c001f4c8 <__divdi3+0xd4>
c001f48c:	0f bd f3             	bsr    esi,ebx
c001f48f:	83 f6 1f             	xor    esi,0x1f
c001f492:	75 40                	jne    c001f4d4 <__divdi3+0xe0>
c001f494:	39 eb                	cmp    ebx,ebp
c001f496:	72 09                	jb     c001f4a1 <__divdi3+0xad>
c001f498:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f49b:	0f 87 97 00 00 00    	ja     c001f538 <__divdi3+0x144>
c001f4a1:	b9 01 00 00 00       	mov    ecx,0x1
c001f4a6:	eb a4                	jmp    c001f44c <__divdi3+0x58>
c001f4a8:	f7 d9                	neg    ecx
c001f4aa:	83 d3 00             	adc    ebx,0x0
c001f4ad:	f7 db                	neg    ebx
c001f4af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f4b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f4b6:	89 dd                	mov    ebp,ebx
c001f4b8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f4c0:	e9 5f ff ff ff       	jmp    c001f424 <__divdi3+0x30>
c001f4c5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4c8:	31 f6                	xor    esi,esi
c001f4ca:	31 c9                	xor    ecx,ecx
c001f4cc:	e9 7b ff ff ff       	jmp    c001f44c <__divdi3+0x58>
c001f4d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f4d4:	b8 20 00 00 00       	mov    eax,0x20
c001f4d9:	29 f0                	sub    eax,esi
c001f4db:	89 f1                	mov    ecx,esi
c001f4dd:	d3 e3                	shl    ebx,cl
c001f4df:	89 fa                	mov    edx,edi
c001f4e1:	88 c1                	mov    cl,al
c001f4e3:	d3 ea                	shr    edx,cl
c001f4e5:	09 da                	or     edx,ebx
c001f4e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f4eb:	89 f1                	mov    ecx,esi
c001f4ed:	d3 e7                	shl    edi,cl
c001f4ef:	89 eb                	mov    ebx,ebp
c001f4f1:	88 c1                	mov    cl,al
c001f4f3:	d3 eb                	shr    ebx,cl
c001f4f5:	89 f1                	mov    ecx,esi
c001f4f7:	d3 e5                	shl    ebp,cl
c001f4f9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f4fc:	88 c1                	mov    cl,al
c001f4fe:	d3 ea                	shr    edx,cl
c001f500:	09 d5                	or     ebp,edx
c001f502:	89 e8                	mov    eax,ebp
c001f504:	89 da                	mov    edx,ebx
c001f506:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f50a:	89 d3                	mov    ebx,edx
c001f50c:	89 c5                	mov    ebp,eax
c001f50e:	f7 e7                	mul    edi
c001f510:	39 d3                	cmp    ebx,edx
c001f512:	72 18                	jb     c001f52c <__divdi3+0x138>
c001f514:	74 0a                	je     c001f520 <__divdi3+0x12c>
c001f516:	89 e9                	mov    ecx,ebp
c001f518:	31 f6                	xor    esi,esi
c001f51a:	e9 2d ff ff ff       	jmp    c001f44c <__divdi3+0x58>
c001f51f:	90                   	nop
c001f520:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f523:	89 f1                	mov    ecx,esi
c001f525:	d3 e7                	shl    edi,cl
c001f527:	39 c7                	cmp    edi,eax
c001f529:	73 eb                	jae    c001f516 <__divdi3+0x122>
c001f52b:	90                   	nop
c001f52c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f52f:	31 f6                	xor    esi,esi
c001f531:	e9 16 ff ff ff       	jmp    c001f44c <__divdi3+0x58>
c001f536:	66 90                	xchg   ax,ax
c001f538:	31 c9                	xor    ecx,ecx
c001f53a:	e9 0d ff ff ff       	jmp    c001f44c <__divdi3+0x58>
c001f53f:	90                   	nop

c001f540 <__moddi3>:
c001f540:	55                   	push   ebp
c001f541:	57                   	push   edi
c001f542:	56                   	push   esi
c001f543:	53                   	push   ebx
c001f544:	83 ec 2c             	sub    esp,0x2c
c001f547:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f54b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f54f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f553:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f557:	85 db                	test   ebx,ebx
c001f559:	0f 88 85 00 00 00    	js     c001f5e4 <__moddi3+0xa4>
c001f55f:	89 de                	mov    esi,ebx
c001f561:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f569:	89 d7                	mov    edi,edx
c001f56b:	85 d2                	test   edx,edx
c001f56d:	79 09                	jns    c001f578 <__moddi3+0x38>
c001f56f:	f7 d8                	neg    eax
c001f571:	83 d2 00             	adc    edx,0x0
c001f574:	f7 da                	neg    edx
c001f576:	89 d7                	mov    edi,edx
c001f578:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f57c:	89 cd                	mov    ebp,ecx
c001f57e:	85 ff                	test   edi,edi
c001f580:	75 52                	jne    c001f5d4 <__moddi3+0x94>
c001f582:	89 c3                	mov    ebx,eax
c001f584:	39 f0                	cmp    eax,esi
c001f586:	76 24                	jbe    c001f5ac <__moddi3+0x6c>
c001f588:	89 c8                	mov    eax,ecx
c001f58a:	89 f2                	mov    edx,esi
c001f58c:	f7 f3                	div    ebx
c001f58e:	89 d6                	mov    esi,edx
c001f590:	89 f0                	mov    eax,esi
c001f592:	31 d2                	xor    edx,edx
c001f594:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f598:	85 c9                	test   ecx,ecx
c001f59a:	74 07                	je     c001f5a3 <__moddi3+0x63>
c001f59c:	f7 d8                	neg    eax
c001f59e:	83 d2 00             	adc    edx,0x0
c001f5a1:	f7 da                	neg    edx
c001f5a3:	83 c4 2c             	add    esp,0x2c
c001f5a6:	5b                   	pop    ebx
c001f5a7:	5e                   	pop    esi
c001f5a8:	5f                   	pop    edi
c001f5a9:	5d                   	pop    ebp
c001f5aa:	c3                   	ret    
c001f5ab:	90                   	nop
c001f5ac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f5b0:	85 db                	test   ebx,ebx
c001f5b2:	75 0d                	jne    c001f5c1 <__moddi3+0x81>
c001f5b4:	b8 01 00 00 00       	mov    eax,0x1
c001f5b9:	31 d2                	xor    edx,edx
c001f5bb:	f7 f7                	div    edi
c001f5bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5c1:	89 f0                	mov    eax,esi
c001f5c3:	31 d2                	xor    edx,edx
c001f5c5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f5c9:	f7 f7                	div    edi
c001f5cb:	89 e8                	mov    eax,ebp
c001f5cd:	f7 f7                	div    edi
c001f5cf:	89 d6                	mov    esi,edx
c001f5d1:	eb bd                	jmp    c001f590 <__moddi3+0x50>
c001f5d3:	90                   	nop
c001f5d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f5d8:	39 f7                	cmp    edi,esi
c001f5da:	76 20                	jbe    c001f5fc <__moddi3+0xbc>
c001f5dc:	89 c8                	mov    eax,ecx
c001f5de:	89 f2                	mov    edx,esi
c001f5e0:	eb b2                	jmp    c001f594 <__moddi3+0x54>
c001f5e2:	66 90                	xchg   ax,ax
c001f5e4:	f7 d9                	neg    ecx
c001f5e6:	83 d3 00             	adc    ebx,0x0
c001f5e9:	f7 db                	neg    ebx
c001f5eb:	89 de                	mov    esi,ebx
c001f5ed:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f5f5:	e9 6f ff ff ff       	jmp    c001f569 <__moddi3+0x29>
c001f5fa:	66 90                	xchg   ax,ax
c001f5fc:	0f bd c7             	bsr    eax,edi
c001f5ff:	83 f0 1f             	xor    eax,0x1f
c001f602:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f606:	75 24                	jne    c001f62c <__moddi3+0xec>
c001f608:	39 f7                	cmp    edi,esi
c001f60a:	72 06                	jb     c001f612 <__moddi3+0xd2>
c001f60c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f610:	77 0c                	ja     c001f61e <__moddi3+0xde>
c001f612:	89 e9                	mov    ecx,ebp
c001f614:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f618:	19 fe                	sbb    esi,edi
c001f61a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f61e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f622:	89 f2                	mov    edx,esi
c001f624:	e9 6b ff ff ff       	jmp    c001f594 <__moddi3+0x54>
c001f629:	8d 76 00             	lea    esi,[esi+0x0]
c001f62c:	b8 20 00 00 00       	mov    eax,0x20
c001f631:	89 c2                	mov    edx,eax
c001f633:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f637:	29 da                	sub    edx,ebx
c001f639:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f63d:	88 d9                	mov    cl,bl
c001f63f:	d3 e7                	shl    edi,cl
c001f641:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f645:	88 d1                	mov    cl,dl
c001f647:	d3 e8                	shr    eax,cl
c001f649:	09 c7                	or     edi,eax
c001f64b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f64f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f653:	89 d8                	mov    eax,ebx
c001f655:	88 d9                	mov    cl,bl
c001f657:	d3 e7                	shl    edi,cl
c001f659:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f65d:	89 f3                	mov    ebx,esi
c001f65f:	88 d1                	mov    cl,dl
c001f661:	d3 eb                	shr    ebx,cl
c001f663:	89 c7                	mov    edi,eax
c001f665:	88 c1                	mov    cl,al
c001f667:	d3 e6                	shl    esi,cl
c001f669:	89 e8                	mov    eax,ebp
c001f66b:	88 d1                	mov    cl,dl
c001f66d:	d3 e8                	shr    eax,cl
c001f66f:	09 f0                	or     eax,esi
c001f671:	89 f9                	mov    ecx,edi
c001f673:	d3 e5                	shl    ebp,cl
c001f675:	89 da                	mov    edx,ebx
c001f677:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f67b:	89 d3                	mov    ebx,edx
c001f67d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f681:	89 c6                	mov    esi,eax
c001f683:	89 d1                	mov    ecx,edx
c001f685:	39 d3                	cmp    ebx,edx
c001f687:	72 27                	jb     c001f6b0 <__moddi3+0x170>
c001f689:	74 21                	je     c001f6ac <__moddi3+0x16c>
c001f68b:	29 f5                	sub    ebp,esi
c001f68d:	19 cb                	sbb    ebx,ecx
c001f68f:	89 de                	mov    esi,ebx
c001f691:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f695:	d3 e6                	shl    esi,cl
c001f697:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f69b:	89 f9                	mov    ecx,edi
c001f69d:	d3 ed                	shr    ebp,cl
c001f69f:	09 ee                	or     esi,ebp
c001f6a1:	89 f0                	mov    eax,esi
c001f6a3:	d3 eb                	shr    ebx,cl
c001f6a5:	89 da                	mov    edx,ebx
c001f6a7:	e9 e8 fe ff ff       	jmp    c001f594 <__moddi3+0x54>
c001f6ac:	39 c5                	cmp    ebp,eax
c001f6ae:	73 db                	jae    c001f68b <__moddi3+0x14b>
c001f6b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f6b4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f6b8:	89 d1                	mov    ecx,edx
c001f6ba:	89 c6                	mov    esi,eax
c001f6bc:	eb cd                	jmp    c001f68b <__moddi3+0x14b>
c001f6be:	66 90                	xchg   ax,ax

c001f6c0 <__udivdi3>:
c001f6c0:	55                   	push   ebp
c001f6c1:	57                   	push   edi
c001f6c2:	56                   	push   esi
c001f6c3:	53                   	push   ebx
c001f6c4:	83 ec 1c             	sub    esp,0x1c
c001f6c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f6cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f6cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f6d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f6d7:	85 d2                	test   edx,edx
c001f6d9:	75 41                	jne    c001f71c <__udivdi3+0x5c>
c001f6db:	39 f7                	cmp    edi,esi
c001f6dd:	76 15                	jbe    c001f6f4 <__udivdi3+0x34>
c001f6df:	89 e8                	mov    eax,ebp
c001f6e1:	89 f2                	mov    edx,esi
c001f6e3:	f7 f7                	div    edi
c001f6e5:	31 db                	xor    ebx,ebx
c001f6e7:	89 da                	mov    edx,ebx
c001f6e9:	83 c4 1c             	add    esp,0x1c
c001f6ec:	5b                   	pop    ebx
c001f6ed:	5e                   	pop    esi
c001f6ee:	5f                   	pop    edi
c001f6ef:	5d                   	pop    ebp
c001f6f0:	c3                   	ret    
c001f6f1:	8d 76 00             	lea    esi,[esi+0x0]
c001f6f4:	89 f9                	mov    ecx,edi
c001f6f6:	85 ff                	test   edi,edi
c001f6f8:	75 0b                	jne    c001f705 <__udivdi3+0x45>
c001f6fa:	b8 01 00 00 00       	mov    eax,0x1
c001f6ff:	31 d2                	xor    edx,edx
c001f701:	f7 f7                	div    edi
c001f703:	89 c1                	mov    ecx,eax
c001f705:	31 d2                	xor    edx,edx
c001f707:	89 f0                	mov    eax,esi
c001f709:	f7 f1                	div    ecx
c001f70b:	89 c3                	mov    ebx,eax
c001f70d:	89 e8                	mov    eax,ebp
c001f70f:	f7 f1                	div    ecx
c001f711:	89 da                	mov    edx,ebx
c001f713:	83 c4 1c             	add    esp,0x1c
c001f716:	5b                   	pop    ebx
c001f717:	5e                   	pop    esi
c001f718:	5f                   	pop    edi
c001f719:	5d                   	pop    ebp
c001f71a:	c3                   	ret    
c001f71b:	90                   	nop
c001f71c:	39 f2                	cmp    edx,esi
c001f71e:	77 1c                	ja     c001f73c <__udivdi3+0x7c>
c001f720:	0f bd da             	bsr    ebx,edx
c001f723:	83 f3 1f             	xor    ebx,0x1f
c001f726:	75 24                	jne    c001f74c <__udivdi3+0x8c>
c001f728:	39 f2                	cmp    edx,esi
c001f72a:	72 08                	jb     c001f734 <__udivdi3+0x74>
c001f72c:	39 ef                	cmp    edi,ebp
c001f72e:	0f 87 84 00 00 00    	ja     c001f7b8 <__udivdi3+0xf8>
c001f734:	b8 01 00 00 00       	mov    eax,0x1
c001f739:	eb ac                	jmp    c001f6e7 <__udivdi3+0x27>
c001f73b:	90                   	nop
c001f73c:	31 db                	xor    ebx,ebx
c001f73e:	31 c0                	xor    eax,eax
c001f740:	89 da                	mov    edx,ebx
c001f742:	83 c4 1c             	add    esp,0x1c
c001f745:	5b                   	pop    ebx
c001f746:	5e                   	pop    esi
c001f747:	5f                   	pop    edi
c001f748:	5d                   	pop    ebp
c001f749:	c3                   	ret    
c001f74a:	66 90                	xchg   ax,ax
c001f74c:	b8 20 00 00 00       	mov    eax,0x20
c001f751:	29 d8                	sub    eax,ebx
c001f753:	88 d9                	mov    cl,bl
c001f755:	d3 e2                	shl    edx,cl
c001f757:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f75b:	89 fa                	mov    edx,edi
c001f75d:	88 c1                	mov    cl,al
c001f75f:	d3 ea                	shr    edx,cl
c001f761:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f765:	09 d1                	or     ecx,edx
c001f767:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f76b:	88 d9                	mov    cl,bl
c001f76d:	d3 e7                	shl    edi,cl
c001f76f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f773:	89 f7                	mov    edi,esi
c001f775:	88 c1                	mov    cl,al
c001f777:	d3 ef                	shr    edi,cl
c001f779:	88 d9                	mov    cl,bl
c001f77b:	d3 e6                	shl    esi,cl
c001f77d:	89 ea                	mov    edx,ebp
c001f77f:	88 c1                	mov    cl,al
c001f781:	d3 ea                	shr    edx,cl
c001f783:	09 d6                	or     esi,edx
c001f785:	89 f0                	mov    eax,esi
c001f787:	89 fa                	mov    edx,edi
c001f789:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f78d:	89 d7                	mov    edi,edx
c001f78f:	89 c6                	mov    esi,eax
c001f791:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f795:	39 d7                	cmp    edi,edx
c001f797:	72 13                	jb     c001f7ac <__udivdi3+0xec>
c001f799:	74 09                	je     c001f7a4 <__udivdi3+0xe4>
c001f79b:	89 f0                	mov    eax,esi
c001f79d:	31 db                	xor    ebx,ebx
c001f79f:	e9 43 ff ff ff       	jmp    c001f6e7 <__udivdi3+0x27>
c001f7a4:	88 d9                	mov    cl,bl
c001f7a6:	d3 e5                	shl    ebp,cl
c001f7a8:	39 c5                	cmp    ebp,eax
c001f7aa:	73 ef                	jae    c001f79b <__udivdi3+0xdb>
c001f7ac:	8d 46 ff             	lea    eax,[esi-0x1]
c001f7af:	31 db                	xor    ebx,ebx
c001f7b1:	e9 31 ff ff ff       	jmp    c001f6e7 <__udivdi3+0x27>
c001f7b6:	66 90                	xchg   ax,ax
c001f7b8:	31 c0                	xor    eax,eax
c001f7ba:	e9 28 ff ff ff       	jmp    c001f6e7 <__udivdi3+0x27>
c001f7bf:	90                   	nop

c001f7c0 <__umoddi3>:
c001f7c0:	55                   	push   ebp
c001f7c1:	57                   	push   edi
c001f7c2:	56                   	push   esi
c001f7c3:	53                   	push   ebx
c001f7c4:	83 ec 1c             	sub    esp,0x1c
c001f7c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f7cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f7d7:	89 da                	mov    edx,ebx
c001f7d9:	85 c0                	test   eax,eax
c001f7db:	75 37                	jne    c001f814 <__umoddi3+0x54>
c001f7dd:	39 df                	cmp    edi,ebx
c001f7df:	76 13                	jbe    c001f7f4 <__umoddi3+0x34>
c001f7e1:	89 f0                	mov    eax,esi
c001f7e3:	f7 f7                	div    edi
c001f7e5:	89 d0                	mov    eax,edx
c001f7e7:	31 d2                	xor    edx,edx
c001f7e9:	83 c4 1c             	add    esp,0x1c
c001f7ec:	5b                   	pop    ebx
c001f7ed:	5e                   	pop    esi
c001f7ee:	5f                   	pop    edi
c001f7ef:	5d                   	pop    ebp
c001f7f0:	c3                   	ret    
c001f7f1:	8d 76 00             	lea    esi,[esi+0x0]
c001f7f4:	89 fd                	mov    ebp,edi
c001f7f6:	85 ff                	test   edi,edi
c001f7f8:	75 0b                	jne    c001f805 <__umoddi3+0x45>
c001f7fa:	b8 01 00 00 00       	mov    eax,0x1
c001f7ff:	31 d2                	xor    edx,edx
c001f801:	f7 f7                	div    edi
c001f803:	89 c5                	mov    ebp,eax
c001f805:	89 d8                	mov    eax,ebx
c001f807:	31 d2                	xor    edx,edx
c001f809:	f7 f5                	div    ebp
c001f80b:	89 f0                	mov    eax,esi
c001f80d:	f7 f5                	div    ebp
c001f80f:	89 d0                	mov    eax,edx
c001f811:	eb d4                	jmp    c001f7e7 <__umoddi3+0x27>
c001f813:	90                   	nop
c001f814:	89 f1                	mov    ecx,esi
c001f816:	39 d8                	cmp    eax,ebx
c001f818:	76 0a                	jbe    c001f824 <__umoddi3+0x64>
c001f81a:	89 f0                	mov    eax,esi
c001f81c:	83 c4 1c             	add    esp,0x1c
c001f81f:	5b                   	pop    ebx
c001f820:	5e                   	pop    esi
c001f821:	5f                   	pop    edi
c001f822:	5d                   	pop    ebp
c001f823:	c3                   	ret    
c001f824:	0f bd e8             	bsr    ebp,eax
c001f827:	83 f5 1f             	xor    ebp,0x1f
c001f82a:	75 1c                	jne    c001f848 <__umoddi3+0x88>
c001f82c:	39 d8                	cmp    eax,ebx
c001f82e:	72 04                	jb     c001f834 <__umoddi3+0x74>
c001f830:	39 f7                	cmp    edi,esi
c001f832:	77 08                	ja     c001f83c <__umoddi3+0x7c>
c001f834:	89 da                	mov    edx,ebx
c001f836:	29 fe                	sub    esi,edi
c001f838:	19 c2                	sbb    edx,eax
c001f83a:	89 f1                	mov    ecx,esi
c001f83c:	89 c8                	mov    eax,ecx
c001f83e:	83 c4 1c             	add    esp,0x1c
c001f841:	5b                   	pop    ebx
c001f842:	5e                   	pop    esi
c001f843:	5f                   	pop    edi
c001f844:	5d                   	pop    ebp
c001f845:	c3                   	ret    
c001f846:	66 90                	xchg   ax,ax
c001f848:	ba 20 00 00 00       	mov    edx,0x20
c001f84d:	29 ea                	sub    edx,ebp
c001f84f:	89 e9                	mov    ecx,ebp
c001f851:	d3 e0                	shl    eax,cl
c001f853:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f857:	89 f8                	mov    eax,edi
c001f859:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f85d:	88 d1                	mov    cl,dl
c001f85f:	d3 e8                	shr    eax,cl
c001f861:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f865:	09 c1                	or     ecx,eax
c001f867:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f86b:	89 e9                	mov    ecx,ebp
c001f86d:	d3 e7                	shl    edi,cl
c001f86f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f873:	89 d8                	mov    eax,ebx
c001f875:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f879:	88 d1                	mov    cl,dl
c001f87b:	d3 e8                	shr    eax,cl
c001f87d:	89 c7                	mov    edi,eax
c001f87f:	89 e9                	mov    ecx,ebp
c001f881:	d3 e3                	shl    ebx,cl
c001f883:	89 f0                	mov    eax,esi
c001f885:	88 d1                	mov    cl,dl
c001f887:	d3 e8                	shr    eax,cl
c001f889:	09 d8                	or     eax,ebx
c001f88b:	89 e9                	mov    ecx,ebp
c001f88d:	d3 e6                	shl    esi,cl
c001f88f:	89 f3                	mov    ebx,esi
c001f891:	89 fa                	mov    edx,edi
c001f893:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f897:	89 d1                	mov    ecx,edx
c001f899:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f89d:	89 c6                	mov    esi,eax
c001f89f:	89 d7                	mov    edi,edx
c001f8a1:	39 d1                	cmp    ecx,edx
c001f8a3:	72 27                	jb     c001f8cc <__umoddi3+0x10c>
c001f8a5:	74 21                	je     c001f8c8 <__umoddi3+0x108>
c001f8a7:	89 ca                	mov    edx,ecx
c001f8a9:	29 f3                	sub    ebx,esi
c001f8ab:	19 fa                	sbb    edx,edi
c001f8ad:	89 d0                	mov    eax,edx
c001f8af:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f8b3:	d3 e0                	shl    eax,cl
c001f8b5:	89 e9                	mov    ecx,ebp
c001f8b7:	d3 eb                	shr    ebx,cl
c001f8b9:	09 d8                	or     eax,ebx
c001f8bb:	d3 ea                	shr    edx,cl
c001f8bd:	83 c4 1c             	add    esp,0x1c
c001f8c0:	5b                   	pop    ebx
c001f8c1:	5e                   	pop    esi
c001f8c2:	5f                   	pop    edi
c001f8c3:	5d                   	pop    ebp
c001f8c4:	c3                   	ret    
c001f8c5:	8d 76 00             	lea    esi,[esi+0x0]
c001f8c8:	39 c3                	cmp    ebx,eax
c001f8ca:	73 db                	jae    c001f8a7 <__umoddi3+0xe7>
c001f8cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f8d0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f8d4:	89 d7                	mov    edi,edx
c001f8d6:	89 c6                	mov    esi,eax
c001f8d8:	eb cd                	jmp    c001f8a7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f8da <_init>:
c001f8da:	55                   	push   ebp
c001f8db:	89 e5                	mov    ebp,esp
c001f8dd:	e8 12 08 fe ff       	call   c00000f4 <frame_dummy>
c001f8e2:	e8 e5 fa ff ff       	call   c001f3cc <__do_global_ctors_aux>
c001f8e7:	5d                   	pop    ebp
c001f8e8:	c3                   	ret    

Disassembly of section .fini:

c001f8e9 <_fini>:
c001f8e9:	55                   	push   ebp
c001f8ea:	89 e5                	mov    ebp,esp
c001f8ec:	e8 93 07 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f8f1:	5d                   	pop    ebp
c001f8f2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f8f4 <Computer::~Computer()>:
c001f8f4:	83 ec 0c             	sub    esp,0xc
c001f8f7:	ba 14 0c 02 c0       	mov    edx,0xc0020c14
c001f8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f900:	89 10                	mov    DWORD PTR [eax],edx
c001f902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f906:	83 ec 0c             	sub    esp,0xc
c001f909:	50                   	push   eax
c001f90a:	e8 43 cf fe ff       	call   c000c852 <Device::~Device()>
c001f90f:	83 c4 10             	add    esp,0x10
c001f912:	90                   	nop
c001f913:	83 c4 0c             	add    esp,0xc
c001f916:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f918 <Computer::~Computer()>:
c001f918:	83 ec 0c             	sub    esp,0xc
c001f91b:	83 ec 0c             	sub    esp,0xc
c001f91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f922:	e8 cd ff ff ff       	call   c001f8f4 <Computer::~Computer()>
c001f927:	83 c4 10             	add    esp,0x10
c001f92a:	83 ec 08             	sub    esp,0x8
c001f92d:	68 70 01 00 00       	push   0x170
c001f932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f936:	e8 d1 ae fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f93b:	83 c4 10             	add    esp,0x10
c001f93e:	83 c4 0c             	add    esp,0xc
c001f941:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f942 <idleCommon()>:
c001f942:	83 ec 0c             	sub    esp,0xc
c001f945:	fa                   	cli    
c001f946:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f94c:	e8 af 66 ff ff       	call   c0016000 <schedule()>
c001f951:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f956:	48                   	dec    eax
c001f957:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f95c:	75 01                	jne    c001f95f <idleCommon()+0x1d>
c001f95e:	fb                   	sti    
c001f95f:	83 c4 0c             	add    esp,0xc
c001f962:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f964 <LinkedList<UnixFile>::~LinkedList()>:
c001f964:	90                   	nop
c001f965:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f966 <LinkedList<UnixFile>::LinkedList()>:
c001f966:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f96a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f974:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f97b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f97f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f98a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f994:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f99b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f99f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9a6:	90                   	nop
c001f9a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f9a8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f9a8:	83 ec 0c             	sub    esp,0xc
c001f9ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f9b0:	75 10                	jne    c001f9c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f9b2:	83 ec 0c             	sub    esp,0xc
c001f9b5:	68 28 0e 02 c0       	push   0xc0020e28
c001f9ba:	e8 58 1b ff ff       	call   c0011517 <KePanic(char const*)>
c001f9bf:	83 c4 10             	add    esp,0x10
c001f9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9c8:	85 c0                	test   eax,eax
c001f9ca:	74 34                	je     c001fa00 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9d3:	85 c0                	test   eax,eax
c001f9d5:	74 29                	je     c001fa00 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9fe:	eb 65                	jmp    c001fa65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa06:	85 c0                	test   eax,eax
c001fa08:	75 4b                	jne    c001fa55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa11:	85 c0                	test   eax,eax
c001fa13:	75 40                	jne    c001fa55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa1d:	89 10                	mov    DWORD PTR [eax],edx
c001fa1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa3f:	85 c0                	test   eax,eax
c001fa41:	74 22                	je     c001fa65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa43:	83 ec 0c             	sub    esp,0xc
c001fa46:	68 4a 0e 02 c0       	push   0xc0020e4a
c001fa4b:	e8 c7 1a ff ff       	call   c0011517 <KePanic(char const*)>
c001fa50:	83 c4 10             	add    esp,0x10
c001fa53:	eb 10                	jmp    c001fa65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa55:	83 ec 0c             	sub    esp,0xc
c001fa58:	68 54 0e 02 c0       	push   0xc0020e54
c001fa5d:	e8 b5 1a ff ff       	call   c0011517 <KePanic(char const*)>
c001fa62:	83 c4 10             	add    esp,0x10
c001fa65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa69:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa6c:	8d 50 01             	lea    edx,[eax+0x1]
c001fa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa73:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa76:	90                   	nop
c001fa77:	83 c4 0c             	add    esp,0xc
c001fa7a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fa7c <LinkedList<UnixFile>::getFirstElement()>:
c001fa7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fa84 <LinkedList<UnixFile>::removeFirst()>:
c001fa84:	83 ec 0c             	sub    esp,0xc
c001fa87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa8d:	85 c0                	test   eax,eax
c001fa8f:	75 12                	jne    c001faa3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fa91:	83 ec 0c             	sub    esp,0xc
c001fa94:	68 60 0e 02 c0       	push   0xc0020e60
c001fa99:	e8 79 1a ff ff       	call   c0011517 <KePanic(char const*)>
c001fa9e:	83 c4 10             	add    esp,0x10
c001faa1:	eb 7e                	jmp    c001fb21 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001faa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faaa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faad:	85 c0                	test   eax,eax
c001faaf:	74 10                	je     c001fac1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fab1:	83 ec 0c             	sub    esp,0xc
c001fab4:	68 ab 0e 02 c0       	push   0xc0020eab
c001fab9:	e8 59 1a ff ff       	call   c0011517 <KePanic(char const*)>
c001fabe:	83 c4 10             	add    esp,0x10
c001fac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fac7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faca:	85 c0                	test   eax,eax
c001facc:	75 33                	jne    c001fb01 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001face:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faea:	83 f8 01             	cmp    eax,0x1
c001faed:	74 21                	je     c001fb10 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001faef:	83 ec 0c             	sub    esp,0xc
c001faf2:	68 84 0e 02 c0       	push   0xc0020e84
c001faf7:	e8 1b 1a ff ff       	call   c0011517 <KePanic(char const*)>
c001fafc:	83 c4 10             	add    esp,0x10
c001faff:	eb 0f                	jmp    c001fb10 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb05:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb07:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0e:	89 10                	mov    DWORD PTR [eax],edx
c001fb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb17:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb21:	83 c4 0c             	add    esp,0xc
c001fb24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fb26 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fb26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb2d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fb2e <DriverlessDevice::~DriverlessDevice()>:
c001fb2e:	ba bc 1a 02 c0       	mov    edx,0xc0021abc
c001fb33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb37:	89 10                	mov    DWORD PTR [eax],edx
c001fb39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb3d:	50                   	push   eax
c001fb3e:	e8 0f cd fe ff       	call   c000c852 <Device::~Device()>
c001fb43:	83 c4 04             	add    esp,0x4
c001fb46:	90                   	nop
c001fb47:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fb48 <DriverlessDevice::~DriverlessDevice()>:
c001fb48:	83 ec 0c             	sub    esp,0xc
c001fb4b:	83 ec 0c             	sub    esp,0xc
c001fb4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb52:	e8 d7 ff ff ff       	call   c001fb2e <DriverlessDevice::~DriverlessDevice()>
c001fb57:	83 c4 10             	add    esp,0x10
c001fb5a:	83 ec 08             	sub    esp,0x8
c001fb5d:	68 58 01 00 00       	push   0x158
c001fb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb66:	e8 a1 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb6b:	83 c4 10             	add    esp,0x10
c001fb6e:	83 c4 0c             	add    esp,0xc
c001fb71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fb72 <LinkedList<Device>::addElement(Device*)>:
c001fb72:	83 ec 0c             	sub    esp,0xc
c001fb75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb7a:	75 10                	jne    c001fb8c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fb7c:	83 ec 0c             	sub    esp,0xc
c001fb7f:	68 28 0e 02 c0       	push   0xc0020e28
c001fb84:	e8 8e 19 ff ff       	call   c0011517 <KePanic(char const*)>
c001fb89:	83 c4 10             	add    esp,0x10
c001fb8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb92:	85 c0                	test   eax,eax
c001fb94:	74 3a                	je     c001fbd0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb9d:	85 c0                	test   eax,eax
c001fb9f:	74 2f                	je     c001fbd0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fba8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbac:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbc4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fbce:	eb 68                	jmp    c001fc38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd6:	85 c0                	test   eax,eax
c001fbd8:	75 4e                	jne    c001fc28 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbe1:	85 c0                	test   eax,eax
c001fbe3:	75 43                	jne    c001fc28 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fbe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbed:	89 10                	mov    DWORD PTR [eax],edx
c001fbef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc01:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc12:	85 c0                	test   eax,eax
c001fc14:	74 22                	je     c001fc38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc16:	83 ec 0c             	sub    esp,0xc
c001fc19:	68 4a 0e 02 c0       	push   0xc0020e4a
c001fc1e:	e8 f4 18 ff ff       	call   c0011517 <KePanic(char const*)>
c001fc23:	83 c4 10             	add    esp,0x10
c001fc26:	eb 10                	jmp    c001fc38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc28:	83 ec 0c             	sub    esp,0xc
c001fc2b:	68 54 0e 02 c0       	push   0xc0020e54
c001fc30:	e8 e2 18 ff ff       	call   c0011517 <KePanic(char const*)>
c001fc35:	83 c4 10             	add    esp,0x10
c001fc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc3f:	8d 50 01             	lea    edx,[eax+0x1]
c001fc42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc49:	90                   	nop
c001fc4a:	83 c4 0c             	add    esp,0xc
c001fc4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fc4e <LinkedList<Device>::LinkedList()>:
c001fc4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc8e:	90                   	nop
c001fc8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fc90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fc90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc94:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc96:	85 c0                	test   eax,eax
c001fc98:	75 0e                	jne    c001fca8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fc9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fca1:	85 c0                	test   eax,eax
c001fca3:	75 03                	jne    c001fca8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fca5:	b0 01                	mov    al,0x1
c001fca7:	c3                   	ret    
c001fca8:	b0 00                	mov    al,0x0
c001fcaa:	90                   	nop
c001fcab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fcac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fcac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fcb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fcb4:	83 ec 0c             	sub    esp,0xc
c001fcb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcbd:	85 c0                	test   eax,eax
c001fcbf:	75 17                	jne    c001fcd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fcc1:	83 ec 0c             	sub    esp,0xc
c001fcc4:	68 60 0e 02 c0       	push   0xc0020e60
c001fcc9:	e8 49 18 ff ff       	call   c0011517 <KePanic(char const*)>
c001fcce:	83 c4 10             	add    esp,0x10
c001fcd1:	e9 96 00 00 00       	jmp    c001fd6c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fcd6:	66 90                	xchg   ax,ax
c001fcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcdf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fce2:	85 c0                	test   eax,eax
c001fce4:	0f 95 c0             	setne  al
c001fce7:	0f b6 c0             	movzx  eax,al
c001fcea:	85 c0                	test   eax,eax
c001fcec:	74 12                	je     c001fd00 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fcee:	83 ec 0c             	sub    esp,0xc
c001fcf1:	68 ab 0e 02 c0       	push   0xc0020eab
c001fcf6:	e8 1c 18 ff ff       	call   c0011517 <KePanic(char const*)>
c001fcfb:	83 c4 10             	add    esp,0x10
c001fcfe:	66 90                	xchg   ax,ax
c001fd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd09:	85 c0                	test   eax,eax
c001fd0b:	0f 94 c0             	sete   al
c001fd0e:	0f b6 c0             	movzx  eax,al
c001fd11:	85 c0                	test   eax,eax
c001fd13:	74 33                	je     c001fd48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fd15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd19:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd23:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd31:	83 f8 01             	cmp    eax,0x1
c001fd34:	74 22                	je     c001fd58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd36:	83 ec 0c             	sub    esp,0xc
c001fd39:	68 84 0e 02 c0       	push   0xc0020e84
c001fd3e:	e8 d4 17 ff ff       	call   c0011517 <KePanic(char const*)>
c001fd43:	83 c4 10             	add    esp,0x10
c001fd46:	eb 10                	jmp    c001fd58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd4e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fd51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd55:	89 10                	mov    DWORD PTR [eax],edx
c001fd57:	90                   	nop
c001fd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd5f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd69:	8d 76 00             	lea    esi,[esi+0x0]
c001fd6c:	83 c4 0c             	add    esp,0xc
c001fd6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fd70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fd70:	83 ec 0c             	sub    esp,0xc
c001fd73:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd78:	75 12                	jne    c001fd8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fd7a:	83 ec 0c             	sub    esp,0xc
c001fd7d:	68 28 0e 02 c0       	push   0xc0020e28
c001fd82:	e8 90 17 ff ff       	call   c0011517 <KePanic(char const*)>
c001fd87:	83 c4 10             	add    esp,0x10
c001fd8a:	66 90                	xchg   ax,ax
c001fd8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd92:	85 c0                	test   eax,eax
c001fd94:	74 36                	je     c001fdcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd9d:	85 c0                	test   eax,eax
c001fd9f:	74 2b                	je     c001fdcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fda1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fda8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdac:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fdaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdb7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdc1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fdc8:	eb 6a                	jmp    c001fe34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fdca:	66 90                	xchg   ax,ax
c001fdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdd2:	85 c0                	test   eax,eax
c001fdd4:	75 4e                	jne    c001fe24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fddd:	85 c0                	test   eax,eax
c001fddf:	75 43                	jne    c001fe24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fde1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fde9:	89 10                	mov    DWORD PTR [eax],edx
c001fdeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdf3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdfd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe0b:	85 c0                	test   eax,eax
c001fe0d:	74 25                	je     c001fe34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe0f:	83 ec 0c             	sub    esp,0xc
c001fe12:	68 4a 0e 02 c0       	push   0xc0020e4a
c001fe17:	e8 fb 16 ff ff       	call   c0011517 <KePanic(char const*)>
c001fe1c:	83 c4 10             	add    esp,0x10
c001fe1f:	eb 13                	jmp    c001fe34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe21:	8d 76 00             	lea    esi,[esi+0x0]
c001fe24:	83 ec 0c             	sub    esp,0xc
c001fe27:	68 54 0e 02 c0       	push   0xc0020e54
c001fe2c:	e8 e6 16 ff ff       	call   c0011517 <KePanic(char const*)>
c001fe31:	83 c4 10             	add    esp,0x10
c001fe34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe3b:	8d 50 01             	lea    edx,[eax+0x1]
c001fe3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe45:	90                   	nop
c001fe46:	83 c4 0c             	add    esp,0xc
c001fe49:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fe4c <ACPI::~ACPI()>:
c001fe4c:	83 ec 0c             	sub    esp,0xc
c001fe4f:	ba a4 20 02 c0       	mov    edx,0xc00220a4
c001fe54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe58:	89 10                	mov    DWORD PTR [eax],edx
c001fe5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5e:	83 ec 0c             	sub    esp,0xc
c001fe61:	50                   	push   eax
c001fe62:	e8 eb c9 fe ff       	call   c000c852 <Device::~Device()>
c001fe67:	83 c4 10             	add    esp,0x10
c001fe6a:	90                   	nop
c001fe6b:	83 c4 0c             	add    esp,0xc
c001fe6e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fe70 <ACPI::~ACPI()>:
c001fe70:	83 ec 0c             	sub    esp,0xc
c001fe73:	83 ec 0c             	sub    esp,0xc
c001fe76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe7a:	e8 cd ff ff ff       	call   c001fe4c <ACPI::~ACPI()>
c001fe7f:	83 c4 10             	add    esp,0x10
c001fe82:	83 ec 08             	sub    esp,0x8
c001fe85:	68 64 12 00 00       	push   0x1264
c001fe8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe8e:	e8 79 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe93:	83 c4 10             	add    esp,0x10
c001fe96:	83 c4 0c             	add    esp,0xc
c001fe99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fe9c <LinkedList<Device>::~LinkedList()>:
c001fe9c:	90                   	nop
c001fe9d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fea0 <LinkedList<Device>::isEmpty()>:
c001fea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fea4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fea6:	85 c0                	test   eax,eax
c001fea8:	75 0e                	jne    c001feb8 <LinkedList<Device>::isEmpty()+0x18>
c001feaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feb1:	85 c0                	test   eax,eax
c001feb3:	75 03                	jne    c001feb8 <LinkedList<Device>::isEmpty()+0x18>
c001feb5:	b0 01                	mov    al,0x1
c001feb7:	c3                   	ret    
c001feb8:	b0 00                	mov    al,0x0
c001feba:	90                   	nop
c001febb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001febc <LinkedList<Device>::getFirstElement()>:
c001febc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fec0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fec2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fec4 <LinkedList<Device>::removeFirst()>:
c001fec4:	83 ec 0c             	sub    esp,0xc
c001fec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fecb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fecd:	85 c0                	test   eax,eax
c001fecf:	75 17                	jne    c001fee8 <LinkedList<Device>::removeFirst()+0x24>
c001fed1:	83 ec 0c             	sub    esp,0xc
c001fed4:	68 60 0e 02 c0       	push   0xc0020e60
c001fed9:	e8 39 16 ff ff       	call   c0011517 <KePanic(char const*)>
c001fede:	83 c4 10             	add    esp,0x10
c001fee1:	e9 92 00 00 00       	jmp    c001ff78 <LinkedList<Device>::removeFirst()+0xb4>
c001fee6:	66 90                	xchg   ax,ax
c001fee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feef:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fef5:	85 c0                	test   eax,eax
c001fef7:	74 13                	je     c001ff0c <LinkedList<Device>::removeFirst()+0x48>
c001fef9:	83 ec 0c             	sub    esp,0xc
c001fefc:	68 ab 0e 02 c0       	push   0xc0020eab
c001ff01:	e8 11 16 ff ff       	call   c0011517 <KePanic(char const*)>
c001ff06:	83 c4 10             	add    esp,0x10
c001ff09:	8d 76 00             	lea    esi,[esi+0x0]
c001ff0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff12:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff18:	85 c0                	test   eax,eax
c001ff1a:	75 34                	jne    c001ff50 <LinkedList<Device>::removeFirst()+0x8c>
c001ff1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff35:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff38:	83 f8 01             	cmp    eax,0x1
c001ff3b:	74 27                	je     c001ff64 <LinkedList<Device>::removeFirst()+0xa0>
c001ff3d:	83 ec 0c             	sub    esp,0xc
c001ff40:	68 84 0e 02 c0       	push   0xc0020e84
c001ff45:	e8 cd 15 ff ff       	call   c0011517 <KePanic(char const*)>
c001ff4a:	83 c4 10             	add    esp,0x10
c001ff4d:	eb 15                	jmp    c001ff64 <LinkedList<Device>::removeFirst()+0xa0>
c001ff4f:	90                   	nop
c001ff50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff54:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff56:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ff5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff60:	89 10                	mov    DWORD PTR [eax],edx
c001ff62:	66 90                	xchg   ax,ax
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff6b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ff6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff75:	8d 76 00             	lea    esi,[esi+0x0]
c001ff78:	83 c4 0c             	add    esp,0xc
c001ff7b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ff7c <CPU::~CPU()>:
c001ff7c:	83 ec 0c             	sub    esp,0xc
c001ff7f:	ba 4c 22 02 c0       	mov    edx,0xc002224c
c001ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff88:	89 10                	mov    DWORD PTR [eax],edx
c001ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8e:	83 ec 0c             	sub    esp,0xc
c001ff91:	50                   	push   eax
c001ff92:	e8 bb c8 fe ff       	call   c000c852 <Device::~Device()>
c001ff97:	83 c4 10             	add    esp,0x10
c001ff9a:	90                   	nop
c001ff9b:	83 c4 0c             	add    esp,0xc
c001ff9e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ffa0 <CPU::~CPU()>:
c001ffa0:	83 ec 0c             	sub    esp,0xc
c001ffa3:	83 ec 0c             	sub    esp,0xc
c001ffa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffaa:	e8 cd ff ff ff       	call   c001ff7c <CPU::~CPU()>
c001ffaf:	83 c4 10             	add    esp,0x10
c001ffb2:	83 ec 08             	sub    esp,0x8
c001ffb5:	68 94 11 00 00       	push   0x1194
c001ffba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffbe:	e8 49 a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ffc3:	83 c4 10             	add    esp,0x10
c001ffc6:	83 c4 0c             	add    esp,0xc
c001ffc9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ffcc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ffcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffd0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ffd3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ffd4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ffd4:	90                   	nop
c001ffd5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ffd8 <ThreadControlBlock::ThreadControlBlock()>:
c001ffd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffdc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ffe3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffe7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ffee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fff2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fff9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fffd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020008:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002000f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020013:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020017:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002001b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002001f:	90                   	nop
c0020020:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020024 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020028:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002002e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020032:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002003d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020048:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002004e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020052:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020059:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002005d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020064:	90                   	nop
c0020065:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020066 <PCI::~PCI()>:
c0020066:	83 ec 0c             	sub    esp,0xc
c0020069:	ba 2c 31 02 c0       	mov    edx,0xc002312c
c002006e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020072:	89 10                	mov    DWORD PTR [eax],edx
c0020074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020078:	83 ec 0c             	sub    esp,0xc
c002007b:	50                   	push   eax
c002007c:	e8 63 c2 fe ff       	call   c000c2e4 <Bus::~Bus()>
c0020081:	83 c4 10             	add    esp,0x10
c0020084:	90                   	nop
c0020085:	83 c4 0c             	add    esp,0xc
c0020088:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002008a <PCI::~PCI()>:
c002008a:	83 ec 0c             	sub    esp,0xc
c002008d:	83 ec 0c             	sub    esp,0xc
c0020090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020094:	e8 cd ff ff ff       	call   c0020066 <PCI::~PCI()>
c0020099:	83 c4 10             	add    esp,0x10
c002009c:	83 ec 08             	sub    esp,0x8
c002009f:	68 5c 01 00 00       	push   0x15c
c00200a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200a8:	e8 5f a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00200ad:	83 c4 10             	add    esp,0x10
c00200b0:	83 c4 0c             	add    esp,0xc
c00200b3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00200b4 <IDE::~IDE()>:
c00200b4:	83 ec 0c             	sub    esp,0xc
c00200b7:	ba e0 31 02 c0       	mov    edx,0xc00231e0
c00200bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c0:	89 10                	mov    DWORD PTR [eax],edx
c00200c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c6:	83 ec 0c             	sub    esp,0xc
c00200c9:	50                   	push   eax
c00200ca:	e8 fd cb fe ff       	call   c000cccc <HardDiskController::~HardDiskController()>
c00200cf:	83 c4 10             	add    esp,0x10
c00200d2:	90                   	nop
c00200d3:	83 c4 0c             	add    esp,0xc
c00200d6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00200d8 <IDE::~IDE()>:
c00200d8:	83 ec 0c             	sub    esp,0xc
c00200db:	83 ec 0c             	sub    esp,0xc
c00200de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200e2:	e8 cd ff ff ff       	call   c00200b4 <IDE::~IDE()>
c00200e7:	83 c4 10             	add    esp,0x10
c00200ea:	83 ec 08             	sub    esp,0x8
c00200ed:	68 70 02 00 00       	push   0x270
c00200f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200f6:	e8 11 a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00200fb:	83 c4 10             	add    esp,0x10
c00200fe:	83 c4 0c             	add    esp,0xc
c0020101:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020102 <SATABus::~SATABus()>:
c0020102:	83 ec 0c             	sub    esp,0xc
c0020105:	ba 30 32 02 c0       	mov    edx,0xc0023230
c002010a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010e:	89 10                	mov    DWORD PTR [eax],edx
c0020110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020114:	83 ec 0c             	sub    esp,0xc
c0020117:	50                   	push   eax
c0020118:	e8 af cb fe ff       	call   c000cccc <HardDiskController::~HardDiskController()>
c002011d:	83 c4 10             	add    esp,0x10
c0020120:	90                   	nop
c0020121:	83 c4 0c             	add    esp,0xc
c0020124:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020126 <SATABus::~SATABus()>:
c0020126:	83 ec 0c             	sub    esp,0xc
c0020129:	83 ec 0c             	sub    esp,0xc
c002012c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020130:	e8 cd ff ff ff       	call   c0020102 <SATABus::~SATABus()>
c0020135:	83 c4 10             	add    esp,0x10
c0020138:	83 ec 08             	sub    esp,0x8
c002013b:	68 64 01 00 00       	push   0x164
c0020140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020144:	e8 c3 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020149:	83 c4 10             	add    esp,0x10
c002014c:	83 c4 0c             	add    esp,0xc
c002014f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020150 <ATA::~ATA()>:
c0020150:	83 ec 0c             	sub    esp,0xc
c0020153:	ba 70 32 02 c0       	mov    edx,0xc0023270
c0020158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002015c:	89 10                	mov    DWORD PTR [eax],edx
c002015e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020162:	83 ec 0c             	sub    esp,0xc
c0020165:	50                   	push   eax
c0020166:	e8 43 cc fe ff       	call   c000cdae <PhysicalDisk::~PhysicalDisk()>
c002016b:	83 c4 10             	add    esp,0x10
c002016e:	90                   	nop
c002016f:	83 c4 0c             	add    esp,0xc
c0020172:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020174 <ATA::~ATA()>:
c0020174:	83 ec 0c             	sub    esp,0xc
c0020177:	83 ec 0c             	sub    esp,0xc
c002017a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002017e:	e8 cd ff ff ff       	call   c0020150 <ATA::~ATA()>
c0020183:	83 c4 10             	add    esp,0x10
c0020186:	83 ec 08             	sub    esp,0x8
c0020189:	68 7c 01 00 00       	push   0x17c
c002018e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020192:	e8 75 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020197:	83 c4 10             	add    esp,0x10
c002019a:	83 c4 0c             	add    esp,0xc
c002019d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002019e <ATAPI::~ATAPI()>:
c002019e:	83 ec 0c             	sub    esp,0xc
c00201a1:	ba b8 32 02 c0       	mov    edx,0xc00232b8
c00201a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201aa:	89 10                	mov    DWORD PTR [eax],edx
c00201ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b0:	83 ec 0c             	sub    esp,0xc
c00201b3:	50                   	push   eax
c00201b4:	e8 f5 cb fe ff       	call   c000cdae <PhysicalDisk::~PhysicalDisk()>
c00201b9:	83 c4 10             	add    esp,0x10
c00201bc:	90                   	nop
c00201bd:	83 c4 0c             	add    esp,0xc
c00201c0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00201c2 <ATAPI::~ATAPI()>:
c00201c2:	83 ec 0c             	sub    esp,0xc
c00201c5:	83 ec 0c             	sub    esp,0xc
c00201c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201cc:	e8 cd ff ff ff       	call   c002019e <ATAPI::~ATAPI()>
c00201d1:	83 c4 10             	add    esp,0x10
c00201d4:	83 ec 08             	sub    esp,0x8
c00201d7:	68 84 01 00 00       	push   0x184
c00201dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e0:	e8 27 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00201e5:	83 c4 10             	add    esp,0x10
c00201e8:	83 c4 0c             	add    esp,0xc
c00201eb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00201ec <SATA::~SATA()>:
c00201ec:	83 ec 0c             	sub    esp,0xc
c00201ef:	ba 6c 33 02 c0       	mov    edx,0xc002336c
c00201f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f8:	89 10                	mov    DWORD PTR [eax],edx
c00201fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201fe:	83 ec 0c             	sub    esp,0xc
c0020201:	50                   	push   eax
c0020202:	e8 a7 cb fe ff       	call   c000cdae <PhysicalDisk::~PhysicalDisk()>
c0020207:	83 c4 10             	add    esp,0x10
c002020a:	90                   	nop
c002020b:	83 c4 0c             	add    esp,0xc
c002020e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020210 <SATA::~SATA()>:
c0020210:	83 ec 0c             	sub    esp,0xc
c0020213:	83 ec 0c             	sub    esp,0xc
c0020216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002021a:	e8 cd ff ff ff       	call   c00201ec <SATA::~SATA()>
c002021f:	83 c4 10             	add    esp,0x10
c0020222:	83 ec 08             	sub    esp,0x8
c0020225:	68 7c 01 00 00       	push   0x17c
c002022a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002022e:	e8 d9 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020233:	83 c4 10             	add    esp,0x10
c0020236:	83 c4 0c             	add    esp,0xc
c0020239:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002023a <SATAPI::~SATAPI()>:
c002023a:	83 ec 0c             	sub    esp,0xc
c002023d:	ba 90 34 02 c0       	mov    edx,0xc0023490
c0020242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020246:	89 10                	mov    DWORD PTR [eax],edx
c0020248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024c:	83 ec 0c             	sub    esp,0xc
c002024f:	50                   	push   eax
c0020250:	e8 59 cb fe ff       	call   c000cdae <PhysicalDisk::~PhysicalDisk()>
c0020255:	83 c4 10             	add    esp,0x10
c0020258:	90                   	nop
c0020259:	83 c4 0c             	add    esp,0xc
c002025c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002025e <SATAPI::~SATAPI()>:
c002025e:	83 ec 0c             	sub    esp,0xc
c0020261:	83 ec 0c             	sub    esp,0xc
c0020264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020268:	e8 cd ff ff ff       	call   c002023a <SATAPI::~SATAPI()>
c002026d:	83 c4 10             	add    esp,0x10
c0020270:	83 ec 08             	sub    esp,0x8
c0020273:	68 84 01 00 00       	push   0x184
c0020278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002027c:	e8 8b a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020281:	83 c4 10             	add    esp,0x10
c0020284:	83 c4 0c             	add    esp,0xc
c0020287:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020288 <IOAPIC::~IOAPIC()>:
c0020288:	83 ec 0c             	sub    esp,0xc
c002028b:	ba d0 34 02 c0       	mov    edx,0xc00234d0
c0020290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020294:	89 10                	mov    DWORD PTR [eax],edx
c0020296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029a:	83 ec 0c             	sub    esp,0xc
c002029d:	50                   	push   eax
c002029e:	e8 af c5 fe ff       	call   c000c852 <Device::~Device()>
c00202a3:	83 c4 10             	add    esp,0x10
c00202a6:	90                   	nop
c00202a7:	83 c4 0c             	add    esp,0xc
c00202aa:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00202ac <IOAPIC::~IOAPIC()>:
c00202ac:	83 ec 0c             	sub    esp,0xc
c00202af:	83 ec 0c             	sub    esp,0xc
c00202b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202b6:	e8 cd ff ff ff       	call   c0020288 <IOAPIC::~IOAPIC()>
c00202bb:	83 c4 10             	add    esp,0x10
c00202be:	83 ec 08             	sub    esp,0x8
c00202c1:	68 68 01 00 00       	push   0x168
c00202c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ca:	e8 3d a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00202cf:	83 c4 10             	add    esp,0x10
c00202d2:	83 c4 0c             	add    esp,0xc
c00202d5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00202d8 <APICTimer::~APICTimer()>:
c00202d8:	83 ec 0c             	sub    esp,0xc
c00202db:	ba 18 35 02 c0       	mov    edx,0xc0023518
c00202e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e4:	89 10                	mov    DWORD PTR [eax],edx
c00202e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ea:	83 ec 0c             	sub    esp,0xc
c00202ed:	50                   	push   eax
c00202ee:	e8 35 e0 fe ff       	call   c000e328 <Timer::~Timer()>
c00202f3:	83 c4 10             	add    esp,0x10
c00202f6:	90                   	nop
c00202f7:	83 c4 0c             	add    esp,0xc
c00202fa:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00202fc <APICTimer::~APICTimer()>:
c00202fc:	83 ec 0c             	sub    esp,0xc
c00202ff:	83 ec 0c             	sub    esp,0xc
c0020302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020306:	e8 cd ff ff ff       	call   c00202d8 <APICTimer::~APICTimer()>
c002030b:	83 c4 10             	add    esp,0x10
c002030e:	83 ec 08             	sub    esp,0x8
c0020311:	68 60 01 00 00       	push   0x160
c0020316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002031a:	e8 ed a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002031f:	83 c4 10             	add    esp,0x10
c0020322:	83 c4 0c             	add    esp,0xc
c0020325:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020328 <PIT::~PIT()>:
c0020328:	83 ec 0c             	sub    esp,0xc
c002032b:	ba 68 35 02 c0       	mov    edx,0xc0023568
c0020330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020334:	89 10                	mov    DWORD PTR [eax],edx
c0020336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002033a:	83 ec 0c             	sub    esp,0xc
c002033d:	50                   	push   eax
c002033e:	e8 e5 df fe ff       	call   c000e328 <Timer::~Timer()>
c0020343:	83 c4 10             	add    esp,0x10
c0020346:	90                   	nop
c0020347:	83 c4 0c             	add    esp,0xc
c002034a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002034c <PIT::~PIT()>:
c002034c:	83 ec 0c             	sub    esp,0xc
c002034f:	83 ec 0c             	sub    esp,0xc
c0020352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020356:	e8 cd ff ff ff       	call   c0020328 <PIT::~PIT()>
c002035b:	83 c4 10             	add    esp,0x10
c002035e:	83 ec 08             	sub    esp,0x8
c0020361:	68 5c 01 00 00       	push   0x15c
c0020366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002036a:	e8 9d a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002036f:	83 c4 10             	add    esp,0x10
c0020372:	83 c4 0c             	add    esp,0xc
c0020375:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 7d 23 02 c0       	mov    esi,0xc002237d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 99 23 02 c0       	mov    esi,0xc0022399
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
