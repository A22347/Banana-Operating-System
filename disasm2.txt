
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 05 7b 00 00       	call   c0007b25 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c8 22 02 c0       	mov    eax,0xc00222c8
c0000025:	3d c8 22 02 c0       	cmp    eax,0xc00222c8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c8 22 02 c0       	push   0xc00222c8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c8 22 02 c0       	mov    eax,0xc00222c8
c0000051:	2d c8 22 02 c0       	sub    eax,0xc00222c8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c8 22 02 c0       	push   0xc00222c8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 5c f2 01 c0       	mov    ebx,0xc001f25c
c0000097:	81 eb 58 f2 01 c0    	sub    ebx,0xc001f258
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 58 f2 01 c0       	mov    esi,0xc001f258
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c8 22 02 c0       	push   0xc00222c8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 c8 22 02 c0       	push   0xc00222c8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 5b 45 01 00       	call   c0014808 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 43 a4 00 00       	call   c000a708 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 39 45 01 00       	call   c0014808 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 46 4a 01 00       	call   c0014d34 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 e1 50 01 00       	call   c00153d8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 41 04 01 00       	jmp    c00107c0 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 60 f2 01 c0 02 	test   BYTE PTR [edx-0x3ffe0da0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 60 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0da0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 60 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0da0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 60 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0da0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 60 f2 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0da0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 60 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0da0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e2a:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 9b 6a 00 00       	call   c00079a0 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 f6 69 00 00       	call   c00079a0 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e0 69 00 00       	call   c00079a0 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 de 68 00 00       	call   c00079a0 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c00011af:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001206:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c000124f:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c000126a:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c0001324:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c000132a:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001331:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013f7:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013fd:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c0001404:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001552:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 64 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0c9c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 d6 6a 01 00       	jmp    c00188b0 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 00 6b 01 00       	jmp    c00188f0 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 21 6b 01 00       	jmp    c0018930 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 c0 f4 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0b40]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 c0 f4 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0b40]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba c8 15 02 c0       	mov    edx,0xc00215c8
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 7c f3 01 c0       	mov    edx,0xc001f37c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 82 f3 01 c0       	mov    eax,0xc001f382
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 40 f4 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0bc0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 8b f3 01 c0       	mov    eax,0xc001f38b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 c0 f4 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0b40]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 10 f4 01 c0       	mov    eax,0xc001f410
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 00 f4 01 c0       	mov    ebx,0xc001f400
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 e0 f3 01 c0       	mov    eax,0xc001f3e0
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 f0 f3 01 c0       	mov    eax,0xc001f3f0
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 92 f3 01 c0       	mov    edx,0xc001f392
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 9e f3 01 c0       	mov    edx,0xc001f39e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba b2 f3 01 c0       	mov    edx,0xc001f3b2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 68 1e 00 00       	call   c0007acb <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 60 1e 00 00       	call   c0007adb <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c e0 f7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f7e0
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 e0 f7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f7e0
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 e0 f5 01 c0       	mov    eax,0xc001f5e0
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 20 f5 01 c0       	mov    eax,0xc001f520
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 e0 f4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0b20]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 e0 f8 01 c0       	push   0xc001f8e0
c0006147:	e8 08 31 01 00       	call   c0019254 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 ee f8 01 c0       	push   0xc001f8ee
c000617f:	e8 d0 30 01 00       	call   c0019254 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 39 30 01 00       	call   c00191f8 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 40 02 c0       	mov    eax,0xc0024020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 fd f8 01 c0       	push   0xc001f8fd
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000657b:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c0006585:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c000659d:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006616:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c00066ad:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000670f:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000674c:	05 40 45 02 c0       	add    eax,0xc0024540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c000680c:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 00 f9 01 c0       	push   0xc001f900
c000682f:	e8 20 2a 01 00       	call   c0019254 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 2e 2a 01 00       	call   c0019270 <iso_kprintfd>
c0006842:	c7 04 24 05 f9 01 c0 	mov    DWORD PTR [esp],0xc001f905
c0006849:	e8 06 2a 01 00       	call   c0019254 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006855:	e8 16 2a 01 00       	call   c0019270 <iso_kprintfd>
c000685a:	c7 04 24 0b f9 01 c0 	mov    DWORD PTR [esp],0xc001f90b
c0006861:	e8 ee 29 01 00       	call   c0019254 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c000686d:	e8 fe 29 01 00       	call   c0019270 <iso_kprintfd>
c0006872:	c7 04 24 11 f9 01 c0 	mov    DWORD PTR [esp],0xc001f911
c0006879:	e8 d6 29 01 00       	call   c0019254 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006885:	e8 e6 29 01 00       	call   c0019270 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068eb:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 fd f8 01 c0       	push   0xc001f8fd
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a2a:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a30:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 1a f9 01 c0       	push   0xc001f91a
c0006a52:	e8 fd 27 01 00       	call   c0019254 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a87:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 25 f9 01 c0       	push   0xc001f925
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 2c f9 01 c0       	push   0xc001f92c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b25:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b48:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 33 f9 01 c0       	push   0xc001f933
c0006b69:	e8 e6 26 01 00       	call   c0019254 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 3e f9 01 c0       	push   0xc001f93e
c0006b84:	e8 cb 26 01 00       	call   c0019254 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 45 02 c0       	push   0xc0024540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 18 0f 00 00       	call   c0007acb <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006bbf:	e8 07 0f 00 00       	call   c0007acb <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 f2 0e 00 00       	call   c0007acb <malloc>
c0006bd9:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 d9 0e 00 00       	call   c0007acb <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006c1f:	e8 b7 0e 00 00       	call   c0007adb <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 a9 0e 00 00       	call   c0007adb <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 8f 0e 00 00       	call   c0007adb <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 7a 0e 00 00       	call   c0007adb <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	83 ec 0c             	sub    esp,0xc
c0006c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006c92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c98:	50                   	push   eax
c0006c99:	e8 34 52 00 00       	call   c000bed2 <Device::closeAll()>
c0006c9e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca4:	83 c4 10             	add    esp,0x10
c0006ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ca9:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cad:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cb5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cbd:	5b                   	pop    ebx
c0006cbe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc1:	5e                   	pop    esi
c0006cc2:	5f                   	pop    edi
c0006cc3:	ff e0                	jmp    eax

c0006cc5 <Krnl::firstTask()>:
c0006cc5:	53                   	push   ebx
c0006cc6:	83 ec 14             	sub    esp,0x14
c0006cc9:	fb                   	sti    
c0006cca:	68 4f f9 01 c0       	push   0xc001f94f
c0006ccf:	e8 84 94 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c0006cd4:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cdb:	e8 eb 0d 00 00       	call   c0007acb <malloc>
c0006ce0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ce7:	89 c3                	mov    ebx,eax
c0006ce9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cee:	50                   	push   eax
c0006cef:	68 68 f9 01 c0       	push   0xc001f968
c0006cf4:	6a 01                	push   0x1
c0006cf6:	53                   	push   ebx
c0006cf7:	e8 64 de 00 00       	call   c0014b60 <Process::Process(bool, char const*, Process*, char**)>
c0006cfc:	83 c4 20             	add    esp,0x20
c0006cff:	68 ff 00 00 00       	push   0xff
c0006d04:	6a 00                	push   0x0
c0006d06:	68 15 75 00 c0       	push   0xc0007515
c0006d0b:	53                   	push   ebx
c0006d0c:	e8 73 e0 00 00       	call   c0014d84 <Process::createThread(void (*)(void*), void*, int)>
c0006d11:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006d17:	6a 7a                	push   0x7a
c0006d19:	6a 00                	push   0x0
c0006d1b:	68 48 58 01 c0       	push   0xc0015848
c0006d20:	52                   	push   edx
c0006d21:	e8 5e e0 00 00       	call   c0014d84 <Process::createThread(void (*)(void*), void*, int)>
c0006d26:	83 c4 20             	add    esp,0x20
c0006d29:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d30:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d35:	e8 52 9c 00 00       	call   c001098c <KeInitRand()>
c0006d3a:	83 ec 0c             	sub    esp,0xc
c0006d3d:	68 64 fa 01 c0       	push   0xc001fa64
c0006d42:	e8 11 94 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c0006d47:	e8 1f ef 00 00       	call   c0015c6b <Vm::initialise8086()>
c0006d4c:	e8 a3 3f 00 00       	call   c000acf4 <Fs::initVFS()>
c0006d51:	c7 04 24 75 f9 01 c0 	mov    DWORD PTR [esp],0xc001f975
c0006d58:	e8 fb 93 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c0006d5d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d62:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6a:	6a 00                	push   0x0
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	50                   	push   eax
c0006d71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d74:	83 c4 14             	add    esp,0x14
c0006d77:	68 64 fa 01 c0       	push   0xc001fa64
c0006d7c:	e8 d7 93 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c0006d81:	e8 b2 98 00 00       	call   c0010638 <Krnl::loadSystemEnv()>
c0006d86:	e8 0f 9b 00 00       	call   c001089a <Krnl::setupPowerManager()>
c0006d8b:	83 c4 0c             	add    esp,0xc
c0006d8e:	6a 3a                	push   0x3a
c0006d90:	68 8f f9 01 c0       	push   0xc001f98f
c0006d95:	68 98 f9 01 c0       	push   0xc001f998
c0006d9a:	e8 eb c0 00 00       	call   c0012e8a <Reg::readIntWithDefault(char*, char*, int)>
c0006d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da2:	e8 85 4a 00 00       	call   c000b82c <User::loadClockSettings(int)>
c0006da7:	c7 04 24 88 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa88
c0006dae:	e8 a5 93 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c0006db3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006db8:	59                   	pop    ecx
c0006db9:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dbf:	53                   	push   ebx
c0006dc0:	e8 0b 51 00 00       	call   c000bed0 <Device::loadDriversForAll()>
c0006dc5:	c7 04 24 a0 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a0
c0006dcc:	e8 87 93 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c0006dd1:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dd7:	58                   	pop    eax
c0006dd8:	5a                   	pop    edx
c0006dd9:	6a 01                	push   0x1
c0006ddb:	68 b1 f9 01 c0       	push   0xc001f9b1
c0006de0:	e8 7f d7 00 00       	call   c0014564 <Thr::loadDLL(char const*, bool)>
c0006de5:	59                   	pop    ecx
c0006de6:	5a                   	pop    edx
c0006de7:	53                   	push   ebx
c0006de8:	50                   	push   eax
c0006de9:	e8 b6 d9 00 00       	call   c00147a4 <Thr::executeDLL(unsigned long, void*)>
c0006dee:	83 c4 10             	add    esp,0x10
c0006df1:	83 ec 0c             	sub    esp,0xc
c0006df4:	6a 02                	push   0x2
c0006df6:	e8 d5 e3 00 00       	call   c00151d0 <blockTask(TaskState)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	eb f1                	jmp    c0006df1 <Krnl::firstTask()+0x12c>

c0006e00 <Computer::Computer()>:
c0006e00:	83 ec 0c             	sub    esp,0xc
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	83 ec 08             	sub    esp,0x8
c0006e0a:	68 cd f9 01 c0       	push   0xc001f9cd
c0006e0f:	50                   	push   eax
c0006e10:	e8 37 51 00 00       	call   c000bf4c <Device::Device(char const*)>
c0006e15:	83 c4 10             	add    esp,0x10
c0006e18:	ba d4 fa 01 c0       	mov    edx,0xc001fad4
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	89 10                	mov    DWORD PTR [eax],edx
c0006e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e27:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e35:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e43:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e49:	83 ca 04             	or     edx,0x4
c0006e4c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5c:	0f b6 d0             	movzx  edx,al
c0006e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e63:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e74:	0f b6 d0             	movzx  edx,al
c0006e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e8a:	8d 50 01             	lea    edx,[eax+0x1]
c0006e8d:	88 d1                	mov    cl,dl
c0006e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e93:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e99:	0f b6 d0             	movzx  edx,al
c0006e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ea4:	83 e1 3f             	and    ecx,0x3f
c0006ea7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eab:	90                   	nop
c0006eac:	83 c4 0c             	add    esp,0xc
c0006eaf:	c3                   	ret    

c0006eb0 <Computer::setBootMessage(char const*)>:
c0006eb0:	c3                   	ret    
c0006eb1:	90                   	nop

c0006eb2 <Computer::detectFeatures()>:
c0006eb2:	55                   	push   ebp
c0006eb3:	57                   	push   edi
c0006eb4:	56                   	push   esi
c0006eb5:	53                   	push   ebx
c0006eb6:	83 ec 1c             	sub    esp,0x1c
c0006eb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ebd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ec3:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ec9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ecf:	e8 25 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ed4:	31 d2                	xor    edx,edx
c0006ed6:	85 c0                	test   eax,eax
c0006ed8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ede:	0f 95 c2             	setne  dl
c0006ee1:	d1 e2                	shl    edx,1
c0006ee3:	83 e0 fd             	and    eax,0xfffffffd
c0006ee6:	09 d0                	or     eax,edx
c0006ee8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006eee:	a8 02                	test   al,0x2
c0006ef0:	75 51                	jne    c0006f43 <Computer::detectFeatures()+0x91>
c0006ef2:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ef9:	74 0f                	je     c0006f0a <Computer::detectFeatures()+0x58>
c0006efb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f01:	83 e0 fb             	and    eax,0xfffffffb
c0006f04:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0a:	e8 47 73 01 00       	call   c001e256 <x87Detect>
c0006f0f:	83 e0 01             	and    eax,0x1
c0006f12:	c1 e0 04             	shl    eax,0x4
c0006f15:	89 c2                	mov    edx,eax
c0006f17:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f1d:	83 e0 ef             	and    eax,0xffffffef
c0006f20:	09 d0                	or     eax,edx
c0006f22:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f28:	a8 10                	test   al,0x10
c0006f2a:	88 c2                	mov    dl,al
c0006f2c:	0f 85 33 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1b3>
c0006f32:	80 e2 80             	and    dl,0x80
c0006f35:	0f 85 4c 01 00 00    	jne    c0007087 <Computer::detectFeatures()+0x1d5>
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	5b                   	pop    ebx
c0006f3f:	5e                   	pop    esi
c0006f40:	5f                   	pop    edi
c0006f41:	5d                   	pop    ebp
c0006f42:	c3                   	ret    
c0006f43:	83 ec 0c             	sub    esp,0xc
c0006f46:	6a 20                	push   0x20
c0006f48:	e8 21 87 00 00       	call   c000f66e <CPU::cpuidCheckEDX(unsigned int)>
c0006f4d:	83 e0 01             	and    eax,0x1
c0006f50:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f57:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f5d:	83 e0 f7             	and    eax,0xfffffff7
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f68:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f6f:	e8 fa 86 00 00       	call   c000f66e <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	83 e2 01             	and    edx,0x1
c0006f7f:	83 e0 fe             	and    eax,0xfffffffe
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f91:	e8 d8 86 00 00       	call   c000f66e <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	89 c2                	mov    edx,eax
c0006f98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f9e:	c1 e2 07             	shl    edx,0x7
c0006fa1:	83 e0 7f             	and    eax,0x7f
c0006fa4:	09 d0                	or     eax,edx
c0006fa6:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fac:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fb3:	e8 b6 86 00 00       	call   c000f66e <CPU::cpuidCheckEDX(unsigned int)>
c0006fb8:	83 c4 10             	add    esp,0x10
c0006fbb:	83 e0 01             	and    eax,0x1
c0006fbe:	c1 e0 05             	shl    eax,0x5
c0006fc1:	89 c2                	mov    edx,eax
c0006fc3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc9:	83 e0 df             	and    eax,0xffffffdf
c0006fcc:	09 d0                	or     eax,edx
c0006fce:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fde:	0f 84 c9 00 00 00    	je     c00070ad <Computer::detectFeatures()+0x1fb>
c0006fe4:	83 e0 fe             	and    eax,0xfffffffe
c0006fe7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fed:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ff3:	89 c2                	mov    edx,eax
c0006ff5:	83 e2 09             	and    edx,0x9
c0006ff8:	83 fa 01             	cmp    edx,0x1
c0006ffb:	75 09                	jne    c0007006 <Computer::detectFeatures()+0x154>
c0006ffd:	83 e0 fe             	and    eax,0xfffffffe
c0007000:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	8d 44 24 18          	lea    eax,[esp+0x18]
c000700d:	50                   	push   eax
c000700e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007012:	55                   	push   ebp
c0007013:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007017:	57                   	push   edi
c0007018:	8d 74 24 18          	lea    esi,[esp+0x18]
c000701c:	56                   	push   esi
c000701d:	68 00 00 00 80       	push   0x80000000
c0007022:	e8 c3 85 00 00       	call   c000f5ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007027:	83 c4 20             	add    esp,0x20
c000702a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007035:	0f 86 b7 fe ff ff    	jbe    c0006ef2 <Computer::detectFeatures()+0x40>
c000703b:	83 ec 0c             	sub    esp,0xc
c000703e:	50                   	push   eax
c000703f:	55                   	push   ebp
c0007040:	57                   	push   edi
c0007041:	56                   	push   esi
c0007042:	68 01 00 00 80       	push   0x80000001
c0007047:	e8 9e 85 00 00       	call   c000f5ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000704c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007052:	83 c4 20             	add    esp,0x20
c0007055:	25 bf ff fc ff       	and    eax,0xfffcffbf
c000705a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007060:	e9 8d fe ff ff       	jmp    c0006ef2 <Computer::detectFeatures()+0x40>
c0007065:	e8 a6 71 01 00       	call   c001e210 <absolutelyNoChanceInHell>
c000706a:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007070:	83 e2 7f             	and    edx,0x7f
c0007073:	c1 e0 07             	shl    eax,0x7
c0007076:	09 c2                	or     edx,eax
c0007078:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000707e:	80 e2 80             	and    dl,0x80
c0007081:	0f 84 b4 fe ff ff    	je     c0006f3b <Computer::detectFeatures()+0x89>
c0007087:	e8 f4 6d 01 00       	call   c001de80 <avxDetect>
c000708c:	83 e0 01             	and    eax,0x1
c000708f:	c1 e0 05             	shl    eax,0x5
c0007092:	89 c2                	mov    edx,eax
c0007094:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000709a:	83 e0 df             	and    eax,0xffffffdf
c000709d:	09 d0                	or     eax,edx
c000709f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070a5:	83 c4 1c             	add    esp,0x1c
c00070a8:	5b                   	pop    ebx
c00070a9:	5e                   	pop    esi
c00070aa:	5f                   	pop    edi
c00070ab:	5d                   	pop    ebp
c00070ac:	c3                   	ret    
c00070ad:	83 ec 0c             	sub    esp,0xc
c00070b0:	68 00 02 00 00       	push   0x200
c00070b5:	e8 b4 85 00 00       	call   c000f66e <CPU::cpuidCheckEDX(unsigned int)>
c00070ba:	83 c4 10             	add    esp,0x10
c00070bd:	89 c2                	mov    edx,eax
c00070bf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070c5:	83 e2 01             	and    edx,0x1
c00070c8:	83 e0 fe             	and    eax,0xfffffffe
c00070cb:	09 d0                	or     eax,edx
c00070cd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070d3:	e9 15 ff ff ff       	jmp    c0006fed <Computer::detectFeatures()+0x13b>

c00070d8 <Computer::displayFeatures()>:
c00070d8:	c3                   	ret    
c00070d9:	90                   	nop

c00070da <Computer::rdmsr(unsigned int)>:
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070e8:	74 0a                	je     c00070f4 <Computer::rdmsr(unsigned int)+0x1a>
c00070ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070ee:	0f 32                	rdmsr  
c00070f0:	83 c4 0c             	add    esp,0xc
c00070f3:	c3                   	ret    
c00070f4:	83 ec 0c             	sub    esp,0xc
c00070f7:	68 d6 f9 01 c0       	push   0xc001f9d6
c00070fc:	e8 d4 96 00 00       	call   c00107d5 <KePanic(char const*)>
c0007101:	83 c4 10             	add    esp,0x10
c0007104:	eb e4                	jmp    c00070ea <Computer::rdmsr(unsigned int)+0x10>

c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007106:	57                   	push   edi
c0007107:	56                   	push   esi
c0007108:	83 ec 04             	sub    esp,0x4
c000710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000710f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007113:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007117:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000711e:	74 10                	je     c0007130 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007120:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007124:	89 f0                	mov    eax,esi
c0007126:	89 fa                	mov    edx,edi
c0007128:	0f 30                	wrmsr  
c000712a:	83 c4 04             	add    esp,0x4
c000712d:	5e                   	pop    esi
c000712e:	5f                   	pop    edi
c000712f:	c3                   	ret    
c0007130:	83 ec 0c             	sub    esp,0xc
c0007133:	68 dc f9 01 c0       	push   0xc001f9dc
c0007138:	e8 98 96 00 00       	call   c00107d5 <KePanic(char const*)>
c000713d:	83 c4 10             	add    esp,0x10
c0007140:	eb de                	jmp    c0007120 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007142 <Computer::shutdown()>:
c0007142:	83 ec 0c             	sub    esp,0xc
c0007145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007149:	8b 10                	mov    edx,DWORD PTR [eax]
c000714b:	6a 00                	push   0x0
c000714d:	6a 00                	push   0x0
c000714f:	6a 00                	push   0x0
c0007151:	50                   	push   eax
c0007152:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007155:	83 c4 1c             	add    esp,0x1c
c0007158:	c3                   	ret    
c0007159:	90                   	nop

c000715a <Computer::restart()>:
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007161:	8b 10                	mov    edx,DWORD PTR [eax]
c0007163:	6a 00                	push   0x0
c0007165:	6a 00                	push   0x0
c0007167:	6a 01                	push   0x1
c0007169:	50                   	push   eax
c000716a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000716d:	83 c4 1c             	add    esp,0x1c
c0007170:	c3                   	ret    
c0007171:	90                   	nop

c0007172 <Computer::sleep()>:
c0007172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007176:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000717c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007180:	e9 03 80 00 00       	jmp    c000f188 <ACPI::sleep()>
c0007185:	90                   	nop

c0007186 <Computer::nmiEnabled()>:
c0007186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000718a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007190:	c3                   	ret    
c0007191:	90                   	nop

c0007192 <Computer::readCMOS(unsigned char)>:
c0007192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007196:	31 d2                	xor    edx,edx
c0007198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000719c:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071a3:	75 02                	jne    c00071a7 <Computer::readCMOS(unsigned char)+0x15>
c00071a5:	b2 80                	mov    dl,0x80
c00071a7:	09 d0                	or     eax,edx
c00071a9:	e6 70                	out    0x70,al
c00071ab:	e4 71                	in     al,0x71
c00071ad:	c3                   	ret    

c00071ae <Computer::enableNMI(bool)>:
c00071ae:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071b6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071bc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071c4:	eb cc                	jmp    c0007192 <Computer::readCMOS(unsigned char)>

c00071c6 <Computer::open(int, int, void*)>:
c00071c6:	56                   	push   esi
c00071c7:	53                   	push   ebx
c00071c8:	83 ec 10             	sub    esp,0x10
c00071cb:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071d6:	68 e2 f9 01 c0       	push   0xc001f9e2
c00071db:	0f 94 05 00 1e 02 c0 	sete   BYTE PTR ds:0xc0021e00
c00071e2:	e8 71 8f 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c00071e7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ee:	e8 d8 08 00 00       	call   c0007acb <malloc>
c00071f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071f6:	89 c6                	mov    esi,eax
c00071f8:	e8 ff 7a 00 00       	call   c000ecfc <ACPI::ACPI()>
c00071fd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007203:	58                   	pop    eax
c0007204:	5a                   	pop    edx
c0007205:	56                   	push   esi
c0007206:	53                   	push   ebx
c0007207:	e8 a8 4b 00 00       	call   c000bdb4 <Device::addChild(Device*)>
c000720c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000720f:	e8 9e fc ff ff       	call   c0006eb2 <Computer::detectFeatures()>
c0007214:	59                   	pop    ecx
c0007215:	5e                   	pop    esi
c0007216:	6a 01                	push   0x1
c0007218:	53                   	push   ebx
c0007219:	e8 90 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c000721e:	c7 04 24 fa f9 01 c0 	mov    DWORD PTR [esp],0xc001f9fa
c0007225:	e8 2e 8f 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c000722a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007231:	e8 95 08 00 00       	call   c0007acb <malloc>
c0007236:	89 04 24             	mov    DWORD PTR [esp],eax
c0007239:	89 c6                	mov    esi,eax
c000723b:	e8 e6 84 00 00       	call   c000f726 <CPU::CPU()>
c0007240:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007246:	58                   	pop    eax
c0007247:	5a                   	pop    edx
c0007248:	56                   	push   esi
c0007249:	53                   	push   ebx
c000724a:	e8 65 4b 00 00       	call   c000bdb4 <Device::addChild(Device*)>
c000724f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007255:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007259:	8b 10                	mov    edx,DWORD PTR [eax]
c000725b:	51                   	push   ecx
c000725c:	6a 00                	push   0x0
c000725e:	6a 00                	push   0x0
c0007260:	50                   	push   eax
c0007261:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007264:	83 c4 14             	add    esp,0x14
c0007267:	68 a8 fa 01 c0       	push   0xc001faa8
c000726c:	e8 e7 8e 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c0007271:	e8 ce fb 00 00       	call   c0016e44 <HalInitialiseCoprocessor()>
c0007276:	c7 04 24 14 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa14
c000727d:	e8 d6 8e 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c0007282:	c7 04 24 c5 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cc5
c0007289:	e8 1e dc 00 00       	call   c0014eac <setupMultitasking(void (*)())>
c000728e:	83 c4 14             	add    esp,0x14
c0007291:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007296:	5b                   	pop    ebx
c0007297:	5e                   	pop    esi
c0007298:	c3                   	ret    
c0007299:	90                   	nop

c000729a <Computer::disableNMI()>:
c000729a:	6a 00                	push   0x0
c000729c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a0:	50                   	push   eax
c00072a1:	e8 08 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c00072a6:	5a                   	pop    edx
c00072a7:	59                   	pop    ecx
c00072a8:	c3                   	ret    
c00072a9:	90                   	nop

c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072aa:	53                   	push   ebx
c00072ab:	b2 80                	mov    dl,0x80
c00072ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c0:	74 02                	je     c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072c2:	31 d2                	xor    edx,edx
c00072c4:	09 d0                	or     eax,edx
c00072c6:	e6 70                	out    0x70,al
c00072c8:	88 c8                	mov    al,cl
c00072ca:	e6 71                	out    0x71,al
c00072cc:	5b                   	pop    ebx
c00072cd:	c3                   	ret    

c00072ce <Computer::handleNMI()>:
c00072ce:	56                   	push   esi
c00072cf:	53                   	push   ebx
c00072d0:	83 ec 10             	sub    esp,0x10
c00072d3:	e4 92                	in     al,0x92
c00072d5:	89 c6                	mov    esi,eax
c00072d7:	e4 61                	in     al,0x61
c00072d9:	68 2f fa 01 c0       	push   0xc001fa2f
c00072de:	88 c3                	mov    bl,al
c00072e0:	e8 6c 36 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00072e5:	83 c4 10             	add    esp,0x10
c00072e8:	83 e6 10             	and    esi,0x10
c00072eb:	75 10                	jne    c00072fd <Computer::handleNMI()+0x2f>
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	75 20                	jne    c0007312 <Computer::handleNMI()+0x44>
c00072f2:	80 e3 80             	and    bl,0x80
c00072f5:	75 30                	jne    c0007327 <Computer::handleNMI()+0x59>
c00072f7:	83 c4 04             	add    esp,0x4
c00072fa:	5b                   	pop    ebx
c00072fb:	5e                   	pop    esi
c00072fc:	c3                   	ret    
c00072fd:	83 ec 0c             	sub    esp,0xc
c0007300:	68 40 fa 01 c0       	push   0xc001fa40
c0007305:	e8 cb 94 00 00       	call   c00107d5 <KePanic(char const*)>
c000730a:	83 c4 10             	add    esp,0x10
c000730d:	f6 c3 40             	test   bl,0x40
c0007310:	74 e0                	je     c00072f2 <Computer::handleNMI()+0x24>
c0007312:	83 ec 0c             	sub    esp,0xc
c0007315:	68 4d fa 01 c0       	push   0xc001fa4d
c000731a:	e8 b6 94 00 00       	call   c00107d5 <KePanic(char const*)>
c000731f:	83 c4 10             	add    esp,0x10
c0007322:	80 e3 80             	and    bl,0x80
c0007325:	74 d0                	je     c00072f7 <Computer::handleNMI()+0x29>
c0007327:	c7 44 24 10 57 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fa57
c000732f:	83 c4 04             	add    esp,0x4
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	e9 9c 94 00 00       	jmp    c00107d5 <KePanic(char const*)>
c0007339:	90                   	nop

c000733a <GDTEntry::setBase(unsigned int)>:
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007342:	89 c1                	mov    ecx,eax
c0007344:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007348:	c1 e9 10             	shr    ecx,0x10
c000734b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000734e:	c1 e8 18             	shr    eax,0x18
c0007351:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007354:	c3                   	ret    
c0007355:	90                   	nop

c0007356 <GDTEntry::setLimit(unsigned int)>:
c0007356:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000735a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007361:	66 89 01             	mov    WORD PTR [ecx],ax
c0007364:	c1 e8 10             	shr    eax,0x10
c0007367:	83 e0 0f             	and    eax,0xf
c000736a:	83 e2 f0             	and    edx,0xfffffff0
c000736d:	09 d0                	or     eax,edx
c000736f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007372:	c3                   	ret    
c0007373:	90                   	nop

c0007374 <GDT::GDT()>:
c0007374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000737e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007382:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007388:	90                   	nop
c0007389:	c3                   	ret    

c000738a <GDT::addEntry(GDTEntry)>:
c000738a:	53                   	push   ebx
c000738b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000738f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007393:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007397:	8b 02                	mov    eax,DWORD PTR [edx]
c0007399:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000739d:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a0:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073a4:	c1 e0 03             	shl    eax,0x3
c00073a7:	89 0a                	mov    DWORD PTR [edx],ecx
c00073a9:	5b                   	pop    ebx
c00073aa:	c3                   	ret    
c00073ab:	90                   	nop

c00073ac <GDT::getNumberOfEntries()>:
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::flush()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00073ba:	83 c0 04             	add    eax,0x4
c00073bd:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073c2:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073c9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073d0:	e9 85 8f ff ff       	jmp    c000035a <loadGDT>
c00073d5:	90                   	nop

c00073d6 <GDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 30             	sub    esp,0x30
c00073dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e0:	6a 00                	push   0x0
c00073e2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073e6:	56                   	push   esi
c00073e7:	e8 4e ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c00073ec:	6a 00                	push   0x0
c00073ee:	56                   	push   esi
c00073ef:	e8 62 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c00073f4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073fc:	6a 00                	push   0x0
c00073fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007402:	56                   	push   esi
c0007403:	e8 32 ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0007408:	68 ff ff ff 00       	push   0xffffff
c000740d:	56                   	push   esi
c000740e:	e8 43 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0007413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007417:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000741b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007420:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007424:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007429:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000742d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007431:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007435:	89 f8                	mov    eax,edi
c0007437:	89 fa                	mov    edx,edi
c0007439:	80 e4 f7             	and    ah,0xf7
c000743c:	80 ce 60             	or     dh,0x60
c000743f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007443:	89 c7                	mov    edi,eax
c0007445:	80 cc 60             	or     ah,0x60
c0007448:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000744c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007454:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007458:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000745c:	83 c4 20             	add    esp,0x20
c000745f:	6a 00                	push   0x0
c0007461:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007465:	50                   	push   eax
c0007466:	e8 cf fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000746b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000746f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007473:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007477:	83 e0 3f             	and    eax,0x3f
c000747a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000747e:	6a 00                	push   0x0
c0007480:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007484:	50                   	push   eax
c0007485:	e8 b0 fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000748a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000748e:	83 e0 3f             	and    eax,0x3f
c0007491:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007495:	83 c4 0c             	add    esp,0xc
c0007498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000749c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a0:	53                   	push   ebx
c00074a1:	e8 e4 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074a6:	83 c4 0c             	add    esp,0xc
c00074a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b1:	53                   	push   ebx
c00074b2:	e8 d3 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074b7:	83 c4 0c             	add    esp,0xc
c00074ba:	57                   	push   edi
c00074bb:	56                   	push   esi
c00074bc:	53                   	push   ebx
c00074bd:	e8 c8 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074c2:	83 c4 0c             	add    esp,0xc
c00074c5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074c9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074cd:	53                   	push   ebx
c00074ce:	e8 b7 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074d3:	83 c4 0c             	add    esp,0xc
c00074d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074de:	53                   	push   ebx
c00074df:	e8 a6 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074e4:	83 c4 0c             	add    esp,0xc
c00074e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074ef:	53                   	push   ebx
c00074f0:	e8 95 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074f5:	83 c4 0c             	add    esp,0xc
c00074f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007500:	53                   	push   ebx
c0007501:	e8 84 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c0007506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007509:	e8 a6 fe ff ff       	call   c00073b4 <GDT::flush()>
c000750e:	83 c4 40             	add    esp,0x40
c0007511:	5b                   	pop    ebx
c0007512:	5e                   	pop    esi
c0007513:	5f                   	pop    edi
c0007514:	c3                   	ret    

c0007515 <idleFunction(void*)>:
c0007515:	83 ec 0c             	sub    esp,0xc
c0007518:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000751d:	48                   	dec    eax
c000751e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007523:	75 01                	jne    c0007526 <idleFunction(void*)+0x11>
c0007525:	fb                   	sti    
c0007526:	e8 e5 f5 00 00       	call   c0016b10 <HalSystemIdle()>
c000752b:	e8 e2 72 01 00       	call   c001e812 <idleCommon()>
c0007530:	eb f4                	jmp    c0007526 <idleFunction(void*)+0x11>
c0007532:	66 90                	xchg   ax,ax

c0007534 <IDTEntry::IDTEntry(bool)>:
c0007534:	53                   	push   ebx
c0007535:	83 ec 04             	sub    esp,0x4
c0007538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753c:	88 04 24             	mov    BYTE PTR [esp],al
c000753f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007543:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007558:	83 e2 f0             	and    edx,0xfffffff0
c000755b:	83 ca 0e             	or     edx,0xe
c000755e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007565:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007568:	83 e2 ef             	and    edx,0xffffffef
c000756b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000756e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007572:	85 c0                	test   eax,eax
c0007574:	74 06                	je     c000757c <IDTEntry::IDTEntry(bool)+0x48>
c0007576:	b2 03                	mov    dl,0x3
c0007578:	eb 06                	jmp    c0007580 <IDTEntry::IDTEntry(bool)+0x4c>
c000757a:	66 90                	xchg   ax,ax
c000757c:	b2 00                	mov    dl,0x0
c000757e:	66 90                	xchg   ax,ax
c0007580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007584:	83 e2 03             	and    edx,0x3
c0007587:	89 d3                	mov    ebx,edx
c0007589:	c1 e3 05             	shl    ebx,0x5
c000758c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758f:	83 e2 9f             	and    edx,0xffffff9f
c0007592:	88 d1                	mov    cl,dl
c0007594:	88 da                	mov    dl,bl
c0007596:	09 ca                	or     edx,ecx
c0007598:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000759b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a2:	83 ca 80             	or     edx,0xffffff80
c00075a5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a8:	90                   	nop
c00075a9:	83 c4 04             	add    esp,0x4
c00075ac:	5b                   	pop    ebx
c00075ad:	c3                   	ret    

c00075ae <IDTEntry::setOffset(unsigned int)>:
c00075ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b6:	66 89 02             	mov    WORD PTR [edx],ax
c00075b9:	c1 e8 10             	shr    eax,0x10
c00075bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c0:	c3                   	ret    
c00075c1:	90                   	nop
c00075c2:	66 90                	xchg   ax,ax

c00075c4 <IDT::IDT()>:
c00075c4:	90                   	nop
c00075c5:	c3                   	ret    

c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ca:	83 c0 30             	add    eax,0x30
c00075cd:	c3                   	ret    

c00075ce <IDT::addEntry(IDTEntry, int)>:
c00075ce:	53                   	push   ebx
c00075cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075df:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075e2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075e6:	5b                   	pop    ebx
c00075e7:	c3                   	ret    

c00075e8 <IDT::addEntry(int, void (*)(), bool)>:
c00075e8:	53                   	push   ebx
c00075e9:	83 ec 10             	sub    esp,0x10
c00075ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f1:	50                   	push   eax
c00075f2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075f6:	53                   	push   ebx
c00075f7:	e8 38 ff ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c00075fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007600:	53                   	push   ebx
c0007601:	e8 a8 ff ff ff       	call   c00075ae <IDTEntry::setOffset(unsigned int)>
c0007606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000760a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000760e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007612:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007616:	e8 b3 ff ff ff       	call   c00075ce <IDT::addEntry(IDTEntry, int)>
c000761b:	83 c4 30             	add    esp,0x30
c000761e:	5b                   	pop    ebx
c000761f:	c3                   	ret    

c0007620 <IDT::flush()>:
c0007620:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c0007629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000762d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007632:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007639:	c3                   	ret    

c000763a <IDT::setup()>:
c000763a:	57                   	push   edi
c000763b:	56                   	push   esi
c000763c:	53                   	push   ebx
c000763d:	83 ec 10             	sub    esp,0x10
c0007640:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007644:	6a 00                	push   0x0
c0007646:	68 10 df 01 c0       	push   0xc001df10
c000764b:	6a 00                	push   0x0
c000764d:	53                   	push   ebx
c000764e:	e8 95 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007653:	6a 00                	push   0x0
c0007655:	68 20 df 01 c0       	push   0xc001df20
c000765a:	6a 01                	push   0x1
c000765c:	53                   	push   ebx
c000765d:	e8 86 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	83 c4 20             	add    esp,0x20
c0007665:	6a 00                	push   0x0
c0007667:	68 2a df 01 c0       	push   0xc001df2a
c000766c:	6a 02                	push   0x2
c000766e:	53                   	push   ebx
c000766f:	e8 74 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007674:	6a 00                	push   0x0
c0007676:	68 34 df 01 c0       	push   0xc001df34
c000767b:	6a 03                	push   0x3
c000767d:	53                   	push   ebx
c000767e:	e8 65 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	83 c4 20             	add    esp,0x20
c0007686:	6a 00                	push   0x0
c0007688:	68 3e df 01 c0       	push   0xc001df3e
c000768d:	6a 04                	push   0x4
c000768f:	53                   	push   ebx
c0007690:	e8 53 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007695:	6a 00                	push   0x0
c0007697:	68 48 df 01 c0       	push   0xc001df48
c000769c:	6a 05                	push   0x5
c000769e:	53                   	push   ebx
c000769f:	e8 44 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	83 c4 20             	add    esp,0x20
c00076a7:	6a 00                	push   0x0
c00076a9:	68 52 df 01 c0       	push   0xc001df52
c00076ae:	6a 06                	push   0x6
c00076b0:	53                   	push   ebx
c00076b1:	e8 32 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	6a 00                	push   0x0
c00076b8:	68 5c df 01 c0       	push   0xc001df5c
c00076bd:	6a 07                	push   0x7
c00076bf:	53                   	push   ebx
c00076c0:	e8 23 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076c5:	83 c4 20             	add    esp,0x20
c00076c8:	6a 00                	push   0x0
c00076ca:	68 66 df 01 c0       	push   0xc001df66
c00076cf:	6a 08                	push   0x8
c00076d1:	53                   	push   ebx
c00076d2:	e8 11 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	6a 00                	push   0x0
c00076d9:	68 6e df 01 c0       	push   0xc001df6e
c00076de:	6a 09                	push   0x9
c00076e0:	53                   	push   ebx
c00076e1:	e8 02 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076e6:	83 c4 20             	add    esp,0x20
c00076e9:	6a 00                	push   0x0
c00076eb:	68 78 df 01 c0       	push   0xc001df78
c00076f0:	6a 0a                	push   0xa
c00076f2:	53                   	push   ebx
c00076f3:	e8 f0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	6a 00                	push   0x0
c00076fa:	68 80 df 01 c0       	push   0xc001df80
c00076ff:	6a 0b                	push   0xb
c0007701:	53                   	push   ebx
c0007702:	e8 e1 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007707:	83 c4 20             	add    esp,0x20
c000770a:	6a 00                	push   0x0
c000770c:	68 88 df 01 c0       	push   0xc001df88
c0007711:	6a 0c                	push   0xc
c0007713:	53                   	push   ebx
c0007714:	e8 cf fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007719:	6a 00                	push   0x0
c000771b:	68 90 df 01 c0       	push   0xc001df90
c0007720:	6a 0d                	push   0xd
c0007722:	53                   	push   ebx
c0007723:	e8 c0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007728:	83 c4 20             	add    esp,0x20
c000772b:	6a 00                	push   0x0
c000772d:	68 aa df 01 c0       	push   0xc001dfaa
c0007732:	6a 0e                	push   0xe
c0007734:	53                   	push   ebx
c0007735:	e8 ae fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000773a:	6a 00                	push   0x0
c000773c:	68 b2 df 01 c0       	push   0xc001dfb2
c0007741:	6a 0f                	push   0xf
c0007743:	53                   	push   ebx
c0007744:	e8 9f fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007749:	83 c4 20             	add    esp,0x20
c000774c:	6a 00                	push   0x0
c000774e:	68 bc df 01 c0       	push   0xc001dfbc
c0007753:	6a 10                	push   0x10
c0007755:	53                   	push   ebx
c0007756:	e8 8d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000775b:	6a 00                	push   0x0
c000775d:	68 c6 df 01 c0       	push   0xc001dfc6
c0007762:	6a 11                	push   0x11
c0007764:	53                   	push   ebx
c0007765:	e8 7e fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000776a:	83 c4 20             	add    esp,0x20
c000776d:	6a 00                	push   0x0
c000776f:	68 d0 df 01 c0       	push   0xc001dfd0
c0007774:	6a 12                	push   0x12
c0007776:	53                   	push   ebx
c0007777:	e8 6c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000777c:	6a 01                	push   0x1
c000777e:	68 6a e0 01 c0       	push   0xc001e06a
c0007783:	6a 60                	push   0x60
c0007785:	53                   	push   ebx
c0007786:	e8 5d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000778b:	83 c4 20             	add    esp,0x20
c000778e:	6a 00                	push   0x0
c0007790:	68 71 e0 01 c0       	push   0xc001e071
c0007795:	6a 20                	push   0x20
c0007797:	53                   	push   ebx
c0007798:	e8 4b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000779d:	6a 00                	push   0x0
c000779f:	68 5c e0 01 c0       	push   0xc001e05c
c00077a4:	6a 21                	push   0x21
c00077a6:	53                   	push   ebx
c00077a7:	e8 3c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ac:	83 c4 20             	add    esp,0x20
c00077af:	6a 00                	push   0x0
c00077b1:	68 63 e0 01 c0       	push   0xc001e063
c00077b6:	6a 22                	push   0x22
c00077b8:	53                   	push   ebx
c00077b9:	e8 2a fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077be:	6a 00                	push   0x0
c00077c0:	68 da df 01 c0       	push   0xc001dfda
c00077c5:	6a 23                	push   0x23
c00077c7:	53                   	push   ebx
c00077c8:	e8 1b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077cd:	83 c4 20             	add    esp,0x20
c00077d0:	6a 00                	push   0x0
c00077d2:	68 e4 df 01 c0       	push   0xc001dfe4
c00077d7:	6a 24                	push   0x24
c00077d9:	53                   	push   ebx
c00077da:	e8 09 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077df:	6a 00                	push   0x0
c00077e1:	68 ee df 01 c0       	push   0xc001dfee
c00077e6:	6a 25                	push   0x25
c00077e8:	53                   	push   ebx
c00077e9:	e8 fa fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ee:	83 c4 20             	add    esp,0x20
c00077f1:	6a 00                	push   0x0
c00077f3:	68 f8 df 01 c0       	push   0xc001dff8
c00077f8:	6a 26                	push   0x26
c00077fa:	53                   	push   ebx
c00077fb:	e8 e8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007800:	6a 00                	push   0x0
c0007802:	68 02 e0 01 c0       	push   0xc001e002
c0007807:	6a 27                	push   0x27
c0007809:	53                   	push   ebx
c000780a:	e8 d9 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	6a 00                	push   0x0
c0007814:	68 0c e0 01 c0       	push   0xc001e00c
c0007819:	6a 28                	push   0x28
c000781b:	53                   	push   ebx
c000781c:	e8 c7 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007821:	6a 00                	push   0x0
c0007823:	68 16 e0 01 c0       	push   0xc001e016
c0007828:	6a 29                	push   0x29
c000782a:	53                   	push   ebx
c000782b:	e8 b8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	6a 00                	push   0x0
c0007835:	68 20 e0 01 c0       	push   0xc001e020
c000783a:	6a 2a                	push   0x2a
c000783c:	53                   	push   ebx
c000783d:	e8 a6 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007842:	6a 00                	push   0x0
c0007844:	68 2a e0 01 c0       	push   0xc001e02a
c0007849:	6a 2b                	push   0x2b
c000784b:	53                   	push   ebx
c000784c:	e8 97 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007851:	83 c4 20             	add    esp,0x20
c0007854:	6a 00                	push   0x0
c0007856:	68 34 e0 01 c0       	push   0xc001e034
c000785b:	6a 2c                	push   0x2c
c000785d:	53                   	push   ebx
c000785e:	e8 85 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007863:	6a 00                	push   0x0
c0007865:	68 3e e0 01 c0       	push   0xc001e03e
c000786a:	6a 2d                	push   0x2d
c000786c:	53                   	push   ebx
c000786d:	e8 76 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007872:	83 c4 20             	add    esp,0x20
c0007875:	6a 00                	push   0x0
c0007877:	68 48 e0 01 c0       	push   0xc001e048
c000787c:	6a 2e                	push   0x2e
c000787e:	53                   	push   ebx
c000787f:	e8 64 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007884:	6a 00                	push   0x0
c0007886:	68 52 e0 01 c0       	push   0xc001e052
c000788b:	6a 2f                	push   0x2f
c000788d:	53                   	push   ebx
c000788e:	e8 55 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007893:	83 c4 20             	add    esp,0x20
c0007896:	6a 00                	push   0x0
c0007898:	68 ac e1 01 c0       	push   0xc001e1ac
c000789d:	6a 30                	push   0x30
c000789f:	53                   	push   ebx
c00078a0:	e8 43 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078a5:	6a 00                	push   0x0
c00078a7:	68 b6 e1 01 c0       	push   0xc001e1b6
c00078ac:	6a 31                	push   0x31
c00078ae:	53                   	push   ebx
c00078af:	e8 34 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078b4:	83 c4 20             	add    esp,0x20
c00078b7:	6a 00                	push   0x0
c00078b9:	68 c0 e1 01 c0       	push   0xc001e1c0
c00078be:	6a 32                	push   0x32
c00078c0:	53                   	push   ebx
c00078c1:	e8 22 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078c6:	6a 00                	push   0x0
c00078c8:	68 ca e1 01 c0       	push   0xc001e1ca
c00078cd:	6a 33                	push   0x33
c00078cf:	53                   	push   ebx
c00078d0:	e8 13 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078d5:	83 c4 20             	add    esp,0x20
c00078d8:	6a 00                	push   0x0
c00078da:	68 d4 e1 01 c0       	push   0xc001e1d4
c00078df:	6a 34                	push   0x34
c00078e1:	53                   	push   ebx
c00078e2:	e8 01 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078e7:	6a 00                	push   0x0
c00078e9:	68 de e1 01 c0       	push   0xc001e1de
c00078ee:	6a 35                	push   0x35
c00078f0:	53                   	push   ebx
c00078f1:	e8 f2 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078f6:	83 c4 20             	add    esp,0x20
c00078f9:	6a 00                	push   0x0
c00078fb:	68 e8 e1 01 c0       	push   0xc001e1e8
c0007900:	6a 36                	push   0x36
c0007902:	53                   	push   ebx
c0007903:	e8 e0 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007908:	6a 00                	push   0x0
c000790a:	68 f2 e1 01 c0       	push   0xc001e1f2
c000790f:	6a 37                	push   0x37
c0007911:	53                   	push   ebx
c0007912:	e8 d1 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007917:	83 c4 1c             	add    esp,0x1c
c000791a:	6a 03                	push   0x3
c000791c:	6a 02                	push   0x2
c000791e:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007924:	e8 c7 24 00 00       	call   c0009df0 <VAS::allocatePages(int, int)>
c0007929:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007930:	89 c6                	mov    esi,eax
c0007932:	e8 94 01 00 00       	call   c0007acb <malloc>
c0007937:	81 c6 00 20 00 00    	add    esi,0x2000
c000793d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007940:	89 c7                	mov    edi,eax
c0007942:	e8 f5 15 00 00       	call   c0008f3c <TSS::TSS()>
c0007947:	83 c4 0c             	add    esp,0xc
c000794a:	68 66 df 01 c0       	push   0xc001df66
c000794f:	56                   	push   esi
c0007950:	57                   	push   edi
c0007951:	e8 2a 16 00 00       	call   c0008f80 <TSS::setup(unsigned long, unsigned long)>
c0007956:	89 c6                	mov    esi,eax
c0007958:	58                   	pop    eax
c0007959:	5a                   	pop    edx
c000795a:	6a 00                	push   0x0
c000795c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007960:	50                   	push   eax
c0007961:	e8 ce fb ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c0007966:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000796f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007976:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000797a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007980:	80 ce 05             	or     dh,0x5
c0007983:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007987:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000798a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000798e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007994:	e8 87 fc ff ff       	call   c0007620 <IDT::flush()>
c0007999:	83 c4 20             	add    esp,0x20
c000799c:	5b                   	pop    ebx
c000799d:	5e                   	pop    esi
c000799e:	5f                   	pop    edi
c000799f:	c3                   	ret    

c00079a0 <sbrk>:
c00079a0:	55                   	push   ebp
c00079a1:	57                   	push   edi
c00079a2:	56                   	push   esi
c00079a3:	53                   	push   ebx
c00079a4:	83 ec 1c             	sub    esp,0x1c
c00079a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079ab:	85 c0                	test   eax,eax
c00079ad:	74 66                	je     c0007a15 <sbrk+0x75>
c00079af:	78 6b                	js     c0007a1c <sbrk+0x7c>
c00079b1:	8b 15 f0 1d 02 c0    	mov    edx,DWORD PTR ds:0xc0021df0
c00079b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079bb:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c1:	05 ff 0f 00 00       	add    eax,0xfff
c00079c6:	0f 49 e8             	cmovns ebp,eax
c00079c9:	c1 fd 0c             	sar    ebp,0xc
c00079cc:	bb 00 00 00 00       	mov    ebx,0x0
c00079d1:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079d7:	8b 3d f0 1d 02 c0    	mov    edi,DWORD PTR ds:0xc0021df0
c00079dd:	e8 f4 03 00 00       	call   c0007dd6 <Phys::allocatePage()>
c00079e2:	68 01 04 00 00       	push   0x401
c00079e7:	57                   	push   edi
c00079e8:	50                   	push   eax
c00079e9:	56                   	push   esi
c00079ea:	e8 f5 22 00 00       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ef:	81 05 f0 1d 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021df0,0x1000
c00079f9:	83 c3 01             	add    ebx,0x1
c00079fc:	83 c4 10             	add    esp,0x10
c00079ff:	39 dd                	cmp    ebp,ebx
c0007a01:	75 ce                	jne    c00079d1 <sbrk+0x31>
c0007a03:	0f 20 d8             	mov    eax,cr3
c0007a06:	0f 22 d8             	mov    cr3,eax
c0007a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a0d:	83 c4 1c             	add    esp,0x1c
c0007a10:	5b                   	pop    ebx
c0007a11:	5e                   	pop    esi
c0007a12:	5f                   	pop    edi
c0007a13:	5d                   	pop    ebp
c0007a14:	c3                   	ret    
c0007a15:	a1 f0 1d 02 c0       	mov    eax,ds:0xc0021df0
c0007a1a:	eb f1                	jmp    c0007a0d <sbrk+0x6d>
c0007a1c:	83 ec 08             	sub    esp,0x8
c0007a1f:	50                   	push   eax
c0007a20:	68 f8 fa 01 c0       	push   0xc001faf8
c0007a25:	e8 27 2f 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0007a2a:	83 c4 10             	add    esp,0x10
c0007a2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a32:	eb d9                	jmp    c0007a0d <sbrk+0x6d>

c0007a34 <mmap>:
c0007a34:	83 ec 18             	sub    esp,0x18
c0007a37:	68 28 fb 01 c0       	push   0xc001fb28
c0007a3c:	e8 94 8d 00 00       	call   c00107d5 <KePanic(char const*)>
c0007a41:	b8 00 00 00 00       	mov    eax,0x0
c0007a46:	83 c4 1c             	add    esp,0x1c
c0007a49:	c3                   	ret    

c0007a4a <munmap>:
c0007a4a:	83 ec 18             	sub    esp,0x18
c0007a4d:	68 2d fb 01 c0       	push   0xc001fb2d
c0007a52:	e8 7e 8d 00 00       	call   c00107d5 <KePanic(char const*)>
c0007a57:	b8 00 00 00 00       	mov    eax,0x0
c0007a5c:	83 c4 1c             	add    esp,0x1c
c0007a5f:	c3                   	ret    

c0007a60 <liballoc_lock()>:
c0007a60:	fa                   	cli    
c0007a61:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a68:	b8 00 00 00 00       	mov    eax,0x0
c0007a6d:	c3                   	ret    

c0007a6e <liballoc_unlock()>:
c0007a6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a73:	83 e8 01             	sub    eax,0x1
c0007a76:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a7b:	75 01                	jne    c0007a7e <liballoc_unlock()+0x10>
c0007a7d:	fb                   	sti    
c0007a7e:	b8 00 00 00 00       	mov    eax,0x0
c0007a83:	c3                   	ret    

c0007a84 <liballoc_alloc(int)>:
c0007a84:	83 ec 10             	sub    esp,0x10
c0007a87:	6a 01                	push   0x1
c0007a89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8d:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a93:	e8 58 23 00 00       	call   c0009df0 <VAS::allocatePages(int, int)>
c0007a98:	83 c4 1c             	add    esp,0x1c
c0007a9b:	c3                   	ret    

c0007a9c <liballoc_free(void*, int)>:
c0007a9c:	83 ec 14             	sub    esp,0x14
c0007a9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aa3:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007aa9:	e8 7c 1f 00 00       	call   c0009a2a <VAS::freeAllocatedPages(unsigned long)>
c0007aae:	b8 00 00 00 00       	mov    eax,0x0
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <realloc>:
c0007ab7:	83 ec 14             	sub    esp,0x14
c0007aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac2:	e8 5a 9b ff ff       	call   c0001621 <dlrealloc>
c0007ac7:	83 c4 1c             	add    esp,0x1c
c0007aca:	c3                   	ret    

c0007acb <malloc>:
c0007acb:	83 ec 18             	sub    esp,0x18
c0007ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad2:	e8 0d 96 ff ff       	call   c00010e4 <dlmalloc>
c0007ad7:	83 c4 1c             	add    esp,0x1c
c0007ada:	c3                   	ret    

c0007adb <free>:
c0007adb:	83 ec 18             	sub    esp,0x18
c0007ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ae2:	e8 9f 92 ff ff       	call   c0000d86 <dlfree>
c0007ae7:	83 c4 1c             	add    esp,0x1c
c0007aea:	c3                   	ret    

c0007aeb <rfree>:
c0007aeb:	83 ec 18             	sub    esp,0x18
c0007aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007af2:	e8 8f 92 ff ff       	call   c0000d86 <dlfree>
c0007af7:	83 c4 1c             	add    esp,0x1c
c0007afa:	c3                   	ret    

c0007afb <calloc>:
c0007afb:	56                   	push   esi
c0007afc:	53                   	push   ebx
c0007afd:	83 ec 10             	sub    esp,0x10
c0007b00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b04:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b09:	53                   	push   ebx
c0007b0a:	e8 bc ff ff ff       	call   c0007acb <malloc>
c0007b0f:	89 c6                	mov    esi,eax
c0007b11:	83 c4 0c             	add    esp,0xc
c0007b14:	53                   	push   ebx
c0007b15:	6a 00                	push   0x0
c0007b17:	50                   	push   eax
c0007b18:	e8 d3 89 ff ff       	call   c00004f0 <memset>
c0007b1d:	89 f0                	mov    eax,esi
c0007b1f:	83 c4 14             	add    esp,0x14
c0007b22:	5b                   	pop    ebx
c0007b23:	5e                   	pop    esi
c0007b24:	c3                   	ret    

c0007b25 <KeEntryPoint>:
c0007b25:	57                   	push   edi
c0007b26:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b2b:	56                   	push   esi
c0007b2c:	31 f6                	xor    esi,esi
c0007b2e:	53                   	push   ebx
c0007b2f:	89 fa                	mov    edx,edi
c0007b31:	83 ec 2c             	sub    esp,0x2c
c0007b34:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b39:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b3e:	89 f0                	mov    eax,esi
c0007b40:	ee                   	out    dx,al
c0007b41:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b46:	b0 80                	mov    al,0x80
c0007b48:	89 da                	mov    edx,ebx
c0007b4a:	ee                   	out    dx,al
c0007b4b:	b1 03                	mov    cl,0x3
c0007b4d:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b52:	88 c8                	mov    al,cl
c0007b54:	ee                   	out    dx,al
c0007b55:	89 f0                	mov    eax,esi
c0007b57:	89 fa                	mov    edx,edi
c0007b59:	ee                   	out    dx,al
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	ee                   	out    dx,al
c0007b5f:	b0 c7                	mov    al,0xc7
c0007b61:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 0b                	mov    al,0xb
c0007b69:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b6e:	ee                   	out    dx,al
c0007b6f:	68 34 fb 01 c0       	push   0xc001fb34
c0007b74:	e8 d8 2d 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0007b79:	e8 65 85 00 00       	call   c00100e3 <KeDisplaySplashScreen()>
c0007b7e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b83:	05 ff 0f 00 00       	add    eax,0xfff
c0007b88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b90:	e8 af 03 00 00       	call   c0007f44 <Phys::physicalMemorySetup(unsigned int)>
c0007b95:	e8 3f 1c 00 00       	call   c00097d9 <Virt::virtualMemorySetup()>
c0007b9a:	58                   	pop    eax
c0007b9b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b9f:	53                   	push   ebx
c0007ba0:	e8 07 1f 00 00       	call   c0009aac <VAS::VAS()>
c0007ba5:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007bab:	e8 fa 6b 01 00       	call   c001e7aa <_init>
c0007bb0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bb7:	e8 0f ff ff ff       	call   c0007acb <malloc>
c0007bbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bbf:	89 c6                	mov    esi,eax
c0007bc1:	e8 3a f2 ff ff       	call   c0006e00 <Computer::Computer()>
c0007bc6:	6a 00                	push   0x0
c0007bc8:	6a 00                	push   0x0
c0007bca:	6a 00                	push   0x0
c0007bcc:	56                   	push   esi
c0007bcd:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bd3:	e8 ee f5 ff ff       	call   c00071c6 <Computer::open(int, int, void*)>
c0007bd8:	83 c4 14             	add    esp,0x14
c0007bdb:	53                   	push   ebx
c0007bdc:	e8 95 1f 00 00       	call   c0009b76 <VAS::~VAS()>
c0007be1:	83 c4 30             	add    esp,0x30
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	5f                   	pop    edi
c0007be7:	c3                   	ret    

c0007be8 <Phys::allocateDMA(unsigned long)>:
c0007be8:	55                   	push   ebp
c0007be9:	31 ed                	xor    ebp,ebp
c0007beb:	57                   	push   edi
c0007bec:	56                   	push   esi
c0007bed:	31 f6                	xor    esi,esi
c0007bef:	53                   	push   ebx
c0007bf0:	31 db                	xor    ebx,ebx
c0007bf2:	83 ec 1c             	sub    esp,0x1c
c0007bf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bf9:	05 ff 0f 00 00       	add    eax,0xfff
c0007bfe:	c1 e8 0c             	shr    eax,0xc
c0007c01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c05:	31 c0                	xor    eax,eax
c0007c07:	eb 1b                	jmp    c0007c24 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c09:	8d 78 01             	lea    edi,[eax+0x1]
c0007c0c:	85 c0                	test   eax,eax
c0007c0e:	0f 44 eb             	cmove  ebp,ebx
c0007c11:	0f 44 f3             	cmove  esi,ebx
c0007c14:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c18:	74 37                	je     c0007c51 <Phys::allocateDMA(unsigned long)+0x69>
c0007c1a:	89 f8                	mov    eax,edi
c0007c1c:	83 c3 01             	add    ebx,0x1
c0007c1f:	83 fb 0f             	cmp    ebx,0xf
c0007c22:	7f 13                	jg     c0007c37 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c24:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c2b:	74 dc                	je     c0007c09 <Phys::allocateDMA(unsigned long)+0x21>
c0007c2d:	31 c0                	xor    eax,eax
c0007c2f:	83 c3 01             	add    ebx,0x1
c0007c32:	83 fb 0f             	cmp    ebx,0xf
c0007c35:	7e ed                	jle    c0007c24 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c37:	83 ec 0c             	sub    esp,0xc
c0007c3a:	68 4c fb 01 c0       	push   0xc001fb4c
c0007c3f:	e8 91 8b 00 00       	call   c00107d5 <KePanic(char const*)>
c0007c44:	83 c4 10             	add    esp,0x10
c0007c47:	31 c0                	xor    eax,eax
c0007c49:	83 c4 1c             	add    esp,0x1c
c0007c4c:	5b                   	pop    ebx
c0007c4d:	5e                   	pop    esi
c0007c4e:	5f                   	pop    edi
c0007c4f:	5d                   	pop    ebp
c0007c50:	c3                   	ret    
c0007c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c55:	89 f2                	mov    edx,esi
c0007c57:	c1 fa 04             	sar    edx,0x4
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	01 f1                	add    ecx,esi
c0007c60:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c63:	83 e9 01             	sub    ecx,0x1
c0007c66:	0f 48 ca             	cmovs  ecx,edx
c0007c69:	c1 f9 04             	sar    ecx,0x4
c0007c6c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c70:	74 06                	je     c0007c78 <Phys::allocateDMA(unsigned long)+0x90>
c0007c72:	89 eb                	mov    ebx,ebp
c0007c74:	31 c0                	xor    eax,eax
c0007c76:	eb b7                	jmp    c0007c2f <Phys::allocateDMA(unsigned long)+0x47>
c0007c78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7c:	85 d2                	test   edx,edx
c0007c7e:	74 17                	je     c0007c97 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c80:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007c86:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007c8d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c90:	83 c2 01             	add    edx,0x1
c0007c93:	39 d0                	cmp    eax,edx
c0007c95:	75 f6                	jne    c0007c8d <Phys::allocateDMA(unsigned long)+0xa5>
c0007c97:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007c9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ca5:	01 c2                	add    edx,eax
c0007ca7:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007cad:	85 c9                	test   ecx,ecx
c0007caf:	74 17                	je     c0007cc8 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cb1:	83 ec 0c             	sub    esp,0xc
c0007cb4:	68 4c fb 01 c0       	push   0xc001fb4c
c0007cb9:	e8 17 8b 00 00       	call   c00107d5 <KePanic(char const*)>
c0007cbe:	83 c4 10             	add    esp,0x10
c0007cc1:	89 f8                	mov    eax,edi
c0007cc3:	e9 54 ff ff ff       	jmp    c0007c1c <Phys::allocateDMA(unsigned long)+0x34>
c0007cc8:	c1 e6 0c             	shl    esi,0xc
c0007ccb:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cd1:	e9 73 ff ff ff       	jmp    c0007c49 <Phys::allocateDMA(unsigned long)+0x61>

c0007cd6 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cda:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007ce0:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007ce5:	c1 ea 0c             	shr    edx,0xc
c0007ce8:	29 d0                	sub    eax,edx
c0007cea:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007cef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cf8:	c1 e8 0c             	shr    eax,0xc
c0007cfb:	85 d2                	test   edx,edx
c0007cfd:	74 11                	je     c0007d10 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cff:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007d04:	01 c2                	add    edx,eax
c0007d06:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d09:	83 c0 01             	add    eax,0x1
c0007d0c:	39 d0                	cmp    eax,edx
c0007d0e:	75 f6                	jne    c0007d06 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d10:	c3                   	ret    

c0007d11 <Phys::setPageState(unsigned long, bool)>:
c0007d11:	57                   	push   edi
c0007d12:	56                   	push   esi
c0007d13:	8b 35 f4 1d 02 c0    	mov    esi,DWORD PTR ds:0xc0021df4
c0007d19:	53                   	push   ebx
c0007d1a:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d27:	89 ca                	mov    edx,ecx
c0007d29:	83 e1 07             	and    ecx,0x7
c0007d2c:	c1 ea 03             	shr    edx,0x3
c0007d2f:	0f b6 c0             	movzx  eax,al
c0007d32:	d3 c3                	rol    ebx,cl
c0007d34:	01 d6                	add    esi,edx
c0007d36:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d39:	d3 e0                	shl    eax,cl
c0007d3b:	21 fb                	and    ebx,edi
c0007d3d:	88 1e                	mov    BYTE PTR [esi],bl
c0007d3f:	8b 1d f4 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021df4
c0007d45:	01 da                	add    edx,ebx
c0007d47:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d49:	09 c8                	or     eax,ecx
c0007d4b:	88 02                	mov    BYTE PTR [edx],al
c0007d4d:	5b                   	pop    ebx
c0007d4e:	5e                   	pop    esi
c0007d4f:	5f                   	pop    edi
c0007d50:	c3                   	ret    

c0007d51 <Phys::getPageState(unsigned long)>:
c0007d51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d55:	8b 15 f4 1d 02 c0    	mov    edx,DWORD PTR ds:0xc0021df4
c0007d5b:	89 c8                	mov    eax,ecx
c0007d5d:	83 e1 07             	and    ecx,0x7
c0007d60:	c1 e8 03             	shr    eax,0x3
c0007d63:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d67:	d3 f8                	sar    eax,cl
c0007d69:	83 e0 01             	and    eax,0x1
c0007d6c:	c3                   	ret    

c0007d6d <Phys::freePage(unsigned long)>:
c0007d6d:	53                   	push   ebx
c0007d6e:	83 ec 08             	sub    esp,0x8
c0007d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d75:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d7b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d81:	76 41                	jbe    c0007dc4 <Phys::freePage(unsigned long)+0x57>
c0007d83:	c1 e8 0c             	shr    eax,0xc
c0007d86:	50                   	push   eax
c0007d87:	89 c3                	mov    ebx,eax
c0007d89:	e8 c3 ff ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007d8e:	5a                   	pop    edx
c0007d8f:	84 c0                	test   al,al
c0007d91:	74 20                	je     c0007db3 <Phys::freePage(unsigned long)+0x46>
c0007d93:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d98:	83 ec 08             	sub    esp,0x8
c0007d9b:	6a 00                	push   0x0
c0007d9d:	53                   	push   ebx
c0007d9e:	83 e8 01             	sub    eax,0x1
c0007da1:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007da6:	e8 66 ff ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	83 c4 08             	add    esp,0x8
c0007db1:	5b                   	pop    ebx
c0007db2:	c3                   	ret    
c0007db3:	c7 44 24 10 f1 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fbf1
c0007dbb:	83 c4 08             	add    esp,0x8
c0007dbe:	5b                   	pop    ebx
c0007dbf:	e9 11 8a 00 00       	jmp    c00107d5 <KePanic(char const*)>
c0007dc4:	68 00 10 00 00       	push   0x1000
c0007dc9:	50                   	push   eax
c0007dca:	e8 07 ff ff ff       	call   c0007cd6 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dcf:	59                   	pop    ecx
c0007dd0:	5b                   	pop    ebx
c0007dd1:	83 c4 08             	add    esp,0x8
c0007dd4:	5b                   	pop    ebx
c0007dd5:	c3                   	ret    

c0007dd6 <Phys::allocatePage()>:
c0007dd6:	56                   	push   esi
c0007dd7:	53                   	push   ebx
c0007dd8:	83 ec 14             	sub    esp,0x14
c0007ddb:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007de1:	89 f3                	mov    ebx,esi
c0007de3:	eb 0a                	jmp    c0007def <Phys::allocatePage()+0x19>
c0007de5:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007deb:	39 de                	cmp    esi,ebx
c0007ded:	74 26                	je     c0007e15 <Phys::allocatePage()+0x3f>
c0007def:	53                   	push   ebx
c0007df0:	e8 5c ff ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007df5:	5a                   	pop    edx
c0007df6:	84 c0                	test   al,al
c0007df8:	74 67                	je     c0007e61 <Phys::allocatePage()+0x8b>
c0007dfa:	83 c3 01             	add    ebx,0x1
c0007dfd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e03:	75 e0                	jne    c0007de5 <Phys::allocatePage()+0xf>
c0007e05:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007e0f:	31 db                	xor    ebx,ebx
c0007e11:	39 de                	cmp    esi,ebx
c0007e13:	75 da                	jne    c0007def <Phys::allocatePage()+0x19>
c0007e15:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007e1a:	83 ec 0c             	sub    esp,0xc
c0007e1d:	83 f0 01             	xor    eax,0x1
c0007e20:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e2d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e33:	50                   	push   eax
c0007e34:	e8 e9 27 00 00       	call   c000a622 <VAS::scanForEviction()>
c0007e39:	83 c4 10             	add    esp,0x10
c0007e3c:	85 c0                	test   eax,eax
c0007e3e:	75 48                	jne    c0007e88 <Phys::allocatePage()+0xb2>
c0007e40:	83 ec 0c             	sub    esp,0xc
c0007e43:	68 74 fb 01 c0       	push   0xc001fb74
c0007e48:	e8 88 89 00 00       	call   c00107d5 <KePanic(char const*)>
c0007e4d:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e53:	83 c4 10             	add    esp,0x10
c0007e56:	53                   	push   ebx
c0007e57:	e8 f5 fe ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007e5c:	5a                   	pop    edx
c0007e5d:	84 c0                	test   al,al
c0007e5f:	75 99                	jne    c0007dfa <Phys::allocatePage()+0x24>
c0007e61:	6a 01                	push   0x1
c0007e63:	53                   	push   ebx
c0007e64:	e8 a8 fe ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007e69:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e6f:	59                   	pop    ecx
c0007e70:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e75:	5b                   	pop    ebx
c0007e76:	83 c2 01             	add    edx,0x1
c0007e79:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e7f:	c1 e0 0c             	shl    eax,0xc
c0007e82:	83 c4 14             	add    esp,0x14
c0007e85:	5b                   	pop    ebx
c0007e86:	5e                   	pop    esi
c0007e87:	c3                   	ret    
c0007e88:	83 ec 08             	sub    esp,0x8
c0007e8b:	89 c2                	mov    edx,eax
c0007e8d:	6a 01                	push   0x1
c0007e8f:	c1 ea 0c             	shr    edx,0xc
c0007e92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e96:	52                   	push   edx
c0007e97:	e8 75 fe ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007e9c:	83 c4 10             	add    esp,0x10
c0007e9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ea3:	eb dd                	jmp    c0007e82 <Phys::allocatePage()+0xac>

c0007ea5 <Phys::allocateContiguousPages(int)>:
c0007ea5:	57                   	push   edi
c0007ea6:	56                   	push   esi
c0007ea7:	53                   	push   ebx
c0007ea8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eac:	fa                   	cli    
c0007ead:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007eb2:	31 db                	xor    ebx,ebx
c0007eb4:	83 c0 01             	add    eax,0x1
c0007eb7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ebc:	85 db                	test   ebx,ebx
c0007ebe:	75 11                	jne    c0007ed1 <Phys::allocateContiguousPages(int)+0x2c>
c0007ec0:	e8 11 ff ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0007ec5:	83 fe 01             	cmp    esi,0x1
c0007ec8:	89 c7                	mov    edi,eax
c0007eca:	74 21                	je     c0007eed <Phys::allocateContiguousPages(int)+0x48>
c0007ecc:	bb 01 00 00 00       	mov    ebx,0x1
c0007ed1:	e8 00 ff ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0007ed6:	89 da                	mov    edx,ebx
c0007ed8:	c1 e2 0c             	shl    edx,0xc
c0007edb:	01 fa                	add    edx,edi
c0007edd:	39 c2                	cmp    edx,eax
c0007edf:	74 22                	je     c0007f03 <Phys::allocateContiguousPages(int)+0x5e>
c0007ee1:	83 fe 01             	cmp    esi,0x1
c0007ee4:	bb 01 00 00 00       	mov    ebx,0x1
c0007ee9:	89 c7                	mov    edi,eax
c0007eeb:	75 e4                	jne    c0007ed1 <Phys::allocateContiguousPages(int)+0x2c>
c0007eed:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ef2:	83 e8 01             	sub    eax,0x1
c0007ef5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007efa:	75 01                	jne    c0007efd <Phys::allocateContiguousPages(int)+0x58>
c0007efc:	fb                   	sti    
c0007efd:	5b                   	pop    ebx
c0007efe:	89 f8                	mov    eax,edi
c0007f00:	5e                   	pop    esi
c0007f01:	5f                   	pop    edi
c0007f02:	c3                   	ret    
c0007f03:	83 c3 01             	add    ebx,0x1
c0007f06:	39 f3                	cmp    ebx,esi
c0007f08:	75 b2                	jne    c0007ebc <Phys::allocateContiguousPages(int)+0x17>
c0007f0a:	eb e1                	jmp    c0007eed <Phys::allocateContiguousPages(int)+0x48>

c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f0c:	56                   	push   esi
c0007f0d:	53                   	push   ebx
c0007f0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f12:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f18:	73 06                	jae    c0007f20 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f1a:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f24:	c1 eb 0c             	shr    ebx,0xc
c0007f27:	c1 e8 0c             	shr    eax,0xc
c0007f2a:	39 d8                	cmp    eax,ebx
c0007f2c:	73 13                	jae    c0007f41 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f2e:	6a 00                	push   0x0
c0007f30:	50                   	push   eax
c0007f31:	8d 70 01             	lea    esi,[eax+0x1]
c0007f34:	e8 d8 fd ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 f0                	mov    eax,esi
c0007f3d:	5a                   	pop    edx
c0007f3e:	59                   	pop    ecx
c0007f3f:	75 ed                	jne    c0007f2e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f41:	5b                   	pop    ebx
c0007f42:	5e                   	pop    esi
c0007f43:	c3                   	ret    

c0007f44 <Phys::physicalMemorySetup(unsigned int)>:
c0007f44:	55                   	push   ebp
c0007f45:	57                   	push   edi
c0007f46:	56                   	push   esi
c0007f47:	53                   	push   ebx
c0007f48:	31 db                	xor    ebx,ebx
c0007f4a:	83 ec 40             	sub    esp,0x40
c0007f4d:	6a 10                	push   0x10
c0007f4f:	6a 00                	push   0x0
c0007f51:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f56:	e8 95 85 ff ff       	call   c00004f0 <memset>
c0007f5b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f64:	05 00 10 00 00       	add    eax,0x1000
c0007f69:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f6d:	5a                   	pop    edx
c0007f6e:	59                   	pop    ecx
c0007f6f:	50                   	push   eax
c0007f70:	68 07 fc 01 c0       	push   0xc001fc07
c0007f75:	e8 d7 29 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0007f7a:	83 c4 10             	add    esp,0x10
c0007f7d:	83 ec 08             	sub    esp,0x8
c0007f80:	6a 01                	push   0x1
c0007f82:	53                   	push   ebx
c0007f83:	83 c3 01             	add    ebx,0x1
c0007f86:	e8 86 fd ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007f8b:	83 c4 10             	add    esp,0x10
c0007f8e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f94:	75 e7                	jne    c0007f7d <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f96:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fa1:	85 c0                	test   eax,eax
c0007fa3:	0f 84 43 01 00 00    	je     c00080ec <Phys::physicalMemorySetup(unsigned int)+0x1a8>
c0007fa9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fb1:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fb6:	e9 82 00 00 00       	jmp    c000803d <Phys::physicalMemorySetup(unsigned int)+0xf9>
c0007fbb:	ba 00 00 08 00       	mov    edx,0x80000
c0007fc0:	89 c1                	mov    ecx,eax
c0007fc2:	39 f2                	cmp    edx,esi
c0007fc4:	19 f9                	sbb    ecx,edi
c0007fc6:	0f 82 c0 00 00 00    	jb     c000808c <Phys::physicalMemorySetup(unsigned int)+0x148>
c0007fcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fd0:	89 c5                	mov    ebp,eax
c0007fd2:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007fda:	19 cd                	sbb    ebp,ecx
c0007fdc:	0f 83 af 00 00 00    	jae    c0008091 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007fe2:	89 d6                	mov    esi,edx
c0007fe4:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fe9:	39 f2                	cmp    edx,esi
c0007feb:	89 cf                	mov    edi,ecx
c0007fed:	19 c8                	sbb    eax,ecx
c0007fef:	73 07                	jae    c0007ff8 <Phys::physicalMemorySetup(unsigned int)+0xb4>
c0007ff1:	be 00 00 0a 00       	mov    esi,0xa0000
c0007ff6:	31 ff                	xor    edi,edi
c0007ff8:	89 f2                	mov    edx,esi
c0007ffa:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007fff:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0008005:	89 f9                	mov    ecx,edi
c0008007:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000800b:	83 d1 ff             	adc    ecx,0xffffffff
c000800e:	39 d0                	cmp    eax,edx
c0008010:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0008014:	b8 00 00 00 00       	mov    eax,0x0
c0008019:	19 c8                	sbb    eax,ecx
c000801b:	0f 82 9d 01 00 00    	jb     c00081be <Phys::physicalMemorySetup(unsigned int)+0x27a>
c0008021:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008025:	83 c3 18             	add    ebx,0x18
c0008028:	83 c6 01             	add    esi,0x1
c000802b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000802f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008033:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0008037:	0f 84 bf 00 00 00    	je     c00080fc <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c000803d:	8b 33                	mov    esi,DWORD PTR [ebx]
c000803f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008042:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008045:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008048:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000804c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000804f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008053:	01 f0                	add    eax,esi
c0008055:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008059:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000805d:	55                   	push   ebp
c000805e:	11 fa                	adc    edx,edi
c0008060:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008064:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000806c:	50                   	push   eax
c000806d:	56                   	push   esi
c000806e:	68 a4 fb 01 c0       	push   0xc001fba4
c0008073:	e8 d9 28 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0008078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	09 f8                	or     eax,edi
c0008081:	75 79                	jne    c00080fc <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c0008083:	83 fd 01             	cmp    ebp,0x1
c0008086:	0f 84 2f ff ff ff    	je     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x77>
c000808c:	83 fd 01             	cmp    ebp,0x1
c000808f:	75 90                	jne    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008091:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0008095:	31 d2                	xor    edx,edx
c0008097:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000809b:	89 c8                	mov    eax,ecx
c000809d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080a1:	19 d1                	sbb    ecx,edx
c00080a3:	0f 82 78 ff ff ff    	jb     c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080a9:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080ae:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080b2:	b9 00 00 00 00       	mov    ecx,0x0
c00080b7:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080bb:	0f 83 60 ff ff ff    	jae    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080c1:	39 c6                	cmp    esi,eax
c00080c3:	19 d7                	sbb    edi,edx
c00080c5:	0f 83 ff 00 00 00    	jae    c00081ca <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080cb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080d3:	29 c7                	sub    edi,eax
c00080d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080d9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080dd:	19 d5                	sbb    ebp,edx
c00080df:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080e7:	e9 de 00 00 00       	jmp    c00081ca <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080ec:	83 ec 0c             	sub    esp,0xc
c00080ef:	68 1f fc 01 c0       	push   0xc001fc1f
c00080f4:	e8 dc 86 00 00       	call   c00107d5 <KePanic(char const*)>
c00080f9:	83 c4 10             	add    esp,0x10
c00080fc:	83 ec 08             	sub    esp,0x8
c00080ff:	bb 60 00 00 00       	mov    ebx,0x60
c0008104:	6a 00                	push   0x0
c0008106:	6a 06                	push   0x6
c0008108:	e8 04 fc ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c000810d:	58                   	pop    eax
c000810e:	5a                   	pop    edx
c000810f:	6a 00                	push   0x0
c0008111:	6a 07                	push   0x7
c0008113:	e8 f9 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008118:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c000811e:	83 c4 10             	add    esp,0x10
c0008121:	83 c1 02             	add    ecx,0x2
c0008124:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c000812a:	83 ec 08             	sub    esp,0x8
c000812d:	6a 00                	push   0x0
c000812f:	53                   	push   ebx
c0008130:	83 c3 01             	add    ebx,0x1
c0008133:	e8 d9 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008138:	83 c4 10             	add    esp,0x10
c000813b:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008141:	75 e7                	jne    c000812a <Phys::physicalMemorySetup(unsigned int)+0x1e6>
c0008143:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008148:	bb 40 01 00 00       	mov    ebx,0x140
c000814d:	83 c0 20             	add    eax,0x20
c0008150:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008155:	eb 26                	jmp    c000817d <Phys::physicalMemorySetup(unsigned int)+0x239>
c0008157:	83 ec 08             	sub    esp,0x8
c000815a:	6a 00                	push   0x0
c000815c:	53                   	push   ebx
c000815d:	83 c3 01             	add    ebx,0x1
c0008160:	e8 ac fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008165:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000816a:	83 c4 10             	add    esp,0x10
c000816d:	83 c0 01             	add    eax,0x1
c0008170:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008176:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000817b:	74 07                	je     c0008184 <Phys::physicalMemorySetup(unsigned int)+0x240>
c000817d:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008182:	7e d3                	jle    c0008157 <Phys::physicalMemorySetup(unsigned int)+0x213>
c0008184:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008189:	3d ff 07 00 00       	cmp    eax,0x7ff
c000818e:	7f 26                	jg     c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0008190:	83 ec 08             	sub    esp,0x8
c0008193:	6a 00                	push   0x0
c0008195:	53                   	push   ebx
c0008196:	83 c3 01             	add    ebx,0x1
c0008199:	e8 73 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c000819e:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081a3:	83 c4 10             	add    esp,0x10
c00081a6:	83 c0 01             	add    eax,0x1
c00081a9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081af:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081b4:	75 d3                	jne    c0008189 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00081b6:	83 c4 3c             	add    esp,0x3c
c00081b9:	5b                   	pop    ebx
c00081ba:	5e                   	pop    esi
c00081bb:	5f                   	pop    edi
c00081bc:	5d                   	pop    ebp
c00081bd:	c3                   	ret    
c00081be:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081c2:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081ca:	83 ec 04             	sub    esp,0x4
c00081cd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081d1:	56                   	push   esi
c00081d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081d6:	57                   	push   edi
c00081d7:	68 c8 fb 01 c0       	push   0xc001fbc8
c00081dc:	e8 70 27 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00081e1:	5d                   	pop    ebp
c00081e2:	58                   	pop    eax
c00081e3:	56                   	push   esi
c00081e4:	57                   	push   edi
c00081e5:	e8 22 fd ff ff       	call   c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00081ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00081ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00081f2:	83 c4 0c             	add    esp,0xc
c00081f5:	8b 35 e8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ee8
c00081fb:	0f ac d0 0c          	shrd   eax,edx,0xc
c00081ff:	01 f0                	add    eax,esi
c0008201:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008206:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000820d:	52                   	push   edx
c000820e:	50                   	push   eax
c000820f:	68 2d fc 01 c0       	push   0xc001fc2d
c0008214:	e8 38 27 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0008219:	83 c4 10             	add    esp,0x10
c000821c:	e9 00 fe ff ff       	jmp    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008221:	90                   	nop

c0008222 <Pipe::isAtty()>:
c0008222:	31 c0                	xor    eax,eax
c0008224:	c3                   	ret    
c0008225:	90                   	nop

c0008226 <Pipe::~Pipe()>:
c0008226:	83 ec 0c             	sub    esp,0xc
c0008229:	ba 8c fc 01 c0       	mov    edx,0xc001fc8c
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	89 10                	mov    DWORD PTR [eax],edx
c0008234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008238:	83 ec 0c             	sub    esp,0xc
c000823b:	50                   	push   eax
c000823c:	e8 5b 11 00 00       	call   c000939c <UnixFile::~UnixFile()>
c0008241:	83 c4 10             	add    esp,0x10
c0008244:	90                   	nop
c0008245:	83 c4 0c             	add    esp,0xc
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <Pipe::~Pipe()>:
c000824a:	83 ec 0c             	sub    esp,0xc
c000824d:	83 ec 0c             	sub    esp,0xc
c0008250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008254:	e8 cd ff ff ff       	call   c0008226 <Pipe::~Pipe()>
c0008259:	83 c4 10             	add    esp,0x10
c000825c:	83 ec 08             	sub    esp,0x8
c000825f:	6a 20                	push   0x20
c0008261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008265:	e8 e9 25 00 00       	call   c000a853 <operator delete(void*, unsigned long)>
c000826a:	83 c4 10             	add    esp,0x10
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    
c0008271:	90                   	nop

c0008272 <Pipe::write(unsigned long long, void*, int*)>:
c0008272:	55                   	push   ebp
c0008273:	57                   	push   edi
c0008274:	56                   	push   esi
c0008275:	53                   	push   ebx
c0008276:	83 ec 1c             	sub    esp,0x1c
c0008279:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000827d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008281:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008285:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000828c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008292:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008296:	89 d8                	mov    eax,ebx
c0008298:	89 d6                	mov    esi,edx
c000829a:	89 d7                	mov    edi,edx
c000829c:	c1 ff 1f             	sar    edi,0x1f
c000829f:	03 34 24             	add    esi,DWORD PTR [esp]
c00082a2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a6:	c1 f8 1f             	sar    eax,0x1f
c00082a9:	39 f3                	cmp    ebx,esi
c00082ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082b3:	19 f8                	sbb    eax,edi
c00082b5:	b8 01 00 00 00       	mov    eax,0x1
c00082ba:	72 72                	jb     c000832e <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082bf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082c3:	01 d0                	add    eax,edx
c00082c5:	99                   	cdq    
c00082c6:	f7 fb                	idiv   ebx
c00082c8:	89 d8                	mov    eax,ebx
c00082ca:	29 d0                	sub    eax,edx
c00082cc:	89 d6                	mov    esi,edx
c00082ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082d1:	89 c3                	mov    ebx,eax
c00082d3:	c1 fb 1f             	sar    ebx,0x1f
c00082d6:	39 c2                	cmp    edx,eax
c00082d8:	19 df                	sbb    edi,ebx
c00082da:	bb 00 00 00 00       	mov    ebx,0x0
c00082df:	72 04                	jb     c00082e5 <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082e1:	89 d3                	mov    ebx,edx
c00082e3:	29 c3                	sub    ebx,eax
c00082e5:	89 d0                	mov    eax,edx
c00082e7:	29 d8                	sub    eax,ebx
c00082e9:	74 0d                	je     c00082f8 <Pipe::write(unsigned long long, void*, int*)+0x86>
c00082eb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082ee:	89 c1                	mov    ecx,eax
c00082f0:	01 f7                	add    edi,esi
c00082f2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082f8:	85 db                	test   ebx,ebx
c00082fa:	74 0d                	je     c0008309 <Pipe::write(unsigned long long, void*, int*)+0x97>
c00082fc:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008300:	89 d9                	mov    ecx,ebx
c0008302:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008305:	89 c6                	mov    esi,eax
c0008307:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008309:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000830c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008311:	75 10                	jne    c0008323 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008313:	83 ec 0c             	sub    esp,0xc
c0008316:	68 49 fc 01 c0       	push   0xc001fc49
c000831b:	e8 b5 84 00 00       	call   c00107d5 <KePanic(char const*)>
c0008320:	83 c4 10             	add    esp,0x10
c0008323:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008327:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000832a:	89 08                	mov    DWORD PTR [eax],ecx
c000832c:	31 c0                	xor    eax,eax
c000832e:	83 c4 1c             	add    esp,0x1c
c0008331:	5b                   	pop    ebx
c0008332:	5e                   	pop    esi
c0008333:	5f                   	pop    edi
c0008334:	5d                   	pop    ebp
c0008335:	c3                   	ret    

c0008336 <Pipe::read(unsigned long long, void*, int*)>:
c0008336:	55                   	push   ebp
c0008337:	57                   	push   edi
c0008338:	56                   	push   esi
c0008339:	53                   	push   ebx
c000833a:	83 ec 1c             	sub    esp,0x1c
c000833d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008341:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008345:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008349:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000834c:	89 c8                	mov    eax,ecx
c000834e:	99                   	cdq    
c000834f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008353:	74 24                	je     c0008379 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008355:	39 f9                	cmp    ecx,edi
c0008357:	89 d1                	mov    ecx,edx
c0008359:	19 f1                	sbb    ecx,esi
c000835b:	73 1c                	jae    c0008379 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000835d:	fa                   	cli    
c000835e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008364:	e8 67 cc 00 00       	call   c0014fd0 <schedule()>
c0008369:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000836e:	48                   	dec    eax
c000836f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008374:	75 d3                	jne    c0008349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008376:	fb                   	sti    
c0008377:	eb d0                	jmp    c0008349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008379:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000837d:	39 f8                	cmp    eax,edi
c000837f:	89 d1                	mov    ecx,edx
c0008381:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0008385:	19 f1                	sbb    ecx,esi
c0008387:	73 08                	jae    c0008391 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0008389:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000838d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008391:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008394:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008397:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000839b:	29 f7                	sub    edi,esi
c000839d:	89 f8                	mov    eax,edi
c000839f:	99                   	cdq    
c00083a0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083a4:	89 d0                	mov    eax,edx
c00083a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083aa:	19 c2                	sbb    edx,eax
c00083ac:	89 f8                	mov    eax,edi
c00083ae:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083b3:	89 ea                	mov    edx,ebp
c00083b5:	29 c2                	sub    edx,eax
c00083b7:	85 c0                	test   eax,eax
c00083b9:	74 0b                	je     c00083c6 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083bb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083be:	89 c1                	mov    ecx,eax
c00083c0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c6:	85 d2                	test   edx,edx
c00083c8:	74 0d                	je     c00083d7 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083ca:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083ce:	89 d1                	mov    ecx,edx
c00083d0:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083d3:	89 c7                	mov    edi,eax
c00083d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083da:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083dd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083e0:	99                   	cdq    
c00083e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083e5:	89 f7                	mov    edi,esi
c00083e7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 99 62 01 00       	call   c001e690 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083ff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 66 fc 01 c0       	push   0xc001fc66
c000840c:	e8 c4 83 00 00       	call   c00107d5 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000841c:	89 10                	mov    DWORD PTR [eax],edx
c000841e:	83 c4 1c             	add    esp,0x1c
c0008421:	31 c0                	xor    eax,eax
c0008423:	5b                   	pop    ebx
c0008424:	5e                   	pop    esi
c0008425:	5f                   	pop    edi
c0008426:	5d                   	pop    ebp
c0008427:	c3                   	ret    

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 7c 0d 00 00       	call   c00091b6 <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 8c fc 01 c0       	mov    edx,0xc001fc8c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 55 f6 ff ff       	call   c0007acb <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba d4 fc 01 c0       	mov    edx,0xc001fcd4
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 ed 0e 00 00       	call   c000939c <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 78 23 00 00       	call   c000a853 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 a0 47 00 00       	call   c000cc96 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 cc f7 00 00       	call   c0017ce8 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000853f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 20 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde1e0]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 20 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde1e0]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 d8 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde328]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 b0 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde350]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 fe f4 00 00       	call   c0017b7c <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086ad:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086b5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	59                   	pop    ecx
c00086d2:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086d7:	0f b6 c0             	movzx  eax,al
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f0:	01 f2                	add    edx,esi
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 5b f5 00 00       	jmp    c0017c84 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 a0 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fca0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 5f 80 00 00       	jmp    c00107d5 <KePanic(char const*)>
c0008776:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	50                   	push   eax
c000878c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000878f:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	83 c4 10             	add    esp,0x10
c00087bb:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008842:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008853:	83 ec 0c             	sub    esp,0xc
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 00 2f 00 00       	jmp    c000b7d3 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088ed:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088fe:	83 ec 0c             	sub    esp,0xc
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000896f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008973:	0f be c2             	movsx  eax,dl
c0008976:	83 f8 5b             	cmp    eax,0x5b
c0008979:	75 18                	jne    c0008993 <VgaText::putchar(char)+0x2b>
c000897b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000897f:	74 20                	je     c00089a1 <VgaText::putchar(char)+0x39>
c0008981:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008987:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000898e:	e9 b8 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008993:	83 f8 1b             	cmp    eax,0x1b
c0008996:	75 09                	jne    c00089a1 <VgaText::putchar(char)+0x39>
c0008998:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000899c:	e9 aa 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c00089a1:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089a5:	89 f9                	mov    ecx,edi
c00089a7:	84 c9                	test   cl,cl
c00089a9:	0f 84 8c 00 00 00    	je     c0008a3b <VgaText::putchar(char)+0xd3>
c00089af:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089b2:	80 f9 3e             	cmp    cl,0x3e
c00089b5:	77 70                	ja     c0008a27 <VgaText::putchar(char)+0xbf>
c00089b7:	83 f8 6d             	cmp    eax,0x6d
c00089ba:	75 3f                	jne    c00089fb <VgaText::putchar(char)+0x93>
c00089bc:	31 f6                	xor    esi,esi
c00089be:	31 d2                	xor    edx,edx
c00089c0:	31 c0                	xor    eax,eax
c00089c2:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c5:	7e 25                	jle    c00089ec <VgaText::putchar(char)+0x84>
c00089c7:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089cc:	83 fa 3b             	cmp    edx,0x3b
c00089cf:	75 0f                	jne    c00089e0 <VgaText::putchar(char)+0x78>
c00089d1:	50                   	push   eax
c00089d2:	53                   	push   ebx
c00089d3:	e8 48 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089d8:	31 d2                	xor    edx,edx
c00089da:	59                   	pop    ecx
c00089db:	58                   	pop    eax
c00089dc:	31 c0                	xor    eax,eax
c00089de:	eb 09                	jmp    c00089e9 <VgaText::putchar(char)+0x81>
c00089e0:	6b c0 0a             	imul   eax,eax,0xa
c00089e3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089e7:	89 fa                	mov    edx,edi
c00089e9:	46                   	inc    esi
c00089ea:	eb d6                	jmp    c00089c2 <VgaText::putchar(char)+0x5a>
c00089ec:	84 d2                	test   dl,dl
c00089ee:	74 2f                	je     c0008a1f <VgaText::putchar(char)+0xb7>
c00089f0:	50                   	push   eax
c00089f1:	53                   	push   ebx
c00089f2:	e8 29 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089f7:	58                   	pop    eax
c00089f8:	5a                   	pop    edx
c00089f9:	eb 24                	jmp    c0008a1f <VgaText::putchar(char)+0xb7>
c00089fb:	83 f8 4a             	cmp    eax,0x4a
c00089fe:	75 1f                	jne    c0008a1f <VgaText::putchar(char)+0xb7>
c0008a00:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a04:	75 19                	jne    c0008a1f <VgaText::putchar(char)+0xb7>
c0008a06:	83 ec 0c             	sub    esp,0xc
c0008a09:	53                   	push   ebx
c0008a0a:	e8 95 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a0f:	83 c4 0c             	add    esp,0xc
c0008a12:	6a 00                	push   0x0
c0008a14:	6a 00                	push   0x0
c0008a16:	53                   	push   ebx
c0008a17:	e8 26 fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a1c:	83 c4 10             	add    esp,0x10
c0008a1f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a25:	eb 24                	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008a27:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a2a:	83 f8 0e             	cmp    eax,0xe
c0008a2d:	7f 1c                	jg     c0008a4b <VgaText::putchar(char)+0xe3>
c0008a2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a32:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a35:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a39:	eb 10                	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008a3b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a41:	50                   	push   eax
c0008a42:	53                   	push   ebx
c0008a43:	e8 50 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a48:	83 c4 10             	add    esp,0x10
c0008a4b:	5b                   	pop    ebx
c0008a4c:	5e                   	pop    esi
c0008a4d:	5f                   	pop    edi
c0008a4e:	c3                   	ret    
c0008a4f:	90                   	nop

c0008a50 <VgaText::putx(unsigned int)>:
c0008a50:	57                   	push   edi
c0008a51:	b9 11 00 00 00       	mov    ecx,0x11
c0008a56:	56                   	push   esi
c0008a57:	be ae fc 01 c0       	mov    esi,0xc001fcae
c0008a5c:	53                   	push   ebx
c0008a5d:	83 ec 20             	sub    esp,0x20
c0008a60:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a64:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a68:	fc                   	cld    
c0008a69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a6b:	be 08 00 00 00       	mov    esi,0x8
c0008a70:	50                   	push   eax
c0008a71:	50                   	push   eax
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	c1 e8 1c             	shr    eax,0x1c
c0008a77:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a7c:	c1 e3 04             	shl    ebx,0x4
c0008a7f:	50                   	push   eax
c0008a80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a84:	e8 df fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a89:	83 c4 10             	add    esp,0x10
c0008a8c:	4e                   	dec    esi
c0008a8d:	75 e1                	jne    c0008a70 <VgaText::putx(unsigned int)+0x20>
c0008a8f:	83 c4 20             	add    esp,0x20
c0008a92:	5b                   	pop    ebx
c0008a93:	5e                   	pop    esi
c0008a94:	5f                   	pop    edi
c0008a95:	c3                   	ret    

c0008a96 <VgaText::puts(char const*)>:
c0008a96:	53                   	push   ebx
c0008a97:	83 ec 08             	sub    esp,0x8
c0008a9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a9e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa1:	85 c0                	test   eax,eax
c0008aa3:	74 12                	je     c0008ab7 <VgaText::puts(char const*)+0x21>
c0008aa5:	51                   	push   ecx
c0008aa6:	43                   	inc    ebx
c0008aa7:	51                   	push   ecx
c0008aa8:	50                   	push   eax
c0008aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aad:	e8 b6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ab2:	83 c4 10             	add    esp,0x10
c0008ab5:	eb e7                	jmp    c0008a9e <VgaText::puts(char const*)+0x8>
c0008ab7:	83 c4 08             	add    esp,0x8
c0008aba:	5b                   	pop    ebx
c0008abb:	c3                   	ret    

c0008abc <VgaText::write(unsigned long long, void*, int*)>:
c0008abc:	55                   	push   ebp
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	53                   	push   ebx
c0008ac0:	83 ec 0c             	sub    esp,0xc
c0008ac3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008acb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008acf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ad9:	39 eb                	cmp    ebx,ebp
c0008adb:	74 13                	je     c0008af0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008add:	50                   	push   eax
c0008ade:	43                   	inc    ebx
c0008adf:	50                   	push   eax
c0008ae0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ae4:	50                   	push   eax
c0008ae5:	56                   	push   esi
c0008ae6:	e8 7d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008aeb:	83 c4 10             	add    esp,0x10
c0008aee:	eb e9                	jmp    c0008ad9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008afb:	89 38                	mov    DWORD PTR [eax],edi
c0008afd:	83 c4 0c             	add    esp,0xc
c0008b00:	31 c0                	xor    eax,eax
c0008b02:	5b                   	pop    ebx
c0008b03:	5e                   	pop    esi
c0008b04:	5f                   	pop    edi
c0008b05:	5d                   	pop    ebp
c0008b06:	c3                   	ret    
c0008b07:	90                   	nop

c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b08:	55                   	push   ebp
c0008b09:	57                   	push   edi
c0008b0a:	56                   	push   esi
c0008b0b:	53                   	push   ebx
c0008b0c:	83 ec 0c             	sub    esp,0xc
c0008b0f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b18:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b1f:	50                   	push   eax
c0008b20:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b25:	50                   	push   eax
c0008b26:	e8 c3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b2b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b2f:	5a                   	pop    edx
c0008b30:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b33:	59                   	pop    ecx
c0008b34:	0f b6 f8             	movzx  edi,al
c0008b37:	0f b7 db             	movzx  ebx,bx
c0008b3a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b3e:	01 db                	add    ebx,ebx
c0008b40:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b43:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b46:	85 c0                	test   eax,eax
c0008b48:	0f 84 ef 00 00 00    	je     c0008c3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b4e:	83 f8 0d             	cmp    eax,0xd
c0008b51:	75 0c                	jne    c0008b5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b53:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b5a:	e9 d8 00 00 00       	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b5f:	83 f8 0a             	cmp    eax,0xa
c0008b62:	75 44                	jne    c0008ba8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b64:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b6b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b6e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b71:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b74:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b77:	75 0f                	jne    c0008b88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b79:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b7c:	83 ec 0c             	sub    esp,0xc
c0008b7f:	55                   	push   ebp
c0008b80:	e8 7b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b85:	83 c4 10             	add    esp,0x10
c0008b88:	83 ec 0c             	sub    esp,0xc
c0008b8b:	55                   	push   ebp
c0008b8c:	e8 79 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b98:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b9b:	0f b7 db             	movzx  ebx,bx
c0008b9e:	01 db                	add    ebx,ebx
c0008ba0:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008ba3:	e9 8f 00 00 00       	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba8:	83 f8 08             	cmp    eax,0x8
c0008bab:	75 34                	jne    c0008be1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bad:	51                   	push   ecx
c0008bae:	51                   	push   ecx
c0008baf:	6a 01                	push   0x1
c0008bb1:	55                   	push   ebp
c0008bb2:	e8 bf fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bb7:	5b                   	pop    ebx
c0008bb8:	58                   	pop    eax
c0008bb9:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bbc:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bbf:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bc2:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bc5:	6a 20                	push   0x20
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 d5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bcd:	83 c4 20             	add    esp,0x20
c0008bd0:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bd4:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bd7:	0f b7 db             	movzx  ebx,bx
c0008bda:	01 db                	add    ebx,ebx
c0008bdc:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bdf:	eb 56                	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be1:	52                   	push   edx
c0008be2:	52                   	push   edx
c0008be3:	57                   	push   edi
c0008be4:	50                   	push   eax
c0008be5:	e8 a8 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bea:	83 c4 10             	add    esp,0x10
c0008bed:	66 89 03             	mov    WORD PTR [ebx],ax
c0008bf0:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008bf6:	75 1d                	jne    c0008c15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bf8:	83 ec 0c             	sub    esp,0xc
c0008bfb:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bfe:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c01:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c05:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c09:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c0c:	50                   	push   eax
c0008c0d:	e8 72 f0 00 00       	call   c0017c84 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c12:	83 c4 20             	add    esp,0x20
c0008c15:	50                   	push   eax
c0008c16:	83 c3 02             	add    ebx,0x2
c0008c19:	50                   	push   eax
c0008c1a:	6a 00                	push   0x0
c0008c1c:	55                   	push   ebp
c0008c1d:	e8 00 fc ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c29:	75 0c                	jne    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c2b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c2f:	0f b7 db             	movzx  ebx,bx
c0008c32:	01 db                	add    ebx,ebx
c0008c34:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c37:	46                   	inc    esi
c0008c38:	e9 06 ff ff ff       	jmp    c0008b43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	55                   	push   ebp
c0008c41:	e8 c4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c46:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c4d:	83 c4 1c             	add    esp,0x1c
c0008c50:	5b                   	pop    ebx
c0008c51:	5e                   	pop    esi
c0008c52:	5f                   	pop    edi
c0008c53:	5d                   	pop    ebp
c0008c54:	c3                   	ret    
c0008c55:	90                   	nop

c0008c56 <VgaText::VgaText(char const*)>:
c0008c56:	56                   	push   esi
c0008c57:	53                   	push   ebx
c0008c58:	83 ec 04             	sub    esp,0x4
c0008c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5f:	83 ec 08             	sub    esp,0x8
c0008c62:	6a 00                	push   0x0
c0008c64:	50                   	push   eax
c0008c65:	e8 4c 05 00 00       	call   c00091b6 <UnixFile::UnixFile(int)>
c0008c6a:	83 c4 10             	add    esp,0x10
c0008c6d:	ba d4 fc 01 c0       	mov    edx,0xc001fcd4
c0008c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c76:	89 10                	mov    DWORD PTR [eax],edx
c0008c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c87:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cd5:	83 ec 0c             	sub    esp,0xc
c0008cd8:	6a 01                	push   0x1
c0008cda:	e8 26 09 00 00       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0008cdf:	83 c4 10             	add    esp,0x10
c0008ce2:	89 c2                	mov    edx,eax
c0008ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ceb:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf8:	89 c6                	mov    esi,eax
c0008cfa:	e8 d7 f0 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0008cff:	68 05 0c 00 00       	push   0xc05
c0008d04:	56                   	push   esi
c0008d05:	50                   	push   eax
c0008d06:	53                   	push   ebx
c0008d07:	e8 d8 0f 00 00       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d16:	83 ec 04             	sub    esp,0x4
c0008d19:	68 a0 0f 00 00       	push   0xfa0
c0008d1e:	6a 00                	push   0x0
c0008d20:	50                   	push   eax
c0008d21:	e8 ca 77 ff ff       	call   c00004f0 <memset>
c0008d26:	83 c4 10             	add    esp,0x10
c0008d29:	83 ec 04             	sub    esp,0x4
c0008d2c:	6a 00                	push   0x0
c0008d2e:	6a 07                	push   0x7
c0008d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d34:	e8 7b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d39:	83 c4 10             	add    esp,0x10
c0008d3c:	83 ec 04             	sub    esp,0x4
c0008d3f:	6a 00                	push   0x0
c0008d41:	6a 00                	push   0x0
c0008d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d47:	e8 f6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d4c:	83 c4 10             	add    esp,0x10
c0008d4f:	83 ec 0c             	sub    esp,0xc
c0008d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d56:	e8 49 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d62:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6a:	05 82 00 00 00       	add    eax,0x82
c0008d6f:	83 ec 04             	sub    esp,0x4
c0008d72:	68 80 00 00 00       	push   0x80
c0008d77:	6a 00                	push   0x0
c0008d79:	50                   	push   eax
c0008d7a:	e8 71 77 ff ff       	call   c00004f0 <memset>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d86:	05 02 01 00 00       	add    eax,0x102
c0008d8b:	83 ec 04             	sub    esp,0x4
c0008d8e:	68 80 00 00 00       	push   0x80
c0008d93:	6a 00                	push   0x0
c0008d95:	50                   	push   eax
c0008d96:	e8 55 77 ff ff       	call   c00004f0 <memset>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	90                   	nop
c0008d9f:	83 c4 04             	add    esp,0x4
c0008da2:	5b                   	pop    ebx
c0008da3:	5e                   	pop    esi
c0008da4:	c3                   	ret    
c0008da5:	90                   	nop

c0008da6 <VgaText::receiveKey(unsigned char)>:
c0008da6:	55                   	push   ebp
c0008da7:	57                   	push   edi
c0008da8:	56                   	push   esi
c0008da9:	53                   	push   ebx
c0008daa:	83 ec 2c             	sub    esp,0x2c
c0008dad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008db1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008db5:	89 fd                	mov    ebp,edi
c0008db7:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dbd:	0f 84 48 01 00 00    	je     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008dc3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dc9:	83 fd 08             	cmp    ebp,0x8
c0008dcc:	75 6a                	jne    c0008e38 <VgaText::receiveKey(unsigned char)+0x92>
c0008dce:	83 ec 0c             	sub    esp,0xc
c0008dd1:	56                   	push   esi
c0008dd2:	e8 a9 77 ff ff       	call   c0000580 <strlen>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	85 c0                	test   eax,eax
c0008ddc:	0f 84 ef 00 00 00    	je     c0008ed1 <VgaText::receiveKey(unsigned char)+0x12b>
c0008de2:	50                   	push   eax
c0008de3:	50                   	push   eax
c0008de4:	6a 08                	push   0x8
c0008de6:	53                   	push   ebx
c0008de7:	e8 7c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dec:	89 34 24             	mov    DWORD PTR [esp],esi
c0008def:	e8 8c 77 ff ff       	call   c0000580 <strlen>
c0008df4:	83 c4 10             	add    esp,0x10
c0008df7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008dff:	83 fa 1f             	cmp    edx,0x1f
c0008e02:	89 d0                	mov    eax,edx
c0008e04:	7f 1c                	jg     c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e06:	83 e8 08             	sub    eax,0x8
c0008e09:	3c 02                	cmp    al,0x2
c0008e0b:	76 15                	jbe    c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e0d:	83 fa 0d             	cmp    edx,0xd
c0008e10:	74 10                	je     c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e12:	57                   	push   edi
c0008e13:	57                   	push   edi
c0008e14:	68 bf fc 01 c0       	push   0xc001fcbf
c0008e19:	53                   	push   ebx
c0008e1a:	e8 77 fc ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	56                   	push   esi
c0008e26:	e8 55 77 ff ff       	call   c0000580 <strlen>
c0008e2b:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e33:	e9 96 00 00 00       	jmp    c0008ece <VgaText::receiveKey(unsigned char)+0x128>
c0008e38:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e3e:	83 ec 0c             	sub    esp,0xc
c0008e41:	50                   	push   eax
c0008e42:	e8 39 77 ff ff       	call   c0000580 <strlen>
c0008e47:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e4e:	e8 2d 77 ff ff       	call   c0000580 <strlen>
c0008e53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e57:	83 c4 10             	add    esp,0x10
c0008e5a:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e5e:	3d 80 00 00 00       	cmp    eax,0x80
c0008e63:	0f 87 a2 00 00 00    	ja     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008e69:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e6c:	3c 1e                	cmp    al,0x1e
c0008e6e:	77 35                	ja     c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e70:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e73:	3c 01                	cmp    al,0x1
c0008e75:	76 2e                	jbe    c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e77:	83 fd 0d             	cmp    ebp,0xd
c0008e7a:	74 29                	je     c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e7c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e7f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e82:	68 c5 fc 01 c0       	push   0xc001fcc5
c0008e87:	53                   	push   ebx
c0008e88:	e8 7b fc ff ff       	call   c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e8d:	8d 47 40             	lea    eax,[edi+0x40]
c0008e90:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e93:	0f b6 c0             	movzx  eax,al
c0008e96:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e99:	50                   	push   eax
c0008e9a:	53                   	push   ebx
c0008e9b:	e8 f8 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ea0:	83 c4 20             	add    esp,0x20
c0008ea3:	eb 11                	jmp    c0008eb6 <VgaText::receiveKey(unsigned char)+0x110>
c0008ea5:	51                   	push   ecx
c0008ea6:	89 f8                	mov    eax,edi
c0008ea8:	51                   	push   ecx
c0008ea9:	0f be c0             	movsx  eax,al
c0008eac:	50                   	push   eax
c0008ead:	53                   	push   ebx
c0008eae:	e8 b5 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ebb:	89 f8                	mov    eax,edi
c0008ebd:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ec1:	52                   	push   edx
c0008ec2:	52                   	push   edx
c0008ec3:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ec7:	50                   	push   eax
c0008ec8:	56                   	push   esi
c0008ec9:	e8 a2 79 ff ff       	call   c0000870 <strcat>
c0008ece:	83 c4 10             	add    esp,0x10
c0008ed1:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ed8:	75 0f                	jne    c0008ee9 <VgaText::receiveKey(unsigned char)+0x143>
c0008eda:	83 fd 1c             	cmp    ebp,0x1c
c0008edd:	77 2c                	ja     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008edf:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ee4:	0f a3 e8             	bt     eax,ebp
c0008ee7:	73 22                	jae    c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008ee9:	50                   	push   eax
c0008eea:	81 c3 02 01 00 00    	add    ebx,0x102
c0008ef0:	50                   	push   eax
c0008ef1:	56                   	push   esi
c0008ef2:	53                   	push   ebx
c0008ef3:	e8 78 79 ff ff       	call   c0000870 <strcat>
c0008ef8:	83 c4 0c             	add    esp,0xc
c0008efb:	68 80 00 00 00       	push   0x80
c0008f00:	6a 00                	push   0x0
c0008f02:	56                   	push   esi
c0008f03:	e8 e8 75 ff ff       	call   c00004f0 <memset>
c0008f08:	83 c4 10             	add    esp,0x10
c0008f0b:	83 c4 2c             	add    esp,0x2c
c0008f0e:	5b                   	pop    ebx
c0008f0f:	5e                   	pop    esi
c0008f10:	5f                   	pop    edi
c0008f11:	5d                   	pop    ebp
c0008f12:	c3                   	ret    
c0008f13:	90                   	nop

c0008f14 <VgaText::doUpdate()>:
c0008f14:	c3                   	ret    

c0008f15 <newTerminal(char*)>:
c0008f15:	83 ec 28             	sub    esp,0x28
c0008f18:	68 84 01 00 00       	push   0x184
c0008f1d:	e8 a9 eb ff ff       	call   c0007acb <malloc>
c0008f22:	5a                   	pop    edx
c0008f23:	59                   	pop    ecx
c0008f24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f28:	50                   	push   eax
c0008f29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f2d:	e8 24 fd ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0008f32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f36:	83 c4 2c             	add    esp,0x2c
c0008f39:	c3                   	ret    
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::TSS()>:
c0008f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f47:	90                   	nop
c0008f48:	c3                   	ret    
c0008f49:	90                   	nop
c0008f4a:	66 90                	xchg   ax,ax

c0008f4c <TSS::setESP(unsigned long)>:
c0008f4c:	55                   	push   ebp
c0008f4d:	89 e5                	mov    ebp,esp
c0008f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f58:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f5b:	90                   	nop
c0008f5c:	5d                   	pop    ebp
c0008f5d:	c3                   	ret    
c0008f5e:	66 90                	xchg   ax,ax

c0008f60 <TSS::flush()>:
c0008f60:	55                   	push   ebp
c0008f61:	89 e5                	mov    ebp,esp
c0008f63:	83 ec 10             	sub    esp,0x10
c0008f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f6b:	83 c8 03             	or     eax,0x3
c0008f6e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f72:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f76:	66 89 d0             	mov    ax,dx
c0008f79:	0f 00 d8             	ltr    ax
c0008f7c:	90                   	nop
c0008f7d:	c9                   	leave  
c0008f7e:	c3                   	ret    
c0008f7f:	90                   	nop

c0008f80 <TSS::setup(unsigned long, unsigned long)>:
c0008f80:	55                   	push   ebp
c0008f81:	89 e5                	mov    ebp,esp
c0008f83:	83 ec 18             	sub    esp,0x18
c0008f86:	83 ec 0c             	sub    esp,0xc
c0008f89:	6a 68                	push   0x68
c0008f8b:	e8 3b eb ff ff       	call   c0007acb <malloc>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	89 c2                	mov    edx,eax
c0008f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa1:	83 ec 04             	sub    esp,0x4
c0008fa4:	6a 68                	push   0x68
c0008fa6:	6a 00                	push   0x0
c0008fa8:	50                   	push   eax
c0008fa9:	e8 42 75 ff ff       	call   c00004f0 <memset>
c0008fae:	83 c4 10             	add    esp,0x10
c0008fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fd2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009026:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009032:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009045:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009048:	0f 20 da             	mov    edx,cr3
c000904b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000904e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009051:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009057:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	50                   	push   eax
c000905e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009061:	50                   	push   eax
c0009062:	e8 d3 e2 ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0009067:	83 c4 10             	add    esp,0x10
c000906a:	83 ec 08             	sub    esp,0x8
c000906d:	6a 68                	push   0x68
c000906f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009072:	50                   	push   eax
c0009073:	e8 de e2 ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0009078:	83 c4 10             	add    esp,0x10
c000907b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000907f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009082:	83 e0 0f             	and    eax,0xf
c0009085:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009088:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908b:	83 c8 40             	or     eax,0x40
c000908e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009091:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009096:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000909c:	05 78 01 00 00       	add    eax,0x178
c00090a1:	83 ec 04             	sub    esp,0x4
c00090a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090a7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090aa:	50                   	push   eax
c00090ab:	e8 da e2 ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	89 c2                	mov    edx,eax
c00090b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090b8:	89 10                	mov    DWORD PTR [eax],edx
c00090ba:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090c5:	05 78 01 00 00       	add    eax,0x178
c00090ca:	83 ec 0c             	sub    esp,0xc
c00090cd:	50                   	push   eax
c00090ce:	e8 e1 e2 ff ff       	call   c00073b4 <GDT::flush()>
c00090d3:	83 c4 10             	add    esp,0x10
c00090d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090db:	c9                   	leave  
c00090dc:	c3                   	ret    
c00090dd:	90                   	nop

c00090de <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090e9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090ee:	75 08                	jne    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090f6:	eb 38                	jmp    c0009130 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090f8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090fd:	75 17                	jne    c0009116 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009104:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009107:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000910d:	8b 10                	mov    edx,DWORD PTR [eax]
c000910f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009113:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009116:	89 c1                	mov    ecx,eax
c0009118:	83 e1 fd             	and    ecx,0xfffffffd
c000911b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009121:	74 cd                	je     c00090f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009123:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009128:	83 e0 ef             	and    eax,0xffffffef
c000912b:	83 f8 08             	cmp    eax,0x8
c000912e:	76 c0                	jbe    c00090f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009130:	31 c0                	xor    eax,eax
c0009132:	c3                   	ret    
c0009133:	90                   	nop

c0009134 <ReservedFilename::isAtty()>:
c0009134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009138:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000913b:	31 c0                	xor    eax,eax
c000913d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009143:	74 09                	je     c000914e <ReservedFilename::isAtty()+0x1a>
c0009145:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000914b:	0f 94 c0             	sete   al
c000914e:	c3                   	ret    
c000914f:	90                   	nop

c0009150 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009154:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009158:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000915c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000915f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009164:	75 08                	jne    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009166:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000916c:	eb 3d                	jmp    c00091ab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000916e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009173:	75 17                	jne    c000918c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009175:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000917a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000917d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009183:	8b 10                	mov    edx,DWORD PTR [eax]
c0009185:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009189:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000918c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009191:	75 04                	jne    c0009197 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009193:	89 0a                	mov    DWORD PTR [edx],ecx
c0009195:	eb 14                	jmp    c00091ab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009197:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000919c:	74 c8                	je     c0009166 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091a3:	83 e0 ef             	and    eax,0xffffffef
c00091a6:	83 f8 08             	cmp    eax,0x8
c00091a9:	76 bb                	jbe    c0009166 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091ab:	31 c0                	xor    eax,eax
c00091ad:	c3                   	ret    

c00091ae <UnixFile::getFileDescriptor()>:
c00091ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::UnixFile(int)>:
c00091b6:	53                   	push   ebx
c00091b7:	83 ec 28             	sub    esp,0x28
c00091ba:	ba 9c fd 01 c0       	mov    edx,0xc001fd9c
c00091bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091c3:	89 10                	mov    DWORD PTR [eax],edx
c00091c5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091cd:	0f 8f 90 01 00 00    	jg     c0009363 <UnixFile::UnixFile(int)+0x1ad>
c00091d3:	a1 60 1e 02 c0       	mov    eax,ds:0xc0021e60
c00091d8:	8d 50 01             	lea    edx,[eax+0x1]
c00091db:	89 15 60 1e 02 c0    	mov    DWORD PTR ds:0xc0021e60,edx
c00091e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091e5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091ef:	68 98 4f 02 c0       	push   0xc0024f98
c00091f4:	e8 7f 56 01 00       	call   c001e878 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009201:	83 f0 01             	xor    eax,0x1
c0009204:	0f b6 c0             	movzx  eax,al
c0009207:	85 c0                	test   eax,eax
c0009209:	0f 84 55 01 00 00    	je     c0009364 <UnixFile::UnixFile(int)+0x1ae>
c000920f:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c0009216:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000921e:	83 ec 0c             	sub    esp,0xc
c0009221:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009225:	e8 a1 e8 ff ff       	call   c0007acb <malloc>
c000922a:	83 c4 10             	add    esp,0x10
c000922d:	89 c3                	mov    ebx,eax
c000922f:	83 ec 08             	sub    esp,0x8
c0009232:	68 03 ff ff 0f       	push   0xfffff03
c0009237:	53                   	push   ebx
c0009238:	e8 2d 01 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000923d:	83 c4 10             	add    esp,0x10
c0009240:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c0009246:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000924e:	83 ec 0c             	sub    esp,0xc
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 71 e8 ff ff       	call   c0007acb <malloc>
c000925a:	83 c4 10             	add    esp,0x10
c000925d:	89 c3                	mov    ebx,eax
c000925f:	83 ec 08             	sub    esp,0x8
c0009262:	68 01 ff ff 0f       	push   0xfffff01
c0009267:	53                   	push   ebx
c0009268:	e8 fd 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000926d:	83 c4 10             	add    esp,0x10
c0009270:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c0009276:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000927e:	83 ec 0c             	sub    esp,0xc
c0009281:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009285:	e8 41 e8 ff ff       	call   c0007acb <malloc>
c000928a:	83 c4 10             	add    esp,0x10
c000928d:	89 c3                	mov    ebx,eax
c000928f:	83 ec 08             	sub    esp,0x8
c0009292:	68 00 ff ff 0f       	push   0xfffff00
c0009297:	53                   	push   ebx
c0009298:	e8 cd 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000929d:	83 c4 10             	add    esp,0x10
c00092a0:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092a6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092ae:	83 ec 0c             	sub    esp,0xc
c00092b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092b5:	e8 11 e8 ff ff       	call   c0007acb <malloc>
c00092ba:	83 c4 10             	add    esp,0x10
c00092bd:	89 c3                	mov    ebx,eax
c00092bf:	83 ec 08             	sub    esp,0x8
c00092c2:	68 02 ff ff 0f       	push   0xfffff02
c00092c7:	53                   	push   ebx
c00092c8:	e8 9d 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092d6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092de:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092e3:	7f 7f                	jg     c0009364 <UnixFile::UnixFile(int)+0x1ae>
c00092e5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092ed:	83 ec 0c             	sub    esp,0xc
c00092f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092f4:	e8 d2 e7 ff ff       	call   c0007acb <malloc>
c00092f9:	83 c4 10             	add    esp,0x10
c00092fc:	89 c3                	mov    ebx,eax
c00092fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009302:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009307:	83 ec 08             	sub    esp,0x8
c000930a:	50                   	push   eax
c000930b:	53                   	push   ebx
c000930c:	e8 59 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c0009311:	83 c4 10             	add    esp,0x10
c0009314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009318:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c000931f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009327:	83 ec 0c             	sub    esp,0xc
c000932a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932e:	e8 98 e7 ff ff       	call   c0007acb <malloc>
c0009333:	83 c4 10             	add    esp,0x10
c0009336:	89 c3                	mov    ebx,eax
c0009338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000933c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009341:	83 ec 08             	sub    esp,0x8
c0009344:	50                   	push   eax
c0009345:	53                   	push   ebx
c0009346:	e8 1f 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009352:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009359:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000935e:	e9 7b ff ff ff       	jmp    c00092de <UnixFile::UnixFile(int)+0x128>
c0009363:	90                   	nop
c0009364:	83 c4 28             	add    esp,0x28
c0009367:	5b                   	pop    ebx
c0009368:	c3                   	ret    
c0009369:	90                   	nop

c000936a <ReservedFilename::ReservedFilename(int)>:
c000936a:	83 ec 0c             	sub    esp,0xc
c000936d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009371:	83 ec 08             	sub    esp,0x8
c0009374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009378:	50                   	push   eax
c0009379:	e8 38 fe ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000937e:	83 c4 10             	add    esp,0x10
c0009381:	ba b8 fd 01 c0       	mov    edx,0xc001fdb8
c0009386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000938a:	89 10                	mov    DWORD PTR [eax],edx
c000938c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009390:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009394:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009397:	90                   	nop
c0009398:	83 c4 0c             	add    esp,0xc
c000939b:	c3                   	ret    

c000939c <UnixFile::~UnixFile()>:
c000939c:	83 ec 1c             	sub    esp,0x1c
c000939f:	ba 9c fd 01 c0       	mov    edx,0xc001fd9c
c00093a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a8:	89 10                	mov    DWORD PTR [eax],edx
c00093aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093b6:	7f 76                	jg     c000942e <UnixFile::~UnixFile()+0x92>
c00093b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	68 98 4f 02 c0       	push   0xc0024f98
c00093c8:	e8 7f 55 01 00       	call   c001e94c <LinkedList<UnixFile>::getFirstElement()>
c00093cd:	83 c4 10             	add    esp,0x10
c00093d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	68 98 4f 02 c0       	push   0xc0024f98
c00093dc:	e8 73 55 01 00       	call   c001e954 <LinkedList<UnixFile>::removeFirst()>
c00093e1:	83 c4 10             	add    esp,0x10
c00093e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093e8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093ec:	74 43                	je     c0009431 <UnixFile::~UnixFile()+0x95>
c00093ee:	83 ec 08             	sub    esp,0x8
c00093f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093f5:	68 98 4f 02 c0       	push   0xc0024f98
c00093fa:	e8 79 54 01 00       	call   c001e878 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ff:	83 c4 10             	add    esp,0x10
c0009402:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009406:	8d 50 01             	lea    edx,[eax+0x1]
c0009409:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000940d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009412:	0f 94 c0             	sete   al
c0009415:	0f b6 c0             	movzx  eax,al
c0009418:	85 c0                	test   eax,eax
c000941a:	74 a4                	je     c00093c0 <UnixFile::~UnixFile()+0x24>
c000941c:	83 ec 0c             	sub    esp,0xc
c000941f:	68 74 fd 01 c0       	push   0xc001fd74
c0009424:	e8 ac 73 00 00       	call   c00107d5 <KePanic(char const*)>
c0009429:	83 c4 10             	add    esp,0x10
c000942c:	eb 92                	jmp    c00093c0 <UnixFile::~UnixFile()+0x24>
c000942e:	90                   	nop
c000942f:	eb 01                	jmp    c0009432 <UnixFile::~UnixFile()+0x96>
c0009431:	90                   	nop
c0009432:	90                   	nop
c0009433:	83 c4 1c             	add    esp,0x1c
c0009436:	c3                   	ret    
c0009437:	90                   	nop

c0009438 <UnixFile::~UnixFile()>:
c0009438:	83 ec 0c             	sub    esp,0xc
c000943b:	83 ec 0c             	sub    esp,0xc
c000943e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009442:	e8 55 ff ff ff       	call   c000939c <UnixFile::~UnixFile()>
c0009447:	83 c4 10             	add    esp,0x10
c000944a:	83 ec 08             	sub    esp,0x8
c000944d:	6a 0c                	push   0xc
c000944f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009453:	e8 fb 13 00 00       	call   c000a853 <operator delete(void*, unsigned long)>
c0009458:	83 c4 10             	add    esp,0x10
c000945b:	83 c4 0c             	add    esp,0xc
c000945e:	c3                   	ret    
c000945f:	90                   	nop

c0009460 <ReservedFilename::~ReservedFilename()>:
c0009460:	83 ec 0c             	sub    esp,0xc
c0009463:	ba b8 fd 01 c0       	mov    edx,0xc001fdb8
c0009468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946c:	89 10                	mov    DWORD PTR [eax],edx
c000946e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009472:	83 ec 0c             	sub    esp,0xc
c0009475:	50                   	push   eax
c0009476:	e8 21 ff ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000947b:	83 c4 10             	add    esp,0x10
c000947e:	90                   	nop
c000947f:	83 c4 0c             	add    esp,0xc
c0009482:	c3                   	ret    
c0009483:	90                   	nop

c0009484 <ReservedFilename::~ReservedFilename()>:
c0009484:	83 ec 0c             	sub    esp,0xc
c0009487:	83 ec 0c             	sub    esp,0xc
c000948a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948e:	e8 cd ff ff ff       	call   c0009460 <ReservedFilename::~ReservedFilename()>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	83 ec 08             	sub    esp,0x8
c0009499:	6a 0c                	push   0xc
c000949b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949f:	e8 af 13 00 00       	call   c000a853 <operator delete(void*, unsigned long)>
c00094a4:	83 c4 10             	add    esp,0x10
c00094a7:	83 c4 0c             	add    esp,0xc
c00094aa:	c3                   	ret    

c00094ab <getFromFileDescriptor(int)>:
c00094ab:	53                   	push   ebx
c00094ac:	83 ec 08             	sub    esp,0x8
c00094af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094b3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094b9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094bf:	7f 2c                	jg     c00094ed <getFromFileDescriptor(int)+0x42>
c00094c1:	83 ec 0c             	sub    esp,0xc
c00094c4:	68 98 4f 02 c0       	push   0xc0024f98
c00094c9:	e8 7e 54 01 00       	call   c001e94c <LinkedList<UnixFile>::getFirstElement()>
c00094ce:	83 c4 10             	add    esp,0x10
c00094d1:	85 c0                	test   eax,eax
c00094d3:	75 04                	jne    c00094d9 <getFromFileDescriptor(int)+0x2e>
c00094d5:	31 c0                	xor    eax,eax
c00094d7:	eb 6e                	jmp    c0009547 <getFromFileDescriptor(int)+0x9c>
c00094d9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094dc:	74 69                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c00094de:	52                   	push   edx
c00094df:	52                   	push   edx
c00094e0:	50                   	push   eax
c00094e1:	68 98 4f 02 c0       	push   0xc0024f98
c00094e6:	e8 0b 55 01 00       	call   c001e9f6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094eb:	eb e1                	jmp    c00094ce <getFromFileDescriptor(int)+0x23>
c00094ed:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094f3:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094f8:	74 4d                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c00094fa:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009500:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009505:	74 40                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009507:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000950d:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009512:	74 33                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009514:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000951a:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c000951f:	74 26                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009521:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009527:	83 f8 08             	cmp    eax,0x8
c000952a:	77 09                	ja     c0009535 <getFromFileDescriptor(int)+0x8a>
c000952c:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009533:	eb 12                	jmp    c0009547 <getFromFileDescriptor(int)+0x9c>
c0009535:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000953b:	83 fb 08             	cmp    ebx,0x8
c000953e:	77 95                	ja     c00094d5 <getFromFileDescriptor(int)+0x2a>
c0009540:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c0009547:	83 c4 08             	add    esp,0x8
c000954a:	5b                   	pop    ebx
c000954b:	c3                   	ret    

c000954c <__static_initialization_and_destruction_0(int, int)>:
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009554:	75 34                	jne    c000958a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009556:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000955e:	75 2a                	jne    c000958a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009560:	83 ec 0c             	sub    esp,0xc
c0009563:	68 98 4f 02 c0       	push   0xc0024f98
c0009568:	e8 c9 52 01 00       	call   c001e836 <LinkedList<UnixFile>::LinkedList()>
c000956d:	83 c4 10             	add    esp,0x10
c0009570:	83 ec 04             	sub    esp,0x4
c0009573:	68 ec 1d 02 c0       	push   0xc0021dec
c0009578:	68 98 4f 02 c0       	push   0xc0024f98
c000957d:	68 34 e8 01 c0       	push   0xc001e834
c0009582:	e8 7c 12 00 00       	call   c000a803 <__cxa_atexit>
c0009587:	83 c4 10             	add    esp,0x10
c000958a:	90                   	nop
c000958b:	83 c4 0c             	add    esp,0xc
c000958e:	c3                   	ret    

c000958f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000958f:	83 ec 0c             	sub    esp,0xc
c0009592:	83 ec 08             	sub    esp,0x8
c0009595:	68 ff ff 00 00       	push   0xffff
c000959a:	6a 01                	push   0x1
c000959c:	e8 ab ff ff ff       	call   c000954c <__static_initialization_and_destruction_0(int, int)>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	83 c4 0c             	add    esp,0xc
c00095a7:	c3                   	ret    

c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095a8:	53                   	push   ebx
c00095a9:	8b 15 68 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e68
c00095af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095b7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095bd:	89 d8                	mov    eax,ebx
c00095bf:	d1 e8                	shr    eax,1
c00095c1:	01 d0                	add    eax,edx
c00095c3:	80 e3 01             	and    bl,0x1
c00095c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095c8:	75 09                	jne    c00095d3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ca:	83 e2 f0             	and    edx,0xfffffff0
c00095cd:	09 ca                	or     edx,ecx
c00095cf:	88 10                	mov    BYTE PTR [eax],dl
c00095d1:	5b                   	pop    ebx
c00095d2:	c3                   	ret    
c00095d3:	0f b6 c9             	movzx  ecx,cl
c00095d6:	83 e2 0f             	and    edx,0xf
c00095d9:	c1 e1 04             	shl    ecx,0x4
c00095dc:	09 ca                	or     edx,ecx
c00095de:	88 10                	mov    BYTE PTR [eax],dl
c00095e0:	5b                   	pop    ebx
c00095e1:	c3                   	ret    

c00095e2 <Virt::getPageState(unsigned long)>:
c00095e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095e6:	8b 0d 68 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e68
c00095ec:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095f2:	89 d0                	mov    eax,edx
c00095f4:	d1 e8                	shr    eax,1
c00095f6:	80 e2 01             	and    dl,0x1
c00095f9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095fc:	74 03                	je     c0009601 <Virt::getPageState(unsigned long)+0x1f>
c00095fe:	c1 e8 04             	shr    eax,0x4
c0009601:	83 e0 0f             	and    eax,0xf
c0009604:	c3                   	ret    

c0009605 <Virt::allocateKernelVirtualPages(int)>:
c0009605:	55                   	push   ebp
c0009606:	57                   	push   edi
c0009607:	56                   	push   esi
c0009608:	31 f6                	xor    esi,esi
c000960a:	53                   	push   ebx
c000960b:	31 db                	xor    ebx,ebx
c000960d:	83 ec 1c             	sub    esp,0x1c
c0009610:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009615:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009619:	8b 2d 64 1e 02 c0    	mov    ebp,DWORD PTR ds:0xc0021e64
c000961f:	55                   	push   ebp
c0009620:	e8 bd ff ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c0009625:	5a                   	pop    edx
c0009626:	84 c0                	test   al,al
c0009628:	75 3d                	jne    c0009667 <Virt::allocateKernelVirtualPages(int)+0x62>
c000962a:	85 db                	test   ebx,ebx
c000962c:	0f 44 f5             	cmove  esi,ebp
c000962f:	83 c3 01             	add    ebx,0x1
c0009632:	39 fb                	cmp    ebx,edi
c0009634:	74 5e                	je     c0009694 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009636:	83 c5 01             	add    ebp,0x1
c0009639:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000963f:	76 33                	jbe    c0009674 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009641:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009646:	c7 05 64 1e 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021e64,0xc8000
c0009650:	75 2a                	jne    c000967c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009652:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009657:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000965c:	55                   	push   ebp
c000965d:	e8 80 ff ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c0009662:	5a                   	pop    edx
c0009663:	84 c0                	test   al,al
c0009665:	74 c3                	je     c000962a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009667:	83 c5 01             	add    ebp,0x1
c000966a:	31 db                	xor    ebx,ebx
c000966c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009672:	77 cd                	ja     c0009641 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009674:	89 2d 64 1e 02 c0    	mov    DWORD PTR ds:0xc0021e64,ebp
c000967a:	eb a3                	jmp    c000961f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000967c:	83 ec 0c             	sub    esp,0xc
c000967f:	68 cc fd 01 c0       	push   0xc001fdcc
c0009684:	e8 4c 71 00 00       	call   c00107d5 <KePanic(char const*)>
c0009689:	8b 2d 64 1e 02 c0    	mov    ebp,DWORD PTR ds:0xc0021e64
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	eb 8b                	jmp    c000961f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009694:	89 35 64 1e 02 c0    	mov    DWORD PTR ds:0xc0021e64,esi
c000969a:	83 fb 01             	cmp    ebx,0x1
c000969d:	74 63                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000969f:	85 ff                	test   edi,edi
c00096a1:	74 41                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096a3:	89 f0                	mov    eax,esi
c00096a5:	31 db                	xor    ebx,ebx
c00096a7:	8d 6f ff             	lea    ebp,[edi-0x1]
c00096aa:	eb 16                	jmp    c00096c2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00096ac:	6a 01                	push   0x1
c00096ae:	83 c3 01             	add    ebx,0x1
c00096b1:	50                   	push   eax
c00096b2:	e8 f1 fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b7:	39 fb                	cmp    ebx,edi
c00096b9:	58                   	pop    eax
c00096ba:	5a                   	pop    edx
c00096bb:	74 27                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096bd:	a1 64 1e 02 c0       	mov    eax,ds:0xc0021e64
c00096c2:	8d 50 01             	lea    edx,[eax+0x1]
c00096c5:	85 db                	test   ebx,ebx
c00096c7:	89 15 64 1e 02 c0    	mov    DWORD PTR ds:0xc0021e64,edx
c00096cd:	74 22                	je     c00096f1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096cf:	39 dd                	cmp    ebp,ebx
c00096d1:	75 d9                	jne    c00096ac <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096d3:	6a 03                	push   0x3
c00096d5:	83 c3 01             	add    ebx,0x1
c00096d8:	50                   	push   eax
c00096d9:	e8 ca fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096de:	39 fb                	cmp    ebx,edi
c00096e0:	59                   	pop    ecx
c00096e1:	58                   	pop    eax
c00096e2:	75 d9                	jne    c00096bd <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096e4:	83 c4 1c             	add    esp,0x1c
c00096e7:	89 f0                	mov    eax,esi
c00096e9:	5b                   	pop    ebx
c00096ea:	c1 e0 0c             	shl    eax,0xc
c00096ed:	5e                   	pop    esi
c00096ee:	5f                   	pop    edi
c00096ef:	5d                   	pop    ebp
c00096f0:	c3                   	ret    
c00096f1:	6a 02                	push   0x2
c00096f3:	bb 01 00 00 00       	mov    ebx,0x1
c00096f8:	50                   	push   eax
c00096f9:	e8 aa fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fe:	58                   	pop    eax
c00096ff:	5a                   	pop    edx
c0009700:	eb bb                	jmp    c00096bd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009702:	6a 04                	push   0x4
c0009704:	56                   	push   esi
c0009705:	8d 46 01             	lea    eax,[esi+0x1]
c0009708:	a3 64 1e 02 c0       	mov    ds:0xc0021e64,eax
c000970d:	e8 96 fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009712:	89 f0                	mov    eax,esi
c0009714:	59                   	pop    ecx
c0009715:	c1 e0 0c             	shl    eax,0xc
c0009718:	5b                   	pop    ebx
c0009719:	83 c4 1c             	add    esp,0x1c
c000971c:	5b                   	pop    ebx
c000971d:	5e                   	pop    esi
c000971e:	5f                   	pop    edi
c000971f:	5d                   	pop    ebp
c0009720:	c3                   	ret    

c0009721 <Virt::freeSwapfilePage(unsigned long)>:
c0009721:	53                   	push   ebx
c0009722:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009728:	b8 01 00 00 00       	mov    eax,0x1
c000972d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009731:	d3 e0                	shl    eax,cl
c0009733:	89 cb                	mov    ebx,ecx
c0009735:	c1 eb 05             	shr    ebx,0x5
c0009738:	f7 d0                	not    eax
c000973a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000973d:	21 c1                	and    ecx,eax
c000973f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009742:	5b                   	pop    ebx
c0009743:	c3                   	ret    

c0009744 <Virt::swapIDToSector(unsigned long)>:
c0009744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009748:	8b 15 6c 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e6c
c000974e:	8b 0d 74 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e74
c0009754:	0f af c2             	imul   eax,edx
c0009757:	01 c8                	add    eax,ecx
c0009759:	c3                   	ret    

c000975a <Virt::allocateSwapfilePage()>:
c000975a:	55                   	push   ebp
c000975b:	31 d2                	xor    edx,edx
c000975d:	57                   	push   edi
c000975e:	56                   	push   esi
c000975f:	53                   	push   ebx
c0009760:	83 ec 0c             	sub    esp,0xc
c0009763:	8b 1d 70 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021e70
c0009769:	8b 0d 6c 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e6c
c000976f:	89 d8                	mov    eax,ebx
c0009771:	f7 f1                	div    ecx
c0009773:	39 cb                	cmp    ebx,ecx
c0009775:	72 2f                	jb     c00097a6 <Virt::allocateSwapfilePage()+0x4c>
c0009777:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000977d:	8b 16                	mov    edx,DWORD PTR [esi]
c000977f:	f6 c2 01             	test   dl,0x1
c0009782:	74 3e                	je     c00097c2 <Virt::allocateSwapfilePage()+0x68>
c0009784:	31 c9                	xor    ecx,ecx
c0009786:	bf 01 00 00 00       	mov    edi,0x1
c000978b:	eb 12                	jmp    c000979f <Virt::allocateSwapfilePage()+0x45>
c000978d:	89 ca                	mov    edx,ecx
c000978f:	89 fd                	mov    ebp,edi
c0009791:	c1 ea 05             	shr    edx,0x5
c0009794:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009797:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009799:	d3 e5                	shl    ebp,cl
c000979b:	85 ea                	test   edx,ebp
c000979d:	74 2c                	je     c00097cb <Virt::allocateSwapfilePage()+0x71>
c000979f:	83 c1 01             	add    ecx,0x1
c00097a2:	39 c8                	cmp    eax,ecx
c00097a4:	77 e7                	ja     c000978d <Virt::allocateSwapfilePage()+0x33>
c00097a6:	83 ec 0c             	sub    esp,0xc
c00097a9:	68 33 ff 01 c0       	push   0xc001ff33
c00097ae:	e8 22 70 00 00       	call   c00107d5 <KePanic(char const*)>
c00097b3:	83 c4 10             	add    esp,0x10
c00097b6:	31 c9                	xor    ecx,ecx
c00097b8:	83 c4 0c             	add    esp,0xc
c00097bb:	89 c8                	mov    eax,ecx
c00097bd:	5b                   	pop    ebx
c00097be:	5e                   	pop    esi
c00097bf:	5f                   	pop    edi
c00097c0:	5d                   	pop    ebp
c00097c1:	c3                   	ret    
c00097c2:	89 f3                	mov    ebx,esi
c00097c4:	bd 01 00 00 00       	mov    ebp,0x1
c00097c9:	31 c9                	xor    ecx,ecx
c00097cb:	09 ea                	or     edx,ebp
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	89 13                	mov    DWORD PTR [ebx],edx
c00097d1:	83 c4 0c             	add    esp,0xc
c00097d4:	5b                   	pop    ebx
c00097d5:	5e                   	pop    esi
c00097d6:	5f                   	pop    edi
c00097d7:	5d                   	pop    ebp
c00097d8:	c3                   	ret    

c00097d9 <Virt::virtualMemorySetup()>:
c00097d9:	53                   	push   ebx
c00097da:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097df:	6a 0f                	push   0xf
c00097e1:	53                   	push   ebx
c00097e2:	83 c3 01             	add    ebx,0x1
c00097e5:	e8 be fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ea:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f0:	58                   	pop    eax
c00097f1:	5a                   	pop    edx
c00097f2:	75 eb                	jne    c00097df <Virt::virtualMemorySetup()+0x6>
c00097f4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f9:	6a 00                	push   0x0
c00097fb:	53                   	push   ebx
c00097fc:	83 c3 01             	add    ebx,0x1
c00097ff:	e8 a4 fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009804:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000980a:	59                   	pop    ecx
c000980b:	58                   	pop    eax
c000980c:	75 eb                	jne    c00097f9 <Virt::virtualMemorySetup()+0x20>
c000980e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009813:	6a 0f                	push   0xf
c0009815:	53                   	push   ebx
c0009816:	83 c3 01             	add    ebx,0x1
c0009819:	e8 8a fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000981e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009824:	58                   	pop    eax
c0009825:	5a                   	pop    edx
c0009826:	75 eb                	jne    c0009813 <Virt::virtualMemorySetup()+0x3a>
c0009828:	5b                   	pop    ebx
c0009829:	c3                   	ret    

c000982a <Virt::setupPageSwapping(int)>:
c000982a:	53                   	push   ebx
c000982b:	83 ec 0c             	sub    esp,0xc
c000982e:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009837:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000983d:	8b 10                	mov    edx,DWORD PTR [eax]
c000983f:	53                   	push   ebx
c0009840:	68 4a ff 01 c0       	push   0xc001ff4a
c0009845:	50                   	push   eax
c0009846:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009849:	c1 e3 0b             	shl    ebx,0xb
c000984c:	89 1d 70 1e 02 c0    	mov    DWORD PTR ds:0xc0021e70,ebx
c0009852:	c1 eb 08             	shr    ebx,0x8
c0009855:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009858:	c6 05 78 1e 02 c0 43 	mov    BYTE PTR ds:0xc0021e78,0x43
c000985f:	c7 05 6c 1e 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021e6c,0x8
c0009869:	a3 74 1e 02 c0       	mov    ds:0xc0021e74,eax
c000986e:	e8 58 e2 ff ff       	call   c0007acb <malloc>
c0009873:	31 d2                	xor    edx,edx
c0009875:	83 c4 0c             	add    esp,0xc
c0009878:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c000987d:	89 c1                	mov    ecx,eax
c000987f:	a1 70 1e 02 c0       	mov    eax,ds:0xc0021e70
c0009884:	f7 35 6c 1e 02 c0    	div    DWORD PTR ds:0xc0021e6c
c000988a:	c1 e8 05             	shr    eax,0x5
c000988d:	50                   	push   eax
c000988e:	6a 00                	push   0x0
c0009890:	51                   	push   ecx
c0009891:	e8 5a 6c ff ff       	call   c00004f0 <memset>
c0009896:	83 c4 18             	add    esp,0x18
c0009899:	5b                   	pop    ebx
c000989a:	c3                   	ret    
c000989b:	90                   	nop

c000989c <VAS::VAS(VAS*)>:
c000989c:	83 ec 0c             	sub    esp,0xc
c000989f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098b5:	83 ec 0c             	sub    esp,0xc
c00098b8:	68 ec fd 01 c0       	push   0xc001fdec
c00098bd:	e8 13 6f 00 00       	call   c00107d5 <KePanic(char const*)>
c00098c2:	83 c4 10             	add    esp,0x10
c00098c5:	90                   	nop
c00098c6:	83 c4 0c             	add    esp,0xc
c00098c9:	c3                   	ret    

c00098ca <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098ce:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098d3:	89 c2                	mov    edx,eax
c00098d5:	c1 ea 16             	shr    edx,0x16
c00098d8:	c1 e8 0a             	shr    eax,0xa
c00098db:	83 f9 01             	cmp    ecx,0x1
c00098de:	19 c9                	sbb    ecx,ecx
c00098e0:	25 fc 0f 00 00       	and    eax,0xffc
c00098e5:	c1 e2 0c             	shl    edx,0xc
c00098e8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098ee:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098f5:	01 d0                	add    eax,edx
c00098f7:	c3                   	ret    

c00098f8 <VAS::getPageTableEntry(unsigned long)>:
c00098f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098fc:	89 ca                	mov    edx,ecx
c00098fe:	c1 ea 16             	shr    edx,0x16
c0009901:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009907:	c1 e9 0a             	shr    ecx,0xa
c000990a:	c1 e0 0c             	shl    eax,0xc
c000990d:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009913:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009916:	c3                   	ret    

c0009917 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009917:	55                   	push   ebp
c0009918:	57                   	push   edi
c0009919:	bf 01 00 00 00       	mov    edi,0x1
c000991e:	56                   	push   esi
c000991f:	53                   	push   ebx
c0009920:	83 ec 0c             	sub    esp,0xc
c0009923:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009927:	c1 ee 0c             	shr    esi,0xc
c000992a:	eb 3a                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000992c:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009931:	83 ec 08             	sub    esp,0x8
c0009934:	55                   	push   ebp
c0009935:	50                   	push   eax
c0009936:	e8 bd ff ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009940:	f6 c4 04             	test   ah,0x4
c0009943:	75 5a                	jne    c000999f <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009945:	83 fb 04             	cmp    ebx,0x4
c0009948:	74 6b                	je     c00099b5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000994a:	83 fb 02             	cmp    ebx,0x2
c000994d:	74 7f                	je     c00099ce <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 a3 00 00 00    	je     c00099fb <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 87 00 00 00    	je     c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 74 fc ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 b3                	jne    c000992c <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 61 ff 01 c0       	push   0xc001ff61
c0009981:	e8 4f 6e 00 00       	call   c00107d5 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c000998f:	55                   	push   ebp
c0009990:	e8 63 ff ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 00                	mov    eax,DWORD PTR [eax]
c000999a:	f6 c4 04             	test   ah,0x4
c000999d:	74 c2                	je     c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c000999f:	83 ec 0c             	sub    esp,0xc
c00099a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099a7:	50                   	push   eax
c00099a8:	e8 c0 e3 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	83 fb 04             	cmp    ebx,0x4
c00099b3:	75 95                	jne    c000994a <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099b5:	83 e7 01             	and    edi,0x1
c00099b8:	75 46                	jne    c0009a00 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099ba:	c7 44 24 20 10 fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fe10
c00099c2:	83 c4 0c             	add    esp,0xc
c00099c5:	5b                   	pop    ebx
c00099c6:	5e                   	pop    esi
c00099c7:	5f                   	pop    edi
c00099c8:	5d                   	pop    ebp
c00099c9:	e9 07 6e 00 00       	jmp    c00107d5 <KePanic(char const*)>
c00099ce:	83 e7 01             	and    edi,0x1
c00099d1:	75 15                	jne    c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	68 7d ff 01 c0       	push   0xc001ff7d
c00099db:	e8 f5 6d 00 00       	call   c00107d5 <KePanic(char const*)>
c00099e0:	83 c4 10             	add    esp,0x10
c00099e3:	e9 79 ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099e8:	83 ec 08             	sub    esp,0x8
c00099eb:	6a 00                	push   0x0
c00099ed:	56                   	push   esi
c00099ee:	e8 b5 fb ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099f3:	83 c4 10             	add    esp,0x10
c00099f6:	e9 66 ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099fb:	83 e7 01             	and    edi,0x1
c00099fe:	75 16                	jne    c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009a00:	83 ec 08             	sub    esp,0x8
c0009a03:	6a 00                	push   0x0
c0009a05:	56                   	push   esi
c0009a06:	e8 9d fb ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0b:	83 c4 10             	add    esp,0x10
c0009a0e:	83 c4 0c             	add    esp,0xc
c0009a11:	5b                   	pop    ebx
c0009a12:	5e                   	pop    esi
c0009a13:	5f                   	pop    edi
c0009a14:	5d                   	pop    ebp
c0009a15:	c3                   	ret    
c0009a16:	c7 44 24 20 99 ff 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ff99
c0009a1e:	83 c4 0c             	add    esp,0xc
c0009a21:	5b                   	pop    ebx
c0009a22:	5e                   	pop    esi
c0009a23:	5f                   	pop    edi
c0009a24:	5d                   	pop    ebp
c0009a25:	e9 ab 6d 00 00       	jmp    c00107d5 <KePanic(char const*)>

c0009a2a <VAS::freeAllocatedPages(unsigned long)>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a32:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a36:	74 09                	je     c0009a41 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a3c:	e9 d6 fe ff ff       	jmp    c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a41:	c7 44 24 04 34 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fe34
c0009a49:	e9 03 0f 00 00       	jmp    c000a951 <Dbg::kprintf(char const*, ...)>

c0009a4e <VAS::virtualToPhysical(unsigned long)>:
c0009a4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a52:	50                   	push   eax
c0009a53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a57:	52                   	push   edx
c0009a58:	e8 9b fe ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009a5d:	59                   	pop    ecx
c0009a5e:	5a                   	pop    edx
c0009a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a61:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a66:	c3                   	ret    
c0009a67:	90                   	nop

c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a68:	55                   	push   ebp
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a74:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a78:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a7c:	89 c3                	mov    ebx,eax
c0009a7e:	c1 e3 0c             	shl    ebx,0xc
c0009a81:	01 f3                	add    ebx,esi
c0009a83:	85 c0                	test   eax,eax
c0009a85:	7e 1f                	jle    c0009aa6 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c0009a87:	56                   	push   esi
c0009a88:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a8e:	55                   	push   ebp
c0009a8f:	e8 64 fe ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009a94:	5a                   	pop    edx
c0009a95:	59                   	pop    ecx
c0009a96:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009a9c:	21 f9                	and    ecx,edi
c0009a9e:	09 d1                	or     ecx,edx
c0009aa0:	39 f3                	cmp    ebx,esi
c0009aa2:	89 08                	mov    DWORD PTR [eax],ecx
c0009aa4:	75 e1                	jne    c0009a87 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c0009aa6:	5b                   	pop    ebx
c0009aa7:	5e                   	pop    esi
c0009aa8:	5f                   	pop    edi
c0009aa9:	5d                   	pop    ebp
c0009aaa:	c3                   	ret    
c0009aab:	90                   	nop

c0009aac <VAS::VAS()>:
c0009aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ab0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac6:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009acb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009acf:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ade:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009ae5:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009aea:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009aef:	29 c2                	sub    edx,eax
c0009af1:	89 d0                	mov    eax,edx
c0009af3:	05 ff 0f 00 00       	add    eax,0xfff
c0009af8:	c1 e8 0c             	shr    eax,0xc
c0009afb:	89 c2                	mov    edx,eax
c0009afd:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b02:	6a 04                	push   0x4
c0009b04:	6a ff                	push   0xffffffff
c0009b06:	52                   	push   edx
c0009b07:	50                   	push   eax
c0009b08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0c:	e8 57 ff ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b11:	83 c4 14             	add    esp,0x14
c0009b14:	90                   	nop
c0009b15:	c3                   	ret    

c0009b16 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b16:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b21:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b28:	75 01                	jne    c0009b2b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b2a:	c3                   	ret    
c0009b2b:	68 80 00 00 00       	push   0x80
c0009b30:	6a ff                	push   0xffffffff
c0009b32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b36:	50                   	push   eax
c0009b37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b3b:	52                   	push   edx
c0009b3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b40:	51                   	push   ecx
c0009b41:	e8 22 ff ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b46:	83 c4 14             	add    esp,0x14
c0009b49:	c3                   	ret    

c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b4e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b55:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b5d:	83 f8 01             	cmp    eax,0x1
c0009b60:	19 c0                	sbb    eax,eax
c0009b62:	83 ca 03             	or     edx,0x3
c0009b65:	83 e0 fc             	and    eax,0xfffffffc
c0009b68:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b6f:	0f 20 d8             	mov    eax,cr3
c0009b72:	0f 22 d8             	mov    cr3,eax
c0009b75:	c3                   	ret    

c0009b76 <VAS::~VAS()>:
c0009b76:	83 ec 2c             	sub    esp,0x2c
c0009b79:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b81:	fa                   	cli    
c0009b82:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b87:	83 c0 01             	add    eax,0x1
c0009b8a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b8f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b99:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ba3:	6a 01                	push   0x1
c0009ba5:	50                   	push   eax
c0009ba6:	e8 9f ff ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bab:	83 c4 0c             	add    esp,0xc
c0009bae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bb6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bbe:	0f 8f d8 00 00 00    	jg     c0009c9c <VAS::~VAS()+0x126>
c0009bc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bcf:	c1 e2 02             	shl    edx,0x2
c0009bd2:	01 d0                	add    eax,edx
c0009bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bde:	83 e0 01             	and    eax,0x1
c0009be1:	0f 84 ab 00 00 00    	je     c0009c92 <VAS::~VAS()+0x11c>
c0009be7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009bef:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009bf7:	7f 74                	jg     c0009c6d <VAS::~VAS()+0xf7>
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	c1 e0 0a             	shl    eax,0xa
c0009c00:	89 c2                	mov    edx,eax
c0009c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c06:	01 d0                	add    eax,edx
c0009c08:	c1 e0 0c             	shl    eax,0xc
c0009c0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c0f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c19:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c23:	6a 01                	push   0x1
c0009c25:	50                   	push   eax
c0009c26:	e8 9f fc ff ff       	call   c00098ca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c2b:	83 c4 0c             	add    esp,0xc
c0009c2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c36:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c40:	25 01 04 00 00       	and    eax,0x401
c0009c45:	3d 01 04 00 00       	cmp    eax,0x401
c0009c4a:	75 1a                	jne    c0009c66 <VAS::~VAS()+0xf0>
c0009c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c50:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c55:	83 ec 0c             	sub    esp,0xc
c0009c58:	50                   	push   eax
c0009c59:	e8 0f e1 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009c5e:	83 c4 10             	add    esp,0x10
c0009c61:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c66:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c6b:	eb 82                	jmp    c0009bef <VAS::~VAS()+0x79>
c0009c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c71:	25 00 04 00 00       	and    eax,0x400
c0009c76:	74 1a                	je     c0009c92 <VAS::~VAS()+0x11c>
c0009c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c81:	83 ec 0c             	sub    esp,0xc
c0009c84:	50                   	push   eax
c0009c85:	e8 e3 e0 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009c8a:	83 c4 10             	add    esp,0x10
c0009c8d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c92:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009c97:	e9 1a ff ff ff       	jmp    c0009bb6 <VAS::~VAS()+0x40>
c0009c9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ca3:	83 ec 0c             	sub    esp,0xc
c0009ca6:	50                   	push   eax
c0009ca7:	e8 6b fc ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cac:	83 c4 10             	add    esp,0x10
c0009caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cb3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cb6:	83 ec 0c             	sub    esp,0xc
c0009cb9:	50                   	push   eax
c0009cba:	e8 ae e0 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cc7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ccc:	83 e8 01             	sub    eax,0x1
c0009ccf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cd4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cd9:	85 c0                	test   eax,eax
c0009cdb:	75 01                	jne    c0009cde <VAS::~VAS()+0x168>
c0009cdd:	fb                   	sti    
c0009cde:	90                   	nop
c0009cdf:	83 c4 2c             	add    esp,0x2c
c0009ce2:	c3                   	ret    
c0009ce3:	90                   	nop

c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009ce4:	55                   	push   ebp
c0009ce5:	57                   	push   edi
c0009ce6:	56                   	push   esi
c0009ce7:	53                   	push   ebx
c0009ce8:	83 ec 1c             	sub    esp,0x1c
c0009ceb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009cf3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009cf7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009cfd:	77 0b                	ja     c0009d0a <VAS::mapPage(unsigned long, unsigned long, int)+0x26>
c0009cff:	0f 20 d8             	mov    eax,cr3
c0009d02:	0f 20 d8             	mov    eax,cr3
c0009d05:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d08:	75 43                	jne    c0009d4d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009d0a:	89 d8                	mov    eax,ebx
c0009d0c:	09 f8                	or     eax,edi
c0009d0e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d13:	75 53                	jne    c0009d68 <VAS::mapPage(unsigned long, unsigned long, int)+0x84>
c0009d15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d18:	89 de                	mov    esi,ebx
c0009d1a:	c1 ee 16             	shr    esi,0x16
c0009d1d:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d24:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d28:	74 50                	je     c0009d7a <VAS::mapPage(unsigned long, unsigned long, int)+0x96>
c0009d2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d2e:	c1 eb 0a             	shr    ebx,0xa
c0009d31:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d37:	c1 e6 0c             	shl    esi,0xc
c0009d3a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d40:	09 c7                	or     edi,eax
c0009d42:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d45:	83 c4 1c             	add    esp,0x1c
c0009d48:	5b                   	pop    ebx
c0009d49:	5e                   	pop    esi
c0009d4a:	5f                   	pop    edi
c0009d4b:	5d                   	pop    ebp
c0009d4c:	c3                   	ret    
c0009d4d:	83 ec 0c             	sub    esp,0xc
c0009d50:	68 58 fe 01 c0       	push   0xc001fe58
c0009d55:	e8 f7 0b 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0009d5a:	89 d8                	mov    eax,ebx
c0009d5c:	83 c4 10             	add    esp,0x10
c0009d5f:	09 f8                	or     eax,edi
c0009d61:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d66:	74 ad                	je     c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d68:	83 ec 0c             	sub    esp,0xc
c0009d6b:	68 c0 fe 01 c0       	push   0xc001fec0
c0009d70:	e8 60 6a 00 00       	call   c00107d5 <KePanic(char const*)>
c0009d75:	83 c4 10             	add    esp,0x10
c0009d78:	eb 9b                	jmp    c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d7e:	e8 53 e0 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009d83:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d89:	83 ec 0c             	sub    esp,0xc
c0009d8c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d94:	6a 01                	push   0x1
c0009d96:	e8 6a f8 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0009d9b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009da2:	6a 01                	push   0x1
c0009da4:	50                   	push   eax
c0009da5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009da9:	52                   	push   edx
c0009daa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dae:	51                   	push   ecx
c0009daf:	e8 4a 02 00 00       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009db4:	83 c4 1c             	add    esp,0x1c
c0009db7:	68 00 10 00 00       	push   0x1000
c0009dbc:	6a 00                	push   0x0
c0009dbe:	50                   	push   eax
c0009dbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dc3:	e8 28 67 ff ff       	call   c00004f0 <memset>
c0009dc8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dcc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dcf:	e8 43 fb ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009dd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ddc:	83 c4 10             	add    esp,0x10
c0009ddf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009de2:	0d 07 04 00 00       	or     eax,0x407
c0009de7:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009dea:	e9 3b ff ff ff       	jmp    c0009d2a <VAS::mapPage(unsigned long, unsigned long, int)+0x46>
c0009def:	90                   	nop

c0009df0 <VAS::allocatePages(int, int)>:
c0009df0:	55                   	push   ebp
c0009df1:	57                   	push   edi
c0009df2:	56                   	push   esi
c0009df3:	53                   	push   ebx
c0009df4:	83 ec 1c             	sub    esp,0x1c
c0009df7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009dfc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009e00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e06:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e0c:	83 e0 01             	and    eax,0x1
c0009e0f:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e13:	89 c7                	mov    edi,eax
c0009e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e19:	0f 85 d6 00 00 00    	jne    c0009ef5 <VAS::allocatePages(int, int)+0x105>
c0009e1f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e26:	85 c0                	test   eax,eax
c0009e28:	0f 84 ab 00 00 00    	je     c0009ed9 <VAS::allocatePages(int, int)+0xe9>
c0009e2e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e32:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e3a:	c1 e6 0c             	shl    esi,0xc
c0009e3d:	01 de                	add    esi,ebx
c0009e3f:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e42:	85 c0                	test   eax,eax
c0009e44:	7e 3a                	jle    c0009e80 <VAS::allocatePages(int, int)+0x90>
c0009e46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e4e:	80 cc 04             	or     ah,0x4
c0009e51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e55:	89 f8                	mov    eax,edi
c0009e57:	0f b6 f8             	movzx  edi,al
c0009e5a:	e8 77 df ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009e5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e63:	52                   	push   edx
c0009e64:	53                   	push   ebx
c0009e65:	50                   	push   eax
c0009e66:	55                   	push   ebp
c0009e67:	e8 78 fe ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e6c:	83 c4 10             	add    esp,0x10
c0009e6f:	85 ff                	test   edi,edi
c0009e71:	74 03                	je     c0009e76 <VAS::allocatePages(int, int)+0x86>
c0009e73:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e76:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e7c:	39 de                	cmp    esi,ebx
c0009e7e:	75 da                	jne    c0009e5a <VAS::allocatePages(int, int)+0x6a>
c0009e80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e84:	85 c9                	test   ecx,ecx
c0009e86:	75 12                	jne    c0009e9a <VAS::allocatePages(int, int)+0xaa>
c0009e88:	0f 20 d8             	mov    eax,cr3
c0009e8b:	0f 22 d8             	mov    cr3,eax
c0009e8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e92:	83 c4 1c             	add    esp,0x1c
c0009e95:	5b                   	pop    ebx
c0009e96:	5e                   	pop    esi
c0009e97:	5f                   	pop    edi
c0009e98:	5d                   	pop    ebp
c0009e99:	c3                   	ret    
c0009e9a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e9e:	c1 ee 0a             	shr    esi,0xa
c0009ea1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ea7:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ead:	c1 eb 0a             	shr    ebx,0xa
c0009eb0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009eb6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ebc:	39 c3                	cmp    ebx,eax
c0009ebe:	77 ce                	ja     c0009e8e <VAS::allocatePages(int, int)+0x9e>
c0009ec0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ec3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ec9:	39 d8                	cmp    eax,ebx
c0009ecb:	73 f3                	jae    c0009ec0 <VAS::allocatePages(int, int)+0xd0>
c0009ecd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ed1:	83 c4 1c             	add    esp,0x1c
c0009ed4:	5b                   	pop    ebx
c0009ed5:	5e                   	pop    esi
c0009ed6:	5f                   	pop    edi
c0009ed7:	5d                   	pop    ebp
c0009ed8:	c3                   	ret    
c0009ed9:	83 ec 0c             	sub    esp,0xc
c0009edc:	68 e4 fe 01 c0       	push   0xc001fee4
c0009ee1:	e8 ef 68 00 00       	call   c00107d5 <KePanic(char const*)>
c0009ee6:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009ee9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009eed:	83 c4 10             	add    esp,0x10
c0009ef0:	e9 39 ff ff ff       	jmp    c0009e2e <VAS::allocatePages(int, int)+0x3e>
c0009ef5:	83 ec 0c             	sub    esp,0xc
c0009ef8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009efc:	50                   	push   eax
c0009efd:	e8 03 f7 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0009f02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f06:	83 c4 10             	add    esp,0x10
c0009f09:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f0e:	0f 87 a4 00 00 00    	ja     c0009fb8 <VAS::allocatePages(int, int)+0x1c8>
c0009f14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f18:	85 c0                	test   eax,eax
c0009f1a:	7e 44                	jle    c0009f60 <VAS::allocatePages(int, int)+0x170>
c0009f1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f20:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f24:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f28:	c1 e0 0c             	shl    eax,0xc
c0009f2b:	01 d8                	add    eax,ebx
c0009f2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f31:	89 f8                	mov    eax,edi
c0009f33:	81 ce 00 04 00 00    	or     esi,0x400
c0009f39:	0f b6 f8             	movzx  edi,al
c0009f3c:	e8 95 de ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009f41:	56                   	push   esi
c0009f42:	53                   	push   ebx
c0009f43:	50                   	push   eax
c0009f44:	55                   	push   ebp
c0009f45:	e8 9a fd ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f4a:	83 c4 10             	add    esp,0x10
c0009f4d:	85 ff                	test   edi,edi
c0009f4f:	74 03                	je     c0009f54 <VAS::allocatePages(int, int)+0x164>
c0009f51:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f54:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f5a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f5e:	75 dc                	jne    c0009f3c <VAS::allocatePages(int, int)+0x14c>
c0009f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f64:	85 c0                	test   eax,eax
c0009f66:	0f 84 1c ff ff ff    	je     c0009e88 <VAS::allocatePages(int, int)+0x98>
c0009f6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f74:	c1 e0 0c             	shl    eax,0xc
c0009f77:	01 d0                	add    eax,edx
c0009f79:	89 d3                	mov    ebx,edx
c0009f7b:	c1 eb 0a             	shr    ebx,0xa
c0009f7e:	c1 e8 0a             	shr    eax,0xa
c0009f81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f87:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f8c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f92:	2d 00 00 40 00       	sub    eax,0x400000
c0009f97:	39 c3                	cmp    ebx,eax
c0009f99:	0f 87 ef fe ff ff    	ja     c0009e8e <VAS::allocatePages(int, int)+0x9e>
c0009f9f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fa2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fa8:	39 d8                	cmp    eax,ebx
c0009faa:	73 f3                	jae    c0009f9f <VAS::allocatePages(int, int)+0x1af>
c0009fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fb0:	83 c4 1c             	add    esp,0x1c
c0009fb3:	5b                   	pop    ebx
c0009fb4:	5e                   	pop    esi
c0009fb5:	5f                   	pop    edi
c0009fb6:	5d                   	pop    ebp
c0009fb7:	c3                   	ret    
c0009fb8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fbd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fc3:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fca:	0f 84 44 ff ff ff    	je     c0009f14 <VAS::allocatePages(int, int)+0x124>
c0009fd0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fd4:	80 cc 01             	or     ah,0x1
c0009fd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fdb:	e9 34 ff ff ff       	jmp    c0009f14 <VAS::allocatePages(int, int)+0x124>

c0009fe0 <VAS::setCPUSpecific(unsigned long)>:
c0009fe0:	83 ec 0c             	sub    esp,0xc
c0009fe3:	6a 05                	push   0x5
c0009fe5:	68 00 00 40 c2       	push   0xc2400000
c0009fea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009fee:	50                   	push   eax
c0009fef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ff3:	52                   	push   edx
c0009ff4:	e8 eb fc ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ff9:	83 c4 1c             	add    esp,0x1c
c0009ffc:	c3                   	ret    
c0009ffd:	90                   	nop

c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009ffe:	55                   	push   ebp
c0009fff:	57                   	push   edi
c000a000:	56                   	push   esi
c000a001:	53                   	push   ebx
c000a002:	83 ec 1c             	sub    esp,0x1c
c000a005:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a00a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a00e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a012:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a016:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a01c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a022:	83 e0 01             	and    eax,0x1
c000a025:	85 c9                	test   ecx,ecx
c000a027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a02b:	7e 3e                	jle    c000a06b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6d>
c000a02d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a031:	89 f3                	mov    ebx,esi
c000a033:	0f b6 f8             	movzx  edi,al
c000a036:	c1 e2 0c             	shl    edx,0xc
c000a039:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000a03c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a040:	55                   	push   ebp
c000a041:	53                   	push   ebx
c000a042:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a046:	29 f0                	sub    eax,esi
c000a048:	01 d8                	add    eax,ebx
c000a04a:	50                   	push   eax
c000a04b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a04f:	52                   	push   edx
c000a050:	e8 8f fc ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a055:	83 c4 10             	add    esp,0x10
c000a058:	85 ff                	test   edi,edi
c000a05a:	74 03                	je     c000a05f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x61>
c000a05c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a05f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a065:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a069:	75 d5                	jne    c000a040 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a06b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a06f:	85 c0                	test   eax,eax
c000a071:	75 10                	jne    c000a083 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x85>
c000a073:	0f 20 d8             	mov    eax,cr3
c000a076:	0f 22 d8             	mov    cr3,eax
c000a079:	83 c4 1c             	add    esp,0x1c
c000a07c:	89 f0                	mov    eax,esi
c000a07e:	5b                   	pop    ebx
c000a07f:	5e                   	pop    esi
c000a080:	5f                   	pop    edi
c000a081:	5d                   	pop    ebp
c000a082:	c3                   	ret    
c000a083:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a087:	89 f3                	mov    ebx,esi
c000a089:	c1 eb 0a             	shr    ebx,0xa
c000a08c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a092:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a098:	c1 e0 0c             	shl    eax,0xc
c000a09b:	01 f0                	add    eax,esi
c000a09d:	c1 e8 0a             	shr    eax,0xa
c000a0a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0a5:	2d 00 00 40 00       	sub    eax,0x400000
c000a0aa:	39 c3                	cmp    ebx,eax
c000a0ac:	77 cb                	ja     c000a079 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x7b>
c000a0ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0b7:	39 d8                	cmp    eax,ebx
c000a0b9:	73 f3                	jae    c000a0ae <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb0>
c000a0bb:	83 c4 1c             	add    esp,0x1c
c000a0be:	89 f0                	mov    eax,esi
c000a0c0:	5b                   	pop    ebx
c000a0c1:	5e                   	pop    esi
c000a0c2:	5f                   	pop    edi
c000a0c3:	5d                   	pop    ebp
c000a0c4:	c3                   	ret    
c000a0c5:	90                   	nop

c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0c6:	55                   	push   ebp
c000a0c7:	57                   	push   edi
c000a0c8:	56                   	push   esi
c000a0c9:	53                   	push   ebx
c000a0ca:	83 ec 1c             	sub    esp,0x1c
c000a0cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a0d5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a0d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0e1:	09 d8                	or     eax,ebx
c000a0e3:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0e8:	75 4b                	jne    c000a135 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a0ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a0ed:	89 de                	mov    esi,ebx
c000a0ef:	c1 ee 16             	shr    esi,0x16
c000a0f2:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c000a0f9:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c000a0fd:	74 48                	je     c000a147 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c000a0ff:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c000a104:	c1 eb 0a             	shr    ebx,0xa
c000a107:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000a10b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a10f:	83 ff 01             	cmp    edi,0x1
c000a112:	19 c0                	sbb    eax,eax
c000a114:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a11a:	c1 e6 0c             	shl    esi,0xc
c000a11d:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a122:	01 f3                	add    ebx,esi
c000a124:	09 ca                	or     edx,ecx
c000a126:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a12d:	83 c4 1c             	add    esp,0x1c
c000a130:	5b                   	pop    ebx
c000a131:	5e                   	pop    esi
c000a132:	5f                   	pop    edi
c000a133:	5d                   	pop    ebp
c000a134:	c3                   	ret    
c000a135:	83 ec 0c             	sub    esp,0xc
c000a138:	68 10 ff 01 c0       	push   0xc001ff10
c000a13d:	e8 93 66 00 00       	call   c00107d5 <KePanic(char const*)>
c000a142:	83 c4 10             	add    esp,0x10
c000a145:	eb a3                	jmp    c000a0ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c000a147:	e8 8a dc ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a14c:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a152:	83 ec 0c             	sub    esp,0xc
c000a155:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a159:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a15d:	6a 01                	push   0x1
c000a15f:	e8 a1 f4 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000a164:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a16b:	6a 01                	push   0x1
c000a16d:	50                   	push   eax
c000a16e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a172:	50                   	push   eax
c000a173:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a177:	51                   	push   ecx
c000a178:	e8 81 fe ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a17d:	83 c4 1c             	add    esp,0x1c
c000a180:	68 00 10 00 00       	push   0x1000
c000a185:	6a 00                	push   0x0
c000a187:	50                   	push   eax
c000a188:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a18c:	e8 5f 63 ff ff       	call   c00004f0 <memset>
c000a191:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a195:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a198:	e8 7a f7 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c000a19d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a1a7:	81 ca 07 04 00 00    	or     edx,0x407
c000a1ad:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a1b0:	e9 4a ff ff ff       	jmp    c000a0ff <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a1b5:	90                   	nop

c000a1b6 <VAS::VAS(bool)>:
c000a1b6:	53                   	push   ebx
c000a1b7:	83 ec 28             	sub    esp,0x28
c000a1ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a1d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1dc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a1e0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a1e3:	e8 ee db ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a1e8:	89 c2                	mov    edx,eax
c000a1ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a1f1:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a1f7:	83 ec 0c             	sub    esp,0xc
c000a1fa:	6a 01                	push   0x1
c000a1fc:	e8 04 f4 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000a201:	83 c4 10             	add    esp,0x10
c000a204:	89 c2                	mov    edx,eax
c000a206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a20d:	83 ec 0c             	sub    esp,0xc
c000a210:	6a 03                	push   0x3
c000a212:	6a 01                	push   0x1
c000a214:	52                   	push   edx
c000a215:	50                   	push   eax
c000a216:	53                   	push   ebx
c000a217:	e8 e2 fd ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a21c:	83 c4 20             	add    esp,0x20
c000a21f:	89 c2                	mov    edx,eax
c000a221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a225:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a228:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a230:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a238:	7f 1d                	jg     c000a257 <VAS::VAS(bool)+0xa1>
c000a23a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a23e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a241:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a245:	c1 e2 02             	shl    edx,0x2
c000a248:	01 d0                	add    eax,edx
c000a24a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a250:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a255:	eb d9                	jmp    c000a230 <VAS::VAS(bool)+0x7a>
c000a257:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a25f:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a267:	7f 7e                	jg     c000a2e7 <VAS::VAS(bool)+0x131>
c000a269:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a26d:	2d 00 02 00 00       	sub    eax,0x200
c000a272:	c1 e0 0c             	shl    eax,0xc
c000a275:	83 c8 05             	or     eax,0x5
c000a278:	89 c2                	mov    edx,eax
c000a27a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a27f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a285:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a28b:	83 e0 10             	and    eax,0x10
c000a28e:	0f b6 c0             	movzx  eax,al
c000a291:	85 c0                	test   eax,eax
c000a293:	74 07                	je     c000a29c <VAS::VAS(bool)+0xe6>
c000a295:	b8 00 01 00 00       	mov    eax,0x100
c000a29a:	eb 05                	jmp    c000a2a1 <VAS::VAS(bool)+0xeb>
c000a29c:	b8 00 00 00 00       	mov    eax,0x0
c000a2a1:	09 d0                	or     eax,edx
c000a2a3:	89 c1                	mov    ecx,eax
c000a2a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2b0:	c1 e2 02             	shl    edx,0x2
c000a2b3:	01 d0                	add    eax,edx
c000a2b5:	89 ca                	mov    edx,ecx
c000a2b7:	89 10                	mov    DWORD PTR [eax],edx
c000a2b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2bd:	2d 40 03 00 00       	sub    eax,0x340
c000a2c2:	83 f8 7f             	cmp    eax,0x7f
c000a2c5:	77 16                	ja     c000a2dd <VAS::VAS(bool)+0x127>
c000a2c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2d2:	c1 e2 02             	shl    edx,0x2
c000a2d5:	01 d0                	add    eax,edx
c000a2d7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a2dd:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a2e2:	e9 78 ff ff ff       	jmp    c000a25f <VAS::VAS(bool)+0xa9>
c000a2e7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2f2:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2f8:	83 e0 10             	and    eax,0x10
c000a2fb:	0f b6 c0             	movzx  eax,al
c000a2fe:	85 c0                	test   eax,eax
c000a300:	74 07                	je     c000a309 <VAS::VAS(bool)+0x153>
c000a302:	b8 03 41 00 00       	mov    eax,0x4103
c000a307:	eb 05                	jmp    c000a30e <VAS::VAS(bool)+0x158>
c000a309:	b8 03 40 00 00       	mov    eax,0x4003
c000a30e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a312:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a315:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a31b:	89 02                	mov    DWORD PTR [edx],eax
c000a31d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a322:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a328:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a32e:	83 ec 08             	sub    esp,0x8
c000a331:	50                   	push   eax
c000a332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a336:	e8 a5 fc ff ff       	call   c0009fe0 <VAS::setCPUSpecific(unsigned long)>
c000a33b:	83 c4 10             	add    esp,0x10
c000a33e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a342:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a345:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a34a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a350:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a356:	83 e0 10             	and    eax,0x10
c000a359:	0f b6 c0             	movzx  eax,al
c000a35c:	85 c0                	test   eax,eax
c000a35e:	74 07                	je     c000a367 <VAS::VAS(bool)+0x1b1>
c000a360:	b8 00 01 00 00       	mov    eax,0x100
c000a365:	eb 05                	jmp    c000a36c <VAS::VAS(bool)+0x1b6>
c000a367:	b8 00 00 00 00       	mov    eax,0x0
c000a36c:	09 c2                	or     edx,eax
c000a36e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a372:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a375:	05 fc 0f 00 00       	add    eax,0xffc
c000a37a:	83 ca 03             	or     edx,0x3
c000a37d:	89 10                	mov    DWORD PTR [eax],edx
c000a37f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a384:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a38a:	83 ec 0c             	sub    esp,0xc
c000a38d:	50                   	push   eax
c000a38e:	e8 b5 1c 00 00       	call   c000c048 <Device::getName()>
c000a393:	83 c4 10             	add    esp,0x10
c000a396:	83 ec 08             	sub    esp,0x8
c000a399:	68 b3 ff 01 c0       	push   0xc001ffb3
c000a39e:	50                   	push   eax
c000a39f:	e8 dc 63 ff ff       	call   c0000780 <strcmp>
c000a3a4:	83 c4 10             	add    esp,0x10
c000a3a7:	85 c0                	test   eax,eax
c000a3a9:	0f 94 c0             	sete   al
c000a3ac:	0f b6 c0             	movzx  eax,al
c000a3af:	85 c0                	test   eax,eax
c000a3b1:	0f 84 8b 00 00 00    	je     c000a442 <VAS::VAS(bool)+0x28c>
c000a3b7:	fa                   	cli    
c000a3b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3bd:	83 c0 01             	add    eax,0x1
c000a3c0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3c5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3d0:	05 7c 09 00 00       	add    eax,0x97c
c000a3d5:	83 ec 0c             	sub    esp,0xc
c000a3d8:	50                   	push   eax
c000a3d9:	e8 e8 d1 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3de:	83 c4 10             	add    esp,0x10
c000a3e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3e6:	89 c3                	mov    ebx,eax
c000a3e8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3f3:	05 7c 09 00 00       	add    eax,0x97c
c000a3f8:	83 ec 0c             	sub    esp,0xc
c000a3fb:	50                   	push   eax
c000a3fc:	e8 c5 d1 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	83 ec 08             	sub    esp,0x8
c000a407:	50                   	push   eax
c000a408:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a40c:	e8 e7 f4 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a411:	83 c4 10             	add    esp,0x10
c000a414:	8b 00                	mov    eax,DWORD PTR [eax]
c000a416:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a41b:	6a 11                	push   0x11
c000a41d:	53                   	push   ebx
c000a41e:	50                   	push   eax
c000a41f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a423:	e8 bc f8 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a430:	83 e8 01             	sub    eax,0x1
c000a433:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a438:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a43d:	85 c0                	test   eax,eax
c000a43f:	75 01                	jne    c000a442 <VAS::VAS(bool)+0x28c>
c000a441:	fb                   	sti    
c000a442:	90                   	nop
c000a443:	83 c4 28             	add    esp,0x28
c000a446:	5b                   	pop    ebx
c000a447:	c3                   	ret    

c000a448 <VAS::evict(unsigned long)>:
c000a448:	55                   	push   ebp
c000a449:	57                   	push   edi
c000a44a:	56                   	push   esi
c000a44b:	53                   	push   ebx
c000a44c:	83 ec 1c             	sub    esp,0x1c
c000a44f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a453:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a45b:	e8 fa f2 ff ff       	call   c000975a <Virt::allocateSwapfilePage()>
c000a460:	89 c7                	mov    edi,eax
c000a462:	a1 6c 1e 02 c0       	mov    eax,ds:0xc0021e6c
c000a467:	85 c0                	test   eax,eax
c000a469:	7e 40                	jle    c000a4ab <VAS::evict(unsigned long)+0x63>
c000a46b:	89 ee                	mov    esi,ebp
c000a46d:	31 db                	xor    ebx,ebx
c000a46f:	83 ec 0c             	sub    esp,0xc
c000a472:	57                   	push   edi
c000a473:	e8 cc f2 ff ff       	call   c0009744 <Virt::swapIDToSector(unsigned long)>
c000a478:	31 d2                	xor    edx,edx
c000a47a:	89 34 24             	mov    DWORD PTR [esp],esi
c000a47d:	81 c6 00 02 00 00    	add    esi,0x200
c000a483:	6a 01                	push   0x1
c000a485:	52                   	push   edx
c000a486:	01 d8                	add    eax,ebx
c000a488:	83 c3 01             	add    ebx,0x1
c000a48b:	50                   	push   eax
c000a48c:	0f be 05 78 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e78
c000a493:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a49a:	50                   	push   eax
c000a49b:	e8 6a 2d 00 00       	call   c000d20a <LogicalDisk::write(unsigned long long, int, void*)>
c000a4a0:	83 c4 20             	add    esp,0x20
c000a4a3:	39 1d 6c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e6c,ebx
c000a4a9:	7f c4                	jg     c000a46f <VAS::evict(unsigned long)+0x27>
c000a4ab:	c1 e7 0b             	shl    edi,0xb
c000a4ae:	83 ec 08             	sub    esp,0x8
c000a4b1:	55                   	push   ebp
c000a4b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4b6:	50                   	push   eax
c000a4b7:	e8 3c f4 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a4bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4be:	89 d1                	mov    ecx,edx
c000a4c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a4c6:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a4cc:	09 cf                	or     edi,ecx
c000a4ce:	89 38                	mov    DWORD PTR [eax],edi
c000a4d0:	89 14 24             	mov    DWORD PTR [esp],edx
c000a4d3:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a4d9:	83 c1 01             	add    ecx,0x1
c000a4dc:	89 0d a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,ecx
c000a4e2:	e8 86 d8 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c000a4e7:	0f 20 d8             	mov    eax,cr3
c000a4ea:	0f 22 d8             	mov    cr3,eax
c000a4ed:	c7 44 24 40 c1 ff 01 c0 	mov    DWORD PTR [esp+0x40],0xc001ffc1
c000a4f5:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a4fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a4fe:	8d 50 01             	lea    edx,[eax+0x1]
c000a501:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a507:	83 c4 2c             	add    esp,0x2c
c000a50a:	5b                   	pop    ebx
c000a50b:	5e                   	pop    esi
c000a50c:	5f                   	pop    edi
c000a50d:	5d                   	pop    ebp
c000a50e:	e9 3e 04 00 00       	jmp    c000a951 <Dbg::kprintf(char const*, ...)>
c000a513:	90                   	nop

c000a514 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a514:	55                   	push   ebp
c000a515:	57                   	push   edi
c000a516:	56                   	push   esi
c000a517:	53                   	push   ebx
c000a518:	83 ec 24             	sub    esp,0x24
c000a51b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a51f:	53                   	push   ebx
c000a520:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a526:	68 d2 ff 01 c0       	push   0xc001ffd2
c000a52b:	e8 21 04 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a530:	58                   	pop    eax
c000a531:	5a                   	pop    edx
c000a532:	53                   	push   ebx
c000a533:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a537:	51                   	push   ecx
c000a538:	e8 bb f3 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a53d:	83 c4 10             	add    esp,0x10
c000a540:	85 c0                	test   eax,eax
c000a542:	89 c6                	mov    esi,eax
c000a544:	0f 95 c0             	setne  al
c000a547:	85 db                	test   ebx,ebx
c000a549:	0f 95 c2             	setne  dl
c000a54c:	21 d0                	and    eax,edx
c000a54e:	a8 01                	test   al,0x1
c000a550:	89 c5                	mov    ebp,eax
c000a552:	75 0a                	jne    c000a55e <VAS::tryLoadBackOffDisk(unsigned long)+0x4a>
c000a554:	83 c4 1c             	add    esp,0x1c
c000a557:	89 e8                	mov    eax,ebp
c000a559:	5b                   	pop    ebx
c000a55a:	5e                   	pop    esi
c000a55b:	5f                   	pop    edi
c000a55c:	5d                   	pop    ebp
c000a55d:	c3                   	ret    
c000a55e:	8b 06                	mov    eax,DWORD PTR [esi]
c000a560:	a8 01                	test   al,0x1
c000a562:	74 0c                	je     c000a570 <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c000a564:	83 c4 1c             	add    esp,0x1c
c000a567:	31 ed                	xor    ebp,ebp
c000a569:	5b                   	pop    ebx
c000a56a:	89 e8                	mov    eax,ebp
c000a56c:	5e                   	pop    esi
c000a56d:	5f                   	pop    edi
c000a56e:	5d                   	pop    ebp
c000a56f:	c3                   	ret    
c000a570:	c1 e8 0b             	shr    eax,0xb
c000a573:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a577:	e8 5a d8 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a57c:	8b 16                	mov    edx,DWORD PTR [esi]
c000a57e:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a584:	09 c2                	or     edx,eax
c000a586:	81 ca 01 08 00 00    	or     edx,0x801
c000a58c:	89 16                	mov    DWORD PTR [esi],edx
c000a58e:	a1 6c 1e 02 c0       	mov    eax,ds:0xc0021e6c
c000a593:	85 c0                	test   eax,eax
c000a595:	7e 44                	jle    c000a5db <VAS::tryLoadBackOffDisk(unsigned long)+0xc7>
c000a597:	89 df                	mov    edi,ebx
c000a599:	31 f6                	xor    esi,esi
c000a59b:	83 ec 0c             	sub    esp,0xc
c000a59e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a5a2:	51                   	push   ecx
c000a5a3:	e8 9c f1 ff ff       	call   c0009744 <Virt::swapIDToSector(unsigned long)>
c000a5a8:	31 d2                	xor    edx,edx
c000a5aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5ad:	81 c7 00 02 00 00    	add    edi,0x200
c000a5b3:	6a 01                	push   0x1
c000a5b5:	52                   	push   edx
c000a5b6:	01 f0                	add    eax,esi
c000a5b8:	83 c6 01             	add    esi,0x1
c000a5bb:	50                   	push   eax
c000a5bc:	0f be 05 78 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e78
c000a5c3:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a5ca:	50                   	push   eax
c000a5cb:	e8 ce 2b 00 00       	call   c000d19e <LogicalDisk::read(unsigned long long, int, void*)>
c000a5d0:	83 c4 20             	add    esp,0x20
c000a5d3:	39 35 6c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e6c,esi
c000a5d9:	7f c0                	jg     c000a59b <VAS::tryLoadBackOffDisk(unsigned long)+0x87>
c000a5db:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a5e0:	83 ec 04             	sub    esp,0x4
c000a5e3:	83 e8 01             	sub    eax,0x1
c000a5e6:	50                   	push   eax
c000a5e7:	53                   	push   ebx
c000a5e8:	68 e5 ff 01 c0       	push   0xc001ffe5
c000a5ed:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a5f2:	e8 5a 03 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a5f7:	58                   	pop    eax
c000a5f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5fc:	52                   	push   edx
c000a5fd:	e8 1f f1 ff ff       	call   c0009721 <Virt::freeSwapfilePage(unsigned long)>
c000a602:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a607:	83 c4 10             	add    esp,0x10
c000a60a:	83 e8 01             	sub    eax,0x1
c000a60d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a612:	85 c0                	test   eax,eax
c000a614:	75 01                	jne    c000a617 <VAS::tryLoadBackOffDisk(unsigned long)+0x103>
c000a616:	fb                   	sti    
c000a617:	0f 20 d8             	mov    eax,cr3
c000a61a:	0f 22 d8             	mov    cr3,eax
c000a61d:	e9 32 ff ff ff       	jmp    c000a554 <VAS::tryLoadBackOffDisk(unsigned long)+0x40>

c000a622 <VAS::scanForEviction()>:
c000a622:	57                   	push   edi
c000a623:	31 ff                	xor    edi,edi
c000a625:	56                   	push   esi
c000a626:	53                   	push   ebx
c000a627:	83 ec 10             	sub    esp,0x10
c000a62a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a62e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a631:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a637:	75 0e                	jne    c000a647 <VAS::scanForEviction()+0x25>
c000a639:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a63c:	89 da                	mov    edx,ebx
c000a63e:	c1 ea 16             	shr    edx,0x16
c000a641:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a645:	74 50                	je     c000a697 <VAS::scanForEviction()+0x75>
c000a647:	53                   	push   ebx
c000a648:	56                   	push   esi
c000a649:	e8 aa f2 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a64e:	5a                   	pop    edx
c000a64f:	59                   	pop    ecx
c000a650:	8b 10                	mov    edx,DWORD PTR [eax]
c000a652:	89 d1                	mov    ecx,edx
c000a654:	81 e1 01 08 00 00    	and    ecx,0x801
c000a65a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a660:	74 40                	je     c000a6a2 <VAS::scanForEviction()+0x80>
c000a662:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a668:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a66e:	76 2d                	jbe    c000a69d <VAS::scanForEviction()+0x7b>
c000a670:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a677:	83 c7 01             	add    edi,0x1
c000a67a:	83 ff 03             	cmp    edi,0x3
c000a67d:	74 32                	je     c000a6b1 <VAS::scanForEviction()+0x8f>
c000a67f:	31 db                	xor    ebx,ebx
c000a681:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a687:	75 be                	jne    c000a647 <VAS::scanForEviction()+0x25>
c000a689:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a68c:	89 da                	mov    edx,ebx
c000a68e:	c1 ea 16             	shr    edx,0x16
c000a691:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a695:	75 b0                	jne    c000a647 <VAS::scanForEviction()+0x25>
c000a697:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a69d:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a6a0:	eb 8f                	jmp    c000a631 <VAS::scanForEviction()+0xf>
c000a6a2:	f6 c2 20             	test   dl,0x20
c000a6a5:	74 13                	je     c000a6ba <VAS::scanForEviction()+0x98>
c000a6a7:	83 e2 df             	and    edx,0xffffffdf
c000a6aa:	89 10                	mov    DWORD PTR [eax],edx
c000a6ac:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6af:	eb b1                	jmp    c000a662 <VAS::scanForEviction()+0x40>
c000a6b1:	83 c4 10             	add    esp,0x10
c000a6b4:	31 c0                	xor    eax,eax
c000a6b6:	5b                   	pop    ebx
c000a6b7:	5e                   	pop    esi
c000a6b8:	5f                   	pop    edi
c000a6b9:	c3                   	ret    
c000a6ba:	89 d0                	mov    eax,edx
c000a6bc:	83 ec 08             	sub    esp,0x8
c000a6bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6c8:	53                   	push   ebx
c000a6c9:	68 fa ff 01 c0       	push   0xc001fffa
c000a6ce:	e8 7e 02 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a6d3:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a6d6:	58                   	pop    eax
c000a6d7:	5a                   	pop    edx
c000a6d8:	51                   	push   ecx
c000a6d9:	56                   	push   esi
c000a6da:	e8 69 fd ff ff       	call   c000a448 <VAS::evict(unsigned long)>
c000a6df:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6e2:	5b                   	pop    ebx
c000a6e3:	5f                   	pop    edi
c000a6e4:	50                   	push   eax
c000a6e5:	68 0e 00 02 c0       	push   0xc002000e
c000a6ea:	e8 62 02 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a6ef:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6f2:	83 c4 10             	add    esp,0x10
c000a6f5:	05 00 10 00 00       	add    eax,0x1000
c000a6fa:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a701:	83 c4 10             	add    esp,0x10
c000a704:	5b                   	pop    ebx
c000a705:	5e                   	pop    esi
c000a706:	5f                   	pop    edi
c000a707:	c3                   	ret    

c000a708 <mapVASFirstTime>:
c000a708:	55                   	push   ebp
c000a709:	57                   	push   edi
c000a70a:	56                   	push   esi
c000a70b:	53                   	push   ebx
c000a70c:	83 ec 0c             	sub    esp,0xc
c000a70f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a714:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a717:	83 fa 01             	cmp    edx,0x1
c000a71a:	0f 84 cb 00 00 00    	je     c000a7eb <mapVASFirstTime+0xe3>
c000a720:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a723:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a728:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a72d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a730:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a736:	c1 e5 15             	shl    ebp,0x15
c000a739:	29 eb                	sub    ebx,ebp
c000a73b:	29 ef                	sub    edi,ebp
c000a73d:	e8 94 d6 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	68 03 04 00 00       	push   0x403
c000a74a:	6a 01                	push   0x1
c000a74c:	53                   	push   ebx
c000a74d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a753:	50                   	push   eax
c000a754:	56                   	push   esi
c000a755:	e8 a4 f8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75a:	83 c4 20             	add    esp,0x20
c000a75d:	39 fb                	cmp    ebx,edi
c000a75f:	75 dc                	jne    c000a73d <mapVASFirstTime+0x35>
c000a761:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a766:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a76b:	29 eb                	sub    ebx,ebp
c000a76d:	29 ef                	sub    edi,ebp
c000a76f:	e8 62 d6 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a774:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a778:	83 fa 01             	cmp    edx,0x1
c000a77b:	19 d2                	sbb    edx,edx
c000a77d:	83 ec 0c             	sub    esp,0xc
c000a780:	83 e2 04             	and    edx,0x4
c000a783:	81 c2 03 04 00 00    	add    edx,0x403
c000a789:	52                   	push   edx
c000a78a:	6a 01                	push   0x1
c000a78c:	53                   	push   ebx
c000a78d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a793:	50                   	push   eax
c000a794:	56                   	push   esi
c000a795:	e8 64 f8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a79a:	83 c4 20             	add    esp,0x20
c000a79d:	39 df                	cmp    edi,ebx
c000a79f:	75 ce                	jne    c000a76f <mapVASFirstTime+0x67>
c000a7a1:	83 ec 0c             	sub    esp,0xc
c000a7a4:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a7a9:	6a 04                	push   0x4
c000a7ab:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a7b1:	6a ff                	push   0xffffffff
c000a7b3:	c1 eb 0c             	shr    ebx,0xc
c000a7b6:	53                   	push   ebx
c000a7b7:	68 00 30 02 c0       	push   0xc0023000
c000a7bc:	56                   	push   esi
c000a7bd:	e8 a6 f2 ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7c2:	83 c4 14             	add    esp,0x14
c000a7c5:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a7ca:	6a 04                	push   0x4
c000a7cc:	6a ff                	push   0xffffffff
c000a7ce:	53                   	push   ebx
c000a7cf:	68 00 30 02 c0       	push   0xc0023000
c000a7d4:	50                   	push   eax
c000a7d5:	e8 8e f2 ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7da:	0f 20 d8             	mov    eax,cr3
c000a7dd:	0f 22 d8             	mov    cr3,eax
c000a7e0:	83 c4 20             	add    esp,0x20
c000a7e3:	83 c4 0c             	add    esp,0xc
c000a7e6:	5b                   	pop    ebx
c000a7e7:	5e                   	pop    esi
c000a7e8:	5f                   	pop    edi
c000a7e9:	5d                   	pop    ebp
c000a7ea:	c3                   	ret    
c000a7eb:	83 ec 0c             	sub    esp,0xc
c000a7ee:	68 21 00 02 c0       	push   0xc0020021
c000a7f3:	e8 59 01 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a7f8:	83 c4 10             	add    esp,0x10
c000a7fb:	83 c4 0c             	add    esp,0xc
c000a7fe:	5b                   	pop    ebx
c000a7ff:	5e                   	pop    esi
c000a800:	5f                   	pop    edi
c000a801:	5d                   	pop    ebp
c000a802:	c3                   	ret    

c000a803 <__cxa_atexit>:
c000a803:	31 c0                	xor    eax,eax
c000a805:	c3                   	ret    

c000a806 <__cxa_finalize>:
c000a806:	c3                   	ret    

c000a807 <__stack_chk_fail>:
c000a807:	55                   	push   ebp
c000a808:	89 e5                	mov    ebp,esp
c000a80a:	83 ec 10             	sub    esp,0x10
c000a80d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a810:	68 3a 00 02 c0       	push   0xc002003a
c000a815:	e8 37 01 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a81a:	58                   	pop    eax
c000a81b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a81e:	5a                   	pop    edx
c000a81f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a822:	68 3a 00 02 c0       	push   0xc002003a
c000a827:	e8 25 01 00 00       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000a82c:	c7 04 24 42 00 02 c0 	mov    DWORD PTR [esp],0xc0020042
c000a833:	e8 9d 5f 00 00       	call   c00107d5 <KePanic(char const*)>
c000a838:	83 c4 10             	add    esp,0x10
c000a83b:	c9                   	leave  
c000a83c:	c3                   	ret    

c000a83d <__cxa_pure_virtual>:
c000a83d:	83 ec 18             	sub    esp,0x18
c000a840:	68 5a 00 02 c0       	push   0xc002005a
c000a845:	e8 8b 5f 00 00       	call   c00107d5 <KePanic(char const*)>
c000a84a:	83 c4 1c             	add    esp,0x1c
c000a84d:	c3                   	ret    

c000a84e <operator new[](unsigned long)>:
c000a84e:	e9 78 d2 ff ff       	jmp    c0007acb <malloc>

c000a853 <operator delete(void*, unsigned long)>:
c000a853:	e9 93 d2 ff ff       	jmp    c0007aeb <rfree>

c000a858 <operator delete[](void*)>:
c000a858:	e9 8e d2 ff ff       	jmp    c0007aeb <rfree>

c000a85d <operator delete[](void*, unsigned long)>:
c000a85d:	e9 89 d2 ff ff       	jmp    c0007aeb <rfree>

c000a862 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a862:	55                   	push   ebp
c000a863:	57                   	push   edi
c000a864:	56                   	push   esi
c000a865:	53                   	push   ebx
c000a866:	83 ec 20             	sub    esp,0x20
c000a869:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a86d:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a875:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a879:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a881:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a885:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a88d:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a895:	89 f7                	mov    edi,esi
c000a897:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a89c:	89 eb                	mov    ebx,ebp
c000a89e:	eb 02                	jmp    c000a8a2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a8a0:	89 c7                	mov    edi,eax
c000a8a2:	31 d2                	xor    edx,edx
c000a8a4:	89 f8                	mov    eax,edi
c000a8a6:	f7 f1                	div    ecx
c000a8a8:	83 c3 01             	add    ebx,0x1
c000a8ab:	39 cf                	cmp    edi,ecx
c000a8ad:	73 f1                	jae    c000a8a0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a8af:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a8b2:	eb 02                	jmp    c000a8b6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a8b4:	89 c6                	mov    esi,eax
c000a8b6:	31 d2                	xor    edx,edx
c000a8b8:	89 f0                	mov    eax,esi
c000a8ba:	f7 f1                	div    ecx
c000a8bc:	83 eb 01             	sub    ebx,0x1
c000a8bf:	39 ce                	cmp    esi,ecx
c000a8c1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8c5:	88 13                	mov    BYTE PTR [ebx],dl
c000a8c7:	73 eb                	jae    c000a8b4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a8c9:	83 c4 20             	add    esp,0x20
c000a8cc:	89 e8                	mov    eax,ebp
c000a8ce:	5b                   	pop    ebx
c000a8cf:	5e                   	pop    esi
c000a8d0:	5f                   	pop    edi
c000a8d1:	5d                   	pop    ebp
c000a8d2:	c3                   	ret    

c000a8d3 <Dbg::logc(char)>:
c000a8d3:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a8da:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8de:	75 12                	jne    c000a8f2 <Dbg::logc(char)+0x1f>
c000a8e0:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8e5:	ec                   	in     al,dx
c000a8e6:	a8 20                	test   al,0x20
c000a8e8:	74 fb                	je     c000a8e5 <Dbg::logc(char)+0x12>
c000a8ea:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8ef:	88 c8                	mov    al,cl
c000a8f1:	ee                   	out    dx,al
c000a8f2:	c3                   	ret    

c000a8f3 <Dbg::logs(char*)>:
c000a8f3:	53                   	push   ebx
c000a8f4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8f8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8fb:	85 c0                	test   eax,eax
c000a8fd:	74 11                	je     c000a910 <Dbg::logs(char*)+0x1d>
c000a8ff:	50                   	push   eax
c000a900:	83 c3 01             	add    ebx,0x1
c000a903:	e8 cb ff ff ff       	call   c000a8d3 <Dbg::logc(char)>
c000a908:	58                   	pop    eax
c000a909:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a90c:	85 c0                	test   eax,eax
c000a90e:	75 ef                	jne    c000a8ff <Dbg::logs(char*)+0xc>
c000a910:	5b                   	pop    ebx
c000a911:	c3                   	ret    

c000a912 <Dbg::logWriteInt(unsigned int)>:
c000a912:	83 ec 10             	sub    esp,0x10
c000a915:	6a 0a                	push   0xa
c000a917:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a91b:	50                   	push   eax
c000a91c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a920:	50                   	push   eax
c000a921:	e8 3c ff ff ff       	call   c000a862 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a926:	50                   	push   eax
c000a927:	e8 c7 ff ff ff       	call   c000a8f3 <Dbg::logs(char*)>
c000a92c:	83 c4 20             	add    esp,0x20
c000a92f:	c3                   	ret    

c000a930 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a930:	83 ec 10             	sub    esp,0x10
c000a933:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a937:	50                   	push   eax
c000a938:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a93c:	50                   	push   eax
c000a93d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a941:	52                   	push   edx
c000a942:	e8 1b ff ff ff       	call   c000a862 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a947:	50                   	push   eax
c000a948:	e8 a6 ff ff ff       	call   c000a8f3 <Dbg::logs(char*)>
c000a94d:	83 c4 20             	add    esp,0x20
c000a950:	c3                   	ret    

c000a951 <Dbg::kprintf(char const*, ...)>:
c000a951:	55                   	push   ebp
c000a952:	57                   	push   edi
c000a953:	56                   	push   esi
c000a954:	53                   	push   ebx
c000a955:	83 ec 0c             	sub    esp,0xc
c000a958:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a95f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a963:	74 08                	je     c000a96d <Dbg::kprintf(char const*, ...)+0x1c>
c000a965:	83 c4 0c             	add    esp,0xc
c000a968:	5b                   	pop    ebx
c000a969:	5e                   	pop    esi
c000a96a:	5f                   	pop    edi
c000a96b:	5d                   	pop    ebp
c000a96c:	c3                   	ret    
c000a96d:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a971:	31 ff                	xor    edi,edi
c000a973:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a977:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 e7                	je     c000a965 <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	75 47                	jne    c000a9d0 <Dbg::kprintf(char const*, ...)+0x7f>
c000a989:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a98c:	83 c7 02             	add    edi,0x2
c000a98f:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a992:	83 e8 25             	sub    eax,0x25
c000a995:	0f b6 c0             	movzx  eax,al
c000a998:	83 f8 53             	cmp    eax,0x53
c000a99b:	0f 87 ce 00 00 00    	ja     c000aa6f <Dbg::kprintf(char const*, ...)+0x11e>
c000a9a1:	ff 24 85 70 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff90]
c000a9a8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9ac:	89 c8                	mov    eax,ecx
c000a9ae:	83 c1 04             	add    ecx,0x4
c000a9b1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9b5:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9b7:	55                   	push   ebp
c000a9b8:	e8 55 ff ff ff       	call   c000a912 <Dbg::logWriteInt(unsigned int)>
c000a9bd:	58                   	pop    eax
c000a9be:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9c1:	85 c0                	test   eax,eax
c000a9c3:	74 a0                	je     c000a965 <Dbg::kprintf(char const*, ...)+0x14>
c000a9c5:	8d 77 01             	lea    esi,[edi+0x1]
c000a9c8:	83 f8 25             	cmp    eax,0x25
c000a9cb:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9ce:	74 b9                	je     c000a989 <Dbg::kprintf(char const*, ...)+0x38>
c000a9d0:	50                   	push   eax
c000a9d1:	89 f7                	mov    edi,esi
c000a9d3:	e8 fb fe ff ff       	call   c000a8d3 <Dbg::logc(char)>
c000a9d8:	89 ee                	mov    esi,ebp
c000a9da:	58                   	pop    eax
c000a9db:	eb e1                	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000a9dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e1:	89 c8                	mov    eax,ecx
c000a9e3:	83 c1 04             	add    ecx,0x4
c000a9e6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9ec:	50                   	push   eax
c000a9ed:	e8 01 ff ff ff       	call   c000a8f3 <Dbg::logs(char*)>
c000a9f2:	58                   	pop    eax
c000a9f3:	eb c9                	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9f9:	89 d0                	mov    eax,edx
c000a9fb:	83 c2 04             	add    edx,0x4
c000a9fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa02:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa04:	50                   	push   eax
c000aa05:	e8 08 ff ff ff       	call   c000a912 <Dbg::logWriteInt(unsigned int)>
c000aa0a:	58                   	pop    eax
c000aa0b:	eb b1                	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa11:	89 d0                	mov    eax,edx
c000aa13:	83 c2 04             	add    edx,0x4
c000aa16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa1a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa1d:	50                   	push   eax
c000aa1e:	e8 b0 fe ff ff       	call   c000a8d3 <Dbg::logc(char)>
c000aa23:	58                   	pop    eax
c000aa24:	eb 98                	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000aa26:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa2a:	89 c8                	mov    eax,ecx
c000aa2c:	83 c1 04             	add    ecx,0x4
c000aa2f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa33:	6a 10                	push   0x10
c000aa35:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa37:	51                   	push   ecx
c000aa38:	e8 f3 fe ff ff       	call   c000a930 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa3d:	5d                   	pop    ebp
c000aa3e:	58                   	pop    eax
c000aa3f:	e9 7a ff ff ff       	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000aa44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa48:	89 d0                	mov    eax,edx
c000aa4a:	83 c2 08             	add    edx,0x8
c000aa4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa51:	6a 10                	push   0x10
c000aa53:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa55:	50                   	push   eax
c000aa56:	e8 d5 fe ff ff       	call   c000a930 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa5b:	58                   	pop    eax
c000aa5c:	5a                   	pop    edx
c000aa5d:	e9 5c ff ff ff       	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000aa62:	6a 25                	push   0x25
c000aa64:	e8 6a fe ff ff       	call   c000a8d3 <Dbg::logc(char)>
c000aa69:	5a                   	pop    edx
c000aa6a:	e9 4f ff ff ff       	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000aa6f:	6a 25                	push   0x25
c000aa71:	e8 5d fe ff ff       	call   c000a8d3 <Dbg::logc(char)>
c000aa76:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa7a:	50                   	push   eax
c000aa7b:	e8 53 fe ff ff       	call   c000a8d3 <Dbg::logc(char)>
c000aa80:	5a                   	pop    edx
c000aa81:	59                   	pop    ecx
c000aa82:	e9 37 ff ff ff       	jmp    c000a9be <Dbg::kprintf(char const*, ...)+0x6d>
c000aa87:	90                   	nop

c000aa88 <File::read(unsigned long long, void*, int*)>:
c000aa88:	53                   	push   ebx
c000aa89:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aa8d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aa91:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aa98:	83 f8 19             	cmp    eax,0x19
c000aa9b:	77 35                	ja     c000aad2 <File::read(unsigned long long, void*, int*)+0x4a>
c000aa9d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aaa4:	85 c0                	test   eax,eax
c000aaa6:	74 2a                	je     c000aad2 <File::read(unsigned long long, void*, int*)+0x4a>
c000aaa8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aaae:	85 c0                	test   eax,eax
c000aab0:	74 20                	je     c000aad2 <File::read(unsigned long long, void*, int*)+0x4a>
c000aab2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aab6:	74 21                	je     c000aad9 <File::read(unsigned long long, void*, int*)+0x51>
c000aab8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aaba:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aabe:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aac4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aac8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aacc:	5b                   	pop    ebx
c000aacd:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000aad0:	ff e0                	jmp    eax
c000aad2:	b8 0b 00 00 00       	mov    eax,0xb
c000aad7:	eb 05                	jmp    c000aade <File::read(unsigned long long, void*, int*)+0x56>
c000aad9:	b8 05 00 00 00       	mov    eax,0x5
c000aade:	5b                   	pop    ebx
c000aadf:	c3                   	ret    

c000aae0 <File::write(unsigned long long, void*, int*)>:
c000aae0:	53                   	push   ebx
c000aae1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aae5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aae9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aaf0:	83 f8 19             	cmp    eax,0x19
c000aaf3:	77 35                	ja     c000ab2a <File::write(unsigned long long, void*, int*)+0x4a>
c000aaf5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aafc:	85 c0                	test   eax,eax
c000aafe:	74 2a                	je     c000ab2a <File::write(unsigned long long, void*, int*)+0x4a>
c000ab00:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab06:	85 c0                	test   eax,eax
c000ab08:	74 20                	je     c000ab2a <File::write(unsigned long long, void*, int*)+0x4a>
c000ab0a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab0e:	74 21                	je     c000ab31 <File::write(unsigned long long, void*, int*)+0x51>
c000ab10:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab12:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab16:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab24:	5b                   	pop    ebx
c000ab25:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab28:	ff e0                	jmp    eax
c000ab2a:	b8 0b 00 00 00       	mov    eax,0xb
c000ab2f:	eb 05                	jmp    c000ab36 <File::write(unsigned long long, void*, int*)+0x56>
c000ab31:	b8 05 00 00 00       	mov    eax,0x5
c000ab36:	5b                   	pop    ebx
c000ab37:	c3                   	ret    

c000ab38 <Directory::read(unsigned long long, void*, int*)>:
c000ab38:	53                   	push   ebx
c000ab39:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab3d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab41:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab48:	83 f8 19             	cmp    eax,0x19
c000ab4b:	77 35                	ja     c000ab82 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab4d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab54:	85 c0                	test   eax,eax
c000ab56:	74 2a                	je     c000ab82 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab58:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab5e:	85 c0                	test   eax,eax
c000ab60:	74 20                	je     c000ab82 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab66:	74 21                	je     c000ab89 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ab68:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab6a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab6e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab7c:	5b                   	pop    ebx
c000ab7d:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ab80:	ff e0                	jmp    eax
c000ab82:	b8 0b 00 00 00       	mov    eax,0xb
c000ab87:	eb 05                	jmp    c000ab8e <Directory::read(unsigned long long, void*, int*)+0x56>
c000ab89:	b8 05 00 00 00       	mov    eax,0x5
c000ab8e:	5b                   	pop    ebx
c000ab8f:	c3                   	ret    

c000ab90 <Directory::write(unsigned long long, void*, int*)>:
c000ab90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab94:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ab9b:	b8 0b 00 00 00       	mov    eax,0xb
c000aba0:	83 fa 19             	cmp    edx,0x19
c000aba3:	77 18                	ja     c000abbd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000aba5:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000abac:	85 d2                	test   edx,edx
c000abae:	74 0d                	je     c000abbd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abb0:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000abb7:	19 c0                	sbb    eax,eax
c000abb9:	83 e0 0a             	and    eax,0xa
c000abbc:	40                   	inc    eax
c000abbd:	c3                   	ret    

c000abbe <File::isAtty()>:
c000abbe:	31 c0                	xor    eax,eax
c000abc0:	c3                   	ret    
c000abc1:	90                   	nop

c000abc2 <Directory::isAtty()>:
c000abc2:	31 c0                	xor    eax,eax
c000abc4:	c3                   	ret    
c000abc5:	90                   	nop

c000abc6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000abc6:	b8 0a 00 00 00       	mov    eax,0xa
c000abcb:	c3                   	ret    

c000abcc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000abcc:	b8 0a 00 00 00       	mov    eax,0xa
c000abd1:	c3                   	ret    

c000abd2 <Filesystem::allocateSwapfile(char const*, int)>:
c000abd2:	31 c0                	xor    eax,eax
c000abd4:	31 d2                	xor    edx,edx
c000abd6:	c3                   	ret    
c000abd7:	90                   	nop

c000abd8 <File::~File()>:
c000abd8:	83 ec 0c             	sub    esp,0xc
c000abdb:	ba 30 02 02 c0       	mov    edx,0xc0020230
c000abe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe4:	89 10                	mov    DWORD PTR [eax],edx
c000abe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abea:	83 ec 0c             	sub    esp,0xc
c000abed:	50                   	push   eax
c000abee:	e8 a9 e7 ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000abf3:	83 c4 10             	add    esp,0x10
c000abf6:	90                   	nop
c000abf7:	83 c4 0c             	add    esp,0xc
c000abfa:	c3                   	ret    
c000abfb:	90                   	nop

c000abfc <File::~File()>:
c000abfc:	83 ec 0c             	sub    esp,0xc
c000abff:	83 ec 0c             	sub    esp,0xc
c000ac02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac06:	e8 cd ff ff ff       	call   c000abd8 <File::~File()>
c000ac0b:	83 c4 10             	add    esp,0x10
c000ac0e:	83 ec 08             	sub    esp,0x8
c000ac11:	68 14 01 00 00       	push   0x114
c000ac16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1a:	e8 34 fc ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000ac1f:	83 c4 10             	add    esp,0x10
c000ac22:	83 c4 0c             	add    esp,0xc
c000ac25:	c3                   	ret    

c000ac26 <Directory::~Directory()>:
c000ac26:	83 ec 0c             	sub    esp,0xc
c000ac29:	ba 4c 02 02 c0       	mov    edx,0xc002024c
c000ac2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac32:	89 10                	mov    DWORD PTR [eax],edx
c000ac34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	50                   	push   eax
c000ac3c:	e8 5b e7 ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	90                   	nop
c000ac45:	83 c4 0c             	add    esp,0xc
c000ac48:	c3                   	ret    
c000ac49:	90                   	nop

c000ac4a <Directory::~Directory()>:
c000ac4a:	83 ec 0c             	sub    esp,0xc
c000ac4d:	83 ec 0c             	sub    esp,0xc
c000ac50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac54:	e8 cd ff ff ff       	call   c000ac26 <Directory::~Directory()>
c000ac59:	83 c4 10             	add    esp,0x10
c000ac5c:	83 ec 08             	sub    esp,0x8
c000ac5f:	68 14 01 00 00       	push   0x114
c000ac64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac68:	e8 e6 fb ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000ac6d:	83 c4 10             	add    esp,0x10
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <Filesystem::Filesystem()>:
c000ac74:	ba c8 01 02 c0       	mov    edx,0xc00201c8
c000ac79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac7d:	89 10                	mov    DWORD PTR [eax],edx
c000ac7f:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000ac85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac89:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ac8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac90:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000ac95:	90                   	nop
c000ac96:	c3                   	ret    
c000ac97:	90                   	nop

c000ac98 <Filesystem::~Filesystem()>:
c000ac98:	ba c8 01 02 c0       	mov    edx,0xc00201c8
c000ac9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca1:	89 10                	mov    DWORD PTR [eax],edx
c000aca3:	90                   	nop
c000aca4:	c3                   	ret    
c000aca5:	90                   	nop

c000aca6 <Filesystem::~Filesystem()>:
c000aca6:	83 ec 0c             	sub    esp,0xc
c000aca9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acad:	e8 e6 ff ff ff       	call   c000ac98 <Filesystem::~Filesystem()>
c000acb2:	83 c4 04             	add    esp,0x4
c000acb5:	83 ec 08             	sub    esp,0x8
c000acb8:	6a 08                	push   0x8
c000acba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acbe:	e8 90 fb ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000acc3:	83 c4 10             	add    esp,0x10
c000acc6:	83 c4 0c             	add    esp,0xc
c000acc9:	c3                   	ret    

c000acca <Fs::getcwd(Process*, char*, int)>:
c000acca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acce:	31 c0                	xor    eax,eax
c000acd0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000acd4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000acd7:	7d 15                	jge    c000acee <Fs::getcwd(Process*, char*, int)+0x24>
c000acd9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acdd:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ace4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ace7:	84 c9                	test   cl,cl
c000ace9:	74 06                	je     c000acf1 <Fs::getcwd(Process*, char*, int)+0x27>
c000aceb:	40                   	inc    eax
c000acec:	eb e2                	jmp    c000acd0 <Fs::getcwd(Process*, char*, int)+0x6>
c000acee:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000acf1:	31 c0                	xor    eax,eax
c000acf3:	c3                   	ret    

c000acf4 <Fs::initVFS()>:
c000acf4:	83 ec 18             	sub    esp,0x18
c000acf7:	6a 08                	push   0x8
c000acf9:	e8 cd cd ff ff       	call   c0007acb <malloc>
c000acfe:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad01:	e8 4a dd 00 00       	call   c0018a50 <FAT::FAT()>
c000ad06:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ad0d:	e8 b9 cd ff ff       	call   c0007acb <malloc>
c000ad12:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad15:	e8 5e ec 00 00       	call   c0019978 <ISO9660::ISO9660()>
c000ad1a:	83 c4 1c             	add    esp,0x1c
c000ad1d:	c3                   	ret    

c000ad1e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ad1e:	55                   	push   ebp
c000ad1f:	57                   	push   edi
c000ad20:	56                   	push   esi
c000ad21:	53                   	push   ebx
c000ad22:	81 ec 20 04 00 00    	sub    esp,0x420
c000ad28:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000ad2f:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000ad36:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000ad3d:	68 00 04 00 00       	push   0x400
c000ad42:	6a 00                	push   0x0
c000ad44:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ad48:	56                   	push   esi
c000ad49:	e8 a2 57 ff ff       	call   c00004f0 <memset>
c000ad4e:	83 c4 10             	add    esp,0x10
c000ad51:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ad55:	75 0b                	jne    c000ad62 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ad57:	50                   	push   eax
c000ad58:	50                   	push   eax
c000ad59:	57                   	push   edi
c000ad5a:	56                   	push   esi
c000ad5b:	e8 f0 58 ff ff       	call   c0000650 <strcpy>
c000ad60:	eb 45                	jmp    c000ada7 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000ad62:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad65:	83 f8 2f             	cmp    eax,0x2f
c000ad68:	74 05                	je     c000ad6f <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000ad6a:	83 f8 5c             	cmp    eax,0x5c
c000ad6d:	75 19                	jne    c000ad88 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000ad6f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ad72:	3c 60                	cmp    al,0x60
c000ad74:	7e 03                	jle    c000ad79 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000ad76:	83 e8 20             	sub    eax,0x20
c000ad79:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000ad7d:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000ad84:	50                   	push   eax
c000ad85:	50                   	push   eax
c000ad86:	eb 18                	jmp    c000ada0 <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000ad88:	50                   	push   eax
c000ad89:	50                   	push   eax
c000ad8a:	55                   	push   ebp
c000ad8b:	56                   	push   esi
c000ad8c:	e8 bf 58 ff ff       	call   c0000650 <strcpy>
c000ad91:	5a                   	pop    edx
c000ad92:	59                   	pop    ecx
c000ad93:	68 1b 11 02 c0       	push   0xc002111b
c000ad98:	56                   	push   esi
c000ad99:	e8 d2 5a ff ff       	call   c0000870 <strcat>
c000ad9e:	5d                   	pop    ebp
c000ad9f:	58                   	pop    eax
c000ada0:	57                   	push   edi
c000ada1:	56                   	push   esi
c000ada2:	e8 c9 5a ff ff       	call   c0000870 <strcat>
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000adae:	3c 60                	cmp    al,0x60
c000adb0:	7e 03                	jle    c000adb5 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000adb2:	83 e8 20             	sub    eax,0x20
c000adb5:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000adb9:	88 03                	mov    BYTE PTR [ebx],al
c000adbb:	b8 03 00 00 00       	mov    eax,0x3
c000adc0:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000adc7:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000adcd:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000add1:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000add9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000addd:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000ade2:	89 fa                	mov    edx,edi
c000ade4:	0f be ea             	movsx  ebp,dl
c000ade7:	85 ed                	test   ebp,ebp
c000ade9:	0f 84 af 00 00 00    	je     c000ae9e <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000adef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adf3:	42                   	inc    edx
c000adf4:	83 fd 2f             	cmp    ebp,0x2f
c000adf7:	74 05                	je     c000adfe <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000adf9:	83 fd 5c             	cmp    ebp,0x5c
c000adfc:	75 14                	jne    c000ae12 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000adfe:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae03:	89 c5                	mov    ebp,eax
c000ae05:	74 0b                	je     c000ae12 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000ae07:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae0b:	40                   	inc    eax
c000ae0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae10:	eb c7                	jmp    c000add9 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000ae12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae16:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000ae1b:	89 f9                	mov    ecx,edi
c000ae1d:	0f be e9             	movsx  ebp,cl
c000ae20:	75 63                	jne    c000ae85 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae22:	83 fd 2e             	cmp    ebp,0x2e
c000ae25:	75 5e                	jne    c000ae85 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae27:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae2b:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000ae30:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000ae35:	74 18                	je     c000ae4f <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000ae37:	83 fd 2e             	cmp    ebp,0x2e
c000ae3a:	74 57                	je     c000ae93 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ae3c:	89 ca                	mov    edx,ecx
c000ae3e:	42                   	inc    edx
c000ae3f:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ae43:	83 f9 2f             	cmp    ecx,0x2f
c000ae46:	74 f6                	je     c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ae48:	83 f9 5c             	cmp    ecx,0x5c
c000ae4b:	74 f1                	je     c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ae4d:	eb bd                	jmp    c000ae0c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae4f:	83 fd 2e             	cmp    ebp,0x2e
c000ae52:	74 3f                	je     c000ae93 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ae54:	83 f8 03             	cmp    eax,0x3
c000ae57:	74 b3                	je     c000ae0c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae59:	42                   	inc    edx
c000ae5a:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ae5e:	83 f9 2f             	cmp    ecx,0x2f
c000ae61:	74 f6                	je     c000ae59 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ae63:	83 f9 5c             	cmp    ecx,0x5c
c000ae66:	74 f1                	je     c000ae59 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ae68:	48                   	dec    eax
c000ae69:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae6d:	75 06                	jne    c000ae75 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000ae6f:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae73:	eb f3                	jmp    c000ae68 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae75:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae79:	74 07                	je     c000ae82 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000ae7b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae7f:	48                   	dec    eax
c000ae80:	eb f3                	jmp    c000ae75 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000ae82:	40                   	inc    eax
c000ae83:	eb 87                	jmp    c000ae0c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae85:	83 fd 2f             	cmp    ebp,0x2f
c000ae88:	74 82                	je     c000ae0c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae8a:	83 fd 5c             	cmp    ebp,0x5c
c000ae8d:	0f 84 79 ff ff ff    	je     c000ae0c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae93:	89 f9                	mov    ecx,edi
c000ae95:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000ae98:	40                   	inc    eax
c000ae99:	e9 6e ff ff ff       	jmp    c000ae0c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae9e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aea2:	83 ec 0c             	sub    esp,0xc
c000aea5:	53                   	push   ebx
c000aea6:	e8 d5 56 ff ff       	call   c0000580 <strlen>
c000aeab:	83 c4 10             	add    esp,0x10
c000aeae:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aeb3:	75 26                	jne    c000aedb <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000aeb5:	83 ec 0c             	sub    esp,0xc
c000aeb8:	53                   	push   ebx
c000aeb9:	e8 c2 56 ff ff       	call   c0000580 <strlen>
c000aebe:	83 c4 10             	add    esp,0x10
c000aec1:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aec6:	74 26                	je     c000aeee <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000aec8:	83 ec 0c             	sub    esp,0xc
c000aecb:	53                   	push   ebx
c000aecc:	e8 af 56 ff ff       	call   c0000580 <strlen>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aed9:	eb c7                	jmp    c000aea2 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000aedb:	83 ec 0c             	sub    esp,0xc
c000aede:	53                   	push   ebx
c000aedf:	e8 9c 56 ff ff       	call   c0000580 <strlen>
c000aee4:	83 c4 10             	add    esp,0x10
c000aee7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aeec:	74 c7                	je     c000aeb5 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000aeee:	81 c4 1c 04 00 00    	add    esp,0x41c
c000aef4:	5b                   	pop    ebx
c000aef5:	5e                   	pop    esi
c000aef6:	5f                   	pop    edi
c000aef7:	5d                   	pop    ebp
c000aef8:	c3                   	ret    
c000aef9:	90                   	nop

c000aefa <File::File(char const*, Process*)>:
c000aefa:	83 ec 0c             	sub    esp,0xc
c000aefd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af01:	83 ec 08             	sub    esp,0x8
c000af04:	6a 00                	push   0x0
c000af06:	50                   	push   eax
c000af07:	e8 aa e2 ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000af0c:	83 c4 10             	add    esp,0x10
c000af0f:	ba 30 02 02 c0       	mov    edx,0xc0020230
c000af14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af18:	89 10                	mov    DWORD PTR [eax],edx
c000af1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af1e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af28:	83 c0 0d             	add    eax,0xd
c000af2b:	83 ec 04             	sub    esp,0x4
c000af2e:	52                   	push   edx
c000af2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af33:	50                   	push   eax
c000af34:	e8 e5 fd ff ff       	call   c000ad1e <Fs::standardiseFiles(char*, char const*, char const*)>
c000af39:	83 c4 10             	add    esp,0x10
c000af3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af40:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af43:	83 e8 41             	sub    eax,0x41
c000af46:	88 c2                	mov    dl,al
c000af48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af56:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af64:	0f b6 c0             	movzx  eax,al
c000af67:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af6e:	85 c0                	test   eax,eax
c000af70:	74 3e                	je     c000afb0 <File::File(char const*, Process*)+0xb6>
c000af72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af76:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af7c:	0f b6 c0             	movzx  eax,al
c000af7f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af86:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000af8c:	85 c0                	test   eax,eax
c000af8e:	75 20                	jne    c000afb0 <File::File(char const*, Process*)+0xb6>
c000af90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af94:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af9a:	0f b6 c0             	movzx  eax,al
c000af9d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afa4:	83 ec 0c             	sub    esp,0xc
c000afa7:	50                   	push   eax
c000afa8:	e8 2f 21 00 00       	call   c000d0dc <LogicalDisk::mount()>
c000afad:	83 c4 10             	add    esp,0x10
c000afb0:	90                   	nop
c000afb1:	83 c4 0c             	add    esp,0xc
c000afb4:	c3                   	ret    
c000afb5:	90                   	nop

c000afb6 <File::open(FileOpenMode)>:
c000afb6:	53                   	push   ebx
c000afb7:	b8 0b 00 00 00       	mov    eax,0xb
c000afbc:	83 ec 08             	sub    esp,0x8
c000afbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afc3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000afca:	83 fa 19             	cmp    edx,0x19
c000afcd:	77 40                	ja     c000b00f <File::open(FileOpenMode)+0x59>
c000afcf:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000afd6:	85 d2                	test   edx,edx
c000afd8:	74 35                	je     c000b00f <File::open(FileOpenMode)+0x59>
c000afda:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000afe0:	85 d2                	test   edx,edx
c000afe2:	74 2b                	je     c000b00f <File::open(FileOpenMode)+0x59>
c000afe4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000afe8:	b8 06 00 00 00       	mov    eax,0x6
c000afed:	75 20                	jne    c000b00f <File::open(FileOpenMode)+0x59>
c000afef:	8b 02                	mov    eax,DWORD PTR [edx]
c000aff1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000aff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affb:	51                   	push   ecx
c000affc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000afff:	51                   	push   ecx
c000b000:	52                   	push   edx
c000b001:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b004:	83 c4 10             	add    esp,0x10
c000b007:	85 c0                	test   eax,eax
c000b009:	75 04                	jne    c000b00f <File::open(FileOpenMode)+0x59>
c000b00b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b00f:	83 c4 08             	add    esp,0x8
c000b012:	5b                   	pop    ebx
c000b013:	c3                   	ret    

c000b014 <File::close()>:
c000b014:	53                   	push   ebx
c000b015:	b8 0b 00 00 00       	mov    eax,0xb
c000b01a:	83 ec 08             	sub    esp,0x8
c000b01d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b021:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b028:	83 f9 19             	cmp    ecx,0x19
c000b02b:	77 41                	ja     c000b06e <File::close()+0x5a>
c000b02d:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b034:	85 db                	test   ebx,ebx
c000b036:	74 36                	je     c000b06e <File::close()+0x5a>
c000b038:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b03f:	74 2d                	je     c000b06e <File::close()+0x5a>
c000b041:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b045:	b8 05 00 00 00       	mov    eax,0x5
c000b04a:	74 22                	je     c000b06e <File::close()+0x5a>
c000b04c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b050:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b057:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b05d:	53                   	push   ebx
c000b05e:	53                   	push   ebx
c000b05f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b061:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b067:	50                   	push   eax
c000b068:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b06b:	83 c4 10             	add    esp,0x10
c000b06e:	83 c4 08             	add    esp,0x8
c000b071:	5b                   	pop    ebx
c000b072:	c3                   	ret    
c000b073:	90                   	nop

c000b074 <File::seek(unsigned long long)>:
c000b074:	56                   	push   esi
c000b075:	b8 0b 00 00 00       	mov    eax,0xb
c000b07a:	53                   	push   ebx
c000b07b:	51                   	push   ecx
c000b07c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b080:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b084:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b088:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b08f:	83 fa 19             	cmp    edx,0x19
c000b092:	77 31                	ja     c000b0c5 <File::seek(unsigned long long)+0x51>
c000b094:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b09b:	85 d2                	test   edx,edx
c000b09d:	74 26                	je     c000b0c5 <File::seek(unsigned long long)+0x51>
c000b09f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0a5:	85 d2                	test   edx,edx
c000b0a7:	74 1c                	je     c000b0c5 <File::seek(unsigned long long)+0x51>
c000b0a9:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b0ad:	b8 05 00 00 00       	mov    eax,0x5
c000b0b2:	74 11                	je     c000b0c5 <File::seek(unsigned long long)+0x51>
c000b0b4:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0b6:	53                   	push   ebx
c000b0b7:	51                   	push   ecx
c000b0b8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b0be:	52                   	push   edx
c000b0bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b0c2:	83 c4 10             	add    esp,0x10
c000b0c5:	5a                   	pop    edx
c000b0c6:	5b                   	pop    ebx
c000b0c7:	5e                   	pop    esi
c000b0c8:	c3                   	ret    
c000b0c9:	90                   	nop

c000b0ca <File::tell(unsigned long long*)>:
c000b0ca:	83 ec 0c             	sub    esp,0xc
c000b0cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b0d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0d6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0dd:	83 fa 19             	cmp    edx,0x19
c000b0e0:	77 34                	ja     c000b116 <File::tell(unsigned long long*)+0x4c>
c000b0e2:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0e9:	85 d2                	test   edx,edx
c000b0eb:	74 29                	je     c000b116 <File::tell(unsigned long long*)+0x4c>
c000b0ed:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0f3:	85 d2                	test   edx,edx
c000b0f5:	74 1f                	je     c000b116 <File::tell(unsigned long long*)+0x4c>
c000b0f7:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0fb:	b8 05 00 00 00       	mov    eax,0x5
c000b100:	74 14                	je     c000b116 <File::tell(unsigned long long*)+0x4c>
c000b102:	50                   	push   eax
c000b103:	8b 02                	mov    eax,DWORD PTR [edx]
c000b105:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b109:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b10f:	52                   	push   edx
c000b110:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	83 c4 0c             	add    esp,0xc
c000b119:	c3                   	ret    

c000b11a <File::rewind()>:
c000b11a:	83 ec 10             	sub    esp,0x10
c000b11d:	6a 00                	push   0x0
c000b11f:	6a 00                	push   0x0
c000b121:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b125:	e8 4a ff ff ff       	call   c000b074 <File::seek(unsigned long long)>
c000b12a:	83 c4 1c             	add    esp,0x1c
c000b12d:	c3                   	ret    

c000b12e <File::unlink()>:
c000b12e:	83 ec 0c             	sub    esp,0xc
c000b131:	b8 0b 00 00 00       	mov    eax,0xb
c000b136:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b13a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b141:	83 f9 19             	cmp    ecx,0x19
c000b144:	77 2f                	ja     c000b175 <File::unlink()+0x47>
c000b146:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b14d:	85 c9                	test   ecx,ecx
c000b14f:	74 24                	je     c000b175 <File::unlink()+0x47>
c000b151:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b157:	85 c9                	test   ecx,ecx
c000b159:	74 1a                	je     c000b175 <File::unlink()+0x47>
c000b15b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b15f:	b8 06 00 00 00       	mov    eax,0x6
c000b164:	75 0f                	jne    c000b175 <File::unlink()+0x47>
c000b166:	50                   	push   eax
c000b167:	83 c2 0d             	add    edx,0xd
c000b16a:	50                   	push   eax
c000b16b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b16d:	52                   	push   edx
c000b16e:	51                   	push   ecx
c000b16f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	83 c4 0c             	add    esp,0xc
c000b178:	c3                   	ret    
c000b179:	90                   	nop

c000b17a <File::rename(char const*)>:
c000b17a:	83 ec 0c             	sub    esp,0xc
c000b17d:	b8 0b 00 00 00       	mov    eax,0xb
c000b182:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b186:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b18d:	83 f9 19             	cmp    ecx,0x19
c000b190:	77 32                	ja     c000b1c4 <File::rename(char const*)+0x4a>
c000b192:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b199:	85 c9                	test   ecx,ecx
c000b19b:	74 27                	je     c000b1c4 <File::rename(char const*)+0x4a>
c000b19d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1a3:	85 c9                	test   ecx,ecx
c000b1a5:	74 1d                	je     c000b1c4 <File::rename(char const*)+0x4a>
c000b1a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ab:	b8 06 00 00 00       	mov    eax,0x6
c000b1b0:	75 12                	jne    c000b1c4 <File::rename(char const*)+0x4a>
c000b1b2:	50                   	push   eax
c000b1b3:	83 c2 0d             	add    edx,0xd
c000b1b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1bc:	52                   	push   edx
c000b1bd:	51                   	push   ecx
c000b1be:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1c1:	83 c4 10             	add    esp,0x10
c000b1c4:	83 c4 0c             	add    esp,0xc
c000b1c7:	c3                   	ret    

c000b1c8 <File::chfatattr(unsigned char, unsigned char)>:
c000b1c8:	57                   	push   edi
c000b1c9:	b8 0b 00 00 00       	mov    eax,0xb
c000b1ce:	56                   	push   esi
c000b1cf:	53                   	push   ebx
c000b1d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b1d8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1e3:	83 f9 19             	cmp    ecx,0x19
c000b1e6:	77 37                	ja     c000b21f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1e8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1ef:	85 c9                	test   ecx,ecx
c000b1f1:	74 2c                	je     c000b21f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1f3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1f9:	85 c9                	test   ecx,ecx
c000b1fb:	74 22                	je     c000b21f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1fd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b201:	b8 06 00 00 00       	mov    eax,0x6
c000b206:	75 17                	jne    c000b21f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b208:	89 f0                	mov    eax,esi
c000b20a:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b20c:	0f b6 db             	movzx  ebx,bl
c000b20f:	0f b6 f0             	movzx  esi,al
c000b212:	83 c2 0d             	add    edx,0xd
c000b215:	56                   	push   esi
c000b216:	53                   	push   ebx
c000b217:	52                   	push   edx
c000b218:	51                   	push   ecx
c000b219:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b21c:	83 c4 10             	add    esp,0x10
c000b21f:	5b                   	pop    ebx
c000b220:	5e                   	pop    esi
c000b221:	5f                   	pop    edi
c000b222:	c3                   	ret    
c000b223:	90                   	nop

c000b224 <File::exists()>:
c000b224:	83 ec 0c             	sub    esp,0xc
c000b227:	31 c0                	xor    eax,eax
c000b229:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b22d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b234:	83 f9 19             	cmp    ecx,0x19
c000b237:	77 24                	ja     c000b25d <File::exists()+0x39>
c000b239:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b240:	85 c9                	test   ecx,ecx
c000b242:	74 19                	je     c000b25d <File::exists()+0x39>
c000b244:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b24a:	85 c9                	test   ecx,ecx
c000b24c:	74 0f                	je     c000b25d <File::exists()+0x39>
c000b24e:	50                   	push   eax
c000b24f:	83 c2 0d             	add    edx,0xd
c000b252:	50                   	push   eax
c000b253:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b255:	52                   	push   edx
c000b256:	51                   	push   ecx
c000b257:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b25a:	83 c4 10             	add    esp,0x10
c000b25d:	83 c4 0c             	add    esp,0xc
c000b260:	c3                   	ret    
c000b261:	90                   	nop

c000b262 <File::stat(unsigned long long*, bool*)>:
c000b262:	56                   	push   esi
c000b263:	53                   	push   ebx
c000b264:	50                   	push   eax
c000b265:	b8 0b 00 00 00       	mov    eax,0xb
c000b26a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b26e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b272:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b276:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b27d:	83 f9 19             	cmp    ecx,0x19
c000b280:	77 3d                	ja     c000b2bf <File::stat(unsigned long long*, bool*)+0x5d>
c000b282:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b289:	85 c9                	test   ecx,ecx
c000b28b:	74 32                	je     c000b2bf <File::stat(unsigned long long*, bool*)+0x5d>
c000b28d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b293:	85 c9                	test   ecx,ecx
c000b295:	74 28                	je     c000b2bf <File::stat(unsigned long long*, bool*)+0x5d>
c000b297:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b29b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b29d:	74 13                	je     c000b2b2 <File::stat(unsigned long long*, bool*)+0x50>
c000b29f:	83 ec 04             	sub    esp,0x4
c000b2a2:	56                   	push   esi
c000b2a3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2a9:	51                   	push   ecx
c000b2aa:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b2ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b2b0:	eb 0a                	jmp    c000b2bc <File::stat(unsigned long long*, bool*)+0x5a>
c000b2b2:	53                   	push   ebx
c000b2b3:	83 c2 0d             	add    edx,0xd
c000b2b6:	56                   	push   esi
c000b2b7:	52                   	push   edx
c000b2b8:	51                   	push   ecx
c000b2b9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b2bc:	83 c4 10             	add    esp,0x10
c000b2bf:	5a                   	pop    edx
c000b2c0:	5b                   	pop    ebx
c000b2c1:	5e                   	pop    esi
c000b2c2:	c3                   	ret    

c000b2c3 <Fs::setcwd(Process*, char*)>:
c000b2c3:	55                   	push   ebp
c000b2c4:	57                   	push   edi
c000b2c5:	56                   	push   esi
c000b2c6:	53                   	push   ebx
c000b2c7:	81 ec 20 02 00 00    	sub    esp,0x220
c000b2cd:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b2d4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b2da:	57                   	push   edi
c000b2db:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b2e2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b2e6:	56                   	push   esi
c000b2e7:	e8 32 fa ff ff       	call   c000ad1e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b2ec:	89 34 24             	mov    DWORD PTR [esp],esi
c000b2ef:	e8 8c 52 ff ff       	call   c0000580 <strlen>
c000b2f4:	83 c4 10             	add    esp,0x10
c000b2f7:	83 f8 02             	cmp    eax,0x2
c000b2fa:	77 15                	ja     c000b311 <Fs::setcwd(Process*, char*)+0x4e>
c000b2fc:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b301:	83 eb 41             	sub    ebx,0x41
c000b304:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b30b:	85 c0                	test   eax,eax
c000b30d:	75 1c                	jne    c000b32b <Fs::setcwd(Process*, char*)+0x68>
c000b30f:	eb 2f                	jmp    c000b340 <Fs::setcwd(Process*, char*)+0x7d>
c000b311:	83 ec 0c             	sub    esp,0xc
c000b314:	56                   	push   esi
c000b315:	e8 66 52 ff ff       	call   c0000580 <strlen>
c000b31a:	83 c4 10             	add    esp,0x10
c000b31d:	83 f8 03             	cmp    eax,0x3
c000b320:	75 57                	jne    c000b379 <Fs::setcwd(Process*, char*)+0xb6>
c000b322:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b327:	75 50                	jne    c000b379 <Fs::setcwd(Process*, char*)+0xb6>
c000b329:	eb d1                	jmp    c000b2fc <Fs::setcwd(Process*, char*)+0x39>
c000b32b:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b332:	75 0c                	jne    c000b340 <Fs::setcwd(Process*, char*)+0x7d>
c000b334:	83 ec 0c             	sub    esp,0xc
c000b337:	50                   	push   eax
c000b338:	e8 9f 1d 00 00       	call   c000d0dc <LogicalDisk::mount()>
c000b33d:	83 c4 10             	add    esp,0x10
c000b340:	83 fb 19             	cmp    ebx,0x19
c000b343:	b8 03 00 00 00       	mov    eax,0x3
c000b348:	0f 87 c6 00 00 00    	ja     c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b34e:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b355:	b8 05 00 00 00       	mov    eax,0x5
c000b35a:	85 d2                	test   edx,edx
c000b35c:	0f 84 b2 00 00 00    	je     c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b362:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b369:	b8 06 00 00 00       	mov    eax,0x6
c000b36e:	0f 85 92 00 00 00    	jne    c000b406 <Fs::setcwd(Process*, char*)+0x143>
c000b374:	e9 9b 00 00 00       	jmp    c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b379:	83 ec 0c             	sub    esp,0xc
c000b37c:	68 14 01 00 00       	push   0x114
c000b381:	e8 45 c7 ff ff       	call   c0007acb <malloc>
c000b386:	83 c4 0c             	add    esp,0xc
c000b389:	55                   	push   ebp
c000b38a:	56                   	push   esi
c000b38b:	50                   	push   eax
c000b38c:	89 c3                	mov    ebx,eax
c000b38e:	e8 67 fb ff ff       	call   c000aefa <File::File(char const*, Process*)>
c000b393:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b398:	83 c4 0c             	add    esp,0xc
c000b39b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b39f:	50                   	push   eax
c000b3a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b3a4:	50                   	push   eax
c000b3a5:	53                   	push   ebx
c000b3a6:	e8 b7 fe ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c000b3ab:	83 c4 10             	add    esp,0x10
c000b3ae:	83 f8 02             	cmp    eax,0x2
c000b3b1:	74 27                	je     c000b3da <Fs::setcwd(Process*, char*)+0x117>
c000b3b3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b3b8:	75 1c                	jne    c000b3d6 <Fs::setcwd(Process*, char*)+0x113>
c000b3ba:	85 db                	test   ebx,ebx
c000b3bc:	b8 02 00 00 00       	mov    eax,0x2
c000b3c1:	74 51                	je     c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b3c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3c5:	83 ec 0c             	sub    esp,0xc
c000b3c8:	53                   	push   ebx
c000b3c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3cc:	83 c4 10             	add    esp,0x10
c000b3cf:	b8 02 00 00 00       	mov    eax,0x2
c000b3d4:	eb 3e                	jmp    c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b3d6:	85 c0                	test   eax,eax
c000b3d8:	74 1c                	je     c000b3f6 <Fs::setcwd(Process*, char*)+0x133>
c000b3da:	85 db                	test   ebx,ebx
c000b3dc:	b8 01 00 00 00       	mov    eax,0x1
c000b3e1:	74 31                	je     c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b3e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3e5:	83 ec 0c             	sub    esp,0xc
c000b3e8:	53                   	push   ebx
c000b3e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3ec:	83 c4 10             	add    esp,0x10
c000b3ef:	b8 01 00 00 00       	mov    eax,0x1
c000b3f4:	eb 1e                	jmp    c000b414 <Fs::setcwd(Process*, char*)+0x151>
c000b3f6:	85 db                	test   ebx,ebx
c000b3f8:	74 0c                	je     c000b406 <Fs::setcwd(Process*, char*)+0x143>
c000b3fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	53                   	push   ebx
c000b400:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b403:	83 c4 10             	add    esp,0x10
c000b406:	50                   	push   eax
c000b407:	50                   	push   eax
c000b408:	56                   	push   esi
c000b409:	57                   	push   edi
c000b40a:	e8 41 52 ff ff       	call   c0000650 <strcpy>
c000b40f:	83 c4 10             	add    esp,0x10
c000b412:	31 c0                	xor    eax,eax
c000b414:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b41a:	5b                   	pop    ebx
c000b41b:	5e                   	pop    esi
c000b41c:	5f                   	pop    edi
c000b41d:	5d                   	pop    ebp
c000b41e:	c3                   	ret    
c000b41f:	90                   	nop

c000b420 <Directory::Directory(char const*, Process*)>:
c000b420:	83 ec 0c             	sub    esp,0xc
c000b423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b427:	83 ec 08             	sub    esp,0x8
c000b42a:	6a 00                	push   0x0
c000b42c:	50                   	push   eax
c000b42d:	e8 84 dd ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	ba 4c 02 02 c0       	mov    edx,0xc002024c
c000b43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43e:	89 10                	mov    DWORD PTR [eax],edx
c000b440:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b444:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44e:	83 c0 0d             	add    eax,0xd
c000b451:	83 ec 04             	sub    esp,0x4
c000b454:	52                   	push   edx
c000b455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b459:	50                   	push   eax
c000b45a:	e8 bf f8 ff ff       	call   c000ad1e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b45f:	83 c4 10             	add    esp,0x10
c000b462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b466:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b469:	83 e8 41             	sub    eax,0x41
c000b46c:	88 c2                	mov    dl,al
c000b46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b472:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b484:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b48a:	0f b6 c0             	movzx  eax,al
c000b48d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b494:	85 c0                	test   eax,eax
c000b496:	74 3e                	je     c000b4d6 <Directory::Directory(char const*, Process*)+0xb6>
c000b498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4a2:	0f b6 c0             	movzx  eax,al
c000b4a5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4ac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b4b2:	85 c0                	test   eax,eax
c000b4b4:	75 20                	jne    c000b4d6 <Directory::Directory(char const*, Process*)+0xb6>
c000b4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ba:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4c0:	0f b6 c0             	movzx  eax,al
c000b4c3:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4ca:	83 ec 0c             	sub    esp,0xc
c000b4cd:	50                   	push   eax
c000b4ce:	e8 09 1c 00 00       	call   c000d0dc <LogicalDisk::mount()>
c000b4d3:	83 c4 10             	add    esp,0x10
c000b4d6:	90                   	nop
c000b4d7:	83 c4 0c             	add    esp,0xc
c000b4da:	c3                   	ret    
c000b4db:	90                   	nop

c000b4dc <Directory::open()>:
c000b4dc:	53                   	push   ebx
c000b4dd:	b8 0b 00 00 00       	mov    eax,0xb
c000b4e2:	83 ec 08             	sub    esp,0x8
c000b4e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b4e9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b4f0:	83 fa 19             	cmp    edx,0x19
c000b4f3:	77 3d                	ja     c000b532 <Directory::open()+0x56>
c000b4f5:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b4fc:	85 d2                	test   edx,edx
c000b4fe:	74 32                	je     c000b532 <Directory::open()+0x56>
c000b500:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b506:	85 d2                	test   edx,edx
c000b508:	74 28                	je     c000b532 <Directory::open()+0x56>
c000b50a:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b50e:	b8 06 00 00 00       	mov    eax,0x6
c000b513:	75 1d                	jne    c000b532 <Directory::open()+0x56>
c000b515:	50                   	push   eax
c000b516:	8b 02                	mov    eax,DWORD PTR [edx]
c000b518:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b51e:	51                   	push   ecx
c000b51f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b522:	51                   	push   ecx
c000b523:	52                   	push   edx
c000b524:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b527:	83 c4 10             	add    esp,0x10
c000b52a:	85 c0                	test   eax,eax
c000b52c:	75 04                	jne    c000b532 <Directory::open()+0x56>
c000b52e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b532:	83 c4 08             	add    esp,0x8
c000b535:	5b                   	pop    ebx
c000b536:	c3                   	ret    
c000b537:	90                   	nop

c000b538 <Directory::close()>:
c000b538:	53                   	push   ebx
c000b539:	b8 0b 00 00 00       	mov    eax,0xb
c000b53e:	83 ec 08             	sub    esp,0x8
c000b541:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b545:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b54c:	83 f9 19             	cmp    ecx,0x19
c000b54f:	77 41                	ja     c000b592 <Directory::close()+0x5a>
c000b551:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b558:	85 db                	test   ebx,ebx
c000b55a:	74 36                	je     c000b592 <Directory::close()+0x5a>
c000b55c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b563:	74 2d                	je     c000b592 <Directory::close()+0x5a>
c000b565:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b569:	b8 05 00 00 00       	mov    eax,0x5
c000b56e:	74 22                	je     c000b592 <Directory::close()+0x5a>
c000b570:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b574:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b57b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b581:	53                   	push   ebx
c000b582:	53                   	push   ebx
c000b583:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b585:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b58b:	50                   	push   eax
c000b58c:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b58f:	83 c4 10             	add    esp,0x10
c000b592:	83 c4 08             	add    esp,0x8
c000b595:	5b                   	pop    ebx
c000b596:	c3                   	ret    
c000b597:	90                   	nop

c000b598 <Directory::unlink()>:
c000b598:	83 ec 0c             	sub    esp,0xc
c000b59b:	b8 0b 00 00 00       	mov    eax,0xb
c000b5a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5ab:	83 f9 19             	cmp    ecx,0x19
c000b5ae:	77 2f                	ja     c000b5df <Directory::unlink()+0x47>
c000b5b0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5b7:	85 c9                	test   ecx,ecx
c000b5b9:	74 24                	je     c000b5df <Directory::unlink()+0x47>
c000b5bb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b5c1:	85 c9                	test   ecx,ecx
c000b5c3:	74 1a                	je     c000b5df <Directory::unlink()+0x47>
c000b5c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5c9:	b8 06 00 00 00       	mov    eax,0x6
c000b5ce:	75 0f                	jne    c000b5df <Directory::unlink()+0x47>
c000b5d0:	50                   	push   eax
c000b5d1:	83 c2 0d             	add    edx,0xd
c000b5d4:	50                   	push   eax
c000b5d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5d7:	52                   	push   edx
c000b5d8:	51                   	push   ecx
c000b5d9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	83 c4 0c             	add    esp,0xc
c000b5e2:	c3                   	ret    
c000b5e3:	90                   	nop

c000b5e4 <Directory::rename(char const*)>:
c000b5e4:	83 ec 0c             	sub    esp,0xc
c000b5e7:	b8 0b 00 00 00       	mov    eax,0xb
c000b5ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5f0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5f7:	83 f9 19             	cmp    ecx,0x19
c000b5fa:	77 32                	ja     c000b62e <Directory::rename(char const*)+0x4a>
c000b5fc:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b603:	85 c9                	test   ecx,ecx
c000b605:	74 27                	je     c000b62e <Directory::rename(char const*)+0x4a>
c000b607:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b60d:	85 c9                	test   ecx,ecx
c000b60f:	74 1d                	je     c000b62e <Directory::rename(char const*)+0x4a>
c000b611:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b615:	b8 06 00 00 00       	mov    eax,0x6
c000b61a:	75 12                	jne    c000b62e <Directory::rename(char const*)+0x4a>
c000b61c:	50                   	push   eax
c000b61d:	83 c2 0d             	add    edx,0xd
c000b620:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b622:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b626:	52                   	push   edx
c000b627:	51                   	push   ecx
c000b628:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b62b:	83 c4 10             	add    esp,0x10
c000b62e:	83 c4 0c             	add    esp,0xc
c000b631:	c3                   	ret    

c000b632 <Directory::exists()>:
c000b632:	83 ec 0c             	sub    esp,0xc
c000b635:	31 c0                	xor    eax,eax
c000b637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b63b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b642:	83 f9 19             	cmp    ecx,0x19
c000b645:	77 24                	ja     c000b66b <Directory::exists()+0x39>
c000b647:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b64e:	85 c9                	test   ecx,ecx
c000b650:	74 19                	je     c000b66b <Directory::exists()+0x39>
c000b652:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b658:	85 c9                	test   ecx,ecx
c000b65a:	74 0f                	je     c000b66b <Directory::exists()+0x39>
c000b65c:	50                   	push   eax
c000b65d:	83 c2 0d             	add    edx,0xd
c000b660:	50                   	push   eax
c000b661:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b663:	52                   	push   edx
c000b664:	51                   	push   ecx
c000b665:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b668:	83 c4 10             	add    esp,0x10
c000b66b:	83 c4 0c             	add    esp,0xc
c000b66e:	c3                   	ret    
c000b66f:	90                   	nop

c000b670 <Directory::read(dirent*)>:
c000b670:	83 ec 1c             	sub    esp,0x1c
c000b673:	b8 0b 00 00 00       	mov    eax,0xb
c000b678:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b67c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b683:	83 f9 19             	cmp    ecx,0x19
c000b686:	77 30                	ja     c000b6b8 <Directory::read(dirent*)+0x48>
c000b688:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b68f:	85 c9                	test   ecx,ecx
c000b691:	74 25                	je     c000b6b8 <Directory::read(dirent*)+0x48>
c000b693:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b69a:	74 1c                	je     c000b6b8 <Directory::read(dirent*)+0x48>
c000b69c:	83 ec 0c             	sub    esp,0xc
c000b69f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b6a1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b6a5:	51                   	push   ecx
c000b6a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6aa:	6a 00                	push   0x0
c000b6ac:	68 10 01 00 00       	push   0x110
c000b6b1:	52                   	push   edx
c000b6b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b6b5:	83 c4 20             	add    esp,0x20
c000b6b8:	83 c4 1c             	add    esp,0x1c
c000b6bb:	c3                   	ret    

c000b6bc <Directory::create()>:
c000b6bc:	83 ec 0c             	sub    esp,0xc
c000b6bf:	b8 0b 00 00 00       	mov    eax,0xb
c000b6c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6cf:	83 f9 19             	cmp    ecx,0x19
c000b6d2:	77 2f                	ja     c000b703 <Directory::create()+0x47>
c000b6d4:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6db:	85 c9                	test   ecx,ecx
c000b6dd:	74 24                	je     c000b703 <Directory::create()+0x47>
c000b6df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6e5:	85 c9                	test   ecx,ecx
c000b6e7:	74 1a                	je     c000b703 <Directory::create()+0x47>
c000b6e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6ed:	b8 06 00 00 00       	mov    eax,0x6
c000b6f2:	75 0f                	jne    c000b703 <Directory::create()+0x47>
c000b6f4:	50                   	push   eax
c000b6f5:	83 c2 0d             	add    edx,0xd
c000b6f8:	50                   	push   eax
c000b6f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6fb:	52                   	push   edx
c000b6fc:	51                   	push   ecx
c000b6fd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b700:	83 c4 10             	add    esp,0x10
c000b703:	83 c4 0c             	add    esp,0xc
c000b706:	c3                   	ret    
c000b707:	90                   	nop

c000b708 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b708:	b8 0a 00 00 00       	mov    eax,0xa
c000b70d:	c3                   	ret    
c000b70e:	66 90                	xchg   ax,ax

c000b710 <Bus::Bus(char const*)>:
c000b710:	83 ec 0c             	sub    esp,0xc
c000b713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b717:	83 ec 08             	sub    esp,0x8
c000b71a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71e:	50                   	push   eax
c000b71f:	e8 28 08 00 00       	call   c000bf4c <Device::Device(char const*)>
c000b724:	83 c4 10             	add    esp,0x10
c000b727:	ba 68 02 02 c0       	mov    edx,0xc0020268
c000b72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b730:	89 10                	mov    DWORD PTR [eax],edx
c000b732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b736:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b740:	90                   	nop
c000b741:	83 c4 0c             	add    esp,0xc
c000b744:	c3                   	ret    
c000b745:	90                   	nop
c000b746:	66 90                	xchg   ax,ax

c000b748 <Bus::~Bus()>:
c000b748:	83 ec 0c             	sub    esp,0xc
c000b74b:	ba 68 02 02 c0       	mov    edx,0xc0020268
c000b750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b754:	89 10                	mov    DWORD PTR [eax],edx
c000b756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75a:	83 ec 0c             	sub    esp,0xc
c000b75d:	50                   	push   eax
c000b75e:	e8 53 05 00 00       	call   c000bcb6 <Device::~Device()>
c000b763:	83 c4 10             	add    esp,0x10
c000b766:	90                   	nop
c000b767:	83 c4 0c             	add    esp,0xc
c000b76a:	c3                   	ret    
c000b76b:	90                   	nop

c000b76c <Bus::~Bus()>:
c000b76c:	83 ec 0c             	sub    esp,0xc
c000b76f:	83 ec 0c             	sub    esp,0xc
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	e8 cd ff ff ff       	call   c000b748 <Bus::~Bus()>
c000b77b:	83 c4 10             	add    esp,0x10
c000b77e:	83 ec 08             	sub    esp,0x8
c000b781:	68 58 01 00 00       	push   0x158
c000b786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b78a:	e8 c4 f0 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000b78f:	83 c4 10             	add    esp,0x10
c000b792:	83 c4 0c             	add    esp,0xc
c000b795:	c3                   	ret    

c000b796 <beepThread(void*)>:
c000b796:	83 ec 0c             	sub    esp,0xc
c000b799:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b79e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7a2:	48                   	dec    eax
c000b7a3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b7a8:	75 01                	jne    c000b7ab <beepThread(void*)+0x15>
c000b7aa:	fb                   	sti    
c000b7ab:	6b c2 0a             	imul   eax,edx,0xa
c000b7ae:	83 ec 0c             	sub    esp,0xc
c000b7b1:	50                   	push   eax
c000b7b2:	e8 35 9b 00 00       	call   c00152ec <milliTenthSleep(unsigned int)>
c000b7b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b7be:	e8 f9 b9 00 00       	call   c00171bc <HalMakeBeep(int)>
c000b7c3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b7cb:	83 c4 1c             	add    esp,0x1c
c000b7ce:	e9 fd 99 00 00       	jmp    c00151d0 <blockTask(TaskState)>

c000b7d3 <Krnl::beep(int, int, bool)>:
c000b7d3:	56                   	push   esi
c000b7d4:	53                   	push   ebx
c000b7d5:	83 ec 10             	sub    esp,0x10
c000b7d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b7dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b7e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7e4:	e8 d3 b9 00 00       	call   c00171bc <HalMakeBeep(int)>
c000b7e9:	89 f0                	mov    eax,esi
c000b7eb:	83 c4 10             	add    esp,0x10
c000b7ee:	84 c0                	test   al,al
c000b7f0:	74 1e                	je     c000b810 <Krnl::beep(int, int, bool)+0x3d>
c000b7f2:	6b db 0a             	imul   ebx,ebx,0xa
c000b7f5:	83 ec 0c             	sub    esp,0xc
c000b7f8:	53                   	push   ebx
c000b7f9:	e8 ee 9a 00 00       	call   c00152ec <milliTenthSleep(unsigned int)>
c000b7fe:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b806:	83 c4 14             	add    esp,0x14
c000b809:	5b                   	pop    ebx
c000b80a:	5e                   	pop    esi
c000b80b:	e9 ac b9 00 00       	jmp    c00171bc <HalMakeBeep(int)>
c000b810:	68 e6 00 00 00       	push   0xe6
c000b815:	53                   	push   ebx
c000b816:	68 96 b7 00 c0       	push   0xc000b796
c000b81b:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b821:	e8 5e 95 00 00       	call   c0014d84 <Process::createThread(void (*)(void*), void*, int)>
c000b826:	83 c4 14             	add    esp,0x14
c000b829:	5b                   	pop    ebx
c000b82a:	5e                   	pop    esi
c000b82b:	c3                   	ret    

c000b82c <User::loadClockSettings(int)>:
c000b82c:	53                   	push   ebx
c000b82d:	83 ec 14             	sub    esp,0x14
c000b830:	68 14 01 00 00       	push   0x114
c000b835:	e8 91 c2 ff ff       	call   c0007acb <malloc>
c000b83a:	83 c4 0c             	add    esp,0xc
c000b83d:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b843:	68 8c 02 02 c0       	push   0xc002028c
c000b848:	50                   	push   eax
c000b849:	89 c3                	mov    ebx,eax
c000b84b:	e8 aa f6 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c000b850:	58                   	pop    eax
c000b851:	5a                   	pop    edx
c000b852:	6a 01                	push   0x1
c000b854:	53                   	push   ebx
c000b855:	e8 5c f7 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c000b85a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b85d:	e8 b2 f7 ff ff       	call   c000b014 <File::close()>
c000b862:	83 c4 10             	add    esp,0x10
c000b865:	85 db                	test   ebx,ebx
c000b867:	74 0f                	je     c000b878 <User::loadClockSettings(int)+0x4c>
c000b869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b86b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b86f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b872:	83 c4 08             	add    esp,0x8
c000b875:	5b                   	pop    ebx
c000b876:	ff e0                	jmp    eax
c000b878:	83 c4 08             	add    esp,0x8
c000b87b:	5b                   	pop    ebx
c000b87c:	c3                   	ret    
c000b87d:	90                   	nop

c000b87e <Clock::Clock(char const*)>:
c000b87e:	83 ec 0c             	sub    esp,0xc
c000b881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b885:	83 ec 08             	sub    esp,0x8
c000b888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88c:	50                   	push   eax
c000b88d:	e8 ba 06 00 00       	call   c000bf4c <Device::Device(char const*)>
c000b892:	83 c4 10             	add    esp,0x10
c000b895:	ba b4 02 02 c0       	mov    edx,0xc00202b4
c000b89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b89e:	89 10                	mov    DWORD PTR [eax],edx
c000b8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8a4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b8ae:	90                   	nop
c000b8af:	83 c4 0c             	add    esp,0xc
c000b8b2:	c3                   	ret    
c000b8b3:	90                   	nop

c000b8b4 <Clock::~Clock()>:
c000b8b4:	83 ec 0c             	sub    esp,0xc
c000b8b7:	ba b4 02 02 c0       	mov    edx,0xc00202b4
c000b8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c0:	89 10                	mov    DWORD PTR [eax],edx
c000b8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c6:	83 ec 0c             	sub    esp,0xc
c000b8c9:	50                   	push   eax
c000b8ca:	e8 e7 03 00 00       	call   c000bcb6 <Device::~Device()>
c000b8cf:	83 c4 10             	add    esp,0x10
c000b8d2:	90                   	nop
c000b8d3:	83 c4 0c             	add    esp,0xc
c000b8d6:	c3                   	ret    
c000b8d7:	90                   	nop

c000b8d8 <Clock::~Clock()>:
c000b8d8:	83 ec 0c             	sub    esp,0xc
c000b8db:	83 ec 0c             	sub    esp,0xc
c000b8de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e2:	e8 cd ff ff ff       	call   c000b8b4 <Clock::~Clock()>
c000b8e7:	83 c4 10             	add    esp,0x10
c000b8ea:	83 ec 08             	sub    esp,0x8
c000b8ed:	68 58 01 00 00       	push   0x158
c000b8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8f6:	e8 58 ef ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000b8fb:	83 c4 10             	add    esp,0x10
c000b8fe:	83 c4 0c             	add    esp,0xc
c000b901:	c3                   	ret    

c000b902 <Clock::timeInSecondsLocal()>:
c000b902:	53                   	push   ebx
c000b903:	83 ec 14             	sub    esp,0x14
c000b906:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b90a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b90c:	50                   	push   eax
c000b90d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b910:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b917:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b91d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b923:	89 cb                	mov    ebx,ecx
c000b925:	c1 fb 1f             	sar    ebx,0x1f
c000b928:	01 c8                	add    eax,ecx
c000b92a:	11 da                	adc    edx,ebx
c000b92c:	83 c4 10             	add    esp,0x10
c000b92f:	31 c9                	xor    ecx,ecx
c000b931:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b938:	74 05                	je     c000b93f <Clock::timeInSecondsLocal()+0x3d>
c000b93a:	b9 08 07 00 00       	mov    ecx,0x708
c000b93f:	31 db                	xor    ebx,ebx
c000b941:	01 c8                	add    eax,ecx
c000b943:	11 da                	adc    edx,ebx
c000b945:	83 c4 08             	add    esp,0x8
c000b948:	5b                   	pop    ebx
c000b949:	c3                   	ret    

c000b94a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b94a:	57                   	push   edi
c000b94b:	56                   	push   esi
c000b94c:	53                   	push   ebx
c000b94d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b951:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b955:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b959:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b95b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b95e:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b965:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b96b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b971:	99                   	cdq    
c000b972:	29 c6                	sub    esi,eax
c000b974:	19 d7                	sbb    edi,edx
c000b976:	89 f0                	mov    eax,esi
c000b978:	31 f6                	xor    esi,esi
c000b97a:	89 fa                	mov    edx,edi
c000b97c:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b983:	74 05                	je     c000b98a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b985:	be 08 07 00 00       	mov    esi,0x708
c000b98a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b98e:	31 ff                	xor    edi,edi
c000b990:	29 f0                	sub    eax,esi
c000b992:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b996:	19 fa                	sbb    edx,edi
c000b998:	89 d8                	mov    eax,ebx
c000b99a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b99e:	5b                   	pop    ebx
c000b99f:	5e                   	pop    esi
c000b9a0:	5f                   	pop    edi
c000b9a1:	ff e0                	jmp    eax

c000b9a3 <datetimeToSeconds(datetime_t)>:
c000b9a3:	55                   	push   ebp
c000b9a4:	57                   	push   edi
c000b9a5:	56                   	push   esi
c000b9a6:	53                   	push   ebx
c000b9a7:	83 ec 0c             	sub    esp,0xc
c000b9aa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b9ae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b9b2:	89 f7                	mov    edi,esi
c000b9b4:	89 f0                	mov    eax,esi
c000b9b6:	0f b6 cf             	movzx  ecx,bh
c000b9b9:	0f b6 c4             	movzx  eax,ah
c000b9bc:	c1 ef 10             	shr    edi,0x10
c000b9bf:	89 da                	mov    edx,ebx
c000b9c1:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000b9c4:	89 f9                	mov    ecx,edi
c000b9c6:	0f b6 f9             	movzx  edi,cl
c000b9c9:	89 f1                	mov    ecx,esi
c000b9cb:	6b c0 3c             	imul   eax,eax,0x3c
c000b9ce:	0f b6 f1             	movzx  esi,cl
c000b9d1:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000b9d7:	0f b6 db             	movzx  ebx,bl
c000b9da:	c1 ea 10             	shr    edx,0x10
c000b9dd:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000b9e3:	01 f8                	add    eax,edi
c000b9e5:	01 f0                	add    eax,esi
c000b9e7:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9ea:	c1 f8 1f             	sar    eax,0x1f
c000b9ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b9f1:	89 e8                	mov    eax,ebp
c000b9f3:	0f b6 c0             	movzx  eax,al
c000b9f6:	8b 0c 85 00 03 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfd00]
c000b9fd:	83 f8 01             	cmp    eax,0x1
c000ba00:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000ba04:	0f b7 da             	movzx  ebx,dx
c000ba07:	76 27                	jbe    c000ba30 <datetimeToSeconds(datetime_t)+0x8d>
c000ba09:	80 e2 03             	and    dl,0x3
c000ba0c:	75 22                	jne    c000ba30 <datetimeToSeconds(datetime_t)+0x8d>
c000ba0e:	31 d2                	xor    edx,edx
c000ba10:	be 64 00 00 00       	mov    esi,0x64
c000ba15:	89 d8                	mov    eax,ebx
c000ba17:	f7 f6                	div    esi
c000ba19:	85 d2                	test   edx,edx
c000ba1b:	75 12                	jne    c000ba2f <datetimeToSeconds(datetime_t)+0x8c>
c000ba1d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba23:	be 90 01 00 00       	mov    esi,0x190
c000ba28:	99                   	cdq    
c000ba29:	f7 fe                	idiv   esi
c000ba2b:	85 d2                	test   edx,edx
c000ba2d:	75 01                	jne    c000ba30 <datetimeToSeconds(datetime_t)+0x8d>
c000ba2f:	41                   	inc    ecx
c000ba30:	83 fb 46             	cmp    ebx,0x46
c000ba33:	76 48                	jbe    c000ba7d <datetimeToSeconds(datetime_t)+0xda>
c000ba35:	be 46 00 00 00       	mov    esi,0x46
c000ba3a:	bf 64 00 00 00       	mov    edi,0x64
c000ba3f:	bd 90 01 00 00       	mov    ebp,0x190
c000ba44:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba4a:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba4f:	75 23                	jne    c000ba74 <datetimeToSeconds(datetime_t)+0xd1>
c000ba51:	89 f0                	mov    eax,esi
c000ba53:	99                   	cdq    
c000ba54:	f7 ff                	idiv   edi
c000ba56:	b8 6e 01 00 00       	mov    eax,0x16e
c000ba5b:	85 d2                	test   edx,edx
c000ba5d:	75 15                	jne    c000ba74 <datetimeToSeconds(datetime_t)+0xd1>
c000ba5f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ba65:	99                   	cdq    
c000ba66:	f7 fd                	idiv   ebp
c000ba68:	83 fa 01             	cmp    edx,0x1
c000ba6b:	19 c0                	sbb    eax,eax
c000ba6d:	f7 d0                	not    eax
c000ba6f:	05 6e 01 00 00       	add    eax,0x16e
c000ba74:	46                   	inc    esi
c000ba75:	01 c1                	add    ecx,eax
c000ba77:	39 de                	cmp    esi,ebx
c000ba79:	7c c9                	jl     c000ba44 <datetimeToSeconds(datetime_t)+0xa1>
c000ba7b:	eb 34                	jmp    c000bab1 <datetimeToSeconds(datetime_t)+0x10e>
c000ba7d:	74 32                	je     c000bab1 <datetimeToSeconds(datetime_t)+0x10e>
c000ba7f:	b8 45 00 00 00       	mov    eax,0x45
c000ba84:	89 c2                	mov    edx,eax
c000ba86:	83 e2 03             	and    edx,0x3
c000ba89:	39 d8                	cmp    eax,ebx
c000ba8b:	7e 0f                	jle    c000ba9c <datetimeToSeconds(datetime_t)+0xf9>
c000ba8d:	83 fa 01             	cmp    edx,0x1
c000ba90:	19 d2                	sbb    edx,edx
c000ba92:	48                   	dec    eax
c000ba93:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000ba9a:	eb e8                	jmp    c000ba84 <datetimeToSeconds(datetime_t)+0xe1>
c000ba9c:	85 d2                	test   edx,edx
c000ba9e:	b8 6d 01 00 00       	mov    eax,0x16d
c000baa3:	75 0a                	jne    c000baaf <datetimeToSeconds(datetime_t)+0x10c>
c000baa5:	83 fb 01             	cmp    ebx,0x1
c000baa8:	19 c0                	sbb    eax,eax
c000baaa:	05 6e 01 00 00       	add    eax,0x16e
c000baaf:	29 c1                	sub    ecx,eax
c000bab1:	b8 80 51 01 00       	mov    eax,0x15180
c000bab6:	f7 e9                	imul   ecx
c000bab8:	03 04 24             	add    eax,DWORD PTR [esp]
c000babb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000babf:	83 c4 0c             	add    esp,0xc
c000bac2:	5b                   	pop    ebx
c000bac3:	5e                   	pop    esi
c000bac4:	5f                   	pop    edi
c000bac5:	5d                   	pop    ebp
c000bac6:	c3                   	ret    
c000bac7:	90                   	nop

c000bac8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bac8:	57                   	push   edi
c000bac9:	56                   	push   esi
c000baca:	53                   	push   ebx
c000bacb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bacf:	8b 06                	mov    eax,DWORD PTR [esi]
c000bad1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bad4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bad8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000badc:	e8 c2 fe ff ff       	call   c000b9a3 <datetimeToSeconds(datetime_t)>
c000bae1:	59                   	pop    ecx
c000bae2:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bae9:	5b                   	pop    ebx
c000baea:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000baf0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000baf6:	89 cb                	mov    ebx,ecx
c000baf8:	c1 fb 1f             	sar    ebx,0x1f
c000bafb:	29 c8                	sub    eax,ecx
c000bafd:	19 da                	sbb    edx,ebx
c000baff:	31 c9                	xor    ecx,ecx
c000bb01:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb08:	74 05                	je     c000bb0f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb0a:	b9 08 07 00 00       	mov    ecx,0x708
c000bb0f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb13:	31 db                	xor    ebx,ebx
c000bb15:	29 c8                	sub    eax,ecx
c000bb17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb1b:	19 da                	sbb    edx,ebx
c000bb1d:	89 f8                	mov    eax,edi
c000bb1f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb23:	5b                   	pop    ebx
c000bb24:	5e                   	pop    esi
c000bb25:	5f                   	pop    edi
c000bb26:	ff e0                	jmp    eax

c000bb28 <secondsToDatetime(unsigned long long)>:
c000bb28:	55                   	push   ebp
c000bb29:	57                   	push   edi
c000bb2a:	56                   	push   esi
c000bb2b:	53                   	push   ebx
c000bb2c:	83 ec 1c             	sub    esp,0x1c
c000bb2f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb33:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb3b:	6a 00                	push   0x0
c000bb3d:	68 80 51 01 00       	push   0x15180
c000bb42:	55                   	push   ebp
c000bb43:	57                   	push   edi
c000bb44:	e8 47 2a 01 00       	call   c001e590 <__udivdi3>
c000bb49:	83 c4 10             	add    esp,0x10
c000bb4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb50:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bb56:	6a 00                	push   0x0
c000bb58:	68 80 51 01 00       	push   0x15180
c000bb5d:	55                   	push   ebp
c000bb5e:	57                   	push   edi
c000bb5f:	bf 10 0e 00 00       	mov    edi,0xe10
c000bb64:	e8 27 2b 01 00       	call   c001e690 <__umoddi3>
c000bb69:	83 c4 10             	add    esp,0x10
c000bb6c:	99                   	cdq    
c000bb6d:	f7 ff                	idiv   edi
c000bb6f:	bf 3c 00 00 00       	mov    edi,0x3c
c000bb74:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bb77:	89 d0                	mov    eax,edx
c000bb79:	99                   	cdq    
c000bb7a:	f7 ff                	idiv   edi
c000bb7c:	85 db                	test   ebx,ebx
c000bb7e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bb81:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bb84:	79 11                	jns    c000bb97 <secondsToDatetime(unsigned long long)+0x6f>
c000bb86:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bb8a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bb90:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb95:	eb 07                	jmp    c000bb9e <secondsToDatetime(unsigned long long)+0x76>
c000bb97:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb9c:	89 d8                	mov    eax,ebx
c000bb9e:	99                   	cdq    
c000bb9f:	bf b4 05 00 00       	mov    edi,0x5b4
c000bba4:	f7 f9                	idiv   ecx
c000bba6:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bbab:	31 d2                	xor    edx,edx
c000bbad:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bbb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bbbe:	01 c3                	add    ebx,eax
c000bbc0:	89 d8                	mov    eax,ebx
c000bbc2:	f7 f1                	div    ecx
c000bbc4:	31 d2                	xor    edx,edx
c000bbc6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bbc9:	89 d8                	mov    eax,ebx
c000bbcb:	f7 f7                	div    edi
c000bbcd:	31 d2                	xor    edx,edx
c000bbcf:	29 c1                	sub    ecx,eax
c000bbd1:	89 d8                	mov    eax,ebx
c000bbd3:	f7 f5                	div    ebp
c000bbd5:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bbda:	31 d2                	xor    edx,edx
c000bbdc:	29 c1                	sub    ecx,eax
c000bbde:	89 c8                	mov    eax,ecx
c000bbe0:	f7 f5                	div    ebp
c000bbe2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bbe7:	31 d2                	xor    edx,edx
c000bbe9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbed:	89 c8                	mov    eax,ecx
c000bbef:	f7 f5                	div    ebp
c000bbf1:	31 d2                	xor    edx,edx
c000bbf3:	01 c3                	add    ebx,eax
c000bbf5:	89 c8                	mov    eax,ecx
c000bbf7:	f7 f7                	div    edi
c000bbf9:	bf 99 00 00 00       	mov    edi,0x99
c000bbfe:	31 d2                	xor    edx,edx
c000bc00:	29 c3                	sub    ebx,eax
c000bc02:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc0a:	29 c3                	sub    ebx,eax
c000bc0c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc0f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc12:	83 c1 02             	add    ecx,0x2
c000bc15:	89 c8                	mov    eax,ecx
c000bc17:	bb 05 00 00 00       	mov    ebx,0x5
c000bc1c:	f7 f7                	div    edi
c000bc1e:	31 d2                	xor    edx,edx
c000bc20:	89 c7                	mov    edi,eax
c000bc22:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc28:	83 c0 02             	add    eax,0x2
c000bc2b:	f7 f3                	div    ebx
c000bc2d:	89 eb                	mov    ebx,ebp
c000bc2f:	29 c3                	sub    ebx,eax
c000bc31:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc37:	88 1e                	mov    BYTE PTR [esi],bl
c000bc39:	19 c0                	sbb    eax,eax
c000bc3b:	31 d2                	xor    edx,edx
c000bc3d:	83 e0 0c             	and    eax,0xc
c000bc40:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc44:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc4c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bc50:	83 f9 01             	cmp    ecx,0x1
c000bc53:	0f 96 c2             	setbe  dl
c000bc56:	41                   	inc    ecx
c000bc57:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bc5a:	01 d0                	add    eax,edx
c000bc5c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bc60:	83 c4 1c             	add    esp,0x1c
c000bc63:	89 f0                	mov    eax,esi
c000bc65:	5b                   	pop    ebx
c000bc66:	5e                   	pop    esi
c000bc67:	5f                   	pop    edi
c000bc68:	5d                   	pop    ebp
c000bc69:	c2 04 00             	ret    0x4

c000bc6c <Clock::timeInDatetimeLocal()>:
c000bc6c:	53                   	push   ebx
c000bc6d:	83 ec 14             	sub    esp,0x14
c000bc70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc74:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc78:	e8 85 fc ff ff       	call   c000b902 <Clock::timeInSecondsLocal()>
c000bc7d:	83 c4 0c             	add    esp,0xc
c000bc80:	52                   	push   edx
c000bc81:	50                   	push   eax
c000bc82:	53                   	push   ebx
c000bc83:	e8 a0 fe ff ff       	call   c000bb28 <secondsToDatetime(unsigned long long)>
c000bc88:	89 d8                	mov    eax,ebx
c000bc8a:	83 c4 14             	add    esp,0x14
c000bc8d:	5b                   	pop    ebx
c000bc8e:	c2 04 00             	ret    0x4
c000bc91:	90                   	nop

c000bc92 <Device::hibernate()>:
c000bc92:	c3                   	ret    
c000bc93:	90                   	nop

c000bc94 <Device::wake()>:
c000bc94:	c3                   	ret    
c000bc95:	90                   	nop

c000bc96 <Device::detect()>:
c000bc96:	c3                   	ret    
c000bc97:	90                   	nop

c000bc98 <Device::disableLegacy()>:
c000bc98:	c3                   	ret    
c000bc99:	90                   	nop

c000bc9a <Device::powerSaving(PowerSavingLevel)>:
c000bc9a:	c3                   	ret    
c000bc9b:	90                   	nop

c000bc9c <DriverlessDevice::close(int, int, void*)>:
c000bc9c:	31 c0                	xor    eax,eax
c000bc9e:	c3                   	ret    
c000bc9f:	90                   	nop

c000bca0 <DriverlessDevice::detect()>:
c000bca0:	c3                   	ret    
c000bca1:	90                   	nop

c000bca2 <DriverlessDevice::open(int, int, void*)>:
c000bca2:	83 ec 18             	sub    esp,0x18
c000bca5:	68 30 03 02 c0       	push   0xc0020330
c000bcaa:	e8 26 4b 00 00       	call   c00107d5 <KePanic(char const*)>
c000bcaf:	83 c8 ff             	or     eax,0xffffffff
c000bcb2:	83 c4 1c             	add    esp,0x1c
c000bcb5:	c3                   	ret    

c000bcb6 <Device::~Device()>:
c000bcb6:	ba 90 03 02 c0       	mov    edx,0xc0020390
c000bcbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcbf:	89 10                	mov    DWORD PTR [eax],edx
c000bcc1:	90                   	nop
c000bcc2:	c3                   	ret    
c000bcc3:	90                   	nop

c000bcc4 <Device::~Device()>:
c000bcc4:	83 ec 0c             	sub    esp,0xc
c000bcc7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bccb:	e8 e6 ff ff ff       	call   c000bcb6 <Device::~Device()>
c000bcd0:	83 c4 04             	add    esp,0x4
c000bcd3:	83 ec 08             	sub    esp,0x8
c000bcd6:	68 58 01 00 00       	push   0x158
c000bcdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcdf:	e8 6f eb ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000bce4:	83 c4 10             	add    esp,0x10
c000bce7:	83 c4 0c             	add    esp,0xc
c000bcea:	c3                   	ret    
c000bceb:	90                   	nop

c000bcec <Device::findAndLoadDriver()>:
c000bcec:	c7 44 24 04 4e 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc002034e
c000bcf4:	e9 58 ec ff ff       	jmp    c000a951 <Dbg::kprintf(char const*, ...)>
c000bcf9:	90                   	nop

c000bcfa <Device::preOpenPCI(PCIDeviceInfo)>:
c000bcfa:	57                   	push   edi
c000bcfb:	b9 09 00 00 00       	mov    ecx,0x9
c000bd00:	56                   	push   esi
c000bd01:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd05:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd09:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd13:	81 c7 18 01 00 00    	add    edi,0x118
c000bd19:	fc                   	cld    
c000bd1a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd1c:	5e                   	pop    esi
c000bd1d:	5f                   	pop    edi
c000bd1e:	c3                   	ret    
c000bd1f:	90                   	nop

c000bd20 <Device::preOpenACPI(void*, char*, char*)>:
c000bd20:	57                   	push   edi
c000bd21:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd26:	56                   	push   esi
c000bd27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd33:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd3d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd43:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bd49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd4b:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bd51:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd55:	b9 0e 00 00 00       	mov    ecx,0xe
c000bd5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd5c:	5e                   	pop    esi
c000bd5d:	5f                   	pop    edi
c000bd5e:	c3                   	ret    
c000bd5f:	90                   	nop

c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bd60:	53                   	push   ebx
c000bd61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd71:	0f b6 c0             	movzx  eax,al
c000bd74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd7c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bd80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd84:	5b                   	pop    ebx
c000bd85:	e9 aa 05 00 00       	jmp    c000c334 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bd8a <Device::getParent()>:
c000bd8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd8e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bd94:	c3                   	ret    
c000bd95:	90                   	nop

c000bd96 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bd96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd9e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bda3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bda7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdaf:	e9 f7 06 00 00       	jmp    c000c4ab <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bdb4 <Device::addChild(Device*)>:
c000bdb4:	53                   	push   ebx
c000bdb5:	83 ec 08             	sub    esp,0x8
c000bdb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bdc0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bdc6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bdcc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bdce:	85 d2                	test   edx,edx
c000bdd0:	74 04                	je     c000bdd6 <Device::addChild(Device*)+0x22>
c000bdd2:	89 d3                	mov    ebx,edx
c000bdd4:	eb f6                	jmp    c000bdcc <Device::addChild(Device*)+0x18>
c000bdd6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bdd9:	83 ec 0c             	sub    esp,0xc
c000bddc:	6a 08                	push   0x8
c000bdde:	e8 e8 bc ff ff       	call   c0007acb <malloc>
c000bde3:	89 03                	mov    DWORD PTR [ebx],eax
c000bde5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bdeb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bdf2:	83 c4 18             	add    esp,0x18
c000bdf5:	5b                   	pop    ebx
c000bdf6:	c3                   	ret    
c000bdf7:	90                   	nop

c000bdf8 <Device::removeAllChildren()>:
c000bdf8:	56                   	push   esi
c000bdf9:	53                   	push   ebx
c000bdfa:	52                   	push   edx
c000bdfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bdff:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be08:	74 17                	je     c000be21 <Device::removeAllChildren()+0x29>
c000be0a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be0d:	85 c0                	test   eax,eax
c000be0f:	74 0c                	je     c000be1d <Device::removeAllChildren()+0x25>
c000be11:	8b 10                	mov    edx,DWORD PTR [eax]
c000be13:	83 ec 0c             	sub    esp,0xc
c000be16:	50                   	push   eax
c000be17:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be1a:	83 c4 10             	add    esp,0x10
c000be1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be1f:	eb e4                	jmp    c000be05 <Device::removeAllChildren()+0xd>
c000be21:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be2d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be3a:	58                   	pop    eax
c000be3b:	5b                   	pop    ebx
c000be3c:	5e                   	pop    esi
c000be3d:	c3                   	ret    

c000be3e <Device::hibernateAll()>:
c000be3e:	53                   	push   ebx
c000be3f:	83 ec 14             	sub    esp,0x14
c000be42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be48:	53                   	push   ebx
c000be49:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be52:	83 c4 10             	add    esp,0x10
c000be55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be58:	74 0f                	je     c000be69 <Device::hibernateAll()+0x2b>
c000be5a:	83 ec 0c             	sub    esp,0xc
c000be5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be60:	e8 d9 ff ff ff       	call   c000be3e <Device::hibernateAll()>
c000be65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be67:	eb e9                	jmp    c000be52 <Device::hibernateAll()+0x14>
c000be69:	83 c4 08             	add    esp,0x8
c000be6c:	5b                   	pop    ebx
c000be6d:	c3                   	ret    

c000be6e <Device::wakeAll()>:
c000be6e:	53                   	push   ebx
c000be6f:	83 ec 14             	sub    esp,0x14
c000be72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be76:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be78:	53                   	push   ebx
c000be79:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000be7c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be88:	74 0f                	je     c000be99 <Device::wakeAll()+0x2b>
c000be8a:	83 ec 0c             	sub    esp,0xc
c000be8d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be90:	e8 d9 ff ff ff       	call   c000be6e <Device::wakeAll()>
c000be95:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be97:	eb e9                	jmp    c000be82 <Device::wakeAll()+0x14>
c000be99:	83 c4 08             	add    esp,0x8
c000be9c:	5b                   	pop    ebx
c000be9d:	c3                   	ret    

c000be9e <Device::detectAll()>:
c000be9e:	53                   	push   ebx
c000be9f:	83 ec 14             	sub    esp,0x14
c000bea2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bea6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bea8:	53                   	push   ebx
c000bea9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000beac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beb2:	83 c4 10             	add    esp,0x10
c000beb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000beb8:	74 0f                	je     c000bec9 <Device::detectAll()+0x2b>
c000beba:	83 ec 0c             	sub    esp,0xc
c000bebd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bec0:	e8 d9 ff ff ff       	call   c000be9e <Device::detectAll()>
c000bec5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bec7:	eb e9                	jmp    c000beb2 <Device::detectAll()+0x14>
c000bec9:	83 c4 08             	add    esp,0x8
c000becc:	5b                   	pop    ebx
c000becd:	c3                   	ret    

c000bece <Device::disableLegacyAll()>:
c000bece:	c3                   	ret    
c000becf:	90                   	nop

c000bed0 <Device::loadDriversForAll()>:
c000bed0:	c3                   	ret    
c000bed1:	90                   	nop

c000bed2 <Device::closeAll()>:
c000bed2:	53                   	push   ebx
c000bed3:	83 ec 08             	sub    esp,0x8
c000bed6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000beda:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bedc:	6a 00                	push   0x0
c000bede:	6a 00                	push   0x0
c000bee0:	6a 00                	push   0x0
c000bee2:	53                   	push   ebx
c000bee3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bee6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beec:	83 c4 10             	add    esp,0x10
c000beef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bef2:	74 0f                	je     c000bf03 <Device::closeAll()+0x31>
c000bef4:	83 ec 0c             	sub    esp,0xc
c000bef7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000befa:	e8 d3 ff ff ff       	call   c000bed2 <Device::closeAll()>
c000beff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf01:	eb e9                	jmp    c000beec <Device::closeAll()+0x1a>
c000bf03:	83 c4 08             	add    esp,0x8
c000bf06:	5b                   	pop    ebx
c000bf07:	c3                   	ret    

c000bf08 <Device::powerSavingAll(PowerSavingLevel)>:
c000bf08:	56                   	push   esi
c000bf09:	53                   	push   ebx
c000bf0a:	83 ec 0c             	sub    esp,0xc
c000bf0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf11:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf15:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf17:	56                   	push   esi
c000bf18:	53                   	push   ebx
c000bf19:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf22:	83 c4 10             	add    esp,0x10
c000bf25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf28:	74 0f                	je     c000bf39 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf2a:	52                   	push   edx
c000bf2b:	52                   	push   edx
c000bf2c:	56                   	push   esi
c000bf2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf30:	e8 d3 ff ff ff       	call   c000bf08 <Device::powerSavingAll(PowerSavingLevel)>
c000bf35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf37:	eb e9                	jmp    c000bf22 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf39:	58                   	pop    eax
c000bf3a:	5b                   	pop    ebx
c000bf3b:	5e                   	pop    esi
c000bf3c:	c3                   	ret    
c000bf3d:	90                   	nop

c000bf3e <Device::setName(char const*)>:
c000bf3e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf46:	e9 05 47 ff ff       	jmp    c0000650 <strcpy>
c000bf4b:	90                   	nop

c000bf4c <Device::Device(char const*)>:
c000bf4c:	83 ec 1c             	sub    esp,0x1c
c000bf4f:	ba 90 03 02 c0       	mov    edx,0xc0020390
c000bf54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf58:	89 10                	mov    DWORD PTR [eax],edx
c000bf5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf5e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bf68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf6c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bf76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf7a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bf84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf88:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bf92:	83 ec 08             	sub    esp,0x8
c000bf95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf9d:	e8 9c ff ff ff       	call   c000bf3e <Device::setName(char const*)>
c000bfa2:	83 c4 10             	add    esp,0x10
c000bfa5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bfad:	83 ec 0c             	sub    esp,0xc
c000bfb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfb4:	e8 12 bb ff ff       	call   c0007acb <malloc>
c000bfb9:	83 c4 10             	add    esp,0x10
c000bfbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfc9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bfcd:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bfd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfdd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bff8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bfff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c003:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c00e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c01c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c02a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c038:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c042:	90                   	nop
c000c043:	83 c4 1c             	add    esp,0x1c
c000c046:	c3                   	ret    
c000c047:	90                   	nop

c000c048 <Device::getName()>:
c000c048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c04c:	05 d0 00 00 00       	add    eax,0xd0
c000c051:	c3                   	ret    

c000c052 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c052:	83 ec 0c             	sub    esp,0xc
c000c055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c059:	83 ec 08             	sub    esp,0x8
c000c05c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c060:	50                   	push   eax
c000c061:	e8 e6 fe ff ff       	call   c000bf4c <Device::Device(char const*)>
c000c066:	83 c4 10             	add    esp,0x10
c000c069:	ba bc 03 02 c0       	mov    edx,0xc00203bc
c000c06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c072:	89 10                	mov    DWORD PTR [eax],edx
c000c074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c078:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c082:	90                   	nop
c000c083:	83 c4 0c             	add    esp,0xc
c000c086:	c3                   	ret    
c000c087:	90                   	nop

c000c088 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c088:	57                   	push   edi
c000c089:	56                   	push   esi
c000c08a:	53                   	push   ebx
c000c08b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c08f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c093:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c097:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c09d:	75 0c                	jne    c000c0ab <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c09f:	52                   	push   edx
c000c0a0:	52                   	push   edx
c000c0a1:	53                   	push   ebx
c000c0a2:	56                   	push   esi
c000c0a3:	e8 9a 29 01 00       	call   c001ea42 <LinkedList<Device>::addElement(Device*)>
c000c0a8:	83 c4 10             	add    esp,0x10
c000c0ab:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0b4:	74 12                	je     c000c0c8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c0b6:	50                   	push   eax
c000c0b7:	57                   	push   edi
c000c0b8:	56                   	push   esi
c000c0b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0bc:	e8 c7 ff ff ff       	call   c000c088 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0c3:	83 c4 10             	add    esp,0x10
c000c0c6:	eb e9                	jmp    c000c0b1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c0c8:	5b                   	pop    ebx
c000c0c9:	5e                   	pop    esi
c000c0ca:	5f                   	pop    edi
c000c0cb:	c3                   	ret    

c000c0cc <getDevicesOfType(DeviceType)>:
c000c0cc:	53                   	push   ebx
c000c0cd:	83 ec 14             	sub    esp,0x14
c000c0d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0d4:	53                   	push   ebx
c000c0d5:	e8 44 2a 01 00       	call   c001eb1e <LinkedList<Device>::LinkedList()>
c000c0da:	83 c4 0c             	add    esp,0xc
c000c0dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c0e1:	53                   	push   ebx
c000c0e2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c0e8:	e8 9b ff ff ff       	call   c000c088 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0ed:	83 c4 18             	add    esp,0x18
c000c0f0:	89 d8                	mov    eax,ebx
c000c0f2:	5b                   	pop    ebx
c000c0f3:	c2 04 00             	ret    0x4
c000c0f6:	66 90                	xchg   ax,ax

c000c0f8 <HardDiskController::HardDiskController(char const*)>:
c000c0f8:	83 ec 0c             	sub    esp,0xc
c000c0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ff:	83 ec 08             	sub    esp,0x8
c000c102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c106:	50                   	push   eax
c000c107:	e8 40 fe ff ff       	call   c000bf4c <Device::Device(char const*)>
c000c10c:	83 c4 10             	add    esp,0x10
c000c10f:	ba e8 03 02 c0       	mov    edx,0xc00203e8
c000c114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c118:	89 10                	mov    DWORD PTR [eax],edx
c000c11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c128:	90                   	nop
c000c129:	83 c4 0c             	add    esp,0xc
c000c12c:	c3                   	ret    
c000c12d:	90                   	nop
c000c12e:	66 90                	xchg   ax,ax

c000c130 <HardDiskController::~HardDiskController()>:
c000c130:	83 ec 0c             	sub    esp,0xc
c000c133:	ba e8 03 02 c0       	mov    edx,0xc00203e8
c000c138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13c:	89 10                	mov    DWORD PTR [eax],edx
c000c13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c142:	83 ec 0c             	sub    esp,0xc
c000c145:	50                   	push   eax
c000c146:	e8 6b fb ff ff       	call   c000bcb6 <Device::~Device()>
c000c14b:	83 c4 10             	add    esp,0x10
c000c14e:	90                   	nop
c000c14f:	83 c4 0c             	add    esp,0xc
c000c152:	c3                   	ret    
c000c153:	90                   	nop

c000c154 <HardDiskController::~HardDiskController()>:
c000c154:	83 ec 0c             	sub    esp,0xc
c000c157:	83 ec 0c             	sub    esp,0xc
c000c15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c15e:	e8 cd ff ff ff       	call   c000c130 <HardDiskController::~HardDiskController()>
c000c163:	83 c4 10             	add    esp,0x10
c000c166:	83 ec 08             	sub    esp,0x8
c000c169:	68 58 01 00 00       	push   0x158
c000c16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c172:	e8 dc e6 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000c177:	83 c4 10             	add    esp,0x10
c000c17a:	83 c4 0c             	add    esp,0xc
c000c17d:	c3                   	ret    

c000c17e <PhysicalDisk::eject()>:
c000c17e:	83 c8 ff             	or     eax,0xffffffff
c000c181:	c3                   	ret    

c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c182:	83 ec 0c             	sub    esp,0xc
c000c185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c189:	83 ec 08             	sub    esp,0x8
c000c18c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c190:	50                   	push   eax
c000c191:	e8 b6 fd ff ff       	call   c000bf4c <Device::Device(char const*)>
c000c196:	83 c4 10             	add    esp,0x10
c000c199:	ba 14 04 02 c0       	mov    edx,0xc0020414
c000c19e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1a2:	89 10                	mov    DWORD PTR [eax],edx
c000c1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1a8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1be:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1d0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1da:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c1e4:	90                   	nop
c000c1e5:	83 c4 0c             	add    esp,0xc
c000c1e8:	c3                   	ret    
c000c1e9:	90                   	nop

c000c1ea <PhysicalDisk::startCache()>:
c000c1ea:	56                   	push   esi
c000c1eb:	53                   	push   ebx
c000c1ec:	83 ec 10             	sub    esp,0x10
c000c1ef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1f3:	6a 44                	push   0x44
c000c1f5:	e8 d1 b8 ff ff       	call   c0007acb <malloc>
c000c1fa:	89 c6                	mov    esi,eax
c000c1fc:	58                   	pop    eax
c000c1fd:	5a                   	pop    edx
c000c1fe:	53                   	push   ebx
c000c1ff:	56                   	push   esi
c000c200:	e8 83 17 00 00       	call   c000d988 <VCache::VCache(PhysicalDisk*)>
c000c205:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c20b:	83 c4 14             	add    esp,0x14
c000c20e:	5b                   	pop    ebx
c000c20f:	5e                   	pop    esi
c000c210:	c3                   	ret    
c000c211:	90                   	nop

c000c212 <PhysicalDisk::~PhysicalDisk()>:
c000c212:	83 ec 0c             	sub    esp,0xc
c000c215:	ba 14 04 02 c0       	mov    edx,0xc0020414
c000c21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21e:	89 10                	mov    DWORD PTR [eax],edx
c000c220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c224:	83 ec 0c             	sub    esp,0xc
c000c227:	50                   	push   eax
c000c228:	e8 89 fa ff ff       	call   c000bcb6 <Device::~Device()>
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	90                   	nop
c000c231:	83 c4 0c             	add    esp,0xc
c000c234:	c3                   	ret    
c000c235:	90                   	nop

c000c236 <PhysicalDisk::~PhysicalDisk()>:
c000c236:	83 ec 0c             	sub    esp,0xc
c000c239:	83 ec 0c             	sub    esp,0xc
c000c23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c240:	e8 cd ff ff ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c000c245:	83 c4 10             	add    esp,0x10
c000c248:	83 ec 08             	sub    esp,0x8
c000c24b:	68 6c 01 00 00       	push   0x16c
c000c250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c254:	e8 fa e5 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000c259:	83 c4 10             	add    esp,0x10
c000c25c:	83 c4 0c             	add    esp,0xc
c000c25f:	c3                   	ret    

c000c260 <int_handler>:
c000c260:	55                   	push   ebp
c000c261:	57                   	push   edi
c000c262:	56                   	push   esi
c000c263:	53                   	push   ebx
c000c264:	83 ec 0c             	sub    esp,0xc
c000c267:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c26e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c272:	74 0b                	je     c000c27f <int_handler+0x1f>
c000c274:	fa                   	cli    
c000c275:	f4                   	hlt    
c000c276:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c27d:	75 f5                	jne    c000c274 <int_handler+0x14>
c000c27f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c282:	8d 46 e0             	lea    eax,[esi-0x20]
c000c285:	83 f8 17             	cmp    eax,0x17
c000c288:	76 40                	jbe    c000c2ca <int_handler+0x6a>
c000c28a:	c1 e6 04             	shl    esi,0x4
c000c28d:	31 db                	xor    ebx,ebx
c000c28f:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c295:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c29b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c29f:	85 c0                	test   eax,eax
c000c2a1:	74 13                	je     c000c2b6 <int_handler+0x56>
c000c2a3:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c2a7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c2aa:	74 2c                	je     c000c2d8 <int_handler+0x78>
c000c2ac:	83 ec 08             	sub    esp,0x8
c000c2af:	52                   	push   edx
c000c2b0:	57                   	push   edi
c000c2b1:	ff d0                	call   eax
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	83 c3 01             	add    ebx,0x1
c000c2b9:	83 fb 04             	cmp    ebx,0x4
c000c2bc:	75 dd                	jne    c000c29b <int_handler+0x3b>
c000c2be:	83 c4 0c             	add    esp,0xc
c000c2c1:	31 c0                	xor    eax,eax
c000c2c3:	5b                   	pop    ebx
c000c2c4:	31 d2                	xor    edx,edx
c000c2c6:	5e                   	pop    esi
c000c2c7:	5f                   	pop    edi
c000c2c8:	5d                   	pop    ebp
c000c2c9:	c3                   	ret    
c000c2ca:	83 ec 0c             	sub    esp,0xc
c000c2cd:	50                   	push   eax
c000c2ce:	e8 26 af 00 00       	call   c00171f9 <HalEndOfInterrupt(int)>
c000c2d3:	83 c4 10             	add    esp,0x10
c000c2d6:	eb b2                	jmp    c000c28a <int_handler+0x2a>
c000c2d8:	83 ec 08             	sub    esp,0x8
c000c2db:	52                   	push   edx
c000c2dc:	57                   	push   edi
c000c2dd:	ff d0                	call   eax
c000c2df:	83 c4 10             	add    esp,0x10
c000c2e2:	83 c4 0c             	add    esp,0xc
c000c2e5:	5b                   	pop    ebx
c000c2e6:	5e                   	pop    esi
c000c2e7:	5f                   	pop    edi
c000c2e8:	5d                   	pop    ebp
c000c2e9:	c3                   	ret    

c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c2ea:	56                   	push   esi
c000c2eb:	31 c0                	xor    eax,eax
c000c2ed:	53                   	push   ebx
c000c2ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c2f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c2f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2fa:	89 ca                	mov    edx,ecx
c000c2fc:	c1 e2 04             	shl    edx,0x4
c000c2ff:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c307:	74 17                	je     c000c320 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c309:	83 c0 01             	add    eax,0x1
c000c30c:	83 f8 04             	cmp    eax,0x4
c000c30f:	75 ee                	jne    c000c2ff <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c311:	c7 44 24 0c 44 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020444
c000c319:	5b                   	pop    ebx
c000c31a:	5e                   	pop    esi
c000c31b:	e9 b5 44 00 00       	jmp    c00107d5 <KePanic(char const*)>
c000c320:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c323:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c32a:	5b                   	pop    ebx
c000c32b:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c332:	5e                   	pop    esi
c000c333:	c3                   	ret    

c000c334 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c334:	55                   	push   ebp
c000c335:	57                   	push   edi
c000c336:	56                   	push   esi
c000c337:	53                   	push   ebx
c000c338:	83 ec 0c             	sub    esp,0xc
c000c33b:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c341:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c345:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c349:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c350:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c353:	74 57                	je     c000c3ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c355:	84 c0                	test   al,al
c000c357:	89 c7                	mov    edi,eax
c000c359:	74 1d                	je     c000c378 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c35b:	83 fe 0f             	cmp    esi,0xf
c000c35e:	0f 8f d9 00 00 00    	jg     c000c43d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c364:	0f b6 b6 80 1e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde180]
c000c36b:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c373:	d1 ef                	shr    edi,1
c000c375:	83 e7 01             	and    edi,0x1
c000c378:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c37d:	83 ec 08             	sub    esp,0x8
c000c380:	31 db                	xor    ebx,ebx
c000c382:	50                   	push   eax
c000c383:	68 51 04 02 c0       	push   0xc0020451
c000c388:	e8 c4 e5 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000c38d:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c392:	83 c4 10             	add    esp,0x10
c000c395:	85 c0                	test   eax,eax
c000c397:	7f 59                	jg     c000c3f2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c399:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c39c:	83 ec 0c             	sub    esp,0xc
c000c39f:	68 68 04 02 c0       	push   0xc0020468
c000c3a4:	e8 2c 44 00 00       	call   c00107d5 <KePanic(char const*)>
c000c3a9:	83 c4 10             	add    esp,0x10
c000c3ac:	89 e8                	mov    eax,ebp
c000c3ae:	31 d2                	xor    edx,edx
c000c3b0:	c1 e0 04             	shl    eax,0x4
c000c3b3:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c3ba:	85 c9                	test   ecx,ecx
c000c3bc:	0f 84 92 00 00 00    	je     c000c454 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c3c2:	83 c2 01             	add    edx,0x1
c000c3c5:	83 fa 04             	cmp    edx,0x4
c000c3c8:	75 e9                	jne    c000c3b3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c3ca:	83 ec 0c             	sub    esp,0xc
c000c3cd:	68 bc 04 02 c0       	push   0xc00204bc
c000c3d2:	e8 fe 43 00 00       	call   c00107d5 <KePanic(char const*)>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c3df:	83 c4 0c             	add    esp,0xc
c000c3e2:	5b                   	pop    ebx
c000c3e3:	5e                   	pop    esi
c000c3e4:	5f                   	pop    edi
c000c3e5:	5d                   	pop    ebp
c000c3e6:	c3                   	ret    
c000c3e7:	83 c3 01             	add    ebx,0x1
c000c3ea:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c3f0:	7e a7                	jle    c000c399 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c3f2:	8b 2c 9d 80 8b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd7480]
c000c3f9:	83 ec 08             	sub    esp,0x8
c000c3fc:	56                   	push   esi
c000c3fd:	55                   	push   ebp
c000c3fe:	e8 6d 15 01 00       	call   c001d970 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	84 c0                	test   al,al
c000c408:	74 dd                	je     c000c3e7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c40a:	89 f8                	mov    eax,edi
c000c40c:	83 ec 04             	sub    esp,0x4
c000c40f:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c416:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c419:	0f b6 f8             	movzx  edi,al
c000c41c:	57                   	push   edi
c000c41d:	89 e8                	mov    eax,ebp
c000c41f:	6a 00                	push   0x0
c000c421:	0f b6 c0             	movzx  eax,al
c000c424:	50                   	push   eax
c000c425:	89 f0                	mov    eax,esi
c000c427:	6a 00                	push   0x0
c000c429:	0f b6 c0             	movzx  eax,al
c000c42c:	6a 00                	push   0x0
c000c42e:	50                   	push   eax
c000c42f:	53                   	push   ebx
c000c430:	e8 a7 16 01 00       	call   c001dadc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c435:	83 c4 20             	add    esp,0x20
c000c438:	e9 6f ff ff ff       	jmp    c000c3ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c43d:	83 ec 0c             	sub    esp,0xc
c000c440:	31 ff                	xor    edi,edi
c000c442:	68 84 04 02 c0       	push   0xc0020484
c000c447:	e8 89 43 00 00       	call   c00107d5 <KePanic(char const*)>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	e9 24 ff ff ff       	jmp    c000c378 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c454:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c457:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c45b:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c462:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c466:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c46d:	83 c4 0c             	add    esp,0xc
c000c470:	89 f0                	mov    eax,esi
c000c472:	5b                   	pop    ebx
c000c473:	5e                   	pop    esi
c000c474:	5f                   	pop    edi
c000c475:	5d                   	pop    ebp
c000c476:	c3                   	ret    

c000c477 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c47b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c47f:	c1 e0 04             	shl    eax,0x4
c000c482:	8d 50 10             	lea    edx,[eax+0x10]
c000c485:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c48b:	74 08                	je     c000c495 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c48d:	83 c0 04             	add    eax,0x4
c000c490:	39 d0                	cmp    eax,edx
c000c492:	75 f1                	jne    c000c485 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c494:	c3                   	ret    
c000c495:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c49f:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4a9:	eb e2                	jmp    c000c48d <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c4ab <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c4ab:	56                   	push   esi
c000c4ac:	53                   	push   ebx
c000c4ad:	83 ec 04             	sub    esp,0x4
c000c4b0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c4b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c4bd:	74 0e                	je     c000c4cd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c4bf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c4c4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c4cb:	75 34                	jne    c000c501 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000c4cd:	8d 43 20             	lea    eax,[ebx+0x20]
c000c4d0:	c1 e0 04             	shl    eax,0x4
c000c4d3:	8d 50 10             	lea    edx,[eax+0x10]
c000c4d6:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c4dc:	74 0d                	je     c000c4eb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c4de:	83 c0 04             	add    eax,0x4
c000c4e1:	39 d0                	cmp    eax,edx
c000c4e3:	75 f1                	jne    c000c4d6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c4e5:	83 c4 04             	add    esp,0x4
c000c4e8:	5b                   	pop    ebx
c000c4e9:	5e                   	pop    esi
c000c4ea:	c3                   	ret    
c000c4eb:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4f5:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4ff:	eb dd                	jmp    c000c4de <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c501:	83 fb 0f             	cmp    ebx,0xf
c000c504:	7f 09                	jg     c000c50f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000c506:	0f b6 9b 80 1e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde180]
c000c50d:	eb be                	jmp    c000c4cd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c50f:	83 ec 0c             	sub    esp,0xc
c000c512:	68 75 04 02 c0       	push   0xc0020475
c000c517:	e8 b9 42 00 00       	call   c00107d5 <KePanic(char const*)>
c000c51c:	83 c4 10             	add    esp,0x10
c000c51f:	eb ac                	jmp    c000c4cd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c521 <setupINTS()>:
c000c521:	31 c0                	xor    eax,eax
c000c523:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c52d:	83 c0 10             	add    eax,0x10
c000c530:	c7 80 b0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb050],0x0
c000c53a:	c7 80 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda04c],0x0
c000c544:	c7 80 b4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb04c],0x0
c000c54e:	c7 80 b8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda048],0x0
c000c558:	c7 80 b8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb048],0x0
c000c562:	c7 80 bc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda044],0x0
c000c56c:	c7 80 bc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb044],0x0
c000c576:	3d 00 10 00 00       	cmp    eax,0x1000
c000c57b:	75 a6                	jne    c000c523 <setupINTS()+0x2>
c000c57d:	c3                   	ret    

c000c57e <convertLegacyIRQNumber(int)>:
c000c57e:	83 ec 0c             	sub    esp,0xc
c000c581:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c58b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c592:	74 0c                	je     c000c5a0 <convertLegacyIRQNumber(int)+0x22>
c000c594:	83 f8 0f             	cmp    eax,0xf
c000c597:	7f 0b                	jg     c000c5a4 <convertLegacyIRQNumber(int)+0x26>
c000c599:	0f b6 80 80 1e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde180]
c000c5a0:	83 c4 0c             	add    esp,0xc
c000c5a3:	c3                   	ret    
c000c5a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5a8:	83 ec 0c             	sub    esp,0xc
c000c5ab:	68 84 04 02 c0       	push   0xc0020484
c000c5b0:	e8 20 42 00 00       	call   c00107d5 <KePanic(char const*)>
c000c5b5:	83 c4 10             	add    esp,0x10
c000c5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5bc:	83 c4 0c             	add    esp,0xc
c000c5bf:	c3                   	ret    

c000c5c0 <startGUI(void*)>:
c000c5c0:	55                   	push   ebp
c000c5c1:	89 e5                	mov    ebp,esp
c000c5c3:	53                   	push   ebx
c000c5c4:	83 ec 04             	sub    esp,0x4
c000c5c7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5cc:	83 e8 01             	sub    eax,0x1
c000c5cf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c5d4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5d9:	85 c0                	test   eax,eax
c000c5db:	75 01                	jne    c000c5de <startGUI(void*)+0x1e>
c000c5dd:	fb                   	sti    
c000c5de:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5e4:	83 ec 08             	sub    esp,0x8
c000c5e7:	6a 01                	push   0x1
c000c5e9:	68 e1 04 02 c0       	push   0xc00204e1
c000c5ee:	e8 71 7f 00 00       	call   c0014564 <Thr::loadDLL(char const*, bool)>
c000c5f3:	83 c4 10             	add    esp,0x10
c000c5f6:	83 ec 08             	sub    esp,0x8
c000c5f9:	53                   	push   ebx
c000c5fa:	50                   	push   eax
c000c5fb:	e8 a4 81 00 00       	call   c00147a4 <Thr::executeDLL(unsigned long, void*)>
c000c600:	83 c4 10             	add    esp,0x10
c000c603:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c609:	83 ec 08             	sub    esp,0x8
c000c60c:	6a 01                	push   0x1
c000c60e:	68 fb 04 02 c0       	push   0xc00204fb
c000c613:	e8 4c 7f 00 00       	call   c0014564 <Thr::loadDLL(char const*, bool)>
c000c618:	83 c4 10             	add    esp,0x10
c000c61b:	83 ec 08             	sub    esp,0x8
c000c61e:	53                   	push   ebx
c000c61f:	50                   	push   eax
c000c620:	e8 7f 81 00 00       	call   c00147a4 <Thr::executeDLL(unsigned long, void*)>
c000c625:	83 c4 10             	add    esp,0x10
c000c628:	90                   	nop
c000c629:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c62c:	c9                   	leave  
c000c62d:	c3                   	ret    

c000c62e <startGUIVESA(void*)>:
c000c62e:	55                   	push   ebp
c000c62f:	89 e5                	mov    ebp,esp
c000c631:	53                   	push   ebx
c000c632:	83 ec 04             	sub    esp,0x4
c000c635:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c63a:	83 e8 01             	sub    eax,0x1
c000c63d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c642:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c647:	85 c0                	test   eax,eax
c000c649:	75 01                	jne    c000c64c <startGUIVESA(void*)+0x1e>
c000c64b:	fb                   	sti    
c000c64c:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c652:	83 ec 08             	sub    esp,0x8
c000c655:	6a 01                	push   0x1
c000c657:	68 19 05 02 c0       	push   0xc0020519
c000c65c:	e8 03 7f 00 00       	call   c0014564 <Thr::loadDLL(char const*, bool)>
c000c661:	83 c4 10             	add    esp,0x10
c000c664:	83 ec 08             	sub    esp,0x8
c000c667:	53                   	push   ebx
c000c668:	50                   	push   eax
c000c669:	e8 36 81 00 00       	call   c00147a4 <Thr::executeDLL(unsigned long, void*)>
c000c66e:	83 c4 10             	add    esp,0x10
c000c671:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c677:	83 ec 08             	sub    esp,0x8
c000c67a:	6a 01                	push   0x1
c000c67c:	68 fb 04 02 c0       	push   0xc00204fb
c000c681:	e8 de 7e 00 00       	call   c0014564 <Thr::loadDLL(char const*, bool)>
c000c686:	83 c4 10             	add    esp,0x10
c000c689:	83 ec 08             	sub    esp,0x8
c000c68c:	53                   	push   ebx
c000c68d:	50                   	push   eax
c000c68e:	e8 11 81 00 00       	call   c00147a4 <Thr::executeDLL(unsigned long, void*)>
c000c693:	83 c4 10             	add    esp,0x10
c000c696:	90                   	nop
c000c697:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c69a:	c9                   	leave  
c000c69b:	c3                   	ret    

c000c69c <sendKeyToTerminal(unsigned char)>:
c000c69c:	55                   	push   ebp
c000c69d:	89 e5                	mov    ebp,esp
c000c69f:	83 ec 28             	sub    esp,0x28
c000c6a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6a5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c6a8:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c6ad:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c6b1:	83 ec 08             	sub    esp,0x8
c000c6b4:	52                   	push   edx
c000c6b5:	50                   	push   eax
c000c6b6:	e8 eb c6 ff ff       	call   c0008da6 <VgaText::receiveKey(unsigned char)>
c000c6bb:	83 c4 10             	add    esp,0x10
c000c6be:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6c2:	83 f8 0a             	cmp    eax,0xa
c000c6c5:	74 16                	je     c000c6dd <sendKeyToTerminal(unsigned char)+0x41>
c000c6c7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6cb:	83 f8 03             	cmp    eax,0x3
c000c6ce:	74 0d                	je     c000c6dd <sendKeyToTerminal(unsigned char)+0x41>
c000c6d0:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6d4:	83 f8 1c             	cmp    eax,0x1c
c000c6d7:	0f 85 97 00 00 00    	jne    c000c774 <sendKeyToTerminal(unsigned char)+0xd8>
c000c6dd:	fa                   	cli    
c000c6de:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6e3:	83 c0 01             	add    eax,0x1
c000c6e6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6eb:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c6f0:	83 c0 01             	add    eax,0x1
c000c6f3:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c6f8:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c6fd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c700:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c70a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c70e:	74 1f                	je     c000c72f <sendKeyToTerminal(unsigned char)+0x93>
c000c710:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c713:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c716:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c719:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c71c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c71f:	83 ec 0c             	sub    esp,0xc
c000c722:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c725:	e8 9e 8d 00 00       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c000c72a:	83 c4 10             	add    esp,0x10
c000c72d:	eb db                	jmp    c000c70a <sendKeyToTerminal(unsigned char)+0x6e>
c000c72f:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c734:	83 e8 01             	sub    eax,0x1
c000c737:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c73c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c741:	85 c0                	test   eax,eax
c000c743:	75 18                	jne    c000c75d <sendKeyToTerminal(unsigned char)+0xc1>
c000c745:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c74a:	85 c0                	test   eax,eax
c000c74c:	74 0f                	je     c000c75d <sendKeyToTerminal(unsigned char)+0xc1>
c000c74e:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c758:	e8 73 88 00 00       	call   c0014fd0 <schedule()>
c000c75d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c762:	83 e8 01             	sub    eax,0x1
c000c765:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c76a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c76f:	85 c0                	test   eax,eax
c000c771:	75 01                	jne    c000c774 <sendKeyToTerminal(unsigned char)+0xd8>
c000c773:	fb                   	sti    
c000c774:	90                   	nop
c000c775:	c9                   	leave  
c000c776:	c3                   	ret    

c000c777 <sendKeyboardToken(KeyboardToken)>:
c000c777:	55                   	push   ebp
c000c778:	89 e5                	mov    ebp,esp
c000c77a:	83 ec 18             	sub    esp,0x18
c000c77d:	e8 a3 40 00 00       	call   c0010825 <Krnl::userIOReceived()>
c000c782:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c788:	0f b7 c0             	movzx  eax,ax
c000c78b:	83 f2 01             	xor    edx,0x1
c000c78e:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c794:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c799:	85 c0                	test   eax,eax
c000c79b:	74 24                	je     c000c7c1 <sendKeyboardToken(KeyboardToken)+0x4a>
c000c79d:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000c7a3:	83 ec 04             	sub    esp,0x4
c000c7a6:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c7ab:	83 ec 08             	sub    esp,0x8
c000c7ae:	89 e0                	mov    eax,esp
c000c7b0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000c7b3:	89 08                	mov    DWORD PTR [eax],ecx
c000c7b5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000c7b8:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000c7bc:	ff d2                	call   edx
c000c7be:	83 c4 10             	add    esp,0x10
c000c7c1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c7c5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c7c8:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7cd:	0f b6 d2             	movzx  edx,dl
c000c7d0:	0f b6 c0             	movzx  eax,al
c000c7d3:	39 c2                	cmp    edx,eax
c000c7d5:	74 1c                	je     c000c7f3 <sendKeyboardToken(KeyboardToken)+0x7c>
c000c7d7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c7da:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c7df:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7e4:	0f b6 c0             	movzx  eax,al
c000c7e7:	83 ec 0c             	sub    esp,0xc
c000c7ea:	50                   	push   eax
c000c7eb:	e8 12 bd ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000c7f0:	83 c4 10             	add    esp,0x10
c000c7f3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c7f6:	0f b6 c0             	movzx  eax,al
c000c7f9:	85 c0                	test   eax,eax
c000c7fb:	0f 84 da 00 00 00    	je     c000c8db <sendKeyboardToken(KeyboardToken)+0x164>
c000c801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c804:	0f b7 c0             	movzx  eax,ax
c000c807:	3d 18 03 00 00       	cmp    eax,0x318
c000c80c:	75 06                	jne    c000c814 <sendKeyboardToken(KeyboardToken)+0x9d>
c000c80e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c817:	0f b7 c0             	movzx  eax,ax
c000c81a:	3d 19 03 00 00       	cmp    eax,0x319
c000c81f:	75 06                	jne    c000c827 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c821:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c82a:	0f b7 c0             	movzx  eax,ax
c000c82d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c832:	75 06                	jne    c000c83a <sendKeyboardToken(KeyboardToken)+0xc3>
c000c834:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c83a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c83d:	0f b7 c0             	movzx  eax,ax
c000c840:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c845:	75 06                	jne    c000c84d <sendKeyboardToken(KeyboardToken)+0xd6>
c000c847:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c84d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c850:	0f b7 c0             	movzx  eax,ax
c000c853:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c858:	75 06                	jne    c000c860 <sendKeyboardToken(KeyboardToken)+0xe9>
c000c85a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c863:	0f b7 c0             	movzx  eax,ax
c000c866:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c86b:	75 06                	jne    c000c873 <sendKeyboardToken(KeyboardToken)+0xfc>
c000c86d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c876:	0f b7 c0             	movzx  eax,ax
c000c879:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c87e:	75 06                	jne    c000c886 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c880:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c889:	0f b7 c0             	movzx  eax,ax
c000c88c:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c891:	75 06                	jne    c000c899 <sendKeyboardToken(KeyboardToken)+0x122>
c000c893:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c89c:	0f b7 c0             	movzx  eax,ax
c000c89f:	3d 20 03 00 00       	cmp    eax,0x320
c000c8a4:	75 06                	jne    c000c8ac <sendKeyboardToken(KeyboardToken)+0x135>
c000c8a6:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c8ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8af:	0f b7 c0             	movzx  eax,ax
c000c8b2:	3d 21 03 00 00       	cmp    eax,0x321
c000c8b7:	75 06                	jne    c000c8bf <sendKeyboardToken(KeyboardToken)+0x148>
c000c8b9:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c8bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8c2:	0f b7 c0             	movzx  eax,ax
c000c8c5:	3d 22 03 00 00       	cmp    eax,0x322
c000c8ca:	0f 85 f1 00 00 00    	jne    c000c9c1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8d0:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c8d6:	e9 e6 00 00 00       	jmp    c000c9c1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8de:	0f b7 c0             	movzx  eax,ax
c000c8e1:	3d 18 03 00 00       	cmp    eax,0x318
c000c8e6:	75 0a                	jne    c000c8f2 <sendKeyboardToken(KeyboardToken)+0x17b>
c000c8e8:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c8ee:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8f5:	0f b7 c0             	movzx  eax,ax
c000c8f8:	3d 19 03 00 00       	cmp    eax,0x319
c000c8fd:	75 0a                	jne    c000c909 <sendKeyboardToken(KeyboardToken)+0x192>
c000c8ff:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c905:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c90c:	0f b7 c0             	movzx  eax,ax
c000c90f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c914:	75 0a                	jne    c000c920 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c916:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c91c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c923:	0f b7 c0             	movzx  eax,ax
c000c926:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c92b:	75 0a                	jne    c000c937 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c92d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c933:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c93a:	0f b7 c0             	movzx  eax,ax
c000c93d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c942:	75 0a                	jne    c000c94e <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c944:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c94a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c94e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c951:	0f b7 c0             	movzx  eax,ax
c000c954:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c959:	75 0a                	jne    c000c965 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c95b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c961:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c968:	0f b7 c0             	movzx  eax,ax
c000c96b:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c970:	75 0a                	jne    c000c97c <sendKeyboardToken(KeyboardToken)+0x205>
c000c972:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c978:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c97c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c97f:	0f b7 c0             	movzx  eax,ax
c000c982:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c987:	75 0a                	jne    c000c993 <sendKeyboardToken(KeyboardToken)+0x21c>
c000c989:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c98f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c996:	0f b7 c0             	movzx  eax,ax
c000c999:	3d 20 03 00 00       	cmp    eax,0x320
c000c99e:	75 0a                	jne    c000c9aa <sendKeyboardToken(KeyboardToken)+0x233>
c000c9a0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c9a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ad:	0f b7 c0             	movzx  eax,ax
c000c9b0:	3d 21 03 00 00       	cmp    eax,0x321
c000c9b5:	75 0a                	jne    c000c9c1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c9b7:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c9bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9c4:	0f b7 c0             	movzx  eax,ax
c000c9c7:	3d 00 02 00 00       	cmp    eax,0x200
c000c9cc:	75 2f                	jne    c000c9fd <sendKeyboardToken(KeyboardToken)+0x286>
c000c9ce:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c9d3:	83 f0 01             	xor    eax,0x1
c000c9d6:	0f b6 c0             	movzx  eax,al
c000c9d9:	85 c0                	test   eax,eax
c000c9db:	74 20                	je     c000c9fd <sendKeyboardToken(KeyboardToken)+0x286>
c000c9dd:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9e2:	6a 01                	push   0x1
c000c9e4:	6a 00                	push   0x0
c000c9e6:	68 c0 c5 00 c0       	push   0xc000c5c0
c000c9eb:	50                   	push   eax
c000c9ec:	e8 93 83 00 00       	call   c0014d84 <Process::createThread(void (*)(void*), void*, int)>
c000c9f1:	83 c4 10             	add    esp,0x10
c000c9f4:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000c9fb:	eb 3a                	jmp    c000ca37 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000c9fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca00:	0f b7 c0             	movzx  eax,ax
c000ca03:	3d 01 02 00 00       	cmp    eax,0x201
c000ca08:	75 2d                	jne    c000ca37 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca0a:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca0f:	83 f0 01             	xor    eax,0x1
c000ca12:	0f b6 c0             	movzx  eax,al
c000ca15:	85 c0                	test   eax,eax
c000ca17:	74 1e                	je     c000ca37 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca19:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca1e:	6a 01                	push   0x1
c000ca20:	6a 00                	push   0x0
c000ca22:	68 2e c6 00 c0       	push   0xc000c62e
c000ca27:	50                   	push   eax
c000ca28:	e8 57 83 00 00       	call   c0014d84 <Process::createThread(void (*)(void*), void*, int)>
c000ca2d:	83 c4 10             	add    esp,0x10
c000ca30:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca3a:	0f b7 c0             	movzx  eax,ax
c000ca3d:	3d 25 03 00 00       	cmp    eax,0x325
c000ca42:	75 06                	jne    c000ca4a <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ca44:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca4d:	0f b7 c0             	movzx  eax,ax
c000ca50:	3d 24 03 00 00       	cmp    eax,0x324
c000ca55:	75 06                	jne    c000ca5d <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ca57:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ca5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca60:	0f b7 c0             	movzx  eax,ax
c000ca63:	3d 23 03 00 00       	cmp    eax,0x323
c000ca68:	75 06                	jne    c000ca70 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000ca6a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ca70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca73:	0f b7 c0             	movzx  eax,ax
c000ca76:	3d 26 03 00 00       	cmp    eax,0x326
c000ca7b:	75 06                	jne    c000ca83 <sendKeyboardToken(KeyboardToken)+0x30c>
c000ca7d:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ca83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca86:	0f b7 c0             	movzx  eax,ax
c000ca89:	3d 27 03 00 00       	cmp    eax,0x327
c000ca8e:	75 06                	jne    c000ca96 <sendKeyboardToken(KeyboardToken)+0x31f>
c000ca90:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ca96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca99:	0f b7 c0             	movzx  eax,ax
c000ca9c:	3d 22 03 00 00       	cmp    eax,0x322
c000caa1:	75 06                	jne    c000caa9 <sendKeyboardToken(KeyboardToken)+0x332>
c000caa3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000caa9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000caad:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cab0:	83 f0 01             	xor    eax,0x1
c000cab3:	0f b6 c0             	movzx  eax,al
c000cab6:	85 c0                	test   eax,eax
c000cab8:	74 7c                	je     c000cb36 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000caba:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cabf:	0f b6 c0             	movzx  eax,al
c000cac2:	85 c0                	test   eax,eax
c000cac4:	74 43                	je     c000cb09 <sendKeyboardToken(KeyboardToken)+0x392>
c000cac6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000caca:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cace:	85 c0                	test   eax,eax
c000cad0:	74 2b                	je     c000cafd <sendKeyboardToken(KeyboardToken)+0x386>
c000cad2:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cad8:	89 d0                	mov    eax,edx
c000cada:	c1 e0 02             	shl    eax,0x2
c000cadd:	01 d0                	add    eax,edx
c000cadf:	d1 e0                	shl    eax,1
c000cae1:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae9:	0f b7 c0             	movzx  eax,ax
c000caec:	8d 50 d0             	lea    edx,[eax-0x30]
c000caef:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000caf4:	01 d0                	add    eax,edx
c000caf6:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cafb:	eb 71                	jmp    c000cb6e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cafd:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb07:	eb 65                	jmp    c000cb6e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb09:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb0e:	85 c0                	test   eax,eax
c000cb10:	74 18                	je     c000cb2a <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cb12:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb17:	0f b6 c0             	movzx  eax,al
c000cb1a:	83 ec 0c             	sub    esp,0xc
c000cb1d:	50                   	push   eax
c000cb1e:	e8 79 fb ff ff       	call   c000c69c <sendKeyToTerminal(unsigned char)>
c000cb23:	83 c4 10             	add    esp,0x10
c000cb26:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb2a:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb34:	eb 38                	jmp    c000cb6e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb39:	0f b7 c0             	movzx  eax,ax
c000cb3c:	3d 01 01 00 00       	cmp    eax,0x101
c000cb41:	75 2b                	jne    c000cb6e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb43:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb48:	85 c0                	test   eax,eax
c000cb4a:	74 18                	je     c000cb64 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cb4c:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb51:	0f b6 c0             	movzx  eax,al
c000cb54:	83 ec 0c             	sub    esp,0xc
c000cb57:	50                   	push   eax
c000cb58:	e8 3f fb ff ff       	call   c000c69c <sendKeyToTerminal(unsigned char)>
c000cb5d:	83 c4 10             	add    esp,0x10
c000cb60:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb64:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb6e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cb71:	83 f0 01             	xor    eax,0x1
c000cb74:	0f b6 c0             	movzx  eax,al
c000cb77:	85 c0                	test   eax,eax
c000cb79:	74 5a                	je     c000cbd5 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb7b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb7e:	83 f0 01             	xor    eax,0x1
c000cb81:	0f b6 c0             	movzx  eax,al
c000cb84:	85 c0                	test   eax,eax
c000cb86:	74 4d                	je     c000cbd5 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb88:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cb8d:	83 f0 01             	xor    eax,0x1
c000cb90:	0f b6 c0             	movzx  eax,al
c000cb93:	85 c0                	test   eax,eax
c000cb95:	74 3e                	je     c000cbd5 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9a:	0f b7 c0             	movzx  eax,ax
c000cb9d:	83 f8 1f             	cmp    eax,0x1f
c000cba0:	76 0b                	jbe    c000cbad <sendKeyboardToken(KeyboardToken)+0x436>
c000cba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba5:	0f b7 c0             	movzx  eax,ax
c000cba8:	83 f8 7e             	cmp    eax,0x7e
c000cbab:	76 16                	jbe    c000cbc3 <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb0:	0f b7 c0             	movzx  eax,ax
c000cbb3:	83 f8 0a             	cmp    eax,0xa
c000cbb6:	74 0b                	je     c000cbc3 <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbbb:	0f b7 c0             	movzx  eax,ax
c000cbbe:	83 f8 08             	cmp    eax,0x8
c000cbc1:	75 12                	jne    c000cbd5 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc6:	0f b6 c0             	movzx  eax,al
c000cbc9:	83 ec 0c             	sub    esp,0xc
c000cbcc:	50                   	push   eax
c000cbcd:	e8 ca fa ff ff       	call   c000c69c <sendKeyToTerminal(unsigned char)>
c000cbd2:	83 c4 10             	add    esp,0x10
c000cbd5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbd8:	83 f0 01             	xor    eax,0x1
c000cbdb:	0f b6 c0             	movzx  eax,al
c000cbde:	85 c0                	test   eax,eax
c000cbe0:	74 5d                	je     c000cc3f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbe2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbe5:	83 f0 01             	xor    eax,0x1
c000cbe8:	0f b6 c0             	movzx  eax,al
c000cbeb:	85 c0                	test   eax,eax
c000cbed:	74 50                	je     c000cc3f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbef:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbf4:	0f b6 c0             	movzx  eax,al
c000cbf7:	85 c0                	test   eax,eax
c000cbf9:	74 44                	je     c000cc3f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbfe:	0f b7 c0             	movzx  eax,ax
c000cc01:	83 f8 3f             	cmp    eax,0x3f
c000cc04:	76 39                	jbe    c000cc3f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc09:	0f b7 c0             	movzx  eax,ax
c000cc0c:	83 f8 7f             	cmp    eax,0x7f
c000cc0f:	77 2e                	ja     c000cc3f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc14:	88 c2                	mov    dl,al
c000cc16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc19:	0f b7 c0             	movzx  eax,ax
c000cc1c:	83 f8 5f             	cmp    eax,0x5f
c000cc1f:	76 04                	jbe    c000cc25 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc21:	b0 20                	mov    al,0x20
c000cc23:	eb 02                	jmp    c000cc27 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc25:	b0 00                	mov    al,0x0
c000cc27:	89 d1                	mov    ecx,edx
c000cc29:	29 c1                	sub    ecx,eax
c000cc2b:	89 c8                	mov    eax,ecx
c000cc2d:	83 e8 40             	sub    eax,0x40
c000cc30:	0f b6 c0             	movzx  eax,al
c000cc33:	83 ec 0c             	sub    esp,0xc
c000cc36:	50                   	push   eax
c000cc37:	e8 60 fa ff ff       	call   c000c69c <sendKeyToTerminal(unsigned char)>
c000cc3c:	83 c4 10             	add    esp,0x10
c000cc3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc42:	0f b7 c0             	movzx  eax,ax
c000cc45:	3d 00 03 00 00       	cmp    eax,0x300
c000cc4a:	75 12                	jne    c000cc5e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc4c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc4f:	83 f0 01             	xor    eax,0x1
c000cc52:	0f b6 c0             	movzx  eax,al
c000cc55:	85 c0                	test   eax,eax
c000cc57:	74 05                	je     c000cc5e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc59:	e8 a5 b8 ff ff       	call   c0008503 <doTerminalCycle()>
c000cc5e:	90                   	nop
c000cc5f:	c9                   	leave  
c000cc60:	c3                   	ret    

c000cc61 <clearInternalKeybuffer(VgaText*)>:
c000cc61:	55                   	push   ebp
c000cc62:	89 e5                	mov    ebp,esp
c000cc64:	83 ec 08             	sub    esp,0x8
c000cc67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc6a:	05 02 01 00 00       	add    eax,0x102
c000cc6f:	83 ec 0c             	sub    esp,0xc
c000cc72:	50                   	push   eax
c000cc73:	e8 08 39 ff ff       	call   c0000580 <strlen>
c000cc78:	83 c4 10             	add    esp,0x10
c000cc7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc7e:	81 c2 02 01 00 00    	add    edx,0x102
c000cc84:	83 ec 04             	sub    esp,0x4
c000cc87:	50                   	push   eax
c000cc88:	6a 00                	push   0x0
c000cc8a:	52                   	push   edx
c000cc8b:	e8 60 38 ff ff       	call   c00004f0 <memset>
c000cc90:	83 c4 10             	add    esp,0x10
c000cc93:	90                   	nop
c000cc94:	c9                   	leave  
c000cc95:	c3                   	ret    

c000cc96 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cc96:	55                   	push   ebp
c000cc97:	89 e5                	mov    ebp,esp
c000cc99:	83 ec 18             	sub    esp,0x18
c000cc9c:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cca1:	85 c0                	test   eax,eax
c000cca3:	74 2a                	je     c000cccf <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cca5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ccab:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000ccb1:	83 ec 04             	sub    esp,0x4
c000ccb4:	68 e0 6f 02 c0       	push   0xc0026fe0
c000ccb9:	83 ec 08             	sub    esp,0x8
c000ccbc:	89 e0                	mov    eax,esp
c000ccbe:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000ccc1:	89 08                	mov    DWORD PTR [eax],ecx
c000ccc3:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000ccc6:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000ccca:	ff d2                	call   edx
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	fb                   	sti    
c000ccd0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ccd7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ccdb:	0f 84 0d 01 00 00    	je     c000cdee <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cce4:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000ccea:	0f be c0             	movsx  eax,al
c000cced:	85 c0                	test   eax,eax
c000ccef:	75 2c                	jne    c000cd1d <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000ccf1:	fa                   	cli    
c000ccf2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ccf7:	83 c0 01             	add    eax,0x1
c000ccfa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000ccff:	e8 cc 82 00 00       	call   c0014fd0 <schedule()>
c000cd04:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd09:	83 e8 01             	sub    eax,0x1
c000cd0c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd11:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd16:	85 c0                	test   eax,eax
c000cd18:	75 c7                	jne    c000cce1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd1a:	fb                   	sti    
c000cd1b:	eb c4                	jmp    c000cce1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd20:	8d 50 01             	lea    edx,[eax+0x1]
c000cd23:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd26:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd29:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd2f:	88 10                	mov    BYTE PTR [eax],dl
c000cd31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd34:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd3a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd3d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd41:	83 f8 03             	cmp    eax,0x3
c000cd44:	75 1e                	jne    c000cd64 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cd46:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd50:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd56:	83 ec 08             	sub    esp,0x8
c000cd59:	6a 02                	push   0x2
c000cd5b:	50                   	push   eax
c000cd5c:	e8 0e 3f 00 00       	call   c0010c6f <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd61:	83 c4 10             	add    esp,0x10
c000cd64:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd68:	83 f8 1c             	cmp    eax,0x1c
c000cd6b:	75 1e                	jne    c000cd8b <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cd6d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd72:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd77:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd7d:	83 ec 08             	sub    esp,0x8
c000cd80:	6a 09                	push   0x9
c000cd82:	50                   	push   eax
c000cd83:	e8 e7 3e 00 00       	call   c0010c6f <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd88:	83 c4 10             	add    esp,0x10
c000cd8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd8e:	05 02 01 00 00       	add    eax,0x102
c000cd93:	83 ec 0c             	sub    esp,0xc
c000cd96:	50                   	push   eax
c000cd97:	e8 e4 37 ff ff       	call   c0000580 <strlen>
c000cd9c:	83 c4 10             	add    esp,0x10
c000cd9f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cda2:	81 c2 02 01 00 00    	add    edx,0x102
c000cda8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cdab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdae:	81 c2 02 01 00 00    	add    edx,0x102
c000cdb4:	83 ec 04             	sub    esp,0x4
c000cdb7:	50                   	push   eax
c000cdb8:	51                   	push   ecx
c000cdb9:	52                   	push   edx
c000cdba:	e8 11 36 ff ff       	call   c00003d0 <memmove>
c000cdbf:	83 c4 10             	add    esp,0x10
c000cdc2:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000cdc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000cdca:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdce:	83 f8 0a             	cmp    eax,0xa
c000cdd1:	74 16                	je     c000cde9 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cdd3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdd7:	83 f8 03             	cmp    eax,0x3
c000cdda:	74 0d                	je     c000cde9 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cddc:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cde0:	83 f8 1c             	cmp    eax,0x1c
c000cde3:	0f 85 ee fe ff ff    	jne    c000ccd7 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cde9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cdec:	eb 03                	jmp    c000cdf1 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000cdee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cdf1:	c9                   	leave  
c000cdf2:	c3                   	ret    
c000cdf3:	90                   	nop

c000cdf4 <Keyboard::Keyboard(char const*)>:
c000cdf4:	83 ec 0c             	sub    esp,0xc
c000cdf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdfb:	83 ec 08             	sub    esp,0x8
c000cdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce02:	50                   	push   eax
c000ce03:	e8 44 f1 ff ff       	call   c000bf4c <Device::Device(char const*)>
c000ce08:	83 c4 10             	add    esp,0x10
c000ce0b:	ba 3c 05 02 c0       	mov    edx,0xc002053c
c000ce10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce14:	89 10                	mov    DWORD PTR [eax],edx
c000ce16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce24:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce2b:	90                   	nop
c000ce2c:	83 c4 0c             	add    esp,0xc
c000ce2f:	c3                   	ret    

c000ce30 <Keyboard::~Keyboard()>:
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	ba 3c 05 02 c0       	mov    edx,0xc002053c
c000ce38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3c:	89 10                	mov    DWORD PTR [eax],edx
c000ce3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce42:	83 ec 0c             	sub    esp,0xc
c000ce45:	50                   	push   eax
c000ce46:	e8 6b ee ff ff       	call   c000bcb6 <Device::~Device()>
c000ce4b:	83 c4 10             	add    esp,0x10
c000ce4e:	90                   	nop
c000ce4f:	83 c4 0c             	add    esp,0xc
c000ce52:	c3                   	ret    
c000ce53:	90                   	nop

c000ce54 <Keyboard::~Keyboard()>:
c000ce54:	83 ec 0c             	sub    esp,0xc
c000ce57:	83 ec 0c             	sub    esp,0xc
c000ce5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5e:	e8 cd ff ff ff       	call   c000ce30 <Keyboard::~Keyboard()>
c000ce63:	83 c4 10             	add    esp,0x10
c000ce66:	83 ec 08             	sub    esp,0x8
c000ce69:	68 5c 01 00 00       	push   0x15c
c000ce6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce72:	e8 dc d9 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000ce77:	83 c4 10             	add    esp,0x10
c000ce7a:	83 c4 0c             	add    esp,0xc
c000ce7d:	c3                   	ret    

c000ce7e <LogicalDisk::close(int, int, void*)>:
c000ce7e:	83 c8 ff             	or     eax,0xffffffff
c000ce81:	c3                   	ret    

c000ce82 <LogicalDisk::~LogicalDisk()>:
c000ce82:	83 ec 0c             	sub    esp,0xc
c000ce85:	ba b4 05 02 c0       	mov    edx,0xc00205b4
c000ce8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce8e:	89 10                	mov    DWORD PTR [eax],edx
c000ce90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce94:	83 ec 0c             	sub    esp,0xc
c000ce97:	50                   	push   eax
c000ce98:	e8 19 ee ff ff       	call   c000bcb6 <Device::~Device()>
c000ce9d:	83 c4 10             	add    esp,0x10
c000cea0:	90                   	nop
c000cea1:	83 c4 0c             	add    esp,0xc
c000cea4:	c3                   	ret    
c000cea5:	90                   	nop

c000cea6 <LogicalDisk::~LogicalDisk()>:
c000cea6:	83 ec 0c             	sub    esp,0xc
c000cea9:	83 ec 0c             	sub    esp,0xc
c000ceac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceb0:	e8 cd ff ff ff       	call   c000ce82 <LogicalDisk::~LogicalDisk()>
c000ceb5:	83 c4 10             	add    esp,0x10
c000ceb8:	83 ec 08             	sub    esp,0x8
c000cebb:	68 78 01 00 00       	push   0x178
c000cec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cec4:	e8 8a d9 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000cec9:	83 c4 10             	add    esp,0x10
c000cecc:	83 c4 0c             	add    esp,0xc
c000cecf:	c3                   	ret    

c000ced0 <LogicalDisk::open(int, int, void*)>:
c000ced0:	83 ec 18             	sub    esp,0x18
c000ced3:	68 68 05 02 c0       	push   0xc0020568
c000ced8:	e8 f8 38 00 00       	call   c00107d5 <KePanic(char const*)>
c000cedd:	83 c8 ff             	or     eax,0xffffffff
c000cee0:	83 c4 1c             	add    esp,0x1c
c000cee3:	c3                   	ret    

c000cee4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cee4:	53                   	push   ebx
c000cee5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ceed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cef1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cef7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cefd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf03:	77 10                	ja     c000cf15 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf05:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf0b:	89 d3                	mov    ebx,edx
c000cf0d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf13:	72 05                	jb     c000cf1a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf15:	83 c8 ff             	or     eax,0xffffffff
c000cf18:	89 c2                	mov    edx,eax
c000cf1a:	5b                   	pop    ebx
c000cf1b:	c3                   	ret    

c000cf1c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf1c:	56                   	push   esi
c000cf1d:	83 c8 ff             	or     eax,0xffffffff
c000cf20:	53                   	push   ebx
c000cf21:	89 c2                	mov    edx,eax
c000cf23:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf27:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf2f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf35:	77 27                	ja     c000cf5e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf37:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf3d:	89 d8                	mov    eax,ebx
c000cf3f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf4a:	89 c2                	mov    edx,eax
c000cf4c:	73 10                	jae    c000cf5e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf4e:	89 c8                	mov    eax,ecx
c000cf50:	89 da                	mov    edx,ebx
c000cf52:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cf58:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cf5e:	5b                   	pop    ebx
c000cf5f:	5e                   	pop    esi
c000cf60:	c3                   	ret    
c000cf61:	90                   	nop

c000cf62 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf62:	83 ec 1c             	sub    esp,0x1c
c000cf65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cf75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cf79:	89 04 24             	mov    DWORD PTR [esp],eax
c000cf7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cf84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf88:	83 ec 08             	sub    esp,0x8
c000cf8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf8f:	50                   	push   eax
c000cf90:	e8 b7 ef ff ff       	call   c000bf4c <Device::Device(char const*)>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	ba b4 05 02 c0       	mov    edx,0xc00205b4
c000cf9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfa1:	89 10                	mov    DWORD PTR [eax],edx
c000cfa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfa7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfb2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cfb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfbd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfc8:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cfd2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfde:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cfe4:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cfea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cff1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cff5:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cffb:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d005:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d009:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d00f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d013:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d01d:	90                   	nop
c000d01e:	83 c4 1c             	add    esp,0x1c
c000d021:	c3                   	ret    

c000d022 <LogicalDisk::assignDriveLetter()>:
c000d022:	55                   	push   ebp
c000d023:	57                   	push   edi
c000d024:	56                   	push   esi
c000d025:	53                   	push   ebx
c000d026:	83 ec 14             	sub    esp,0x14
c000d029:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d02d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d033:	b0 41                	mov    al,0x41
c000d035:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d03b:	84 d2                	test   dl,dl
c000d03d:	75 02                	jne    c000d041 <LogicalDisk::assignDriveLetter()+0x1f>
c000d03f:	b0 43                	mov    al,0x43
c000d041:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d047:	0f b6 ca             	movzx  ecx,dl
c000d04a:	0f be e8             	movsx  ebp,al
c000d04d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d051:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d055:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d05b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d05f:	3c 43                	cmp    al,0x43
c000d061:	75 10                	jne    c000d073 <LogicalDisk::assignDriveLetter()+0x51>
c000d063:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d06a:	75 5a                	jne    c000d0c6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d06c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d071:	75 53                	jne    c000d0c6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d073:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d076:	ba 01 00 00 00       	mov    edx,0x1
c000d07b:	89 34 24             	mov    DWORD PTR [esp],esi
c000d07e:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d081:	d3 e2                	shl    edx,cl
c000d083:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d087:	89 d7                	mov    edi,edx
c000d089:	89 d6                	mov    esi,edx
c000d08b:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d08f:	c1 ff 1f             	sar    edi,0x1f
c000d092:	21 f9                	and    ecx,edi
c000d094:	09 d1                	or     ecx,edx
c000d096:	75 2e                	jne    c000d0c6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d098:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d09c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d0a0:	09 f2                	or     edx,esi
c000d0a2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d0a5:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d0ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0af:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d0b5:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d0bc:	09 fa                	or     edx,edi
c000d0be:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d0c4:	eb 0d                	jmp    c000d0d3 <LogicalDisk::assignDriveLetter()+0xb1>
c000d0c6:	8d 50 01             	lea    edx,[eax+0x1]
c000d0c9:	45                   	inc    ebp
c000d0ca:	80 fa 5b             	cmp    dl,0x5b
c000d0cd:	88 d0                	mov    al,dl
c000d0cf:	75 8e                	jne    c000d05f <LogicalDisk::assignDriveLetter()+0x3d>
c000d0d1:	31 c0                	xor    eax,eax
c000d0d3:	83 c4 14             	add    esp,0x14
c000d0d6:	5b                   	pop    ebx
c000d0d7:	5e                   	pop    esi
c000d0d8:	5f                   	pop    edi
c000d0d9:	5d                   	pop    ebp
c000d0da:	c3                   	ret    
c000d0db:	90                   	nop

c000d0dc <LogicalDisk::mount()>:
c000d0dc:	56                   	push   esi
c000d0dd:	53                   	push   ebx
c000d0de:	53                   	push   ebx
c000d0df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0e3:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d0e9:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d0f3:	85 db                	test   ebx,ebx
c000d0f5:	74 27                	je     c000d11e <LogicalDisk::mount()+0x42>
c000d0f7:	51                   	push   ecx
c000d0f8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d0ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d101:	83 e8 41             	sub    eax,0x41
c000d104:	50                   	push   eax
c000d105:	56                   	push   esi
c000d106:	53                   	push   ebx
c000d107:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d10a:	83 c4 10             	add    esp,0x10
c000d10d:	84 c0                	test   al,al
c000d10f:	74 08                	je     c000d119 <LogicalDisk::mount()+0x3d>
c000d111:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d117:	eb 07                	jmp    c000d120 <LogicalDisk::mount()+0x44>
c000d119:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d11c:	eb d5                	jmp    c000d0f3 <LogicalDisk::mount()+0x17>
c000d11e:	31 c0                	xor    eax,eax
c000d120:	5a                   	pop    edx
c000d121:	5b                   	pop    ebx
c000d122:	5e                   	pop    esi
c000d123:	c3                   	ret    

c000d124 <LogicalDisk::unmount()>:
c000d124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d128:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d132:	c3                   	ret    
c000d133:	90                   	nop

c000d134 <LogicalDisk::eject()>:
c000d134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d138:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d13e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d140:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d144:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d147:	90                   	nop

c000d148 <LogicalDisk::unassignDriveLetter()>:
c000d148:	57                   	push   edi
c000d149:	56                   	push   esi
c000d14a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d14e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d155:	85 c9                	test   ecx,ecx
c000d157:	75 0f                	jne    c000d168 <LogicalDisk::unassignDriveLetter()+0x20>
c000d159:	c7 44 24 0c 8c 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc002058c
c000d161:	5e                   	pop    esi
c000d162:	5f                   	pop    edi
c000d163:	e9 6d 36 00 00       	jmp    c00107d5 <KePanic(char const*)>
c000d168:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d16f:	83 e9 41             	sub    ecx,0x41
c000d172:	b8 01 00 00 00       	mov    eax,0x1
c000d177:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d182:	d3 e0                	shl    eax,cl
c000d184:	89 c7                	mov    edi,eax
c000d186:	f7 d0                	not    eax
c000d188:	c1 ff 1f             	sar    edi,0x1f
c000d18b:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d191:	89 fe                	mov    esi,edi
c000d193:	f7 d6                	not    esi
c000d195:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d19b:	5e                   	pop    esi
c000d19c:	5f                   	pop    edi
c000d19d:	c3                   	ret    

c000d19e <LogicalDisk::read(unsigned long long, int, void*)>:
c000d19e:	57                   	push   edi
c000d19f:	56                   	push   esi
c000d1a0:	53                   	push   ebx
c000d1a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1b1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1b7:	77 41                	ja     c000d1fa <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d1b9:	99                   	cdq    
c000d1ba:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	11 da                	adc    edx,ebx
c000d1c4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d1ca:	19 d7                	sbb    edi,edx
c000d1cc:	72 33                	jb     c000d201 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d1ce:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d1d4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d1da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d1de:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d1e2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d1e8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1f2:	5b                   	pop    ebx
c000d1f3:	5e                   	pop    esi
c000d1f4:	5f                   	pop    edi
c000d1f5:	e9 d4 0a 00 00       	jmp    c000dcce <VCache::read(unsigned long long, int, void*)>
c000d1fa:	b8 05 00 00 00       	mov    eax,0x5
c000d1ff:	eb 05                	jmp    c000d206 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d201:	b8 07 00 00 00       	mov    eax,0x7
c000d206:	5b                   	pop    ebx
c000d207:	5e                   	pop    esi
c000d208:	5f                   	pop    edi
c000d209:	c3                   	ret    

c000d20a <LogicalDisk::write(unsigned long long, int, void*)>:
c000d20a:	57                   	push   edi
c000d20b:	56                   	push   esi
c000d20c:	53                   	push   ebx
c000d20d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d211:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d215:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d21d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d223:	77 41                	ja     c000d266 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d225:	99                   	cdq    
c000d226:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d22c:	01 c8                	add    eax,ecx
c000d22e:	11 da                	adc    edx,ebx
c000d230:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d236:	19 d7                	sbb    edi,edx
c000d238:	72 33                	jb     c000d26d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d23a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d240:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d246:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d24a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d24e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d254:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d25a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d25e:	5b                   	pop    ebx
c000d25f:	5e                   	pop    esi
c000d260:	5f                   	pop    edi
c000d261:	e9 6e 09 00 00       	jmp    c000dbd4 <VCache::write(unsigned long long, int, void*)>
c000d266:	b8 05 00 00 00       	mov    eax,0x5
c000d26b:	eb 05                	jmp    c000d272 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d26d:	b8 07 00 00 00       	mov    eax,0x7
c000d272:	5b                   	pop    ebx
c000d273:	5e                   	pop    esi
c000d274:	5f                   	pop    edi
c000d275:	c3                   	ret    
c000d276:	66 90                	xchg   ax,ax

c000d278 <Mouse::Mouse(char const*)>:
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d27f:	83 ec 08             	sub    esp,0x8
c000d282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d286:	50                   	push   eax
c000d287:	e8 c0 ec ff ff       	call   c000bf4c <Device::Device(char const*)>
c000d28c:	83 c4 10             	add    esp,0x10
c000d28f:	ba e0 05 02 c0       	mov    edx,0xc00205e0
c000d294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d298:	89 10                	mov    DWORD PTR [eax],edx
c000d29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d2a8:	90                   	nop
c000d2a9:	83 c4 0c             	add    esp,0xc
c000d2ac:	c3                   	ret    
c000d2ad:	90                   	nop
c000d2ae:	66 90                	xchg   ax,ax

c000d2b0 <Mouse::~Mouse()>:
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	ba e0 05 02 c0       	mov    edx,0xc00205e0
c000d2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2bc:	89 10                	mov    DWORD PTR [eax],edx
c000d2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c2:	83 ec 0c             	sub    esp,0xc
c000d2c5:	50                   	push   eax
c000d2c6:	e8 eb e9 ff ff       	call   c000bcb6 <Device::~Device()>
c000d2cb:	83 c4 10             	add    esp,0x10
c000d2ce:	90                   	nop
c000d2cf:	83 c4 0c             	add    esp,0xc
c000d2d2:	c3                   	ret    
c000d2d3:	90                   	nop

c000d2d4 <Mouse::~Mouse()>:
c000d2d4:	83 ec 0c             	sub    esp,0xc
c000d2d7:	83 ec 0c             	sub    esp,0xc
c000d2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2de:	e8 cd ff ff ff       	call   c000d2b0 <Mouse::~Mouse()>
c000d2e3:	83 c4 10             	add    esp,0x10
c000d2e6:	83 ec 08             	sub    esp,0x8
c000d2e9:	68 58 01 00 00       	push   0x158
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	e8 5c d5 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000d2f7:	83 c4 10             	add    esp,0x10
c000d2fa:	83 c4 0c             	add    esp,0xc
c000d2fd:	c3                   	ret    

c000d2fe <NIC::getMAC()>:
c000d2fe:	31 c0                	xor    eax,eax
c000d300:	31 d2                	xor    edx,edx
c000d302:	c3                   	ret    
c000d303:	90                   	nop

c000d304 <NIC::write(int, unsigned char*, int*)>:
c000d304:	b8 01 00 00 00       	mov    eax,0x1
c000d309:	c3                   	ret    

c000d30a <NIC::NIC(char const*)>:
c000d30a:	83 ec 0c             	sub    esp,0xc
c000d30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d311:	83 ec 08             	sub    esp,0x8
c000d314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d318:	50                   	push   eax
c000d319:	e8 2e ec ff ff       	call   c000bf4c <Device::Device(char const*)>
c000d31e:	83 c4 10             	add    esp,0x10
c000d321:	ba 0c 06 02 c0       	mov    edx,0xc002060c
c000d326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d32a:	89 10                	mov    DWORD PTR [eax],edx
c000d32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d330:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d33a:	90                   	nop
c000d33b:	83 c4 0c             	add    esp,0xc
c000d33e:	c3                   	ret    
c000d33f:	90                   	nop

c000d340 <NIC::~NIC()>:
c000d340:	83 ec 0c             	sub    esp,0xc
c000d343:	ba 0c 06 02 c0       	mov    edx,0xc002060c
c000d348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d34c:	89 10                	mov    DWORD PTR [eax],edx
c000d34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d352:	83 ec 0c             	sub    esp,0xc
c000d355:	50                   	push   eax
c000d356:	e8 5b e9 ff ff       	call   c000bcb6 <Device::~Device()>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	90                   	nop
c000d35f:	83 c4 0c             	add    esp,0xc
c000d362:	c3                   	ret    
c000d363:	90                   	nop

c000d364 <NIC::~NIC()>:
c000d364:	83 ec 0c             	sub    esp,0xc
c000d367:	83 ec 0c             	sub    esp,0xc
c000d36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36e:	e8 cd ff ff ff       	call   c000d340 <NIC::~NIC()>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	83 ec 08             	sub    esp,0x8
c000d379:	68 58 01 00 00       	push   0x158
c000d37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d382:	e8 cc d4 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000d387:	83 c4 10             	add    esp,0x10
c000d38a:	83 c4 0c             	add    esp,0xc
c000d38d:	c3                   	ret    

c000d38e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d38e:	55                   	push   ebp
c000d38f:	57                   	push   edi
c000d390:	56                   	push   esi
c000d391:	53                   	push   ebx
c000d392:	81 ec 28 01 00 00    	sub    esp,0x128
c000d398:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d39f:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d3a6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d3ad:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d3b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3b8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3bc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3c3:	e8 80 ec ff ff       	call   c000c048 <Device::getName()>
c000d3c8:	5a                   	pop    edx
c000d3c9:	59                   	pop    ecx
c000d3ca:	50                   	push   eax
c000d3cb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d3cf:	55                   	push   ebp
c000d3d0:	e8 7b 32 ff ff       	call   c0000650 <strcpy>
c000d3d5:	5b                   	pop    ebx
c000d3d6:	58                   	pop    eax
c000d3d7:	68 38 06 02 c0       	push   0xc0020638
c000d3dc:	55                   	push   ebp
c000d3dd:	e8 8e 34 ff ff       	call   c0000870 <strcat>
c000d3e2:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d3e9:	e8 dd a6 ff ff       	call   c0007acb <malloc>
c000d3ee:	83 c4 0c             	add    esp,0xc
c000d3f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d3f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d3f9:	89 c3                	mov    ebx,eax
c000d3fb:	57                   	push   edi
c000d3fc:	56                   	push   esi
c000d3fd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d404:	55                   	push   ebp
c000d405:	50                   	push   eax
c000d406:	e8 57 fb ff ff       	call   c000cf62 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d40b:	83 c4 14             	add    esp,0x14
c000d40e:	53                   	push   ebx
c000d40f:	e8 0e fc ff ff       	call   c000d022 <LogicalDisk::assignDriveLetter()>
c000d414:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d417:	e8 c0 fc ff ff       	call   c000d0dc <LogicalDisk::mount()>
c000d41c:	58                   	pop    eax
c000d41d:	5a                   	pop    edx
c000d41e:	53                   	push   ebx
c000d41f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d426:	e8 89 e9 ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c000d42b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d431:	5b                   	pop    ebx
c000d432:	5e                   	pop    esi
c000d433:	5f                   	pop    edi
c000d434:	5d                   	pop    ebp
c000d435:	c3                   	ret    

c000d436 <createPartitionsForDisk(PhysicalDisk*)>:
c000d436:	55                   	push   ebp
c000d437:	57                   	push   edi
c000d438:	56                   	push   esi
c000d439:	53                   	push   ebx
c000d43a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d440:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d447:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d44d:	3d 00 02 00 00       	cmp    eax,0x200
c000d452:	74 27                	je     c000d47b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d454:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d45a:	83 ec 10             	sub    esp,0x10
c000d45d:	99                   	cdq    
c000d45e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d464:	52                   	push   edx
c000d465:	50                   	push   eax
c000d466:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d46a:	c1 e6 0a             	shl    esi,0xa
c000d46d:	89 fd                	mov    ebp,edi
c000d46f:	55                   	push   ebp
c000d470:	56                   	push   esi
c000d471:	e8 1a 11 01 00       	call   c001e590 <__udivdi3>
c000d476:	e9 b9 00 00 00       	jmp    c000d534 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d47b:	83 ec 0c             	sub    esp,0xc
c000d47e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d480:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d484:	56                   	push   esi
c000d485:	6a 01                	push   0x1
c000d487:	6a 00                	push   0x0
c000d489:	6a 00                	push   0x0
c000d48b:	53                   	push   ebx
c000d48c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d48f:	83 c4 20             	add    esp,0x20
c000d492:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d49a:	75 0a                	jne    c000d4a6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d49c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d4a4:	74 2c                	je     c000d4d2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d4a6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4ac:	83 ec 10             	sub    esp,0x10
c000d4af:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4b5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4bb:	89 f7                	mov    edi,esi
c000d4bd:	c1 ff 1f             	sar    edi,0x1f
c000d4c0:	57                   	push   edi
c000d4c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d4c5:	56                   	push   esi
c000d4c6:	c1 e0 0a             	shl    eax,0xa
c000d4c9:	52                   	push   edx
c000d4ca:	50                   	push   eax
c000d4cb:	e8 c0 10 01 00       	call   c001e590 <__udivdi3>
c000d4d0:	eb 62                	jmp    c000d534 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4d2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d4d9:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d4e0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d4e7:	89 cf                	mov    edi,ecx
c000d4e9:	83 e2 7f             	and    edx,0x7f
c000d4ec:	83 e7 7f             	and    edi,0x7f
c000d4ef:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d4f2:	83 e0 7f             	and    eax,0x7f
c000d4f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d4f8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d4ff:	83 e0 7f             	and    eax,0x7f
c000d502:	01 d0                	add    eax,edx
c000d504:	84 c0                	test   al,al
c000d506:	89 c5                	mov    ebp,eax
c000d508:	74 41                	je     c000d54b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d50a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d510:	83 ec 10             	sub    esp,0x10
c000d513:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d519:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d51f:	89 f7                	mov    edi,esi
c000d521:	c1 ff 1f             	sar    edi,0x1f
c000d524:	57                   	push   edi
c000d525:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d529:	56                   	push   esi
c000d52a:	c1 e0 0a             	shl    eax,0xa
c000d52d:	52                   	push   edx
c000d52e:	50                   	push   eax
c000d52f:	e8 5c 10 01 00       	call   c001e590 <__udivdi3>
c000d534:	83 c4 14             	add    esp,0x14
c000d537:	52                   	push   edx
c000d538:	50                   	push   eax
c000d539:	6a 00                	push   0x0
c000d53b:	6a 00                	push   0x0
c000d53d:	53                   	push   ebx
c000d53e:	e8 4b fe ff ff       	call   c000d38e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d543:	83 c4 20             	add    esp,0x20
c000d546:	e9 73 01 00 00       	jmp    c000d6be <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d54b:	89 f0                	mov    eax,esi
c000d54d:	31 c9                	xor    ecx,ecx
c000d54f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d556:	75 02                	jne    c000d55a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d558:	89 cd                	mov    ebp,ecx
c000d55a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d562:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d569:	83 c0 10             	add    eax,0x10
c000d56c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d574:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000d57b:	c1 e2 08             	shl    edx,0x8
c000d57e:	c1 e6 10             	shl    esi,0x10
c000d581:	09 f2                	or     edx,esi
c000d583:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d58a:	09 f2                	or     edx,esi
c000d58c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d593:	c1 e6 18             	shl    esi,0x18
c000d596:	09 f2                	or     edx,esi
c000d598:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d59f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d5a3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d5aa:	c1 e6 10             	shl    esi,0x10
c000d5ad:	c1 e2 08             	shl    edx,0x8
c000d5b0:	09 f2                	or     edx,esi
c000d5b2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d5b9:	09 f2                	or     edx,esi
c000d5bb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d5c2:	c1 e6 18             	shl    esi,0x18
c000d5c5:	09 f2                	or     edx,esi
c000d5c7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d5cb:	41                   	inc    ecx
c000d5cc:	83 f9 04             	cmp    ecx,0x4
c000d5cf:	0f 85 7a ff ff ff    	jne    c000d54f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d9:	83 f0 01             	xor    eax,0x1
c000d5dc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d5e0:	75 4f                	jne    c000d631 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d5e6:	83 f0 01             	xor    eax,0x1
c000d5e9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d5ed:	75 42                	jne    c000d631 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5ef:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5f5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d5fd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d603:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d60b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d611:	89 f7                	mov    edi,esi
c000d613:	c1 ff 1f             	sar    edi,0x1f
c000d616:	57                   	push   edi
c000d617:	56                   	push   esi
c000d618:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d61c:	52                   	push   edx
c000d61d:	c1 e0 0a             	shl    eax,0xa
c000d620:	50                   	push   eax
c000d621:	e8 6a 0f 01 00       	call   c001e590 <__udivdi3>
c000d626:	83 c4 10             	add    esp,0x10
c000d629:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d62d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d631:	89 e8                	mov    eax,ebp
c000d633:	0f b6 e8             	movzx  ebp,al
c000d636:	85 ed                	test   ebp,ebp
c000d638:	74 50                	je     c000d68a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d63a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d63e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d642:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d646:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d652:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d656:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d65e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d662:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d666:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d66a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d66e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d672:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d676:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d67a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d67e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d682:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d686:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d68a:	31 ed                	xor    ebp,ebp
c000d68c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d690:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d694:	89 f8                	mov    eax,edi
c000d696:	09 f0                	or     eax,esi
c000d698:	74 1e                	je     c000d6b8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d69a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d69e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6a2:	89 d1                	mov    ecx,edx
c000d6a4:	09 c1                	or     ecx,eax
c000d6a6:	74 10                	je     c000d6b8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6a8:	83 ec 0c             	sub    esp,0xc
c000d6ab:	57                   	push   edi
c000d6ac:	56                   	push   esi
c000d6ad:	52                   	push   edx
c000d6ae:	50                   	push   eax
c000d6af:	53                   	push   ebx
c000d6b0:	e8 d9 fc ff ff       	call   c000d38e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6b5:	83 c4 20             	add    esp,0x20
c000d6b8:	45                   	inc    ebp
c000d6b9:	83 fd 04             	cmp    ebp,0x4
c000d6bc:	75 ce                	jne    c000d68c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d6be:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d6c4:	5b                   	pop    ebx
c000d6c5:	5e                   	pop    esi
c000d6c6:	5f                   	pop    edi
c000d6c7:	5d                   	pop    ebp
c000d6c8:	c3                   	ret    
c000d6c9:	66 90                	xchg   ax,ax
c000d6cb:	90                   	nop

c000d6cc <Serial::Serial(char const*)>:
c000d6cc:	83 ec 0c             	sub    esp,0xc
c000d6cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d3:	83 ec 08             	sub    esp,0x8
c000d6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6da:	50                   	push   eax
c000d6db:	e8 6c e8 ff ff       	call   c000bf4c <Device::Device(char const*)>
c000d6e0:	83 c4 10             	add    esp,0x10
c000d6e3:	ba 4c 06 02 c0       	mov    edx,0xc002064c
c000d6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ec:	89 10                	mov    DWORD PTR [eax],edx
c000d6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d6fc:	90                   	nop
c000d6fd:	83 c4 0c             	add    esp,0xc
c000d700:	c3                   	ret    
c000d701:	90                   	nop
c000d702:	66 90                	xchg   ax,ax

c000d704 <Serial::~Serial()>:
c000d704:	83 ec 0c             	sub    esp,0xc
c000d707:	ba 4c 06 02 c0       	mov    edx,0xc002064c
c000d70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d710:	89 10                	mov    DWORD PTR [eax],edx
c000d712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d716:	83 ec 0c             	sub    esp,0xc
c000d719:	50                   	push   eax
c000d71a:	e8 97 e5 ff ff       	call   c000bcb6 <Device::~Device()>
c000d71f:	83 c4 10             	add    esp,0x10
c000d722:	90                   	nop
c000d723:	83 c4 0c             	add    esp,0xc
c000d726:	c3                   	ret    
c000d727:	90                   	nop

c000d728 <Serial::~Serial()>:
c000d728:	83 ec 0c             	sub    esp,0xc
c000d72b:	83 ec 0c             	sub    esp,0xc
c000d72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d732:	e8 cd ff ff ff       	call   c000d704 <Serial::~Serial()>
c000d737:	83 c4 10             	add    esp,0x10
c000d73a:	83 ec 08             	sub    esp,0x8
c000d73d:	68 58 01 00 00       	push   0x158
c000d742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d746:	e8 08 d1 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000d74b:	83 c4 10             	add    esp,0x10
c000d74e:	83 c4 0c             	add    esp,0xc
c000d751:	c3                   	ret    
c000d752:	66 90                	xchg   ax,ax

c000d754 <Timer::Timer(char const*)>:
c000d754:	83 ec 0c             	sub    esp,0xc
c000d757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75b:	83 ec 08             	sub    esp,0x8
c000d75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d762:	50                   	push   eax
c000d763:	e8 e4 e7 ff ff       	call   c000bf4c <Device::Device(char const*)>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	ba 90 06 02 c0       	mov    edx,0xc0020690
c000d770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d774:	89 10                	mov    DWORD PTR [eax],edx
c000d776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d77a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d784:	90                   	nop
c000d785:	83 c4 0c             	add    esp,0xc
c000d788:	c3                   	ret    
c000d789:	90                   	nop
c000d78a:	66 90                	xchg   ax,ax

c000d78c <Timer::~Timer()>:
c000d78c:	83 ec 0c             	sub    esp,0xc
c000d78f:	ba 90 06 02 c0       	mov    edx,0xc0020690
c000d794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d798:	89 10                	mov    DWORD PTR [eax],edx
c000d79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79e:	83 ec 0c             	sub    esp,0xc
c000d7a1:	50                   	push   eax
c000d7a2:	e8 0f e5 ff ff       	call   c000bcb6 <Device::~Device()>
c000d7a7:	83 c4 10             	add    esp,0x10
c000d7aa:	90                   	nop
c000d7ab:	83 c4 0c             	add    esp,0xc
c000d7ae:	c3                   	ret    
c000d7af:	90                   	nop

c000d7b0 <Timer::~Timer()>:
c000d7b0:	83 ec 0c             	sub    esp,0xc
c000d7b3:	83 ec 0c             	sub    esp,0xc
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	e8 cd ff ff ff       	call   c000d78c <Timer::~Timer()>
c000d7bf:	83 c4 10             	add    esp,0x10
c000d7c2:	83 ec 08             	sub    esp,0x8
c000d7c5:	68 5c 01 00 00       	push   0x15c
c000d7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ce:	e8 80 d0 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	83 c4 0c             	add    esp,0xc
c000d7d9:	c3                   	ret    

c000d7da <Timer::read()>:
c000d7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d7e4:	c3                   	ret    

c000d7e5 <setupTimer(int)>:
c000d7e5:	53                   	push   ebx
c000d7e6:	83 ec 14             	sub    esp,0x14
c000d7e9:	68 5c 01 00 00       	push   0x15c
c000d7ee:	e8 d8 a2 ff ff       	call   c0007acb <malloc>
c000d7f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7f6:	89 c3                	mov    ebx,eax
c000d7f8:	e8 fb 05 01 00       	call   c001ddf8 <PIT::PIT()>
c000d7fd:	58                   	pop    eax
c000d7fe:	5a                   	pop    edx
c000d7ff:	53                   	push   ebx
c000d800:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d806:	e8 a9 e5 ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c000d80b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d80d:	6a 00                	push   0x0
c000d80f:	6a 00                	push   0x0
c000d811:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d815:	53                   	push   ebx
c000d816:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d819:	83 c4 28             	add    esp,0x28
c000d81c:	89 d8                	mov    eax,ebx
c000d81e:	5b                   	pop    ebx
c000d81f:	c3                   	ret    

c000d820 <timerHandler(unsigned int)>:
c000d820:	56                   	push   esi
c000d821:	53                   	push   ebx
c000d822:	51                   	push   ecx
c000d823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d827:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d82d:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d834:	0f 84 4a 01 00 00    	je     c000d984 <timerHandler(unsigned int)+0x164>
c000d83a:	fa                   	cli    
c000d83b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d841:	83 ec 0c             	sub    esp,0xc
c000d844:	68 78 81 02 c0       	push   0xc0028178
c000d849:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d84f:	e8 0c 13 01 00       	call   c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d854:	83 c4 10             	add    esp,0x10
c000d857:	84 c0                	test   al,al
c000d859:	0f 85 a1 00 00 00    	jne    c000d900 <timerHandler(unsigned int)+0xe0>
c000d85f:	83 ec 0c             	sub    esp,0xc
c000d862:	68 78 81 02 c0       	push   0xc0028178
c000d867:	e8 10 13 01 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d86c:	83 c4 10             	add    esp,0x10
c000d86f:	89 c6                	mov    esi,eax
c000d871:	8d 76 00             	lea    esi,[esi+0x0]
c000d874:	83 ec 0c             	sub    esp,0xc
c000d877:	68 78 81 02 c0       	push   0xc0028178
c000d87c:	e8 fb 12 01 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d881:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d888:	89 c3                	mov    ebx,eax
c000d88a:	e8 f5 12 01 00       	call   c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d88f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d892:	83 c4 10             	add    esp,0x10
c000d895:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d89b:	77 23                	ja     c000d8c0 <timerHandler(unsigned int)+0xa0>
c000d89d:	83 ec 0c             	sub    esp,0xc
c000d8a0:	53                   	push   ebx
c000d8a1:	e8 22 7c 00 00       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c000d8a6:	83 c4 10             	add    esp,0x10
c000d8a9:	39 de                	cmp    esi,ebx
c000d8ab:	75 27                	jne    c000d8d4 <timerHandler(unsigned int)+0xb4>
c000d8ad:	83 ec 0c             	sub    esp,0xc
c000d8b0:	68 78 81 02 c0       	push   0xc0028178
c000d8b5:	e8 c2 12 01 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8ba:	89 c6                	mov    esi,eax
c000d8bc:	eb 12                	jmp    c000d8d0 <timerHandler(unsigned int)+0xb0>
c000d8be:	66 90                	xchg   ax,ax
c000d8c0:	52                   	push   edx
c000d8c1:	52                   	push   edx
c000d8c2:	53                   	push   ebx
c000d8c3:	68 78 81 02 c0       	push   0xc0028178
c000d8c8:	e8 73 13 01 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d8d0:	83 c4 10             	add    esp,0x10
c000d8d3:	90                   	nop
c000d8d4:	83 ec 0c             	sub    esp,0xc
c000d8d7:	68 78 81 02 c0       	push   0xc0028178
c000d8dc:	e8 7f 12 01 00       	call   c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8e1:	83 c4 10             	add    esp,0x10
c000d8e4:	84 c0                	test   al,al
c000d8e6:	75 18                	jne    c000d900 <timerHandler(unsigned int)+0xe0>
c000d8e8:	83 ec 0c             	sub    esp,0xc
c000d8eb:	68 78 81 02 c0       	push   0xc0028178
c000d8f0:	e8 87 12 01 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8f5:	83 c4 10             	add    esp,0x10
c000d8f8:	39 f0                	cmp    eax,esi
c000d8fa:	0f 85 74 ff ff ff    	jne    c000d874 <timerHandler(unsigned int)+0x54>
c000d900:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d905:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d909:	74 41                	je     c000d94c <timerHandler(unsigned int)+0x12c>
c000d90b:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d912:	74 38                	je     c000d94c <timerHandler(unsigned int)+0x12c>
c000d914:	fa                   	cli    
c000d915:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d91b:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d920:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d926:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d929:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d92f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d932:	72 08                	jb     c000d93c <timerHandler(unsigned int)+0x11c>
c000d934:	e8 97 76 00 00       	call   c0014fd0 <schedule()>
c000d939:	8d 76 00             	lea    esi,[esi+0x0]
c000d93c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d941:	48                   	dec    eax
c000d942:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d947:	75 03                	jne    c000d94c <timerHandler(unsigned int)+0x12c>
c000d949:	fb                   	sti    
c000d94a:	66 90                	xchg   ax,ax
c000d94c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d951:	48                   	dec    eax
c000d952:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d957:	75 1b                	jne    c000d974 <timerHandler(unsigned int)+0x154>
c000d959:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d960:	74 12                	je     c000d974 <timerHandler(unsigned int)+0x154>
c000d962:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d96c:	e8 5f 76 00 00       	call   c0014fd0 <schedule()>
c000d971:	8d 76 00             	lea    esi,[esi+0x0]
c000d974:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d979:	48                   	dec    eax
c000d97a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d97f:	75 03                	jne    c000d984 <timerHandler(unsigned int)+0x164>
c000d981:	fb                   	sti    
c000d982:	66 90                	xchg   ax,ax
c000d984:	58                   	pop    eax
c000d985:	5b                   	pop    ebx
c000d986:	5e                   	pop    esi
c000d987:	c3                   	ret    

c000d988 <VCache::VCache(PhysicalDisk*)>:
c000d988:	53                   	push   ebx
c000d989:	83 ec 18             	sub    esp,0x18
c000d98c:	ba c0 06 02 c0       	mov    edx,0xc00206c0
c000d991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d995:	89 10                	mov    DWORD PTR [eax],edx
c000d997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d9a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d9ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d9b8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d9bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d9ca:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d9d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d9e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d9ef:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d9f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d9fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da02:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da12:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da19:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da21:	83 ec 0c             	sub    esp,0xc
c000da24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da28:	e8 9e a0 ff ff       	call   c0007acb <malloc>
c000da2d:	83 c4 10             	add    esp,0x10
c000da30:	89 c3                	mov    ebx,eax
c000da32:	83 ec 0c             	sub    esp,0xc
c000da35:	53                   	push   ebx
c000da36:	e8 35 73 00 00       	call   c0014d70 <Mutex::Mutex()>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da42:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da49:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da4d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da54:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da5f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da69:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000da6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da70:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000da76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000da7c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da80:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000da83:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000da86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da8e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da92:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da98:	05 00 02 00 00       	add    eax,0x200
c000da9d:	c1 e0 03             	shl    eax,0x3
c000daa0:	83 ec 0c             	sub    esp,0xc
c000daa3:	50                   	push   eax
c000daa4:	e8 22 a0 ff ff       	call   c0007acb <malloc>
c000daa9:	83 c4 10             	add    esp,0x10
c000daac:	89 c2                	mov    edx,eax
c000daae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dac8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dacc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dad2:	89 d0                	mov    eax,edx
c000dad4:	c1 e0 02             	shl    eax,0x2
c000dad7:	01 d0                	add    eax,edx
c000dad9:	c1 e0 04             	shl    eax,0x4
c000dadc:	83 ec 0c             	sub    esp,0xc
c000dadf:	50                   	push   eax
c000dae0:	e8 e6 9f ff ff       	call   c0007acb <malloc>
c000dae5:	83 c4 10             	add    esp,0x10
c000dae8:	89 c2                	mov    edx,eax
c000daea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daee:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000daf1:	90                   	nop
c000daf2:	83 c4 18             	add    esp,0x18
c000daf5:	5b                   	pop    ebx
c000daf6:	c3                   	ret    
c000daf7:	90                   	nop

c000daf8 <VCache::invalidateReadBuffer()>:
c000daf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dafc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db02:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db06:	c3                   	ret    
c000db07:	90                   	nop

c000db08 <VCache::writeWriteBuffer()>:
c000db08:	53                   	push   ebx
c000db09:	83 ec 08             	sub    esp,0x8
c000db0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db10:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db14:	74 1e                	je     c000db34 <VCache::writeWriteBuffer()+0x2c>
c000db16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db19:	83 ec 0c             	sub    esp,0xc
c000db1c:	8b 10                	mov    edx,DWORD PTR [eax]
c000db1e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db21:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db24:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db27:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db2a:	50                   	push   eax
c000db2b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db2e:	83 c4 20             	add    esp,0x20
c000db31:	8d 76 00             	lea    esi,[esi+0x0]
c000db34:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db3b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db42:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db46:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db4d:	83 c4 08             	add    esp,0x8
c000db50:	5b                   	pop    ebx
c000db51:	c3                   	ret    
c000db52:	66 90                	xchg   ax,ax

c000db54 <VCache::~VCache()>:
c000db54:	83 ec 0c             	sub    esp,0xc
c000db57:	ba c0 06 02 c0       	mov    edx,0xc00206c0
c000db5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db60:	89 10                	mov    DWORD PTR [eax],edx
c000db62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db66:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000db69:	0f b6 c0             	movzx  eax,al
c000db6c:	85 c0                	test   eax,eax
c000db6e:	74 10                	je     c000db80 <VCache::~VCache()+0x2c>
c000db70:	83 ec 0c             	sub    esp,0xc
c000db73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db77:	e8 8c ff ff ff       	call   c000db08 <VCache::writeWriteBuffer()>
c000db7c:	83 c4 10             	add    esp,0x10
c000db7f:	90                   	nop
c000db80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db84:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db87:	83 ec 0c             	sub    esp,0xc
c000db8a:	50                   	push   eax
c000db8b:	e8 4b 9f ff ff       	call   c0007adb <free>
c000db90:	83 c4 10             	add    esp,0x10
c000db93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db97:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000db9a:	83 ec 0c             	sub    esp,0xc
c000db9d:	50                   	push   eax
c000db9e:	e8 38 9f ff ff       	call   c0007adb <free>
c000dba3:	83 c4 10             	add    esp,0x10
c000dba6:	90                   	nop
c000dba7:	83 c4 0c             	add    esp,0xc
c000dbaa:	c3                   	ret    
c000dbab:	90                   	nop

c000dbac <VCache::~VCache()>:
c000dbac:	83 ec 0c             	sub    esp,0xc
c000dbaf:	83 ec 0c             	sub    esp,0xc
c000dbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb6:	e8 99 ff ff ff       	call   c000db54 <VCache::~VCache()>
c000dbbb:	83 c4 10             	add    esp,0x10
c000dbbe:	83 ec 08             	sub    esp,0x8
c000dbc1:	6a 44                	push   0x44
c000dbc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc7:	e8 87 cc ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000dbcc:	83 c4 10             	add    esp,0x10
c000dbcf:	83 c4 0c             	add    esp,0xc
c000dbd2:	c3                   	ret    
c000dbd3:	90                   	nop

c000dbd4 <VCache::write(unsigned long long, int, void*)>:
c000dbd4:	55                   	push   ebp
c000dbd5:	57                   	push   edi
c000dbd6:	56                   	push   esi
c000dbd7:	53                   	push   ebx
c000dbd8:	83 ec 1c             	sub    esp,0x1c
c000dbdb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dbdf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dbe3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dbe7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dbeb:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dbef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbf3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dbf7:	74 0f                	je     c000dc08 <VCache::write(unsigned long long, int, void*)+0x34>
c000dbf9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dbfd:	53                   	push   ebx
c000dbfe:	e8 f5 fe ff ff       	call   c000daf8 <VCache::invalidateReadBuffer()>
c000dc03:	58                   	pop    eax
c000dc04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc08:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc0c:	74 66                	je     c000dc74 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dc0e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc15:	99                   	cdq    
c000dc16:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc19:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc1c:	89 c6                	mov    esi,eax
c000dc1e:	31 ce                	xor    esi,ecx
c000dc20:	89 d0                	mov    eax,edx
c000dc22:	31 e8                	xor    eax,ebp
c000dc24:	09 c6                	or     esi,eax
c000dc26:	75 38                	jne    c000dc60 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc28:	83 ff 01             	cmp    edi,0x1
c000dc2b:	75 33                	jne    c000dc60 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc2d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc30:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dc34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc38:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc3e:	0f af f9             	imul   edi,ecx
c000dc41:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dc44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc46:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc49:	40                   	inc    eax
c000dc4a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc4d:	83 f8 50             	cmp    eax,0x50
c000dc50:	75 72                	jne    c000dcc4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc52:	83 ec 0c             	sub    esp,0xc
c000dc55:	53                   	push   ebx
c000dc56:	e8 ad fe ff ff       	call   c000db08 <VCache::writeWriteBuffer()>
c000dc5b:	83 c4 10             	add    esp,0x10
c000dc5e:	eb 64                	jmp    c000dcc4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc64:	83 ec 0c             	sub    esp,0xc
c000dc67:	53                   	push   ebx
c000dc68:	e8 9b fe ff ff       	call   c000db08 <VCache::writeWriteBuffer()>
c000dc6d:	83 c4 10             	add    esp,0x10
c000dc70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc74:	83 ff 4f             	cmp    edi,0x4f
c000dc77:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc7a:	7f 20                	jg     c000dc9c <VCache::write(unsigned long long, int, void*)+0xc8>
c000dc7c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dc7f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc83:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000dc86:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc89:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dc8c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dc90:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc98:	eb 2a                	jmp    c000dcc4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc9a:	66 90                	xchg   ax,ax
c000dc9c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dca0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dca2:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dca6:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dcaa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dcae:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000dcb2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dcb9:	83 c4 1c             	add    esp,0x1c
c000dcbc:	5b                   	pop    ebx
c000dcbd:	5e                   	pop    esi
c000dcbe:	5f                   	pop    edi
c000dcbf:	5d                   	pop    ebp
c000dcc0:	ff e0                	jmp    eax
c000dcc2:	66 90                	xchg   ax,ax
c000dcc4:	83 c4 1c             	add    esp,0x1c
c000dcc7:	31 c0                	xor    eax,eax
c000dcc9:	5b                   	pop    ebx
c000dcca:	5e                   	pop    esi
c000dccb:	5f                   	pop    edi
c000dccc:	5d                   	pop    ebp
c000dccd:	c3                   	ret    

c000dcce <VCache::read(unsigned long long, int, void*)>:
c000dcce:	55                   	push   ebp
c000dccf:	57                   	push   edi
c000dcd0:	56                   	push   esi
c000dcd1:	53                   	push   ebx
c000dcd2:	83 ec 1c             	sub    esp,0x1c
c000dcd5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dcd9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dcdd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dce1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dce5:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dce9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dced:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dcf1:	74 0d                	je     c000dd00 <VCache::read(unsigned long long, int, void*)+0x32>
c000dcf3:	83 ec 0c             	sub    esp,0xc
c000dcf6:	57                   	push   edi
c000dcf7:	e8 0c fe ff ff       	call   c000db08 <VCache::writeWriteBuffer()>
c000dcfc:	83 c4 10             	add    esp,0x10
c000dcff:	90                   	nop
c000dd00:	83 fd 01             	cmp    ebp,0x1
c000dd03:	0f 85 93 00 00 00    	jne    c000dd9c <VCache::read(unsigned long long, int, void*)+0xce>
c000dd09:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd0c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd13:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd16:	0f 85 80 00 00 00    	jne    c000dd9c <VCache::read(unsigned long long, int, void*)+0xce>
c000dd1c:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dd1f:	89 cd                	mov    ebp,ecx
c000dd21:	f7 dd                	neg    ebp
c000dd23:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dd27:	89 e8                	mov    eax,ebp
c000dd29:	21 dd                	and    ebp,ebx
c000dd2b:	c1 f8 1f             	sar    eax,0x1f
c000dd2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd32:	89 e8                	mov    eax,ebp
c000dd34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dd38:	21 f5                	and    ebp,esi
c000dd3a:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd3e:	89 ea                	mov    edx,ebp
c000dd40:	74 2e                	je     c000dd70 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd42:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000dd45:	75 29                	jne    c000dd70 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd47:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd4a:	75 24                	jne    c000dd70 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd4c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd4f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd55:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dd58:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd5b:	21 f3                	and    ebx,esi
c000dd5d:	0f af d9             	imul   ebx,ecx
c000dd60:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dd63:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dd67:	89 de                	mov    esi,ebx
c000dd69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd6b:	31 c0                	xor    eax,eax
c000dd6d:	eb 61                	jmp    c000ddd0 <VCache::read(unsigned long long, int, void*)+0x102>
c000dd6f:	90                   	nop
c000dd70:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dd74:	83 ec 0c             	sub    esp,0xc
c000dd77:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dd7a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd7e:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dd81:	8b 36                	mov    esi,DWORD PTR [esi]
c000dd83:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dd86:	51                   	push   ecx
c000dd87:	52                   	push   edx
c000dd88:	50                   	push   eax
c000dd89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8d:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000dd90:	83 c4 20             	add    esp,0x20
c000dd93:	85 c0                	test   eax,eax
c000dd95:	75 39                	jne    c000ddd0 <VCache::read(unsigned long long, int, void*)+0x102>
c000dd97:	eb b3                	jmp    c000dd4c <VCache::read(unsigned long long, int, void*)+0x7e>
c000dd99:	8d 76 00             	lea    esi,[esi+0x0]
c000dd9c:	83 ec 0c             	sub    esp,0xc
c000dd9f:	57                   	push   edi
c000dda0:	e8 53 fd ff ff       	call   c000daf8 <VCache::invalidateReadBuffer()>
c000dda5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dda8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddac:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddae:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ddb2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ddb6:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ddba:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ddbe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddc2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ddc5:	83 c4 2c             	add    esp,0x2c
c000ddc8:	5b                   	pop    ebx
c000ddc9:	5e                   	pop    esi
c000ddca:	5f                   	pop    edi
c000ddcb:	5d                   	pop    ebp
c000ddcc:	ff e0                	jmp    eax
c000ddce:	66 90                	xchg   ax,ax
c000ddd0:	83 c4 1c             	add    esp,0x1c
c000ddd3:	5b                   	pop    ebx
c000ddd4:	5e                   	pop    esi
c000ddd5:	5f                   	pop    edi
c000ddd6:	5d                   	pop    ebp
c000ddd7:	c3                   	ret    

c000ddd8 <Video::putrect(int, int, int, int, unsigned int)>:
c000ddd8:	55                   	push   ebp
c000ddd9:	57                   	push   edi
c000ddda:	56                   	push   esi
c000dddb:	53                   	push   ebx
c000dddc:	83 ec 1c             	sub    esp,0x1c
c000dddf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dde3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dde7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ddeb:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ddef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ddf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ddf7:	01 df                	add    edi,ebx
c000ddf9:	39 fb                	cmp    ebx,edi
c000ddfb:	7d 1f                	jge    c000de1c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ddfd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de05:	7d 12                	jge    c000de19 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de07:	8b 16                	mov    edx,DWORD PTR [esi]
c000de09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de0d:	53                   	push   ebx
c000de0e:	55                   	push   ebp
c000de0f:	45                   	inc    ebp
c000de10:	56                   	push   esi
c000de11:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de14:	83 c4 10             	add    esp,0x10
c000de17:	eb e8                	jmp    c000de01 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de19:	43                   	inc    ebx
c000de1a:	eb dd                	jmp    c000ddf9 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de1c:	83 c4 1c             	add    esp,0x1c
c000de1f:	5b                   	pop    ebx
c000de20:	5e                   	pop    esi
c000de21:	5f                   	pop    edi
c000de22:	5d                   	pop    ebp
c000de23:	c3                   	ret    

c000de24 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de24:	55                   	push   ebp
c000de25:	57                   	push   edi
c000de26:	31 ff                	xor    edi,edi
c000de28:	56                   	push   esi
c000de29:	53                   	push   ebx
c000de2a:	83 ec 1c             	sub    esp,0x1c
c000de2d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de31:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de35:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de3c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de45:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de49:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de4d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de50:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de54:	01 f9                	add    ecx,edi
c000de56:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de5a:	7d 2f                	jge    c000de8b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de5c:	31 f6                	xor    esi,esi
c000de5e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de62:	01 f2                	add    edx,esi
c000de64:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de68:	7d 1a                	jge    c000de84 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de6a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de6d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de70:	46                   	inc    esi
c000de71:	51                   	push   ecx
c000de72:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de76:	52                   	push   edx
c000de77:	55                   	push   ebp
c000de78:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de82:	eb da                	jmp    c000de5e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000de84:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000de88:	47                   	inc    edi
c000de89:	eb c5                	jmp    c000de50 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000de8b:	83 c4 1c             	add    esp,0x1c
c000de8e:	5b                   	pop    ebx
c000de8f:	5e                   	pop    esi
c000de90:	5f                   	pop    edi
c000de91:	5d                   	pop    ebp
c000de92:	c3                   	ret    
c000de93:	90                   	nop

c000de94 <Video::blit(unsigned int*, int, int, int, int)>:
c000de94:	55                   	push   ebp
c000de95:	ba 00 00 00 00       	mov    edx,0x0
c000de9a:	57                   	push   edi
c000de9b:	56                   	push   esi
c000de9c:	53                   	push   ebx
c000de9d:	83 ec 1c             	sub    esp,0x1c
c000dea0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dea4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dea8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000deac:	85 c0                	test   eax,eax
c000deae:	0f 49 d0             	cmovns edx,eax
c000deb1:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000deb8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000debc:	89 eb                	mov    ebx,ebp
c000debe:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000dec2:	01 ea                	add    edx,ebp
c000dec4:	39 da                	cmp    edx,ebx
c000dec6:	7e 54                	jle    c000df1c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000dec8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dece:	7c 4c                	jl     c000df1c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ded0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ded4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ded8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dedc:	01 c1                	add    ecx,eax
c000dede:	39 f9                	cmp    ecx,edi
c000dee0:	7e 2f                	jle    c000df11 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000dee2:	83 c2 04             	add    edx,0x4
c000dee5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000deeb:	7c 21                	jl     c000df0e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000deed:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000def1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000def3:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000def6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000defa:	55                   	push   ebp
c000defb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000deff:	56                   	push   esi
c000df00:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df03:	83 c4 10             	add    esp,0x10
c000df06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df0e:	47                   	inc    edi
c000df0f:	eb c7                	jmp    c000ded8 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000df11:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000df15:	43                   	inc    ebx
c000df16:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000df1a:	eb a2                	jmp    c000debe <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000df1c:	83 c4 1c             	add    esp,0x1c
c000df1f:	5b                   	pop    ebx
c000df20:	5e                   	pop    esi
c000df21:	5f                   	pop    edi
c000df22:	5d                   	pop    ebp
c000df23:	c3                   	ret    

c000df24 <Video::clearScreen(unsigned int)>:
c000df24:	57                   	push   edi
c000df25:	56                   	push   esi
c000df26:	53                   	push   ebx
c000df27:	31 db                	xor    ebx,ebx
c000df29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df2d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df33:	7e 1f                	jle    c000df54 <Video::clearScreen(unsigned int)+0x30>
c000df35:	31 ff                	xor    edi,edi
c000df37:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df3d:	7e 12                	jle    c000df51 <Video::clearScreen(unsigned int)+0x2d>
c000df3f:	8b 06                	mov    eax,DWORD PTR [esi]
c000df41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df45:	53                   	push   ebx
c000df46:	57                   	push   edi
c000df47:	47                   	inc    edi
c000df48:	56                   	push   esi
c000df49:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df4c:	83 c4 10             	add    esp,0x10
c000df4f:	eb e6                	jmp    c000df37 <Video::clearScreen(unsigned int)+0x13>
c000df51:	43                   	inc    ebx
c000df52:	eb d9                	jmp    c000df2d <Video::clearScreen(unsigned int)+0x9>
c000df54:	5b                   	pop    ebx
c000df55:	5e                   	pop    esi
c000df56:	5f                   	pop    edi
c000df57:	c3                   	ret    

c000df58 <Video::putpixel(int, int, unsigned int)>:
c000df58:	c7 44 24 04 c8 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206c8
c000df60:	e9 70 28 00 00       	jmp    c00107d5 <KePanic(char const*)>
c000df65:	90                   	nop

c000df66 <Video::readPixelApprox(int, int)>:
c000df66:	83 ec 18             	sub    esp,0x18
c000df69:	68 e9 06 02 c0       	push   0xc00206e9
c000df6e:	e8 62 28 00 00       	call   c00107d5 <KePanic(char const*)>
c000df73:	31 c0                	xor    eax,eax
c000df75:	83 c4 1c             	add    esp,0x1c
c000df78:	c3                   	ret    
c000df79:	90                   	nop

c000df7a <Video::Video(char const*)>:
c000df7a:	83 ec 0c             	sub    esp,0xc
c000df7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df81:	83 ec 08             	sub    esp,0x8
c000df84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df88:	50                   	push   eax
c000df89:	e8 be df ff ff       	call   c000bf4c <Device::Device(char const*)>
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	ba 64 07 02 c0       	mov    edx,0xc0020764
c000df96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9a:	89 10                	mov    DWORD PTR [eax],edx
c000df9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dfaa:	90                   	nop
c000dfab:	83 c4 0c             	add    esp,0xc
c000dfae:	c3                   	ret    
c000dfaf:	90                   	nop

c000dfb0 <Video::~Video()>:
c000dfb0:	83 ec 0c             	sub    esp,0xc
c000dfb3:	ba 64 07 02 c0       	mov    edx,0xc0020764
c000dfb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbc:	89 10                	mov    DWORD PTR [eax],edx
c000dfbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc2:	83 ec 0c             	sub    esp,0xc
c000dfc5:	50                   	push   eax
c000dfc6:	e8 eb dc ff ff       	call   c000bcb6 <Device::~Device()>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	90                   	nop
c000dfcf:	83 c4 0c             	add    esp,0xc
c000dfd2:	c3                   	ret    
c000dfd3:	90                   	nop

c000dfd4 <Video::~Video()>:
c000dfd4:	83 ec 0c             	sub    esp,0xc
c000dfd7:	83 ec 0c             	sub    esp,0xc
c000dfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfde:	e8 cd ff ff ff       	call   c000dfb0 <Video::~Video()>
c000dfe3:	83 c4 10             	add    esp,0x10
c000dfe6:	83 ec 08             	sub    esp,0x8
c000dfe9:	68 64 01 00 00       	push   0x164
c000dfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff2:	e8 5c c8 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c000dff7:	83 c4 10             	add    esp,0x10
c000dffa:	83 c4 0c             	add    esp,0xc
c000dffd:	c3                   	ret    

c000dffe <Video::isMonochrome()>:
c000dffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e002:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e008:	c3                   	ret    
c000e009:	90                   	nop

c000e00a <Video::getWidth()>:
c000e00a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e00e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e014:	c3                   	ret    
c000e015:	90                   	nop

c000e016 <Video::getHeight()>:
c000e016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e01a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e020:	c3                   	ret    
c000e021:	90                   	nop

c000e022 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e022:	55                   	push   ebp
c000e023:	57                   	push   edi
c000e024:	56                   	push   esi
c000e025:	53                   	push   ebx
c000e026:	83 ec 2c             	sub    esp,0x2c
c000e029:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e02d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e031:	83 f8 01             	cmp    eax,0x1
c000e034:	19 c9                	sbb    ecx,ecx
c000e036:	31 db                	xor    ebx,ebx
c000e038:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e03c:	89 ce                	mov    esi,ecx
c000e03e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e046:	f7 d6                	not    esi
c000e048:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e04e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e052:	01 d8                	add    eax,ebx
c000e054:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e058:	57                   	push   edi
c000e059:	e8 b8 ff ff ff       	call   c000e016 <Video::getHeight()>
c000e05e:	59                   	pop    ecx
c000e05f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e063:	7e 70                	jle    c000e0d5 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e065:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e069:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e06d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e070:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e074:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e078:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e07f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e083:	89 e8                	mov    eax,ebp
c000e085:	83 c0 20             	add    eax,0x20
c000e088:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e08c:	57                   	push   edi
c000e08d:	e8 78 ff ff ff       	call   c000e00a <Video::getWidth()>
c000e092:	5a                   	pop    edx
c000e093:	39 c5                	cmp    ebp,eax
c000e095:	7d 34                	jge    c000e0cb <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e097:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e09c:	74 05                	je     c000e0a3 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e09e:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0a0:	56                   	push   esi
c000e0a1:	eb 0d                	jmp    c000e0b0 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e0a3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0a8:	74 12                	je     c000e0bc <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e0aa:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0b4:	55                   	push   ebp
c000e0b5:	57                   	push   edi
c000e0b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0b9:	83 c4 10             	add    esp,0x10
c000e0bc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0c0:	45                   	inc    ebp
c000e0c1:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0c5:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e0c9:	75 c1                	jne    c000e08c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e0cb:	43                   	inc    ebx
c000e0cc:	83 fb 20             	cmp    ebx,0x20
c000e0cf:	0f 85 79 ff ff ff    	jne    c000e04e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e0d5:	83 c4 2c             	add    esp,0x2c
c000e0d8:	5b                   	pop    ebx
c000e0d9:	5e                   	pop    esi
c000e0da:	5f                   	pop    edi
c000e0db:	5d                   	pop    ebp
c000e0dc:	c3                   	ret    
c000e0dd:	90                   	nop

c000e0de <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0de:	55                   	push   ebp
c000e0df:	57                   	push   edi
c000e0e0:	56                   	push   esi
c000e0e1:	53                   	push   ebx
c000e0e2:	83 ec 28             	sub    esp,0x28
c000e0e5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0e9:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e0ed:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e0f1:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e0f5:	c1 e7 08             	shl    edi,0x8
c000e0f8:	01 c7                	add    edi,eax
c000e0fa:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e0fe:	c1 e6 08             	shl    esi,0x8
c000e101:	01 f0                	add    eax,esi
c000e103:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e107:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e10b:	0f af c7             	imul   eax,edi
c000e10e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e115:	50                   	push   eax
c000e116:	e8 b0 99 ff ff       	call   c0007acb <malloc>
c000e11b:	83 c4 10             	add    esp,0x10
c000e11e:	85 c0                	test   eax,eax
c000e120:	89 c5                	mov    ebp,eax
c000e122:	75 10                	jne    c000e134 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e124:	83 ec 0c             	sub    esp,0xc
c000e127:	68 14 07 02 c0       	push   0xc0020714
c000e12c:	e8 a4 26 00 00       	call   c00107d5 <KePanic(char const*)>
c000e131:	83 c4 10             	add    esp,0x10
c000e134:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e138:	ba 12 00 00 00       	mov    edx,0x12
c000e13d:	85 c0                	test   eax,eax
c000e13f:	74 11                	je     c000e152 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e141:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e145:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e149:	c1 fa 03             	sar    edx,0x3
c000e14c:	0f af d1             	imul   edx,ecx
c000e14f:	83 c2 12             	add    edx,0x12
c000e152:	85 ff                	test   edi,edi
c000e154:	74 06                	je     c000e15c <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e156:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e15a:	75 12                	jne    c000e16e <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e15c:	83 ec 0c             	sub    esp,0xc
c000e15f:	68 24 07 02 c0       	push   0xc0020724
c000e164:	e8 e8 c7 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000e169:	e9 b8 00 00 00       	jmp    c000e226 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e16e:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e172:	83 f9 02             	cmp    ecx,0x2
c000e175:	0f 85 96 00 00 00    	jne    c000e211 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e17b:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e180:	75 0e                	jne    c000e190 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e182:	85 c0                	test   eax,eax
c000e184:	75 0a                	jne    c000e190 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e186:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e189:	83 e8 18             	sub    eax,0x18
c000e18c:	a8 f7                	test   al,0xf7
c000e18e:	74 0a                	je     c000e19a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e190:	83 ec 0c             	sub    esp,0xc
c000e193:	68 39 07 02 c0       	push   0xc0020739
c000e198:	eb 7f                	jmp    c000e219 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e19a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1aa:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e1ae:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1b2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1ba:	75 0c                	jne    c000e1c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e1bc:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000e1c1:	c1 e1 18             	shl    ecx,0x18
c000e1c4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e1c8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e1cd:	46                   	inc    esi
c000e1ce:	89 c8                	mov    eax,ecx
c000e1d0:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e1d5:	c1 e0 10             	shl    eax,0x10
c000e1d8:	c1 e1 08             	shl    ecx,0x8
c000e1db:	09 c1                	or     ecx,eax
c000e1dd:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e1e1:	09 c1                	or     ecx,eax
c000e1e3:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e1e7:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000e1eb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e1ef:	c1 f8 03             	sar    eax,0x3
c000e1f2:	01 c2                	add    edx,eax
c000e1f4:	89 f0                	mov    eax,esi
c000e1f6:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e1fa:	39 c7                	cmp    edi,eax
c000e1fc:	7f b0                	jg     c000e1ae <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e1fe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e202:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e206:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e209:	7e 22                	jle    c000e22d <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e20b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000e20f:	eb 99                	jmp    c000e1aa <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e211:	50                   	push   eax
c000e212:	50                   	push   eax
c000e213:	51                   	push   ecx
c000e214:	68 47 07 02 c0       	push   0xc0020747
c000e219:	e8 33 c7 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000e21e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e221:	e8 b5 98 ff ff       	call   c0007adb <free>
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	31 ed                	xor    ebp,ebp
c000e22b:	eb 0f                	jmp    c000e23c <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e22d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e231:	89 38                	mov    DWORD PTR [eax],edi
c000e233:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e237:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000e23a:	89 38                	mov    DWORD PTR [eax],edi
c000e23c:	83 c4 1c             	add    esp,0x1c
c000e23f:	89 e8                	mov    eax,ebp
c000e241:	5b                   	pop    ebx
c000e242:	5e                   	pop    esi
c000e243:	5f                   	pop    edi
c000e244:	5d                   	pop    ebp
c000e245:	c3                   	ret    

c000e246 <Video::putTGA(int, int, unsigned char*, int)>:
c000e246:	55                   	push   ebp
c000e247:	57                   	push   edi
c000e248:	56                   	push   esi
c000e249:	53                   	push   ebx
c000e24a:	83 ec 28             	sub    esp,0x28
c000e24d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e251:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e255:	50                   	push   eax
c000e256:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e25a:	50                   	push   eax
c000e25b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e25f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e263:	57                   	push   edi
c000e264:	e8 75 fe ff ff       	call   c000e0de <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e269:	83 c4 20             	add    esp,0x20
c000e26c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e270:	85 c0                	test   eax,eax
c000e272:	74 35                	je     c000e2a9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e274:	89 c6                	mov    esi,eax
c000e276:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e27a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e27e:	39 d8                	cmp    eax,ebx
c000e280:	7e 27                	jle    c000e2a9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e282:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e286:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e28a:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e28e:	39 e9                	cmp    ecx,ebp
c000e290:	7e 14                	jle    c000e2a6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e292:	83 c6 04             	add    esi,0x4
c000e295:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e297:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e29a:	53                   	push   ebx
c000e29b:	55                   	push   ebp
c000e29c:	45                   	inc    ebp
c000e29d:	57                   	push   edi
c000e29e:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e2a1:	83 c4 10             	add    esp,0x10
c000e2a4:	eb e0                	jmp    c000e286 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2a6:	43                   	inc    ebx
c000e2a7:	eb cd                	jmp    c000e276 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2a9:	83 c4 1c             	add    esp,0x1c
c000e2ac:	5b                   	pop    ebx
c000e2ad:	5e                   	pop    esi
c000e2ae:	5f                   	pop    edi
c000e2af:	5d                   	pop    ebp
c000e2b0:	c3                   	ret    
c000e2b1:	66 90                	xchg   ax,ax
c000e2b3:	90                   	nop

c000e2b4 <ACPI::close(int, int, void*)>:
c000e2b4:	83 ec 1c             	sub    esp,0x1c
c000e2b7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e2bf:	74 0b                	je     c000e2cc <ACPI::close(int, int, void*)+0x18>
c000e2c1:	b8 00 00 00 00       	mov    eax,0x0
c000e2c6:	e9 99 00 00 00       	jmp    c000e364 <ACPI::close(int, int, void*)+0xb0>
c000e2cb:	90                   	nop
c000e2cc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e2d1:	75 29                	jne    c000e2fc <ACPI::close(int, int, void*)+0x48>
c000e2d3:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2d8:	85 c0                	test   eax,eax
c000e2da:	74 08                	je     c000e2e4 <ACPI::close(int, int, void*)+0x30>
c000e2dc:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2e1:	ff d0                	call   eax
c000e2e3:	90                   	nop
c000e2e4:	83 ec 0c             	sub    esp,0xc
c000e2e7:	68 a8 07 02 c0       	push   0xc00207a8
c000e2ec:	e8 e4 24 00 00       	call   c00107d5 <KePanic(char const*)>
c000e2f1:	83 c4 10             	add    esp,0x10
c000e2f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e2f9:	eb 69                	jmp    c000e364 <ACPI::close(int, int, void*)+0xb0>
c000e2fb:	90                   	nop
c000e2fc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e301:	75 59                	jne    c000e35c <ACPI::close(int, int, void*)+0xa8>
c000e303:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e308:	85 c0                	test   eax,eax
c000e30a:	74 08                	je     c000e314 <ACPI::close(int, int, void*)+0x60>
c000e30c:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e311:	ff d0                	call   eax
c000e313:	90                   	nop
c000e314:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e319:	8d 76 00             	lea    esi,[esi+0x0]
c000e31c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e321:	83 e0 02             	and    eax,0x2
c000e324:	74 1e                	je     c000e344 <ACPI::close(int, int, void*)+0x90>
c000e326:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e32d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e331:	89 c2                	mov    edx,eax
c000e333:	ec                   	in     al,dx
c000e334:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e338:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e33c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e340:	eb da                	jmp    c000e31c <ACPI::close(int, int, void*)+0x68>
c000e342:	66 90                	xchg   ax,ax
c000e344:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e34b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e350:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e354:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e358:	ee                   	out    dx,al
c000e359:	8d 76 00             	lea    esi,[esi+0x0]
c000e35c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e361:	8d 76 00             	lea    esi,[esi+0x0]
c000e364:	83 c4 1c             	add    esp,0x1c
c000e367:	c3                   	ret    

c000e368 <findRSDP()>:
c000e368:	83 ec 1c             	sub    esp,0x1c
c000e36b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e370:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e376:	83 e0 04             	and    eax,0x4
c000e379:	0f b6 c0             	movzx  eax,al
c000e37c:	85 c0                	test   eax,eax
c000e37e:	75 08                	jne    c000e388 <findRSDP()+0x20>
c000e380:	b8 00 00 00 00       	mov    eax,0x0
c000e385:	eb 75                	jmp    c000e3fc <findRSDP()+0x94>
c000e387:	90                   	nop
c000e388:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e38d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e392:	7f 1c                	jg     c000e3b0 <findRSDP()+0x48>
c000e394:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e399:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e39f:	83 e2 fb             	and    edx,0xfffffffb
c000e3a2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3a8:	b8 00 00 00 00       	mov    eax,0x0
c000e3ad:	eb 4d                	jmp    c000e3fc <findRSDP()+0x94>
c000e3af:	90                   	nop
c000e3b0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e3b8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e3c0:	77 32                	ja     c000e3f4 <findRSDP()+0x8c>
c000e3c2:	83 ec 04             	sub    esp,0x4
c000e3c5:	6a 08                	push   0x8
c000e3c7:	68 43 08 02 c0       	push   0xc0020843
c000e3cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3d0:	e8 ab 1f ff ff       	call   c0000380 <memcmp>
c000e3d5:	83 c4 10             	add    esp,0x10
c000e3d8:	85 c0                	test   eax,eax
c000e3da:	0f 94 c0             	sete   al
c000e3dd:	0f b6 c0             	movzx  eax,al
c000e3e0:	85 c0                	test   eax,eax
c000e3e2:	74 08                	je     c000e3ec <findRSDP()+0x84>
c000e3e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3e8:	eb 12                	jmp    c000e3fc <findRSDP()+0x94>
c000e3ea:	66 90                	xchg   ax,ax
c000e3ec:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e3f1:	eb c5                	jmp    c000e3b8 <findRSDP()+0x50>
c000e3f3:	90                   	nop
c000e3f4:	b8 00 00 00 00       	mov    eax,0x0
c000e3f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3fc:	83 c4 1c             	add    esp,0x1c
c000e3ff:	c3                   	ret    

c000e400 <loadACPITables(unsigned char*)>:
c000e400:	57                   	push   edi
c000e401:	56                   	push   esi
c000e402:	53                   	push   ebx
c000e403:	83 ec 60             	sub    esp,0x60
c000e406:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e40b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e411:	83 e0 04             	and    eax,0x4
c000e414:	0f b6 c0             	movzx  eax,al
c000e417:	85 c0                	test   eax,eax
c000e419:	0f 84 41 02 00 00    	je     c000e660 <loadACPITables(unsigned char*)+0x260>
c000e41f:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e424:	0f b6 c0             	movzx  eax,al
c000e427:	85 c0                	test   eax,eax
c000e429:	74 79                	je     c000e4a4 <loadACPITables(unsigned char*)+0xa4>
c000e42b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e42f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e433:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e437:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e43a:	83 e8 24             	sub    eax,0x24
c000e43d:	c1 e8 03             	shr    eax,0x3
c000e440:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e444:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e44c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e450:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e454:	0f 8d ba 00 00 00    	jge    c000e514 <loadACPITables(unsigned char*)+0x114>
c000e45a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e45e:	83 c0 24             	add    eax,0x24
c000e461:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e465:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e469:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e46d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e471:	c1 e0 03             	shl    eax,0x3
c000e474:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e478:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e47c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e47f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e481:	89 c1                	mov    ecx,eax
c000e483:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e488:	8d 50 01             	lea    edx,[eax+0x1]
c000e48b:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e491:	89 ca                	mov    edx,ecx
c000e493:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e49a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e49f:	eb ab                	jmp    c000e44c <loadACPITables(unsigned char*)+0x4c>
c000e4a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4a4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4b3:	83 e8 24             	sub    eax,0x24
c000e4b6:	c1 e8 02             	shr    eax,0x2
c000e4b9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4bd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e4c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4cc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e4d0:	7d 42                	jge    c000e514 <loadACPITables(unsigned char*)+0x114>
c000e4d2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4d6:	83 c0 24             	add    eax,0x24
c000e4d9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e4e5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4e9:	c1 e0 02             	shl    eax,0x2
c000e4ec:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e4f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4f6:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4fb:	8d 50 01             	lea    edx,[eax+0x1]
c000e4fe:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e504:	89 ca                	mov    edx,ecx
c000e506:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e50d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e512:	eb b4                	jmp    c000e4c8 <loadACPITables(unsigned char*)+0xc8>
c000e514:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e51c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e521:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e525:	0f 8d 39 01 00 00    	jge    c000e664 <loadACPITables(unsigned char*)+0x264>
c000e52b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e52f:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e536:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e53a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e53e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e542:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e546:	25 ff 0f 00 00       	and    eax,0xfff
c000e54b:	89 c6                	mov    esi,eax
c000e54d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e553:	83 ec 0c             	sub    esp,0xc
c000e556:	6a 01                	push   0x1
c000e558:	e8 a8 b0 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e55d:	83 c4 10             	add    esp,0x10
c000e560:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e564:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e56a:	83 ec 0c             	sub    esp,0xc
c000e56d:	6a 01                	push   0x1
c000e56f:	6a 01                	push   0x1
c000e571:	50                   	push   eax
c000e572:	52                   	push   edx
c000e573:	53                   	push   ebx
c000e574:	e8 85 ba ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e579:	83 c4 20             	add    esp,0x20
c000e57c:	09 f0                	or     eax,esi
c000e57e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e582:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e586:	c1 e0 03             	shl    eax,0x3
c000e589:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e58e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e592:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e596:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e59a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5b6:	89 c6                	mov    esi,eax
c000e5b8:	89 d7                	mov    edi,edx
c000e5ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5bc:	89 c8                	mov    eax,ecx
c000e5be:	89 fa                	mov    edx,edi
c000e5c0:	89 f3                	mov    ebx,esi
c000e5c2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e5c6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e5ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5dd:	05 00 10 00 00       	add    eax,0x1000
c000e5e2:	c1 e8 0c             	shr    eax,0xc
c000e5e5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e5f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5f5:	25 ff 0f 00 00       	and    eax,0xfff
c000e5fa:	89 c6                	mov    esi,eax
c000e5fc:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e602:	83 ec 0c             	sub    esp,0xc
c000e605:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e609:	e8 f7 af ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e60e:	83 c4 10             	add    esp,0x10
c000e611:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e615:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e61b:	83 ec 0c             	sub    esp,0xc
c000e61e:	6a 01                	push   0x1
c000e620:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e624:	50                   	push   eax
c000e625:	52                   	push   edx
c000e626:	53                   	push   ebx
c000e627:	e8 d2 b9 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e62c:	83 c4 20             	add    esp,0x20
c000e62f:	09 f0                	or     eax,esi
c000e631:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e639:	83 ec 0c             	sub    esp,0xc
c000e63c:	50                   	push   eax
c000e63d:	e8 d5 b2 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c000e642:	83 c4 10             	add    esp,0x10
c000e645:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e649:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e64d:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e654:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e659:	e9 be fe ff ff       	jmp    c000e51c <loadACPITables(unsigned char*)+0x11c>
c000e65e:	66 90                	xchg   ax,ax
c000e660:	90                   	nop
c000e661:	8d 76 00             	lea    esi,[esi+0x0]
c000e664:	83 c4 60             	add    esp,0x60
c000e667:	5b                   	pop    ebx
c000e668:	5e                   	pop    esi
c000e669:	5f                   	pop    edi
c000e66a:	c3                   	ret    
c000e66b:	90                   	nop

c000e66c <findRSDT(unsigned char*)>:
c000e66c:	57                   	push   edi
c000e66d:	56                   	push   esi
c000e66e:	53                   	push   ebx
c000e66f:	83 ec 50             	sub    esp,0x50
c000e672:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e677:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e67d:	83 e0 04             	and    eax,0x4
c000e680:	0f b6 c0             	movzx  eax,al
c000e683:	85 c0                	test   eax,eax
c000e685:	75 0d                	jne    c000e694 <findRSDT(unsigned char*)+0x28>
c000e687:	b8 00 00 00 00       	mov    eax,0x0
c000e68c:	e9 2b 01 00 00       	jmp    c000e7bc <findRSDT(unsigned char*)+0x150>
c000e691:	8d 76 00             	lea    esi,[esi+0x0]
c000e694:	89 e0                	mov    eax,esp
c000e696:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e69a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e69e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6a2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6aa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6b6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6ba:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e6be:	89 c6                	mov    esi,eax
c000e6c0:	89 d7                	mov    edi,edx
c000e6c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6c4:	89 c8                	mov    eax,ecx
c000e6c6:	89 fa                	mov    edx,edi
c000e6c8:	89 f3                	mov    ebx,esi
c000e6ca:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e6ce:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e6d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e6d6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e6da:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e6de:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e6e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6ee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6f6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6fe:	25 ff 0f 00 00       	and    eax,0xfff
c000e703:	89 c6                	mov    esi,eax
c000e705:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	6a 02                	push   0x2
c000e710:	e8 f0 ae ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e715:	83 c4 10             	add    esp,0x10
c000e718:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e71c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e722:	83 ec 0c             	sub    esp,0xc
c000e725:	6a 01                	push   0x1
c000e727:	6a 02                	push   0x2
c000e729:	50                   	push   eax
c000e72a:	52                   	push   edx
c000e72b:	53                   	push   ebx
c000e72c:	e8 cd b8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e731:	83 c4 20             	add    esp,0x20
c000e734:	09 f0                	or     eax,esi
c000e736:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e73a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e73e:	25 ff 0f 00 00       	and    eax,0xfff
c000e743:	89 c6                	mov    esi,eax
c000e745:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e74b:	83 ec 0c             	sub    esp,0xc
c000e74e:	6a 02                	push   0x2
c000e750:	e8 b0 ae ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e755:	83 c4 10             	add    esp,0x10
c000e758:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e75c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e762:	83 ec 0c             	sub    esp,0xc
c000e765:	6a 01                	push   0x1
c000e767:	6a 02                	push   0x2
c000e769:	50                   	push   eax
c000e76a:	52                   	push   edx
c000e76b:	53                   	push   ebx
c000e76c:	e8 8d b8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e771:	83 c4 20             	add    esp,0x20
c000e774:	09 f0                	or     eax,esi
c000e776:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e77a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e77f:	85 c0                	test   eax,eax
c000e781:	75 11                	jne    c000e794 <findRSDT(unsigned char*)+0x128>
c000e783:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e78a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e78e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e792:	eb 24                	jmp    c000e7b8 <findRSDT(unsigned char*)+0x14c>
c000e794:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e799:	83 f8 02             	cmp    eax,0x2
c000e79c:	75 12                	jne    c000e7b0 <findRSDT(unsigned char*)+0x144>
c000e79e:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e7a5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7a9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7ad:	eb 09                	jmp    c000e7b8 <findRSDT(unsigned char*)+0x14c>
c000e7af:	90                   	nop
c000e7b0:	b8 00 00 00 00       	mov    eax,0x0
c000e7b5:	eb 05                	jmp    c000e7bc <findRSDT(unsigned char*)+0x150>
c000e7b7:	90                   	nop
c000e7b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e7bc:	83 c4 50             	add    esp,0x50
c000e7bf:	5b                   	pop    ebx
c000e7c0:	5e                   	pop    esi
c000e7c1:	5f                   	pop    edi
c000e7c2:	c3                   	ret    
c000e7c3:	90                   	nop

c000e7c4 <findDataTable(unsigned char*, char*)>:
c000e7c4:	83 ec 1c             	sub    esp,0x1c
c000e7c7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7cc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7d2:	83 e0 04             	and    eax,0x4
c000e7d5:	0f b6 c0             	movzx  eax,al
c000e7d8:	85 c0                	test   eax,eax
c000e7da:	75 08                	jne    c000e7e4 <findDataTable(unsigned char*, char*)+0x20>
c000e7dc:	b8 00 00 00 00       	mov    eax,0x0
c000e7e1:	eb 5d                	jmp    c000e840 <findDataTable(unsigned char*, char*)+0x7c>
c000e7e3:	90                   	nop
c000e7e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e7ec:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e7f1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e7f5:	7d 41                	jge    c000e838 <findDataTable(unsigned char*, char*)+0x74>
c000e7f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7fb:	c1 e0 03             	shl    eax,0x3
c000e7fe:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e803:	83 ec 04             	sub    esp,0x4
c000e806:	6a 04                	push   0x4
c000e808:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e80c:	50                   	push   eax
c000e80d:	e8 6e 1b ff ff       	call   c0000380 <memcmp>
c000e812:	83 c4 10             	add    esp,0x10
c000e815:	85 c0                	test   eax,eax
c000e817:	0f 94 c0             	sete   al
c000e81a:	0f b6 c0             	movzx  eax,al
c000e81d:	85 c0                	test   eax,eax
c000e81f:	74 0f                	je     c000e830 <findDataTable(unsigned char*, char*)+0x6c>
c000e821:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e825:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e82c:	eb 12                	jmp    c000e840 <findDataTable(unsigned char*, char*)+0x7c>
c000e82e:	66 90                	xchg   ax,ax
c000e830:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e835:	eb b5                	jmp    c000e7ec <findDataTable(unsigned char*, char*)+0x28>
c000e837:	90                   	nop
c000e838:	b8 00 00 00 00       	mov    eax,0x0
c000e83d:	8d 76 00             	lea    esi,[esi+0x0]
c000e840:	83 c4 1c             	add    esp,0x1c
c000e843:	c3                   	ret    

c000e844 <scanMADT()>:
c000e844:	53                   	push   ebx
c000e845:	83 ec 38             	sub    esp,0x38
c000e848:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e84d:	25 00 04 00 00       	and    eax,0x400
c000e852:	74 14                	je     c000e868 <scanMADT()+0x24>
c000e854:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e859:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e85f:	83 e2 fb             	and    edx,0xfffffffb
c000e862:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e868:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e86d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e873:	83 e0 04             	and    eax,0x4
c000e876:	0f b6 c0             	movzx  eax,al
c000e879:	85 c0                	test   eax,eax
c000e87b:	0f 84 6b 04 00 00    	je     c000ecec <scanMADT()+0x4a8>
c000e881:	e8 e2 fa ff ff       	call   c000e368 <findRSDP()>
c000e886:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e88b:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e890:	85 c0                	test   eax,eax
c000e892:	75 1c                	jne    c000e8b0 <scanMADT()+0x6c>
c000e894:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e899:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e89f:	83 e2 fb             	and    edx,0xfffffffb
c000e8a2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8a8:	e9 47 04 00 00       	jmp    c000ecf4 <scanMADT()+0x4b0>
c000e8ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e8b0:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8b5:	83 ec 0c             	sub    esp,0xc
c000e8b8:	50                   	push   eax
c000e8b9:	e8 ae fd ff ff       	call   c000e66c <findRSDT(unsigned char*)>
c000e8be:	83 c4 10             	add    esp,0x10
c000e8c1:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e8c6:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8cb:	85 c0                	test   eax,eax
c000e8cd:	75 19                	jne    c000e8e8 <scanMADT()+0xa4>
c000e8cf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8d4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8da:	83 e2 fb             	and    edx,0xfffffffb
c000e8dd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8e3:	e9 0c 04 00 00       	jmp    c000ecf4 <scanMADT()+0x4b0>
c000e8e8:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8ed:	83 ec 0c             	sub    esp,0xc
c000e8f0:	50                   	push   eax
c000e8f1:	e8 0a fb ff ff       	call   c000e400 <loadACPITables(unsigned char*)>
c000e8f6:	83 c4 10             	add    esp,0x10
c000e8f9:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8fe:	83 ec 08             	sub    esp,0x8
c000e901:	68 4c 08 02 c0       	push   0xc002084c
c000e906:	50                   	push   eax
c000e907:	e8 b8 fe ff ff       	call   c000e7c4 <findDataTable(unsigned char*, char*)>
c000e90c:	83 c4 10             	add    esp,0x10
c000e90f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e913:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e918:	75 1a                	jne    c000e934 <scanMADT()+0xf0>
c000e91a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e91f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e925:	83 e2 fe             	and    edx,0xfffffffe
c000e928:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e92e:	e9 c1 03 00 00       	jmp    c000ecf4 <scanMADT()+0x4b0>
c000e933:	90                   	nop
c000e934:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e93c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e940:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e943:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e947:	0f 87 a7 03 00 00    	ja     c000ecf4 <scanMADT()+0x4b0>
c000e94d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e955:	0f 87 99 03 00 00    	ja     c000ecf4 <scanMADT()+0x4b0>
c000e95b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e95f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e963:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e967:	8d 50 01             	lea    edx,[eax+0x1]
c000e96a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e96e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e972:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e976:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e97a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e97e:	8d 50 01             	lea    edx,[eax+0x1]
c000e981:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e985:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e989:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e98d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e991:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e996:	83 f8 02             	cmp    eax,0x2
c000e999:	0f 86 51 03 00 00    	jbe    c000ecf0 <scanMADT()+0x4ac>
c000e99f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9a4:	85 c0                	test   eax,eax
c000e9a6:	75 58                	jne    c000ea00 <scanMADT()+0x1bc>
c000e9a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ac:	8d 50 01             	lea    edx,[eax+0x1]
c000e9af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9b3:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9b9:	0f b6 d2             	movzx  edx,dl
c000e9bc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9c0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9c4:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e9ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ce:	8d 50 01             	lea    edx,[eax+0x1]
c000e9d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9d5:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9db:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e9de:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000e9e4:	0f b6 d2             	movzx  edx,dl
c000e9e7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9eb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9ef:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000e9f5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9fa:	e9 d9 02 00 00       	jmp    c000ecd8 <scanMADT()+0x494>
c000e9ff:	90                   	nop
c000ea00:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ea05:	83 f8 01             	cmp    eax,0x1
c000ea08:	0f 85 1a 01 00 00    	jne    c000eb28 <scanMADT()+0x2e4>
c000ea0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea12:	8d 50 01             	lea    edx,[eax+0x1]
c000ea15:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea19:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ea1f:	0f b6 d2             	movzx  edx,dl
c000ea22:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea26:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea2a:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea30:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea3d:	01 d0                	add    eax,edx
c000ea3f:	83 c0 2c             	add    eax,0x2c
c000ea42:	8a 00                	mov    al,BYTE PTR [eax]
c000ea44:	0f b6 d0             	movzx  edx,al
c000ea47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea4b:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea52:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea56:	0f b6 c0             	movzx  eax,al
c000ea59:	c1 e0 08             	shl    eax,0x8
c000ea5c:	89 d1                	mov    ecx,edx
c000ea5e:	09 c1                	or     ecx,eax
c000ea60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea64:	8d 50 02             	lea    edx,[eax+0x2]
c000ea67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea6b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea6f:	0f b6 c0             	movzx  eax,al
c000ea72:	c1 e0 10             	shl    eax,0x10
c000ea75:	09 c1                	or     ecx,eax
c000ea77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea7b:	8d 50 03             	lea    edx,[eax+0x3]
c000ea7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea82:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea86:	0f b6 c0             	movzx  eax,al
c000ea89:	c1 e0 18             	shl    eax,0x18
c000ea8c:	09 c1                	or     ecx,eax
c000ea8e:	89 ca                	mov    edx,ecx
c000ea90:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ea95:	0f b6 c0             	movzx  eax,al
c000ea98:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000ea9f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eaa4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eaa8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaac:	01 d0                	add    eax,edx
c000eaae:	83 c0 2c             	add    eax,0x2c
c000eab1:	8a 00                	mov    al,BYTE PTR [eax]
c000eab3:	0f b6 d0             	movzx  edx,al
c000eab6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaba:	8d 48 01             	lea    ecx,[eax+0x1]
c000eabd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eac1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eac5:	0f b6 c0             	movzx  eax,al
c000eac8:	c1 e0 08             	shl    eax,0x8
c000eacb:	89 d1                	mov    ecx,edx
c000eacd:	09 c1                	or     ecx,eax
c000eacf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ead3:	8d 50 02             	lea    edx,[eax+0x2]
c000ead6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eada:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eade:	0f b6 c0             	movzx  eax,al
c000eae1:	c1 e0 10             	shl    eax,0x10
c000eae4:	09 c1                	or     ecx,eax
c000eae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaea:	8d 50 03             	lea    edx,[eax+0x3]
c000eaed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaf1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaf5:	0f b6 c0             	movzx  eax,al
c000eaf8:	c1 e0 18             	shl    eax,0x18
c000eafb:	09 c1                	or     ecx,eax
c000eafd:	89 ca                	mov    edx,ecx
c000eaff:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb04:	0f b6 c0             	movzx  eax,al
c000eb07:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb0e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb13:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb18:	83 c0 01             	add    eax,0x1
c000eb1b:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb20:	e9 b3 01 00 00       	jmp    c000ecd8 <scanMADT()+0x494>
c000eb25:	8d 76 00             	lea    esi,[esi+0x0]
c000eb28:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb2d:	83 f8 02             	cmp    eax,0x2
c000eb30:	0f 85 ea 00 00 00    	jne    c000ec20 <scanMADT()+0x3dc>
c000eb36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb3a:	8d 50 01             	lea    edx,[eax+0x1]
c000eb3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb45:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb49:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb51:	8d 50 01             	lea    edx,[eax+0x1]
c000eb54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb5c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb60:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb6c:	01 d0                	add    eax,edx
c000eb6e:	83 c0 2c             	add    eax,0x2c
c000eb71:	8a 00                	mov    al,BYTE PTR [eax]
c000eb73:	0f b6 d0             	movzx  edx,al
c000eb76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb7a:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb81:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb85:	0f b6 c0             	movzx  eax,al
c000eb88:	c1 e0 08             	shl    eax,0x8
c000eb8b:	89 d1                	mov    ecx,edx
c000eb8d:	09 c1                	or     ecx,eax
c000eb8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb93:	8d 50 02             	lea    edx,[eax+0x2]
c000eb96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb9a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb9e:	0f b6 c0             	movzx  eax,al
c000eba1:	c1 e0 10             	shl    eax,0x10
c000eba4:	09 c1                	or     ecx,eax
c000eba6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebaa:	8d 50 03             	lea    edx,[eax+0x3]
c000ebad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebb1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebb5:	0f b6 c0             	movzx  eax,al
c000ebb8:	c1 e0 18             	shl    eax,0x18
c000ebbb:	09 c8                	or     eax,ecx
c000ebbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebc1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ebc6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebce:	01 d0                	add    eax,edx
c000ebd0:	83 c0 2c             	add    eax,0x2c
c000ebd3:	8a 00                	mov    al,BYTE PTR [eax]
c000ebd5:	0f b6 d0             	movzx  edx,al
c000ebd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebdc:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebe3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebe7:	0f b6 c0             	movzx  eax,al
c000ebea:	c1 e0 08             	shl    eax,0x8
c000ebed:	09 d0                	or     eax,edx
c000ebef:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ebf4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ebf9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ebfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec02:	88 90 80 1e 02 c0    	mov    BYTE PTR [eax-0x3ffde180],dl
c000ec08:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec0d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000ec12:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000ec1a:	e9 b9 00 00 00       	jmp    c000ecd8 <scanMADT()+0x494>
c000ec1f:	90                   	nop
c000ec20:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec25:	83 f8 04             	cmp    eax,0x4
c000ec28:	0f 85 9a 00 00 00    	jne    c000ecc8 <scanMADT()+0x484>
c000ec2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec32:	8d 50 01             	lea    edx,[eax+0x1]
c000ec35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec3d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec41:	0f b6 c0             	movzx  eax,al
c000ec44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec50:	01 d0                	add    eax,edx
c000ec52:	83 c0 2c             	add    eax,0x2c
c000ec55:	8a 00                	mov    al,BYTE PTR [eax]
c000ec57:	0f b6 d0             	movzx  edx,al
c000ec5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec5e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec65:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec69:	0f b6 c0             	movzx  eax,al
c000ec6c:	c1 e0 08             	shl    eax,0x8
c000ec6f:	09 d0                	or     eax,edx
c000ec71:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec75:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec7e:	8d 50 01             	lea    edx,[eax+0x1]
c000ec81:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec89:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec8d:	0f b6 c0             	movzx  eax,al
c000ec90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec98:	c1 e0 08             	shl    eax,0x8
c000ec9b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ec9f:	89 c1                	mov    ecx,eax
c000eca1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eca5:	c1 e0 18             	shl    eax,0x18
c000eca8:	89 c3                	mov    ebx,eax
c000ecaa:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ecaf:	8d 50 01             	lea    edx,[eax+0x1]
c000ecb2:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ecb8:	09 d9                	or     ecx,ebx
c000ecba:	89 ca                	mov    edx,ecx
c000ecbc:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ecc3:	eb 13                	jmp    c000ecd8 <scanMADT()+0x494>
c000ecc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecc8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eccd:	83 f8 05             	cmp    eax,0x5
c000ecd0:	75 06                	jne    c000ecd8 <scanMADT()+0x494>
c000ecd2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ecd7:	90                   	nop
c000ecd8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ecdd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ece1:	01 d0                	add    eax,edx
c000ece3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ece7:	e9 50 fc ff ff       	jmp    c000e93c <scanMADT()+0xf8>
c000ecec:	90                   	nop
c000eced:	eb 05                	jmp    c000ecf4 <scanMADT()+0x4b0>
c000ecef:	90                   	nop
c000ecf0:	90                   	nop
c000ecf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf4:	83 c4 38             	add    esp,0x38
c000ecf7:	5b                   	pop    ebx
c000ecf8:	c3                   	ret    
c000ecf9:	90                   	nop
c000ecfa:	66 90                	xchg   ax,ax

c000ecfc <ACPI::ACPI()>:
c000ecfc:	83 ec 0c             	sub    esp,0xc
c000ecff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed03:	83 ec 08             	sub    esp,0x8
c000ed06:	68 51 08 02 c0       	push   0xc0020851
c000ed0b:	50                   	push   eax
c000ed0c:	e8 3b d2 ff ff       	call   c000bf4c <Device::Device(char const*)>
c000ed11:	83 c4 10             	add    esp,0x10
c000ed14:	ba 88 09 02 c0       	mov    edx,0xc0020988
c000ed19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed1d:	89 10                	mov    DWORD PTR [eax],edx
c000ed1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed23:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed2e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed3c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed46:	e8 f9 fa ff ff       	call   c000e844 <scanMADT()>
c000ed4b:	90                   	nop
c000ed4c:	83 c4 0c             	add    esp,0xc
c000ed4f:	c3                   	ret    

c000ed50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed50:	83 ec 2c             	sub    esp,0x2c
c000ed53:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ed57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed5b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000ed5f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ed63:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed68:	88 c8                	mov    al,cl
c000ed6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed6e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed73:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed7b:	90                   	nop
c000ed7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed80:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed86:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ed8a:	0f 8d b0 00 00 00    	jge    c000ee40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000ed90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed98:	83 c2 2a             	add    edx,0x2a
c000ed9b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ed9f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000eda4:	0f b7 c0             	movzx  eax,ax
c000eda7:	39 c2                	cmp    edx,eax
c000eda9:	0f 85 85 00 00 00    	jne    c000ee34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edb3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edb7:	83 c2 2a             	add    edx,0x2a
c000edba:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000edbe:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000edc3:	0f b6 c0             	movzx  eax,al
c000edc6:	39 c2                	cmp    edx,eax
c000edc8:	75 6a                	jne    c000ee34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edca:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000edcf:	85 c0                	test   eax,eax
c000edd1:	74 3d                	je     c000ee10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000edd3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eddb:	83 c2 2a             	add    edx,0x2a
c000edde:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ede2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ede6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ede9:	39 c2                	cmp    edx,eax
c000edeb:	74 13                	je     c000ee00 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000eded:	83 ec 0c             	sub    esp,0xc
c000edf0:	68 cc 07 02 c0       	push   0xc00207cc
c000edf5:	e8 db 19 00 00       	call   c00107d5 <KePanic(char const*)>
c000edfa:	83 c4 10             	add    esp,0x10
c000edfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ee00:	83 ec 0c             	sub    esp,0xc
c000ee03:	68 56 08 02 c0       	push   0xc0020856
c000ee08:	e8 c8 19 00 00       	call   c00107d5 <KePanic(char const*)>
c000ee0d:	83 c4 10             	add    esp,0x10
c000ee10:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee1c:	83 c2 2a             	add    edx,0x2a
c000ee1f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee23:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee25:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee28:	89 01                	mov    DWORD PTR [ecx],eax
c000ee2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee2d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee32:	66 90                	xchg   ax,ax
c000ee34:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee39:	e9 3e ff ff ff       	jmp    c000ed7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee3e:	66 90                	xchg   ax,ax
c000ee40:	90                   	nop
c000ee41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee45:	83 c4 2c             	add    esp,0x2c
c000ee48:	c2 04 00             	ret    0x4
c000ee4b:	90                   	nop

c000ee4c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee4c:	83 ec 1c             	sub    esp,0x1c
c000ee4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee57:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee5b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee60:	88 c8                	mov    al,cl
c000ee62:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee66:	88 d0                	mov    al,dl
c000ee68:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee70:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7a:	83 c2 2a             	add    edx,0x2a
c000ee7d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ee81:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000ee85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee89:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee93:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee9a:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000ee9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eea9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eead:	83 c0 01             	add    eax,0x1
c000eeb0:	88 c1                	mov    cl,al
c000eeb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb6:	83 c2 2a             	add    edx,0x2a
c000eeb9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eecb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eece:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eed2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeda:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eee0:	8d 50 01             	lea    edx,[eax+0x1]
c000eee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eeed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eef7:	3d 00 02 00 00       	cmp    eax,0x200
c000eefc:	75 12                	jne    c000ef10 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000eefe:	83 ec 0c             	sub    esp,0xc
c000ef01:	68 65 08 02 c0       	push   0xc0020865
c000ef06:	e8 ca 18 00 00       	call   c00107d5 <KePanic(char const*)>
c000ef0b:	83 c4 10             	add    esp,0x10
c000ef0e:	66 90                	xchg   ax,ax
c000ef10:	90                   	nop
c000ef11:	83 c4 1c             	add    esp,0x1c
c000ef14:	c3                   	ret    
c000ef15:	90                   	nop
c000ef16:	66 90                	xchg   ax,ax

c000ef18 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef18:	b8 00 00 00 00       	mov    eax,0x0
c000ef1d:	c3                   	ret    
c000ef1e:	66 90                	xchg   ax,ax

c000ef20 <ACPI::detectPCI()>:
c000ef20:	53                   	push   ebx
c000ef21:	83 ec 28             	sub    esp,0x28
c000ef24:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef29:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef2e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef33:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef39:	83 e0 04             	and    eax,0x4
c000ef3c:	0f b6 c0             	movzx  eax,al
c000ef3f:	85 c0                	test   eax,eax
c000ef41:	74 2d                	je     c000ef70 <ACPI::detectPCI()+0x50>
c000ef43:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef48:	83 ec 08             	sub    esp,0x8
c000ef4b:	68 82 08 02 c0       	push   0xc0020882
c000ef50:	50                   	push   eax
c000ef51:	e8 6e f8 ff ff       	call   c000e7c4 <findDataTable(unsigned char*, char*)>
c000ef56:	83 c4 10             	add    esp,0x10
c000ef59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef5d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef62:	74 0c                	je     c000ef70 <ACPI::detectPCI()+0x50>
c000ef64:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef69:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef6e:	66 90                	xchg   ax,ax
c000ef70:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef7c:	8a 00                	mov    al,BYTE PTR [eax]
c000ef7e:	0f b6 c0             	movzx  eax,al
c000ef81:	83 f8 01             	cmp    eax,0x1
c000ef84:	75 0e                	jne    c000ef94 <ACPI::detectPCI()+0x74>
c000ef86:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef8b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef90:	eb 2e                	jmp    c000efc0 <ACPI::detectPCI()+0xa0>
c000ef92:	66 90                	xchg   ax,ax
c000ef94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef98:	8a 00                	mov    al,BYTE PTR [eax]
c000ef9a:	0f b6 c0             	movzx  eax,al
c000ef9d:	83 f8 02             	cmp    eax,0x2
c000efa0:	75 1e                	jne    c000efc0 <ACPI::detectPCI()+0xa0>
c000efa2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efa7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000efac:	85 c0                	test   eax,eax
c000efae:	74 10                	je     c000efc0 <ACPI::detectPCI()+0xa0>
c000efb0:	83 ec 0c             	sub    esp,0xc
c000efb3:	68 fc 07 02 c0       	push   0xc00207fc
c000efb8:	e8 18 18 00 00       	call   c00107d5 <KePanic(char const*)>
c000efbd:	83 c4 10             	add    esp,0x10
c000efc0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000efc4:	83 f0 01             	xor    eax,0x1
c000efc7:	0f b6 c0             	movzx  eax,al
c000efca:	85 c0                	test   eax,eax
c000efcc:	74 46                	je     c000f014 <ACPI::detectPCI()+0xf4>
c000efce:	e8 5d 11 ff ff       	call   c0000130 <manualPCIProbe>
c000efd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efd7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000efdc:	75 0e                	jne    c000efec <ACPI::detectPCI()+0xcc>
c000efde:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efe3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efe8:	eb 2a                	jmp    c000f014 <ACPI::detectPCI()+0xf4>
c000efea:	66 90                	xchg   ax,ax
c000efec:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eff1:	75 21                	jne    c000f014 <ACPI::detectPCI()+0xf4>
c000eff3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eff8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000effd:	85 c0                	test   eax,eax
c000efff:	74 13                	je     c000f014 <ACPI::detectPCI()+0xf4>
c000f001:	83 ec 0c             	sub    esp,0xc
c000f004:	68 fc 07 02 c0       	push   0xc00207fc
c000f009:	e8 c7 17 00 00       	call   c00107d5 <KePanic(char const*)>
c000f00e:	83 c4 10             	add    esp,0x10
c000f011:	8d 76 00             	lea    esi,[esi+0x0]
c000f014:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f019:	85 c0                	test   eax,eax
c000f01b:	0f 84 87 00 00 00    	je     c000f0a8 <ACPI::detectPCI()+0x188>
c000f021:	83 ec 0c             	sub    esp,0xc
c000f024:	68 87 08 02 c0       	push   0xc0020887
c000f029:	e8 2a 11 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c000f02e:	83 c4 10             	add    esp,0x10
c000f031:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f039:	83 ec 0c             	sub    esp,0xc
c000f03c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f040:	e8 86 8a ff ff       	call   c0007acb <malloc>
c000f045:	83 c4 10             	add    esp,0x10
c000f048:	89 c3                	mov    ebx,eax
c000f04a:	83 ec 0c             	sub    esp,0xc
c000f04d:	53                   	push   ebx
c000f04e:	e8 6f af 00 00       	call   c0019fc2 <PCI::PCI()>
c000f053:	83 c4 10             	add    esp,0x10
c000f056:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f05a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f05e:	83 ec 08             	sub    esp,0x8
c000f061:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f065:	50                   	push   eax
c000f066:	e8 49 cd ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c000f06b:	83 c4 10             	add    esp,0x10
c000f06e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f072:	8b 00                	mov    eax,DWORD PTR [eax]
c000f074:	83 c0 08             	add    eax,0x8
c000f077:	8b 00                	mov    eax,DWORD PTR [eax]
c000f079:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f07e:	85 d2                	test   edx,edx
c000f080:	74 0a                	je     c000f08c <ACPI::detectPCI()+0x16c>
c000f082:	ba 01 00 00 00       	mov    edx,0x1
c000f087:	eb 0b                	jmp    c000f094 <ACPI::detectPCI()+0x174>
c000f089:	8d 76 00             	lea    esi,[esi+0x0]
c000f08c:	ba 02 00 00 00       	mov    edx,0x2
c000f091:	8d 76 00             	lea    esi,[esi+0x0]
c000f094:	6a 00                	push   0x0
c000f096:	6a 00                	push   0x0
c000f098:	52                   	push   edx
c000f099:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f09d:	ff d0                	call   eax
c000f09f:	83 c4 10             	add    esp,0x10
c000f0a2:	e9 91 00 00 00       	jmp    c000f138 <ACPI::detectPCI()+0x218>
c000f0a7:	90                   	nop
c000f0a8:	83 ec 0c             	sub    esp,0xc
c000f0ab:	68 9f 08 02 c0       	push   0xc002089f
c000f0b0:	e8 a3 10 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c000f0b5:	83 c4 10             	add    esp,0x10
c000f0b8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0bf:	83 ec 0c             	sub    esp,0xc
c000f0c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f0c6:	e8 00 8a ff ff       	call   c0007acb <malloc>
c000f0cb:	83 c4 10             	add    esp,0x10
c000f0ce:	89 c3                	mov    ebx,eax
c000f0d0:	83 ec 0c             	sub    esp,0xc
c000f0d3:	53                   	push   ebx
c000f0d4:	e8 91 ba 00 00       	call   c001ab6a <IDE::IDE()>
c000f0d9:	83 c4 10             	add    esp,0x10
c000f0dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f0e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0e4:	83 ec 08             	sub    esp,0x8
c000f0e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f0eb:	50                   	push   eax
c000f0ec:	e8 c3 cc ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c000f0f1:	83 c4 10             	add    esp,0x10
c000f0f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0f8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f102:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f106:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f10f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f113:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f11c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f120:	8b 00                	mov    eax,DWORD PTR [eax]
c000f122:	83 c0 08             	add    eax,0x8
c000f125:	8b 00                	mov    eax,DWORD PTR [eax]
c000f127:	6a 00                	push   0x0
c000f129:	6a 00                	push   0x0
c000f12b:	6a 00                	push   0x0
c000f12d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f131:	ff d0                	call   eax
c000f133:	83 c4 10             	add    esp,0x10
c000f136:	66 90                	xchg   ax,ax
c000f138:	90                   	nop
c000f139:	83 c4 28             	add    esp,0x28
c000f13c:	5b                   	pop    ebx
c000f13d:	c3                   	ret    
c000f13e:	66 90                	xchg   ax,ax

c000f140 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f140:	83 ec 1c             	sub    esp,0x1c
c000f143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f147:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f14a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f14e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f153:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f158:	83 ec 08             	sub    esp,0x8
c000f15b:	52                   	push   edx
c000f15c:	50                   	push   eax
c000f15d:	e8 30 80 ff ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c000f162:	83 c4 10             	add    esp,0x10
c000f165:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f169:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f16e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f173:	83 ec 04             	sub    esp,0x4
c000f176:	6a 01                	push   0x1
c000f178:	52                   	push   edx
c000f179:	50                   	push   eax
c000f17a:	e8 2b 81 ff ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c000f17f:	83 c4 10             	add    esp,0x10
c000f182:	90                   	nop
c000f183:	83 c4 1c             	add    esp,0x1c
c000f186:	c3                   	ret    
c000f187:	90                   	nop

c000f188 <ACPI::sleep()>:
c000f188:	83 ec 0c             	sub    esp,0xc
c000f18b:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f190:	85 c0                	test   eax,eax
c000f192:	74 08                	je     c000f19c <ACPI::sleep()+0x14>
c000f194:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f199:	ff d0                	call   eax
c000f19b:	90                   	nop
c000f19c:	90                   	nop
c000f19d:	83 c4 0c             	add    esp,0xc
c000f1a0:	c3                   	ret    
c000f1a1:	90                   	nop
c000f1a2:	66 90                	xchg   ax,ax

c000f1a4 <ACPI::open(int, int, void*)>:
c000f1a4:	55                   	push   ebp
c000f1a5:	89 e5                	mov    ebp,esp
c000f1a7:	53                   	push   ebx
c000f1a8:	81 ec 74 01 00 00    	sub    esp,0x174
c000f1ae:	83 ec 0c             	sub    esp,0xc
c000f1b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f1b4:	e8 67 fd ff ff       	call   c000ef20 <ACPI::detectPCI()>
c000f1b9:	83 c4 10             	add    esp,0x10
c000f1bc:	83 ec 0c             	sub    esp,0xc
c000f1bf:	68 24 08 02 c0       	push   0xc0020824
c000f1c4:	e8 8f 0f 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c000f1c9:	83 c4 10             	add    esp,0x10
c000f1cc:	83 ec 0c             	sub    esp,0xc
c000f1cf:	68 b4 08 02 c0       	push   0xc00208b4
c000f1d4:	e8 09 49 00 00       	call   c0013ae2 <Thr::loadKernelSymbolTable(char const*)>
c000f1d9:	83 c4 10             	add    esp,0x10
c000f1dc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f1e0:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000f1e7:	83 ec 0c             	sub    esp,0xc
c000f1ea:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000f1ed:	e8 d9 88 ff ff       	call   c0007acb <malloc>
c000f1f2:	83 c4 10             	add    esp,0x10
c000f1f5:	89 c3                	mov    ebx,eax
c000f1f7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f1fc:	83 ec 04             	sub    esp,0x4
c000f1ff:	50                   	push   eax
c000f200:	68 d2 08 02 c0       	push   0xc00208d2
c000f205:	53                   	push   ebx
c000f206:	e8 ef bc ff ff       	call   c000aefa <File::File(char const*, Process*)>
c000f20b:	83 c4 10             	add    esp,0x10
c000f20e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f211:	83 ec 08             	sub    esp,0x8
c000f214:	6a 01                	push   0x1
c000f216:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f219:	e8 98 bd ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c000f21e:	83 c4 10             	add    esp,0x10
c000f221:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f224:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000f228:	75 12                	jne    c000f23c <ACPI::open(int, int, void*)+0x98>
c000f22a:	83 ec 0c             	sub    esp,0xc
c000f22d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f230:	e8 df bd ff ff       	call   c000b014 <File::close()>
c000f235:	83 c4 10             	add    esp,0x10
c000f238:	eb 06                	jmp    c000f240 <ACPI::open(int, int, void*)+0x9c>
c000f23a:	66 90                	xchg   ax,ax
c000f23c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f240:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000f244:	74 16                	je     c000f25c <ACPI::open(int, int, void*)+0xb8>
c000f246:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f249:	8b 00                	mov    eax,DWORD PTR [eax]
c000f24b:	83 c0 08             	add    eax,0x8
c000f24e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f250:	83 ec 0c             	sub    esp,0xc
c000f253:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f256:	ff d0                	call   eax
c000f258:	83 c4 10             	add    esp,0x10
c000f25b:	90                   	nop
c000f25c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000f25f:	83 f0 01             	xor    eax,0x1
c000f262:	0f b6 c0             	movzx  eax,al
c000f265:	85 c0                	test   eax,eax
c000f267:	74 3b                	je     c000f2a4 <ACPI::open(int, int, void*)+0x100>
c000f269:	83 ec 0c             	sub    esp,0xc
c000f26c:	68 f0 08 02 c0       	push   0xc00208f0
c000f271:	e8 e2 0e 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c000f276:	83 c4 10             	add    esp,0x10
c000f279:	83 ec 04             	sub    esp,0x4
c000f27c:	6a 0c                	push   0xc
c000f27e:	68 0b 09 02 c0       	push   0xc002090b
c000f283:	68 1c 09 02 c0       	push   0xc002091c
c000f288:	e8 fd 3b 00 00       	call   c0012e8a <Reg::readIntWithDefault(char*, char*, int)>
c000f28d:	83 c4 10             	add    esp,0x10
c000f290:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f293:	83 ec 0c             	sub    esp,0xc
c000f296:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f299:	e8 8c a5 ff ff       	call   c000982a <Virt::setupPageSwapping(int)>
c000f29e:	83 c4 10             	add    esp,0x10
c000f2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2a4:	83 ec 0c             	sub    esp,0xc
c000f2a7:	68 75 f9 01 c0       	push   0xc001f975
c000f2ac:	e8 a7 0e 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c000f2b1:	83 c4 10             	add    esp,0x10
c000f2b4:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f2b7:	83 ec 08             	sub    esp,0x8
c000f2ba:	6a 13                	push   0x13
c000f2bc:	50                   	push   eax
c000f2bd:	e8 0a ce ff ff       	call   c000c0cc <getDevicesOfType(DeviceType)>
c000f2c2:	83 c4 0c             	add    esp,0xc
c000f2c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2c8:	83 ec 0c             	sub    esp,0xc
c000f2cb:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f2ce:	50                   	push   eax
c000f2cf:	e8 9c fa 00 00       	call   c001ed70 <LinkedList<Device>::isEmpty()>
c000f2d4:	83 c4 10             	add    esp,0x10
c000f2d7:	83 f0 01             	xor    eax,0x1
c000f2da:	0f b6 c0             	movzx  eax,al
c000f2dd:	85 c0                	test   eax,eax
c000f2df:	0f 84 1f 01 00 00    	je     c000f404 <ACPI::open(int, int, void*)+0x260>
c000f2e5:	83 ec 0c             	sub    esp,0xc
c000f2e8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 9b fa 00 00       	call   c001ed8c <LinkedList<Device>::getFirstElement()>
c000f2f1:	83 c4 10             	add    esp,0x10
c000f2f4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000f2f7:	83 ec 0c             	sub    esp,0xc
c000f2fa:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f2fd:	50                   	push   eax
c000f2fe:	e8 91 fa 00 00       	call   c001ed94 <LinkedList<Device>::removeFirst()>
c000f303:	83 c4 10             	add    esp,0x10
c000f306:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000f309:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f30c:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000f30f:	b8 24 00 00 00       	mov    eax,0x24
c000f314:	83 e0 fc             	and    eax,0xfffffffc
c000f317:	89 c3                	mov    ebx,eax
c000f319:	b8 00 00 00 00       	mov    eax,0x0
c000f31e:	66 90                	xchg   ax,ax
c000f320:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f327:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000f32e:	83 c0 04             	add    eax,0x4
c000f331:	39 d8                	cmp    eax,ebx
c000f333:	72 eb                	jb     c000f320 <ACPI::open(int, int, void*)+0x17c>
c000f335:	83 ec 08             	sub    esp,0x8
c000f338:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000f33e:	50                   	push   eax
c000f33f:	83 ec 24             	sub    esp,0x24
c000f342:	89 e1                	mov    ecx,esp
c000f344:	b8 24 00 00 00       	mov    eax,0x24
c000f349:	83 e0 fc             	and    eax,0xfffffffc
c000f34c:	89 c3                	mov    ebx,eax
c000f34e:	b8 00 00 00 00       	mov    eax,0x0
c000f353:	90                   	nop
c000f354:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000f35b:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000f35e:	83 c0 04             	add    eax,0x4
c000f361:	39 d8                	cmp    eax,ebx
c000f363:	72 ef                	jb     c000f354 <ACPI::open(int, int, void*)+0x1b0>
c000f365:	e8 40 b1 00 00       	call   c001a4aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f36a:	83 c4 30             	add    esp,0x30
c000f36d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000f370:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000f374:	0f 84 4e ff ff ff    	je     c000f2c8 <ACPI::open(int, int, void*)+0x124>
c000f37a:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000f381:	83 ec 0c             	sub    esp,0xc
c000f384:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000f387:	e8 3f 87 ff ff       	call   c0007acb <malloc>
c000f38c:	83 c4 10             	add    esp,0x10
c000f38f:	89 c3                	mov    ebx,eax
c000f391:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f396:	83 ec 04             	sub    esp,0x4
c000f399:	50                   	push   eax
c000f39a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f39d:	53                   	push   ebx
c000f39e:	e8 57 bb ff ff       	call   c000aefa <File::File(char const*, Process*)>
c000f3a3:	83 c4 10             	add    esp,0x10
c000f3a6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000f3a9:	83 ec 0c             	sub    esp,0xc
c000f3ac:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f3af:	e8 70 be ff ff       	call   c000b224 <File::exists()>
c000f3b4:	83 c4 10             	add    esp,0x10
c000f3b7:	0f b6 c0             	movzx  eax,al
c000f3ba:	85 c0                	test   eax,eax
c000f3bc:	74 22                	je     c000f3e0 <ACPI::open(int, int, void*)+0x23c>
c000f3be:	83 ec 08             	sub    esp,0x8
c000f3c1:	6a 01                	push   0x1
c000f3c3:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f3c6:	e8 99 51 00 00       	call   c0014564 <Thr::loadDLL(char const*, bool)>
c000f3cb:	83 c4 10             	add    esp,0x10
c000f3ce:	83 ec 08             	sub    esp,0x8
c000f3d1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f3d4:	50                   	push   eax
c000f3d5:	e8 ca 53 00 00       	call   c00147a4 <Thr::executeDLL(unsigned long, void*)>
c000f3da:	83 c4 10             	add    esp,0x10
c000f3dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f3e0:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000f3e4:	0f 84 de fe ff ff    	je     c000f2c8 <ACPI::open(int, int, void*)+0x124>
c000f3ea:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f3ed:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3ef:	83 c0 08             	add    eax,0x8
c000f3f2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3f4:	83 ec 0c             	sub    esp,0xc
c000f3f7:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f3fa:	ff d0                	call   eax
c000f3fc:	83 c4 10             	add    esp,0x10
c000f3ff:	e9 c4 fe ff ff       	jmp    c000f2c8 <ACPI::open(int, int, void*)+0x124>
c000f404:	83 ec 0c             	sub    esp,0xc
c000f407:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f40a:	50                   	push   eax
c000f40b:	e8 5c f9 00 00       	call   c001ed6c <LinkedList<Device>::~LinkedList()>
c000f410:	83 c4 10             	add    esp,0x10
c000f413:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f419:	83 ec 08             	sub    esp,0x8
c000f41c:	6a 01                	push   0x1
c000f41e:	68 23 09 02 c0       	push   0xc0020923
c000f423:	e8 3c 51 00 00       	call   c0014564 <Thr::loadDLL(char const*, bool)>
c000f428:	83 c4 10             	add    esp,0x10
c000f42b:	83 ec 08             	sub    esp,0x8
c000f42e:	53                   	push   ebx
c000f42f:	50                   	push   eax
c000f430:	e8 6f 53 00 00       	call   c00147a4 <Thr::executeDLL(unsigned long, void*)>
c000f435:	83 c4 10             	add    esp,0x10
c000f438:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f43d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f443:	83 e0 04             	and    eax,0x4
c000f446:	0f b6 c0             	movzx  eax,al
c000f449:	85 c0                	test   eax,eax
c000f44b:	0f 84 e3 00 00 00    	je     c000f534 <ACPI::open(int, int, void*)+0x390>
c000f451:	83 ec 0c             	sub    esp,0xc
c000f454:	68 40 09 02 c0       	push   0xc0020940
c000f459:	e8 fa 0c 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c000f45e:	83 c4 10             	add    esp,0x10
c000f461:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000f468:	83 ec 0c             	sub    esp,0xc
c000f46b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000f46e:	e8 58 86 ff ff       	call   c0007acb <malloc>
c000f473:	83 c4 10             	add    esp,0x10
c000f476:	89 c3                	mov    ebx,eax
c000f478:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f47d:	83 ec 04             	sub    esp,0x4
c000f480:	50                   	push   eax
c000f481:	68 5d 09 02 c0       	push   0xc002095d
c000f486:	53                   	push   ebx
c000f487:	e8 6e ba ff ff       	call   c000aefa <File::File(char const*, Process*)>
c000f48c:	83 c4 10             	add    esp,0x10
c000f48f:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000f492:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f496:	74 1c                	je     c000f4b4 <ACPI::open(int, int, void*)+0x310>
c000f498:	83 ec 0c             	sub    esp,0xc
c000f49b:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f49e:	e8 81 bd ff ff       	call   c000b224 <File::exists()>
c000f4a3:	83 c4 10             	add    esp,0x10
c000f4a6:	0f b6 c0             	movzx  eax,al
c000f4a9:	85 c0                	test   eax,eax
c000f4ab:	74 07                	je     c000f4b4 <ACPI::open(int, int, void*)+0x310>
c000f4ad:	b0 01                	mov    al,0x1
c000f4af:	eb 07                	jmp    c000f4b8 <ACPI::open(int, int, void*)+0x314>
c000f4b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4b4:	b0 00                	mov    al,0x0
c000f4b6:	66 90                	xchg   ax,ax
c000f4b8:	0f b6 c0             	movzx  eax,al
c000f4bb:	85 c0                	test   eax,eax
c000f4bd:	74 21                	je     c000f4e0 <ACPI::open(int, int, void*)+0x33c>
c000f4bf:	83 ec 08             	sub    esp,0x8
c000f4c2:	6a 01                	push   0x1
c000f4c4:	68 5d 09 02 c0       	push   0xc002095d
c000f4c9:	e8 96 50 00 00       	call   c0014564 <Thr::loadDLL(char const*, bool)>
c000f4ce:	83 c4 10             	add    esp,0x10
c000f4d1:	83 ec 08             	sub    esp,0x8
c000f4d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f4d7:	50                   	push   eax
c000f4d8:	e8 c7 52 00 00       	call   c00147a4 <Thr::executeDLL(unsigned long, void*)>
c000f4dd:	83 c4 10             	add    esp,0x10
c000f4e0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f4e4:	74 1e                	je     c000f504 <ACPI::open(int, int, void*)+0x360>
c000f4e6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f4ea:	74 18                	je     c000f504 <ACPI::open(int, int, void*)+0x360>
c000f4ec:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000f4ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f1:	83 c0 08             	add    eax,0x8
c000f4f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f6:	83 ec 0c             	sub    esp,0xc
c000f4f9:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f4fc:	ff d0                	call   eax
c000f4fe:	83 c4 10             	add    esp,0x10
c000f501:	8d 76 00             	lea    esi,[esi+0x0]
c000f504:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f509:	83 ec 08             	sub    esp,0x8
c000f50c:	68 7a 09 02 c0       	push   0xc002097a
c000f511:	50                   	push   eax
c000f512:	e8 ad f2 ff ff       	call   c000e7c4 <findDataTable(unsigned char*, char*)>
c000f517:	83 c4 10             	add    esp,0x10
c000f51a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f51d:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000f521:	74 11                	je     c000f534 <ACPI::open(int, int, void*)+0x390>
c000f523:	83 ec 08             	sub    esp,0x8
c000f526:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000f529:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f52c:	e8 0f fc ff ff       	call   c000f140 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f531:	83 c4 10             	add    esp,0x10
c000f534:	b8 00 00 00 00       	mov    eax,0x0
c000f539:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f53c:	c9                   	leave  
c000f53d:	c3                   	ret    

c000f53e <CPU::close(int, int, void*)>:
c000f53e:	31 c0                	xor    eax,eax
c000f540:	c3                   	ret    
c000f541:	90                   	nop

c000f542 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f542:	60                   	pusha  
c000f543:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f547:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f54b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f54f:	9c                   	pushf  
c000f550:	fa                   	cli    
c000f551:	0f 09                	wbinvd 
c000f553:	0f 30                	wrmsr  
c000f555:	9d                   	popf   
c000f556:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f55a:	89 02                	mov    DWORD PTR [edx],eax
c000f55c:	61                   	popa   
c000f55d:	c3                   	ret    

c000f55e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f55e:	60                   	pusha  
c000f55f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f563:	9c                   	pushf  
c000f564:	fa                   	cli    
c000f565:	0f 09                	wbinvd 
c000f567:	31 c0                	xor    eax,eax
c000f569:	31 d2                	xor    edx,edx
c000f56b:	0f 32                	rdmsr  
c000f56d:	9d                   	popf   
c000f56e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f572:	89 02                	mov    DWORD PTR [edx],eax
c000f574:	61                   	popa   
c000f575:	c3                   	ret    

c000f576 <CPU::AMD_K6_writeback(int, int, int)>:
c000f576:	56                   	push   esi
c000f577:	53                   	push   ebx
c000f578:	83 ec 10             	sub    esp,0x10
c000f57b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f584:	75 5d                	jne    c000f5e3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f586:	83 f8 08             	cmp    eax,0x8
c000f589:	75 09                	jne    c000f594 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f58b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f590:	7e 13                	jle    c000f5a5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f592:	eb 30                	jmp    c000f5c4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f594:	83 f8 06             	cmp    eax,0x6
c000f597:	7c 4a                	jl     c000f5e3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f599:	83 f8 07             	cmp    eax,0x7
c000f59c:	7e 07                	jle    c000f5a5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f59e:	83 f8 09             	cmp    eax,0x9
c000f5a1:	74 21                	je     c000f5c4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f5a3:	eb 3e                	jmp    c000f5e3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5a5:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f5ab:	89 e6                	mov    esi,esp
c000f5ad:	56                   	push   esi
c000f5ae:	68 82 00 00 c0       	push   0xc0000082
c000f5b3:	e8 a6 ff ff ff       	call   c000f55e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f5b8:	c1 eb 15             	shr    ebx,0x15
c000f5bb:	56                   	push   esi
c000f5bc:	83 e3 7e             	and    ebx,0x7e
c000f5bf:	6a 00                	push   0x0
c000f5c1:	53                   	push   ebx
c000f5c2:	eb 12                	jmp    c000f5d6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f5c4:	89 e3                	mov    ebx,esp
c000f5c6:	53                   	push   ebx
c000f5c7:	68 82 00 00 c0       	push   0xc0000082
c000f5cc:	e8 8d ff ff ff       	call   c000f55e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f5d1:	53                   	push   ebx
c000f5d2:	6a 00                	push   0x0
c000f5d4:	6a 00                	push   0x0
c000f5d6:	68 82 00 00 c0       	push   0xc0000082
c000f5db:	e8 62 ff ff ff       	call   c000f542 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f5e0:	83 c4 18             	add    esp,0x18
c000f5e3:	83 c4 10             	add    esp,0x10
c000f5e6:	5b                   	pop    ebx
c000f5e7:	5e                   	pop    esi
c000f5e8:	c3                   	ret    
c000f5e9:	90                   	nop

c000f5ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f5ea:	55                   	push   ebp
c000f5eb:	57                   	push   edi
c000f5ec:	56                   	push   esi
c000f5ed:	53                   	push   ebx
c000f5ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5f2:	39 05 90 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e90,eax
c000f5f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f5fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f600:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f604:	75 23                	jne    c000f629 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f606:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f60b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f60f:	89 06                	mov    DWORD PTR [esi],eax
c000f611:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f616:	89 07                	mov    DWORD PTR [edi],eax
c000f618:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f61d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f620:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f625:	89 02                	mov    DWORD PTR [edx],eax
c000f627:	eb 3f                	jmp    c000f668 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f629:	31 c9                	xor    ecx,ecx
c000f62b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f62f:	0f a2                	cpuid  
c000f631:	89 06                	mov    DWORD PTR [esi],eax
c000f633:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f637:	89 1f                	mov    DWORD PTR [edi],ebx
c000f639:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f63c:	89 10                	mov    DWORD PTR [eax],edx
c000f63e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f642:	a3 90 1e 02 c0       	mov    ds:0xc0021e90,eax
c000f647:	8b 06                	mov    eax,DWORD PTR [esi]
c000f649:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f64e:	8b 07                	mov    eax,DWORD PTR [edi]
c000f650:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f655:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f658:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f65d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f661:	8b 00                	mov    eax,DWORD PTR [eax]
c000f663:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f668:	5b                   	pop    ebx
c000f669:	5e                   	pop    esi
c000f66a:	5f                   	pop    edi
c000f66b:	5d                   	pop    ebp
c000f66c:	c3                   	ret    
c000f66d:	90                   	nop

c000f66e <CPU::cpuidCheckEDX(unsigned int)>:
c000f66e:	83 ec 10             	sub    esp,0x10
c000f671:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f675:	50                   	push   eax
c000f676:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f67a:	50                   	push   eax
c000f67b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f67f:	50                   	push   eax
c000f680:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f684:	50                   	push   eax
c000f685:	6a 01                	push   0x1
c000f687:	e8 5e ff ff ff       	call   c000f5ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f68c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f690:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f694:	0f 95 c0             	setne  al
c000f697:	83 c4 24             	add    esp,0x24
c000f69a:	c3                   	ret    
c000f69b:	90                   	nop

c000f69c <CPU::cpuidCheckECX(unsigned int)>:
c000f69c:	83 ec 10             	sub    esp,0x10
c000f69f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6a3:	50                   	push   eax
c000f6a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6a8:	50                   	push   eax
c000f6a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6ad:	50                   	push   eax
c000f6ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6b2:	50                   	push   eax
c000f6b3:	6a 01                	push   0x1
c000f6b5:	e8 30 ff ff ff       	call   c000f5ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6be:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f6c2:	0f 95 c0             	setne  al
c000f6c5:	83 c4 24             	add    esp,0x24
c000f6c8:	c3                   	ret    
c000f6c9:	90                   	nop

c000f6ca <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f6ca:	83 ec 10             	sub    esp,0x10
c000f6cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6d1:	50                   	push   eax
c000f6d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6d6:	50                   	push   eax
c000f6d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6db:	50                   	push   eax
c000f6dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6e0:	50                   	push   eax
c000f6e1:	6a 07                	push   0x7
c000f6e3:	e8 02 ff ff ff       	call   c000f5ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6ec:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f6f0:	0f 95 c0             	setne  al
c000f6f3:	83 c4 24             	add    esp,0x24
c000f6f6:	c3                   	ret    
c000f6f7:	90                   	nop

c000f6f8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f6f8:	83 ec 10             	sub    esp,0x10
c000f6fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6ff:	50                   	push   eax
c000f700:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f704:	50                   	push   eax
c000f705:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f709:	50                   	push   eax
c000f70a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70e:	50                   	push   eax
c000f70f:	6a 07                	push   0x7
c000f711:	e8 d4 fe ff ff       	call   c000f5ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f716:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f71a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f71e:	0f 95 c0             	setne  al
c000f721:	83 c4 24             	add    esp,0x24
c000f724:	c3                   	ret    
c000f725:	90                   	nop

c000f726 <CPU::CPU()>:
c000f726:	83 ec 0c             	sub    esp,0xc
c000f729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f72d:	83 ec 08             	sub    esp,0x8
c000f730:	68 9d 0a 02 c0       	push   0xc0020a9d
c000f735:	50                   	push   eax
c000f736:	e8 11 c8 ff ff       	call   c000bf4c <Device::Device(char const*)>
c000f73b:	83 c4 10             	add    esp,0x10
c000f73e:	ba 24 0b 02 c0       	mov    edx,0xc0020b24
c000f743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f747:	89 10                	mov    DWORD PTR [eax],edx
c000f749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f74d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f75b:	05 78 01 00 00       	add    eax,0x178
c000f760:	83 ec 0c             	sub    esp,0xc
c000f763:	50                   	push   eax
c000f764:	e8 0b 7c ff ff       	call   c0007374 <GDT::GDT()>
c000f769:	83 c4 10             	add    esp,0x10
c000f76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f770:	05 7c 09 00 00       	add    eax,0x97c
c000f775:	83 ec 0c             	sub    esp,0xc
c000f778:	50                   	push   eax
c000f779:	e8 46 7e ff ff       	call   c00075c4 <IDT::IDT()>
c000f77e:	83 c4 10             	add    esp,0x10
c000f781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f785:	05 7c 11 00 00       	add    eax,0x117c
c000f78a:	83 ec 0c             	sub    esp,0xc
c000f78d:	50                   	push   eax
c000f78e:	e8 a9 97 ff ff       	call   c0008f3c <TSS::TSS()>
c000f793:	83 c4 10             	add    esp,0x10
c000f796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f79a:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a5:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f7af:	90                   	nop
c000f7b0:	83 c4 0c             	add    esp,0xc
c000f7b3:	c3                   	ret    

c000f7b4 <CPU::displayFeatures()>:
c000f7b4:	c3                   	ret    
c000f7b5:	90                   	nop

c000f7b6 <CPU::detectFeatures()>:
c000f7b6:	55                   	push   ebp
c000f7b7:	57                   	push   edi
c000f7b8:	56                   	push   esi
c000f7b9:	53                   	push   ebx
c000f7ba:	83 ec 30             	sub    esp,0x30
c000f7bd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f7c1:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f7cb:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f7d1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f7d8:	6a 0d                	push   0xd
c000f7da:	6a 00                	push   0x0
c000f7dc:	55                   	push   ebp
c000f7dd:	e8 0e 0d ff ff       	call   c00004f0 <memset>
c000f7e2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f7e7:	83 c4 10             	add    esp,0x10
c000f7ea:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f7f1:	0f 84 db 05 00 00    	je     c000fdd2 <CPU::detectFeatures()+0x61c>
c000f7f7:	83 ec 0c             	sub    esp,0xc
c000f7fa:	89 ef                	mov    edi,ebp
c000f7fc:	6a 10                	push   0x10
c000f7fe:	e8 6b fe ff ff       	call   c000f66e <CPU::cpuidCheckEDX(unsigned int)>
c000f803:	83 e0 01             	and    eax,0x1
c000f806:	8d 14 00             	lea    edx,[eax+eax*1]
c000f809:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f80f:	83 e0 fd             	and    eax,0xfffffffd
c000f812:	09 d0                	or     eax,edx
c000f814:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f81a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f821:	e8 48 fe ff ff       	call   c000f66e <CPU::cpuidCheckEDX(unsigned int)>
c000f826:	83 e0 01             	and    eax,0x1
c000f829:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f830:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f836:	83 e0 fb             	and    eax,0xfffffffb
c000f839:	09 d0                	or     eax,edx
c000f83b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f841:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f848:	e8 21 fe ff ff       	call   c000f66e <CPU::cpuidCheckEDX(unsigned int)>
c000f84d:	83 e0 01             	and    eax,0x1
c000f850:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f857:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f85d:	83 e0 f7             	and    eax,0xfffffff7
c000f860:	09 d0                	or     eax,edx
c000f862:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f868:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f86f:	e8 fa fd ff ff       	call   c000f66e <CPU::cpuidCheckEDX(unsigned int)>
c000f874:	83 e0 01             	and    eax,0x1
c000f877:	c1 e0 04             	shl    eax,0x4
c000f87a:	89 c2                	mov    edx,eax
c000f87c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f882:	83 e0 ef             	and    eax,0xffffffef
c000f885:	09 d0                	or     eax,edx
c000f887:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f88d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f894:	e8 d5 fd ff ff       	call   c000f66e <CPU::cpuidCheckEDX(unsigned int)>
c000f899:	83 e0 01             	and    eax,0x1
c000f89c:	c1 e0 05             	shl    eax,0x5
c000f89f:	89 c2                	mov    edx,eax
c000f8a1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8a7:	83 e0 df             	and    eax,0xffffffdf
c000f8aa:	09 d0                	or     eax,edx
c000f8ac:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8b2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f8b9:	e8 b0 fd ff ff       	call   c000f66e <CPU::cpuidCheckEDX(unsigned int)>
c000f8be:	83 e0 01             	and    eax,0x1
c000f8c1:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8c4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f8ca:	83 e0 fd             	and    eax,0xfffffffd
c000f8cd:	09 d0                	or     eax,edx
c000f8cf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f8d5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f8dc:	e8 8d fd ff ff       	call   c000f66e <CPU::cpuidCheckEDX(unsigned int)>
c000f8e1:	83 e0 01             	and    eax,0x1
c000f8e4:	c1 e0 06             	shl    eax,0x6
c000f8e7:	89 c2                	mov    edx,eax
c000f8e9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f8ef:	83 e0 bf             	and    eax,0xffffffbf
c000f8f2:	09 d0                	or     eax,edx
c000f8f4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f8fa:	58                   	pop    eax
c000f8fb:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8ff:	50                   	push   eax
c000f900:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f904:	50                   	push   eax
c000f905:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f909:	56                   	push   esi
c000f90a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f90e:	50                   	push   eax
c000f90f:	6a 00                	push   0x0
c000f911:	e8 d4 fc ff ff       	call   c000f5ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f916:	b8 04 00 00 00       	mov    eax,0x4
c000f91b:	89 c1                	mov    ecx,eax
c000f91d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f91f:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f925:	89 c1                	mov    ecx,eax
c000f927:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f92b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f92d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f933:	89 c1                	mov    ecx,eax
c000f935:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f939:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f93b:	83 c4 18             	add    esp,0x18
c000f93e:	68 ac 09 02 c0       	push   0xc00209ac
c000f943:	55                   	push   ebp
c000f944:	e8 37 0e ff ff       	call   c0000780 <strcmp>
c000f949:	83 c4 10             	add    esp,0x10
c000f94c:	85 c0                	test   eax,eax
c000f94e:	75 0f                	jne    c000f95f <CPU::detectFeatures()+0x1a9>
c000f950:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f95a:	e9 22 02 00 00       	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000f95f:	50                   	push   eax
c000f960:	50                   	push   eax
c000f961:	68 b9 09 02 c0       	push   0xc00209b9
c000f966:	55                   	push   ebp
c000f967:	e8 14 0e ff ff       	call   c0000780 <strcmp>
c000f96c:	83 c4 10             	add    esp,0x10
c000f96f:	85 c0                	test   eax,eax
c000f971:	74 dd                	je     c000f950 <CPU::detectFeatures()+0x19a>
c000f973:	50                   	push   eax
c000f974:	50                   	push   eax
c000f975:	68 c6 09 02 c0       	push   0xc00209c6
c000f97a:	55                   	push   ebp
c000f97b:	e8 00 0e ff ff       	call   c0000780 <strcmp>
c000f980:	83 c4 10             	add    esp,0x10
c000f983:	85 c0                	test   eax,eax
c000f985:	74 2a                	je     c000f9b1 <CPU::detectFeatures()+0x1fb>
c000f987:	50                   	push   eax
c000f988:	50                   	push   eax
c000f989:	68 d3 09 02 c0       	push   0xc00209d3
c000f98e:	55                   	push   ebp
c000f98f:	e8 ec 0d ff ff       	call   c0000780 <strcmp>
c000f994:	83 c4 10             	add    esp,0x10
c000f997:	85 c0                	test   eax,eax
c000f999:	74 16                	je     c000f9b1 <CPU::detectFeatures()+0x1fb>
c000f99b:	50                   	push   eax
c000f99c:	50                   	push   eax
c000f99d:	68 e0 09 02 c0       	push   0xc00209e0
c000f9a2:	55                   	push   ebp
c000f9a3:	e8 d8 0d ff ff       	call   c0000780 <strcmp>
c000f9a8:	83 c4 10             	add    esp,0x10
c000f9ab:	85 c0                	test   eax,eax
c000f9ad:	74 48                	je     c000f9f7 <CPU::detectFeatures()+0x241>
c000f9af:	eb 0f                	jmp    c000f9c0 <CPU::detectFeatures()+0x20a>
c000f9b1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f9bb:	e9 c1 01 00 00       	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000f9c0:	50                   	push   eax
c000f9c1:	50                   	push   eax
c000f9c2:	68 ed 09 02 c0       	push   0xc00209ed
c000f9c7:	55                   	push   ebp
c000f9c8:	e8 b3 0d ff ff       	call   c0000780 <strcmp>
c000f9cd:	83 c4 10             	add    esp,0x10
c000f9d0:	85 c0                	test   eax,eax
c000f9d2:	74 23                	je     c000f9f7 <CPU::detectFeatures()+0x241>
c000f9d4:	57                   	push   edi
c000f9d5:	57                   	push   edi
c000f9d6:	68 fa 09 02 c0       	push   0xc00209fa
c000f9db:	55                   	push   ebp
c000f9dc:	e8 9f 0d ff ff       	call   c0000780 <strcmp>
c000f9e1:	83 c4 10             	add    esp,0x10
c000f9e4:	85 c0                	test   eax,eax
c000f9e6:	75 1e                	jne    c000fa06 <CPU::detectFeatures()+0x250>
c000f9e8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f9f2:	e9 8a 01 00 00       	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000f9f7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa01:	e9 7b 01 00 00       	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000fa06:	56                   	push   esi
c000fa07:	56                   	push   esi
c000fa08:	68 07 0a 02 c0       	push   0xc0020a07
c000fa0d:	55                   	push   ebp
c000fa0e:	e8 6d 0d ff ff       	call   c0000780 <strcmp>
c000fa13:	83 c4 10             	add    esp,0x10
c000fa16:	85 c0                	test   eax,eax
c000fa18:	75 0f                	jne    c000fa29 <CPU::detectFeatures()+0x273>
c000fa1a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fa24:	e9 58 01 00 00       	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000fa29:	51                   	push   ecx
c000fa2a:	51                   	push   ecx
c000fa2b:	68 c6 09 02 c0       	push   0xc00209c6
c000fa30:	55                   	push   ebp
c000fa31:	e8 4a 0d ff ff       	call   c0000780 <strcmp>
c000fa36:	83 c4 10             	add    esp,0x10
c000fa39:	85 c0                	test   eax,eax
c000fa3b:	75 0f                	jne    c000fa4c <CPU::detectFeatures()+0x296>
c000fa3d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fa47:	e9 35 01 00 00       	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000fa4c:	52                   	push   edx
c000fa4d:	52                   	push   edx
c000fa4e:	68 14 0a 02 c0       	push   0xc0020a14
c000fa53:	55                   	push   ebp
c000fa54:	e8 27 0d ff ff       	call   c0000780 <strcmp>
c000fa59:	83 c4 10             	add    esp,0x10
c000fa5c:	85 c0                	test   eax,eax
c000fa5e:	75 0f                	jne    c000fa6f <CPU::detectFeatures()+0x2b9>
c000fa60:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fa6a:	e9 12 01 00 00       	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000fa6f:	50                   	push   eax
c000fa70:	50                   	push   eax
c000fa71:	68 21 0a 02 c0       	push   0xc0020a21
c000fa76:	55                   	push   ebp
c000fa77:	e8 04 0d ff ff       	call   c0000780 <strcmp>
c000fa7c:	83 c4 10             	add    esp,0x10
c000fa7f:	85 c0                	test   eax,eax
c000fa81:	75 0f                	jne    c000fa92 <CPU::detectFeatures()+0x2dc>
c000fa83:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fa8d:	e9 ef 00 00 00       	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000fa92:	50                   	push   eax
c000fa93:	50                   	push   eax
c000fa94:	68 2e 0a 02 c0       	push   0xc0020a2e
c000fa99:	55                   	push   ebp
c000fa9a:	e8 e1 0c ff ff       	call   c0000780 <strcmp>
c000fa9f:	83 c4 10             	add    esp,0x10
c000faa2:	85 c0                	test   eax,eax
c000faa4:	75 0f                	jne    c000fab5 <CPU::detectFeatures()+0x2ff>
c000faa6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fab0:	e9 cc 00 00 00       	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000fab5:	50                   	push   eax
c000fab6:	50                   	push   eax
c000fab7:	68 3b 0a 02 c0       	push   0xc0020a3b
c000fabc:	55                   	push   ebp
c000fabd:	e8 be 0c ff ff       	call   c0000780 <strcmp>
c000fac2:	83 c4 10             	add    esp,0x10
c000fac5:	85 c0                	test   eax,eax
c000fac7:	75 0f                	jne    c000fad8 <CPU::detectFeatures()+0x322>
c000fac9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fad3:	e9 a9 00 00 00       	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000fad8:	50                   	push   eax
c000fad9:	50                   	push   eax
c000fada:	68 48 0a 02 c0       	push   0xc0020a48
c000fadf:	55                   	push   ebp
c000fae0:	e8 9b 0c ff ff       	call   c0000780 <strcmp>
c000fae5:	83 c4 10             	add    esp,0x10
c000fae8:	85 c0                	test   eax,eax
c000faea:	75 0f                	jne    c000fafb <CPU::detectFeatures()+0x345>
c000faec:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000faf6:	e9 86 00 00 00       	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000fafb:	50                   	push   eax
c000fafc:	50                   	push   eax
c000fafd:	68 55 0a 02 c0       	push   0xc0020a55
c000fb02:	55                   	push   ebp
c000fb03:	e8 78 0c ff ff       	call   c0000780 <strcmp>
c000fb08:	83 c4 10             	add    esp,0x10
c000fb0b:	85 c0                	test   eax,eax
c000fb0d:	75 0c                	jne    c000fb1b <CPU::detectFeatures()+0x365>
c000fb0f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fb19:	eb 66                	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000fb1b:	50                   	push   eax
c000fb1c:	50                   	push   eax
c000fb1d:	68 62 0a 02 c0       	push   0xc0020a62
c000fb22:	55                   	push   ebp
c000fb23:	e8 58 0c ff ff       	call   c0000780 <strcmp>
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	85 c0                	test   eax,eax
c000fb2d:	75 0c                	jne    c000fb3b <CPU::detectFeatures()+0x385>
c000fb2f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fb39:	eb 46                	jmp    c000fb81 <CPU::detectFeatures()+0x3cb>
c000fb3b:	57                   	push   edi
c000fb3c:	57                   	push   edi
c000fb3d:	68 6f 0a 02 c0       	push   0xc0020a6f
c000fb42:	55                   	push   ebp
c000fb43:	e8 38 0c ff ff       	call   c0000780 <strcmp>
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	85 c0                	test   eax,eax
c000fb4d:	74 e0                	je     c000fb2f <CPU::detectFeatures()+0x379>
c000fb4f:	56                   	push   esi
c000fb50:	56                   	push   esi
c000fb51:	68 7c 0a 02 c0       	push   0xc0020a7c
c000fb56:	55                   	push   ebp
c000fb57:	e8 24 0c ff ff       	call   c0000780 <strcmp>
c000fb5c:	83 c4 10             	add    esp,0x10
c000fb5f:	85 c0                	test   eax,eax
c000fb61:	74 cc                	je     c000fb2f <CPU::detectFeatures()+0x379>
c000fb63:	51                   	push   ecx
c000fb64:	51                   	push   ecx
c000fb65:	68 89 0a 02 c0       	push   0xc0020a89
c000fb6a:	55                   	push   ebp
c000fb6b:	e8 10 0c ff ff       	call   c0000780 <strcmp>
c000fb70:	83 c4 10             	add    esp,0x10
c000fb73:	85 c0                	test   eax,eax
c000fb75:	74 b8                	je     c000fb2f <CPU::detectFeatures()+0x379>
c000fb77:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fb81:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fb86:	0f 86 be 00 00 00    	jbe    c000fc4a <CPU::detectFeatures()+0x494>
c000fb8c:	83 ec 0c             	sub    esp,0xc
c000fb8f:	68 80 00 00 00       	push   0x80
c000fb94:	e8 31 fb ff ff       	call   c000f6ca <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb99:	83 e0 01             	and    eax,0x1
c000fb9c:	c1 e0 06             	shl    eax,0x6
c000fb9f:	89 c2                	mov    edx,eax
c000fba1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fba7:	83 e0 bf             	and    eax,0xffffffbf
c000fbaa:	09 d0                	or     eax,edx
c000fbac:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbb2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fbb9:	e8 0c fb ff ff       	call   c000f6ca <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbbe:	83 e0 01             	and    eax,0x1
c000fbc1:	c1 e0 04             	shl    eax,0x4
c000fbc4:	89 c2                	mov    edx,eax
c000fbc6:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fbcc:	83 e0 ef             	and    eax,0xffffffef
c000fbcf:	09 d0                	or     eax,edx
c000fbd1:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fbd7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fbde:	e8 e7 fa ff ff       	call   c000f6ca <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbe3:	89 c2                	mov    edx,eax
c000fbe5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbeb:	c1 e2 07             	shl    edx,0x7
c000fbee:	83 e0 7f             	and    eax,0x7f
c000fbf1:	09 d0                	or     eax,edx
c000fbf3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbf9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc00:	e8 f3 fa ff ff       	call   c000f6f8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc05:	83 e0 01             	and    eax,0x1
c000fc08:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fc0f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc15:	83 e0 f7             	and    eax,0xfffffff7
c000fc18:	09 d0                	or     eax,edx
c000fc1a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc20:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fc27:	e8 cc fa ff ff       	call   c000f6f8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc2c:	83 c4 10             	add    esp,0x10
c000fc2f:	83 e0 01             	and    eax,0x1
c000fc32:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc39:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fc3f:	83 e0 fb             	and    eax,0xfffffffb
c000fc42:	09 d0                	or     eax,edx
c000fc44:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fc4a:	83 ec 0c             	sub    esp,0xc
c000fc4d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc51:	50                   	push   eax
c000fc52:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc56:	50                   	push   eax
c000fc57:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fc5b:	57                   	push   edi
c000fc5c:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fc60:	56                   	push   esi
c000fc61:	6a 01                	push   0x1
c000fc63:	e8 82 f9 ff ff       	call   c000f5ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fc68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc6c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fc72:	89 c1                	mov    ecx,eax
c000fc74:	83 e1 0f             	and    ecx,0xf
c000fc77:	83 e2 f0             	and    edx,0xfffffff0
c000fc7a:	09 ca                	or     edx,ecx
c000fc7c:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fc82:	89 c2                	mov    edx,eax
c000fc84:	c1 ea 04             	shr    edx,0x4
c000fc87:	83 e2 0f             	and    edx,0xf
c000fc8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fc8e:	89 d1                	mov    ecx,edx
c000fc90:	83 c4 20             	add    esp,0x20
c000fc93:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fc99:	c1 e1 06             	shl    ecx,0x6
c000fc9c:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fca2:	09 ca                	or     edx,ecx
c000fca4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fcab:	89 c2                	mov    edx,eax
c000fcad:	c1 ea 08             	shr    edx,0x8
c000fcb0:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fcb6:	83 e2 0f             	and    edx,0xf
c000fcb9:	89 d5                	mov    ebp,edx
c000fcbb:	83 e5 03             	and    ebp,0x3
c000fcbe:	c1 e5 06             	shl    ebp,0x6
c000fcc1:	83 e1 3f             	and    ecx,0x3f
c000fcc4:	09 e9                	or     ecx,ebp
c000fcc6:	89 d5                	mov    ebp,edx
c000fcc8:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fcce:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fcd4:	c1 ed 02             	shr    ebp,0x2
c000fcd7:	83 e1 c0             	and    ecx,0xffffffc0
c000fcda:	09 e9                	or     ecx,ebp
c000fcdc:	89 c5                	mov    ebp,eax
c000fcde:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fce4:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fcea:	c1 ed 08             	shr    ebp,0x8
c000fced:	83 e5 30             	and    ebp,0x30
c000fcf0:	83 e1 cf             	and    ecx,0xffffffcf
c000fcf3:	09 e9                	or     ecx,ebp
c000fcf5:	83 fa 06             	cmp    edx,0x6
c000fcf8:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fcfe:	74 05                	je     c000fd05 <CPU::detectFeatures()+0x54f>
c000fd00:	83 fa 0f             	cmp    edx,0xf
c000fd03:	75 64                	jne    c000fd69 <CPU::detectFeatures()+0x5b3>
c000fd05:	89 c1                	mov    ecx,eax
c000fd07:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fd0d:	c1 e9 10             	shr    ecx,0x10
c000fd10:	c1 e1 04             	shl    ecx,0x4
c000fd13:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fd17:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fd1d:	0f b6 c9             	movzx  ecx,cl
c000fd20:	c1 e1 06             	shl    ecx,0x6
c000fd23:	09 e9                	or     ecx,ebp
c000fd25:	83 fa 0f             	cmp    edx,0xf
c000fd28:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fd2f:	75 38                	jne    c000fd69 <CPU::detectFeatures()+0x5b3>
c000fd31:	c1 e8 14             	shr    eax,0x14
c000fd34:	83 c0 0f             	add    eax,0xf
c000fd37:	0f b6 c0             	movzx  eax,al
c000fd3a:	89 c2                	mov    edx,eax
c000fd3c:	c1 e8 02             	shr    eax,0x2
c000fd3f:	83 e2 03             	and    edx,0x3
c000fd42:	89 d1                	mov    ecx,edx
c000fd44:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fd4a:	c1 e1 06             	shl    ecx,0x6
c000fd4d:	83 e2 3f             	and    edx,0x3f
c000fd50:	09 ca                	or     edx,ecx
c000fd52:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fd58:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fd5e:	83 e2 c0             	and    edx,0xffffffc0
c000fd61:	09 d0                	or     eax,edx
c000fd63:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fd69:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd6f:	83 ec 0c             	sub    esp,0xc
c000fd72:	83 c8 07             	or     eax,0x7
c000fd75:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd7b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd7f:	50                   	push   eax
c000fd80:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fd84:	55                   	push   ebp
c000fd85:	57                   	push   edi
c000fd86:	56                   	push   esi
c000fd87:	68 00 00 00 80       	push   0x80000000
c000fd8c:	e8 59 f8 ff ff       	call   c000f5ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd91:	83 c4 20             	add    esp,0x20
c000fd94:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fd9c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fda0:	76 1e                	jbe    c000fdc0 <CPU::detectFeatures()+0x60a>
c000fda2:	83 ec 0c             	sub    esp,0xc
c000fda5:	50                   	push   eax
c000fda6:	55                   	push   ebp
c000fda7:	57                   	push   edi
c000fda8:	56                   	push   esi
c000fda9:	68 01 00 00 80       	push   0x80000001
c000fdae:	e8 37 f8 ff ff       	call   c000f5ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdb3:	83 c4 20             	add    esp,0x20
c000fdb6:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fdc0:	52                   	push   edx
c000fdc1:	52                   	push   edx
c000fdc2:	68 95 0a 02 c0       	push   0xc0020a95
c000fdc7:	53                   	push   ebx
c000fdc8:	e8 71 c1 ff ff       	call   c000bf3e <Device::setName(char const*)>
c000fdcd:	83 c4 10             	add    esp,0x10
c000fdd0:	eb 69                	jmp    c000fe3b <CPU::detectFeatures()+0x685>
c000fdd2:	50                   	push   eax
c000fdd3:	50                   	push   eax
c000fdd4:	68 fa 09 02 c0       	push   0xc00209fa
c000fdd9:	55                   	push   ebp
c000fdda:	e8 71 08 ff ff       	call   c0000650 <strcpy>
c000fddf:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fde9:	e8 d5 03 ff ff       	call   c00001c3 <is486>
c000fdee:	83 c4 10             	add    esp,0x10
c000fdf1:	85 c0                	test   eax,eax
c000fdf3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fdf9:	74 1f                	je     c000fe1a <CPU::detectFeatures()+0x664>
c000fdfb:	83 c8 07             	or     eax,0x7
c000fdfe:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe04:	0f 20 c0             	mov    eax,cr0
c000fe07:	83 e0 14             	and    eax,0x14
c000fe0a:	83 f8 04             	cmp    eax,0x4
c000fe0d:	75 10                	jne    c000fe1f <CPU::detectFeatures()+0x669>
c000fe0f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe15:	83 e0 fd             	and    eax,0xfffffffd
c000fe18:	eb 1b                	jmp    c000fe35 <CPU::detectFeatures()+0x67f>
c000fe1a:	83 e0 f8             	and    eax,0xfffffff8
c000fe1d:	eb df                	jmp    c000fdfe <CPU::detectFeatures()+0x648>
c000fe1f:	e8 7a 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe24:	83 e0 01             	and    eax,0x1
c000fe27:	8d 14 00             	lea    edx,[eax+eax*1]
c000fe2a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe30:	83 e0 fd             	and    eax,0xfffffffd
c000fe33:	09 d0                	or     eax,edx
c000fe35:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe3b:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fe42:	74 17                	je     c000fe5b <CPU::detectFeatures()+0x6a5>
c000fe44:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000fe4a:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000fe50:	83 c8 10             	or     eax,0x10
c000fe53:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000fe59:	eb 20                	jmp    c000fe7b <CPU::detectFeatures()+0x6c5>
c000fe5b:	e8 3e 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe60:	83 e0 01             	and    eax,0x1
c000fe63:	8d 14 00             	lea    edx,[eax+eax*1]
c000fe66:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe6c:	83 e0 fd             	and    eax,0xfffffffd
c000fe6f:	09 d0                	or     eax,edx
c000fe71:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe77:	a8 02                	test   al,0x2
c000fe79:	75 c9                	jne    c000fe44 <CPU::detectFeatures()+0x68e>
c000fe7b:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fe82:	83 c4 2c             	add    esp,0x2c
c000fe85:	5b                   	pop    ebx
c000fe86:	5e                   	pop    esi
c000fe87:	5f                   	pop    edi
c000fe88:	5d                   	pop    ebp
c000fe89:	c3                   	ret    

c000fe8a <CPU::setupSMEP()>:
c000fe8a:	0f 20 e0             	mov    eax,cr4
c000fe8d:	0d 00 00 10 00       	or     eax,0x100000
c000fe92:	0f 22 e0             	mov    cr4,eax
c000fe95:	c3                   	ret    

c000fe96 <CPU::setupUMIP()>:
c000fe96:	0f 20 e0             	mov    eax,cr4
c000fe99:	80 cc 08             	or     ah,0x8
c000fe9c:	0f 22 e0             	mov    cr4,eax
c000fe9f:	c3                   	ret    

c000fea0 <CPU::setupTSC()>:
c000fea0:	0f 20 e0             	mov    eax,cr4
c000fea3:	83 c8 04             	or     eax,0x4
c000fea6:	0f 22 e0             	mov    cr4,eax
c000fea9:	c3                   	ret    

c000feaa <CPU::setupLargePages()>:
c000feaa:	0f 20 e0             	mov    eax,cr4
c000fead:	83 c8 10             	or     eax,0x10
c000feb0:	0f 22 e0             	mov    cr4,eax
c000feb3:	c3                   	ret    

c000feb4 <CPU::setupPAT()>:
c000feb4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000feb9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fec0:	74 2c                	je     c000feee <CPU::setupPAT()+0x3a>
c000fec2:	53                   	push   ebx
c000fec3:	83 ec 10             	sub    esp,0x10
c000fec6:	68 77 02 00 00       	push   0x277
c000fecb:	50                   	push   eax
c000fecc:	e8 09 72 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c000fed1:	83 e2 f8             	and    edx,0xfffffff8
c000fed4:	83 ca 01             	or     edx,0x1
c000fed7:	52                   	push   edx
c000fed8:	50                   	push   eax
c000fed9:	68 77 02 00 00       	push   0x277
c000fede:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000fee4:	e8 1d 72 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fee9:	83 c4 28             	add    esp,0x28
c000feec:	5b                   	pop    ebx
c000feed:	c3                   	ret    
c000feee:	c3                   	ret    
c000feef:	90                   	nop

c000fef0 <CPU::setupMTRR()>:
c000fef0:	c3                   	ret    
c000fef1:	90                   	nop

c000fef2 <CPU::setupGlobalPages()>:
c000fef2:	0f 20 e0             	mov    eax,cr4
c000fef5:	0c 80                	or     al,0x80
c000fef7:	0f 22 e0             	mov    cr4,eax
c000fefa:	c3                   	ret    
c000fefb:	90                   	nop

c000fefc <CPU::allowUsermodeDataAccess()>:
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff07:	74 03                	je     c000ff0c <CPU::allowUsermodeDataAccess()+0x10>
c000ff09:	0f 01 cb             	stac   
c000ff0c:	c3                   	ret    
c000ff0d:	90                   	nop

c000ff0e <CPU::prohibitUsermodeDataAccess()>:
c000ff0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff12:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff19:	74 03                	je     c000ff1e <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff1b:	0f 01 ca             	clac   
c000ff1e:	c3                   	ret    
c000ff1f:	90                   	nop

c000ff20 <CPU::setupSMAP()>:
c000ff20:	0f 20 e0             	mov    eax,cr4
c000ff23:	0d 00 00 20 00       	or     eax,0x200000
c000ff28:	0f 22 e0             	mov    cr4,eax
c000ff2b:	eb e1                	jmp    c000ff0e <CPU::prohibitUsermodeDataAccess()>
c000ff2d:	90                   	nop

c000ff2e <CPU::setupFeatures()>:
c000ff2e:	53                   	push   ebx
c000ff2f:	83 ec 08             	sub    esp,0x8
c000ff32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff36:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ff3d:	74 18                	je     c000ff57 <CPU::setupFeatures()+0x29>
c000ff3f:	83 ec 0c             	sub    esp,0xc
c000ff42:	68 a1 0a 02 c0       	push   0xc0020aa1
c000ff47:	e8 05 aa ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000ff4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff4f:	e8 42 ff ff ff       	call   c000fe96 <CPU::setupUMIP()>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ff5e:	74 18                	je     c000ff78 <CPU::setupFeatures()+0x4a>
c000ff60:	83 ec 0c             	sub    esp,0xc
c000ff63:	68 ab 0a 02 c0       	push   0xc0020aab
c000ff68:	e8 e4 a9 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000ff6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff70:	e8 2b ff ff ff       	call   c000fea0 <CPU::setupTSC()>
c000ff75:	83 c4 10             	add    esp,0x10
c000ff78:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ff7f:	74 18                	je     c000ff99 <CPU::setupFeatures()+0x6b>
c000ff81:	83 ec 0c             	sub    esp,0xc
c000ff84:	68 b4 0a 02 c0       	push   0xc0020ab4
c000ff89:	e8 c3 a9 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000ff8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff91:	e8 14 ff ff ff       	call   c000feaa <CPU::setupLargePages()>
c000ff96:	83 c4 10             	add    esp,0x10
c000ff99:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ffa0:	74 18                	je     c000ffba <CPU::setupFeatures()+0x8c>
c000ffa2:	83 ec 0c             	sub    esp,0xc
c000ffa5:	68 bd 0a 02 c0       	push   0xc0020abd
c000ffaa:	e8 a2 a9 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000ffaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffb2:	e8 3b ff ff ff       	call   c000fef2 <CPU::setupGlobalPages()>
c000ffb7:	83 c4 10             	add    esp,0x10
c000ffba:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ffc1:	74 18                	je     c000ffdb <CPU::setupFeatures()+0xad>
c000ffc3:	83 ec 0c             	sub    esp,0xc
c000ffc6:	68 cf 0a 02 c0       	push   0xc0020acf
c000ffcb:	e8 81 a9 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c000ffd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffd3:	e8 dc fe ff ff       	call   c000feb4 <CPU::setupPAT()>
c000ffd8:	83 c4 10             	add    esp,0x10
c000ffdb:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000ffe2:	74 11                	je     c000fff5 <CPU::setupFeatures()+0xc7>
c000ffe4:	c7 44 24 10 d8 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ad8
c000ffec:	83 c4 08             	add    esp,0x8
c000ffef:	5b                   	pop    ebx
c000fff0:	e9 5c a9 ff ff       	jmp    c000a951 <Dbg::kprintf(char const*, ...)>
c000fff5:	83 c4 08             	add    esp,0x8
c000fff8:	5b                   	pop    ebx
c000fff9:	c3                   	ret    

c000fffa <CPU::open(int, int, void*)>:
c000fffa:	57                   	push   edi
c000fffb:	56                   	push   esi
c000fffc:	53                   	push   ebx
c000fffd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010001:	83 ec 0c             	sub    esp,0xc
c0010004:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010008:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001000e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010014:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001001a:	50                   	push   eax
c001001b:	e8 b6 73 ff ff       	call   c00073d6 <GDT::setup()>
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	6a 00                	push   0x0
c0010025:	68 ef be ad de       	push   0xdeadbeef
c001002a:	57                   	push   edi
c001002b:	e8 50 8f ff ff       	call   c0008f80 <TSS::setup(unsigned long, unsigned long)>
c0010030:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010033:	e8 28 8f ff ff       	call   c0008f60 <TSS::flush()>
c0010038:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001003e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010041:	e8 f4 75 ff ff       	call   c000763a <IDT::setup()>
c0010046:	b8 00 04 00 00       	mov    eax,0x400
c001004b:	0f 23 f8             	mov    db7,eax
c001004e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010058:	e8 79 7d ff ff       	call   c0007dd6 <Phys::allocatePage()>
c001005d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010063:	89 30                	mov    DWORD PTR [eax],esi
c0010065:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001006b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001006e:	58                   	pop    eax
c001006f:	5a                   	pop    edx
c0010070:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010076:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001007a:	e8 61 9f ff ff       	call   c0009fe0 <VAS::setCPUSpecific(unsigned long)>
c001007f:	c7 04 24 e2 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ae2
c0010086:	e8 cd 00 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c001008b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001008e:	e8 23 f7 ff ff       	call   c000f7b6 <CPU::detectFeatures()>
c0010093:	c7 04 24 05 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b05
c001009a:	e8 b9 00 00 00       	call   c0010158 <KeSetBootMessage(char const*)>
c001009f:	e8 62 6f 00 00       	call   c0017006 <HalInitialise()>
c00100a4:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c00100a9:	83 e0 10             	and    eax,0x10
c00100ac:	83 f8 01             	cmp    eax,0x1
c00100af:	19 c0                	sbb    eax,eax
c00100b1:	83 e0 46             	and    eax,0x46
c00100b4:	83 c0 1e             	add    eax,0x1e
c00100b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00100ba:	e8 26 d7 ff ff       	call   c000d7e5 <setupTimer(int)>
c00100bf:	83 c4 10             	add    esp,0x10
c00100c2:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c00100c9:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00100cf:	74 0c                	je     c00100dd <CPU::open(int, int, void*)+0xe3>
c00100d1:	83 ec 0c             	sub    esp,0xc
c00100d4:	53                   	push   ebx
c00100d5:	e8 54 fe ff ff       	call   c000ff2e <CPU::setupFeatures()>
c00100da:	83 c4 10             	add    esp,0x10
c00100dd:	5b                   	pop    ebx
c00100de:	31 c0                	xor    eax,eax
c00100e0:	5e                   	pop    esi
c00100e1:	5f                   	pop    edi
c00100e2:	c3                   	ret    

c00100e3 <KeDisplaySplashScreen()>:
c00100e3:	55                   	push   ebp
c00100e4:	bd 05 00 00 00       	mov    ebp,0x5
c00100e9:	57                   	push   edi
c00100ea:	bf a0 1e 02 c0       	mov    edi,0xc0021ea0
c00100ef:	56                   	push   esi
c00100f0:	be 0a 00 00 00       	mov    esi,0xa
c00100f5:	53                   	push   ebx
c00100f6:	31 db                	xor    ebx,ebx
c00100f8:	83 ec 0c             	sub    esp,0xc
c00100fb:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00100fe:	85 d2                	test   edx,edx
c0010100:	89 d0                	mov    eax,edx
c0010102:	74 4c                	je     c0010150 <KeDisplaySplashScreen()+0x6d>
c0010104:	80 bb d6 1e 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde12a],0xdb
c001010b:	75 13                	jne    c0010120 <KeDisplaySplashScreen()+0x3d>
c001010d:	0f b6 8b d5 1e 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffde12b]
c0010114:	83 e1 fe             	and    ecx,0xfffffffe
c0010117:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001011d:	75 01                	jne    c0010120 <KeDisplaySplashScreen()+0x3d>
c001011f:	46                   	inc    esi
c0010120:	83 fa 0d             	cmp    edx,0xd
c0010123:	74 28                	je     c001014d <KeDisplaySplashScreen()+0x6a>
c0010125:	83 fa 0a             	cmp    edx,0xa
c0010128:	75 0a                	jne    c0010134 <KeDisplaySplashScreen()+0x51>
c001012a:	45                   	inc    ebp
c001012b:	be 0a 00 00 00       	mov    esi,0xa
c0010130:	31 db                	xor    ebx,ebx
c0010132:	eb 19                	jmp    c001014d <KeDisplaySplashScreen()+0x6a>
c0010134:	83 ec 0c             	sub    esp,0xc
c0010137:	0f be c0             	movsx  eax,al
c001013a:	55                   	push   ebp
c001013b:	8d 14 33             	lea    edx,[ebx+esi*1]
c001013e:	43                   	inc    ebx
c001013f:	52                   	push   edx
c0010140:	6a 00                	push   0x0
c0010142:	6a 0e                	push   0xe
c0010144:	50                   	push   eax
c0010145:	e8 3a 7b 00 00       	call   c0017c84 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001014a:	83 c4 20             	add    esp,0x20
c001014d:	47                   	inc    edi
c001014e:	eb ab                	jmp    c00100fb <KeDisplaySplashScreen()+0x18>
c0010150:	83 c4 0c             	add    esp,0xc
c0010153:	5b                   	pop    ebx
c0010154:	5e                   	pop    esi
c0010155:	5f                   	pop    edi
c0010156:	5d                   	pop    ebp
c0010157:	c3                   	ret    

c0010158 <KeSetBootMessage(char const*)>:
c0010158:	57                   	push   edi
c0010159:	56                   	push   esi
c001015a:	53                   	push   ebx
c001015b:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010161:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010168:	68 9e 00 00 00       	push   0x9e
c001016d:	6a 00                	push   0x0
c001016f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010173:	56                   	push   esi
c0010174:	e8 77 03 ff ff       	call   c00004f0 <memset>
c0010179:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001017c:	e8 ff 03 ff ff       	call   c0000580 <strlen>
c0010181:	ba 50 00 00 00       	mov    edx,0x50
c0010186:	83 c4 10             	add    esp,0x10
c0010189:	31 c9                	xor    ecx,ecx
c001018b:	29 c2                	sub    edx,eax
c001018d:	83 e2 fe             	and    edx,0xfffffffe
c0010190:	01 f2                	add    edx,esi
c0010192:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010197:	84 c0                	test   al,al
c0010199:	74 0a                	je     c00101a5 <KeSetBootMessage(char const*)+0x4d>
c001019b:	80 cc 0f             	or     ah,0xf
c001019e:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c00101a2:	41                   	inc    ecx
c00101a3:	eb ed                	jmp    c0010192 <KeSetBootMessage(char const*)+0x3a>
c00101a5:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c00101aa:	b9 9e 00 00 00       	mov    ecx,0x9e
c00101af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101b1:	81 c4 a0 00 00 00    	add    esp,0xa0
c00101b7:	5b                   	pop    ebx
c00101b8:	5e                   	pop    esi
c00101b9:	5f                   	pop    edi
c00101ba:	c3                   	ret    
c00101bb:	90                   	nop

c00101bc <EnvVarContainer::getEnv(char const*)>:
c00101bc:	57                   	push   edi
c00101bd:	56                   	push   esi
c00101be:	53                   	push   ebx
c00101bf:	31 db                	xor    ebx,ebx
c00101c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101c5:	39 1e                	cmp    DWORD PTR [esi],ebx
c00101c7:	7e 2b                	jle    c00101f4 <EnvVarContainer::getEnv(char const*)+0x38>
c00101c9:	50                   	push   eax
c00101ca:	50                   	push   eax
c00101cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101ce:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00101d5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00101d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00101dc:	e8 9f 05 ff ff       	call   c0000780 <strcmp>
c00101e1:	83 c4 10             	add    esp,0x10
c00101e4:	85 c0                	test   eax,eax
c00101e6:	75 09                	jne    c00101f1 <EnvVarContainer::getEnv(char const*)+0x35>
c00101e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101eb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00101ef:	eb 05                	jmp    c00101f6 <EnvVarContainer::getEnv(char const*)+0x3a>
c00101f1:	43                   	inc    ebx
c00101f2:	eb d1                	jmp    c00101c5 <EnvVarContainer::getEnv(char const*)+0x9>
c00101f4:	31 c0                	xor    eax,eax
c00101f6:	5b                   	pop    ebx
c00101f7:	5e                   	pop    esi
c00101f8:	5f                   	pop    edi
c00101f9:	c3                   	ret    

c00101fa <EnvVarContainer::setEnv(char const*, char const*)>:
c00101fa:	55                   	push   ebp
c00101fb:	57                   	push   edi
c00101fc:	56                   	push   esi
c00101fd:	53                   	push   ebx
c00101fe:	83 ec 28             	sub    esp,0x28
c0010201:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010205:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010209:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001020d:	56                   	push   esi
c001020e:	e8 6d 03 ff ff       	call   c0000580 <strlen>
c0010213:	40                   	inc    eax
c0010214:	89 04 24             	mov    DWORD PTR [esp],eax
c0010217:	e8 af 78 ff ff       	call   c0007acb <malloc>
c001021c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001021f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010223:	e8 58 03 ff ff       	call   c0000580 <strlen>
c0010228:	40                   	inc    eax
c0010229:	89 04 24             	mov    DWORD PTR [esp],eax
c001022c:	e8 9a 78 ff ff       	call   c0007acb <malloc>
c0010231:	89 34 24             	mov    DWORD PTR [esp],esi
c0010234:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010238:	e8 43 03 ff ff       	call   c0000580 <strlen>
c001023d:	83 c4 0c             	add    esp,0xc
c0010240:	40                   	inc    eax
c0010241:	50                   	push   eax
c0010242:	6a 00                	push   0x0
c0010244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010248:	e8 a3 02 ff ff       	call   c00004f0 <memset>
c001024d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010250:	e8 2b 03 ff ff       	call   c0000580 <strlen>
c0010255:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010259:	8d 48 01             	lea    ecx,[eax+0x1]
c001025c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001025e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010261:	89 de                	mov    esi,ebx
c0010263:	e8 18 03 ff ff       	call   c0000580 <strlen>
c0010268:	83 c4 0c             	add    esp,0xc
c001026b:	40                   	inc    eax
c001026c:	50                   	push   eax
c001026d:	6a 00                	push   0x0
c001026f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010273:	e8 78 02 ff ff       	call   c00004f0 <memset>
c0010278:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001027b:	e8 00 03 ff ff       	call   c0000580 <strlen>
c0010280:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010284:	8d 48 01             	lea    ecx,[eax+0x1]
c0010287:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010289:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001028c:	40                   	inc    eax
c001028d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010290:	c1 e0 03             	shl    eax,0x3
c0010293:	5a                   	pop    edx
c0010294:	59                   	pop    ecx
c0010295:	50                   	push   eax
c0010296:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010299:	e8 19 78 ff ff       	call   c0007ab7 <realloc>
c001029e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00102a1:	8d 74 24 18          	lea    esi,[esp+0x18]
c00102a5:	b9 08 00 00 00       	mov    ecx,0x8
c00102aa:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00102ad:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00102b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102b3:	83 c4 2c             	add    esp,0x2c
c00102b6:	5b                   	pop    ebx
c00102b7:	5e                   	pop    esi
c00102b8:	5f                   	pop    edi
c00102b9:	5d                   	pop    ebp
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <EnvVarContainer::deleteEnv(char const*)>:
c00102bc:	c3                   	ret    
c00102bd:	90                   	nop

c00102be <EnvVarContainer::loadFrom(char const*, char const*)>:
c00102be:	55                   	push   ebp
c00102bf:	57                   	push   edi
c00102c0:	56                   	push   esi
c00102c1:	53                   	push   ebx
c00102c2:	81 ec 38 01 00 00    	sub    esp,0x138
c00102c8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00102cf:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00102d6:	68 14 01 00 00       	push   0x114
c00102db:	e8 eb 77 ff ff       	call   c0007acb <malloc>
c00102e0:	83 c4 0c             	add    esp,0xc
c00102e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00102e6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00102ed:	89 c3                	mov    ebx,eax
c00102ef:	50                   	push   eax
c00102f0:	e8 05 ac ff ff       	call   c000aefa <File::File(char const*, Process*)>
c00102f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102f8:	e8 27 af ff ff       	call   c000b224 <File::exists()>
c00102fd:	83 c4 10             	add    esp,0x10
c0010300:	84 c0                	test   al,al
c0010302:	75 31                	jne    c0010335 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010304:	50                   	push   eax
c0010305:	50                   	push   eax
c0010306:	6a 12                	push   0x12
c0010308:	53                   	push   ebx
c0010309:	e8 a8 ac ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c001030e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010310:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010313:	89 34 24             	mov    DWORD PTR [esp],esi
c0010316:	e8 65 02 ff ff       	call   c0000580 <strlen>
c001031b:	5a                   	pop    edx
c001031c:	31 d2                	xor    edx,edx
c001031e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010322:	51                   	push   ecx
c0010323:	56                   	push   esi
c0010324:	52                   	push   edx
c0010325:	50                   	push   eax
c0010326:	53                   	push   ebx
c0010327:	ff d7                	call   edi
c0010329:	83 c4 14             	add    esp,0x14
c001032c:	53                   	push   ebx
c001032d:	e8 e2 ac ff ff       	call   c000b014 <File::close()>
c0010332:	83 c4 10             	add    esp,0x10
c0010335:	56                   	push   esi
c0010336:	31 f6                	xor    esi,esi
c0010338:	68 00 01 00 00       	push   0x100
c001033d:	6a 00                	push   0x0
c001033f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010343:	50                   	push   eax
c0010344:	e8 a7 01 ff ff       	call   c00004f0 <memset>
c0010349:	5f                   	pop    edi
c001034a:	58                   	pop    eax
c001034b:	6a 01                	push   0x1
c001034d:	53                   	push   ebx
c001034e:	e8 63 ac ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0010353:	83 c4 10             	add    esp,0x10
c0010356:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001035e:	83 ec 0c             	sub    esp,0xc
c0010361:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010363:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010367:	51                   	push   ecx
c0010368:	8d 54 24 23          	lea    edx,[esp+0x23]
c001036c:	52                   	push   edx
c001036d:	6a 00                	push   0x0
c001036f:	6a 01                	push   0x1
c0010371:	53                   	push   ebx
c0010372:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010375:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c001037a:	83 c4 20             	add    esp,0x20
c001037d:	83 fa 0d             	cmp    edx,0xd
c0010380:	89 d0                	mov    eax,edx
c0010382:	0f 84 0a 01 00 00    	je     c0010492 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010388:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001038d:	0f 84 f0 00 00 00    	je     c0010483 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0010393:	83 fa 0a             	cmp    edx,0xa
c0010396:	74 13                	je     c00103ab <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010398:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001039d:	74 0c                	je     c00103ab <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c001039f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00103a5:	0f 8e d8 00 00 00    	jle    c0010483 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00103ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103af:	83 ec 0c             	sub    esp,0xc
c00103b2:	8d 78 01             	lea    edi,[eax+0x1]
c00103b5:	57                   	push   edi
c00103b6:	e8 10 77 ff ff       	call   c0007acb <malloc>
c00103bb:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00103bf:	8d 56 04             	lea    edx,[esi+0x4]
c00103c2:	89 14 24             	mov    DWORD PTR [esp],edx
c00103c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00103c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103cd:	e8 f9 76 ff ff       	call   c0007acb <malloc>
c00103d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00103d6:	83 c4 0c             	add    esp,0xc
c00103d9:	57                   	push   edi
c00103da:	6a 00                	push   0x0
c00103dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00103e0:	e8 0b 01 ff ff       	call   c00004f0 <memset>
c00103e5:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103e9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00103ed:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00103f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103f3:	83 c4 0c             	add    esp,0xc
c00103f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103fa:	52                   	push   edx
c00103fb:	6a 00                	push   0x0
c00103fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010401:	e8 ea 00 ff ff       	call   c00004f0 <memset>
c0010406:	8d 74 24 30          	lea    esi,[esp+0x30]
c001040a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001040e:	89 34 24             	mov    DWORD PTR [esp],esi
c0010411:	e8 6a 01 ff ff       	call   c0000580 <strlen>
c0010416:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001041a:	89 c1                	mov    ecx,eax
c001041c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001041e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010421:	83 c4 10             	add    esp,0x10
c0010424:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010427:	40                   	inc    eax
c0010428:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001042b:	85 d2                	test   edx,edx
c001042d:	75 0c                	jne    c001043b <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c001042f:	83 ec 0c             	sub    esp,0xc
c0010432:	6a 08                	push   0x8
c0010434:	e8 92 76 ff ff       	call   c0007acb <malloc>
c0010439:	eb 0c                	jmp    c0010447 <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c001043b:	51                   	push   ecx
c001043c:	51                   	push   ecx
c001043d:	c1 e0 03             	shl    eax,0x3
c0010440:	50                   	push   eax
c0010441:	52                   	push   edx
c0010442:	e8 70 76 ff ff       	call   c0007ab7 <realloc>
c0010447:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001044a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001044d:	83 c4 10             	add    esp,0x10
c0010450:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010453:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010457:	b9 08 00 00 00       	mov    ecx,0x8
c001045c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010462:	50                   	push   eax
c0010463:	31 f6                	xor    esi,esi
c0010465:	68 00 01 00 00       	push   0x100
c001046a:	6a 00                	push   0x0
c001046c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010470:	50                   	push   eax
c0010471:	e8 7a 00 ff ff       	call   c00004f0 <memset>
c0010476:	83 c4 10             	add    esp,0x10
c0010479:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010481:	eb 0f                	jmp    c0010492 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010483:	3c 3d                	cmp    al,0x3d
c0010485:	74 07                	je     c001048e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0010487:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001048b:	46                   	inc    esi
c001048c:	eb 04                	jmp    c0010492 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c001048e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010492:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010497:	0f 85 c1 fe ff ff    	jne    c001035e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001049d:	81 c4 2c 01 00 00    	add    esp,0x12c
c00104a3:	5b                   	pop    ebx
c00104a4:	5e                   	pop    esi
c00104a5:	5f                   	pop    edi
c00104a6:	5d                   	pop    ebp
c00104a7:	c3                   	ret    

c00104a8 <EnvVarContainer::__loadSystem()>:
c00104a8:	83 ec 10             	sub    esp,0x10
c00104ab:	68 00 20 02 c0       	push   0xc0022000
c00104b0:	68 48 0b 02 c0       	push   0xc0020b48
c00104b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104b9:	e8 00 fe ff ff       	call   c00102be <EnvVarContainer::loadFrom(char const*, char const*)>
c00104be:	83 c4 1c             	add    esp,0x1c
c00104c1:	c3                   	ret    

c00104c2 <EnvVarContainer::__loadUser()>:
c00104c2:	c3                   	ret    
c00104c3:	90                   	nop

c00104c4 <EnvVarContainer::EnvVarContainer(Process*)>:
c00104c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00104d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104e4:	90                   	nop
c00104e5:	c3                   	ret    

c00104e6 <EnvVarContainer::~EnvVarContainer()>:
c00104e6:	83 ec 0c             	sub    esp,0xc
c00104e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104f0:	85 c0                	test   eax,eax
c00104f2:	74 1d                	je     c0010511 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00104fa:	85 c0                	test   eax,eax
c00104fc:	74 13                	je     c0010511 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010505:	83 ec 0c             	sub    esp,0xc
c0010508:	50                   	push   eax
c0010509:	e8 cd 75 ff ff       	call   c0007adb <free>
c001050e:	83 c4 10             	add    esp,0x10
c0010511:	90                   	nop
c0010512:	83 c4 0c             	add    esp,0xc
c0010515:	c3                   	ret    

c0010516 <Krnl::getEnv(Process*, char const*)>:
c0010516:	53                   	push   ebx
c0010517:	83 ec 08             	sub    esp,0x8
c001051a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051e:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010524:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010528:	74 04                	je     c001052e <Krnl::getEnv(Process*, char const*)+0x18>
c001052a:	85 c0                	test   eax,eax
c001052c:	75 0b                	jne    c0010539 <Krnl::getEnv(Process*, char const*)+0x23>
c001052e:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010533:	85 c0                	test   eax,eax
c0010535:	75 19                	jne    c0010550 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010537:	eb 27                	jmp    c0010560 <Krnl::getEnv(Process*, char const*)+0x4a>
c0010539:	52                   	push   edx
c001053a:	52                   	push   edx
c001053b:	53                   	push   ebx
c001053c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010542:	e8 75 fc ff ff       	call   c00101bc <EnvVarContainer::getEnv(char const*)>
c0010547:	83 c4 10             	add    esp,0x10
c001054a:	85 c0                	test   eax,eax
c001054c:	75 28                	jne    c0010576 <Krnl::getEnv(Process*, char const*)+0x60>
c001054e:	eb de                	jmp    c001052e <Krnl::getEnv(Process*, char const*)+0x18>
c0010550:	52                   	push   edx
c0010551:	52                   	push   edx
c0010552:	53                   	push   ebx
c0010553:	50                   	push   eax
c0010554:	e8 63 fc ff ff       	call   c00101bc <EnvVarContainer::getEnv(char const*)>
c0010559:	83 c4 10             	add    esp,0x10
c001055c:	85 c0                	test   eax,eax
c001055e:	75 16                	jne    c0010576 <Krnl::getEnv(Process*, char const*)+0x60>
c0010560:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010564:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010569:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001056d:	83 c4 08             	add    esp,0x8
c0010570:	5b                   	pop    ebx
c0010571:	e9 46 fc ff ff       	jmp    c00101bc <EnvVarContainer::getEnv(char const*)>
c0010576:	83 c4 08             	add    esp,0x8
c0010579:	5b                   	pop    ebx
c001057a:	c3                   	ret    

c001057b <Krnl::setEnvSystem(char const*, char const*)>:
c001057b:	83 ec 10             	sub    esp,0x10
c001057e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010582:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010586:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c001058c:	e8 69 fc ff ff       	call   c00101fa <EnvVarContainer::setEnv(char const*, char const*)>
c0010591:	83 c4 1c             	add    esp,0x1c
c0010594:	c3                   	ret    

c0010595 <Krnl::setEnvUser(char const*, char const*)>:
c0010595:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c001059a:	85 c0                	test   eax,eax
c001059c:	74 15                	je     c00105b3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001059e:	83 ec 10             	sub    esp,0x10
c00105a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105a9:	50                   	push   eax
c00105aa:	e8 4b fc ff ff       	call   c00101fa <EnvVarContainer::setEnv(char const*, char const*)>
c00105af:	83 c4 1c             	add    esp,0x1c
c00105b2:	c3                   	ret    
c00105b3:	c3                   	ret    

c00105b4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00105b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b8:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00105be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00105c2:	e9 33 fc ff ff       	jmp    c00101fa <EnvVarContainer::setEnv(char const*, char const*)>

c00105c7 <Krnl::deleteEnvSystem(char const*)>:
c00105c7:	c3                   	ret    

c00105c8 <Krnl::deleteEnvUser(char const*)>:
c00105c8:	c3                   	ret    

c00105c9 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00105c9:	c3                   	ret    

c00105ca <Krnl::newProcessEnv(Process*)>:
c00105ca:	83 ec 28             	sub    esp,0x28
c00105cd:	6a 0c                	push   0xc
c00105cf:	e8 f7 74 ff ff       	call   c0007acb <malloc>
c00105d4:	5a                   	pop    edx
c00105d5:	59                   	pop    ecx
c00105d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00105da:	50                   	push   eax
c00105db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00105df:	e8 e0 fe ff ff       	call   c00104c4 <EnvVarContainer::EnvVarContainer(Process*)>
c00105e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105e8:	83 c4 2c             	add    esp,0x2c
c00105eb:	c3                   	ret    

c00105ec <Krnl::copyProcessEnv(Process*, Process*)>:
c00105ec:	57                   	push   edi
c00105ed:	56                   	push   esi
c00105ee:	53                   	push   ebx
c00105ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f3:	83 ec 0c             	sub    esp,0xc
c00105f6:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00105fc:	6a 0c                	push   0xc
c00105fe:	e8 c8 74 ff ff       	call   c0007acb <malloc>
c0010603:	89 c3                	mov    ebx,eax
c0010605:	58                   	pop    eax
c0010606:	5a                   	pop    edx
c0010607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001060b:	53                   	push   ebx
c001060c:	e8 b3 fe ff ff       	call   c00104c4 <EnvVarContainer::EnvVarContainer(Process*)>
c0010611:	8b 07                	mov    eax,DWORD PTR [edi]
c0010613:	89 03                	mov    DWORD PTR [ebx],eax
c0010615:	c1 e0 03             	shl    eax,0x3
c0010618:	89 04 24             	mov    DWORD PTR [esp],eax
c001061b:	e8 ab 74 ff ff       	call   c0007acb <malloc>
c0010620:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010623:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010625:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010628:	89 c7                	mov    edi,eax
c001062a:	c1 e1 03             	shl    ecx,0x3
c001062d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001062f:	83 c4 10             	add    esp,0x10
c0010632:	89 d8                	mov    eax,ebx
c0010634:	5b                   	pop    ebx
c0010635:	5e                   	pop    esi
c0010636:	5f                   	pop    edi
c0010637:	c3                   	ret    

c0010638 <Krnl::loadSystemEnv()>:
c0010638:	53                   	push   ebx
c0010639:	83 ec 14             	sub    esp,0x14
c001063c:	6a 0c                	push   0xc
c001063e:	e8 88 74 ff ff       	call   c0007acb <malloc>
c0010643:	89 c3                	mov    ebx,eax
c0010645:	58                   	pop    eax
c0010646:	5a                   	pop    edx
c0010647:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001064d:	53                   	push   ebx
c001064e:	e8 71 fe ff ff       	call   c00104c4 <EnvVarContainer::EnvVarContainer(Process*)>
c0010653:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010656:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c001065c:	e8 47 fe ff ff       	call   c00104a8 <EnvVarContainer::__loadSystem()>
c0010661:	83 c4 18             	add    esp,0x18
c0010664:	5b                   	pop    ebx
c0010665:	c3                   	ret    

c0010666 <Krnl::loadUserEnv()>:
c0010666:	53                   	push   ebx
c0010667:	83 ec 14             	sub    esp,0x14
c001066a:	6a 0c                	push   0xc
c001066c:	e8 5a 74 ff ff       	call   c0007acb <malloc>
c0010671:	89 c3                	mov    ebx,eax
c0010673:	58                   	pop    eax
c0010674:	5a                   	pop    edx
c0010675:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001067b:	53                   	push   ebx
c001067c:	e8 43 fe ff ff       	call   c00104c4 <EnvVarContainer::EnvVarContainer(Process*)>
c0010681:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c0010687:	83 c4 18             	add    esp,0x18
c001068a:	5b                   	pop    ebx
c001068b:	c3                   	ret    

c001068c <Krnl::flushEnv()>:
c001068c:	c3                   	ret    

c001068d <Krnl::getProcessTotalEnvCount(Process*)>:
c001068d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010691:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c0010697:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001069d:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00106a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00106a4:	03 01                	add    eax,DWORD PTR [ecx]
c00106a6:	85 d2                	test   edx,edx
c00106a8:	74 02                	je     c00106ac <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00106aa:	03 02                	add    eax,DWORD PTR [edx]
c00106ac:	c3                   	ret    

c00106ad <Krnl::getProcessEnvPair(Process*, int)>:
c00106ad:	57                   	push   edi
c00106ae:	56                   	push   esi
c00106af:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c00106b5:	53                   	push   ebx
c00106b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106be:	85 f6                	test   esi,esi
c00106c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106c4:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106ca:	8b 01                	mov    eax,DWORD PTR [ecx]
c00106cc:	75 16                	jne    c00106e4 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00106ce:	39 c2                	cmp    edx,eax
c00106d0:	7c 16                	jl     c00106e8 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106d2:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c00106d8:	8b 31                	mov    esi,DWORD PTR [ecx]
c00106da:	01 c6                	add    esi,eax
c00106dc:	39 d6                	cmp    esi,edx
c00106de:	7e 3c                	jle    c001071c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106e0:	29 c2                	sub    edx,eax
c00106e2:	eb 04                	jmp    c00106e8 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106e4:	39 c2                	cmp    edx,eax
c00106e6:	7d 05                	jge    c00106ed <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00106e8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00106eb:	eb 20                	jmp    c001070d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00106ed:	8b 3e                	mov    edi,DWORD PTR [esi]
c00106ef:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00106f2:	39 d1                	cmp    ecx,edx
c00106f4:	7e 04                	jle    c00106fa <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00106f6:	29 c2                	sub    edx,eax
c00106f8:	eb 10                	jmp    c001070a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00106fa:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010700:	03 0e                	add    ecx,DWORD PTR [esi]
c0010702:	39 d1                	cmp    ecx,edx
c0010704:	7e 16                	jle    c001071c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010706:	29 c2                	sub    edx,eax
c0010708:	29 fa                	sub    edx,edi
c001070a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001070d:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010710:	8b 02                	mov    eax,DWORD PTR [edx]
c0010712:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010715:	89 03                	mov    DWORD PTR [ebx],eax
c0010717:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001071a:	eb 1d                	jmp    c0010739 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001071c:	83 ec 0c             	sub    esp,0xc
c001071f:	68 6a 0b 02 c0       	push   0xc0020b6a
c0010724:	e8 ac 00 00 00       	call   c00107d5 <KePanic(char const*)>
c0010729:	83 c4 10             	add    esp,0x10
c001072c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010732:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010739:	89 d8                	mov    eax,ebx
c001073b:	5b                   	pop    ebx
c001073c:	5e                   	pop    esi
c001073d:	5f                   	pop    edi
c001073e:	c2 04 00             	ret    0x4

c0010741 <CPU::current()>:
c0010741:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010746:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001074c:	c3                   	ret    

c001074d <operator new(unsigned long)>:
c001074d:	e9 79 73 ff ff       	jmp    c0007acb <malloc>

c0010752 <operator delete(void*)>:
c0010752:	e9 94 73 ff ff       	jmp    c0007aeb <rfree>

c0010757 <disableIRQs()>:
c0010757:	fa                   	cli    
c0010758:	c3                   	ret    

c0010759 <enableIRQs()>:
c0010759:	fb                   	sti    
c001075a:	c3                   	ret    

c001075b <lockScheduler()>:
c001075b:	fa                   	cli    
c001075c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010762:	c3                   	ret    

c0010763 <unlockScheduler()>:
c0010763:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010768:	48                   	dec    eax
c0010769:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001076e:	75 01                	jne    c0010771 <unlockScheduler()+0xe>
c0010770:	fb                   	sti    
c0010771:	c3                   	ret    

c0010772 <lockStuff()>:
c0010772:	fa                   	cli    
c0010773:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010779:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c001077f:	c3                   	ret    

c0010780 <unlockStuff()>:
c0010780:	83 ec 0c             	sub    esp,0xc
c0010783:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0010788:	48                   	dec    eax
c0010789:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001078e:	75 18                	jne    c00107a8 <unlockStuff()+0x28>
c0010790:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0010797:	74 0f                	je     c00107a8 <unlockStuff()+0x28>
c0010799:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00107a3:	e8 28 48 00 00       	call   c0014fd0 <schedule()>
c00107a8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107ad:	48                   	dec    eax
c00107ae:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107b3:	75 01                	jne    c00107b6 <unlockStuff()+0x36>
c00107b5:	fb                   	sti    
c00107b6:	83 c4 0c             	add    esp,0xc
c00107b9:	c3                   	ret    

c00107ba <Virt::getAKernelVAS()>:
c00107ba:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c00107bf:	c3                   	ret    

c00107c0 <__not_memcpy>:
c00107c0:	57                   	push   edi
c00107c1:	56                   	push   esi
c00107c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00107ce:	89 c7                	mov    edi,eax
c00107d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107d2:	5e                   	pop    esi
c00107d3:	5f                   	pop    edi
c00107d4:	c3                   	ret    

c00107d5 <KePanic(char const*)>:
c00107d5:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c00107dc:	e9 11 67 00 00       	jmp    c0016ef2 <HalPanic(char const*)>

c00107e1 <Krnl::powerThread(void*)>:
c00107e1:	83 ec 0c             	sub    esp,0xc
c00107e4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107e9:	48                   	dec    eax
c00107ea:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107ef:	75 01                	jne    c00107f2 <Krnl::powerThread(void*)+0x11>
c00107f1:	fb                   	sti    
c00107f2:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c00107f9:	83 ec 0c             	sub    esp,0xc
c00107fc:	6a 0a                	push   0xa
c00107fe:	e8 fd 4a 00 00       	call   c0015300 <sleep(unsigned int)>
c0010803:	83 c4 10             	add    esp,0x10
c0010806:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c001080d:	eb e3                	jmp    c00107f2 <Krnl::powerThread(void*)+0x11>

c001080f <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001080f:	57                   	push   edi
c0010810:	b9 09 00 00 00       	mov    ecx,0x9
c0010815:	56                   	push   esi
c0010816:	bf 60 79 02 c0       	mov    edi,0xc0027960
c001081b:	fc                   	cld    
c001081c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010820:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010822:	5e                   	pop    esi
c0010823:	5f                   	pop    edi
c0010824:	c3                   	ret    

c0010825 <Krnl::userIOReceived()>:
c0010825:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c001082f:	c3                   	ret    

c0010830 <Krnl::handlePowerButton()>:
c0010830:	83 ec 0c             	sub    esp,0xc
c0010833:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010838:	83 f8 02             	cmp    eax,0x2
c001083b:	75 10                	jne    c001084d <Krnl::handlePowerButton()+0x1d>
c001083d:	83 ec 0c             	sub    esp,0xc
c0010840:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010846:	e8 f7 68 ff ff       	call   c0007142 <Computer::shutdown()>
c001084b:	eb 11                	jmp    c001085e <Krnl::handlePowerButton()+0x2e>
c001084d:	48                   	dec    eax
c001084e:	75 11                	jne    c0010861 <Krnl::handlePowerButton()+0x31>
c0010850:	83 ec 0c             	sub    esp,0xc
c0010853:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010859:	e8 14 69 ff ff       	call   c0007172 <Computer::sleep()>
c001085e:	83 c4 10             	add    esp,0x10
c0010861:	83 c4 0c             	add    esp,0xc
c0010864:	c3                   	ret    

c0010865 <Krnl::handleSleepButton()>:
c0010865:	83 ec 0c             	sub    esp,0xc
c0010868:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c001086d:	83 f8 02             	cmp    eax,0x2
c0010870:	75 10                	jne    c0010882 <Krnl::handleSleepButton()+0x1d>
c0010872:	83 ec 0c             	sub    esp,0xc
c0010875:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001087b:	e8 c2 68 ff ff       	call   c0007142 <Computer::shutdown()>
c0010880:	eb 11                	jmp    c0010893 <Krnl::handleSleepButton()+0x2e>
c0010882:	48                   	dec    eax
c0010883:	75 11                	jne    c0010896 <Krnl::handleSleepButton()+0x31>
c0010885:	83 ec 0c             	sub    esp,0xc
c0010888:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001088e:	e8 df 68 ff ff       	call   c0007172 <Computer::sleep()>
c0010893:	83 c4 10             	add    esp,0x10
c0010896:	83 c4 0c             	add    esp,0xc
c0010899:	c3                   	ret    

c001089a <Krnl::setupPowerManager()>:
c001089a:	83 ec 0c             	sub    esp,0xc
c001089d:	68 f0 00 00 00       	push   0xf0
c00108a2:	6a 00                	push   0x0
c00108a4:	68 e1 07 01 c0       	push   0xc00107e1
c00108a9:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00108af:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00108b9:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c00108c0:	e8 bf 44 00 00       	call   c0014d84 <Process::createThread(void (*)(void*), void*, int)>
c00108c5:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c00108cf:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c00108d9:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c00108e3:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c00108ed:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c00108f7:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010901:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c001090b:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010915:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c001091f:	83 c4 1c             	add    esp,0x1c
c0010922:	c3                   	ret    

c0010923 <KeRand()>:
c0010923:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c001092d:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010937:	53                   	push   ebx
c0010938:	01 c1                	add    ecx,eax
c001093a:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001093f:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010945:	01 ca                	add    edx,ecx
c0010947:	05 ef 04 b5 00       	add    eax,0xb504ef
c001094c:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010951:	83 d2 00             	adc    edx,0x0
c0010954:	0f b7 da             	movzx  ebx,dx
c0010957:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c001095d:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0010961:	5b                   	pop    ebx
c0010962:	c3                   	ret    

c0010963 <KeSeedRand(unsigned int)>:
c0010963:	53                   	push   ebx
c0010964:	83 ec 08             	sub    esp,0x8
c0010967:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001096b:	e8 86 68 00 00       	call   c00171f6 <HalGetRand()>
c0010970:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c001097a:	31 d8                	xor    eax,ebx
c001097c:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010981:	e8 9d ff ff ff       	call   c0010923 <KeRand()>
c0010986:	83 c4 08             	add    esp,0x8
c0010989:	5b                   	pop    ebx
c001098a:	eb 97                	jmp    c0010923 <KeRand()>

c001098c <KeInitRand()>:
c001098c:	83 ec 0c             	sub    esp,0xc
c001098f:	e8 57 66 00 00       	call   c0016feb <HalQueryPerformanceCounter()>
c0010994:	0f 20 da             	mov    edx,cr3
c0010997:	0f 22 da             	mov    cr3,edx
c001099a:	0f 20 da             	mov    edx,cr3
c001099d:	0f 22 da             	mov    cr3,edx
c00109a0:	0f 20 da             	mov    edx,cr3
c00109a3:	0f 22 da             	mov    cr3,edx
c00109a6:	0f 20 da             	mov    edx,cr3
c00109a9:	0f 22 da             	mov    cr3,edx
c00109ac:	83 ec 0c             	sub    esp,0xc
c00109af:	35 03 8a 95 38       	xor    eax,0x38958a03
c00109b4:	50                   	push   eax
c00109b5:	e8 a9 ff ff ff       	call   c0010963 <KeSeedRand(unsigned int)>
c00109ba:	83 c4 1c             	add    esp,0x1c
c00109bd:	c3                   	ret    
c00109be:	66 90                	xchg   ax,ax

c00109c0 <KeResolveCompatibilitySymbol(char*)>:
c00109c0:	83 ec 0c             	sub    esp,0xc
c00109c3:	83 ec 08             	sub    esp,0x8
c00109c6:	68 84 0b 02 c0       	push   0xc0020b84
c00109cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109cf:	e8 ac fd fe ff       	call   c0000780 <strcmp>
c00109d4:	83 c4 10             	add    esp,0x10
c00109d7:	85 c0                	test   eax,eax
c00109d9:	0f 94 c0             	sete   al
c00109dc:	0f b6 c0             	movzx  eax,al
c00109df:	85 c0                	test   eax,eax
c00109e1:	74 0d                	je     c00109f0 <KeResolveCompatibilitySymbol(char*)+0x30>
c00109e3:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c00109e8:	e9 8b 01 00 00       	jmp    c0010b78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00109ed:	8d 76 00             	lea    esi,[esi+0x0]
c00109f0:	83 ec 08             	sub    esp,0x8
c00109f3:	68 8d 0b 02 c0       	push   0xc0020b8d
c00109f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109fc:	e8 7f fd fe ff       	call   c0000780 <strcmp>
c0010a01:	83 c4 10             	add    esp,0x10
c0010a04:	85 c0                	test   eax,eax
c0010a06:	0f 94 c0             	sete   al
c0010a09:	0f b6 c0             	movzx  eax,al
c0010a0c:	85 c0                	test   eax,eax
c0010a0e:	74 0c                	je     c0010a1c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010a10:	b8 90 e5 01 c0       	mov    eax,0xc001e590
c0010a15:	e9 5e 01 00 00       	jmp    c0010b78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a1a:	66 90                	xchg   ax,ax
c0010a1c:	83 ec 08             	sub    esp,0x8
c0010a1f:	68 97 0b 02 c0       	push   0xc0020b97
c0010a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a28:	e8 53 fd fe ff       	call   c0000780 <strcmp>
c0010a2d:	83 c4 10             	add    esp,0x10
c0010a30:	85 c0                	test   eax,eax
c0010a32:	0f 94 c0             	sete   al
c0010a35:	0f b6 c0             	movzx  eax,al
c0010a38:	85 c0                	test   eax,eax
c0010a3a:	74 0c                	je     c0010a48 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010a3c:	b8 c4 e2 01 c0       	mov    eax,0xc001e2c4
c0010a41:	e9 32 01 00 00       	jmp    c0010b78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a46:	66 90                	xchg   ax,ax
c0010a48:	83 ec 08             	sub    esp,0x8
c0010a4b:	68 a0 0b 02 c0       	push   0xc0020ba0
c0010a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a54:	e8 27 fd fe ff       	call   c0000780 <strcmp>
c0010a59:	83 c4 10             	add    esp,0x10
c0010a5c:	85 c0                	test   eax,eax
c0010a5e:	0f 94 c0             	sete   al
c0010a61:	0f b6 c0             	movzx  eax,al
c0010a64:	85 c0                	test   eax,eax
c0010a66:	74 0c                	je     c0010a74 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010a68:	b8 d5 07 01 c0       	mov    eax,0xc00107d5
c0010a6d:	e9 06 01 00 00       	jmp    c0010b78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a72:	66 90                	xchg   ax,ax
c0010a74:	83 ec 08             	sub    esp,0x8
c0010a77:	68 b3 0b 02 c0       	push   0xc0020bb3
c0010a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a80:	e8 fb fc fe ff       	call   c0000780 <strcmp>
c0010a85:	83 c4 10             	add    esp,0x10
c0010a88:	85 c0                	test   eax,eax
c0010a8a:	0f 94 c0             	sete   al
c0010a8d:	0f b6 c0             	movzx  eax,al
c0010a90:	85 c0                	test   eax,eax
c0010a92:	74 0c                	je     c0010aa0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010a94:	b8 58 01 01 c0       	mov    eax,0xc0010158
c0010a99:	e9 da 00 00 00       	jmp    c0010b78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a9e:	66 90                	xchg   ax,ax
c0010aa0:	83 ec 08             	sub    esp,0x8
c0010aa3:	68 d0 0b 02 c0       	push   0xc0020bd0
c0010aa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aac:	e8 cf fc fe ff       	call   c0000780 <strcmp>
c0010ab1:	83 c4 10             	add    esp,0x10
c0010ab4:	85 c0                	test   eax,eax
c0010ab6:	0f 94 c0             	sete   al
c0010ab9:	0f b6 c0             	movzx  eax,al
c0010abc:	85 c0                	test   eax,eax
c0010abe:	74 0c                	je     c0010acc <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010ac0:	b8 90 e6 01 c0       	mov    eax,0xc001e690
c0010ac5:	e9 ae 00 00 00       	jmp    c0010b78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aca:	66 90                	xchg   ax,ax
c0010acc:	83 ec 08             	sub    esp,0x8
c0010acf:	68 da 0b 02 c0       	push   0xc0020bda
c0010ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ad8:	e8 a3 fc fe ff       	call   c0000780 <strcmp>
c0010add:	83 c4 10             	add    esp,0x10
c0010ae0:	85 c0                	test   eax,eax
c0010ae2:	0f 94 c0             	sete   al
c0010ae5:	0f b6 c0             	movzx  eax,al
c0010ae8:	85 c0                	test   eax,eax
c0010aea:	74 0c                	je     c0010af8 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010aec:	b8 10 e4 01 c0       	mov    eax,0xc001e410
c0010af1:	e9 82 00 00 00       	jmp    c0010b78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010af6:	66 90                	xchg   ax,ax
c0010af8:	83 ec 08             	sub    esp,0x8
c0010afb:	68 e3 0b 02 c0       	push   0xc0020be3
c0010b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b04:	e8 77 fc fe ff       	call   c0000780 <strcmp>
c0010b09:	83 c4 10             	add    esp,0x10
c0010b0c:	85 c0                	test   eax,eax
c0010b0e:	0f 94 c0             	sete   al
c0010b11:	0f b6 c0             	movzx  eax,al
c0010b14:	85 c0                	test   eax,eax
c0010b16:	74 08                	je     c0010b20 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010b18:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b1d:	eb 59                	jmp    c0010b78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b1f:	90                   	nop
c0010b20:	83 ec 08             	sub    esp,0x8
c0010b23:	68 fb 0b 02 c0       	push   0xc0020bfb
c0010b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b2c:	e8 4f fc fe ff       	call   c0000780 <strcmp>
c0010b31:	83 c4 10             	add    esp,0x10
c0010b34:	85 c0                	test   eax,eax
c0010b36:	0f 94 c0             	sete   al
c0010b39:	0f b6 c0             	movzx  eax,al
c0010b3c:	85 c0                	test   eax,eax
c0010b3e:	74 08                	je     c0010b48 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010b40:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b45:	eb 31                	jmp    c0010b78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b47:	90                   	nop
c0010b48:	83 ec 08             	sub    esp,0x8
c0010b4b:	68 08 0c 02 c0       	push   0xc0020c08
c0010b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b54:	e8 27 fc fe ff       	call   c0000780 <strcmp>
c0010b59:	83 c4 10             	add    esp,0x10
c0010b5c:	85 c0                	test   eax,eax
c0010b5e:	0f 94 c0             	sete   al
c0010b61:	0f b6 c0             	movzx  eax,al
c0010b64:	85 c0                	test   eax,eax
c0010b66:	74 08                	je     c0010b70 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010b68:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010b6d:	eb 09                	jmp    c0010b78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b6f:	90                   	nop
c0010b70:	b8 00 00 00 00       	mov    eax,0x0
c0010b75:	8d 76 00             	lea    esi,[esi+0x0]
c0010b78:	83 c4 0c             	add    esp,0xc
c0010b7b:	c3                   	ret    

c0010b7c <KiSigKill(int)>:
c0010b7c:	83 ec 0c             	sub    esp,0xc
c0010b7f:	6a 00                	push   0x0
c0010b81:	6a 00                	push   0x0
c0010b83:	6a ff                	push   0xffffffff
c0010b85:	6a 01                	push   0x1
c0010b87:	e8 c6 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010b8c:	83 c4 1c             	add    esp,0x1c
c0010b8f:	c3                   	ret    

c0010b90 <KiDefaultSignalHandlerIgnore(int)>:
c0010b90:	c3                   	ret    

c0010b91 <KiDefaultSignalHandlerPause(int)>:
c0010b91:	57                   	push   edi
c0010b92:	b9 07 00 00 00       	mov    ecx,0x7
c0010b97:	56                   	push   esi
c0010b98:	be 51 0c 02 c0       	mov    esi,0xc0020c51
c0010b9d:	83 ec 24             	sub    esp,0x24
c0010ba0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010ba4:	fc                   	cld    
c0010ba5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010ba7:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010bab:	50                   	push   eax
c0010bac:	6a 00                	push   0x0
c0010bae:	6a 00                	push   0x0
c0010bb0:	6a 27                	push   0x27
c0010bb2:	e8 9b 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bb7:	83 c4 34             	add    esp,0x34
c0010bba:	5e                   	pop    esi
c0010bbb:	5f                   	pop    edi
c0010bbc:	c3                   	ret    

c0010bbd <KiDefaultSignalHandlerResume(int)>:
c0010bbd:	57                   	push   edi
c0010bbe:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010bc3:	56                   	push   esi
c0010bc4:	be 6d 0c 02 c0       	mov    esi,0xc0020c6d
c0010bc9:	83 ec 24             	sub    esp,0x24
c0010bcc:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010bd0:	fc                   	cld    
c0010bd1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bd3:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010bd7:	50                   	push   eax
c0010bd8:	6a 00                	push   0x0
c0010bda:	6a 00                	push   0x0
c0010bdc:	6a 27                	push   0x27
c0010bde:	e8 6f 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010be3:	83 c4 34             	add    esp,0x34
c0010be6:	5e                   	pop    esi
c0010be7:	5f                   	pop    edi
c0010be8:	c3                   	ret    

c0010be9 <KeDeinitSignals(SigHandlerBlock*)>:
c0010be9:	e9 ed 6e ff ff       	jmp    c0007adb <free>

c0010bee <KeInitSignals()>:
c0010bee:	53                   	push   ebx
c0010bef:	83 ec 14             	sub    esp,0x14
c0010bf2:	68 c8 00 00 00       	push   0xc8
c0010bf7:	e8 cf 6e ff ff       	call   c0007acb <malloc>
c0010bfc:	83 c4 0c             	add    esp,0xc
c0010bff:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010c09:	89 c3                	mov    ebx,eax
c0010c0b:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010c15:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010c1b:	6a 20                	push   0x20
c0010c1d:	6a 00                	push   0x0
c0010c1f:	50                   	push   eax
c0010c20:	e8 cb f8 fe ff       	call   c00004f0 <memset>
c0010c25:	83 c4 0c             	add    esp,0xc
c0010c28:	6a 44                	push   0x44
c0010c2a:	6a 00                	push   0x0
c0010c2c:	53                   	push   ebx
c0010c2d:	e8 be f8 fe ff       	call   c00004f0 <memset>
c0010c32:	83 c4 18             	add    esp,0x18
c0010c35:	89 d8                	mov    eax,ebx
c0010c37:	5b                   	pop    ebx
c0010c38:	c3                   	ret    

c0010c39 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010c39:	53                   	push   ebx
c0010c3a:	b8 01 00 00 00       	mov    eax,0x1
c0010c3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c47:	83 f9 10             	cmp    ecx,0x10
c0010c4a:	7f 21                	jg     c0010c6d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c50:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010c53:	89 03                	mov    DWORD PTR [ebx],eax
c0010c55:	b8 01 00 00 00       	mov    eax,0x1
c0010c5a:	d3 e0                	shl    eax,cl
c0010c5c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010c60:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010c63:	31 c0                	xor    eax,eax
c0010c65:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010c6d:	5b                   	pop    ebx
c0010c6e:	c3                   	ret    

c0010c6f <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010c6f:	55                   	push   ebp
c0010c70:	57                   	push   edi
c0010c71:	bf 08 00 00 00       	mov    edi,0x8
c0010c76:	56                   	push   esi
c0010c77:	53                   	push   ebx
c0010c78:	83 ec 18             	sub    esp,0x18
c0010c7b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c7f:	68 8a 0c 02 c0       	push   0xc0020c8a
c0010c84:	e8 c8 9c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0010c89:	83 c4 10             	add    esp,0x10
c0010c8c:	31 c9                	xor    ecx,ecx
c0010c8e:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010c95:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010c9b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010c9f:	99                   	cdq    
c0010ca0:	f7 ff                	idiv   edi
c0010ca2:	8d 42 24             	lea    eax,[edx+0x24]
c0010ca5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010ca9:	85 f6                	test   esi,esi
c0010cab:	75 1a                	jne    c0010cc7 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010cad:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010cb1:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010cb5:	50                   	push   eax
c0010cb6:	50                   	push   eax
c0010cb7:	52                   	push   edx
c0010cb8:	68 9b 0c 02 c0       	push   0xc0020c9b
c0010cbd:	e8 8f 9c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0010cc2:	83 c4 10             	add    esp,0x10
c0010cc5:	eb 1b                	jmp    c0010ce2 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010cc7:	41                   	inc    ecx
c0010cc8:	83 f9 08             	cmp    ecx,0x8
c0010ccb:	75 ce                	jne    c0010c9b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010ccd:	83 ec 0c             	sub    esp,0xc
c0010cd0:	be 01 00 00 00       	mov    esi,0x1
c0010cd5:	68 bc 0c 02 c0       	push   0xc0020cbc
c0010cda:	e8 72 9c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0010cdf:	83 c4 10             	add    esp,0x10
c0010ce2:	83 c4 0c             	add    esp,0xc
c0010ce5:	89 f0                	mov    eax,esi
c0010ce7:	5b                   	pop    ebx
c0010ce8:	5e                   	pop    esi
c0010ce9:	5f                   	pop    edi
c0010cea:	5d                   	pop    ebp
c0010ceb:	c3                   	ret    

c0010cec <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010cec:	55                   	push   ebp
c0010ced:	57                   	push   edi
c0010cee:	56                   	push   esi
c0010cef:	53                   	push   ebx
c0010cf0:	51                   	push   ecx
c0010cf1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010cf5:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010cfc:	0f 84 af 00 00 00    	je     c0010db1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d02:	31 c9                	xor    ecx,ecx
c0010d04:	bf 08 00 00 00       	mov    edi,0x8
c0010d09:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010d0f:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010d12:	99                   	cdq    
c0010d13:	f7 ff                	idiv   edi
c0010d15:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010d1c:	85 ed                	test   ebp,ebp
c0010d1e:	0f 84 9e 00 00 00    	je     c0010dc2 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010d24:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010d2a:	89 e9                	mov    ecx,ebp
c0010d2c:	bf 01 00 00 00       	mov    edi,0x1
c0010d31:	d3 e7                	shl    edi,cl
c0010d33:	31 c9                	xor    ecx,ecx
c0010d35:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d38:	b8 01 00 00 00       	mov    eax,0x1
c0010d3d:	d3 e0                	shl    eax,cl
c0010d3f:	85 04 24             	test   DWORD PTR [esp],eax
c0010d42:	74 06                	je     c0010d4a <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010d44:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010d48:	75 67                	jne    c0010db1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d4a:	41                   	inc    ecx
c0010d4b:	83 f9 11             	cmp    ecx,0x11
c0010d4e:	75 e8                	jne    c0010d38 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010d50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010d53:	46                   	inc    esi
c0010d54:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010d5a:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010d65:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010d6c:	09 f8                	or     eax,edi
c0010d6e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010d74:	31 c0                	xor    eax,eax
c0010d76:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010d7e:	74 09                	je     c0010d89 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010d80:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010d87:	eb 06                	jmp    c0010d8f <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010d89:	40                   	inc    eax
c0010d8a:	83 f8 08             	cmp    eax,0x8
c0010d8d:	75 e7                	jne    c0010d76 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010d8f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010d93:	83 fd 09             	cmp    ebp,0x9
c0010d96:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010d99:	89 2a                	mov    DWORD PTR [edx],ebp
c0010d9b:	75 07                	jne    c0010da4 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010d9d:	b8 7c 0b 01 c0       	mov    eax,0xc0010b7c
c0010da2:	eb 31                	jmp    c0010dd5 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010da4:	83 f8 01             	cmp    eax,0x1
c0010da7:	75 0c                	jne    c0010db5 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010da9:	f7 d7                	not    edi
c0010dab:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010db1:	31 c0                	xor    eax,eax
c0010db3:	eb 20                	jmp    c0010dd5 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010db5:	85 c0                	test   eax,eax
c0010db7:	75 1c                	jne    c0010dd5 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010db9:	8b 04 ad 60 20 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffddfa0]
c0010dc0:	eb 13                	jmp    c0010dd5 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010dc2:	41                   	inc    ecx
c0010dc3:	46                   	inc    esi
c0010dc4:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010dca:	83 f9 08             	cmp    ecx,0x8
c0010dcd:	0f 85 36 ff ff ff    	jne    c0010d09 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010dd3:	eb dc                	jmp    c0010db1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010dd5:	5a                   	pop    edx
c0010dd6:	5b                   	pop    ebx
c0010dd7:	5e                   	pop    esi
c0010dd8:	5f                   	pop    edi
c0010dd9:	5d                   	pop    ebp
c0010dda:	c3                   	ret    

c0010ddb <KiCheckSignalZ>:
c0010ddb:	83 ec 10             	sub    esp,0x10
c0010dde:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010de2:	50                   	push   eax
c0010de3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010de8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010deb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010df1:	e8 f6 fe ff ff       	call   c0010cec <KeCheckSignal(SigHandlerBlock*, int*)>
c0010df6:	5a                   	pop    edx
c0010df7:	31 d2                	xor    edx,edx
c0010df9:	59                   	pop    ecx
c0010dfa:	85 c0                	test   eax,eax
c0010dfc:	74 19                	je     c0010e17 <KiCheckSignalZ+0x3c>
c0010dfe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010e04:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010e07:	89 02                	mov    DWORD PTR [edx],eax
c0010e09:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010e10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e14:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010e17:	89 d0                	mov    eax,edx
c0010e19:	83 c4 10             	add    esp,0x10
c0010e1c:	c3                   	ret    

c0010e1d <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010e1d:	56                   	push   esi
c0010e1e:	53                   	push   ebx
c0010e1f:	bb 01 00 00 00       	mov    ebx,0x1
c0010e24:	52                   	push   edx
c0010e25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010e29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e2d:	d3 e3                	shl    ebx,cl
c0010e2f:	83 f9 10             	cmp    ecx,0x10
c0010e32:	7f 08                	jg     c0010e3c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010e34:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010e3a:	75 10                	jne    c0010e4c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010e3c:	83 ec 0c             	sub    esp,0xc
c0010e3f:	68 cd 0c 02 c0       	push   0xc0020ccd
c0010e44:	e8 8c f9 ff ff       	call   c00107d5 <KePanic(char const*)>
c0010e49:	83 c4 10             	add    esp,0x10
c0010e4c:	f7 d3                	not    ebx
c0010e4e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010e54:	58                   	pop    eax
c0010e55:	5b                   	pop    ebx
c0010e56:	5e                   	pop    esi
c0010e57:	c3                   	ret    

c0010e58 <KiFinishSignalZ>:
c0010e58:	53                   	push   ebx
c0010e59:	83 ec 10             	sub    esp,0x10
c0010e5c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e60:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010e63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e6b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e71:	e8 a7 ff ff ff       	call   c0010e1d <KeCompleteSignal(SigHandlerBlock*, int)>
c0010e76:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010e7c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010e83:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010e8a:	83 c4 18             	add    esp,0x18
c0010e8d:	5b                   	pop    ebx
c0010e8e:	c3                   	ret    

c0010e8f <SysSeekDir(regs*)>:
c0010e8f:	31 c0                	xor    eax,eax
c0010e91:	31 d2                	xor    edx,edx
c0010e93:	c3                   	ret    

c0010e94 <SysTellDir(regs*)>:
c0010e94:	31 c0                	xor    eax,eax
c0010e96:	31 d2                	xor    edx,edx
c0010e98:	c3                   	ret    

c0010e99 <SysVerify(regs*)>:
c0010e99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e9d:	31 d2                	xor    edx,edx
c0010e9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ea2:	c3                   	ret    

c0010ea3 <SysGetArgc(regs*)>:
c0010ea3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ea8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010eab:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010eb1:	89 c2                	mov    edx,eax
c0010eb3:	c1 fa 1f             	sar    edx,0x1f
c0010eb6:	c3                   	ret    

c0010eb7 <SysTTYName(regs*)>:
c0010eb7:	b8 01 00 00 00       	mov    eax,0x1
c0010ebc:	31 d2                	xor    edx,edx
c0010ebe:	c3                   	ret    

c0010ebf <SysFormatDisk(regs*)>:
c0010ebf:	56                   	push   esi
c0010ec0:	53                   	push   ebx
c0010ec1:	83 ec 04             	sub    esp,0x4
c0010ec4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ec8:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010ece:	eb 2a                	jmp    c0010efa <SysFormatDisk(regs*)+0x3b>
c0010ed0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010ed3:	83 ec 0c             	sub    esp,0xc
c0010ed6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010ed9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010edb:	51                   	push   ecx
c0010edc:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010edf:	51                   	push   ecx
c0010ee0:	50                   	push   eax
c0010ee1:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010ee8:	50                   	push   eax
c0010ee9:	53                   	push   ebx
c0010eea:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010eed:	83 c4 20             	add    esp,0x20
c0010ef0:	83 f8 08             	cmp    eax,0x8
c0010ef3:	89 c1                	mov    ecx,eax
c0010ef5:	75 14                	jne    c0010f0b <SysFormatDisk(regs*)+0x4c>
c0010ef7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010efa:	85 db                	test   ebx,ebx
c0010efc:	75 d2                	jne    c0010ed0 <SysFormatDisk(regs*)+0x11>
c0010efe:	b8 03 00 00 00       	mov    eax,0x3
c0010f03:	31 d2                	xor    edx,edx
c0010f05:	83 c4 04             	add    esp,0x4
c0010f08:	5b                   	pop    ebx
c0010f09:	5e                   	pop    esi
c0010f0a:	c3                   	ret    
c0010f0b:	85 c0                	test   eax,eax
c0010f0d:	74 13                	je     c0010f22 <SysFormatDisk(regs*)+0x63>
c0010f0f:	31 d2                	xor    edx,edx
c0010f11:	83 f9 09             	cmp    ecx,0x9
c0010f14:	b8 01 00 00 00       	mov    eax,0x1
c0010f19:	74 ea                	je     c0010f05 <SysFormatDisk(regs*)+0x46>
c0010f1b:	b8 02 00 00 00       	mov    eax,0x2
c0010f20:	eb e1                	jmp    c0010f03 <SysFormatDisk(regs*)+0x44>
c0010f22:	31 c0                	xor    eax,eax
c0010f24:	eb dd                	jmp    c0010f03 <SysFormatDisk(regs*)+0x44>

c0010f26 <SysSetDiskVolumeLabel(regs*)>:
c0010f26:	56                   	push   esi
c0010f27:	53                   	push   ebx
c0010f28:	83 ec 04             	sub    esp,0x4
c0010f2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f2f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f32:	83 f8 19             	cmp    eax,0x19
c0010f35:	77 33                	ja     c0010f6a <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f37:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010f3e:	85 c9                	test   ecx,ecx
c0010f40:	74 28                	je     c0010f6a <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f42:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010f45:	85 db                	test   ebx,ebx
c0010f47:	74 21                	je     c0010f6a <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f49:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010f4f:	85 d2                	test   edx,edx
c0010f51:	74 17                	je     c0010f6a <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f53:	8b 32                	mov    esi,DWORD PTR [edx]
c0010f55:	53                   	push   ebx
c0010f56:	50                   	push   eax
c0010f57:	51                   	push   ecx
c0010f58:	52                   	push   edx
c0010f59:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010f5c:	83 c4 10             	add    esp,0x10
c0010f5f:	83 c4 04             	add    esp,0x4
c0010f62:	5b                   	pop    ebx
c0010f63:	5e                   	pop    esi
c0010f64:	89 c2                	mov    edx,eax
c0010f66:	c1 fa 1f             	sar    edx,0x1f
c0010f69:	c3                   	ret    
c0010f6a:	83 c4 04             	add    esp,0x4
c0010f6d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010f72:	5b                   	pop    ebx
c0010f73:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f78:	5e                   	pop    esi
c0010f79:	c3                   	ret    

c0010f7a <SysGetDiskVolumeLabel(regs*)>:
c0010f7a:	57                   	push   edi
c0010f7b:	56                   	push   esi
c0010f7c:	53                   	push   ebx
c0010f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f81:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010f84:	83 fa 19             	cmp    edx,0x19
c0010f87:	77 3c                	ja     c0010fc5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010f89:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0010f90:	85 c9                	test   ecx,ecx
c0010f92:	74 31                	je     c0010fc5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010f94:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010f97:	85 db                	test   ebx,ebx
c0010f99:	74 2a                	je     c0010fc5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010f9b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010f9e:	85 f6                	test   esi,esi
c0010fa0:	74 23                	je     c0010fc5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010fa2:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010fa8:	85 c0                	test   eax,eax
c0010faa:	74 19                	je     c0010fc5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010fac:	83 ec 0c             	sub    esp,0xc
c0010faf:	8b 38                	mov    edi,DWORD PTR [eax]
c0010fb1:	56                   	push   esi
c0010fb2:	53                   	push   ebx
c0010fb3:	52                   	push   edx
c0010fb4:	51                   	push   ecx
c0010fb5:	50                   	push   eax
c0010fb6:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010fb9:	83 c4 20             	add    esp,0x20
c0010fbc:	5b                   	pop    ebx
c0010fbd:	5e                   	pop    esi
c0010fbe:	89 c2                	mov    edx,eax
c0010fc0:	c1 fa 1f             	sar    edx,0x1f
c0010fc3:	5f                   	pop    edi
c0010fc4:	c3                   	ret    
c0010fc5:	5b                   	pop    ebx
c0010fc6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010fcb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fd0:	5e                   	pop    esi
c0010fd1:	5f                   	pop    edi
c0010fd2:	c3                   	ret    

c0010fd3 <SysShutdown(regs*)>:
c0010fd3:	57                   	push   edi
c0010fd4:	56                   	push   esi
c0010fd5:	83 ec 04             	sub    esp,0x4
c0010fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fdc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fdf:	85 c0                	test   eax,eax
c0010fe1:	74 1e                	je     c0011001 <SysShutdown(regs*)+0x2e>
c0010fe3:	83 f8 01             	cmp    eax,0x1
c0010fe6:	74 5f                	je     c0011047 <SysShutdown(regs*)+0x74>
c0010fe8:	83 f8 02             	cmp    eax,0x2
c0010feb:	be ff ff ff ff       	mov    esi,0xffffffff
c0010ff0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0010ff5:	74 32                	je     c0011029 <SysShutdown(regs*)+0x56>
c0010ff7:	83 c4 04             	add    esp,0x4
c0010ffa:	89 f0                	mov    eax,esi
c0010ffc:	5e                   	pop    esi
c0010ffd:	89 fa                	mov    edx,edi
c0010fff:	5f                   	pop    edi
c0011000:	c3                   	ret    
c0011001:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011006:	be ff ff ff ff       	mov    esi,0xffffffff
c001100b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011010:	8b 10                	mov    edx,DWORD PTR [eax]
c0011012:	6a 00                	push   0x0
c0011014:	6a 00                	push   0x0
c0011016:	6a 00                	push   0x0
c0011018:	50                   	push   eax
c0011019:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001101c:	83 c4 10             	add    esp,0x10
c001101f:	89 f0                	mov    eax,esi
c0011021:	83 c4 04             	add    esp,0x4
c0011024:	89 fa                	mov    edx,edi
c0011026:	5e                   	pop    esi
c0011027:	5f                   	pop    edi
c0011028:	c3                   	ret    
c0011029:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001102e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011030:	6a 00                	push   0x0
c0011032:	6a 00                	push   0x0
c0011034:	6a 01                	push   0x1
c0011036:	50                   	push   eax
c0011037:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001103a:	83 c4 10             	add    esp,0x10
c001103d:	89 f0                	mov    eax,esi
c001103f:	83 c4 04             	add    esp,0x4
c0011042:	89 fa                	mov    edx,edi
c0011044:	5e                   	pop    esi
c0011045:	5f                   	pop    edi
c0011046:	c3                   	ret    
c0011047:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c001104c:	85 c0                	test   eax,eax
c001104e:	74 02                	je     c0011052 <SysShutdown(regs*)+0x7f>
c0011050:	ff d0                	call   eax
c0011052:	31 f6                	xor    esi,esi
c0011054:	83 c4 04             	add    esp,0x4
c0011057:	89 f0                	mov    eax,esi
c0011059:	31 ff                	xor    edi,edi
c001105b:	5e                   	pop    esi
c001105c:	89 fa                	mov    edx,edi
c001105e:	5f                   	pop    edi
c001105f:	c3                   	ret    

c0011060 <SysRealpath(regs*)>:
c0011060:	53                   	push   ebx
c0011061:	83 ec 08             	sub    esp,0x8
c0011064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011068:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001106b:	85 c9                	test   ecx,ecx
c001106d:	74 37                	je     c00110a6 <SysRealpath(regs*)+0x46>
c001106f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011072:	31 d2                	xor    edx,edx
c0011074:	b8 01 00 00 00       	mov    eax,0x1
c0011079:	85 db                	test   ebx,ebx
c001107b:	75 05                	jne    c0011082 <SysRealpath(regs*)+0x22>
c001107d:	83 c4 08             	add    esp,0x8
c0011080:	5b                   	pop    ebx
c0011081:	c3                   	ret    
c0011082:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011087:	83 ec 04             	sub    esp,0x4
c001108a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001108d:	05 0c 01 00 00       	add    eax,0x10c
c0011092:	50                   	push   eax
c0011093:	51                   	push   ecx
c0011094:	53                   	push   ebx
c0011095:	e8 84 9c ff ff       	call   c000ad1e <Fs::standardiseFiles(char*, char const*, char const*)>
c001109a:	83 c4 10             	add    esp,0x10
c001109d:	31 c0                	xor    eax,eax
c001109f:	31 d2                	xor    edx,edx
c00110a1:	83 c4 08             	add    esp,0x8
c00110a4:	5b                   	pop    ebx
c00110a5:	c3                   	ret    
c00110a6:	b8 01 00 00 00       	mov    eax,0x1
c00110ab:	31 d2                	xor    edx,edx
c00110ad:	eb f2                	jmp    c00110a1 <SysRealpath(regs*)+0x41>

c00110af <SysReadDir(regs*)>:
c00110af:	53                   	push   ebx
c00110b0:	83 ec 18             	sub    esp,0x18
c00110b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110b7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00110ba:	83 f8 02             	cmp    eax,0x2
c00110bd:	76 4f                	jbe    c001110e <SysReadDir(regs*)+0x5f>
c00110bf:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00110c6:	77 52                	ja     c001111a <SysReadDir(regs*)+0x6b>
c00110c8:	83 ec 0c             	sub    esp,0xc
c00110cb:	50                   	push   eax
c00110cc:	e8 da 83 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00110d1:	83 c4 10             	add    esp,0x10
c00110d4:	85 c0                	test   eax,eax
c00110d6:	74 42                	je     c001111a <SysReadDir(regs*)+0x6b>
c00110d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00110e0:	83 ec 0c             	sub    esp,0xc
c00110e3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00110e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00110e9:	51                   	push   ecx
c00110ea:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00110ed:	51                   	push   ecx
c00110ee:	6a 00                	push   0x0
c00110f0:	68 10 01 00 00       	push   0x110
c00110f5:	50                   	push   eax
c00110f6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00110f9:	83 c4 20             	add    esp,0x20
c00110fc:	85 c0                	test   eax,eax
c00110fe:	89 c1                	mov    ecx,eax
c0011100:	74 27                	je     c0011129 <SysReadDir(regs*)+0x7a>
c0011102:	31 d2                	xor    edx,edx
c0011104:	83 f9 07             	cmp    ecx,0x7
c0011107:	b8 02 00 00 00       	mov    eax,0x2
c001110c:	75 16                	jne    c0011124 <SysReadDir(regs*)+0x75>
c001110e:	b8 01 00 00 00       	mov    eax,0x1
c0011113:	31 d2                	xor    edx,edx
c0011115:	83 c4 18             	add    esp,0x18
c0011118:	5b                   	pop    ebx
c0011119:	c3                   	ret    
c001111a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001111f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011124:	83 c4 18             	add    esp,0x18
c0011127:	5b                   	pop    ebx
c0011128:	c3                   	ret    
c0011129:	31 c0                	xor    eax,eax
c001112b:	31 d2                	xor    edx,edx
c001112d:	eb e6                	jmp    c0011115 <SysReadDir(regs*)+0x66>

c001112f <SysIsATTY(regs*)>:
c001112f:	83 ec 0c             	sub    esp,0xc
c0011132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011136:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011139:	83 f8 02             	cmp    eax,0x2
c001113c:	76 07                	jbe    c0011145 <SysIsATTY(regs*)+0x16>
c001113e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011143:	75 26                	jne    c001116b <SysIsATTY(regs*)+0x3c>
c0011145:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001114a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001114d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011153:	85 c0                	test   eax,eax
c0011155:	74 24                	je     c001117b <SysIsATTY(regs*)+0x4c>
c0011157:	8b 10                	mov    edx,DWORD PTR [eax]
c0011159:	83 ec 0c             	sub    esp,0xc
c001115c:	50                   	push   eax
c001115d:	ff 12                	call   DWORD PTR [edx]
c001115f:	83 c4 10             	add    esp,0x10
c0011162:	31 d2                	xor    edx,edx
c0011164:	83 c4 0c             	add    esp,0xc
c0011167:	0f b6 c0             	movzx  eax,al
c001116a:	c3                   	ret    
c001116b:	83 ec 0c             	sub    esp,0xc
c001116e:	50                   	push   eax
c001116f:	e8 37 83 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	85 c0                	test   eax,eax
c0011179:	75 dc                	jne    c0011157 <SysIsATTY(regs*)+0x28>
c001117b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011180:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011185:	83 c4 0c             	add    esp,0xc
c0011188:	c3                   	ret    

c0011189 <SysSeek(regs*)>:
c0011189:	56                   	push   esi
c001118a:	53                   	push   ebx
c001118b:	83 ec 04             	sub    esp,0x4
c001118e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011192:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011195:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011198:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c001119e:	77 33                	ja     c00111d3 <SysSeek(regs*)+0x4a>
c00111a0:	83 ec 0c             	sub    esp,0xc
c00111a3:	51                   	push   ecx
c00111a4:	e8 02 83 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00111a9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00111ac:	83 c4 0c             	add    esp,0xc
c00111af:	31 db                	xor    ebx,ebx
c00111b1:	53                   	push   ebx
c00111b2:	51                   	push   ecx
c00111b3:	50                   	push   eax
c00111b4:	e8 bb 9e ff ff       	call   c000b074 <File::seek(unsigned long long)>
c00111b9:	83 c4 10             	add    esp,0x10
c00111bc:	85 c0                	test   eax,eax
c00111be:	0f 95 c0             	setne  al
c00111c1:	31 d2                	xor    edx,edx
c00111c3:	0f b6 c0             	movzx  eax,al
c00111c6:	f7 d8                	neg    eax
c00111c8:	83 d2 00             	adc    edx,0x0
c00111cb:	83 c4 04             	add    esp,0x4
c00111ce:	5b                   	pop    ebx
c00111cf:	f7 da                	neg    edx
c00111d1:	5e                   	pop    esi
c00111d2:	c3                   	ret    
c00111d3:	83 c4 04             	add    esp,0x4
c00111d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111db:	5b                   	pop    ebx
c00111dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111e1:	5e                   	pop    esi
c00111e2:	c3                   	ret    

c00111e3 <SysTell(regs*)>:
c00111e3:	53                   	push   ebx
c00111e4:	83 ec 08             	sub    esp,0x8
c00111e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111ee:	83 f8 02             	cmp    eax,0x2
c00111f1:	76 4e                	jbe    c0011241 <SysTell(regs*)+0x5e>
c00111f3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00111f8:	76 19                	jbe    c0011213 <SysTell(regs*)+0x30>
c00111fa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00111fd:	31 d2                	xor    edx,edx
c00111ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011205:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001120c:	83 c4 08             	add    esp,0x8
c001120f:	31 c0                	xor    eax,eax
c0011211:	5b                   	pop    ebx
c0011212:	c3                   	ret    
c0011213:	83 ec 0c             	sub    esp,0xc
c0011216:	50                   	push   eax
c0011217:	e8 8f 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c001121c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001121f:	5a                   	pop    edx
c0011220:	59                   	pop    ecx
c0011221:	53                   	push   ebx
c0011222:	50                   	push   eax
c0011223:	e8 a2 9e ff ff       	call   c000b0ca <File::tell(unsigned long long*)>
c0011228:	83 c4 10             	add    esp,0x10
c001122b:	85 c0                	test   eax,eax
c001122d:	0f 95 c0             	setne  al
c0011230:	31 d2                	xor    edx,edx
c0011232:	0f b6 c0             	movzx  eax,al
c0011235:	f7 d8                	neg    eax
c0011237:	83 d2 00             	adc    edx,0x0
c001123a:	83 c4 08             	add    esp,0x8
c001123d:	5b                   	pop    ebx
c001123e:	f7 da                	neg    edx
c0011240:	c3                   	ret    
c0011241:	83 c4 08             	add    esp,0x8
c0011244:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011249:	5b                   	pop    ebx
c001124a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001124f:	c3                   	ret    

c0011250 <SysSize(regs*)>:
c0011250:	53                   	push   ebx
c0011251:	83 ec 18             	sub    esp,0x18
c0011254:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011258:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001125b:	83 f8 02             	cmp    eax,0x2
c001125e:	76 54                	jbe    c00112b4 <SysSize(regs*)+0x64>
c0011260:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011265:	76 19                	jbe    c0011280 <SysSize(regs*)+0x30>
c0011267:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001126a:	31 d2                	xor    edx,edx
c001126c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011272:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011279:	83 c4 18             	add    esp,0x18
c001127c:	31 c0                	xor    eax,eax
c001127e:	5b                   	pop    ebx
c001127f:	c3                   	ret    
c0011280:	83 ec 0c             	sub    esp,0xc
c0011283:	50                   	push   eax
c0011284:	e8 22 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011289:	83 c4 0c             	add    esp,0xc
c001128c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011290:	52                   	push   edx
c0011291:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011294:	52                   	push   edx
c0011295:	50                   	push   eax
c0011296:	e8 c7 9f ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	85 c0                	test   eax,eax
c00112a0:	0f 95 c0             	setne  al
c00112a3:	31 d2                	xor    edx,edx
c00112a5:	0f b6 c0             	movzx  eax,al
c00112a8:	f7 d8                	neg    eax
c00112aa:	83 d2 00             	adc    edx,0x0
c00112ad:	83 c4 18             	add    esp,0x18
c00112b0:	5b                   	pop    ebx
c00112b1:	f7 da                	neg    edx
c00112b3:	c3                   	ret    
c00112b4:	83 c4 18             	add    esp,0x18
c00112b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112bc:	5b                   	pop    ebx
c00112bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112c2:	c3                   	ret    

c00112c3 <SysSizeFromFilename(regs*)>:
c00112c3:	57                   	push   edi
c00112c4:	56                   	push   esi
c00112c5:	53                   	push   ebx
c00112c6:	83 ec 10             	sub    esp,0x10
c00112c9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112cd:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00112d0:	83 fb 02             	cmp    ebx,0x2
c00112d3:	0f 86 83 00 00 00    	jbe    c001135c <SysSizeFromFilename(regs*)+0x99>
c00112d9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00112df:	76 1b                	jbe    c00112fc <SysSizeFromFilename(regs*)+0x39>
c00112e1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00112e4:	31 d2                	xor    edx,edx
c00112e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112f3:	83 c4 10             	add    esp,0x10
c00112f6:	31 c0                	xor    eax,eax
c00112f8:	5b                   	pop    ebx
c00112f9:	5e                   	pop    esi
c00112fa:	5f                   	pop    edi
c00112fb:	c3                   	ret    
c00112fc:	83 ec 0c             	sub    esp,0xc
c00112ff:	68 14 01 00 00       	push   0x114
c0011304:	e8 c2 67 ff ff       	call   c0007acb <malloc>
c0011309:	83 c4 0c             	add    esp,0xc
c001130c:	89 c7                	mov    edi,eax
c001130e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011313:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011316:	50                   	push   eax
c0011317:	53                   	push   ebx
c0011318:	57                   	push   edi
c0011319:	e8 dc 9b ff ff       	call   c000aefa <File::File(char const*, Process*)>
c001131e:	83 c4 0c             	add    esp,0xc
c0011321:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011325:	50                   	push   eax
c0011326:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011329:	52                   	push   edx
c001132a:	57                   	push   edi
c001132b:	e8 32 9f ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c0011330:	83 c4 10             	add    esp,0x10
c0011333:	85 ff                	test   edi,edi
c0011335:	89 c3                	mov    ebx,eax
c0011337:	74 0c                	je     c0011345 <SysSizeFromFilename(regs*)+0x82>
c0011339:	8b 07                	mov    eax,DWORD PTR [edi]
c001133b:	83 ec 0c             	sub    esp,0xc
c001133e:	57                   	push   edi
c001133f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	31 c0                	xor    eax,eax
c0011347:	85 db                	test   ebx,ebx
c0011349:	0f 95 c0             	setne  al
c001134c:	31 d2                	xor    edx,edx
c001134e:	f7 d8                	neg    eax
c0011350:	83 d2 00             	adc    edx,0x0
c0011353:	83 c4 10             	add    esp,0x10
c0011356:	5b                   	pop    ebx
c0011357:	f7 da                	neg    edx
c0011359:	5e                   	pop    esi
c001135a:	5f                   	pop    edi
c001135b:	c3                   	ret    
c001135c:	83 c4 10             	add    esp,0x10
c001135f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011364:	5b                   	pop    ebx
c0011365:	ba ff ff ff ff       	mov    edx,0xffffffff
c001136a:	5e                   	pop    esi
c001136b:	5f                   	pop    edi
c001136c:	c3                   	ret    

c001136d <SysClose(regs*)>:
c001136d:	53                   	push   ebx
c001136e:	83 ec 08             	sub    esp,0x8
c0011371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011375:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011378:	83 f8 02             	cmp    eax,0x2
c001137b:	76 41                	jbe    c00113be <SysClose(regs*)+0x51>
c001137d:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011383:	83 fa 01             	cmp    edx,0x1
c0011386:	76 2d                	jbe    c00113b5 <SysClose(regs*)+0x48>
c0011388:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001138d:	77 2f                	ja     c00113be <SysClose(regs*)+0x51>
c001138f:	83 ec 0c             	sub    esp,0xc
c0011392:	50                   	push   eax
c0011393:	e8 13 81 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011398:	89 04 24             	mov    DWORD PTR [esp],eax
c001139b:	89 c3                	mov    ebx,eax
c001139d:	e8 72 9c ff ff       	call   c000b014 <File::close()>
c00113a2:	83 c4 10             	add    esp,0x10
c00113a5:	85 db                	test   ebx,ebx
c00113a7:	74 0c                	je     c00113b5 <SysClose(regs*)+0x48>
c00113a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113ab:	83 ec 0c             	sub    esp,0xc
c00113ae:	53                   	push   ebx
c00113af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113b2:	83 c4 10             	add    esp,0x10
c00113b5:	83 c4 08             	add    esp,0x8
c00113b8:	31 c0                	xor    eax,eax
c00113ba:	5b                   	pop    ebx
c00113bb:	31 d2                	xor    edx,edx
c00113bd:	c3                   	ret    
c00113be:	83 c4 08             	add    esp,0x8
c00113c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113c6:	5b                   	pop    ebx
c00113c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113cc:	c3                   	ret    

c00113cd <SysOpenDir(regs*)>:
c00113cd:	56                   	push   esi
c00113ce:	53                   	push   ebx
c00113cf:	83 ec 04             	sub    esp,0x4
c00113d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113d6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00113d9:	85 c9                	test   ecx,ecx
c00113db:	74 5d                	je     c001143a <SysOpenDir(regs*)+0x6d>
c00113dd:	83 ec 0c             	sub    esp,0xc
c00113e0:	68 14 01 00 00       	push   0x114
c00113e5:	e8 e1 66 ff ff       	call   c0007acb <malloc>
c00113ea:	83 c4 0c             	add    esp,0xc
c00113ed:	89 c6                	mov    esi,eax
c00113ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113f7:	50                   	push   eax
c00113f8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00113fb:	52                   	push   edx
c00113fc:	56                   	push   esi
c00113fd:	e8 1e a0 ff ff       	call   c000b420 <Directory::Directory(char const*, Process*)>
c0011402:	83 c4 10             	add    esp,0x10
c0011405:	85 f6                	test   esi,esi
c0011407:	74 31                	je     c001143a <SysOpenDir(regs*)+0x6d>
c0011409:	83 ec 0c             	sub    esp,0xc
c001140c:	56                   	push   esi
c001140d:	e8 ca a0 ff ff       	call   c000b4dc <Directory::open()>
c0011412:	83 c4 10             	add    esp,0x10
c0011415:	85 c0                	test   eax,eax
c0011417:	75 21                	jne    c001143a <SysOpenDir(regs*)+0x6d>
c0011419:	83 ec 0c             	sub    esp,0xc
c001141c:	56                   	push   esi
c001141d:	e8 8c 7d ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c0011422:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011425:	83 c4 10             	add    esp,0x10
c0011428:	89 02                	mov    DWORD PTR [edx],eax
c001142a:	c1 f8 1f             	sar    eax,0x1f
c001142d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011430:	83 c4 04             	add    esp,0x4
c0011433:	31 c0                	xor    eax,eax
c0011435:	5b                   	pop    ebx
c0011436:	31 d2                	xor    edx,edx
c0011438:	5e                   	pop    esi
c0011439:	c3                   	ret    
c001143a:	83 c4 04             	add    esp,0x4
c001143d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011442:	5b                   	pop    ebx
c0011443:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011448:	5e                   	pop    esi
c0011449:	c3                   	ret    

c001144a <SysMakeDir(regs*)>:
c001144a:	56                   	push   esi
c001144b:	53                   	push   ebx
c001144c:	83 ec 10             	sub    esp,0x10
c001144f:	68 14 01 00 00       	push   0x114
c0011454:	e8 72 66 ff ff       	call   c0007acb <malloc>
c0011459:	83 c4 0c             	add    esp,0xc
c001145c:	89 c3                	mov    ebx,eax
c001145e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011463:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011466:	50                   	push   eax
c0011467:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001146b:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001146e:	52                   	push   edx
c001146f:	53                   	push   ebx
c0011470:	e8 ab 9f ff ff       	call   c000b420 <Directory::Directory(char const*, Process*)>
c0011475:	83 c4 10             	add    esp,0x10
c0011478:	85 db                	test   ebx,ebx
c001147a:	74 2c                	je     c00114a8 <SysMakeDir(regs*)+0x5e>
c001147c:	83 ec 0c             	sub    esp,0xc
c001147f:	53                   	push   ebx
c0011480:	e8 37 a2 ff ff       	call   c000b6bc <Directory::create()>
c0011485:	89 c6                	mov    esi,eax
c0011487:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011489:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001148c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001148f:	83 c4 10             	add    esp,0x10
c0011492:	31 c0                	xor    eax,eax
c0011494:	85 f6                	test   esi,esi
c0011496:	0f 95 c0             	setne  al
c0011499:	31 d2                	xor    edx,edx
c001149b:	f7 d8                	neg    eax
c001149d:	83 d2 00             	adc    edx,0x0
c00114a0:	83 c4 04             	add    esp,0x4
c00114a3:	5b                   	pop    ebx
c00114a4:	f7 da                	neg    edx
c00114a6:	5e                   	pop    esi
c00114a7:	c3                   	ret    
c00114a8:	83 c4 04             	add    esp,0x4
c00114ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114b0:	5b                   	pop    ebx
c00114b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114b6:	5e                   	pop    esi
c00114b7:	c3                   	ret    

c00114b8 <SysCloseDir(regs*)>:
c00114b8:	53                   	push   ebx
c00114b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114be:	83 ec 08             	sub    esp,0x8
c00114c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114c5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00114c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114cd:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00114d0:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00114d6:	77 2a                	ja     c0011502 <SysCloseDir(regs*)+0x4a>
c00114d8:	83 ec 0c             	sub    esp,0xc
c00114db:	51                   	push   ecx
c00114dc:	e8 ca 7f ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00114e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00114e4:	89 c3                	mov    ebx,eax
c00114e6:	e8 4d a0 ff ff       	call   c000b538 <Directory::close()>
c00114eb:	83 c4 10             	add    esp,0x10
c00114ee:	85 db                	test   ebx,ebx
c00114f0:	74 0c                	je     c00114fe <SysCloseDir(regs*)+0x46>
c00114f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114f4:	83 ec 0c             	sub    esp,0xc
c00114f7:	53                   	push   ebx
c00114f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114fb:	83 c4 10             	add    esp,0x10
c00114fe:	31 c0                	xor    eax,eax
c0011500:	31 d2                	xor    edx,edx
c0011502:	83 c4 08             	add    esp,0x8
c0011505:	5b                   	pop    ebx
c0011506:	c3                   	ret    

c0011507 <SysWait(regs*)>:
c0011507:	83 ec 10             	sub    esp,0x10
c001150a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001150e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011511:	52                   	push   edx
c0011512:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011515:	51                   	push   ecx
c0011516:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011519:	50                   	push   eax
c001151a:	e8 e9 3c 00 00       	call   c0015208 <waitTask(int, int*, int)>
c001151f:	83 c4 1c             	add    esp,0x1c
c0011522:	89 c2                	mov    edx,eax
c0011524:	c1 fa 1f             	sar    edx,0x1f
c0011527:	c3                   	ret    

c0011528 <SysNotImpl(regs*)>:
c0011528:	83 ec 18             	sub    esp,0x18
c001152b:	68 de 0c 02 c0       	push   0xc0020cde
c0011530:	e8 a0 f2 ff ff       	call   c00107d5 <KePanic(char const*)>
c0011535:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001153a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001153f:	83 c4 1c             	add    esp,0x1c
c0011542:	c3                   	ret    

c0011543 <SysPanic(regs*)>:
c0011543:	83 ec 18             	sub    esp,0x18
c0011546:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001154a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001154d:	50                   	push   eax
c001154e:	e8 82 f2 ff ff       	call   c00107d5 <KePanic(char const*)>
c0011553:	b8 01 00 00 00       	mov    eax,0x1
c0011558:	31 d2                	xor    edx,edx
c001155a:	83 c4 1c             	add    esp,0x1c
c001155d:	c3                   	ret    

c001155e <SysRmdir(regs*)>:
c001155e:	56                   	push   esi
c001155f:	53                   	push   ebx
c0011560:	83 ec 10             	sub    esp,0x10
c0011563:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011567:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001156a:	68 14 01 00 00       	push   0x114
c001156f:	e8 57 65 ff ff       	call   c0007acb <malloc>
c0011574:	83 c4 0c             	add    esp,0xc
c0011577:	89 c3                	mov    ebx,eax
c0011579:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001157e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011581:	50                   	push   eax
c0011582:	56                   	push   esi
c0011583:	53                   	push   ebx
c0011584:	e8 71 99 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0011589:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001158c:	e8 9d 9b ff ff       	call   c000b12e <File::unlink()>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	85 db                	test   ebx,ebx
c0011596:	89 c6                	mov    esi,eax
c0011598:	74 0c                	je     c00115a6 <SysRmdir(regs*)+0x48>
c001159a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001159c:	83 ec 0c             	sub    esp,0xc
c001159f:	53                   	push   ebx
c00115a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115a3:	83 c4 10             	add    esp,0x10
c00115a6:	31 c0                	xor    eax,eax
c00115a8:	85 f6                	test   esi,esi
c00115aa:	0f 95 c0             	setne  al
c00115ad:	31 d2                	xor    edx,edx
c00115af:	f7 d8                	neg    eax
c00115b1:	83 d2 00             	adc    edx,0x0
c00115b4:	83 c4 04             	add    esp,0x4
c00115b7:	5b                   	pop    ebx
c00115b8:	f7 da                	neg    edx
c00115ba:	5e                   	pop    esi
c00115bb:	c3                   	ret    

c00115bc <SysUnlink(regs*)>:
c00115bc:	56                   	push   esi
c00115bd:	53                   	push   ebx
c00115be:	83 ec 10             	sub    esp,0x10
c00115c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115c5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115c8:	68 14 01 00 00       	push   0x114
c00115cd:	e8 f9 64 ff ff       	call   c0007acb <malloc>
c00115d2:	83 c4 0c             	add    esp,0xc
c00115d5:	89 c3                	mov    ebx,eax
c00115d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115df:	50                   	push   eax
c00115e0:	56                   	push   esi
c00115e1:	53                   	push   ebx
c00115e2:	e8 13 99 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c00115e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115ea:	e8 3f 9b ff ff       	call   c000b12e <File::unlink()>
c00115ef:	83 c4 10             	add    esp,0x10
c00115f2:	85 db                	test   ebx,ebx
c00115f4:	89 c6                	mov    esi,eax
c00115f6:	74 0c                	je     c0011604 <SysUnlink(regs*)+0x48>
c00115f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115fa:	83 ec 0c             	sub    esp,0xc
c00115fd:	53                   	push   ebx
c00115fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011601:	83 c4 10             	add    esp,0x10
c0011604:	31 c0                	xor    eax,eax
c0011606:	85 f6                	test   esi,esi
c0011608:	0f 95 c0             	setne  al
c001160b:	31 d2                	xor    edx,edx
c001160d:	f7 d8                	neg    eax
c001160f:	83 d2 00             	adc    edx,0x0
c0011612:	83 c4 04             	add    esp,0x4
c0011615:	5b                   	pop    ebx
c0011616:	f7 da                	neg    edx
c0011618:	5e                   	pop    esi
c0011619:	c3                   	ret    

c001161a <SysGetArgv(regs*)>:
c001161a:	83 ec 0c             	sub    esp,0xc
c001161d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011621:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011624:	85 c0                	test   eax,eax
c0011626:	78 2c                	js     c0011654 <SysGetArgv(regs*)+0x3a>
c0011628:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001162e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011631:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011637:	7d 1b                	jge    c0011654 <SysGetArgv(regs*)+0x3a>
c0011639:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011640:	85 c0                	test   eax,eax
c0011642:	74 18                	je     c001165c <SysGetArgv(regs*)+0x42>
c0011644:	83 ec 08             	sub    esp,0x8
c0011647:	50                   	push   eax
c0011648:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001164b:	50                   	push   eax
c001164c:	e8 ff ef fe ff       	call   c0000650 <strcpy>
c0011651:	83 c4 10             	add    esp,0x10
c0011654:	31 c0                	xor    eax,eax
c0011656:	31 d2                	xor    edx,edx
c0011658:	83 c4 0c             	add    esp,0xc
c001165b:	c3                   	ret    
c001165c:	b8 01 00 00 00       	mov    eax,0x1
c0011661:	31 d2                	xor    edx,edx
c0011663:	83 c4 0c             	add    esp,0xc
c0011666:	c3                   	ret    

c0011667 <SysUSleep(regs*)>:
c0011667:	83 ec 1c             	sub    esp,0x1c
c001166a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001166e:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011671:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011674:	6a 00                	push   0x0
c0011676:	6a 64                	push   0x64
c0011678:	52                   	push   edx
c0011679:	50                   	push   eax
c001167a:	e8 11 cf 00 00       	call   c001e590 <__udivdi3>
c001167f:	83 c4 14             	add    esp,0x14
c0011682:	50                   	push   eax
c0011683:	e8 64 3c 00 00       	call   c00152ec <milliTenthSleep(unsigned int)>
c0011688:	31 c0                	xor    eax,eax
c001168a:	31 d2                	xor    edx,edx
c001168c:	83 c4 1c             	add    esp,0x1c
c001168f:	c3                   	ret    

c0011690 <SysSpawn(regs*)>:
c0011690:	56                   	push   esi
c0011691:	53                   	push   ebx
c0011692:	83 ec 04             	sub    esp,0x4
c0011695:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011699:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001169c:	85 f6                	test   esi,esi
c001169e:	75 0a                	jne    c00116aa <SysSpawn(regs*)+0x1a>
c00116a0:	83 c4 04             	add    esp,0x4
c00116a3:	31 c0                	xor    eax,eax
c00116a5:	5b                   	pop    ebx
c00116a6:	31 d2                	xor    edx,edx
c00116a8:	5e                   	pop    esi
c00116a9:	c3                   	ret    
c00116aa:	83 ec 0c             	sub    esp,0xc
c00116ad:	68 24 07 00 00       	push   0x724
c00116b2:	e8 14 64 ff ff       	call   c0007acb <malloc>
c00116b7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00116ba:	83 c4 10             	add    esp,0x10
c00116bd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116c0:	89 c6                	mov    esi,eax
c00116c2:	31 c0                	xor    eax,eax
c00116c4:	85 c9                	test   ecx,ecx
c00116c6:	75 08                	jne    c00116d0 <SysSpawn(regs*)+0x40>
c00116c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116d0:	52                   	push   edx
c00116d1:	50                   	push   eax
c00116d2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00116d5:	50                   	push   eax
c00116d6:	56                   	push   esi
c00116d7:	e8 78 32 00 00       	call   c0014954 <Process::Process(char const*, Process*, char**)>
c00116dc:	83 c4 10             	add    esp,0x10
c00116df:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00116e6:	75 b8                	jne    c00116a0 <SysSpawn(regs*)+0x10>
c00116e8:	83 ec 0c             	sub    esp,0xc
c00116eb:	56                   	push   esi
c00116ec:	e8 9b 37 00 00       	call   c0014e8c <Process::createUserThread()>
c00116f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00116f3:	83 c4 10             	add    esp,0x10
c00116f6:	83 c4 04             	add    esp,0x4
c00116f9:	5b                   	pop    ebx
c00116fa:	89 c2                	mov    edx,eax
c00116fc:	c1 fa 1f             	sar    edx,0x1f
c00116ff:	5e                   	pop    esi
c0011700:	c3                   	ret    

c0011701 <SysGetEnv(regs*)>:
c0011701:	57                   	push   edi
c0011702:	56                   	push   esi
c0011703:	53                   	push   ebx
c0011704:	83 ec 1c             	sub    esp,0x1c
c0011707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001170c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011710:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011713:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011716:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011719:	51                   	push   ecx
c001171a:	e8 6e ef ff ff       	call   c001068d <Krnl::getProcessTotalEnvCount(Process*)>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	39 c7                	cmp    edi,eax
c0011724:	7c 12                	jl     c0011738 <SysGetEnv(regs*)+0x37>
c0011726:	31 c0                	xor    eax,eax
c0011728:	31 d2                	xor    edx,edx
c001172a:	85 f6                	test   esi,esi
c001172c:	74 03                	je     c0011731 <SysGetEnv(regs*)+0x30>
c001172e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011731:	83 c4 10             	add    esp,0x10
c0011734:	5b                   	pop    ebx
c0011735:	5e                   	pop    esi
c0011736:	5f                   	pop    edi
c0011737:	c3                   	ret    
c0011738:	8d 44 24 08          	lea    eax,[esp+0x8]
c001173c:	83 ec 04             	sub    esp,0x4
c001173f:	57                   	push   edi
c0011740:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011746:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011749:	57                   	push   edi
c001174a:	50                   	push   eax
c001174b:	e8 5d ef ff ff       	call   c00106ad <Krnl::getProcessEnvPair(Process*, int)>
c0011750:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011753:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011757:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001175b:	83 c4 0c             	add    esp,0xc
c001175e:	85 d2                	test   edx,edx
c0011760:	75 23                	jne    c0011785 <SysGetEnv(regs*)+0x84>
c0011762:	83 ec 0c             	sub    esp,0xc
c0011765:	50                   	push   eax
c0011766:	e8 15 ee fe ff       	call   c0000580 <strlen>
c001176b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001176e:	89 c3                	mov    ebx,eax
c0011770:	e8 0b ee fe ff       	call   c0000580 <strlen>
c0011775:	83 c4 10             	add    esp,0x10
c0011778:	31 d2                	xor    edx,edx
c001177a:	83 c4 10             	add    esp,0x10
c001177d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011781:	5b                   	pop    ebx
c0011782:	5e                   	pop    esi
c0011783:	5f                   	pop    edi
c0011784:	c3                   	ret    
c0011785:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011788:	83 ec 08             	sub    esp,0x8
c001178b:	50                   	push   eax
c001178c:	56                   	push   esi
c001178d:	e8 be ee fe ff       	call   c0000650 <strcpy>
c0011792:	58                   	pop    eax
c0011793:	5a                   	pop    edx
c0011794:	68 f8 0c 02 c0       	push   0xc0020cf8
c0011799:	56                   	push   esi
c001179a:	e8 d1 f0 fe ff       	call   c0000870 <strcat>
c001179f:	59                   	pop    ecx
c00117a0:	5b                   	pop    ebx
c00117a1:	57                   	push   edi
c00117a2:	56                   	push   esi
c00117a3:	e8 c8 f0 fe ff       	call   c0000870 <strcat>
c00117a8:	83 c4 10             	add    esp,0x10
c00117ab:	31 c0                	xor    eax,eax
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	31 d2                	xor    edx,edx
c00117b2:	5b                   	pop    ebx
c00117b3:	5e                   	pop    esi
c00117b4:	5f                   	pop    edi
c00117b5:	c3                   	ret    

c00117b6 <SysSetFatAttrib(regs*)>:
c00117b6:	57                   	push   edi
c00117b7:	56                   	push   esi
c00117b8:	53                   	push   ebx
c00117b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00117bd:	83 ec 0c             	sub    esp,0xc
c00117c0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00117c3:	68 14 01 00 00       	push   0x114
c00117c8:	e8 fe 62 ff ff       	call   c0007acb <malloc>
c00117cd:	83 c4 0c             	add    esp,0xc
c00117d0:	89 c3                	mov    ebx,eax
c00117d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117da:	50                   	push   eax
c00117db:	57                   	push   edi
c00117dc:	53                   	push   ebx
c00117dd:	e8 18 97 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c00117e2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00117e5:	83 c4 0c             	add    esp,0xc
c00117e8:	0f b6 d4             	movzx  edx,ah
c00117eb:	0f b6 c0             	movzx  eax,al
c00117ee:	52                   	push   edx
c00117ef:	50                   	push   eax
c00117f0:	53                   	push   ebx
c00117f1:	e8 d2 99 ff ff       	call   c000b1c8 <File::chfatattr(unsigned char, unsigned char)>
c00117f6:	83 c4 10             	add    esp,0x10
c00117f9:	85 db                	test   ebx,ebx
c00117fb:	89 c6                	mov    esi,eax
c00117fd:	74 0c                	je     c001180b <SysSetFatAttrib(regs*)+0x55>
c00117ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	53                   	push   ebx
c0011805:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011808:	83 c4 10             	add    esp,0x10
c001180b:	5b                   	pop    ebx
c001180c:	31 c0                	xor    eax,eax
c001180e:	85 f6                	test   esi,esi
c0011810:	0f 95 c0             	setne  al
c0011813:	31 d2                	xor    edx,edx
c0011815:	5e                   	pop    esi
c0011816:	f7 d8                	neg    eax
c0011818:	83 d2 00             	adc    edx,0x0
c001181b:	f7 da                	neg    edx
c001181d:	5f                   	pop    edi
c001181e:	c3                   	ret    

c001181f <SysPipe(regs*)>:
c001181f:	57                   	push   edi
c0011820:	56                   	push   esi
c0011821:	53                   	push   ebx
c0011822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011826:	83 ec 0c             	sub    esp,0xc
c0011829:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001182c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001182f:	6a 20                	push   0x20
c0011831:	e8 95 62 ff ff       	call   c0007acb <malloc>
c0011836:	89 c3                	mov    ebx,eax
c0011838:	58                   	pop    eax
c0011839:	5a                   	pop    edx
c001183a:	68 00 50 00 00       	push   0x5000
c001183f:	53                   	push   ebx
c0011840:	e8 e3 6b ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0011845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011848:	e8 61 79 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c001184d:	89 07                	mov    DWORD PTR [edi],eax
c001184f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011852:	e8 57 79 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c0011857:	83 c4 10             	add    esp,0x10
c001185a:	31 d2                	xor    edx,edx
c001185c:	89 06                	mov    DWORD PTR [esi],eax
c001185e:	31 c0                	xor    eax,eax
c0011860:	5b                   	pop    ebx
c0011861:	5e                   	pop    esi
c0011862:	5f                   	pop    edi
c0011863:	c3                   	ret    

c0011864 <SysGetUnixTime(regs*)>:
c0011864:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011869:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001186f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011873:	e9 8a a0 ff ff       	jmp    c000b902 <Clock::timeInSecondsLocal()>

c0011878 <string_ends_with(char const*, char const*)>:
c0011878:	57                   	push   edi
c0011879:	56                   	push   esi
c001187a:	53                   	push   ebx
c001187b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001187f:	83 ec 0c             	sub    esp,0xc
c0011882:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011886:	53                   	push   ebx
c0011887:	e8 f4 ec fe ff       	call   c0000580 <strlen>
c001188c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001188f:	89 c6                	mov    esi,eax
c0011891:	e8 ea ec fe ff       	call   c0000580 <strlen>
c0011896:	83 c4 10             	add    esp,0x10
c0011899:	31 d2                	xor    edx,edx
c001189b:	39 c6                	cmp    esi,eax
c001189d:	7d 06                	jge    c00118a5 <string_ends_with(char const*, char const*)+0x2d>
c001189f:	5b                   	pop    ebx
c00118a0:	89 d0                	mov    eax,edx
c00118a2:	5e                   	pop    esi
c00118a3:	5f                   	pop    edi
c00118a4:	c3                   	ret    
c00118a5:	83 ec 08             	sub    esp,0x8
c00118a8:	29 c6                	sub    esi,eax
c00118aa:	57                   	push   edi
c00118ab:	01 f3                	add    ebx,esi
c00118ad:	53                   	push   ebx
c00118ae:	e8 cd ee fe ff       	call   c0000780 <strcmp>
c00118b3:	83 c4 10             	add    esp,0x10
c00118b6:	31 d2                	xor    edx,edx
c00118b8:	5b                   	pop    ebx
c00118b9:	5e                   	pop    esi
c00118ba:	85 c0                	test   eax,eax
c00118bc:	5f                   	pop    edi
c00118bd:	0f 94 c2             	sete   dl
c00118c0:	89 d0                	mov    eax,edx
c00118c2:	c3                   	ret    

c00118c3 <SysOpen(regs*)>:
c00118c3:	56                   	push   esi
c00118c4:	53                   	push   ebx
c00118c5:	81 ec 04 01 00 00    	sub    esp,0x104
c00118cb:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00118d2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00118d5:	85 c0                	test   eax,eax
c00118d7:	0f 84 c5 01 00 00    	je     c0011aa2 <SysOpen(regs*)+0x1df>
c00118dd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00118e0:	85 c0                	test   eax,eax
c00118e2:	0f 84 ba 01 00 00    	je     c0011aa2 <SysOpen(regs*)+0x1df>
c00118e8:	83 ec 04             	sub    esp,0x4
c00118eb:	68 fa 0c 02 c0       	push   0xc0020cfa
c00118f0:	50                   	push   eax
c00118f1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00118f5:	56                   	push   esi
c00118f6:	e8 23 94 ff ff       	call   c000ad1e <Fs::standardiseFiles(char*, char const*, char const*)>
c00118fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00118fe:	e8 7d ec fe ff       	call   c0000580 <strlen>
c0011903:	83 c4 10             	add    esp,0x10
c0011906:	83 e8 01             	sub    eax,0x1
c0011909:	74 29                	je     c0011934 <SysOpen(regs*)+0x71>
c001190b:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001190f:	83 fa 2e             	cmp    edx,0x2e
c0011912:	74 1c                	je     c0011930 <SysOpen(regs*)+0x6d>
c0011914:	83 fa 3a             	cmp    edx,0x3a
c0011917:	74 17                	je     c0011930 <SysOpen(regs*)+0x6d>
c0011919:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001191d:	83 e8 01             	sub    eax,0x1
c0011920:	74 12                	je     c0011934 <SysOpen(regs*)+0x71>
c0011922:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011926:	83 fa 3a             	cmp    edx,0x3a
c0011929:	74 05                	je     c0011930 <SysOpen(regs*)+0x6d>
c001192b:	83 fa 2e             	cmp    edx,0x2e
c001192e:	75 e9                	jne    c0011919 <SysOpen(regs*)+0x56>
c0011930:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011934:	83 ec 08             	sub    esp,0x8
c0011937:	68 fe 0c 02 c0       	push   0xc0020cfe
c001193c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001193f:	50                   	push   eax
c0011940:	e8 33 ff ff ff       	call   c0011878 <string_ends_with(char const*, char const*)>
c0011945:	83 c4 10             	add    esp,0x10
c0011948:	85 c0                	test   eax,eax
c001194a:	74 1d                	je     c0011969 <SysOpen(regs*)+0xa6>
c001194c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001194f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011955:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001195c:	81 c4 04 01 00 00    	add    esp,0x104
c0011962:	31 c0                	xor    eax,eax
c0011964:	5b                   	pop    ebx
c0011965:	31 d2                	xor    edx,edx
c0011967:	5e                   	pop    esi
c0011968:	c3                   	ret    
c0011969:	83 ec 08             	sub    esp,0x8
c001196c:	68 03 0d 02 c0       	push   0xc0020d03
c0011971:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011974:	50                   	push   eax
c0011975:	e8 fe fe ff ff       	call   c0011878 <string_ends_with(char const*, char const*)>
c001197a:	83 c4 10             	add    esp,0x10
c001197d:	85 c0                	test   eax,eax
c001197f:	75 cb                	jne    c001194c <SysOpen(regs*)+0x89>
c0011981:	83 ec 08             	sub    esp,0x8
c0011984:	68 ff 0c 02 c0       	push   0xc0020cff
c0011989:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001198c:	50                   	push   eax
c001198d:	e8 ee ed fe ff       	call   c0000780 <strcmp>
c0011992:	83 c4 10             	add    esp,0x10
c0011995:	85 c0                	test   eax,eax
c0011997:	74 b3                	je     c001194c <SysOpen(regs*)+0x89>
c0011999:	83 ec 08             	sub    esp,0x8
c001199c:	68 fe 0c 02 c0       	push   0xc0020cfe
c00119a1:	56                   	push   esi
c00119a2:	e8 d1 fe ff ff       	call   c0011878 <string_ends_with(char const*, char const*)>
c00119a7:	83 c4 10             	add    esp,0x10
c00119aa:	85 c0                	test   eax,eax
c00119ac:	75 9e                	jne    c001194c <SysOpen(regs*)+0x89>
c00119ae:	83 ec 08             	sub    esp,0x8
c00119b1:	68 08 0d 02 c0       	push   0xc0020d08
c00119b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119b9:	50                   	push   eax
c00119ba:	e8 b9 fe ff ff       	call   c0011878 <string_ends_with(char const*, char const*)>
c00119bf:	83 c4 10             	add    esp,0x10
c00119c2:	85 c0                	test   eax,eax
c00119c4:	0f 85 eb 00 00 00    	jne    c0011ab5 <SysOpen(regs*)+0x1f2>
c00119ca:	83 ec 08             	sub    esp,0x8
c00119cd:	68 0d 0d 02 c0       	push   0xc0020d0d
c00119d2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119d5:	50                   	push   eax
c00119d6:	e8 9d fe ff ff       	call   c0011878 <string_ends_with(char const*, char const*)>
c00119db:	83 c4 10             	add    esp,0x10
c00119de:	85 c0                	test   eax,eax
c00119e0:	0f 85 cf 00 00 00    	jne    c0011ab5 <SysOpen(regs*)+0x1f2>
c00119e6:	83 ec 08             	sub    esp,0x8
c00119e9:	68 09 0d 02 c0       	push   0xc0020d09
c00119ee:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00119f1:	51                   	push   ecx
c00119f2:	e8 89 ed fe ff       	call   c0000780 <strcmp>
c00119f7:	83 c4 10             	add    esp,0x10
c00119fa:	85 c0                	test   eax,eax
c00119fc:	0f 84 b3 00 00 00    	je     c0011ab5 <SysOpen(regs*)+0x1f2>
c0011a02:	83 ec 08             	sub    esp,0x8
c0011a05:	68 08 0d 02 c0       	push   0xc0020d08
c0011a0a:	56                   	push   esi
c0011a0b:	e8 68 fe ff ff       	call   c0011878 <string_ends_with(char const*, char const*)>
c0011a10:	83 c4 10             	add    esp,0x10
c0011a13:	85 c0                	test   eax,eax
c0011a15:	0f 85 9a 00 00 00    	jne    c0011ab5 <SysOpen(regs*)+0x1f2>
c0011a1b:	83 ec 0c             	sub    esp,0xc
c0011a1e:	68 14 01 00 00       	push   0x114
c0011a23:	e8 a3 60 ff ff       	call   c0007acb <malloc>
c0011a28:	83 c4 0c             	add    esp,0xc
c0011a2b:	89 c6                	mov    esi,eax
c0011a2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a35:	50                   	push   eax
c0011a36:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011a39:	52                   	push   edx
c0011a3a:	56                   	push   esi
c0011a3b:	e8 ba 94 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0011a40:	83 c4 10             	add    esp,0x10
c0011a43:	85 f6                	test   esi,esi
c0011a45:	74 5b                	je     c0011aa2 <SysOpen(regs*)+0x1df>
c0011a47:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011a4a:	0f b6 c2             	movzx  eax,dl
c0011a4d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011a50:	89 d0                	mov    eax,edx
c0011a52:	83 e0 01             	and    eax,0x1
c0011a55:	f6 c2 02             	test   dl,0x2
c0011a58:	74 03                	je     c0011a5d <SysOpen(regs*)+0x19a>
c0011a5a:	83 c8 02             	or     eax,0x2
c0011a5d:	f6 c2 04             	test   dl,0x4
c0011a60:	74 03                	je     c0011a65 <SysOpen(regs*)+0x1a2>
c0011a62:	83 c8 04             	or     eax,0x4
c0011a65:	f6 c2 08             	test   dl,0x8
c0011a68:	74 03                	je     c0011a6d <SysOpen(regs*)+0x1aa>
c0011a6a:	83 c8 0a             	or     eax,0xa
c0011a6d:	80 e2 10             	and    dl,0x10
c0011a70:	74 03                	je     c0011a75 <SysOpen(regs*)+0x1b2>
c0011a72:	83 c8 12             	or     eax,0x12
c0011a75:	83 ec 08             	sub    esp,0x8
c0011a78:	50                   	push   eax
c0011a79:	56                   	push   esi
c0011a7a:	e8 37 95 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0011a7f:	83 c4 10             	add    esp,0x10
c0011a82:	85 c0                	test   eax,eax
c0011a84:	75 1c                	jne    c0011aa2 <SysOpen(regs*)+0x1df>
c0011a86:	83 ec 0c             	sub    esp,0xc
c0011a89:	56                   	push   esi
c0011a8a:	e8 1f 77 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c0011a8f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011a92:	83 c4 10             	add    esp,0x10
c0011a95:	89 02                	mov    DWORD PTR [edx],eax
c0011a97:	c1 f8 1f             	sar    eax,0x1f
c0011a9a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011a9d:	e9 ba fe ff ff       	jmp    c001195c <SysOpen(regs*)+0x99>
c0011aa2:	81 c4 04 01 00 00    	add    esp,0x104
c0011aa8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011aad:	5b                   	pop    ebx
c0011aae:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ab3:	5e                   	pop    esi
c0011ab4:	c3                   	ret    
c0011ab5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ab8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011abe:	e9 92 fe ff ff       	jmp    c0011955 <SysOpen(regs*)+0x92>

c0011ac3 <KeSystemCall(regs*, void*)>:
c0011ac3:	53                   	push   ebx
c0011ac4:	83 ec 08             	sub    esp,0x8
c0011ac7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011acb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011ace:	83 f8 3b             	cmp    eax,0x3b
c0011ad1:	77 16                	ja     c0011ae9 <KeSystemCall(regs*, void*)+0x26>
c0011ad3:	8b 14 85 c0 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf40]
c0011ada:	85 d2                	test   edx,edx
c0011adc:	74 0b                	je     c0011ae9 <KeSystemCall(regs*, void*)+0x26>
c0011ade:	83 ec 0c             	sub    esp,0xc
c0011ae1:	53                   	push   ebx
c0011ae2:	ff d2                	call   edx
c0011ae4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011ae7:	eb 0d                	jmp    c0011af6 <KeSystemCall(regs*, void*)+0x33>
c0011ae9:	52                   	push   edx
c0011aea:	52                   	push   edx
c0011aeb:	50                   	push   eax
c0011aec:	68 12 0d 02 c0       	push   0xc0020d12
c0011af1:	e8 5b 8e ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0011af6:	83 c4 10             	add    esp,0x10
c0011af9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011afe:	83 c4 08             	add    esp,0x8
c0011b01:	31 d2                	xor    edx,edx
c0011b03:	5b                   	pop    ebx
c0011b04:	c3                   	ret    
c0011b05:	66 90                	xchg   ax,ax
c0011b07:	90                   	nop

c0011b08 <KeSwitchEndian16(unsigned short)>:
c0011b08:	83 ec 04             	sub    esp,0x4
c0011b0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b0f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011b13:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b17:	c1 f8 08             	sar    eax,0x8
c0011b1a:	89 c2                	mov    edx,eax
c0011b1c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b20:	c1 e0 08             	shl    eax,0x8
c0011b23:	09 d0                	or     eax,edx
c0011b25:	83 c4 04             	add    esp,0x4
c0011b28:	c3                   	ret    
c0011b29:	8d 76 00             	lea    esi,[esi+0x0]

c0011b2c <KeSwitchEndian32(unsigned int)>:
c0011b2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b30:	c1 e8 18             	shr    eax,0x18
c0011b33:	89 c2                	mov    edx,eax
c0011b35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b39:	c1 e0 08             	shl    eax,0x8
c0011b3c:	25 00 00 ff 00       	and    eax,0xff0000
c0011b41:	09 c2                	or     edx,eax
c0011b43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b47:	c1 e8 08             	shr    eax,0x8
c0011b4a:	25 00 ff 00 00       	and    eax,0xff00
c0011b4f:	09 c2                	or     edx,eax
c0011b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b55:	c1 e0 18             	shl    eax,0x18
c0011b58:	09 d0                	or     eax,edx
c0011b5a:	c3                   	ret    
c0011b5b:	90                   	nop

c0011b5c <EthernetCRC32(unsigned char*, int)>:
c0011b5c:	83 ec 10             	sub    esp,0x10
c0011b5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011b64:	75 0a                	jne    c0011b70 <EthernetCRC32(unsigned char*, int)+0x14>
c0011b66:	b8 00 00 00 00       	mov    eax,0x0
c0011b6b:	e9 8c 00 00 00       	jmp    c0011bfc <EthernetCRC32(unsigned char*, int)+0xa0>
c0011b70:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011b75:	7f 09                	jg     c0011b80 <EthernetCRC32(unsigned char*, int)+0x24>
c0011b77:	b8 00 00 00 00       	mov    eax,0x0
c0011b7c:	eb 7e                	jmp    c0011bfc <EthernetCRC32(unsigned char*, int)+0xa0>
c0011b7e:	66 90                	xchg   ax,ax
c0011b80:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011b88:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011b90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b94:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011b98:	7d 5a                	jge    c0011bf4 <EthernetCRC32(unsigned char*, int)+0x98>
c0011b9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ba2:	01 d0                	add    eax,edx
c0011ba4:	8a 00                	mov    al,BYTE PTR [eax]
c0011ba6:	0f b6 c0             	movzx  eax,al
c0011ba9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011bad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0011bb8:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011bbd:	7f 2d                	jg     c0011bec <EthernetCRC32(unsigned char*, int)+0x90>
c0011bbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc3:	83 e0 01             	and    eax,0x1
c0011bc6:	74 10                	je     c0011bd8 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bcc:	d1 e8                	shr    eax,1
c0011bce:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011bd3:	eb 0b                	jmp    c0011be0 <EthernetCRC32(unsigned char*, int)+0x84>
c0011bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0011bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bdc:	d1 e8                	shr    eax,1
c0011bde:	66 90                	xchg   ax,ax
c0011be0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011be4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011be9:	eb cd                	jmp    c0011bb8 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011beb:	90                   	nop
c0011bec:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011bf1:	eb 9d                	jmp    c0011b90 <EthernetCRC32(unsigned char*, int)+0x34>
c0011bf3:	90                   	nop
c0011bf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bf8:	f7 d0                	not    eax
c0011bfa:	66 90                	xchg   ax,ax
c0011bfc:	83 c4 10             	add    esp,0x10
c0011bff:	c3                   	ret    

c0011c00 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011c00:	83 ec 2c             	sub    esp,0x2c
c0011c03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c07:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011c0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c1b:	0f b7 c0             	movzx  eax,ax
c0011c1e:	3d 06 08 00 00       	cmp    eax,0x806
c0011c23:	75 13                	jne    c0011c38 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011c25:	83 ec 0c             	sub    esp,0xc
c0011c28:	68 26 0d 02 c0       	push   0xc0020d26
c0011c2d:	e8 1f 8d ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0011c32:	83 c4 10             	add    esp,0x10
c0011c35:	eb 25                	jmp    c0011c5c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011c37:	90                   	nop
c0011c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c3c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c3f:	0f b7 c0             	movzx  eax,ax
c0011c42:	3d 00 08 00 00       	cmp    eax,0x800
c0011c47:	75 13                	jne    c0011c5c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011c49:	83 ec 0c             	sub    esp,0xc
c0011c4c:	68 3c 0d 02 c0       	push   0xc0020d3c
c0011c51:	e8 fb 8c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0011c56:	83 c4 10             	add    esp,0x10
c0011c59:	8d 76 00             	lea    esi,[esi+0x0]
c0011c5c:	90                   	nop
c0011c5d:	83 c4 2c             	add    esp,0x2c
c0011c60:	c3                   	ret    

c0011c61 <CmOpen(char const*)>:
c0011c61:	57                   	push   edi
c0011c62:	56                   	push   esi
c0011c63:	53                   	push   ebx
c0011c64:	83 ec 1c             	sub    esp,0x1c
c0011c67:	6a 30                	push   0x30
c0011c69:	e8 5d 5e ff ff       	call   c0007acb <malloc>
c0011c6e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c75:	89 c3                	mov    ebx,eax
c0011c77:	e8 4f 5e ff ff       	call   c0007acb <malloc>
c0011c7c:	83 c4 0c             	add    esp,0xc
c0011c7f:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011c85:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011c89:	89 c6                	mov    esi,eax
c0011c8b:	50                   	push   eax
c0011c8c:	e8 69 92 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0011c91:	83 c4 0c             	add    esp,0xc
c0011c94:	89 33                	mov    DWORD PTR [ebx],esi
c0011c96:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011c9a:	50                   	push   eax
c0011c9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011c9f:	50                   	push   eax
c0011ca0:	56                   	push   esi
c0011ca1:	e8 bc 95 ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c0011ca6:	5a                   	pop    edx
c0011ca7:	59                   	pop    ecx
c0011ca8:	6a 01                	push   0x1
c0011caa:	ff 33                	push   DWORD PTR [ebx]
c0011cac:	e8 05 93 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0011cb1:	5e                   	pop    esi
c0011cb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cb6:	e8 10 5e ff ff       	call   c0007acb <malloc>
c0011cbb:	5a                   	pop    edx
c0011cbc:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011cc0:	89 c7                	mov    edi,eax
c0011cc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011cc4:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cc6:	56                   	push   esi
c0011cc7:	57                   	push   edi
c0011cc8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ccc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011cd0:	50                   	push   eax
c0011cd1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011cd4:	83 c4 14             	add    esp,0x14
c0011cd7:	ff 33                	push   DWORD PTR [ebx]
c0011cd9:	e8 36 93 ff ff       	call   c000b014 <File::close()>
c0011cde:	59                   	pop    ecx
c0011cdf:	58                   	pop    eax
c0011ce0:	6a 13                	push   0x13
c0011ce2:	ff 33                	push   DWORD PTR [ebx]
c0011ce4:	e8 cd 92 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0011ce9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ceb:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ced:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cf0:	57                   	push   edi
c0011cf1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011cf5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011cf9:	50                   	push   eax
c0011cfa:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011cfd:	83 c4 14             	add    esp,0x14
c0011d00:	57                   	push   edi
c0011d01:	e8 d5 5d ff ff       	call   c0007adb <free>
c0011d06:	83 c4 10             	add    esp,0x10
c0011d09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011d0c:	75 10                	jne    c0011d1e <CmOpen(char const*)+0xbd>
c0011d0e:	83 ec 0c             	sub    esp,0xc
c0011d11:	68 51 0d 02 c0       	push   0xc0020d51
c0011d16:	e8 ba ea ff ff       	call   c00107d5 <KePanic(char const*)>
c0011d1b:	83 c4 10             	add    esp,0x10
c0011d1e:	50                   	push   eax
c0011d1f:	6a 00                	push   0x0
c0011d21:	6a 00                	push   0x0
c0011d23:	ff 33                	push   DWORD PTR [ebx]
c0011d25:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011d28:	e8 47 93 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0011d2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d31:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d34:	57                   	push   edi
c0011d35:	6a 00                	push   0x0
c0011d37:	6a 2b                	push   0x2b
c0011d39:	50                   	push   eax
c0011d3a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d3d:	83 c4 1c             	add    esp,0x1c
c0011d40:	6a 00                	push   0x0
c0011d42:	6a 00                	push   0x0
c0011d44:	ff 33                	push   DWORD PTR [ebx]
c0011d46:	e8 29 93 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0011d4b:	83 c4 0c             	add    esp,0xc
c0011d4e:	6a 08                	push   0x8
c0011d50:	68 62 0d 02 c0       	push   0xc0020d62
c0011d55:	57                   	push   edi
c0011d56:	e8 25 e6 fe ff       	call   c0000380 <memcmp>
c0011d5b:	83 c4 10             	add    esp,0x10
c0011d5e:	85 c0                	test   eax,eax
c0011d60:	74 10                	je     c0011d72 <CmOpen(char const*)+0x111>
c0011d62:	83 ec 0c             	sub    esp,0xc
c0011d65:	68 6b 0d 02 c0       	push   0xc0020d6b
c0011d6a:	e8 66 ea ff ff       	call   c00107d5 <KePanic(char const*)>
c0011d6f:	83 c4 10             	add    esp,0x10
c0011d72:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011d76:	83 c4 10             	add    esp,0x10
c0011d79:	89 d8                	mov    eax,ebx
c0011d7b:	5b                   	pop    ebx
c0011d7c:	5e                   	pop    esi
c0011d7d:	5f                   	pop    edi
c0011d7e:	c3                   	ret    

c0011d7f <CmClose(Reghive_Tag*)>:
c0011d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d83:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011d87:	74 0b                	je     c0011d94 <CmClose(Reghive_Tag*)+0x15>
c0011d89:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d8f:	e9 80 92 ff ff       	jmp    c000b014 <File::close()>
c0011d94:	c3                   	ret    

c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011d95:	53                   	push   ebx
c0011d96:	83 ec 18             	sub    esp,0x18
c0011d99:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d9d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011da1:	74 29                	je     c0011dcc <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011da3:	50                   	push   eax
c0011da4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011da9:	99                   	cdq    
c0011daa:	52                   	push   edx
c0011dab:	50                   	push   eax
c0011dac:	ff 33                	push   DWORD PTR [ebx]
c0011dae:	e8 c1 92 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0011db3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011db5:	5a                   	pop    edx
c0011db6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011dba:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dbc:	51                   	push   ecx
c0011dbd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011dc1:	6a 00                	push   0x0
c0011dc3:	6a 2b                	push   0x2b
c0011dc5:	50                   	push   eax
c0011dc6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011dc9:	83 c4 20             	add    esp,0x20
c0011dcc:	83 c4 18             	add    esp,0x18
c0011dcf:	5b                   	pop    ebx
c0011dd0:	c3                   	ret    

c0011dd1 <CmGetString(Reghive_Tag*, int, char*)>:
c0011dd1:	55                   	push   ebp
c0011dd2:	57                   	push   edi
c0011dd3:	56                   	push   esi
c0011dd4:	53                   	push   ebx
c0011dd5:	31 db                	xor    ebx,ebx
c0011dd7:	83 ec 70             	sub    esp,0x70
c0011dda:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011dde:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011de5:	50                   	push   eax
c0011de6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011ded:	55                   	push   ebp
c0011dee:	e8 a2 ff ff ff       	call   c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011df3:	83 c4 10             	add    esp,0x10
c0011df6:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011dfb:	c1 e0 08             	shl    eax,0x8
c0011dfe:	89 c2                	mov    edx,eax
c0011e00:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011e05:	09 d0                	or     eax,edx
c0011e07:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011e0c:	c1 e0 08             	shl    eax,0x8
c0011e0f:	09 d0                	or     eax,edx
c0011e11:	74 25                	je     c0011e38 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011e13:	52                   	push   edx
c0011e14:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011e18:	52                   	push   edx
c0011e19:	6b fb 0d             	imul   edi,ebx,0xd
c0011e1c:	50                   	push   eax
c0011e1d:	55                   	push   ebp
c0011e1e:	e8 72 ff ff ff       	call   c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e23:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011e27:	b9 27 00 00 00       	mov    ecx,0x27
c0011e2c:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011e33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e35:	83 c4 10             	add    esp,0x10
c0011e38:	83 c3 03             	add    ebx,0x3
c0011e3b:	83 fb 15             	cmp    ebx,0x15
c0011e3e:	75 b6                	jne    c0011df6 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011e40:	83 c4 6c             	add    esp,0x6c
c0011e43:	5b                   	pop    ebx
c0011e44:	5e                   	pop    esi
c0011e45:	5f                   	pop    edi
c0011e46:	5d                   	pop    ebp
c0011e47:	c3                   	ret    

c0011e48 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011e48:	83 ec 40             	sub    esp,0x40
c0011e4b:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011e4f:	50                   	push   eax
c0011e50:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e58:	e8 38 ff ff ff       	call   c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	83 c8 ff             	or     eax,0xffffffff
c0011e63:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011e68:	75 19                	jne    c0011e83 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011e6a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e6f:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011e74:	c1 e0 08             	shl    eax,0x8
c0011e77:	09 c2                	or     edx,eax
c0011e79:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011e7e:	c1 e0 10             	shl    eax,0x10
c0011e81:	09 d0                	or     eax,edx
c0011e83:	83 c4 3c             	add    esp,0x3c
c0011e86:	c3                   	ret    

c0011e87 <CmGetNext(Reghive_Tag*, int)>:
c0011e87:	83 ec 40             	sub    esp,0x40
c0011e8a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011e8e:	50                   	push   eax
c0011e8f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e97:	e8 f9 fe ff ff       	call   c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e9c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011ea1:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011ea6:	c1 e0 08             	shl    eax,0x8
c0011ea9:	09 c2                	or     edx,eax
c0011eab:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011eb0:	83 c4 4c             	add    esp,0x4c
c0011eb3:	c1 e0 10             	shl    eax,0x10
c0011eb6:	09 d0                	or     eax,edx
c0011eb8:	c3                   	ret    

c0011eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011eb9:	53                   	push   ebx
c0011eba:	83 ec 18             	sub    esp,0x18
c0011ebd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ec1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011ec5:	74 29                	je     c0011ef0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011ec7:	50                   	push   eax
c0011ec8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011ecd:	99                   	cdq    
c0011ece:	52                   	push   edx
c0011ecf:	50                   	push   eax
c0011ed0:	ff 33                	push   DWORD PTR [ebx]
c0011ed2:	e8 9d 91 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0011ed7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ed9:	5a                   	pop    edx
c0011eda:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011ede:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ee0:	51                   	push   ecx
c0011ee1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011ee5:	6a 00                	push   0x0
c0011ee7:	6a 2b                	push   0x2b
c0011ee9:	50                   	push   eax
c0011eea:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011eed:	83 c4 20             	add    esp,0x20
c0011ef0:	83 c4 18             	add    esp,0x18
c0011ef3:	5b                   	pop    ebx
c0011ef4:	c3                   	ret    

c0011ef5 <CmFreeExtent(Reghive_Tag*, int)>:
c0011ef5:	53                   	push   ebx
c0011ef6:	83 ec 3c             	sub    esp,0x3c
c0011ef9:	6a 2b                	push   0x2b
c0011efb:	6a 00                	push   0x0
c0011efd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f01:	53                   	push   ebx
c0011f02:	e8 e9 e5 fe ff       	call   c00004f0 <memset>
c0011f07:	83 c4 0c             	add    esp,0xc
c0011f0a:	53                   	push   ebx
c0011f0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f13:	e8 a1 ff ff ff       	call   c0011eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f18:	83 c4 48             	add    esp,0x48
c0011f1b:	5b                   	pop    ebx
c0011f1c:	c3                   	ret    

c0011f1d <CmUpdateHeader(Reghive_Tag*)>:
c0011f1d:	83 ec 0c             	sub    esp,0xc
c0011f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f24:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011f28:	74 10                	je     c0011f3a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011f2a:	52                   	push   edx
c0011f2b:	8d 50 05             	lea    edx,[eax+0x5]
c0011f2e:	52                   	push   edx
c0011f2f:	6a 00                	push   0x0
c0011f31:	50                   	push   eax
c0011f32:	e8 82 ff ff ff       	call   c0011eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f37:	83 c4 10             	add    esp,0x10
c0011f3a:	83 c4 0c             	add    esp,0xc
c0011f3d:	c3                   	ret    

c0011f3e <CmExpand(Reghive_Tag*, int)>:
c0011f3e:	55                   	push   ebp
c0011f3f:	57                   	push   edi
c0011f40:	83 cf ff             	or     edi,0xffffffff
c0011f43:	56                   	push   esi
c0011f44:	53                   	push   ebx
c0011f45:	83 ec 3c             	sub    esp,0x3c
c0011f48:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0011f4c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0011f50:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f54:	74 59                	je     c0011faf <CmExpand(Reghive_Tag*, int)+0x71>
c0011f56:	50                   	push   eax
c0011f57:	31 d2                	xor    edx,edx
c0011f59:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011f5d:	31 ff                	xor    edi,edi
c0011f5f:	52                   	push   edx
c0011f60:	50                   	push   eax
c0011f61:	ff 33                	push   DWORD PTR [ebx]
c0011f63:	e8 0c 91 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0011f68:	83 c4 0c             	add    esp,0xc
c0011f6b:	6a 2b                	push   0x2b
c0011f6d:	6a 00                	push   0x0
c0011f6f:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0011f73:	55                   	push   ebp
c0011f74:	e8 77 e5 fe ff       	call   c00004f0 <memset>
c0011f79:	83 c4 10             	add    esp,0x10
c0011f7c:	39 f7                	cmp    edi,esi
c0011f7e:	7d 1b                	jge    c0011f9b <CmExpand(Reghive_Tag*, int)+0x5d>
c0011f80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f82:	83 ec 0c             	sub    esp,0xc
c0011f85:	47                   	inc    edi
c0011f86:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011f8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f8c:	51                   	push   ecx
c0011f8d:	55                   	push   ebp
c0011f8e:	6a 00                	push   0x0
c0011f90:	6a 2b                	push   0x2b
c0011f92:	50                   	push   eax
c0011f93:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f96:	83 c4 20             	add    esp,0x20
c0011f99:	eb e1                	jmp    c0011f7c <CmExpand(Reghive_Tag*, int)+0x3e>
c0011f9b:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0011f9e:	83 ec 0c             	sub    esp,0xc
c0011fa1:	01 fe                	add    esi,edi
c0011fa3:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0011fa6:	53                   	push   ebx
c0011fa7:	e8 71 ff ff ff       	call   c0011f1d <CmUpdateHeader(Reghive_Tag*)>
c0011fac:	83 c4 10             	add    esp,0x10
c0011faf:	83 c4 3c             	add    esp,0x3c
c0011fb2:	89 f8                	mov    eax,edi
c0011fb4:	5b                   	pop    ebx
c0011fb5:	5e                   	pop    esi
c0011fb6:	5f                   	pop    edi
c0011fb7:	5d                   	pop    ebp
c0011fb8:	c3                   	ret    

c0011fb9 <CmFindUnusedExtent(Reghive_Tag*)>:
c0011fb9:	55                   	push   ebp
c0011fba:	57                   	push   edi
c0011fbb:	56                   	push   esi
c0011fbc:	53                   	push   ebx
c0011fbd:	83 cb ff             	or     ebx,0xffffffff
c0011fc0:	83 ec 1c             	sub    esp,0x1c
c0011fc3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011fc7:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0011fcb:	74 68                	je     c0012035 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011fcd:	51                   	push   ecx
c0011fce:	be 2b 00 00 00       	mov    esi,0x2b
c0011fd3:	6a 00                	push   0x0
c0011fd5:	31 ff                	xor    edi,edi
c0011fd7:	6a 00                	push   0x0
c0011fd9:	31 db                	xor    ebx,ebx
c0011fdb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011fde:	e8 91 90 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0011fe3:	83 c4 10             	add    esp,0x10
c0011fe6:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0011fe9:	76 3b                	jbe    c0012026 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0011feb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011fee:	83 ec 0c             	sub    esp,0xc
c0011ff1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011ff5:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ff7:	51                   	push   ecx
c0011ff8:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0011ffc:	51                   	push   ecx
c0011ffd:	6a 00                	push   0x0
c0011fff:	6a 01                	push   0x1
c0012001:	50                   	push   eax
c0012002:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012005:	83 c4 20             	add    esp,0x20
c0012008:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001200d:	74 26                	je     c0012035 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001200f:	52                   	push   edx
c0012010:	43                   	inc    ebx
c0012011:	57                   	push   edi
c0012012:	56                   	push   esi
c0012013:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012016:	e8 59 90 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c001201b:	83 c6 2b             	add    esi,0x2b
c001201e:	83 d7 00             	adc    edi,0x0
c0012021:	83 c4 10             	add    esp,0x10
c0012024:	eb c0                	jmp    c0011fe6 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012026:	50                   	push   eax
c0012027:	50                   	push   eax
c0012028:	6a 40                	push   0x40
c001202a:	55                   	push   ebp
c001202b:	e8 0e ff ff ff       	call   c0011f3e <CmExpand(Reghive_Tag*, int)>
c0012030:	83 c4 10             	add    esp,0x10
c0012033:	89 c3                	mov    ebx,eax
c0012035:	83 c4 1c             	add    esp,0x1c
c0012038:	89 d8                	mov    eax,ebx
c001203a:	5b                   	pop    ebx
c001203b:	5e                   	pop    esi
c001203c:	5f                   	pop    edi
c001203d:	5d                   	pop    ebp
c001203e:	c3                   	ret    

c001203f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001203f:	55                   	push   ebp
c0012040:	57                   	push   edi
c0012041:	56                   	push   esi
c0012042:	53                   	push   ebx
c0012043:	81 ec 88 00 00 00    	sub    esp,0x88
c0012049:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012050:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012057:	e8 5d ff ff ff       	call   c0011fb9 <CmFindUnusedExtent(Reghive_Tag*)>
c001205c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012060:	83 c4 0c             	add    esp,0xc
c0012063:	6a 2b                	push   0x2b
c0012065:	6a 00                	push   0x0
c0012067:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001206b:	55                   	push   ebp
c001206c:	e8 7f e4 fe ff       	call   c00004f0 <memset>
c0012071:	83 c4 10             	add    esp,0x10
c0012074:	85 db                	test   ebx,ebx
c0012076:	74 12                	je     c001208a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012078:	51                   	push   ecx
c0012079:	55                   	push   ebp
c001207a:	53                   	push   ebx
c001207b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012082:	e8 0e fd ff ff       	call   c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012087:	83 c4 10             	add    esp,0x10
c001208a:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001208e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012095:	b9 2b 00 00 00       	mov    ecx,0x2b
c001209a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001209c:	85 db                	test   ebx,ebx
c001209e:	74 49                	je     c00120e9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00120a0:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00120a5:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00120aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120ae:	c1 e0 08             	shl    eax,0x8
c00120b1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00120b7:	09 c8                	or     eax,ecx
c00120b9:	74 11                	je     c00120cc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00120bb:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00120bf:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00120c3:	c1 e8 10             	shr    eax,0x10
c00120c6:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00120ca:	eb 0f                	jmp    c00120db <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00120cc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00120d1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00120d6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00120db:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00120df:	c1 ea 08             	shr    edx,0x8
c00120e2:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00120e7:	eb 0f                	jmp    c00120f8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00120e9:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00120ee:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00120f3:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00120f8:	52                   	push   edx
c00120f9:	8d 44 24 49          	lea    eax,[esp+0x49]
c00120fd:	50                   	push   eax
c00120fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012102:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012109:	e8 ab fd ff ff       	call   c0011eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001210e:	83 c4 10             	add    esp,0x10
c0012111:	85 db                	test   ebx,ebx
c0012113:	74 12                	je     c0012127 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012115:	50                   	push   eax
c0012116:	55                   	push   ebp
c0012117:	53                   	push   ebx
c0012118:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001211f:	e8 95 fd ff ff       	call   c0011eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012124:	83 c4 10             	add    esp,0x10
c0012127:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001212b:	83 c4 7c             	add    esp,0x7c
c001212e:	5b                   	pop    ebx
c001212f:	5e                   	pop    esi
c0012130:	5f                   	pop    edi
c0012131:	5d                   	pop    ebp
c0012132:	c3                   	ret    

c0012133 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012133:	55                   	push   ebp
c0012134:	57                   	push   edi
c0012135:	56                   	push   esi
c0012136:	53                   	push   ebx
c0012137:	bb 27 00 00 00       	mov    ebx,0x27
c001213c:	81 ec 88 00 00 00    	sub    esp,0x88
c0012142:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012149:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012150:	e8 2b e4 fe ff       	call   c0000580 <strlen>
c0012155:	8d 48 26             	lea    ecx,[eax+0x26]
c0012158:	89 c8                	mov    eax,ecx
c001215a:	99                   	cdq    
c001215b:	f7 fb                	idiv   ebx
c001215d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012161:	83 c4 10             	add    esp,0x10
c0012164:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001216a:	7e 10                	jle    c001217c <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c001216c:	83 ec 0c             	sub    esp,0xc
c001216f:	68 7c 0d 02 c0       	push   0xc0020d7c
c0012174:	e8 5c e6 ff ff       	call   c00107d5 <KePanic(char const*)>
c0012179:	83 c4 10             	add    esp,0x10
c001217c:	53                   	push   ebx
c001217d:	31 ed                	xor    ebp,ebp
c001217f:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012183:	53                   	push   ebx
c0012184:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001218b:	57                   	push   edi
c001218c:	e8 04 fc ff ff       	call   c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012191:	83 c4 10             	add    esp,0x10
c0012194:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012198:	89 f0                	mov    eax,esi
c001219a:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c001219e:	c1 e0 08             	shl    eax,0x8
c00121a1:	09 c6                	or     esi,eax
c00121a3:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00121a7:	c1 e6 08             	shl    esi,0x8
c00121aa:	09 c6                	or     esi,eax
c00121ac:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00121b0:	7e 72                	jle    c0012224 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00121b2:	85 f6                	test   esi,esi
c00121b4:	75 25                	jne    c00121db <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00121b6:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00121bb:	8d 44 24 45          	lea    eax,[esp+0x45]
c00121bf:	50                   	push   eax
c00121c0:	6a 00                	push   0x0
c00121c2:	6a 00                	push   0x0
c00121c4:	57                   	push   edi
c00121c5:	e8 75 fe ff ff       	call   c001203f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00121ca:	83 c4 10             	add    esp,0x10
c00121cd:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00121d0:	89 c6                	mov    esi,eax
c00121d2:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00121d5:	c1 f8 10             	sar    eax,0x10
c00121d8:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00121db:	51                   	push   ecx
c00121dc:	8d 54 24 49          	lea    edx,[esp+0x49]
c00121e0:	52                   	push   edx
c00121e1:	56                   	push   esi
c00121e2:	57                   	push   edi
c00121e3:	e8 ad fb ff ff       	call   c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121e8:	83 c4 0c             	add    esp,0xc
c00121eb:	6a 27                	push   0x27
c00121ed:	6a 00                	push   0x0
c00121ef:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00121f3:	51                   	push   ecx
c00121f4:	e8 f7 e2 fe ff       	call   c00004f0 <memset>
c00121f9:	6b c5 27             	imul   eax,ebp,0x27
c00121fc:	83 c4 0c             	add    esp,0xc
c00121ff:	6a 27                	push   0x27
c0012201:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012208:	50                   	push   eax
c0012209:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001220d:	51                   	push   ecx
c001220e:	e8 7d e4 fe ff       	call   c0000690 <strncpy>
c0012213:	83 c4 0c             	add    esp,0xc
c0012216:	8d 54 24 49          	lea    edx,[esp+0x49]
c001221a:	52                   	push   edx
c001221b:	56                   	push   esi
c001221c:	57                   	push   edi
c001221d:	e8 97 fc ff ff       	call   c0011eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012222:	eb 19                	jmp    c001223d <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012224:	85 f6                	test   esi,esi
c0012226:	74 18                	je     c0012240 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012228:	52                   	push   edx
c0012229:	52                   	push   edx
c001222a:	56                   	push   esi
c001222b:	57                   	push   edi
c001222c:	e8 c4 fc ff ff       	call   c0011ef5 <CmFreeExtent(Reghive_Tag*, int)>
c0012231:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012235:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012239:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001223d:	83 c4 10             	add    esp,0x10
c0012240:	45                   	inc    ebp
c0012241:	83 c3 03             	add    ebx,0x3
c0012244:	83 fd 07             	cmp    ebp,0x7
c0012247:	0f 85 47 ff ff ff    	jne    c0012194 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c001224d:	50                   	push   eax
c001224e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012252:	50                   	push   eax
c0012253:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001225a:	57                   	push   edi
c001225b:	e8 59 fc ff ff       	call   c0011eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012260:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012266:	5b                   	pop    ebx
c0012267:	5e                   	pop    esi
c0012268:	5f                   	pop    edi
c0012269:	5d                   	pop    ebp
c001226a:	c3                   	ret    

c001226b <CmGetMatch(char*, char*, bool, bool*)>:
c001226b:	56                   	push   esi
c001226c:	53                   	push   ebx
c001226d:	50                   	push   eax
c001226e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012273:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012277:	74 25                	je     c001229e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012279:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001227c:	31 db                	xor    ebx,ebx
c001227e:	50                   	push   eax
c001227f:	50                   	push   eax
c0012280:	8d 04 9d c0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde40]
c0012287:	50                   	push   eax
c0012288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001228c:	e8 ef e4 fe ff       	call   c0000780 <strcmp>
c0012291:	83 c4 10             	add    esp,0x10
c0012294:	85 c0                	test   eax,eax
c0012296:	74 2e                	je     c00122c6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012298:	43                   	inc    ebx
c0012299:	83 fb 3f             	cmp    ebx,0x3f
c001229c:	75 e0                	jne    c001227e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001229e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122a1:	31 db                	xor    ebx,ebx
c00122a3:	51                   	push   ecx
c00122a4:	51                   	push   ecx
c00122a5:	8d 04 9d c0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde40]
c00122ac:	50                   	push   eax
c00122ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00122b1:	e8 ca e4 fe ff       	call   c0000780 <strcmp>
c00122b6:	83 c4 10             	add    esp,0x10
c00122b9:	85 c0                	test   eax,eax
c00122bb:	74 09                	je     c00122c6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00122bd:	43                   	inc    ebx
c00122be:	83 fb 3f             	cmp    ebx,0x3f
c00122c1:	75 e0                	jne    c00122a3 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00122c3:	83 cb ff             	or     ebx,0xffffffff
c00122c6:	5a                   	pop    edx
c00122c7:	89 d8                	mov    eax,ebx
c00122c9:	5b                   	pop    ebx
c00122ca:	5e                   	pop    esi
c00122cb:	c3                   	ret    

c00122cc <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00122cc:	55                   	push   ebp
c00122cd:	31 c0                	xor    eax,eax
c00122cf:	57                   	push   edi
c00122d0:	56                   	push   esi
c00122d1:	53                   	push   ebx
c00122d2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00122d6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00122da:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00122de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122e2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00122e4:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00122e7:	83 fd 1f             	cmp    ebp,0x1f
c00122ea:	7f 0b                	jg     c00122f7 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00122ec:	0f b6 c2             	movzx  eax,dl
c00122ef:	d3 e0                	shl    eax,cl
c00122f1:	09 07                	or     DWORD PTR [edi],eax
c00122f3:	b0 01                	mov    al,0x1
c00122f5:	01 33                	add    DWORD PTR [ebx],esi
c00122f7:	5b                   	pop    ebx
c00122f8:	5e                   	pop    esi
c00122f9:	5f                   	pop    edi
c00122fa:	5d                   	pop    ebp
c00122fb:	c3                   	ret    

c00122fc <CmGetShift(unsigned int*, int*, int, bool*)>:
c00122fc:	57                   	push   edi
c00122fd:	56                   	push   esi
c00122fe:	53                   	push   ebx
c00122ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012303:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012307:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001230b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001230f:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012311:	7c 17                	jl     c001232a <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012313:	8b 17                	mov    edx,DWORD PTR [edi]
c0012315:	b8 01 00 00 00       	mov    eax,0x1
c001231a:	d3 e0                	shl    eax,cl
c001231c:	48                   	dec    eax
c001231d:	21 d0                	and    eax,edx
c001231f:	d3 ea                	shr    edx,cl
c0012321:	89 17                	mov    DWORD PTR [edi],edx
c0012323:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012325:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012328:	eb 05                	jmp    c001232f <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001232a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001232d:	31 c0                	xor    eax,eax
c001232f:	5b                   	pop    ebx
c0012330:	5e                   	pop    esi
c0012331:	5f                   	pop    edi
c0012332:	c3                   	ret    

c0012333 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012333:	83 ec 40             	sub    esp,0x40
c0012336:	8d 44 24 09          	lea    eax,[esp+0x9]
c001233a:	50                   	push   eax
c001233b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001233f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012343:	e8 4d fa ff ff       	call   c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012348:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001234c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012350:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012354:	89 10                	mov    DWORD PTR [eax],edx
c0012356:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012359:	83 c4 4c             	add    esp,0x4c
c001235c:	c3                   	ret    

c001235d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c001235d:	55                   	push   ebp
c001235e:	57                   	push   edi
c001235f:	56                   	push   esi
c0012360:	53                   	push   ebx
c0012361:	83 ec 40             	sub    esp,0x40
c0012364:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012368:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001236c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012370:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012374:	53                   	push   ebx
c0012375:	56                   	push   esi
c0012376:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001237a:	e8 16 fa ff ff       	call   c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001237f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012383:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012387:	83 c4 0c             	add    esp,0xc
c001238a:	53                   	push   ebx
c001238b:	56                   	push   esi
c001238c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012390:	e8 24 fb ff ff       	call   c0011eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012395:	83 c4 4c             	add    esp,0x4c
c0012398:	5b                   	pop    ebx
c0012399:	5e                   	pop    esi
c001239a:	5f                   	pop    edi
c001239b:	5d                   	pop    ebp
c001239c:	c3                   	ret    

c001239d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c001239d:	55                   	push   ebp
c001239e:	57                   	push   edi
c001239f:	56                   	push   esi
c00123a0:	31 f6                	xor    esi,esi
c00123a2:	53                   	push   ebx
c00123a3:	31 db                	xor    ebx,ebx
c00123a5:	83 ec 40             	sub    esp,0x40
c00123a8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00123b8:	6a 12                	push   0x12
c00123ba:	68 ee 00 00 00       	push   0xee
c00123bf:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00123c3:	e8 28 e1 fe ff       	call   c00004f0 <memset>
c00123c8:	83 c4 10             	add    esp,0x10
c00123cb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00123cf:	6a 08                	push   0x8
c00123d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00123d5:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00123d9:	50                   	push   eax
c00123da:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00123de:	55                   	push   ebp
c00123df:	57                   	push   edi
c00123e0:	e8 e7 fe ff ff       	call   c00122cc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00123e5:	83 c4 10             	add    esp,0x10
c00123e8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00123ec:	50                   	push   eax
c00123ed:	6a 06                	push   0x6
c00123ef:	55                   	push   ebp
c00123f0:	57                   	push   edi
c00123f1:	e8 06 ff ff ff       	call   c00122fc <CmGetShift(unsigned int*, int*, int, bool*)>
c00123f6:	83 c4 10             	add    esp,0x10
c00123f9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00123fe:	74 07                	je     c0012407 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012400:	46                   	inc    esi
c0012401:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012405:	eb e1                	jmp    c00123e8 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012407:	43                   	inc    ebx
c0012408:	83 fb 12             	cmp    ebx,0x12
c001240b:	75 c2                	jne    c00123cf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c001240d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012411:	31 f6                	xor    esi,esi
c0012413:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012416:	50                   	push   eax
c0012417:	50                   	push   eax
c0012418:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c001241d:	46                   	inc    esi
c001241e:	8d 04 85 c0 21 02 c0 	lea    eax,[eax*4-0x3ffdde40]
c0012425:	50                   	push   eax
c0012426:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001242a:	e8 41 e4 fe ff       	call   c0000870 <strcat>
c001242f:	83 c4 10             	add    esp,0x10
c0012432:	83 fe 18             	cmp    esi,0x18
c0012435:	75 df                	jne    c0012416 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012437:	83 c4 3c             	add    esp,0x3c
c001243a:	31 c0                	xor    eax,eax
c001243c:	5b                   	pop    ebx
c001243d:	5e                   	pop    esi
c001243e:	5f                   	pop    edi
c001243f:	5d                   	pop    ebp
c0012440:	c3                   	ret    

c0012441 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012441:	83 ec 40             	sub    esp,0x40
c0012444:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012448:	50                   	push   eax
c0012449:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001244d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012451:	e8 3f f9 ff ff       	call   c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012456:	58                   	pop    eax
c0012457:	5a                   	pop    edx
c0012458:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001245c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012460:	50                   	push   eax
c0012461:	e8 37 ff ff ff       	call   c001239d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012466:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001246b:	83 c4 4c             	add    esp,0x4c
c001246e:	c3                   	ret    

c001246f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001246f:	55                   	push   ebp
c0012470:	57                   	push   edi
c0012471:	56                   	push   esi
c0012472:	53                   	push   ebx
c0012473:	31 db                	xor    ebx,ebx
c0012475:	83 ec 70             	sub    esp,0x70
c0012478:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001247f:	6a 30                	push   0x30
c0012481:	6a 00                	push   0x0
c0012483:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012487:	56                   	push   esi
c0012488:	e8 63 e0 fe ff       	call   c00004f0 <memset>
c001248d:	83 c4 10             	add    esp,0x10
c0012490:	83 ec 0c             	sub    esp,0xc
c0012493:	57                   	push   edi
c0012494:	e8 e7 e0 fe ff       	call   c0000580 <strlen>
c0012499:	83 c4 10             	add    esp,0x10
c001249c:	39 d8                	cmp    eax,ebx
c001249e:	76 16                	jbe    c00124b6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00124a0:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00124a4:	83 ec 0c             	sub    esp,0xc
c00124a7:	50                   	push   eax
c00124a8:	e8 b3 e4 fe ff       	call   c0000960 <toupper>
c00124ad:	83 c4 10             	add    esp,0x10
c00124b0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00124b3:	43                   	inc    ebx
c00124b4:	eb da                	jmp    c0012490 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00124b6:	52                   	push   edx
c00124b7:	31 db                	xor    ebx,ebx
c00124b9:	6a 18                	push   0x18
c00124bb:	31 ff                	xor    edi,edi
c00124bd:	6a 3f                	push   0x3f
c00124bf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00124c3:	50                   	push   eax
c00124c4:	e8 27 e0 fe ff       	call   c00004f0 <memset>
c00124c9:	83 c4 10             	add    esp,0x10
c00124cc:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00124d0:	8d 74 24 10          	lea    esi,[esp+0x10]
c00124d4:	84 c0                	test   al,al
c00124d6:	0f 84 af 00 00 00    	je     c001258b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00124dc:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00124e0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00124e3:	83 ec 0c             	sub    esp,0xc
c00124e6:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c00124eb:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00124ef:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00124f3:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00124f8:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00124fc:	56                   	push   esi
c00124fd:	e8 7e e0 fe ff       	call   c0000580 <strlen>
c0012502:	83 c4 10             	add    esp,0x10
c0012505:	85 c0                	test   eax,eax
c0012507:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001250b:	74 0b                	je     c0012518 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c001250d:	50                   	push   eax
c001250e:	6a 01                	push   0x1
c0012510:	56                   	push   esi
c0012511:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012515:	50                   	push   eax
c0012516:	eb 0a                	jmp    c0012522 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012518:	50                   	push   eax
c0012519:	6a 00                	push   0x0
c001251b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001251f:	50                   	push   eax
c0012520:	6a 00                	push   0x0
c0012522:	e8 44 fd ff ff       	call   c001226b <CmGetMatch(char*, char*, bool, bool*)>
c0012527:	83 c4 10             	add    esp,0x10
c001252a:	83 f8 ff             	cmp    eax,0xffffffff
c001252d:	75 1a                	jne    c0012549 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001252f:	83 ec 0c             	sub    esp,0xc
c0012532:	68 91 0d 02 c0       	push   0xc0020d91
c0012537:	e8 99 e2 ff ff       	call   c00107d5 <KePanic(char const*)>
c001253c:	83 c4 10             	add    esp,0x10
c001253f:	b8 02 00 00 00       	mov    eax,0x2
c0012544:	e9 bb 00 00 00       	jmp    c0012604 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012549:	83 ff 18             	cmp    edi,0x18
c001254c:	75 1a                	jne    c0012568 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001254e:	83 ec 0c             	sub    esp,0xc
c0012551:	68 a6 0d 02 c0       	push   0xc0020da6
c0012556:	e8 7a e2 ff ff       	call   c00107d5 <KePanic(char const*)>
c001255b:	83 c4 10             	add    esp,0x10
c001255e:	b8 01 00 00 00       	mov    eax,0x1
c0012563:	e9 9c 00 00 00       	jmp    c0012604 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012568:	47                   	inc    edi
c0012569:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001256e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012572:	0f 45 dd             	cmovne ebx,ebp
c0012575:	83 ec 0c             	sub    esp,0xc
c0012578:	56                   	push   esi
c0012579:	e8 02 e0 fe ff       	call   c0000580 <strlen>
c001257e:	83 c4 10             	add    esp,0x10
c0012581:	85 c0                	test   eax,eax
c0012583:	74 06                	je     c001258b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012585:	43                   	inc    ebx
c0012586:	e9 41 ff ff ff       	jmp    c00124cc <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001258b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012593:	31 db                	xor    ebx,ebx
c0012595:	31 ff                	xor    edi,edi
c0012597:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001259f:	50                   	push   eax
c00125a0:	6a 12                	push   0x12
c00125a2:	68 ee 00 00 00       	push   0xee
c00125a7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00125ae:	e8 3d df fe ff       	call   c00004f0 <memset>
c00125b3:	83 c4 10             	add    esp,0x10
c00125b6:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00125ba:	83 fb 17             	cmp    ebx,0x17
c00125bd:	7e 26                	jle    c00125e5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00125bf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00125c3:	50                   	push   eax
c00125c4:	6a 08                	push   0x8
c00125c6:	55                   	push   ebp
c00125c7:	56                   	push   esi
c00125c8:	e8 2f fd ff ff       	call   c00122fc <CmGetShift(unsigned int*, int*, int, bool*)>
c00125cd:	83 c4 10             	add    esp,0x10
c00125d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00125d5:	74 26                	je     c00125fd <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00125d7:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00125de:	4b                   	dec    ebx
c00125df:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00125e2:	47                   	inc    edi
c00125e3:	eb 1c                	jmp    c0012601 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00125e5:	6a 06                	push   0x6
c00125e7:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00125ec:	50                   	push   eax
c00125ed:	55                   	push   ebp
c00125ee:	56                   	push   esi
c00125ef:	e8 d8 fc ff ff       	call   c00122cc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00125f4:	83 c4 10             	add    esp,0x10
c00125f7:	84 c0                	test   al,al
c00125f9:	75 06                	jne    c0012601 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00125fb:	eb c2                	jmp    c00125bf <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00125fd:	31 c0                	xor    eax,eax
c00125ff:	eb 03                	jmp    c0012604 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012601:	43                   	inc    ebx
c0012602:	eb b2                	jmp    c00125b6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012604:	83 c4 6c             	add    esp,0x6c
c0012607:	5b                   	pop    ebx
c0012608:	5e                   	pop    esi
c0012609:	5f                   	pop    edi
c001260a:	5d                   	pop    ebp
c001260b:	c3                   	ret    

c001260c <CmCreateString(Reghive_Tag*, int, char const*)>:
c001260c:	53                   	push   ebx
c001260d:	83 ec 3c             	sub    esp,0x3c
c0012610:	6a 2b                	push   0x2b
c0012612:	6a 00                	push   0x0
c0012614:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012618:	53                   	push   ebx
c0012619:	e8 d2 de fe ff       	call   c00004f0 <memset>
c001261e:	58                   	pop    eax
c001261f:	5a                   	pop    edx
c0012620:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012624:	50                   	push   eax
c0012625:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012629:	e8 41 fe ff ff       	call   c001246f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001262e:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012633:	83 c4 0c             	add    esp,0xc
c0012636:	6a 15                	push   0x15
c0012638:	6a 00                	push   0x0
c001263a:	8d 44 24 27          	lea    eax,[esp+0x27]
c001263e:	50                   	push   eax
c001263f:	e8 ac de fe ff       	call   c00004f0 <memset>
c0012644:	53                   	push   ebx
c0012645:	6a 00                	push   0x0
c0012647:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001264b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001264f:	e8 eb f9 ff ff       	call   c001203f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012654:	83 c4 58             	add    esp,0x58
c0012657:	5b                   	pop    ebx
c0012658:	c3                   	ret    

c0012659 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012659:	56                   	push   esi
c001265a:	53                   	push   ebx
c001265b:	83 ec 48             	sub    esp,0x48
c001265e:	6a 12                	push   0x12
c0012660:	68 ff 00 00 00       	push   0xff
c0012665:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012669:	56                   	push   esi
c001266a:	e8 81 de fe ff       	call   c00004f0 <memset>
c001266f:	5a                   	pop    edx
c0012670:	59                   	pop    ecx
c0012671:	56                   	push   esi
c0012672:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012676:	e8 f4 fd ff ff       	call   c001246f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001267b:	83 c4 10             	add    esp,0x10
c001267e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012682:	85 db                	test   ebx,ebx
c0012684:	74 42                	je     c00126c8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012686:	50                   	push   eax
c0012687:	8d 44 24 19          	lea    eax,[esp+0x19]
c001268b:	50                   	push   eax
c001268c:	53                   	push   ebx
c001268d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012691:	e8 ff f6 ff ff       	call   c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012696:	83 c4 0c             	add    esp,0xc
c0012699:	6a 12                	push   0x12
c001269b:	8d 44 24 21          	lea    eax,[esp+0x21]
c001269f:	50                   	push   eax
c00126a0:	56                   	push   esi
c00126a1:	e8 da dc fe ff       	call   c0000380 <memcmp>
c00126a6:	83 c4 10             	add    esp,0x10
c00126a9:	85 c0                	test   eax,eax
c00126ab:	74 1e                	je     c00126cb <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00126ad:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00126b2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00126b7:	c1 e3 08             	shl    ebx,0x8
c00126ba:	09 d8                	or     eax,ebx
c00126bc:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00126c1:	c1 e3 10             	shl    ebx,0x10
c00126c4:	09 c3                	or     ebx,eax
c00126c6:	eb ba                	jmp    c0012682 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00126c8:	83 cb ff             	or     ebx,0xffffffff
c00126cb:	83 c4 44             	add    esp,0x44
c00126ce:	89 d8                	mov    eax,ebx
c00126d0:	5b                   	pop    ebx
c00126d1:	5e                   	pop    esi
c00126d2:	c3                   	ret    

c00126d3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00126d3:	57                   	push   edi
c00126d4:	56                   	push   esi
c00126d5:	53                   	push   ebx
c00126d6:	83 ec 34             	sub    esp,0x34
c00126d9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00126dd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00126e1:	6a 2b                	push   0x2b
c00126e3:	6a 00                	push   0x0
c00126e5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00126e9:	53                   	push   ebx
c00126ea:	e8 01 de fe ff       	call   c00004f0 <memset>
c00126ef:	58                   	pop    eax
c00126f0:	5a                   	pop    edx
c00126f1:	8d 44 24 11          	lea    eax,[esp+0x11]
c00126f5:	50                   	push   eax
c00126f6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00126fa:	e8 70 fd ff ff       	call   c001246f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126ff:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0012703:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012707:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001270b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001270f:	53                   	push   ebx
c0012710:	6a 00                	push   0x0
c0012712:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012716:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001271a:	e8 20 f9 ff ff       	call   c001203f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001271f:	83 c4 50             	add    esp,0x50
c0012722:	5b                   	pop    ebx
c0012723:	5e                   	pop    esi
c0012724:	5f                   	pop    edi
c0012725:	c3                   	ret    

c0012726 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012726:	55                   	push   ebp
c0012727:	57                   	push   edi
c0012728:	56                   	push   esi
c0012729:	53                   	push   ebx
c001272a:	83 ec 40             	sub    esp,0x40
c001272d:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012731:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012735:	6a 2b                	push   0x2b
c0012737:	6a 00                	push   0x0
c0012739:	8d 74 24 11          	lea    esi,[esp+0x11]
c001273d:	56                   	push   esi
c001273e:	e8 ad dd fe ff       	call   c00004f0 <memset>
c0012743:	5f                   	pop    edi
c0012744:	89 ef                	mov    edi,ebp
c0012746:	58                   	pop    eax
c0012747:	8d 44 24 11          	lea    eax,[esp+0x11]
c001274b:	50                   	push   eax
c001274c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012750:	e8 1a fd ff ff       	call   c001246f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012755:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001275a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001275f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012764:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012769:	83 c4 10             	add    esp,0x10
c001276c:	85 ed                	test   ebp,ebp
c001276e:	74 14                	je     c0012784 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012770:	51                   	push   ecx
c0012771:	51                   	push   ecx
c0012772:	57                   	push   edi
c0012773:	53                   	push   ebx
c0012774:	e8 0e f7 ff ff       	call   c0011e87 <CmGetNext(Reghive_Tag*, int)>
c0012779:	83 c4 10             	add    esp,0x10
c001277c:	85 c0                	test   eax,eax
c001277e:	74 04                	je     c0012784 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012780:	89 c7                	mov    edi,eax
c0012782:	eb e8                	jmp    c001276c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012784:	56                   	push   esi
c0012785:	6a 00                	push   0x0
c0012787:	57                   	push   edi
c0012788:	53                   	push   ebx
c0012789:	e8 b1 f8 ff ff       	call   c001203f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001278e:	83 c4 0c             	add    esp,0xc
c0012791:	56                   	push   esi
c0012792:	50                   	push   eax
c0012793:	89 c7                	mov    edi,eax
c0012795:	53                   	push   ebx
c0012796:	e8 fa f5 ff ff       	call   c0011d95 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001279b:	58                   	pop    eax
c001279c:	5a                   	pop    edx
c001279d:	6a 6c                	push   0x6c
c001279f:	6a 00                	push   0x0
c00127a1:	6a 00                	push   0x0
c00127a3:	68 b7 0d 02 c0       	push   0xc0020db7
c00127a8:	57                   	push   edi
c00127a9:	53                   	push   ebx
c00127aa:	e8 24 ff ff ff       	call   c00126d3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00127af:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00127b3:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00127b7:	c1 e8 10             	shr    eax,0x10
c00127ba:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00127be:	83 c4 1c             	add    esp,0x1c
c00127c1:	56                   	push   esi
c00127c2:	57                   	push   edi
c00127c3:	53                   	push   ebx
c00127c4:	e8 f0 f6 ff ff       	call   c0011eb9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00127c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00127ce:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00127d3:	c1 e0 08             	shl    eax,0x8
c00127d6:	09 c2                	or     edx,eax
c00127d8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00127dd:	83 c4 4c             	add    esp,0x4c
c00127e0:	5b                   	pop    ebx
c00127e1:	5e                   	pop    esi
c00127e2:	c1 e0 10             	shl    eax,0x10
c00127e5:	09 d0                	or     eax,edx
c00127e7:	5f                   	pop    edi
c00127e8:	5d                   	pop    ebp
c00127e9:	c3                   	ret    

c00127ea <zStrtok(char*, char const*)>:
c00127ea:	55                   	push   ebp
c00127eb:	57                   	push   edi
c00127ec:	56                   	push   esi
c00127ed:	53                   	push   ebx
c00127ee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00127f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127f6:	85 db                	test   ebx,ebx
c00127f8:	74 2f                	je     c0012829 <zStrtok(char*, char const*)+0x3f>
c00127fa:	85 c0                	test   eax,eax
c00127fc:	75 09                	jne    c0012807 <zStrtok(char*, char const*)+0x1d>
c00127fe:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012803:	85 c0                	test   eax,eax
c0012805:	74 50                	je     c0012857 <zStrtok(char*, char const*)+0x6d>
c0012807:	31 c9                	xor    ecx,ecx
c0012809:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001280d:	74 03                	je     c0012812 <zStrtok(char*, char const*)+0x28>
c001280f:	41                   	inc    ecx
c0012810:	eb f7                	jmp    c0012809 <zStrtok(char*, char const*)+0x1f>
c0012812:	31 d2                	xor    edx,edx
c0012814:	39 ca                	cmp    edx,ecx
c0012816:	74 15                	je     c001282d <zStrtok(char*, char const*)+0x43>
c0012818:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c001281c:	8d 3c 10             	lea    edi,[eax+edx*1]
c001281f:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012822:	39 ee                	cmp    esi,ebp
c0012824:	74 13                	je     c0012839 <zStrtok(char*, char const*)+0x4f>
c0012826:	42                   	inc    edx
c0012827:	eb eb                	jmp    c0012814 <zStrtok(char*, char const*)+0x2a>
c0012829:	31 c0                	xor    eax,eax
c001282b:	eb 2a                	jmp    c0012857 <zStrtok(char*, char const*)+0x6d>
c001282d:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012837:	eb 1e                	jmp    c0012857 <zStrtok(char*, char const*)+0x6d>
c0012839:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001283c:	39 ce                	cmp    esi,ecx
c001283e:	75 0a                	jne    c001284a <zStrtok(char*, char const*)+0x60>
c0012840:	40                   	inc    eax
c0012841:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c0012846:	89 d8                	mov    eax,ebx
c0012848:	eb 0d                	jmp    c0012857 <zStrtok(char*, char const*)+0x6d>
c001284a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001284d:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012851:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c0012857:	5b                   	pop    ebx
c0012858:	5e                   	pop    esi
c0012859:	5f                   	pop    edi
c001285a:	5d                   	pop    ebp
c001285b:	c3                   	ret    

c001285c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c001285c:	57                   	push   edi
c001285d:	56                   	push   esi
c001285e:	53                   	push   ebx
c001285f:	81 ec 08 01 00 00    	sub    esp,0x108
c0012865:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001286c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012873:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012877:	53                   	push   ebx
c0012878:	e8 d3 dd fe ff       	call   c0000650 <strcpy>
c001287d:	59                   	pop    ecx
c001287e:	5e                   	pop    esi
c001287f:	68 1b 11 02 c0       	push   0xc002111b
c0012884:	53                   	push   ebx
c0012885:	bb 01 00 00 00       	mov    ebx,0x1
c001288a:	e8 5b ff ff ff       	call   c00127ea <zStrtok(char*, char const*)>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	85 c0                	test   eax,eax
c0012894:	74 3b                	je     c00128d1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012896:	52                   	push   edx
c0012897:	50                   	push   eax
c0012898:	6a 01                	push   0x1
c001289a:	57                   	push   edi
c001289b:	e8 b9 fd ff ff       	call   c0012659 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00128a0:	59                   	pop    ecx
c00128a1:	5e                   	pop    esi
c00128a2:	89 c3                	mov    ebx,eax
c00128a4:	68 1b 11 02 c0       	push   0xc002111b
c00128a9:	6a 00                	push   0x0
c00128ab:	e8 3a ff ff ff       	call   c00127ea <zStrtok(char*, char const*)>
c00128b0:	83 c4 10             	add    esp,0x10
c00128b3:	85 c0                	test   eax,eax
c00128b5:	89 c6                	mov    esi,eax
c00128b7:	74 18                	je     c00128d1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00128b9:	52                   	push   edx
c00128ba:	52                   	push   edx
c00128bb:	53                   	push   ebx
c00128bc:	57                   	push   edi
c00128bd:	e8 86 f5 ff ff       	call   c0011e48 <CmEnterDirectory(Reghive_Tag*, int)>
c00128c2:	83 c4 10             	add    esp,0x10
c00128c5:	83 f8 ff             	cmp    eax,0xffffffff
c00128c8:	89 c3                	mov    ebx,eax
c00128ca:	74 05                	je     c00128d1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00128cc:	50                   	push   eax
c00128cd:	56                   	push   esi
c00128ce:	53                   	push   ebx
c00128cf:	eb c9                	jmp    c001289a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00128d1:	81 c4 00 01 00 00    	add    esp,0x100
c00128d7:	89 d8                	mov    eax,ebx
c00128d9:	5b                   	pop    ebx
c00128da:	5e                   	pop    esi
c00128db:	5f                   	pop    edi
c00128dc:	c3                   	ret    

c00128dd <CmDisplayTree(Reghive_Tag*, int, int)>:
c00128dd:	55                   	push   ebp
c00128de:	57                   	push   edi
c00128df:	56                   	push   esi
c00128e0:	53                   	push   ebx
c00128e1:	83 ec 5c             	sub    esp,0x5c
c00128e4:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00128e8:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00128ec:	85 db                	test   ebx,ebx
c00128ee:	0f 8e 84 00 00 00    	jle    c0012978 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00128f4:	57                   	push   edi
c00128f5:	31 ed                	xor    ebp,ebp
c00128f7:	6a 32                	push   0x32
c00128f9:	6a 00                	push   0x0
c00128fb:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00128ff:	57                   	push   edi
c0012900:	e8 eb db fe ff       	call   c00004f0 <memset>
c0012905:	83 c4 0c             	add    esp,0xc
c0012908:	57                   	push   edi
c0012909:	53                   	push   ebx
c001290a:	56                   	push   esi
c001290b:	e8 31 fb ff ff       	call   c0012441 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012910:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012914:	83 c4 10             	add    esp,0x10
c0012917:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001291b:	7d 13                	jge    c0012930 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c001291d:	83 ec 0c             	sub    esp,0xc
c0012920:	45                   	inc    ebp
c0012921:	68 8c 14 02 c0       	push   0xc002148c
c0012926:	e8 26 80 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001292b:	83 c4 10             	add    esp,0x10
c001292e:	eb e7                	jmp    c0012917 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012930:	51                   	push   ecx
c0012931:	57                   	push   edi
c0012932:	53                   	push   ebx
c0012933:	68 bd 0d 02 c0       	push   0xc0020dbd
c0012938:	e8 14 80 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012945:	75 1e                	jne    c0012965 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012947:	52                   	push   edx
c0012948:	52                   	push   edx
c0012949:	53                   	push   ebx
c001294a:	56                   	push   esi
c001294b:	e8 f8 f4 ff ff       	call   c0011e48 <CmEnterDirectory(Reghive_Tag*, int)>
c0012950:	83 c4 0c             	add    esp,0xc
c0012953:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012957:	8d 51 04             	lea    edx,[ecx+0x4]
c001295a:	52                   	push   edx
c001295b:	50                   	push   eax
c001295c:	56                   	push   esi
c001295d:	e8 7b ff ff ff       	call   c00128dd <CmDisplayTree(Reghive_Tag*, int, int)>
c0012962:	83 c4 10             	add    esp,0x10
c0012965:	50                   	push   eax
c0012966:	50                   	push   eax
c0012967:	53                   	push   ebx
c0012968:	56                   	push   esi
c0012969:	e8 19 f5 ff ff       	call   c0011e87 <CmGetNext(Reghive_Tag*, int)>
c001296e:	83 c4 10             	add    esp,0x10
c0012971:	89 c3                	mov    ebx,eax
c0012973:	e9 74 ff ff ff       	jmp    c00128ec <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012978:	83 c4 5c             	add    esp,0x5c
c001297b:	5b                   	pop    ebx
c001297c:	5e                   	pop    esi
c001297d:	5f                   	pop    edi
c001297e:	5d                   	pop    ebp
c001297f:	c3                   	ret    

c0012980 <CmSplitFinalSlashInPlace(char*)>:
c0012980:	53                   	push   ebx
c0012981:	83 ec 14             	sub    esp,0x14
c0012984:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012988:	53                   	push   ebx
c0012989:	e8 f2 db fe ff       	call   c0000580 <strlen>
c001298e:	83 c4 10             	add    esp,0x10
c0012991:	48                   	dec    eax
c0012992:	85 c0                	test   eax,eax
c0012994:	74 15                	je     c00129ab <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012996:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001299a:	8d 14 03             	lea    edx,[ebx+eax*1]
c001299d:	75 09                	jne    c00129a8 <CmSplitFinalSlashInPlace(char*)+0x28>
c001299f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00129a2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00129a6:	eb 05                	jmp    c00129ad <CmSplitFinalSlashInPlace(char*)+0x2d>
c00129a8:	48                   	dec    eax
c00129a9:	eb e7                	jmp    c0012992 <CmSplitFinalSlashInPlace(char*)+0x12>
c00129ab:	31 c0                	xor    eax,eax
c00129ad:	83 c4 08             	add    esp,0x8
c00129b0:	5b                   	pop    ebx
c00129b1:	c3                   	ret    

c00129b2 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00129b2:	55                   	push   ebp
c00129b3:	57                   	push   edi
c00129b4:	56                   	push   esi
c00129b5:	53                   	push   ebx
c00129b6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00129bc:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00129c3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00129c6:	8d 43 01             	lea    eax,[ebx+0x1]
c00129c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129cd:	89 f0                	mov    eax,esi
c00129cf:	3c 40                	cmp    al,0x40
c00129d1:	75 1b                	jne    c00129ee <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00129d3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00129d6:	85 c0                	test   eax,eax
c00129d8:	74 08                	je     c00129e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00129da:	83 f8 3a             	cmp    eax,0x3a
c00129dd:	74 03                	je     c00129e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00129df:	43                   	inc    ebx
c00129e0:	eb f1                	jmp    c00129d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00129e2:	85 c0                	test   eax,eax
c00129e4:	0f 84 45 01 00 00    	je     c0012b2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00129ea:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00129ed:	43                   	inc    ebx
c00129ee:	50                   	push   eax
c00129ef:	6a 40                	push   0x40
c00129f1:	6a 00                	push   0x0
c00129f3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00129f7:	50                   	push   eax
c00129f8:	e8 f3 da fe ff       	call   c00004f0 <memset>
c00129fd:	89 f1                	mov    ecx,esi
c00129ff:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a06:	31 c0                	xor    eax,eax
c0012a08:	83 c4 10             	add    esp,0x10
c0012a0b:	0f be f1             	movsx  esi,cl
c0012a0e:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012a11:	85 d2                	test   edx,edx
c0012a13:	89 d1                	mov    ecx,edx
c0012a15:	0f 84 14 01 00 00    	je     c0012b2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a1b:	3d c7 00 00 00       	cmp    eax,0xc7
c0012a20:	0f 8f 09 01 00 00    	jg     c0012b2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a26:	83 fa 0a             	cmp    edx,0xa
c0012a29:	0f 85 f1 00 00 00    	jne    c0012b20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0012a2f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012a34:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012a39:	89 c8                	mov    eax,ecx
c0012a3b:	a8 df                	test   al,0xdf
c0012a3d:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012a42:	83 f9 23             	cmp    ecx,0x23
c0012a45:	0f 94 c2             	sete   dl
c0012a48:	89 d5                	mov    ebp,edx
c0012a4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a4e:	09 ea                	or     edx,ebp
c0012a50:	80 e2 01             	and    dl,0x1
c0012a53:	75 47                	jne    c0012a9c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012a55:	83 e8 09             	sub    eax,0x9
c0012a58:	3c 01                	cmp    al,0x1
c0012a5a:	76 40                	jbe    c0012a9c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012a5c:	83 f9 5b             	cmp    ecx,0x5b
c0012a5f:	75 42                	jne    c0012aa3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012a61:	83 fe 40             	cmp    esi,0x40
c0012a64:	75 36                	jne    c0012a9c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012a66:	83 ec 0c             	sub    esp,0xc
c0012a69:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012a6d:	55                   	push   ebp
c0012a6e:	e8 0d db fe ff       	call   c0000580 <strlen>
c0012a73:	83 c4 10             	add    esp,0x10
c0012a76:	83 f8 3f             	cmp    eax,0x3f
c0012a79:	0f 87 b0 00 00 00    	ja     c0012b2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a7f:	50                   	push   eax
c0012a80:	50                   	push   eax
c0012a81:	55                   	push   ebp
c0012a82:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012a86:	55                   	push   ebp
c0012a87:	e8 c4 db fe ff       	call   c0000650 <strcpy>
c0012a8c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012a8f:	e8 ec da fe ff       	call   c0000580 <strlen>
c0012a94:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012a99:	83 c4 10             	add    esp,0x10
c0012a9c:	31 d2                	xor    edx,edx
c0012a9e:	e9 84 00 00 00       	jmp    c0012b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0012aa3:	83 fe 40             	cmp    esi,0x40
c0012aa6:	74 06                	je     c0012aae <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0012aa8:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012aac:	eb 19                	jmp    c0012ac7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012aae:	51                   	push   ecx
c0012aaf:	51                   	push   ecx
c0012ab0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ab4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ab8:	50                   	push   eax
c0012ab9:	e8 c2 dc fe ff       	call   c0000780 <strcmp>
c0012abe:	83 c4 10             	add    esp,0x10
c0012ac1:	85 c0                	test   eax,eax
c0012ac3:	75 d7                	jne    c0012a9c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012ac5:	eb e1                	jmp    c0012aa8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0012ac7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012aca:	85 c9                	test   ecx,ecx
c0012acc:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012ad1:	83 f9 3d             	cmp    ecx,0x3d
c0012ad4:	0f 94 c0             	sete   al
c0012ad7:	89 c5                	mov    ebp,eax
c0012ad9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012add:	09 e8                	or     eax,ebp
c0012adf:	a8 01                	test   al,0x1
c0012ae1:	89 c5                	mov    ebp,eax
c0012ae3:	75 03                	jne    c0012ae8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0012ae5:	42                   	inc    edx
c0012ae6:	eb df                	jmp    c0012ac7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012ae8:	85 c9                	test   ecx,ecx
c0012aea:	74 43                	je     c0012b2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012aec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012af0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012af3:	52                   	push   edx
c0012af4:	52                   	push   edx
c0012af5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012af9:	50                   	push   eax
c0012afa:	53                   	push   ebx
c0012afb:	e8 80 dc fe ff       	call   c0000780 <strcmp>
c0012b00:	83 c4 10             	add    esp,0x10
c0012b03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b07:	85 c0                	test   eax,eax
c0012b09:	75 91                	jne    c0012a9c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012b0b:	50                   	push   eax
c0012b0c:	42                   	inc    edx
c0012b0d:	50                   	push   eax
c0012b0e:	52                   	push   edx
c0012b0f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012b16:	e8 35 db fe ff       	call   c0000650 <strcpy>
c0012b1b:	83 c4 10             	add    esp,0x10
c0012b1e:	eb 11                	jmp    c0012b31 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012b20:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012b24:	8d 50 01             	lea    edx,[eax+0x1]
c0012b27:	47                   	inc    edi
c0012b28:	89 d0                	mov    eax,edx
c0012b2a:	e9 df fe ff ff       	jmp    c0012a0e <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0012b2f:	31 ed                	xor    ebp,ebp
c0012b31:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b37:	89 e8                	mov    eax,ebp
c0012b39:	5b                   	pop    ebx
c0012b3a:	5e                   	pop    esi
c0012b3b:	5f                   	pop    edi
c0012b3c:	5d                   	pop    ebp
c0012b3d:	c3                   	ret    

c0012b3e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012b3e:	57                   	push   edi
c0012b3f:	56                   	push   esi
c0012b40:	53                   	push   ebx
c0012b41:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012b47:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012b4e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012b55:	53                   	push   ebx
c0012b56:	e8 25 da fe ff       	call   c0000580 <strlen>
c0012b5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b5e:	89 c7                	mov    edi,eax
c0012b60:	e8 1b da fe ff       	call   c0000580 <strlen>
c0012b65:	83 c4 10             	add    esp,0x10
c0012b68:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012b6c:	3d ff 00 00 00       	cmp    eax,0xff
c0012b71:	0f 87 d3 00 00 00    	ja     c0012c4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012b77:	57                   	push   edi
c0012b78:	57                   	push   edi
c0012b79:	56                   	push   esi
c0012b7a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012b7e:	56                   	push   esi
c0012b7f:	e8 cc da fe ff       	call   c0000650 <strcpy>
c0012b84:	58                   	pop    eax
c0012b85:	5a                   	pop    edx
c0012b86:	68 1b 11 02 c0       	push   0xc002111b
c0012b8b:	56                   	push   esi
c0012b8c:	e8 df dc fe ff       	call   c0000870 <strcat>
c0012b91:	59                   	pop    ecx
c0012b92:	5f                   	pop    edi
c0012b93:	53                   	push   ebx
c0012b94:	56                   	push   esi
c0012b95:	e8 d6 dc fe ff       	call   c0000870 <strcat>
c0012b9a:	58                   	pop    eax
c0012b9b:	5a                   	pop    edx
c0012b9c:	68 c7 0d 02 c0       	push   0xc0020dc7
c0012ba1:	56                   	push   esi
c0012ba2:	e8 c9 dc fe ff       	call   c0000870 <strcat>
c0012ba7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012bae:	e8 18 4f ff ff       	call   c0007acb <malloc>
c0012bb3:	83 c4 0c             	add    esp,0xc
c0012bb6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012bbc:	56                   	push   esi
c0012bbd:	50                   	push   eax
c0012bbe:	89 c3                	mov    ebx,eax
c0012bc0:	e8 35 83 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0012bc5:	83 c4 10             	add    esp,0x10
c0012bc8:	85 db                	test   ebx,ebx
c0012bca:	74 7e                	je     c0012c4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012bcc:	51                   	push   ecx
c0012bcd:	51                   	push   ecx
c0012bce:	6a 01                	push   0x1
c0012bd0:	53                   	push   ebx
c0012bd1:	e8 e0 83 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0012bd6:	83 c4 10             	add    esp,0x10
c0012bd9:	85 c0                	test   eax,eax
c0012bdb:	74 08                	je     c0012be5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012bdd:	83 ec 0c             	sub    esp,0xc
c0012be0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012be2:	53                   	push   ebx
c0012be3:	eb 5f                	jmp    c0012c44 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012be5:	52                   	push   edx
c0012be6:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012bea:	50                   	push   eax
c0012beb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012bef:	50                   	push   eax
c0012bf0:	53                   	push   ebx
c0012bf1:	e8 6c 86 ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c0012bf6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012bfa:	83 c4 10             	add    esp,0x10
c0012bfd:	89 c1                	mov    ecx,eax
c0012bff:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012c03:	74 31                	je     c0012c36 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c05:	83 ec 0c             	sub    esp,0xc
c0012c08:	50                   	push   eax
c0012c09:	e8 bd 4e ff ff       	call   c0007acb <malloc>
c0012c0e:	89 c6                	mov    esi,eax
c0012c10:	58                   	pop    eax
c0012c11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c13:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012c17:	52                   	push   edx
c0012c18:	56                   	push   esi
c0012c19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c21:	53                   	push   ebx
c0012c22:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c25:	83 c4 20             	add    esp,0x20
c0012c28:	85 c0                	test   eax,eax
c0012c2a:	75 0a                	jne    c0012c36 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c30:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012c34:	74 18                	je     c0012c4e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012c36:	83 ec 0c             	sub    esp,0xc
c0012c39:	53                   	push   ebx
c0012c3a:	e8 d5 83 ff ff       	call   c000b014 <File::close()>
c0012c3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c47:	83 c4 10             	add    esp,0x10
c0012c4a:	31 c0                	xor    eax,eax
c0012c4c:	eb 3b                	jmp    c0012c89 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012c4e:	83 ec 0c             	sub    esp,0xc
c0012c51:	53                   	push   ebx
c0012c52:	e8 bd 83 ff ff       	call   c000b014 <File::close()>
c0012c57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c5f:	83 c4 0c             	add    esp,0xc
c0012c62:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012c69:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012c70:	56                   	push   esi
c0012c71:	e8 3c fd ff ff       	call   c00129b2 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012c76:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c79:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012c7d:	e8 59 4e ff ff       	call   c0007adb <free>
c0012c82:	83 c4 10             	add    esp,0x10
c0012c85:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012c89:	81 c4 20 01 00 00    	add    esp,0x120
c0012c8f:	5b                   	pop    ebx
c0012c90:	5e                   	pop    esi
c0012c91:	5f                   	pop    edi
c0012c92:	c3                   	ret    

c0012c93 <Reg::getLine(char*, char*, char*)>:
c0012c93:	57                   	push   edi
c0012c94:	56                   	push   esi
c0012c95:	53                   	push   ebx
c0012c96:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012c9a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012c9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ca2:	57                   	push   edi
c0012ca3:	56                   	push   esi
c0012ca4:	53                   	push   ebx
c0012ca5:	68 cc 0d 02 c0       	push   0xc0020dcc
c0012caa:	e8 8f fe ff ff       	call   c0012b3e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012caf:	83 c4 10             	add    esp,0x10
c0012cb2:	84 c0                	test   al,al
c0012cb4:	75 10                	jne    c0012cc6 <Reg::getLine(char*, char*, char*)+0x33>
c0012cb6:	57                   	push   edi
c0012cb7:	56                   	push   esi
c0012cb8:	53                   	push   ebx
c0012cb9:	68 f1 0d 02 c0       	push   0xc0020df1
c0012cbe:	e8 7b fe ff ff       	call   c0012b3e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012cc3:	83 c4 10             	add    esp,0x10
c0012cc6:	5b                   	pop    ebx
c0012cc7:	5e                   	pop    esi
c0012cc8:	5f                   	pop    edi
c0012cc9:	c3                   	ret    

c0012cca <Reg::readInt(char*, char*, int*)>:
c0012cca:	55                   	push   ebp
c0012ccb:	57                   	push   edi
c0012ccc:	56                   	push   esi
c0012ccd:	53                   	push   ebx
c0012cce:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012cd4:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012cd8:	55                   	push   ebp
c0012cd9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012ce0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012ce7:	e8 a7 ff ff ff       	call   c0012c93 <Reg::getLine(char*, char*, char*)>
c0012cec:	83 c4 10             	add    esp,0x10
c0012cef:	84 c0                	test   al,al
c0012cf1:	0f 84 b6 00 00 00    	je     c0012dad <Reg::readInt(char*, char*, int*)+0xe3>
c0012cf7:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012cfc:	83 fa 2b             	cmp    edx,0x2b
c0012cff:	74 0c                	je     c0012d0d <Reg::readInt(char*, char*, int*)+0x43>
c0012d01:	83 fa 2d             	cmp    edx,0x2d
c0012d04:	75 0e                	jne    c0012d14 <Reg::readInt(char*, char*, int*)+0x4a>
c0012d06:	ba 01 00 00 00       	mov    edx,0x1
c0012d0b:	eb 0b                	jmp    c0012d18 <Reg::readInt(char*, char*, int*)+0x4e>
c0012d0d:	ba 01 00 00 00       	mov    edx,0x1
c0012d12:	eb 02                	jmp    c0012d16 <Reg::readInt(char*, char*, int*)+0x4c>
c0012d14:	31 d2                	xor    edx,edx
c0012d16:	31 c0                	xor    eax,eax
c0012d18:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012d1d:	be 0a 00 00 00       	mov    esi,0xa
c0012d22:	75 21                	jne    c0012d45 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d24:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012d29:	83 f9 78             	cmp    ecx,0x78
c0012d2c:	75 0a                	jne    c0012d38 <Reg::readInt(char*, char*, int*)+0x6e>
c0012d2e:	83 c2 02             	add    edx,0x2
c0012d31:	be 10 00 00 00       	mov    esi,0x10
c0012d36:	eb 0d                	jmp    c0012d45 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d38:	83 f9 62             	cmp    ecx,0x62
c0012d3b:	75 08                	jne    c0012d45 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d3d:	83 c2 02             	add    edx,0x2
c0012d40:	be 02 00 00 00       	mov    esi,0x2
c0012d45:	01 d5                	add    ebp,edx
c0012d47:	31 d2                	xor    edx,edx
c0012d49:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012d4d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012d51:	85 c9                	test   ecx,ecx
c0012d53:	0f 94 c3             	sete   bl
c0012d56:	83 f9 0d             	cmp    ecx,0xd
c0012d59:	89 df                	mov    edi,ebx
c0012d5b:	0f 94 c3             	sete   bl
c0012d5e:	09 df                	or     edi,ebx
c0012d60:	89 fb                	mov    ebx,edi
c0012d62:	83 e7 01             	and    edi,0x1
c0012d65:	75 35                	jne    c0012d9c <Reg::readInt(char*, char*, int*)+0xd2>
c0012d67:	0f af d6             	imul   edx,esi
c0012d6a:	83 fe 10             	cmp    esi,0x10
c0012d6d:	75 26                	jne    c0012d95 <Reg::readInt(char*, char*, int*)+0xcb>
c0012d6f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012d73:	83 ef 41             	sub    edi,0x41
c0012d76:	89 fb                	mov    ebx,edi
c0012d78:	80 fb 05             	cmp    bl,0x5
c0012d7b:	77 06                	ja     c0012d83 <Reg::readInt(char*, char*, int*)+0xb9>
c0012d7d:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012d81:	eb 16                	jmp    c0012d99 <Reg::readInt(char*, char*, int*)+0xcf>
c0012d83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012d87:	83 eb 61             	sub    ebx,0x61
c0012d8a:	80 fb 05             	cmp    bl,0x5
c0012d8d:	77 06                	ja     c0012d95 <Reg::readInt(char*, char*, int*)+0xcb>
c0012d8f:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012d93:	eb 04                	jmp    c0012d99 <Reg::readInt(char*, char*, int*)+0xcf>
c0012d95:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012d99:	45                   	inc    ebp
c0012d9a:	eb ad                	jmp    c0012d49 <Reg::readInt(char*, char*, int*)+0x7f>
c0012d9c:	84 c0                	test   al,al
c0012d9e:	74 02                	je     c0012da2 <Reg::readInt(char*, char*, int*)+0xd8>
c0012da0:	f7 da                	neg    edx
c0012da2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012da9:	89 10                	mov    DWORD PTR [eax],edx
c0012dab:	88 d8                	mov    al,bl
c0012dad:	81 c4 ec 00 00 00    	add    esp,0xec
c0012db3:	5b                   	pop    ebx
c0012db4:	5e                   	pop    esi
c0012db5:	5f                   	pop    edi
c0012db6:	5d                   	pop    ebp
c0012db7:	c3                   	ret    

c0012db8 <Reg::readString(char*, char*, char*, int)>:
c0012db8:	57                   	push   edi
c0012db9:	56                   	push   esi
c0012dba:	53                   	push   ebx
c0012dbb:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012dc1:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012dc5:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012dcc:	57                   	push   edi
c0012dcd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012dd4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012ddb:	e8 b3 fe ff ff       	call   c0012c93 <Reg::getLine(char*, char*, char*)>
c0012de0:	83 c4 10             	add    esp,0x10
c0012de3:	84 c0                	test   al,al
c0012de5:	89 c6                	mov    esi,eax
c0012de7:	74 44                	je     c0012e2d <Reg::readString(char*, char*, char*, int)+0x75>
c0012de9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012df0:	31 c0                	xor    eax,eax
c0012df2:	4a                   	dec    edx
c0012df3:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012df6:	84 c9                	test   cl,cl
c0012df8:	74 0f                	je     c0012e09 <Reg::readString(char*, char*, char*, int)+0x51>
c0012dfa:	39 c2                	cmp    edx,eax
c0012dfc:	7e 0b                	jle    c0012e09 <Reg::readString(char*, char*, char*, int)+0x51>
c0012dfe:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012e01:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012e06:	40                   	inc    eax
c0012e07:	eb ea                	jmp    c0012df3 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012e09:	83 ec 0c             	sub    esp,0xc
c0012e0c:	53                   	push   ebx
c0012e0d:	e8 6e d7 fe ff       	call   c0000580 <strlen>
c0012e12:	83 c4 10             	add    esp,0x10
c0012e15:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012e1a:	75 11                	jne    c0012e2d <Reg::readString(char*, char*, char*, int)+0x75>
c0012e1c:	83 ec 0c             	sub    esp,0xc
c0012e1f:	53                   	push   ebx
c0012e20:	e8 5b d7 fe ff       	call   c0000580 <strlen>
c0012e25:	83 c4 10             	add    esp,0x10
c0012e28:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e2d:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012e33:	89 f0                	mov    eax,esi
c0012e35:	5b                   	pop    ebx
c0012e36:	5e                   	pop    esi
c0012e37:	5f                   	pop    edi
c0012e38:	c3                   	ret    

c0012e39 <Reg::readBool(char*, char*, bool*)>:
c0012e39:	83 ec 20             	sub    esp,0x20
c0012e3c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e40:	50                   	push   eax
c0012e41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e49:	e8 7c fe ff ff       	call   c0012cca <Reg::readInt(char*, char*, int*)>
c0012e4e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012e52:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012e57:	0f 95 02             	setne  BYTE PTR [edx]
c0012e5a:	83 c4 2c             	add    esp,0x2c
c0012e5d:	c3                   	ret    

c0012e5e <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012e5e:	53                   	push   ebx
c0012e5f:	83 ec 1c             	sub    esp,0x1c
c0012e62:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012e66:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012e6a:	50                   	push   eax
c0012e6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e73:	e8 c1 ff ff ff       	call   c0012e39 <Reg::readBool(char*, char*, bool*)>
c0012e78:	83 c4 10             	add    esp,0x10
c0012e7b:	84 c0                	test   al,al
c0012e7d:	74 04                	je     c0012e83 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012e7f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012e83:	83 c4 18             	add    esp,0x18
c0012e86:	88 d8                	mov    al,bl
c0012e88:	5b                   	pop    ebx
c0012e89:	c3                   	ret    

c0012e8a <Reg::readIntWithDefault(char*, char*, int)>:
c0012e8a:	53                   	push   ebx
c0012e8b:	83 ec 1c             	sub    esp,0x1c
c0012e8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e92:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012e96:	50                   	push   eax
c0012e97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e9f:	e8 26 fe ff ff       	call   c0012cca <Reg::readInt(char*, char*, int*)>
c0012ea4:	83 c4 10             	add    esp,0x10
c0012ea7:	84 c0                	test   al,al
c0012ea9:	74 04                	je     c0012eaf <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012eab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012eaf:	83 c4 18             	add    esp,0x18
c0012eb2:	89 d8                	mov    eax,ebx
c0012eb4:	5b                   	pop    ebx
c0012eb5:	c3                   	ret    

c0012eb6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012eb6:	57                   	push   edi
c0012eb7:	56                   	push   esi
c0012eb8:	53                   	push   ebx
c0012eb9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ebd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012ec1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ec5:	56                   	push   esi
c0012ec6:	57                   	push   edi
c0012ec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ecf:	e8 e4 fe ff ff       	call   c0012db8 <Reg::readString(char*, char*, char*, int)>
c0012ed4:	83 c4 10             	add    esp,0x10
c0012ed7:	84 c0                	test   al,al
c0012ed9:	75 16                	jne    c0012ef1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012edb:	50                   	push   eax
c0012edc:	56                   	push   esi
c0012edd:	6a 00                	push   0x0
c0012edf:	57                   	push   edi
c0012ee0:	e8 0b d6 fe ff       	call   c00004f0 <memset>
c0012ee5:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012ee8:	89 de                	mov    esi,ebx
c0012eea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012eec:	83 c4 10             	add    esp,0x10
c0012eef:	89 df                	mov    edi,ebx
c0012ef1:	5b                   	pop    ebx
c0012ef2:	89 f8                	mov    eax,edi
c0012ef4:	5e                   	pop    esi
c0012ef5:	5f                   	pop    edi
c0012ef6:	c3                   	ret    

c0012ef7 <SysEject(regs*)>:
c0012ef7:	83 ec 0c             	sub    esp,0xc
c0012efa:	83 ca ff             	or     edx,0xffffffff
c0012efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f01:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012f04:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f09:	83 e9 41             	sub    ecx,0x41
c0012f0c:	83 f9 19             	cmp    ecx,0x19
c0012f0f:	77 18                	ja     c0012f29 <SysEject(regs*)+0x32>
c0012f11:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012f18:	85 c9                	test   ecx,ecx
c0012f1a:	74 0d                	je     c0012f29 <SysEject(regs*)+0x32>
c0012f1c:	83 ec 0c             	sub    esp,0xc
c0012f1f:	51                   	push   ecx
c0012f20:	e8 0f a2 ff ff       	call   c000d134 <LogicalDisk::eject()>
c0012f25:	83 c4 10             	add    esp,0x10
c0012f28:	99                   	cdq    
c0012f29:	83 c4 0c             	add    esp,0xc
c0012f2c:	c3                   	ret    

c0012f2d <SysExit(regs*)>:
c0012f2d:	83 ec 18             	sub    esp,0x18
c0012f30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f34:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f37:	e8 14 2a 00 00       	call   c0015950 <terminateTask(int)>
c0012f3c:	83 c8 ff             	or     eax,0xffffffff
c0012f3f:	83 c4 1c             	add    esp,0x1c
c0012f42:	89 c2                	mov    edx,eax
c0012f44:	c3                   	ret    

c0012f45 <SysGetCwd(regs*)>:
c0012f45:	83 ec 10             	sub    esp,0x10
c0012f48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f4c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012f4f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f57:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012f5a:	e8 6b 7d ff ff       	call   c000acca <Fs::getcwd(Process*, char*, int)>
c0012f5f:	83 c4 1c             	add    esp,0x1c
c0012f62:	99                   	cdq    
c0012f63:	c3                   	ret    

c0012f64 <SysGetPID(regs*)>:
c0012f64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f6e:	99                   	cdq    
c0012f6f:	c3                   	ret    

c0012f70 <SysGetRAMData(regs*)>:
c0012f70:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0012f7a:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0012f80:	99                   	cdq    
c0012f81:	f7 f9                	idiv   ecx
c0012f83:	c1 e0 18             	shl    eax,0x18
c0012f86:	09 c8                	or     eax,ecx
c0012f88:	99                   	cdq    
c0012f89:	c3                   	ret    

c0012f8a <SysGetVGAPtr(regs*)>:
c0012f8a:	55                   	push   ebp
c0012f8b:	57                   	push   edi
c0012f8c:	56                   	push   esi
c0012f8d:	53                   	push   ebx
c0012f8e:	83 ec 18             	sub    esp,0x18
c0012f91:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012f95:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012f98:	e8 7f 24 00 00       	call   c001541c <Thr::processFromPID(int)>
c0012f9d:	83 c4 10             	add    esp,0x10
c0012fa0:	89 c1                	mov    ecx,eax
c0012fa2:	b8 01 00 00 00       	mov    eax,0x1
c0012fa7:	85 c9                	test   ecx,ecx
c0012fa9:	74 57                	je     c0013002 <SysGetVGAPtr(regs*)+0x78>
c0012fab:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012faf:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012fb5:	74 0c                	je     c0012fc3 <SysGetVGAPtr(regs*)+0x39>
c0012fb7:	83 ec 0c             	sub    esp,0xc
c0012fba:	55                   	push   ebp
c0012fbb:	e8 99 57 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012fc6:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012fcb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012fce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fd0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012fd3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012fd6:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012fdc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012fdf:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0012fe2:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0012fe8:	50                   	push   eax
c0012fe9:	50                   	push   eax
c0012fea:	68 0c 0e 02 c0       	push   0xc0020e0c
c0012fef:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012ff2:	05 a8 0f 00 00       	add    eax,0xfa8
c0012ff7:	50                   	push   eax
c0012ff8:	e8 53 d6 fe ff       	call   c0000650 <strcpy>
c0012ffd:	83 c4 10             	add    esp,0x10
c0013000:	31 c0                	xor    eax,eax
c0013002:	83 c4 0c             	add    esp,0xc
c0013005:	31 d2                	xor    edx,edx
c0013007:	5b                   	pop    ebx
c0013008:	5e                   	pop    esi
c0013009:	5f                   	pop    edi
c001300a:	5d                   	pop    ebp
c001300b:	c3                   	ret    

c001300c <SysKill(regs*)>:
c001300c:	53                   	push   ebx
c001300d:	83 ec 08             	sub    esp,0x8
c0013010:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013014:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013018:	75 16                	jne    c0013030 <SysKill(regs*)+0x24>
c001301a:	83 ec 0c             	sub    esp,0xc
c001301d:	68 16 0e 02 c0       	push   0xc0020e16
c0013022:	e8 ae d7 ff ff       	call   c00107d5 <KePanic(char const*)>
c0013027:	83 c4 10             	add    esp,0x10
c001302a:	e9 89 00 00 00       	jmp    c00130b8 <SysKill(regs*)+0xac>
c001302f:	90                   	nop
c0013030:	83 ec 0c             	sub    esp,0xc
c0013033:	68 84 81 02 c0       	push   0xc0028184
c0013038:	e8 3f bb 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001303d:	8d 76 00             	lea    esi,[esi+0x0]
c0013040:	83 c4 10             	add    esp,0x10
c0013043:	85 c0                	test   eax,eax
c0013045:	74 19                	je     c0013060 <SysKill(regs*)+0x54>
c0013047:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001304a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001304d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001304f:	74 33                	je     c0013084 <SysKill(regs*)+0x78>
c0013051:	52                   	push   edx
c0013052:	52                   	push   edx
c0013053:	50                   	push   eax
c0013054:	68 84 81 02 c0       	push   0xc0028184
c0013059:	e8 3e be 00 00       	call   c001ee9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001305e:	eb e0                	jmp    c0013040 <SysKill(regs*)+0x34>
c0013060:	83 ec 0c             	sub    esp,0xc
c0013063:	68 78 81 02 c0       	push   0xc0028178
c0013068:	e8 0f bb 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001306d:	8d 76 00             	lea    esi,[esi+0x0]
c0013070:	83 c4 10             	add    esp,0x10
c0013073:	85 c0                	test   eax,eax
c0013075:	74 41                	je     c00130b8 <SysKill(regs*)+0xac>
c0013077:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001307a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001307d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001307f:	75 27                	jne    c00130a8 <SysKill(regs*)+0x9c>
c0013081:	8d 76 00             	lea    esi,[esi+0x0]
c0013084:	51                   	push   ecx
c0013085:	51                   	push   ecx
c0013086:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013089:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001308e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013091:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013097:	e8 d3 db ff ff       	call   c0010c6f <KeRaiseSignal(SigHandlerBlock*, int)>
c001309c:	83 c4 10             	add    esp,0x10
c001309f:	31 c0                	xor    eax,eax
c00130a1:	31 d2                	xor    edx,edx
c00130a3:	eb 1b                	jmp    c00130c0 <SysKill(regs*)+0xb4>
c00130a5:	8d 76 00             	lea    esi,[esi+0x0]
c00130a8:	52                   	push   edx
c00130a9:	52                   	push   edx
c00130aa:	50                   	push   eax
c00130ab:	68 78 81 02 c0       	push   0xc0028178
c00130b0:	e8 e7 bd 00 00       	call   c001ee9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130b5:	eb b9                	jmp    c0013070 <SysKill(regs*)+0x64>
c00130b7:	90                   	nop
c00130b8:	83 c8 ff             	or     eax,0xffffffff
c00130bb:	89 c2                	mov    edx,eax
c00130bd:	8d 76 00             	lea    esi,[esi+0x0]
c00130c0:	83 c4 08             	add    esp,0x8
c00130c3:	5b                   	pop    ebx
c00130c4:	c3                   	ret    

c00130c5 <SysLoadDLL(regs*)>:
c00130c5:	56                   	push   esi
c00130c6:	31 d2                	xor    edx,edx
c00130c8:	53                   	push   ebx
c00130c9:	b8 01 00 00 00       	mov    eax,0x1
c00130ce:	51                   	push   ecx
c00130cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00130d3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00130d7:	0f 84 8c 00 00 00    	je     c0013169 <SysLoadDLL(regs*)+0xa4>
c00130dd:	83 ec 0c             	sub    esp,0xc
c00130e0:	68 14 01 00 00       	push   0x114
c00130e5:	e8 e1 49 ff ff       	call   c0007acb <malloc>
c00130ea:	83 c4 0c             	add    esp,0xc
c00130ed:	89 c3                	mov    ebx,eax
c00130ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130f4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00130f7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00130fa:	53                   	push   ebx
c00130fb:	e8 fa 7d ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0013100:	83 c4 10             	add    esp,0x10
c0013103:	31 d2                	xor    edx,edx
c0013105:	85 db                	test   ebx,ebx
c0013107:	b8 02 00 00 00       	mov    eax,0x2
c001310c:	74 5b                	je     c0013169 <SysLoadDLL(regs*)+0xa4>
c001310e:	83 ec 0c             	sub    esp,0xc
c0013111:	53                   	push   ebx
c0013112:	e8 0d 81 ff ff       	call   c000b224 <File::exists()>
c0013117:	83 c4 10             	add    esp,0x10
c001311a:	84 c0                	test   al,al
c001311c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001311e:	75 11                	jne    c0013131 <SysLoadDLL(regs*)+0x6c>
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	53                   	push   ebx
c0013124:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013127:	83 c4 10             	add    esp,0x10
c001312a:	b8 03 00 00 00       	mov    eax,0x3
c001312f:	eb 36                	jmp    c0013167 <SysLoadDLL(regs*)+0xa2>
c0013131:	83 ec 0c             	sub    esp,0xc
c0013134:	53                   	push   ebx
c0013135:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013138:	58                   	pop    eax
c0013139:	5a                   	pop    edx
c001313a:	6a 00                	push   0x0
c001313c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001313f:	e8 20 14 00 00       	call   c0014564 <Thr::loadDLL(char const*, bool)>
c0013144:	83 c4 10             	add    esp,0x10
c0013147:	31 d2                	xor    edx,edx
c0013149:	89 c1                	mov    ecx,eax
c001314b:	b8 04 00 00 00       	mov    eax,0x4
c0013150:	85 c9                	test   ecx,ecx
c0013152:	74 15                	je     c0013169 <SysLoadDLL(regs*)+0xa4>
c0013154:	53                   	push   ebx
c0013155:	53                   	push   ebx
c0013156:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001315c:	51                   	push   ecx
c001315d:	e8 42 16 00 00       	call   c00147a4 <Thr::executeDLL(unsigned long, void*)>
c0013162:	83 c4 10             	add    esp,0x10
c0013165:	31 c0                	xor    eax,eax
c0013167:	31 d2                	xor    edx,edx
c0013169:	59                   	pop    ecx
c001316a:	5b                   	pop    ebx
c001316b:	5e                   	pop    esi
c001316c:	c3                   	ret    

c001316d <SysRead(regs*)>:
c001316d:	57                   	push   edi
c001316e:	56                   	push   esi
c001316f:	53                   	push   ebx
c0013170:	83 ec 10             	sub    esp,0x10
c0013173:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013177:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001317a:	83 f8 02             	cmp    eax,0x2
c001317d:	77 10                	ja     c001318f <SysRead(regs*)+0x22>
c001317f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013184:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013187:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001318d:	eb 0e                	jmp    c001319d <SysRead(regs*)+0x30>
c001318f:	83 ec 0c             	sub    esp,0xc
c0013192:	50                   	push   eax
c0013193:	e8 13 63 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	89 c1                	mov    ecx,eax
c001319d:	83 c8 ff             	or     eax,0xffffffff
c00131a0:	85 c9                	test   ecx,ecx
c00131a2:	89 c2                	mov    edx,eax
c00131a4:	74 28                	je     c00131ce <SysRead(regs*)+0x61>
c00131a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00131ae:	83 ec 0c             	sub    esp,0xc
c00131b1:	31 ff                	xor    edi,edi
c00131b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00131b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131b9:	52                   	push   edx
c00131ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00131bd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00131c0:	57                   	push   edi
c00131c1:	56                   	push   esi
c00131c2:	51                   	push   ecx
c00131c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00131c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00131ca:	83 c4 20             	add    esp,0x20
c00131cd:	99                   	cdq    
c00131ce:	83 c4 10             	add    esp,0x10
c00131d1:	5b                   	pop    ebx
c00131d2:	5e                   	pop    esi
c00131d3:	5f                   	pop    edi
c00131d4:	c3                   	ret    

c00131d5 <SysRegisterSignal(regs*)>:
c00131d5:	83 ec 18             	sub    esp,0x18
c00131d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131dc:	6a 00                	push   0x0
c00131de:	6a 00                	push   0x0
c00131e0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00131e3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00131e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131ee:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00131f4:	e8 40 da ff ff       	call   c0010c39 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00131f9:	83 c4 2c             	add    esp,0x2c
c00131fc:	99                   	cdq    
c00131fd:	c3                   	ret    

c00131fe <SysRegistryGetTypeFromPath(regs*)>:
c00131fe:	57                   	push   edi
c00131ff:	56                   	push   esi
c0013200:	53                   	push   ebx
c0013201:	81 ec 38 01 00 00    	sub    esp,0x138
c0013207:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001320e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013211:	68 37 0e 02 c0       	push   0xc0020e37
c0013216:	e8 36 77 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001321b:	5a                   	pop    edx
c001321c:	59                   	pop    ecx
c001321d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013220:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013223:	e8 34 f6 ff ff       	call   c001285c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013228:	5f                   	pop    edi
c0013229:	5a                   	pop    edx
c001322a:	89 c6                	mov    esi,eax
c001322c:	50                   	push   eax
c001322d:	68 57 0e 02 c0       	push   0xc0020e57
c0013232:	e8 1a 77 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0013237:	83 c4 10             	add    esp,0x10
c001323a:	85 f6                	test   esi,esi
c001323c:	74 28                	je     c0013266 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001323e:	50                   	push   eax
c001323f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013243:	57                   	push   edi
c0013244:	56                   	push   esi
c0013245:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013248:	e8 f4 f1 ff ff       	call   c0012441 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001324d:	83 c4 0c             	add    esp,0xc
c0013250:	57                   	push   edi
c0013251:	50                   	push   eax
c0013252:	89 c3                	mov    ebx,eax
c0013254:	68 5f 0e 02 c0       	push   0xc0020e5f
c0013259:	e8 f3 76 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001325e:	89 d8                	mov    eax,ebx
c0013260:	83 c4 10             	add    esp,0x10
c0013263:	99                   	cdq    
c0013264:	eb 05                	jmp    c001326b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013266:	83 c8 ff             	or     eax,0xffffffff
c0013269:	89 c2                	mov    edx,eax
c001326b:	81 c4 30 01 00 00    	add    esp,0x130
c0013271:	5b                   	pop    ebx
c0013272:	5e                   	pop    esi
c0013273:	5f                   	pop    edi
c0013274:	c3                   	ret    

c0013275 <SysRegistryReadExtent(regs*)>:
c0013275:	83 ec 1c             	sub    esp,0x1c
c0013278:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001327c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001327f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013282:	85 c0                	test   eax,eax
c0013284:	79 1f                	jns    c00132a5 <SysRegistryReadExtent(regs*)+0x30>
c0013286:	52                   	push   edx
c0013287:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001328c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013290:	52                   	push   edx
c0013291:	50                   	push   eax
c0013292:	51                   	push   ecx
c0013293:	e8 9b f0 ff ff       	call   c0012333 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013298:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001329c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132a0:	83 c4 10             	add    esp,0x10
c00132a3:	eb 14                	jmp    c00132b9 <SysRegistryReadExtent(regs*)+0x44>
c00132a5:	83 ec 04             	sub    esp,0x4
c00132a8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00132ab:	50                   	push   eax
c00132ac:	51                   	push   ecx
c00132ad:	e8 1f eb ff ff       	call   c0011dd1 <CmGetString(Reghive_Tag*, int, char*)>
c00132b2:	83 c4 10             	add    esp,0x10
c00132b5:	31 c0                	xor    eax,eax
c00132b7:	31 d2                	xor    edx,edx
c00132b9:	83 c4 1c             	add    esp,0x1c
c00132bc:	c3                   	ret    

c00132bd <SysRegistryPathToExtentLookup(regs*)>:
c00132bd:	53                   	push   ebx
c00132be:	83 ec 10             	sub    esp,0x10
c00132c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132c8:	68 75 0e 02 c0       	push   0xc0020e75
c00132cd:	e8 7f 76 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00132d2:	58                   	pop    eax
c00132d3:	5a                   	pop    edx
c00132d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132d7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132da:	e8 7d f5 ff ff       	call   c001285c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00132df:	83 c4 18             	add    esp,0x18
c00132e2:	5b                   	pop    ebx
c00132e3:	99                   	cdq    
c00132e4:	c3                   	ret    

c00132e5 <SysRegistryEnterDirectory(regs*)>:
c00132e5:	53                   	push   ebx
c00132e6:	83 ec 10             	sub    esp,0x10
c00132e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00132f0:	68 98 0e 02 c0       	push   0xc0020e98
c00132f5:	e8 57 76 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00132fa:	58                   	pop    eax
c00132fb:	5a                   	pop    edx
c00132fc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00132ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013302:	e8 41 eb ff ff       	call   c0011e48 <CmEnterDirectory(Reghive_Tag*, int)>
c0013307:	83 c4 18             	add    esp,0x18
c001330a:	5b                   	pop    ebx
c001330b:	99                   	cdq    
c001330c:	c3                   	ret    

c001330d <SysRegistryGetNext(regs*)>:
c001330d:	53                   	push   ebx
c001330e:	83 ec 10             	sub    esp,0x10
c0013311:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013315:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013318:	68 b6 0e 02 c0       	push   0xc0020eb6
c001331d:	e8 2f 76 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0013322:	58                   	pop    eax
c0013323:	5a                   	pop    edx
c0013324:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013327:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001332a:	e8 58 eb ff ff       	call   c0011e87 <CmGetNext(Reghive_Tag*, int)>
c001332f:	83 c4 18             	add    esp,0x18
c0013332:	5b                   	pop    ebx
c0013333:	99                   	cdq    
c0013334:	c3                   	ret    

c0013335 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013335:	57                   	push   edi
c0013336:	56                   	push   esi
c0013337:	53                   	push   ebx
c0013338:	81 ec 34 01 00 00    	sub    esp,0x134
c001333e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013345:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013349:	57                   	push   edi
c001334a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001334d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013350:	e8 ec f0 ff ff       	call   c0012441 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013355:	89 c3                	mov    ebx,eax
c0013357:	58                   	pop    eax
c0013358:	5a                   	pop    edx
c0013359:	57                   	push   edi
c001335a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001335d:	e8 ee d2 fe ff       	call   c0000650 <strcpy>
c0013362:	81 c4 40 01 00 00    	add    esp,0x140
c0013368:	89 d8                	mov    eax,ebx
c001336a:	5b                   	pop    ebx
c001336b:	99                   	cdq    
c001336c:	5e                   	pop    esi
c001336d:	5f                   	pop    edi
c001336e:	c3                   	ret    

c001336f <SysRegistryOpen(regs*)>:
c001336f:	83 ec 18             	sub    esp,0x18
c0013372:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013376:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013379:	e8 e3 e8 ff ff       	call   c0011c61 <CmOpen(char const*)>
c001337e:	83 c4 1c             	add    esp,0x1c
c0013381:	99                   	cdq    
c0013382:	c3                   	ret    

c0013383 <SysRegistryClose(regs*)>:
c0013383:	83 ec 18             	sub    esp,0x18
c0013386:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001338a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001338d:	e8 ed e9 ff ff       	call   c0011d7f <CmClose(Reghive_Tag*)>
c0013392:	31 c0                	xor    eax,eax
c0013394:	31 d2                	xor    edx,edx
c0013396:	83 c4 1c             	add    esp,0x1c
c0013399:	c3                   	ret    

c001339a <SysSbrk(regs*)>:
c001339a:	56                   	push   esi
c001339b:	53                   	push   ebx
c001339c:	50                   	push   eax
c001339d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133a9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00133ac:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00133b2:	85 db                	test   ebx,ebx
c00133b4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00133b7:	74 02                	je     c00133bb <SysSbrk(regs*)+0x21>
c00133b9:	79 06                	jns    c00133c1 <SysSbrk(regs*)+0x27>
c00133bb:	89 f0                	mov    eax,esi
c00133bd:	31 d2                	xor    edx,edx
c00133bf:	eb 2a                	jmp    c00133eb <SysSbrk(regs*)+0x51>
c00133c1:	83 c8 ff             	or     eax,0xffffffff
c00133c4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00133ca:	89 c2                	mov    edx,eax
c00133cc:	77 1d                	ja     c00133eb <SysSbrk(regs*)+0x51>
c00133ce:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00133d4:	50                   	push   eax
c00133d5:	68 07 0c 00 00       	push   0xc07
c00133da:	c1 ea 0c             	shr    edx,0xc
c00133dd:	52                   	push   edx
c00133de:	51                   	push   ecx
c00133df:	e8 0c 6a ff ff       	call   c0009df0 <VAS::allocatePages(int, int)>
c00133e4:	89 f0                	mov    eax,esi
c00133e6:	31 d2                	xor    edx,edx
c00133e8:	83 c4 10             	add    esp,0x10
c00133eb:	59                   	pop    ecx
c00133ec:	5b                   	pop    ebx
c00133ed:	5e                   	pop    esi
c00133ee:	c3                   	ret    

c00133ef <SysSetCwd(regs*)>:
c00133ef:	83 ec 14             	sub    esp,0x14
c00133f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133f6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133fe:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013401:	e8 bd 7e ff ff       	call   c000b2c3 <Fs::setcwd(Process*, char*)>
c0013406:	83 c4 1c             	add    esp,0x1c
c0013409:	99                   	cdq    
c001340a:	c3                   	ret    

c001340b <SysSetTime(regs*)>:
c001340b:	55                   	push   ebp
c001340c:	31 c9                	xor    ecx,ecx
c001340e:	57                   	push   edi
c001340f:	bd 0c 00 00 00       	mov    ebp,0xc
c0013414:	56                   	push   esi
c0013415:	53                   	push   ebx
c0013416:	31 db                	xor    ebx,ebx
c0013418:	83 ec 10             	sub    esp,0x10
c001341b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001341f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013422:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013425:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013428:	89 c2                	mov    edx,eax
c001342a:	c1 e8 05             	shr    eax,0x5
c001342d:	83 e2 1f             	and    edx,0x1f
c0013430:	42                   	inc    edx
c0013431:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013437:	c1 e7 10             	shl    edi,0x10
c001343a:	88 d1                	mov    cl,dl
c001343c:	31 d2                	xor    edx,edx
c001343e:	f7 f5                	div    ebp
c0013440:	89 dd                	mov    ebp,ebx
c0013442:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013448:	88 d5                	mov    ch,dl
c001344a:	31 d2                	xor    edx,edx
c001344c:	0f b7 c1             	movzx  eax,cx
c001344f:	09 f8                	or     eax,edi
c0013451:	bf 3c 00 00 00       	mov    edi,0x3c
c0013456:	89 c1                	mov    ecx,eax
c0013458:	89 f0                	mov    eax,esi
c001345a:	f7 f7                	div    edi
c001345c:	c1 e2 10             	shl    edx,0x10
c001345f:	09 d5                	or     ebp,edx
c0013461:	31 d2                	xor    edx,edx
c0013463:	f7 f7                	div    edi
c0013465:	89 eb                	mov    ebx,ebp
c0013467:	bf 10 0e 00 00       	mov    edi,0xe10
c001346c:	89 f0                	mov    eax,esi
c001346e:	88 d7                	mov    bh,dl
c0013470:	31 d2                	xor    edx,edx
c0013472:	f7 f7                	div    edi
c0013474:	bf 18 00 00 00       	mov    edi,0x18
c0013479:	31 d2                	xor    edx,edx
c001347b:	f7 f7                	div    edi
c001347d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0013482:	88 d3                	mov    bl,dl
c0013484:	53                   	push   ebx
c0013485:	51                   	push   ecx
c0013486:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001348c:	e8 37 86 ff ff       	call   c000bac8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013491:	83 c4 1c             	add    esp,0x1c
c0013494:	31 d2                	xor    edx,edx
c0013496:	5b                   	pop    ebx
c0013497:	5e                   	pop    esi
c0013498:	83 f0 01             	xor    eax,0x1
c001349b:	5f                   	pop    edi
c001349c:	0f b6 c0             	movzx  eax,al
c001349f:	5d                   	pop    ebp
c00134a0:	c3                   	ret    

c00134a1 <SysTimezone(regs*)>:
c00134a1:	53                   	push   ebx
c00134a2:	83 ec 08             	sub    esp,0x8
c00134a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134a9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00134ad:	75 17                	jne    c00134c6 <SysTimezone(regs*)+0x25>
c00134af:	83 ec 0c             	sub    esp,0xc
c00134b2:	68 cd 0e 02 c0       	push   0xc0020ecd
c00134b7:	e8 95 74 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00134bc:	83 c8 ff             	or     eax,0xffffffff
c00134bf:	83 c4 10             	add    esp,0x10
c00134c2:	89 c2                	mov    edx,eax
c00134c4:	eb 20                	jmp    c00134e6 <SysTimezone(regs*)+0x45>
c00134c6:	83 ec 0c             	sub    esp,0xc
c00134c9:	68 e2 0e 02 c0       	push   0xc0020ee2
c00134ce:	e8 7e 74 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00134d3:	58                   	pop    eax
c00134d4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00134d7:	e8 50 83 ff ff       	call   c000b82c <User::loadClockSettings(int)>
c00134dc:	83 c4 10             	add    esp,0x10
c00134df:	b8 01 00 00 00       	mov    eax,0x1
c00134e4:	31 d2                	xor    edx,edx
c00134e6:	83 c4 08             	add    esp,0x8
c00134e9:	5b                   	pop    ebx
c00134ea:	c3                   	ret    

c00134eb <SysWrite(regs*)>:
c00134eb:	57                   	push   edi
c00134ec:	56                   	push   esi
c00134ed:	53                   	push   ebx
c00134ee:	83 ec 10             	sub    esp,0x10
c00134f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00134f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00134f8:	83 f8 02             	cmp    eax,0x2
c00134fb:	77 10                	ja     c001350d <SysWrite(regs*)+0x22>
c00134fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013502:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013505:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001350b:	eb 0e                	jmp    c001351b <SysWrite(regs*)+0x30>
c001350d:	83 ec 0c             	sub    esp,0xc
c0013510:	50                   	push   eax
c0013511:	e8 95 5f ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0013516:	83 c4 10             	add    esp,0x10
c0013519:	89 c1                	mov    ecx,eax
c001351b:	83 c8 ff             	or     eax,0xffffffff
c001351e:	85 c9                	test   ecx,ecx
c0013520:	89 c2                	mov    edx,eax
c0013522:	74 28                	je     c001354c <SysWrite(regs*)+0x61>
c0013524:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001352c:	83 ec 0c             	sub    esp,0xc
c001352f:	31 ff                	xor    edi,edi
c0013531:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013535:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013537:	52                   	push   edx
c0013538:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001353b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001353e:	57                   	push   edi
c001353f:	56                   	push   esi
c0013540:	51                   	push   ecx
c0013541:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013544:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013548:	83 c4 20             	add    esp,0x20
c001354b:	99                   	cdq    
c001354c:	83 c4 10             	add    esp,0x10
c001354f:	5b                   	pop    ebx
c0013550:	5e                   	pop    esi
c0013551:	5f                   	pop    edi
c0013552:	c3                   	ret    

c0013553 <SysWsbe(regs*)>:
c0013553:	57                   	push   edi
c0013554:	b9 0b 00 00 00       	mov    ecx,0xb
c0013559:	56                   	push   esi
c001355a:	be 21 0f 02 c0       	mov    esi,0xc0020f21
c001355f:	53                   	push   ebx
c0013560:	83 ec 30             	sub    esp,0x30
c0013563:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013567:	fc                   	cld    
c0013568:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001356a:	83 ec 0c             	sub    esp,0xc
c001356d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013571:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013576:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013579:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001357f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013581:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013584:	57                   	push   edi
c0013585:	e8 f6 cf fe ff       	call   c0000580 <strlen>
c001358a:	5a                   	pop    edx
c001358b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001358f:	52                   	push   edx
c0013590:	31 d2                	xor    edx,edx
c0013592:	57                   	push   edi
c0013593:	52                   	push   edx
c0013594:	50                   	push   eax
c0013595:	56                   	push   esi
c0013596:	ff d3                	call   ebx
c0013598:	83 c4 14             	add    esp,0x14
c001359b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001359f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00135a2:	e8 a9 23 00 00       	call   c0015950 <terminateTask(int)>
c00135a7:	83 c4 40             	add    esp,0x40
c00135aa:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00135af:	5b                   	pop    ebx
c00135b0:	31 d2                	xor    edx,edx
c00135b2:	5e                   	pop    esi
c00135b3:	5f                   	pop    edi
c00135b4:	c3                   	ret    

c00135b5 <SysYield(regs*)>:
c00135b5:	83 ec 0c             	sub    esp,0xc
c00135b8:	fa                   	cli    
c00135b9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00135bf:	e8 0c 1a 00 00       	call   c0014fd0 <schedule()>
c00135c4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00135c9:	48                   	dec    eax
c00135ca:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00135cf:	75 01                	jne    c00135d2 <SysYield(regs*)+0x1d>
c00135d1:	fb                   	sti    
c00135d2:	31 c0                	xor    eax,eax
c00135d4:	31 d2                	xor    edx,edx
c00135d6:	83 c4 0c             	add    esp,0xc
c00135d9:	c3                   	ret    

c00135da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00135da:	55                   	push   ebp
c00135db:	57                   	push   edi
c00135dc:	56                   	push   esi
c00135dd:	53                   	push   ebx
c00135de:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00135e4:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00135ef:	74 3b                	je     c001362c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00135f1:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00135f9:	74 31                	je     c001362c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00135fb:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013603:	75 27                	jne    c001362c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013605:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001360c:	05 00 10 00 00       	add    eax,0x1000
c0013611:	89 c2                	mov    edx,eax
c0013613:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013618:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001361f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0013625:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001362c:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013633:	83 ec 0c             	sub    esp,0xc
c0013636:	6a 01                	push   0x1
c0013638:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001363e:	e8 c2 5f ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0013643:	83 c4 10             	add    esp,0x10
c0013646:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001364c:	89 c3                	mov    ebx,eax
c001364e:	0f 86 26 01 00 00    	jbe    c001377a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0013654:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001365c:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013663:	c1 ee 0c             	shr    esi,0xc
c0013666:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001366a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013671:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013678:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001367c:	29 ef                	sub    edi,ebp
c001367e:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013682:	0f 83 f9 00 00 00    	jae    c0013781 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013688:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001368e:	b8 00 10 00 00       	mov    eax,0x1000
c0013693:	0f 47 f8             	cmova  edi,eax
c0013696:	83 ec 0c             	sub    esp,0xc
c0013699:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00136a0:	31 d2                	xor    edx,edx
c00136a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00136a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00136a8:	50                   	push   eax
c00136a9:	8d 74 24 30          	lea    esi,[esp+0x30]
c00136ad:	56                   	push   esi
c00136ae:	52                   	push   edx
c00136af:	57                   	push   edi
c00136b0:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00136b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00136ba:	83 c4 20             	add    esp,0x20
c00136bd:	85 c0                	test   eax,eax
c00136bf:	75 06                	jne    c00136c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00136c1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00136c5:	74 13                	je     c00136da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00136c7:	83 ec 0c             	sub    esp,0xc
c00136ca:	53                   	push   ebx
c00136cb:	e8 47 62 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c00136d0:	83 c4 10             	add    esp,0x10
c00136d3:	31 c0                	xor    eax,eax
c00136d5:	e9 7c 01 00 00       	jmp    c0013856 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00136da:	fa                   	cli    
c00136db:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00136e1:	e8 f0 46 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c00136e6:	6a 07                	push   0x7
c00136e8:	53                   	push   ebx
c00136e9:	50                   	push   eax
c00136ea:	89 c7                	mov    edi,eax
c00136ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136f4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00136fa:	e8 e5 65 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00136ff:	83 c4 0c             	add    esp,0xc
c0013702:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013709:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001370f:	6a 00                	push   0x0
c0013711:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013716:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013719:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001371f:	e8 26 64 ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c0013724:	58                   	pop    eax
c0013725:	5a                   	pop    edx
c0013726:	68 07 0c 00 00       	push   0xc07
c001372b:	55                   	push   ebp
c001372c:	57                   	push   edi
c001372d:	89 df                	mov    edi,ebx
c001372f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013736:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001373c:	6a 00                	push   0x0
c001373e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013743:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013746:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001374c:	e8 75 69 ff ff       	call   c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013751:	b9 00 10 00 00       	mov    ecx,0x1000
c0013756:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013758:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001375d:	83 c4 20             	add    esp,0x20
c0013760:	48                   	dec    eax
c0013761:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013766:	85 c0                	test   eax,eax
c0013768:	75 01                	jne    c001376b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001376a:	fb                   	sti    
c001376b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001376f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013775:	e9 f0 fe ff ff       	jmp    c001366a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001377a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013781:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013788:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001378e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013794:	0f 86 ae 00 00 00    	jbe    c0013848 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001379a:	fa                   	cli    
c001379b:	51                   	push   ecx
c001379c:	31 ff                	xor    edi,edi
c001379e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00137a5:	c1 ee 0c             	shr    esi,0xc
c00137a8:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00137ae:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137b4:	6a 00                	push   0x0
c00137b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137be:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137c4:	e8 81 63 ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c00137c9:	83 c4 10             	add    esp,0x10
c00137cc:	e8 05 46 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c00137d1:	47                   	inc    edi
c00137d2:	6a 07                	push   0x7
c00137d4:	53                   	push   ebx
c00137d5:	50                   	push   eax
c00137d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137da:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00137e0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00137e3:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00137e9:	e8 f6 64 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00137ee:	58                   	pop    eax
c00137ef:	5a                   	pop    edx
c00137f0:	68 07 0c 00 00       	push   0xc07
c00137f5:	55                   	push   ebp
c00137f6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00137fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013800:	50                   	push   eax
c0013801:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013808:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001380e:	6a 00                	push   0x0
c0013810:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013815:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013818:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001381e:	e8 a3 68 ff ff       	call   c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013823:	83 c4 1c             	add    esp,0x1c
c0013826:	68 00 10 00 00       	push   0x1000
c001382b:	6a 00                	push   0x0
c001382d:	53                   	push   ebx
c001382e:	e8 bd cc fe ff       	call   c00004f0 <memset>
c0013833:	83 c4 10             	add    esp,0x10
c0013836:	39 fe                	cmp    esi,edi
c0013838:	77 92                	ja     c00137cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001383a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001383f:	48                   	dec    eax
c0013840:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013845:	75 01                	jne    c0013848 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013847:	fb                   	sti    
c0013848:	83 ec 0c             	sub    esp,0xc
c001384b:	53                   	push   ebx
c001384c:	e8 c6 60 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0013851:	83 c4 10             	add    esp,0x10
c0013854:	b0 01                	mov    al,0x1
c0013856:	81 c4 2c 10 00 00    	add    esp,0x102c
c001385c:	5b                   	pop    ebx
c001385d:	5e                   	pop    esi
c001385e:	5f                   	pop    edi
c001385f:	5d                   	pop    ebp
c0013860:	c3                   	ret    

c0013861 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013861:	55                   	push   ebp
c0013862:	57                   	push   edi
c0013863:	56                   	push   esi
c0013864:	53                   	push   ebx
c0013865:	83 ec 48             	sub    esp,0x48
c0013868:	68 14 01 00 00       	push   0x114
c001386d:	e8 59 42 ff ff       	call   c0007acb <malloc>
c0013872:	83 c4 0c             	add    esp,0xc
c0013875:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013879:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001387d:	89 c7                	mov    edi,eax
c001387f:	50                   	push   eax
c0013880:	e8 75 76 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0013885:	58                   	pop    eax
c0013886:	5a                   	pop    edx
c0013887:	6a 01                	push   0x1
c0013889:	57                   	push   edi
c001388a:	e8 27 77 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c001388f:	83 c4 10             	add    esp,0x10
c0013892:	85 c0                	test   eax,eax
c0013894:	0f 85 4c 01 00 00    	jne    c00139e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001389a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00138a2:	83 ec 0c             	sub    esp,0xc
c00138a5:	6a 34                	push   0x34
c00138a7:	e8 1f 42 ff ff       	call   c0007acb <malloc>
c00138ac:	89 c3                	mov    ebx,eax
c00138ae:	58                   	pop    eax
c00138af:	8b 07                	mov    eax,DWORD PTR [edi]
c00138b1:	8d 74 24 38          	lea    esi,[esp+0x38]
c00138b5:	56                   	push   esi
c00138b6:	53                   	push   ebx
c00138b7:	6a 00                	push   0x0
c00138b9:	6a 34                	push   0x34
c00138bb:	57                   	push   edi
c00138bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00138bf:	83 c4 20             	add    esp,0x20
c00138c2:	85 c0                	test   eax,eax
c00138c4:	0f 85 1c 01 00 00    	jne    c00139e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138ca:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00138d0:	0f 85 10 01 00 00    	jne    c00139e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00138d9:	85 c0                	test   eax,eax
c00138db:	0f 84 05 01 00 00    	je     c00139e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138e1:	31 d2                	xor    edx,edx
c00138e3:	55                   	push   ebp
c00138e4:	52                   	push   edx
c00138e5:	50                   	push   eax
c00138e6:	57                   	push   edi
c00138e7:	e8 88 77 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c00138ec:	83 c4 10             	add    esp,0x10
c00138ef:	85 c0                	test   eax,eax
c00138f1:	0f 85 ef 00 00 00    	jne    c00139e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138f7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00138fa:	83 ec 0c             	sub    esp,0xc
c00138fd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013901:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013905:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013909:	0f af c2             	imul   eax,edx
c001390c:	50                   	push   eax
c001390d:	e8 b9 41 ff ff       	call   c0007acb <malloc>
c0013912:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013914:	89 34 24             	mov    DWORD PTR [esp],esi
c0013917:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001391b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001391f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013923:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013927:	0f af c2             	imul   eax,edx
c001392a:	99                   	cdq    
c001392b:	52                   	push   edx
c001392c:	50                   	push   eax
c001392d:	57                   	push   edi
c001392e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013931:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013934:	83 c4 20             	add    esp,0x20
c0013937:	85 c0                	test   eax,eax
c0013939:	0f 84 a7 00 00 00    	je     c00139e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001393f:	31 d2                	xor    edx,edx
c0013941:	51                   	push   ecx
c0013942:	52                   	push   edx
c0013943:	50                   	push   eax
c0013944:	57                   	push   edi
c0013945:	e8 2a 77 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c001394a:	83 c4 10             	add    esp,0x10
c001394d:	85 c0                	test   eax,eax
c001394f:	0f 85 91 00 00 00    	jne    c00139e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013955:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013959:	83 ec 0c             	sub    esp,0xc
c001395c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013960:	0f af c2             	imul   eax,edx
c0013963:	50                   	push   eax
c0013964:	e8 62 41 ff ff       	call   c0007acb <malloc>
c0013969:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001396b:	89 34 24             	mov    DWORD PTR [esp],esi
c001396e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013976:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001397a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001397e:	0f af c2             	imul   eax,edx
c0013981:	99                   	cdq    
c0013982:	52                   	push   edx
c0013983:	50                   	push   eax
c0013984:	57                   	push   edi
c0013985:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013988:	83 c4 20             	add    esp,0x20
c001398b:	31 c9                	xor    ecx,ecx
c001398d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013995:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013999:	0f b7 e9             	movzx  ebp,cx
c001399c:	0f 83 86 00 00 00    	jae    c0013a28 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00139a2:	c1 e5 05             	shl    ebp,0x5
c00139a5:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00139a9:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00139ad:	75 73                	jne    c0013a22 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00139af:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00139b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00139b6:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00139b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139bd:	52                   	push   edx
c00139be:	31 d2                	xor    edx,edx
c00139c0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00139c3:	52                   	push   edx
c00139c4:	50                   	push   eax
c00139c5:	57                   	push   edi
c00139c6:	e8 a9 76 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c00139cb:	83 c4 10             	add    esp,0x10
c00139ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00139d2:	85 c0                	test   eax,eax
c00139d4:	74 17                	je     c00139ed <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c00139d6:	83 ec 0c             	sub    esp,0xc
c00139d9:	68 4d 0f 02 c0       	push   0xc0020f4d
c00139de:	e8 6e 6f ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00139e3:	83 c4 10             	add    esp,0x10
c00139e6:	31 c0                	xor    eax,eax
c00139e8:	e9 8b 00 00 00       	jmp    c0013a78 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c00139ed:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00139f1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00139f4:	83 ec 0c             	sub    esp,0xc
c00139f7:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c00139fa:	50                   	push   eax
c00139fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00139ff:	56                   	push   esi
c0013a00:	57                   	push   edi
c0013a01:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013a05:	e8 d0 fb ff ff       	call   c00135da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013a0a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013a0e:	83 c4 20             	add    esp,0x20
c0013a11:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013a15:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a19:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013a1e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013a22:	41                   	inc    ecx
c0013a23:	e9 6d ff ff ff       	jmp    c0013995 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013a28:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013a2c:	83 ec 0c             	sub    esp,0xc
c0013a2f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013a33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a37:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013a3d:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013a43:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a48:	05 00 10 00 00       	add    eax,0x1000
c0013a4d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a54:	e8 82 40 ff ff       	call   c0007adb <free>
c0013a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a5c:	e8 7a 40 ff ff       	call   c0007adb <free>
c0013a61:	58                   	pop    eax
c0013a62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a66:	e8 70 40 ff ff       	call   c0007adb <free>
c0013a6b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013a6e:	e8 a1 75 ff ff       	call   c000b014 <File::close()>
c0013a73:	83 c4 10             	add    esp,0x10
c0013a76:	b0 01                	mov    al,0x1
c0013a78:	83 c4 3c             	add    esp,0x3c
c0013a7b:	5b                   	pop    ebx
c0013a7c:	5e                   	pop    esi
c0013a7d:	5f                   	pop    edi
c0013a7e:	5d                   	pop    ebp
c0013a7f:	c3                   	ret    

c0013a80 <Thr::runtimeReferenceHelper()>:
c0013a80:	83 ec 18             	sub    esp,0x18
c0013a83:	68 55 0f 02 c0       	push   0xc0020f55
c0013a88:	e8 c4 6e ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0013a8d:	fa                   	cli    
c0013a8e:	83 c4 10             	add    esp,0x10
c0013a91:	eb fe                	jmp    c0013a91 <Thr::runtimeReferenceHelper()+0x11>

c0013a93 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013a93:	57                   	push   edi
c0013a94:	56                   	push   esi
c0013a95:	53                   	push   ebx
c0013a96:	31 db                	xor    ebx,ebx
c0013a98:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013a9e:	7e 3c                	jle    c0013adc <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013aa0:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013aa7:	31 ff                	xor    edi,edi
c0013aa9:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013ab0:	7e 27                	jle    c0013ad9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013ab2:	50                   	push   eax
c0013ab3:	50                   	push   eax
c0013ab4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ab8:	8b 06                	mov    eax,DWORD PTR [esi]
c0013aba:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013ac1:	50                   	push   eax
c0013ac2:	e8 b9 cc fe ff       	call   c0000780 <strcmp>
c0013ac7:	83 c4 10             	add    esp,0x10
c0013aca:	85 c0                	test   eax,eax
c0013acc:	75 05                	jne    c0013ad3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013ace:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013ad1:	eb 0b                	jmp    c0013ade <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013ad3:	83 c6 10             	add    esi,0x10
c0013ad6:	47                   	inc    edi
c0013ad7:	eb d0                	jmp    c0013aa9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013ad9:	43                   	inc    ebx
c0013ada:	eb bc                	jmp    c0013a98 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013adc:	31 c0                	xor    eax,eax
c0013ade:	5b                   	pop    ebx
c0013adf:	5e                   	pop    esi
c0013ae0:	5f                   	pop    edi
c0013ae1:	c3                   	ret    

c0013ae2 <Thr::loadKernelSymbolTable(char const*)>:
c0013ae2:	55                   	push   ebp
c0013ae3:	57                   	push   edi
c0013ae4:	56                   	push   esi
c0013ae5:	53                   	push   ebx
c0013ae6:	83 ec 68             	sub    esp,0x68
c0013ae9:	68 14 01 00 00       	push   0x114
c0013aee:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013af4:	e8 d2 3f ff ff       	call   c0007acb <malloc>
c0013af9:	83 c4 0c             	add    esp,0xc
c0013afc:	56                   	push   esi
c0013afd:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013b01:	89 c3                	mov    ebx,eax
c0013b03:	50                   	push   eax
c0013b04:	e8 f1 73 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0013b09:	5e                   	pop    esi
c0013b0a:	5f                   	pop    edi
c0013b0b:	6a 01                	push   0x1
c0013b0d:	53                   	push   ebx
c0013b0e:	e8 a3 74 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0013b13:	83 c4 10             	add    esp,0x10
c0013b16:	85 c0                	test   eax,eax
c0013b18:	74 0a                	je     c0013b24 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013b1a:	83 ec 0c             	sub    esp,0xc
c0013b1d:	68 77 0f 02 c0       	push   0xc0020f77
c0013b22:	eb 34                	jmp    c0013b58 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013b24:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013b2c:	83 ec 0c             	sub    esp,0xc
c0013b2f:	6a 34                	push   0x34
c0013b31:	e8 95 3f ff ff       	call   c0007acb <malloc>
c0013b36:	59                   	pop    ecx
c0013b37:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013b3b:	89 c7                	mov    edi,eax
c0013b3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b3f:	56                   	push   esi
c0013b40:	57                   	push   edi
c0013b41:	6a 00                	push   0x0
c0013b43:	6a 34                	push   0x34
c0013b45:	53                   	push   ebx
c0013b46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b49:	83 c4 20             	add    esp,0x20
c0013b4c:	85 c0                	test   eax,eax
c0013b4e:	74 17                	je     c0013b67 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013b50:	83 ec 0c             	sub    esp,0xc
c0013b53:	68 8e 0f 02 c0       	push   0xc0020f8e
c0013b58:	e8 78 cc ff ff       	call   c00107d5 <KePanic(char const*)>
c0013b5d:	83 c4 10             	add    esp,0x10
c0013b60:	31 c0                	xor    eax,eax
c0013b62:	e9 31 02 00 00       	jmp    c0013d98 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013b67:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013b6d:	75 e1                	jne    c0013b50 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013b6f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013b72:	85 c0                	test   eax,eax
c0013b74:	74 da                	je     c0013b50 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013b76:	52                   	push   edx
c0013b77:	31 d2                	xor    edx,edx
c0013b79:	52                   	push   edx
c0013b7a:	50                   	push   eax
c0013b7b:	53                   	push   ebx
c0013b7c:	e8 f3 74 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013b81:	83 c4 10             	add    esp,0x10
c0013b84:	85 c0                	test   eax,eax
c0013b86:	75 c8                	jne    c0013b50 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013b88:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013b8c:	83 ec 0c             	sub    esp,0xc
c0013b8f:	31 ed                	xor    ebp,ebp
c0013b91:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013b95:	0f af c2             	imul   eax,edx
c0013b98:	50                   	push   eax
c0013b99:	e8 2d 3f ff ff       	call   c0007acb <malloc>
c0013b9e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013ba0:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ba3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ba7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bab:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013baf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013bb3:	0f af c2             	imul   eax,edx
c0013bb6:	99                   	cdq    
c0013bb7:	52                   	push   edx
c0013bb8:	50                   	push   eax
c0013bb9:	53                   	push   ebx
c0013bba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013bbd:	83 c4 20             	add    esp,0x20
c0013bc0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013bc8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013bd0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013bd8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013be0:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013be4:	0f b7 f5             	movzx  esi,bp
c0013be7:	0f 83 a7 00 00 00    	jae    c0013c94 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013bed:	6b f6 28             	imul   esi,esi,0x28
c0013bf0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013bf4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013bf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013bfb:	50                   	push   eax
c0013bfc:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013c00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c04:	8b 16                	mov    edx,DWORD PTR [esi]
c0013c06:	6b c0 28             	imul   eax,eax,0x28
c0013c09:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013c0d:	89 d0                	mov    eax,edx
c0013c0f:	31 d2                	xor    edx,edx
c0013c11:	52                   	push   edx
c0013c12:	50                   	push   eax
c0013c13:	53                   	push   ebx
c0013c14:	e8 5b 74 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013c19:	83 c4 0c             	add    esp,0xc
c0013c1c:	6a 20                	push   0x20
c0013c1e:	6a 00                	push   0x0
c0013c20:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c24:	52                   	push   edx
c0013c25:	e8 c6 c8 fe ff       	call   c00004f0 <memset>
c0013c2a:	58                   	pop    eax
c0013c2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c2d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013c31:	51                   	push   ecx
c0013c32:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013c36:	52                   	push   edx
c0013c37:	6a 00                	push   0x0
c0013c39:	6a 1f                	push   0x1f
c0013c3b:	53                   	push   ebx
c0013c3c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c3f:	83 c4 18             	add    esp,0x18
c0013c42:	68 a5 0f 02 c0       	push   0xc0020fa5
c0013c47:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c4b:	52                   	push   edx
c0013c4c:	e8 2f cb fe ff       	call   c0000780 <strcmp>
c0013c51:	83 c4 10             	add    esp,0x10
c0013c54:	85 c0                	test   eax,eax
c0013c56:	75 0f                	jne    c0013c67 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013c58:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c67:	50                   	push   eax
c0013c68:	50                   	push   eax
c0013c69:	68 ad 0f 02 c0       	push   0xc0020fad
c0013c6e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013c72:	50                   	push   eax
c0013c73:	e8 08 cb fe ff       	call   c0000780 <strcmp>
c0013c78:	83 c4 10             	add    esp,0x10
c0013c7b:	85 c0                	test   eax,eax
c0013c7d:	75 0f                	jne    c0013c8e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013c7f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c8e:	45                   	inc    ebp
c0013c8f:	e9 4c ff ff ff       	jmp    c0013be0 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013c94:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013c99:	75 10                	jne    c0013cab <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013c9b:	83 ec 0c             	sub    esp,0xc
c0013c9e:	68 b5 0f 02 c0       	push   0xc0020fb5
c0013ca3:	e8 2d cb ff ff       	call   c00107d5 <KePanic(char const*)>
c0013ca8:	83 c4 10             	add    esp,0x10
c0013cab:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013cb0:	75 10                	jne    c0013cc2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013cb2:	83 ec 0c             	sub    esp,0xc
c0013cb5:	68 b5 0f 02 c0       	push   0xc0020fb5
c0013cba:	e8 16 cb ff ff       	call   c00107d5 <KePanic(char const*)>
c0013cbf:	83 c4 10             	add    esp,0x10
c0013cc2:	50                   	push   eax
c0013cc3:	31 d2                	xor    edx,edx
c0013cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc9:	52                   	push   edx
c0013cca:	50                   	push   eax
c0013ccb:	53                   	push   ebx
c0013ccc:	e8 a3 73 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013cd1:	5a                   	pop    edx
c0013cd2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013cd6:	e8 f0 3d ff ff       	call   c0007acb <malloc>
c0013cdb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013cdf:	31 c9                	xor    ecx,ecx
c0013ce1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ce5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ce7:	5e                   	pop    esi
c0013ce8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013cec:	55                   	push   ebp
c0013ced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cf1:	51                   	push   ecx
c0013cf2:	52                   	push   edx
c0013cf3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013cf7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013cfb:	53                   	push   ebx
c0013cfc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cff:	83 c4 14             	add    esp,0x14
c0013d02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d06:	e8 c0 3d ff ff       	call   c0007acb <malloc>
c0013d0b:	89 c6                	mov    esi,eax
c0013d0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d0f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d12:	56                   	push   esi
c0013d13:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013d17:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d1b:	51                   	push   ecx
c0013d1c:	52                   	push   edx
c0013d1d:	53                   	push   ebx
c0013d1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d25:	83 c4 1c             	add    esp,0x1c
c0013d28:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013d2e:	c1 e8 04             	shr    eax,0x4
c0013d31:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d3c:	31 d2                	xor    edx,edx
c0013d3e:	52                   	push   edx
c0013d3f:	50                   	push   eax
c0013d40:	53                   	push   ebx
c0013d41:	e8 2e 73 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013d46:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013d48:	31 d2                	xor    edx,edx
c0013d4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d4d:	56                   	push   esi
c0013d4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013d52:	52                   	push   edx
c0013d53:	50                   	push   eax
c0013d54:	53                   	push   ebx
c0013d55:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d58:	83 c4 14             	add    esp,0x14
c0013d5b:	53                   	push   ebx
c0013d5c:	e8 b3 72 ff ff       	call   c000b014 <File::close()>
c0013d61:	5d                   	pop    ebp
c0013d62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013d66:	e8 70 3d ff ff       	call   c0007adb <free>
c0013d6b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013d6e:	e8 68 3d ff ff       	call   c0007adb <free>
c0013d73:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d7c:	83 c4 10             	add    esp,0x10
c0013d7f:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013d86:	8d 50 01             	lea    edx,[eax+0x1]
c0013d89:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013d90:	b0 01                	mov    al,0x1
c0013d92:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013d98:	83 c4 5c             	add    esp,0x5c
c0013d9b:	5b                   	pop    ebx
c0013d9c:	5e                   	pop    esi
c0013d9d:	5f                   	pop    edi
c0013d9e:	5d                   	pop    ebp
c0013d9f:	c3                   	ret    

c0013da0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013da0:	55                   	push   ebp
c0013da1:	57                   	push   edi
c0013da2:	56                   	push   esi
c0013da3:	53                   	push   ebx
c0013da4:	81 ec 68 03 00 00    	sub    esp,0x368
c0013daa:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013db1:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013db7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0013dbb:	68 14 01 00 00       	push   0x114
c0013dc0:	e8 06 3d ff ff       	call   c0007acb <malloc>
c0013dc5:	83 c4 0c             	add    esp,0xc
c0013dc8:	56                   	push   esi
c0013dc9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013dd0:	50                   	push   eax
c0013dd1:	89 c3                	mov    ebx,eax
c0013dd3:	e8 22 71 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0013dd8:	5f                   	pop    edi
c0013dd9:	5d                   	pop    ebp
c0013dda:	6a 01                	push   0x1
c0013ddc:	53                   	push   ebx
c0013ddd:	e8 d4 71 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0013de2:	83 c4 10             	add    esp,0x10
c0013de5:	85 c0                	test   eax,eax
c0013de7:	0f 85 b3 06 00 00    	jne    c00144a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013ded:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013df5:	83 ec 0c             	sub    esp,0xc
c0013df8:	6a 34                	push   0x34
c0013dfa:	e8 cc 3c ff ff       	call   c0007acb <malloc>
c0013dff:	5e                   	pop    esi
c0013e00:	8d 74 24 54          	lea    esi,[esp+0x54]
c0013e04:	89 c5                	mov    ebp,eax
c0013e06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e08:	56                   	push   esi
c0013e09:	55                   	push   ebp
c0013e0a:	6a 00                	push   0x0
c0013e0c:	6a 34                	push   0x34
c0013e0e:	53                   	push   ebx
c0013e0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e12:	83 c4 20             	add    esp,0x20
c0013e15:	85 c0                	test   eax,eax
c0013e17:	0f 85 83 06 00 00    	jne    c00144a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e1d:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0013e24:	0f 85 76 06 00 00    	jne    c00144a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e2a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013e2d:	85 c0                	test   eax,eax
c0013e2f:	0f 84 6b 06 00 00    	je     c00144a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e35:	31 d2                	xor    edx,edx
c0013e37:	51                   	push   ecx
c0013e38:	52                   	push   edx
c0013e39:	50                   	push   eax
c0013e3a:	53                   	push   ebx
c0013e3b:	e8 34 72 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013e40:	83 c4 10             	add    esp,0x10
c0013e43:	85 c0                	test   eax,eax
c0013e45:	0f 85 55 06 00 00    	jne    c00144a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e4b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0013e4e:	83 ec 0c             	sub    esp,0xc
c0013e51:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013e55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013e59:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013e5d:	0f af c2             	imul   eax,edx
c0013e60:	50                   	push   eax
c0013e61:	e8 65 3c ff ff       	call   c0007acb <malloc>
c0013e66:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013e68:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e73:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013e77:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013e7b:	0f af c2             	imul   eax,edx
c0013e7e:	99                   	cdq    
c0013e7f:	52                   	push   edx
c0013e80:	50                   	push   eax
c0013e81:	53                   	push   ebx
c0013e82:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e85:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0013e88:	83 c4 20             	add    esp,0x20
c0013e8b:	85 c0                	test   eax,eax
c0013e8d:	0f 84 0d 06 00 00    	je     c00144a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e93:	52                   	push   edx
c0013e94:	31 d2                	xor    edx,edx
c0013e96:	52                   	push   edx
c0013e97:	50                   	push   eax
c0013e98:	53                   	push   ebx
c0013e99:	e8 d6 71 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013e9e:	83 c4 10             	add    esp,0x10
c0013ea1:	85 c0                	test   eax,eax
c0013ea3:	0f 85 f7 05 00 00    	jne    c00144a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013ea9:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013ead:	83 ec 0c             	sub    esp,0xc
c0013eb0:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013eb4:	0f af c2             	imul   eax,edx
c0013eb7:	50                   	push   eax
c0013eb8:	e8 0e 3c ff ff       	call   c0007acb <malloc>
c0013ebd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013ebf:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ec2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ec6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eca:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013ece:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013ed2:	0f af c2             	imul   eax,edx
c0013ed5:	99                   	cdq    
c0013ed6:	52                   	push   edx
c0013ed7:	50                   	push   eax
c0013ed8:	53                   	push   ebx
c0013ed9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013edc:	83 c4 20             	add    esp,0x20
c0013edf:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0013ee5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013ee8:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0013eec:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0013ef0:	73 78                	jae    c0013f6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0013ef2:	c1 e7 05             	shl    edi,0x5
c0013ef5:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0013ef9:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013efc:	75 63                	jne    c0013f61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0013efe:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013f01:	31 d2                	xor    edx,edx
c0013f03:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0013f06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f0a:	50                   	push   eax
c0013f0b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013f0e:	52                   	push   edx
c0013f0f:	50                   	push   eax
c0013f10:	53                   	push   ebx
c0013f11:	e8 5e 71 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013f16:	83 c4 10             	add    esp,0x10
c0013f19:	85 c0                	test   eax,eax
c0013f1b:	0f 85 7f 05 00 00    	jne    c00144a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013f21:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013f28:	83 ec 0c             	sub    esp,0xc
c0013f2b:	31 d2                	xor    edx,edx
c0013f2d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013f31:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f33:	01 c6                	add    esi,eax
c0013f35:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013f3c:	50                   	push   eax
c0013f3d:	56                   	push   esi
c0013f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f42:	52                   	push   edx
c0013f43:	50                   	push   eax
c0013f44:	53                   	push   ebx
c0013f45:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f48:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013f4b:	83 c4 1c             	add    esp,0x1c
c0013f4e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013f51:	50                   	push   eax
c0013f52:	6a 00                	push   0x0
c0013f54:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013f58:	56                   	push   esi
c0013f59:	e8 92 c5 fe ff       	call   c00004f0 <memset>
c0013f5e:	83 c4 10             	add    esp,0x10
c0013f61:	66 ff 04 24          	inc    WORD PTR [esp]
c0013f65:	e9 7b ff ff ff       	jmp    c0013ee5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0013f6a:	50                   	push   eax
c0013f6b:	68 00 01 00 00       	push   0x100
c0013f70:	6a 00                	push   0x0
c0013f72:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013f76:	50                   	push   eax
c0013f77:	e8 74 c5 fe ff       	call   c00004f0 <memset>
c0013f7c:	83 c4 0c             	add    esp,0xc
c0013f7f:	68 00 01 00 00       	push   0x100
c0013f84:	6a 00                	push   0x0
c0013f86:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013f8d:	50                   	push   eax
c0013f8e:	e8 5d c5 fe ff       	call   c00004f0 <memset>
c0013f93:	83 c4 10             	add    esp,0x10
c0013f96:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0013f9d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013fa4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013fac:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013fb4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fbc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013fc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fc8:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0013fcc:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0013fd1:	0f 83 16 01 00 00    	jae    c00140ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0013fd7:	6b ff 28             	imul   edi,edi,0x28
c0013fda:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0013fde:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0013fe1:	51                   	push   ecx
c0013fe2:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0013fe6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013fea:	8b 07                	mov    eax,DWORD PTR [edi]
c0013fec:	6b d2 28             	imul   edx,edx,0x28
c0013fef:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0013ff3:	31 d2                	xor    edx,edx
c0013ff5:	52                   	push   edx
c0013ff6:	50                   	push   eax
c0013ff7:	53                   	push   ebx
c0013ff8:	e8 77 70 ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0013ffd:	83 c4 0c             	add    esp,0xc
c0014000:	6a 20                	push   0x20
c0014002:	6a 00                	push   0x0
c0014004:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001400b:	51                   	push   ecx
c001400c:	e8 df c4 fe ff       	call   c00004f0 <memset>
c0014011:	58                   	pop    eax
c0014012:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014014:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014018:	52                   	push   edx
c0014019:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014020:	51                   	push   ecx
c0014021:	6a 00                	push   0x0
c0014023:	6a 1f                	push   0x1f
c0014025:	53                   	push   ebx
c0014026:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014029:	83 c4 1c             	add    esp,0x1c
c001402c:	6a 09                	push   0x9
c001402e:	68 cf 0f 02 c0       	push   0xc0020fcf
c0014033:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001403a:	51                   	push   ecx
c001403b:	e8 40 c3 fe ff       	call   c0000380 <memcmp>
c0014040:	83 c4 10             	add    esp,0x10
c0014043:	85 c0                	test   eax,eax
c0014045:	75 1a                	jne    c0014061 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014047:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001404a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001404d:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014051:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014054:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001405b:	89 d0                	mov    eax,edx
c001405d:	40                   	inc    eax
c001405e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014061:	52                   	push   edx
c0014062:	6a 09                	push   0x9
c0014064:	68 d9 0f 02 c0       	push   0xc0020fd9
c0014069:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014070:	50                   	push   eax
c0014071:	e8 0a c3 fe ff       	call   c0000380 <memcmp>
c0014076:	83 c4 10             	add    esp,0x10
c0014079:	85 c0                	test   eax,eax
c001407b:	75 1a                	jne    c0014097 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c001407d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014080:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014083:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014087:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001408a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014091:	89 d0                	mov    eax,edx
c0014093:	40                   	inc    eax
c0014094:	89 04 24             	mov    DWORD PTR [esp],eax
c0014097:	50                   	push   eax
c0014098:	50                   	push   eax
c0014099:	68 a5 0f 02 c0       	push   0xc0020fa5
c001409e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140a5:	50                   	push   eax
c00140a6:	e8 d5 c6 fe ff       	call   c0000780 <strcmp>
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	85 c0                	test   eax,eax
c00140b0:	75 0b                	jne    c00140bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c00140b2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00140b6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140bd:	50                   	push   eax
c00140be:	50                   	push   eax
c00140bf:	68 ad 0f 02 c0       	push   0xc0020fad
c00140c4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140cb:	50                   	push   eax
c00140cc:	e8 af c6 fe ff       	call   c0000780 <strcmp>
c00140d1:	83 c4 10             	add    esp,0x10
c00140d4:	85 c0                	test   eax,eax
c00140d6:	75 0b                	jne    c00140e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c00140d8:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c00140dc:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00140e3:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c00140e8:	e9 d7 fe ff ff       	jmp    c0013fc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c00140ed:	50                   	push   eax
c00140ee:	31 d2                	xor    edx,edx
c00140f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00140f4:	52                   	push   edx
c00140f5:	50                   	push   eax
c00140f6:	53                   	push   ebx
c00140f7:	e8 78 6f ff ff       	call   c000b074 <File::seek(unsigned long long)>
c00140fc:	58                   	pop    eax
c00140fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014101:	e8 c5 39 ff ff       	call   c0007acb <malloc>
c0014106:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014108:	31 d2                	xor    edx,edx
c001410a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001410e:	58                   	pop    eax
c001410f:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014113:	56                   	push   esi
c0014114:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001411c:	52                   	push   edx
c001411d:	50                   	push   eax
c001411e:	53                   	push   ebx
c001411f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014122:	83 c4 14             	add    esp,0x14
c0014125:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014129:	e8 9d 39 ff ff       	call   c0007acb <malloc>
c001412e:	31 d2                	xor    edx,edx
c0014130:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014134:	83 c4 0c             	add    esp,0xc
c0014137:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001413b:	52                   	push   edx
c001413c:	50                   	push   eax
c001413d:	53                   	push   ebx
c001413e:	e8 31 6f ff ff       	call   c000b074 <File::seek(unsigned long long)>
c0014143:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014145:	31 d2                	xor    edx,edx
c0014147:	89 34 24             	mov    DWORD PTR [esp],esi
c001414a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001414e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014152:	52                   	push   edx
c0014153:	50                   	push   eax
c0014154:	53                   	push   ebx
c0014155:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014158:	83 c4 20             	add    esp,0x20
c001415b:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014160:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014168:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001416c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014170:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014173:	0f 84 2b 03 00 00    	je     c00144a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014179:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014180:	31 d2                	xor    edx,edx
c0014182:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014186:	c1 e8 03             	shr    eax,0x3
c0014189:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001418d:	51                   	push   ecx
c001418e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014192:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014196:	52                   	push   edx
c0014197:	50                   	push   eax
c0014198:	53                   	push   ebx
c0014199:	e8 d6 6e ff ff       	call   c000b074 <File::seek(unsigned long long)>
c001419e:	5e                   	pop    esi
c001419f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141a3:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00141aa:	e8 1c 39 ff ff       	call   c0007acb <malloc>
c00141af:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141b1:	31 d2                	xor    edx,edx
c00141b3:	89 c7                	mov    edi,eax
c00141b5:	58                   	pop    eax
c00141b6:	8d 44 24 58          	lea    eax,[esp+0x58]
c00141ba:	50                   	push   eax
c00141bb:	57                   	push   edi
c00141bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141c0:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00141c7:	52                   	push   edx
c00141c8:	50                   	push   eax
c00141c9:	53                   	push   ebx
c00141ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141cd:	83 c4 20             	add    esp,0x20
c00141d0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00141d8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00141dc:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00141e0:	0f 8d a5 02 00 00    	jge    c001448b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00141e6:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00141eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141ef:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c00141f2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00141f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141fa:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00141fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014202:	c1 e8 08             	shr    eax,0x8
c0014205:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014209:	89 c2                	mov    edx,eax
c001420b:	c1 e2 04             	shl    edx,0x4
c001420e:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014212:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014215:	85 f6                	test   esi,esi
c0014217:	0f 85 cf 00 00 00    	jne    c00142ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001421d:	83 ec 0c             	sub    esp,0xc
c0014220:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014224:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014228:	03 02                	add    eax,DWORD PTR [edx]
c001422a:	50                   	push   eax
c001422b:	e8 63 f8 ff ff       	call   c0013a93 <Thr::getAddressOfKernelSymbol(char const*)>
c0014230:	83 c4 10             	add    esp,0x10
c0014233:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014237:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001423c:	85 c0                	test   eax,eax
c001423e:	89 c6                	mov    esi,eax
c0014240:	0f 85 a6 00 00 00    	jne    c00142ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014246:	83 ec 0c             	sub    esp,0xc
c0014249:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c001424d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014251:	03 02                	add    eax,DWORD PTR [edx]
c0014253:	50                   	push   eax
c0014254:	e8 67 c7 ff ff       	call   c00109c0 <KeResolveCompatibilitySymbol(char*)>
c0014259:	83 c4 10             	add    esp,0x10
c001425c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014260:	85 c0                	test   eax,eax
c0014262:	89 c6                	mov    esi,eax
c0014264:	0f 85 82 00 00 00    	jne    c00142ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001426a:	50                   	push   eax
c001426b:	50                   	push   eax
c001426c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014270:	03 02                	add    eax,DWORD PTR [edx]
c0014272:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014276:	50                   	push   eax
c0014277:	68 e3 0f 02 c0       	push   0xc0020fe3
c001427c:	e8 d0 66 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0014281:	58                   	pop    eax
c0014282:	5a                   	pop    edx
c0014283:	68 fd 0f 02 c0       	push   0xc0020ffd
c0014288:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001428f:	51                   	push   ecx
c0014290:	e8 bb c3 fe ff       	call   c0000650 <strcpy>
c0014295:	59                   	pop    ecx
c0014296:	58                   	pop    eax
c0014297:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001429b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001429f:	03 02                	add    eax,DWORD PTR [edx]
c00142a1:	50                   	push   eax
c00142a2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00142a9:	51                   	push   ecx
c00142aa:	e8 c1 c5 fe ff       	call   c0000870 <strcat>
c00142af:	58                   	pop    eax
c00142b0:	5a                   	pop    edx
c00142b1:	68 93 10 02 c0       	push   0xc0021093
c00142b6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00142bd:	51                   	push   ecx
c00142be:	e8 ad c5 fe ff       	call   c0000870 <strcat>
c00142c3:	83 c4 10             	add    esp,0x10
c00142c6:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00142cb:	0f 84 77 01 00 00    	je     c0014448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00142d1:	83 ec 0c             	sub    esp,0xc
c00142d4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00142db:	51                   	push   ecx
c00142dc:	e8 f4 c4 ff ff       	call   c00107d5 <KePanic(char const*)>
c00142e1:	83 c4 10             	add    esp,0x10
c00142e4:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00142e8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00142ec:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00142f1:	83 f8 01             	cmp    eax,0x1
c00142f4:	0f 85 9b 00 00 00    	jne    c0014395 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00142fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142fe:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014305:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0014309:	01 c8                	add    eax,ecx
c001430b:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014313:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014317:	8b 00                	mov    eax,DWORD PTR [eax]
c0014319:	0f 94 c2             	sete   dl
c001431c:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014324:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c0014329:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c001432d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014332:	0f b6 d2             	movzx  edx,dl
c0014335:	74 41                	je     c0014378 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014337:	8d 0c 30             	lea    ecx,[eax+esi*1]
c001433a:	85 d2                	test   edx,edx
c001433c:	75 15                	jne    c0014353 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001433e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014342:	66 83 f8 0c          	cmp    ax,0xc
c0014346:	76 05                	jbe    c001434d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014348:	b8 0c 00 00 00       	mov    eax,0xc
c001434d:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014351:	76 37                	jbe    c001438a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014353:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014358:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001435c:	0f 84 e6 00 00 00    	je     c0014448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014362:	83 ec 0c             	sub    esp,0xc
c0014365:	68 14 10 02 c0       	push   0xc0021014
c001436a:	e8 66 c4 ff ff       	call   c00107d5 <KePanic(char const*)>
c001436f:	83 c4 10             	add    esp,0x10
c0014372:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014376:	eb 12                	jmp    c001438a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014378:	01 c1                	add    ecx,eax
c001437a:	85 d2                	test   edx,edx
c001437c:	75 0c                	jne    c001438a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001437e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014382:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014386:	77 02                	ja     c001438a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014388:	01 f1                	add    ecx,esi
c001438a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001438e:	89 08                	mov    DWORD PTR [eax],ecx
c0014390:	e9 ed 00 00 00       	jmp    c0014482 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014395:	83 f8 02             	cmp    eax,0x2
c0014398:	0f 85 81 00 00 00    	jne    c001441f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001439e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00143a5:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00143a9:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00143ad:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00143b5:	74 21                	je     c00143d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00143b7:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00143bf:	74 17                	je     c00143d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00143c1:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c00143c5:	ba 0a 00 00 00       	mov    edx,0xa
c00143ca:	83 f9 0e             	cmp    ecx,0xe
c00143cd:	77 03                	ja     c00143d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c00143cf:	8d 51 fc             	lea    edx,[ecx-0x4]
c00143d2:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c00143d6:	76 1f                	jbe    c00143f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c00143d8:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00143dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00143e1:	74 65                	je     c0014448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00143e3:	83 ec 0c             	sub    esp,0xc
c00143e6:	68 30 10 02 c0       	push   0xc0021030
c00143eb:	e8 e5 c3 ff ff       	call   c00107d5 <KePanic(char const*)>
c00143f0:	83 c4 10             	add    esp,0x10
c00143f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143f7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00143fe:	74 15                	je     c0014415 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014400:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014404:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001440b:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001440f:	01 d1                	add    ecx,edx
c0014411:	01 ce                	add    esi,ecx
c0014413:	eb 06                	jmp    c001441b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014415:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014419:	01 d6                	add    esi,edx
c001441b:	89 30                	mov    DWORD PTR [eax],esi
c001441d:	eb 63                	jmp    c0014482 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001441f:	56                   	push   esi
c0014420:	56                   	push   esi
c0014421:	50                   	push   eax
c0014422:	68 4c 10 02 c0       	push   0xc002104c
c0014427:	e8 25 65 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001442c:	83 c4 10             	add    esp,0x10
c001442f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014434:	74 12                	je     c0014448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014436:	83 ec 0c             	sub    esp,0xc
c0014439:	68 57 10 02 c0       	push   0xc0021057
c001443e:	e8 92 c3 ff ff       	call   c00107d5 <KePanic(char const*)>
c0014443:	83 c4 10             	add    esp,0x10
c0014446:	eb 3a                	jmp    c0014482 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014448:	83 ec 0c             	sub    esp,0xc
c001444b:	53                   	push   ebx
c001444c:	e8 c3 6b ff ff       	call   c000b014 <File::close()>
c0014451:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014453:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014456:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014459:	89 3c 24             	mov    DWORD PTR [esp],edi
c001445c:	e8 7a 36 ff ff       	call   c0007adb <free>
c0014461:	59                   	pop    ecx
c0014462:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014466:	e8 70 36 ff ff       	call   c0007adb <free>
c001446b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001446e:	e8 68 36 ff ff       	call   c0007adb <free>
c0014473:	5b                   	pop    ebx
c0014474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014478:	e8 5e 36 ff ff       	call   c0007adb <free>
c001447d:	83 c4 10             	add    esp,0x10
c0014480:	eb 1e                	jmp    c00144a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014482:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014486:	e9 4d fd ff ff       	jmp    c00141d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c001448b:	83 ec 0c             	sub    esp,0xc
c001448e:	57                   	push   edi
c001448f:	e8 47 36 ff ff       	call   c0007adb <free>
c0014494:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014498:	83 c4 10             	add    esp,0x10
c001449b:	e9 cc fc ff ff       	jmp    c001416c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00144a0:	31 c0                	xor    eax,eax
c00144a2:	eb 32                	jmp    c00144d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00144a4:	83 ec 0c             	sub    esp,0xc
c00144a7:	53                   	push   ebx
c00144a8:	e8 67 6b ff ff       	call   c000b014 <File::close()>
c00144ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144b5:	58                   	pop    eax
c00144b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00144ba:	e8 1c 36 ff ff       	call   c0007adb <free>
c00144bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144c2:	e8 14 36 ff ff       	call   c0007adb <free>
c00144c7:	5a                   	pop    edx
c00144c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144cc:	e8 0a 36 ff ff       	call   c0007adb <free>
c00144d1:	83 c4 10             	add    esp,0x10
c00144d4:	b0 01                	mov    al,0x1
c00144d6:	81 c4 5c 03 00 00    	add    esp,0x35c
c00144dc:	5b                   	pop    ebx
c00144dd:	5e                   	pop    esi
c00144de:	5f                   	pop    edi
c00144df:	5d                   	pop    ebp
c00144e0:	c3                   	ret    

c00144e1 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00144e1:	56                   	push   esi
c00144e2:	31 d2                	xor    edx,edx
c00144e4:	53                   	push   ebx
c00144e5:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c00144eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00144ef:	39 d3                	cmp    ebx,edx
c00144f1:	7e 1b                	jle    c001450e <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00144f3:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c00144fa:	39 c8                	cmp    eax,ecx
c00144fc:	77 0d                	ja     c001450b <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00144fe:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c0014505:	01 c6                	add    esi,eax
c0014507:	39 ce                	cmp    esi,ecx
c0014509:	77 05                	ja     c0014510 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001450b:	42                   	inc    edx
c001450c:	eb e1                	jmp    c00144ef <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001450e:	31 c0                	xor    eax,eax
c0014510:	5b                   	pop    ebx
c0014511:	5e                   	pop    esi
c0014512:	c3                   	ret    

c0014513 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014513:	53                   	push   ebx
c0014514:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c001451a:	31 c0                	xor    eax,eax
c001451c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014520:	39 c3                	cmp    ebx,eax
c0014522:	7e 22                	jle    c0014546 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014524:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c001452b:	39 ca                	cmp    edx,ecx
c001452d:	77 14                	ja     c0014543 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001452f:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c0014536:	39 ca                	cmp    edx,ecx
c0014538:	76 09                	jbe    c0014543 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001453a:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c0014541:	eb 05                	jmp    c0014548 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014543:	40                   	inc    eax
c0014544:	eb da                	jmp    c0014520 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014546:	31 c0                	xor    eax,eax
c0014548:	5b                   	pop    ebx
c0014549:	c3                   	ret    

c001454a <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001454a:	53                   	push   ebx
c001454b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001454f:	53                   	push   ebx
c0014550:	e8 8c ff ff ff       	call   c00144e1 <Thr::getDriverBaseFromAddress(unsigned long)>
c0014555:	5a                   	pop    edx
c0014556:	31 d2                	xor    edx,edx
c0014558:	85 c0                	test   eax,eax
c001455a:	74 04                	je     c0014560 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001455c:	89 da                	mov    edx,ebx
c001455e:	29 c2                	sub    edx,eax
c0014560:	5b                   	pop    ebx
c0014561:	89 d0                	mov    eax,edx
c0014563:	c3                   	ret    

c0014564 <Thr::loadDLL(char const*, bool)>:
c0014564:	55                   	push   ebp
c0014565:	57                   	push   edi
c0014566:	56                   	push   esi
c0014567:	53                   	push   ebx
c0014568:	81 ec 34 01 00 00    	sub    esp,0x134
c001456e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014575:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001457c:	56                   	push   esi
c001457d:	68 6f 10 02 c0       	push   0xc002106f
c0014582:	e8 ca 63 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0014587:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001458e:	e8 38 35 ff ff       	call   c0007acb <malloc>
c0014593:	83 c4 0c             	add    esp,0xc
c0014596:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001459c:	56                   	push   esi
c001459d:	50                   	push   eax
c001459e:	89 c3                	mov    ebx,eax
c00145a0:	e8 55 69 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c00145a5:	83 c4 10             	add    esp,0x10
c00145a8:	85 db                	test   ebx,ebx
c00145aa:	75 3c                	jne    c00145e8 <Thr::loadDLL(char const*, bool)+0x84>
c00145ac:	89 e8                	mov    eax,ebp
c00145ae:	84 c0                	test   al,al
c00145b0:	0f 84 e1 01 00 00    	je     c0014797 <Thr::loadDLL(char const*, bool)+0x233>
c00145b6:	50                   	push   eax
c00145b7:	50                   	push   eax
c00145b8:	68 80 10 02 c0       	push   0xc0021080
c00145bd:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00145c1:	57                   	push   edi
c00145c2:	e8 89 c0 fe ff       	call   c0000650 <strcpy>
c00145c7:	58                   	pop    eax
c00145c8:	5a                   	pop    edx
c00145c9:	56                   	push   esi
c00145ca:	57                   	push   edi
c00145cb:	e8 a0 c2 fe ff       	call   c0000870 <strcat>
c00145d0:	59                   	pop    ecx
c00145d1:	58                   	pop    eax
c00145d2:	68 93 10 02 c0       	push   0xc0021093
c00145d7:	57                   	push   edi
c00145d8:	e8 93 c2 fe ff       	call   c0000870 <strcat>
c00145dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145e0:	e8 f0 c1 ff ff       	call   c00107d5 <KePanic(char const*)>
c00145e5:	83 c4 10             	add    esp,0x10
c00145e8:	50                   	push   eax
c00145e9:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00145ed:	50                   	push   eax
c00145ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c00145f2:	50                   	push   eax
c00145f3:	53                   	push   ebx
c00145f4:	e8 69 6c ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c00145f9:	83 c4 10             	add    esp,0x10
c00145fc:	85 db                	test   ebx,ebx
c00145fe:	74 0c                	je     c001460c <Thr::loadDLL(char const*, bool)+0xa8>
c0014600:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014602:	83 ec 0c             	sub    esp,0xc
c0014605:	53                   	push   ebx
c0014606:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014609:	83 c4 10             	add    esp,0x10
c001460c:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014611:	75 0a                	jne    c001461d <Thr::loadDLL(char const*, bool)+0xb9>
c0014613:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014617:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001461b:	75 3e                	jne    c001465b <Thr::loadDLL(char const*, bool)+0xf7>
c001461d:	89 e8                	mov    eax,ebp
c001461f:	31 db                	xor    ebx,ebx
c0014621:	84 c0                	test   al,al
c0014623:	0f 84 6e 01 00 00    	je     c0014797 <Thr::loadDLL(char const*, bool)+0x233>
c0014629:	50                   	push   eax
c001462a:	50                   	push   eax
c001462b:	68 80 10 02 c0       	push   0xc0021080
c0014630:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014634:	53                   	push   ebx
c0014635:	e8 16 c0 fe ff       	call   c0000650 <strcpy>
c001463a:	58                   	pop    eax
c001463b:	5a                   	pop    edx
c001463c:	56                   	push   esi
c001463d:	53                   	push   ebx
c001463e:	e8 2d c2 fe ff       	call   c0000870 <strcat>
c0014643:	59                   	pop    ecx
c0014644:	5f                   	pop    edi
c0014645:	68 93 10 02 c0       	push   0xc0021093
c001464a:	53                   	push   ebx
c001464b:	e8 20 c2 fe ff       	call   c0000870 <strcat>
c0014650:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014653:	e8 7d c1 ff ff       	call   c00107d5 <KePanic(char const*)>
c0014658:	83 c4 10             	add    esp,0x10
c001465b:	53                   	push   ebx
c001465c:	6a 03                	push   0x3
c001465e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014662:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014666:	05 ff 0f 00 00       	add    eax,0xfff
c001466b:	83 d2 00             	adc    edx,0x0
c001466e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014672:	50                   	push   eax
c0014673:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014679:	e8 72 57 ff ff       	call   c0009df0 <VAS::allocatePages(int, int)>
c001467e:	89 c3                	mov    ebx,eax
c0014680:	58                   	pop    eax
c0014681:	5a                   	pop    edx
c0014682:	53                   	push   ebx
c0014683:	68 12 fc 01 c0       	push   0xc001fc12
c0014688:	e8 c4 62 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001468d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014690:	e8 eb be fe ff       	call   c0000580 <strlen>
c0014695:	8b 3d a0 79 02 c0    	mov    edi,DWORD PTR ds:0xc00279a0
c001469b:	40                   	inc    eax
c001469c:	89 04 24             	mov    DWORD PTR [esp],eax
c001469f:	e8 27 34 ff ff       	call   c0007acb <malloc>
c00146a4:	59                   	pop    ecx
c00146a5:	89 04 bd c0 7d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8240],eax
c00146ac:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00146b1:	5f                   	pop    edi
c00146b2:	56                   	push   esi
c00146b3:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c00146ba:	e8 91 bf fe ff       	call   c0000650 <strcpy>
c00146bf:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00146c4:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c00146cb:	8d 50 01             	lea    edx,[eax+0x1]
c00146ce:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c00146d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00146d8:	83 c4 0c             	add    esp,0xc
c00146db:	6a 01                	push   0x1
c00146dd:	53                   	push   ebx
c00146de:	56                   	push   esi
c00146df:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c00146e6:	e8 b5 f6 ff ff       	call   c0013da0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	89 c7                	mov    edi,eax
c00146f0:	89 f8                	mov    eax,edi
c00146f2:	83 f0 01             	xor    eax,0x1
c00146f5:	84 c0                	test   al,al
c00146f7:	74 18                	je     c0014711 <Thr::loadDLL(char const*, bool)+0x1ad>
c00146f9:	89 e8                	mov    eax,ebp
c00146fb:	84 c0                	test   al,al
c00146fd:	74 12                	je     c0014711 <Thr::loadDLL(char const*, bool)+0x1ad>
c00146ff:	83 ec 0c             	sub    esp,0xc
c0014702:	68 95 10 02 c0       	push   0xc0021095
c0014707:	e8 c9 c0 ff ff       	call   c00107d5 <KePanic(char const*)>
c001470c:	83 c4 10             	add    esp,0x10
c001470f:	eb 06                	jmp    c0014717 <Thr::loadDLL(char const*, bool)+0x1b3>
c0014711:	89 f8                	mov    eax,edi
c0014713:	84 c0                	test   al,al
c0014715:	75 10                	jne    c0014727 <Thr::loadDLL(char const*, bool)+0x1c3>
c0014717:	83 ec 0c             	sub    esp,0xc
c001471a:	68 b4 10 02 c0       	push   0xc00210b4
c001471f:	e8 b1 c0 ff ff       	call   c00107d5 <KePanic(char const*)>
c0014724:	83 c4 10             	add    esp,0x10
c0014727:	31 f6                	xor    esi,esi
c0014729:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001472d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014731:	05 ff 0f 00 00       	add    eax,0xfff
c0014736:	83 d2 00             	adc    edx,0x0
c0014739:	0f ac d0 0c          	shrd   eax,edx,0xc
c001473d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014741:	c1 ea 0c             	shr    edx,0xc
c0014744:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014748:	ba 00 00 00 00       	mov    edx,0x0
c001474d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0014751:	89 d0                	mov    eax,edx
c0014753:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014757:	73 32                	jae    c001478b <Thr::loadDLL(char const*, bool)+0x227>
c0014759:	50                   	push   eax
c001475a:	50                   	push   eax
c001475b:	89 f0                	mov    eax,esi
c001475d:	c1 e0 0c             	shl    eax,0xc
c0014760:	01 d8                	add    eax,ebx
c0014762:	50                   	push   eax
c0014763:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014769:	e8 8a 51 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c001476e:	83 c4 10             	add    esp,0x10
c0014771:	8b 00                	mov    eax,DWORD PTR [eax]
c0014773:	a8 60                	test   al,0x60
c0014775:	75 11                	jne    c0014788 <Thr::loadDLL(char const*, bool)+0x224>
c0014777:	83 ec 0c             	sub    esp,0xc
c001477a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001477f:	50                   	push   eax
c0014780:	e8 e8 35 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0014785:	83 c4 10             	add    esp,0x10
c0014788:	46                   	inc    esi
c0014789:	eb 9e                	jmp    c0014729 <Thr::loadDLL(char const*, bool)+0x1c5>
c001478b:	89 f8                	mov    eax,edi
c001478d:	84 c0                	test   al,al
c001478f:	b8 00 00 00 00       	mov    eax,0x0
c0014794:	0f 44 d8             	cmove  ebx,eax
c0014797:	81 c4 2c 01 00 00    	add    esp,0x12c
c001479d:	89 d8                	mov    eax,ebx
c001479f:	5b                   	pop    ebx
c00147a0:	5e                   	pop    esi
c00147a1:	5f                   	pop    edi
c00147a2:	5d                   	pop    ebp
c00147a3:	c3                   	ret    

c00147a4 <Thr::executeDLL(unsigned long, void*)>:
c00147a4:	56                   	push   esi
c00147a5:	53                   	push   ebx
c00147a6:	52                   	push   edx
c00147a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00147af:	85 db                	test   ebx,ebx
c00147b1:	75 10                	jne    c00147c3 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00147b3:	83 ec 0c             	sub    esp,0xc
c00147b6:	68 d0 10 02 c0       	push   0xc00210d0
c00147bb:	e8 15 c0 ff ff       	call   c00107d5 <KePanic(char const*)>
c00147c0:	83 c4 10             	add    esp,0x10
c00147c3:	50                   	push   eax
c00147c4:	50                   	push   eax
c00147c5:	53                   	push   ebx
c00147c6:	68 fa 10 02 c0       	push   0xc00210fa
c00147cb:	e8 81 61 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00147d0:	89 d8                	mov    eax,ebx
c00147d2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00147d6:	83 c4 14             	add    esp,0x14
c00147d9:	5b                   	pop    ebx
c00147da:	5e                   	pop    esi
c00147db:	ff e0                	jmp    eax
c00147dd:	66 90                	xchg   ax,ax
c00147df:	90                   	nop

c00147e0 <userModeEntryPoint(void*)>:
c00147e0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00147e5:	83 e8 01             	sub    eax,0x1
c00147e8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00147ed:	75 01                	jne    c00147f0 <userModeEntryPoint(void*)+0x10>
c00147ef:	fb                   	sti    
c00147f0:	fb                   	sti    
c00147f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147f9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00147ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014803:	e9 37 ba fe ff       	jmp    c000023f <goToUsermode>

c0014808 <changeTSS>:
c0014808:	83 ec 14             	sub    esp,0x14
c001480b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014810:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014813:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014818:	c1 e2 15             	shl    edx,0x15
c001481b:	29 d0                	sub    eax,edx
c001481d:	50                   	push   eax
c001481e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014823:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014829:	05 7c 11 00 00       	add    eax,0x117c
c001482e:	50                   	push   eax
c001482f:	e8 18 47 ff ff       	call   c0008f4c <TSS::setESP(unsigned long)>
c0014834:	83 c4 1c             	add    esp,0x1c
c0014837:	c3                   	ret    

c0014838 <switchToThread(ThreadControlBlock*)>:
c0014838:	57                   	push   edi
c0014839:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c001483f:	56                   	push   esi
c0014840:	53                   	push   ebx
c0014841:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014845:	85 c9                	test   ecx,ecx
c0014847:	0f 85 8b 00 00 00    	jne    c00148d8 <switchToThread(ThreadControlBlock*)+0xa0>
c001484d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014851:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014857:	74 7b                	je     c00148d4 <switchToThread(ThreadControlBlock*)+0x9c>
c0014859:	b8 00 04 00 00       	mov    eax,0x400
c001485e:	29 d0                	sub    eax,edx
c0014860:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014863:	d1 f8                	sar    eax,1
c0014865:	01 d0                	add    eax,edx
c0014867:	90                   	nop
c0014868:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001486b:	e8 7b 27 00 00       	call   c0016feb <HalQueryPerformanceCounter()>
c0014870:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c0014875:	89 c6                	mov    esi,eax
c0014877:	89 d7                	mov    edi,edx
c0014879:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c001487f:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c0014884:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c001488a:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014890:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c0014896:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001489c:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c00148a2:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c00148a8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00148ab:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00148ae:	01 c6                	add    esi,eax
c00148b0:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00148b3:	11 d7                	adc    edi,edx
c00148b5:	83 ec 0c             	sub    esp,0xc
c00148b8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00148bb:	53                   	push   ebx
c00148bc:	e8 b6 b9 fe ff       	call   c0000277 <switchToThreadASM>
c00148c1:	0f 20 c0             	mov    eax,cr0
c00148c4:	83 c8 08             	or     eax,0x8
c00148c7:	0f 22 c0             	mov    cr0,eax
c00148ca:	83 c4 10             	add    esp,0x10
c00148cd:	5b                   	pop    ebx
c00148ce:	5e                   	pop    esi
c00148cf:	5f                   	pop    edi
c00148d0:	c3                   	ret    
c00148d1:	8d 76 00             	lea    esi,[esi+0x0]
c00148d4:	31 c0                	xor    eax,eax
c00148d6:	eb 90                	jmp    c0014868 <switchToThread(ThreadControlBlock*)+0x30>
c00148d8:	5b                   	pop    ebx
c00148d9:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c00148e3:	5e                   	pop    esi
c00148e4:	5f                   	pop    edi
c00148e5:	c3                   	ret    
c00148e6:	66 90                	xchg   ax,ax

c00148e8 <Process::addArgs(char**)>:
c00148e8:	57                   	push   edi
c00148e9:	56                   	push   esi
c00148ea:	53                   	push   ebx
c00148eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00148ef:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00148f3:	85 f6                	test   esi,esi
c00148f5:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00148ff:	74 4f                	je     c0014950 <Process::addArgs(char**)+0x68>
c0014901:	8b 06                	mov    eax,DWORD PTR [esi]
c0014903:	85 c0                	test   eax,eax
c0014905:	74 49                	je     c0014950 <Process::addArgs(char**)+0x68>
c0014907:	31 db                	xor    ebx,ebx
c0014909:	8d 76 00             	lea    esi,[esi+0x0]
c001490c:	83 ec 0c             	sub    esp,0xc
c001490f:	50                   	push   eax
c0014910:	e8 6b bc fe ff       	call   c0000580 <strlen>
c0014915:	83 c0 01             	add    eax,0x1
c0014918:	89 04 24             	mov    DWORD PTR [esp],eax
c001491b:	e8 ab 31 ff ff       	call   c0007acb <malloc>
c0014920:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0014927:	5a                   	pop    edx
c0014928:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001492b:	83 c3 01             	add    ebx,0x1
c001492e:	59                   	pop    ecx
c001492f:	52                   	push   edx
c0014930:	50                   	push   eax
c0014931:	e8 1a bd fe ff       	call   c0000650 <strcpy>
c0014936:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c001493c:	83 c4 10             	add    esp,0x10
c001493f:	83 c1 01             	add    ecx,0x1
c0014942:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0014948:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001494b:	85 c0                	test   eax,eax
c001494d:	75 bd                	jne    c001490c <Process::addArgs(char**)+0x24>
c001494f:	90                   	nop
c0014950:	5b                   	pop    ebx
c0014951:	5e                   	pop    esi
c0014952:	5f                   	pop    edi
c0014953:	c3                   	ret    

c0014954 <Process::Process(char const*, Process*, char**)>:
c0014954:	56                   	push   esi
c0014955:	53                   	push   ebx
c0014956:	83 ec 14             	sub    esp,0x14
c0014959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001495d:	05 0c 02 00 00       	add    eax,0x20c
c0014962:	bb 07 00 00 00       	mov    ebx,0x7
c0014967:	89 c6                	mov    esi,eax
c0014969:	8d 76 00             	lea    esi,[esi+0x0]
c001496c:	85 db                	test   ebx,ebx
c001496e:	78 14                	js     c0014984 <Process::Process(char const*, Process*, char**)+0x30>
c0014970:	83 ec 0c             	sub    esp,0xc
c0014973:	56                   	push   esi
c0014974:	e8 2f a5 00 00       	call   c001eea8 <ThreadControlBlock::ThreadControlBlock()>
c0014979:	83 c4 10             	add    esp,0x10
c001497c:	83 c6 5f             	add    esi,0x5f
c001497f:	83 eb 01             	sub    ebx,0x1
c0014982:	eb e8                	jmp    c001496c <Process::Process(char const*, Process*, char**)+0x18>
c0014984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014988:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001498f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014993:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001499a:	83 ec 0c             	sub    esp,0xc
c001499d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149a1:	e8 24 bc ff ff       	call   c00105ca <Krnl::newProcessEnv(Process*)>
c00149a6:	83 c4 10             	add    esp,0x10
c00149a9:	89 c2                	mov    edx,eax
c00149ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149af:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00149b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149b9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00149c2:	a1 c0 22 02 c0       	mov    eax,ds:0xc00222c0
c00149c7:	8d 50 01             	lea    edx,[eax+0x1]
c00149ca:	89 15 c0 22 02 c0    	mov    DWORD PTR ds:0xc00222c0,edx
c00149d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149d4:	89 02                	mov    DWORD PTR [edx],eax
c00149d6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00149de:	83 ec 0c             	sub    esp,0xc
c00149e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00149e5:	e8 e1 30 ff ff       	call   c0007acb <malloc>
c00149ea:	83 c4 10             	add    esp,0x10
c00149ed:	89 c3                	mov    ebx,eax
c00149ef:	83 ec 08             	sub    esp,0x8
c00149f2:	6a 00                	push   0x0
c00149f4:	53                   	push   ebx
c00149f5:	e8 bc 57 ff ff       	call   c000a1b6 <VAS::VAS(bool)>
c00149fa:	83 c4 10             	add    esp,0x10
c00149fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a01:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014a07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a0b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a1d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014a23:	e8 c6 c1 ff ff       	call   c0010bee <KeInitSignals()>
c0014a28:	89 c2                	mov    edx,eax
c0014a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a2e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014a34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a3e:	85 c0                	test   eax,eax
c0014a40:	74 42                	je     c0014a84 <Process::Process(char const*, Process*, char**)+0x130>
c0014a42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a46:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a4c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014a52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a56:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014a5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a60:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a66:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014a6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a70:	05 0c 01 00 00       	add    eax,0x10c
c0014a75:	83 ec 08             	sub    esp,0x8
c0014a78:	52                   	push   edx
c0014a79:	50                   	push   eax
c0014a7a:	e8 d1 bb fe ff       	call   c0000650 <strcpy>
c0014a7f:	83 c4 10             	add    esp,0x10
c0014a82:	eb 64                	jmp    c0014ae8 <Process::Process(char const*, Process*, char**)+0x194>
c0014a84:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014a8c:	83 ec 0c             	sub    esp,0xc
c0014a8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a93:	e8 33 30 ff ff       	call   c0007acb <malloc>
c0014a98:	83 c4 10             	add    esp,0x10
c0014a9b:	89 c3                	mov    ebx,eax
c0014a9d:	83 ec 08             	sub    esp,0x8
c0014aa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014aa4:	53                   	push   ebx
c0014aa5:	e8 ac 41 ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0014aaa:	83 c4 10             	add    esp,0x10
c0014aad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ab1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014ab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014abb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ac1:	83 ec 0c             	sub    esp,0xc
c0014ac4:	50                   	push   eax
c0014ac5:	e8 3a 3a ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0014aca:	83 c4 10             	add    esp,0x10
c0014acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad1:	05 0c 01 00 00       	add    eax,0x10c
c0014ad6:	83 ec 08             	sub    esp,0x8
c0014ad9:	68 19 11 02 c0       	push   0xc0021119
c0014ade:	50                   	push   eax
c0014adf:	e8 6c bb fe ff       	call   c0000650 <strcpy>
c0014ae4:	83 c4 10             	add    esp,0x10
c0014ae7:	90                   	nop
c0014ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aec:	83 c0 0c             	add    eax,0xc
c0014aef:	83 ec 08             	sub    esp,0x8
c0014af2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014af6:	50                   	push   eax
c0014af7:	e8 54 bb fe ff       	call   c0000650 <strcpy>
c0014afc:	83 c4 10             	add    esp,0x10
c0014aff:	83 ec 08             	sub    esp,0x8
c0014b02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014b06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b0a:	e8 d9 fd ff ff       	call   c00148e8 <Process::addArgs(char**)>
c0014b0f:	83 c4 10             	add    esp,0x10
c0014b12:	83 ec 08             	sub    esp,0x8
c0014b15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b1d:	e8 3f ed ff ff       	call   c0013861 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014b22:	83 c4 10             	add    esp,0x10
c0014b25:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014b29:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014b2d:	83 f0 01             	xor    eax,0x1
c0014b30:	88 c2                	mov    dl,al
c0014b32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b36:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014b3c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014b41:	83 ec 04             	sub    esp,0x4
c0014b44:	50                   	push   eax
c0014b45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b49:	68 70 11 02 c0       	push   0xc0021170
c0014b4e:	e8 fe 5d ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0014b53:	83 c4 10             	add    esp,0x10
c0014b56:	90                   	nop
c0014b57:	83 c4 14             	add    esp,0x14
c0014b5a:	5b                   	pop    ebx
c0014b5b:	5e                   	pop    esi
c0014b5c:	c3                   	ret    
c0014b5d:	90                   	nop
c0014b5e:	66 90                	xchg   ax,ax

c0014b60 <Process::Process(bool, char const*, Process*, char**)>:
c0014b60:	56                   	push   esi
c0014b61:	53                   	push   ebx
c0014b62:	83 ec 24             	sub    esp,0x24
c0014b65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b69:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014b6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b71:	05 0c 02 00 00       	add    eax,0x20c
c0014b76:	bb 07 00 00 00       	mov    ebx,0x7
c0014b7b:	89 c6                	mov    esi,eax
c0014b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014b80:	85 db                	test   ebx,ebx
c0014b82:	78 14                	js     c0014b98 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014b84:	83 ec 0c             	sub    esp,0xc
c0014b87:	56                   	push   esi
c0014b88:	e8 1b a3 00 00       	call   c001eea8 <ThreadControlBlock::ThreadControlBlock()>
c0014b8d:	83 c4 10             	add    esp,0x10
c0014b90:	83 c6 5f             	add    esi,0x5f
c0014b93:	83 eb 01             	sub    ebx,0x1
c0014b96:	eb e8                	jmp    c0014b80 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014b98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b9c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014ba3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ba7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014bae:	83 ec 0c             	sub    esp,0xc
c0014bb1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014bb5:	e8 10 ba ff ff       	call   c00105ca <Krnl::newProcessEnv(Process*)>
c0014bba:	83 c4 10             	add    esp,0x10
c0014bbd:	89 c2                	mov    edx,eax
c0014bbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bc3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014bc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bcd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014bd6:	a1 c0 22 02 c0       	mov    eax,ds:0xc00222c0
c0014bdb:	8d 50 01             	lea    edx,[eax+0x1]
c0014bde:	89 15 c0 22 02 c0    	mov    DWORD PTR ds:0xc00222c0,edx
c0014be4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014be8:	89 02                	mov    DWORD PTR [edx],eax
c0014bea:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014bf2:	83 ec 0c             	sub    esp,0xc
c0014bf5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014bf9:	e8 cd 2e ff ff       	call   c0007acb <malloc>
c0014bfe:	83 c4 10             	add    esp,0x10
c0014c01:	89 c3                	mov    ebx,eax
c0014c03:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014c08:	83 ec 08             	sub    esp,0x8
c0014c0b:	50                   	push   eax
c0014c0c:	53                   	push   ebx
c0014c0d:	e8 a4 55 ff ff       	call   c000a1b6 <VAS::VAS(bool)>
c0014c12:	83 c4 10             	add    esp,0x10
c0014c15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c19:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014c1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c23:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014c35:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014c3b:	e8 ae bf ff ff       	call   c0010bee <KeInitSignals()>
c0014c40:	89 c2                	mov    edx,eax
c0014c42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c46:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014c4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c50:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014c56:	85 c0                	test   eax,eax
c0014c58:	74 42                	je     c0014c9c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014c5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c5e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014c64:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014c6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c6e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014c74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c78:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014c7e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014c84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c88:	05 0c 01 00 00       	add    eax,0x10c
c0014c8d:	83 ec 08             	sub    esp,0x8
c0014c90:	52                   	push   edx
c0014c91:	50                   	push   eax
c0014c92:	e8 b9 b9 fe ff       	call   c0000650 <strcpy>
c0014c97:	83 c4 10             	add    esp,0x10
c0014c9a:	eb 64                	jmp    c0014d00 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014c9c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014ca4:	83 ec 0c             	sub    esp,0xc
c0014ca7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014cab:	e8 1b 2e ff ff       	call   c0007acb <malloc>
c0014cb0:	83 c4 10             	add    esp,0x10
c0014cb3:	89 c3                	mov    ebx,eax
c0014cb5:	83 ec 08             	sub    esp,0x8
c0014cb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cbc:	53                   	push   ebx
c0014cbd:	e8 94 3f ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0014cc2:	83 c4 10             	add    esp,0x10
c0014cc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cd3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cd9:	83 ec 0c             	sub    esp,0xc
c0014cdc:	50                   	push   eax
c0014cdd:	e8 22 38 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0014ce2:	83 c4 10             	add    esp,0x10
c0014ce5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce9:	05 0c 01 00 00       	add    eax,0x10c
c0014cee:	83 ec 08             	sub    esp,0x8
c0014cf1:	68 19 11 02 c0       	push   0xc0021119
c0014cf6:	50                   	push   eax
c0014cf7:	e8 54 b9 fe ff       	call   c0000650 <strcpy>
c0014cfc:	83 c4 10             	add    esp,0x10
c0014cff:	90                   	nop
c0014d00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d04:	83 c0 0c             	add    eax,0xc
c0014d07:	83 ec 08             	sub    esp,0x8
c0014d0a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d0e:	50                   	push   eax
c0014d0f:	e8 3c b9 fe ff       	call   c0000650 <strcpy>
c0014d14:	83 c4 10             	add    esp,0x10
c0014d17:	83 ec 08             	sub    esp,0x8
c0014d1a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014d1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d22:	e8 c1 fb ff ff       	call   c00148e8 <Process::addArgs(char**)>
c0014d27:	83 c4 10             	add    esp,0x10
c0014d2a:	90                   	nop
c0014d2b:	83 c4 24             	add    esp,0x24
c0014d2e:	5b                   	pop    ebx
c0014d2f:	5e                   	pop    esi
c0014d30:	c3                   	ret    
c0014d31:	8d 76 00             	lea    esi,[esi+0x0]

c0014d34 <taskStartupFunction>:
c0014d34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d39:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014d3c:	c3                   	ret    
c0014d3d:	90                   	nop
c0014d3e:	66 90                	xchg   ax,ax

c0014d40 <Semaphore::Semaphore(int)>:
c0014d40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d48:	89 10                	mov    DWORD PTR [eax],edx
c0014d4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d4e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014d55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014d6b:	90                   	nop
c0014d6c:	c3                   	ret    
c0014d6d:	90                   	nop
c0014d6e:	66 90                	xchg   ax,ax

c0014d70 <Mutex::Mutex()>:
c0014d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d74:	6a 01                	push   0x1
c0014d76:	50                   	push   eax
c0014d77:	e8 c4 ff ff ff       	call   c0014d40 <Semaphore::Semaphore(int)>
c0014d7c:	83 c4 08             	add    esp,0x8
c0014d7f:	90                   	nop
c0014d80:	c3                   	ret    
c0014d81:	90                   	nop
c0014d82:	66 90                	xchg   ax,ax

c0014d84 <Process::createThread(void (*)(void*), void*, int)>:
c0014d84:	57                   	push   edi
c0014d85:	31 c9                	xor    ecx,ecx
c0014d87:	56                   	push   esi
c0014d88:	53                   	push   ebx
c0014d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014d8d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014d94:	89 f2                	mov    edx,esi
c0014d96:	66 90                	xchg   ax,ax
c0014d98:	0f b7 c2             	movzx  eax,dx
c0014d9b:	80 e2 01             	and    dl,0x1
c0014d9e:	74 14                	je     c0014db4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014da0:	d1 f8                	sar    eax,1
c0014da2:	83 c1 01             	add    ecx,0x1
c0014da5:	83 f9 10             	cmp    ecx,0x10
c0014da8:	89 c2                	mov    edx,eax
c0014daa:	75 ec                	jne    c0014d98 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014dac:	31 db                	xor    ebx,ebx
c0014dae:	89 d8                	mov    eax,ebx
c0014db0:	5b                   	pop    ebx
c0014db1:	5e                   	pop    esi
c0014db2:	5f                   	pop    edi
c0014db3:	c3                   	ret    
c0014db4:	b8 01 00 00 00       	mov    eax,0x1
c0014db9:	d3 e0                	shl    eax,cl
c0014dbb:	09 c6                	or     esi,eax
c0014dbd:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014dc4:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014dc7:	c1 e0 05             	shl    eax,0x5
c0014dca:	29 c8                	sub    eax,ecx
c0014dcc:	01 d8                	add    eax,ebx
c0014dce:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014dd5:	75 0d                	jne    c0014de4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014dd7:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014de1:	8d 76 00             	lea    esi,[esi+0x0]
c0014de4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014dea:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014ded:	83 ec 0c             	sub    esp,0xc
c0014df0:	c1 e6 05             	shl    esi,0x5
c0014df3:	29 ce                	sub    esi,ecx
c0014df5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014df8:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014dfb:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014e01:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014e07:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014e0d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014e14:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014e1a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e1e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014e24:	89 ca                	mov    edx,ecx
c0014e26:	f7 da                	neg    edx
c0014e28:	c1 e2 15             	shl    edx,0x15
c0014e2b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014e31:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014e37:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0014e3b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014e45:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014e4b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e4f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014e55:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014e5f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014e69:	68 00 01 00 00       	push   0x100
c0014e6e:	e8 58 2c ff ff       	call   c0007acb <malloc>
c0014e73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014e76:	58                   	pop    eax
c0014e77:	5a                   	pop    edx
c0014e78:	53                   	push   ebx
c0014e79:	68 84 81 02 c0       	push   0xc0028184
c0014e7e:	e8 bd 9d 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014e83:	83 c4 10             	add    esp,0x10
c0014e86:	89 d8                	mov    eax,ebx
c0014e88:	5b                   	pop    ebx
c0014e89:	5e                   	pop    esi
c0014e8a:	5f                   	pop    edi
c0014e8b:	c3                   	ret    

c0014e8c <Process::createUserThread()>:
c0014e8c:	83 ec 0c             	sub    esp,0xc
c0014e8f:	68 80 00 00 00       	push   0x80
c0014e94:	6a 00                	push   0x0
c0014e96:	68 e0 47 01 c0       	push   0xc00147e0
c0014e9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e9f:	50                   	push   eax
c0014ea0:	e8 df fe ff ff       	call   c0014d84 <Process::createThread(void (*)(void*), void*, int)>
c0014ea5:	83 c4 1c             	add    esp,0x1c
c0014ea8:	c3                   	ret    
c0014ea9:	8d 76 00             	lea    esi,[esi+0x0]

c0014eac <setupMultitasking(void (*)())>:
c0014eac:	56                   	push   esi
c0014ead:	53                   	push   ebx
c0014eae:	83 ec 04             	sub    esp,0x4
c0014eb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014eb5:	eb 11                	jmp    c0014ec8 <setupMultitasking(void (*)())+0x1c>
c0014eb7:	90                   	nop
c0014eb8:	83 ec 0c             	sub    esp,0xc
c0014ebb:	68 84 81 02 c0       	push   0xc0028184
c0014ec0:	e8 bf 9c 00 00       	call   c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014ec5:	83 c4 10             	add    esp,0x10
c0014ec8:	83 ec 0c             	sub    esp,0xc
c0014ecb:	68 84 81 02 c0       	push   0xc0028184
c0014ed0:	e8 8b 9c 00 00       	call   c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014ed5:	83 c4 10             	add    esp,0x10
c0014ed8:	84 c0                	test   al,al
c0014eda:	74 dc                	je     c0014eb8 <setupMultitasking(void (*)())+0xc>
c0014edc:	83 ec 0c             	sub    esp,0xc
c0014edf:	68 24 07 00 00       	push   0x724
c0014ee4:	e8 e2 2b ff ff       	call   c0007acb <malloc>
c0014ee9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014ef0:	6a 00                	push   0x0
c0014ef2:	68 1d 11 02 c0       	push   0xc002111d
c0014ef7:	6a 01                	push   0x1
c0014ef9:	50                   	push   eax
c0014efa:	89 c3                	mov    ebx,eax
c0014efc:	e8 5f fc ff ff       	call   c0014b60 <Process::Process(bool, char const*, Process*, char**)>
c0014f01:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014f07:	83 c4 14             	add    esp,0x14
c0014f0a:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014f10:	50                   	push   eax
c0014f11:	e8 43 38 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0014f16:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014f1d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014f27:	83 c8 01             	or     eax,0x1
c0014f2a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014f31:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014f37:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f3a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014f44:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014f4a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014f54:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014f5a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014f64:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014f6e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014f74:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014f7a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014f84:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014f8e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014f95:	e8 31 2b ff ff       	call   c0007acb <malloc>
c0014f9a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0014fa0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0014fa6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014fac:	5a                   	pop    edx
c0014fad:	59                   	pop    ecx
c0014fae:	68 19 11 02 c0       	push   0xc0021119
c0014fb3:	50                   	push   eax
c0014fb4:	e8 97 b6 fe ff       	call   c0000650 <strcpy>
c0014fb9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0014fc0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014fc4:	83 c4 14             	add    esp,0x14
c0014fc7:	5b                   	pop    ebx
c0014fc8:	5e                   	pop    esi
c0014fc9:	e9 9b b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0014fce:	66 90                	xchg   ax,ax

c0014fd0 <schedule()>:
c0014fd0:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0014fd6:	85 d2                	test   edx,edx
c0014fd8:	74 0e                	je     c0014fe8 <schedule()+0x18>
c0014fda:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014fe4:	c3                   	ret    
c0014fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0014fe8:	53                   	push   ebx
c0014fe9:	83 ec 14             	sub    esp,0x14
c0014fec:	68 84 81 02 c0       	push   0xc0028184
c0014ff1:	e8 6a 9b 00 00       	call   c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014ff6:	83 c4 10             	add    esp,0x10
c0014ff9:	84 c0                	test   al,al
c0014ffb:	75 3f                	jne    c001503c <schedule()+0x6c>
c0014ffd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015002:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015005:	83 fa 01             	cmp    edx,0x1
c0015008:	74 3a                	je     c0015044 <schedule()+0x74>
c001500a:	66 90                	xchg   ax,ax
c001500c:	83 ec 0c             	sub    esp,0xc
c001500f:	68 84 81 02 c0       	push   0xc0028184
c0015014:	e8 63 9b 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015019:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015020:	89 c3                	mov    ebx,eax
c0015022:	e8 5d 9b 00 00       	call   c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015027:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001502e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015031:	e8 02 f8 ff ff       	call   c0014838 <switchToThread(ThreadControlBlock*)>
c0015036:	83 c4 10             	add    esp,0x10
c0015039:	8d 76 00             	lea    esi,[esi+0x0]
c001503c:	83 c4 08             	add    esp,0x8
c001503f:	5b                   	pop    ebx
c0015040:	c3                   	ret    
c0015041:	8d 76 00             	lea    esi,[esi+0x0]
c0015044:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001504b:	83 ec 08             	sub    esp,0x8
c001504e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015053:	50                   	push   eax
c0015054:	68 84 81 02 c0       	push   0xc0028184
c0015059:	e8 e2 9b 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001505e:	83 c4 10             	add    esp,0x10
c0015061:	eb a9                	jmp    c001500c <schedule()+0x3c>
c0015063:	90                   	nop

c0015064 <Semaphore::tryAcquire()>:
c0015064:	53                   	push   ebx
c0015065:	83 ec 08             	sub    esp,0x8
c0015068:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001506c:	fa                   	cli    
c001506d:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015073:	8d 42 01             	lea    eax,[edx+0x1]
c0015076:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001507b:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015080:	8d 58 01             	lea    ebx,[eax+0x1]
c0015083:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015089:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001508c:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001508e:	7c 2c                	jl     c00150bc <Semaphore::tryAcquire()+0x58>
c0015090:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015095:	85 c0                	test   eax,eax
c0015097:	75 0b                	jne    c00150a4 <Semaphore::tryAcquire()+0x40>
c0015099:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001509e:	85 c0                	test   eax,eax
c00150a0:	75 5a                	jne    c00150fc <Semaphore::tryAcquire()+0x98>
c00150a2:	66 90                	xchg   ax,ax
c00150a4:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00150aa:	31 c0                	xor    eax,eax
c00150ac:	85 d2                	test   edx,edx
c00150ae:	75 04                	jne    c00150b4 <Semaphore::tryAcquire()+0x50>
c00150b0:	fb                   	sti    
c00150b1:	8d 76 00             	lea    esi,[esi+0x0]
c00150b4:	83 c4 08             	add    esp,0x8
c00150b7:	5b                   	pop    ebx
c00150b8:	c3                   	ret    
c00150b9:	8d 76 00             	lea    esi,[esi+0x0]
c00150bc:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00150c1:	83 c3 01             	add    ebx,0x1
c00150c4:	85 c0                	test   eax,eax
c00150c6:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00150c9:	75 21                	jne    c00150ec <Semaphore::tryAcquire()+0x88>
c00150cb:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c00150d1:	85 c9                	test   ecx,ecx
c00150d3:	74 17                	je     c00150ec <Semaphore::tryAcquire()+0x88>
c00150d5:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00150df:	e8 ec fe ff ff       	call   c0014fd0 <schedule()>
c00150e4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00150e9:	8d 50 ff             	lea    edx,[eax-0x1]
c00150ec:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00150f2:	85 d2                	test   edx,edx
c00150f4:	b0 01                	mov    al,0x1
c00150f6:	75 bc                	jne    c00150b4 <Semaphore::tryAcquire()+0x50>
c00150f8:	eb b6                	jmp    c00150b0 <Semaphore::tryAcquire()+0x4c>
c00150fa:	66 90                	xchg   ax,ax
c00150fc:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015106:	e8 c5 fe ff ff       	call   c0014fd0 <schedule()>
c001510b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015110:	8d 50 ff             	lea    edx,[eax-0x1]
c0015113:	31 c0                	xor    eax,eax
c0015115:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001511b:	85 d2                	test   edx,edx
c001511d:	75 95                	jne    c00150b4 <Semaphore::tryAcquire()+0x50>
c001511f:	eb 8f                	jmp    c00150b0 <Semaphore::tryAcquire()+0x4c>
c0015121:	90                   	nop
c0015122:	66 90                	xchg   ax,ax

c0015124 <Semaphore::assertLocked(char const*)>:
c0015124:	83 ec 0c             	sub    esp,0xc
c0015127:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001512b:	fa                   	cli    
c001512c:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c0015132:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015137:	83 c1 01             	add    ecx,0x1
c001513a:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015140:	8d 48 01             	lea    ecx,[eax+0x1]
c0015143:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015149:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001514b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001514e:	7c 28                	jl     c0015178 <Semaphore::assertLocked(char const*)+0x54>
c0015150:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015155:	85 c0                	test   eax,eax
c0015157:	75 0b                	jne    c0015164 <Semaphore::assertLocked(char const*)+0x40>
c0015159:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001515e:	85 c0                	test   eax,eax
c0015160:	75 32                	jne    c0015194 <Semaphore::assertLocked(char const*)+0x70>
c0015162:	66 90                	xchg   ax,ax
c0015164:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015169:	83 e8 01             	sub    eax,0x1
c001516c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015171:	75 01                	jne    c0015174 <Semaphore::assertLocked(char const*)+0x50>
c0015173:	fb                   	sti    
c0015174:	83 c4 0c             	add    esp,0xc
c0015177:	c3                   	ret    
c0015178:	83 ec 0c             	sub    esp,0xc
c001517b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001517f:	52                   	push   edx
c0015180:	e8 50 b6 ff ff       	call   c00107d5 <KePanic(char const*)>
c0015185:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001518a:	83 c4 10             	add    esp,0x10
c001518d:	83 e8 01             	sub    eax,0x1
c0015190:	eb be                	jmp    c0015150 <Semaphore::assertLocked(char const*)+0x2c>
c0015192:	66 90                	xchg   ax,ax
c0015194:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001519e:	e8 2d fe ff ff       	call   c0014fd0 <schedule()>
c00151a3:	eb bf                	jmp    c0015164 <Semaphore::assertLocked(char const*)+0x40>
c00151a5:	8d 76 00             	lea    esi,[esi+0x0]

c00151a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00151a8:	83 ec 0c             	sub    esp,0xc
c00151ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00151b7:	e8 14 fe ff ff       	call   c0014fd0 <schedule()>
c00151bc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151c1:	83 e8 01             	sub    eax,0x1
c00151c4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151c9:	75 01                	jne    c00151cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00151cb:	fb                   	sti    
c00151cc:	83 c4 0c             	add    esp,0xc
c00151cf:	c3                   	ret    

c00151d0 <blockTask(TaskState)>:
c00151d0:	83 ec 0c             	sub    esp,0xc
c00151d3:	fa                   	cli    
c00151d4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151dd:	83 c0 01             	add    eax,0x1
c00151e0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151ea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00151ed:	e8 de fd ff ff       	call   c0014fd0 <schedule()>
c00151f2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151f7:	83 e8 01             	sub    eax,0x1
c00151fa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151ff:	75 03                	jne    c0015204 <blockTask(TaskState)+0x34>
c0015201:	fb                   	sti    
c0015202:	66 90                	xchg   ax,ax
c0015204:	83 c4 0c             	add    esp,0xc
c0015207:	c3                   	ret    

c0015208 <waitTask(int, int*, int)>:
c0015208:	83 ec 18             	sub    esp,0x18
c001520b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015210:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015214:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015217:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001521b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015220:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015223:	6a 07                	push   0x7
c0015225:	e8 a6 ff ff ff       	call   c00151d0 <blockTask(TaskState)>
c001522a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001522f:	83 c4 10             	add    esp,0x10
c0015232:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015235:	85 d2                	test   edx,edx
c0015237:	74 0b                	je     c0015244 <waitTask(int, int*, int)+0x3c>
c0015239:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001523c:	89 02                	mov    DWORD PTR [edx],eax
c001523e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015243:	90                   	nop
c0015244:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015247:	83 c4 0c             	add    esp,0xc
c001524a:	c3                   	ret    
c001524b:	90                   	nop

c001524c <milliTenthSleepUntil(unsigned int)>:
c001524c:	83 ec 0c             	sub    esp,0xc
c001524f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015253:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c0015259:	76 05                	jbe    c0015260 <milliTenthSleepUntil(unsigned int)+0x14>
c001525b:	90                   	nop
c001525c:	83 c4 0c             	add    esp,0xc
c001525f:	c3                   	ret    
c0015260:	fa                   	cli    
c0015261:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015267:	83 ec 08             	sub    esp,0x8
c001526a:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015270:	83 c2 01             	add    edx,0x1
c0015273:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015279:	83 c1 01             	add    ecx,0x1
c001527c:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015282:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015288:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001528b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015290:	50                   	push   eax
c0015291:	68 78 81 02 c0       	push   0xc0028178
c0015296:	e8 a5 99 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001529b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00152a2:	e8 29 ff ff ff       	call   c00151d0 <blockTask(TaskState)>
c00152a7:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00152ac:	83 c4 10             	add    esp,0x10
c00152af:	83 e8 01             	sub    eax,0x1
c00152b2:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00152b7:	85 c0                	test   eax,eax
c00152b9:	75 09                	jne    c00152c4 <milliTenthSleepUntil(unsigned int)+0x78>
c00152bb:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00152c0:	85 c0                	test   eax,eax
c00152c2:	75 14                	jne    c00152d8 <milliTenthSleepUntil(unsigned int)+0x8c>
c00152c4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152c9:	83 e8 01             	sub    eax,0x1
c00152cc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152d1:	75 89                	jne    c001525c <milliTenthSleepUntil(unsigned int)+0x10>
c00152d3:	fb                   	sti    
c00152d4:	83 c4 0c             	add    esp,0xc
c00152d7:	c3                   	ret    
c00152d8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00152e2:	e8 e9 fc ff ff       	call   c0014fd0 <schedule()>
c00152e7:	eb db                	jmp    c00152c4 <milliTenthSleepUntil(unsigned int)+0x78>
c00152e9:	8d 76 00             	lea    esi,[esi+0x0]

c00152ec <milliTenthSleep(unsigned int)>:
c00152ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00152f0:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c00152f5:	01 c2                	add    edx,eax
c00152f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00152fb:	e9 4c ff ff ff       	jmp    c001524c <milliTenthSleepUntil(unsigned int)>

c0015300 <sleep(unsigned int)>:
c0015300:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015308:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001530c:	eb de                	jmp    c00152ec <milliTenthSleep(unsigned int)>
c001530e:	66 90                	xchg   ax,ax

c0015310 <Semaphore::acquire()>:
c0015310:	83 ec 0c             	sub    esp,0xc
c0015313:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015317:	fa                   	cli    
c0015318:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001531d:	83 c0 01             	add    eax,0x1
c0015320:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015325:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001532a:	8d 48 01             	lea    ecx,[eax+0x1]
c001532d:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015333:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015336:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015338:	7d 2e                	jge    c0015368 <Semaphore::acquire()+0x58>
c001533a:	83 c1 01             	add    ecx,0x1
c001533d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015340:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015345:	85 c0                	test   eax,eax
c0015347:	75 0b                	jne    c0015354 <Semaphore::acquire()+0x44>
c0015349:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001534e:	85 c0                	test   eax,eax
c0015350:	75 66                	jne    c00153b8 <Semaphore::acquire()+0xa8>
c0015352:	66 90                	xchg   ax,ax
c0015354:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015359:	83 e8 01             	sub    eax,0x1
c001535c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015361:	75 01                	jne    c0015364 <Semaphore::acquire()+0x54>
c0015363:	fb                   	sti    
c0015364:	83 c4 0c             	add    esp,0xc
c0015367:	c3                   	ret    
c0015368:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001536d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015374:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015377:	85 c9                	test   ecx,ecx
c0015379:	74 51                	je     c00153cc <Semaphore::acquire()+0xbc>
c001537b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001537e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015384:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015387:	90                   	nop
c0015388:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001538d:	83 ec 0c             	sub    esp,0xc
c0015390:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015393:	68 9c 11 02 c0       	push   0xc002119c
c0015398:	e8 b4 55 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001539d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00153a4:	e8 27 fe ff ff       	call   c00151d0 <blockTask(TaskState)>
c00153a9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153ae:	83 c4 10             	add    esp,0x10
c00153b1:	83 e8 01             	sub    eax,0x1
c00153b4:	eb 8a                	jmp    c0015340 <Semaphore::acquire()+0x30>
c00153b6:	66 90                	xchg   ax,ax
c00153b8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00153c2:	e8 09 fc ff ff       	call   c0014fd0 <schedule()>
c00153c7:	eb 8b                	jmp    c0015354 <Semaphore::acquire()+0x44>
c00153c9:	8d 76 00             	lea    esi,[esi+0x0]
c00153cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00153d4:	eb b2                	jmp    c0015388 <Semaphore::acquire()+0x78>
c00153d6:	66 90                	xchg   ax,ax

c00153d8 <taskReturned>:
c00153d8:	83 ec 18             	sub    esp,0x18
c00153db:	68 bc 11 02 c0       	push   0xc00211bc
c00153e0:	e8 f0 b3 ff ff       	call   c00107d5 <KePanic(char const*)>
c00153e5:	83 c4 10             	add    esp,0x10
c00153e8:	83 ec 0c             	sub    esp,0xc
c00153eb:	6a 02                	push   0x2
c00153ed:	e8 de fd ff ff       	call   c00151d0 <blockTask(TaskState)>
c00153f2:	fa                   	cli    
c00153f3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153f8:	83 c0 01             	add    eax,0x1
c00153fb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015400:	e8 cb fb ff ff       	call   c0014fd0 <schedule()>
c0015405:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001540a:	83 c4 10             	add    esp,0x10
c001540d:	83 e8 01             	sub    eax,0x1
c0015410:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015415:	85 c0                	test   eax,eax
c0015417:	75 cf                	jne    c00153e8 <taskReturned+0x10>
c0015419:	fb                   	sti    
c001541a:	eb cc                	jmp    c00153e8 <taskReturned+0x10>

c001541c <Thr::processFromPID(int)>:
c001541c:	57                   	push   edi
c001541d:	56                   	push   esi
c001541e:	53                   	push   ebx
c001541f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015423:	fa                   	cli    
c0015424:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c001542a:	83 ec 0c             	sub    esp,0xc
c001542d:	68 84 81 02 c0       	push   0xc0028184
c0015432:	83 c1 01             	add    ecx,0x1
c0015435:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c001543b:	e8 3c 97 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015440:	83 c4 10             	add    esp,0x10
c0015443:	89 c7                	mov    edi,eax
c0015445:	eb 15                	jmp    c001545c <Thr::processFromPID(int)+0x40>
c0015447:	90                   	nop
c0015448:	83 ec 0c             	sub    esp,0xc
c001544b:	68 84 81 02 c0       	push   0xc0028184
c0015450:	e8 27 97 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015455:	83 c4 10             	add    esp,0x10
c0015458:	39 f8                	cmp    eax,edi
c001545a:	74 50                	je     c00154ac <Thr::processFromPID(int)+0x90>
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	68 84 81 02 c0       	push   0xc0028184
c0015464:	e8 13 97 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015469:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015470:	89 c3                	mov    ebx,eax
c0015472:	e8 0d 97 00 00       	call   c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015477:	58                   	pop    eax
c0015478:	5a                   	pop    edx
c0015479:	53                   	push   ebx
c001547a:	68 84 81 02 c0       	push   0xc0028184
c001547f:	e8 bc 97 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015484:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015487:	83 c4 10             	add    esp,0x10
c001548a:	39 30                	cmp    DWORD PTR [eax],esi
c001548c:	75 ba                	jne    c0015448 <Thr::processFromPID(int)+0x2c>
c001548e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015493:	83 e8 01             	sub    eax,0x1
c0015496:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001549b:	74 0b                	je     c00154a8 <Thr::processFromPID(int)+0x8c>
c001549d:	8d 76 00             	lea    esi,[esi+0x0]
c00154a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00154a3:	90                   	nop
c00154a4:	5b                   	pop    ebx
c00154a5:	5e                   	pop    esi
c00154a6:	5f                   	pop    edi
c00154a7:	c3                   	ret    
c00154a8:	fb                   	sti    
c00154a9:	eb f5                	jmp    c00154a0 <Thr::processFromPID(int)+0x84>
c00154ab:	90                   	nop
c00154ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154b1:	8d 50 ff             	lea    edx,[eax-0x1]
c00154b4:	31 c0                	xor    eax,eax
c00154b6:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00154bc:	85 d2                	test   edx,edx
c00154be:	75 e4                	jne    c00154a4 <Thr::processFromPID(int)+0x88>
c00154c0:	fb                   	sti    
c00154c1:	5b                   	pop    ebx
c00154c2:	5e                   	pop    esi
c00154c3:	5f                   	pop    edi
c00154c4:	c3                   	ret    
c00154c5:	8d 76 00             	lea    esi,[esi+0x0]

c00154c8 <unblockTask(ThreadControlBlock*)>:
c00154c8:	53                   	push   ebx
c00154c9:	83 ec 08             	sub    esp,0x8
c00154cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154d0:	fa                   	cli    
c00154d1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154d6:	83 c0 01             	add    eax,0x1
c00154d9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154de:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00154e1:	85 c0                	test   eax,eax
c00154e3:	74 67                	je     c001554c <unblockTask(ThreadControlBlock*)+0x84>
c00154e5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00154e8:	83 f8 01             	cmp    eax,0x1
c00154eb:	74 37                	je     c0015524 <unblockTask(ThreadControlBlock*)+0x5c>
c00154ed:	83 ec 0c             	sub    esp,0xc
c00154f0:	68 84 81 02 c0       	push   0xc0028184
c00154f5:	e8 82 96 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154fa:	83 c4 10             	add    esp,0x10
c00154fd:	85 c0                	test   eax,eax
c00154ff:	75 1b                	jne    c001551c <unblockTask(ThreadControlBlock*)+0x54>
c0015501:	eb 5d                	jmp    c0015560 <unblockTask(ThreadControlBlock*)+0x98>
c0015503:	90                   	nop
c0015504:	83 ec 08             	sub    esp,0x8
c0015507:	50                   	push   eax
c0015508:	68 84 81 02 c0       	push   0xc0028184
c001550d:	e8 8a 99 00 00       	call   c001ee9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015512:	83 c4 10             	add    esp,0x10
c0015515:	85 c0                	test   eax,eax
c0015517:	74 47                	je     c0015560 <unblockTask(ThreadControlBlock*)+0x98>
c0015519:	8d 76 00             	lea    esi,[esi+0x0]
c001551c:	39 c3                	cmp    ebx,eax
c001551e:	75 e4                	jne    c0015504 <unblockTask(ThreadControlBlock*)+0x3c>
c0015520:	eb 12                	jmp    c0015534 <unblockTask(ThreadControlBlock*)+0x6c>
c0015522:	66 90                	xchg   ax,ax
c0015524:	83 ec 0c             	sub    esp,0xc
c0015527:	68 3b 11 02 c0       	push   0xc002113b
c001552c:	e8 20 54 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0015531:	83 c4 10             	add    esp,0x10
c0015534:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015539:	83 e8 01             	sub    eax,0x1
c001553c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015541:	75 01                	jne    c0015544 <unblockTask(ThreadControlBlock*)+0x7c>
c0015543:	fb                   	sti    
c0015544:	83 c4 08             	add    esp,0x8
c0015547:	5b                   	pop    ebx
c0015548:	c3                   	ret    
c0015549:	8d 76 00             	lea    esi,[esi+0x0]
c001554c:	83 ec 0c             	sub    esp,0xc
c001554f:	68 24 11 02 c0       	push   0xc0021124
c0015554:	e8 f8 53 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0015559:	83 c4 10             	add    esp,0x10
c001555c:	eb d6                	jmp    c0015534 <unblockTask(ThreadControlBlock*)+0x6c>
c001555e:	66 90                	xchg   ax,ax
c0015560:	83 ec 08             	sub    esp,0x8
c0015563:	53                   	push   ebx
c0015564:	68 84 81 02 c0       	push   0xc0028184
c0015569:	e8 d2 96 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001556e:	83 c4 10             	add    esp,0x10
c0015571:	eb c1                	jmp    c0015534 <unblockTask(ThreadControlBlock*)+0x6c>
c0015573:	90                   	nop

c0015574 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015574:	55                   	push   ebp
c0015575:	57                   	push   edi
c0015576:	56                   	push   esi
c0015577:	53                   	push   ebx
c0015578:	83 ec 1c             	sub    esp,0x1c
c001557b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001557f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015582:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015588:	85 ed                	test   ebp,ebp
c001558a:	7e 28                	jle    c00155b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001558c:	31 f6                	xor    esi,esi
c001558e:	66 90                	xchg   ax,ax
c0015590:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015597:	83 ec 0c             	sub    esp,0xc
c001559a:	83 c6 01             	add    esi,0x1
c001559d:	57                   	push   edi
c001559e:	e8 38 25 ff ff       	call   c0007adb <free>
c00155a3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00155af:	7f df                	jg     c0015590 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00155b1:	8d 76 00             	lea    esi,[esi+0x0]
c00155b4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00155be:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00155c3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00155c6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00155c9:	d3 c0                	rol    eax,cl
c00155cb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00155d2:	21 c8                	and    eax,ecx
c00155d4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00155db:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00155de:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00155e6:	89 f7                	mov    edi,esi
c00155e8:	0f 85 72 01 00 00    	jne    c0015760 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00155ee:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00155f4:	85 ed                	test   ebp,ebp
c00155f6:	74 1c                	je     c0015614 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00155f8:	83 ec 0c             	sub    esp,0xc
c00155fb:	55                   	push   ebp
c00155fc:	e8 e5 ae ff ff       	call   c00104e6 <EnvVarContainer::~EnvVarContainer()>
c0015601:	59                   	pop    ecx
c0015602:	5e                   	pop    esi
c0015603:	6a 0c                	push   0xc
c0015605:	55                   	push   ebp
c0015606:	e8 48 52 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001560b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001560e:	83 c4 10             	add    esp,0x10
c0015611:	89 f7                	mov    edi,esi
c0015613:	90                   	nop
c0015614:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001561a:	85 c0                	test   eax,eax
c001561c:	0f 84 b2 00 00 00    	je     c00156d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015622:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015625:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015629:	31 c9                	xor    ecx,ecx
c001562b:	eb 17                	jmp    c0015644 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001562d:	8d 76 00             	lea    esi,[esi+0x0]
c0015630:	83 c1 01             	add    ecx,0x1
c0015633:	83 f9 10             	cmp    ecx,0x10
c0015636:	0f 84 98 00 00 00    	je     c00156d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001563c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015642:	66 90                	xchg   ax,ax
c0015644:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001564b:	d3 fa                	sar    edx,cl
c001564d:	80 e2 01             	and    dl,0x1
c0015650:	74 de                	je     c0015630 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015652:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015655:	c1 e2 05             	shl    edx,0x5
c0015658:	29 ca                	sub    edx,ecx
c001565a:	01 d0                	add    eax,edx
c001565c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015662:	83 fd 07             	cmp    ebp,0x7
c0015665:	75 c9                	jne    c0015630 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015667:	05 40 02 00 00       	add    eax,0x240
c001566c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001566f:	83 fd ff             	cmp    ebp,0xffffffff
c0015672:	0f 8c f0 00 00 00    	jl     c0015768 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015678:	0f 84 ae 01 00 00    	je     c001582c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001567e:	85 ed                	test   ebp,ebp
c0015680:	0f 84 92 01 00 00    	je     c0015818 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015686:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015688:	75 a6                	jne    c0015630 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001568a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001568e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015694:	01 d0                	add    eax,edx
c0015696:	66 90                	xchg   ax,ax
c0015698:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001569c:	83 ec 0c             	sub    esp,0xc
c001569f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00156a5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156a8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156ae:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00156b5:	50                   	push   eax
c00156b6:	e8 0d fe ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c00156bb:	83 c4 10             	add    esp,0x10
c00156be:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00156c1:	89 f7                	mov    edi,esi
c00156c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00156c7:	83 c1 01             	add    ecx,0x1
c00156ca:	83 f9 10             	cmp    ecx,0x10
c00156cd:	0f 85 69 ff ff ff    	jne    c001563c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00156d3:	90                   	nop
c00156d4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00156da:	85 c0                	test   eax,eax
c00156dc:	74 62                	je     c0015740 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00156de:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00156e4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00156ea:	74 54                	je     c0015740 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00156ec:	83 ec 0c             	sub    esp,0xc
c00156ef:	68 84 81 02 c0       	push   0xc0028184
c00156f4:	e8 83 94 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00156f9:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015700:	89 c7                	mov    edi,eax
c0015702:	e8 59 94 00 00       	call   c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015707:	83 c4 10             	add    esp,0x10
c001570a:	84 c0                	test   al,al
c001570c:	0f 84 ce 00 00 00    	je     c00157e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015712:	66 90                	xchg   ax,ax
c0015714:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015717:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001571d:	85 d2                	test   edx,edx
c001571f:	74 0f                	je     c0015730 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015721:	8b 02                	mov    eax,DWORD PTR [edx]
c0015723:	83 ec 0c             	sub    esp,0xc
c0015726:	52                   	push   edx
c0015727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001572a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001572d:	83 c4 10             	add    esp,0x10
c0015730:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001573a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001573d:	8d 76 00             	lea    esi,[esi+0x0]
c0015740:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015746:	85 db                	test   ebx,ebx
c0015748:	74 16                	je     c0015760 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001574a:	83 ec 0c             	sub    esp,0xc
c001574d:	53                   	push   ebx
c001574e:	e8 23 44 ff ff       	call   c0009b76 <VAS::~VAS()>
c0015753:	58                   	pop    eax
c0015754:	5a                   	pop    edx
c0015755:	6a 14                	push   0x14
c0015757:	53                   	push   ebx
c0015758:	e8 f6 50 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001575d:	83 c4 10             	add    esp,0x10
c0015760:	83 c4 1c             	add    esp,0x1c
c0015763:	5b                   	pop    ebx
c0015764:	5e                   	pop    esi
c0015765:	5f                   	pop    edi
c0015766:	5d                   	pop    ebp
c0015767:	c3                   	ret    
c0015768:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001576c:	83 ec 0c             	sub    esp,0xc
c001576f:	68 f0 11 02 c0       	push   0xc00211f0
c0015774:	e8 5c b0 ff ff       	call   c00107d5 <KePanic(char const*)>
c0015779:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001577c:	83 c4 10             	add    esp,0x10
c001577f:	89 f7                	mov    edi,esi
c0015781:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015785:	e9 a6 fe ff ff       	jmp    c0015630 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001578a:	66 90                	xchg   ax,ax
c001578c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015792:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015798:	75 1e                	jne    c00157b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001579a:	83 ec 0c             	sub    esp,0xc
c001579d:	68 58 12 02 c0       	push   0xc0021258
c00157a2:	e8 aa 51 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00157a7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00157ae:	e8 1d fa ff ff       	call   c00151d0 <blockTask(TaskState)>
c00157b3:	83 c4 10             	add    esp,0x10
c00157b6:	66 90                	xchg   ax,ax
c00157b8:	83 ec 08             	sub    esp,0x8
c00157bb:	56                   	push   esi
c00157bc:	68 84 81 02 c0       	push   0xc0028184
c00157c1:	e8 7a 94 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00157c6:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157cd:	e8 aa 93 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157d2:	83 c4 10             	add    esp,0x10
c00157d5:	39 f8                	cmp    eax,edi
c00157d7:	0f 84 37 ff ff ff    	je     c0015714 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00157dd:	8d 76 00             	lea    esi,[esi+0x0]
c00157e0:	83 ec 0c             	sub    esp,0xc
c00157e3:	68 84 81 02 c0       	push   0xc0028184
c00157e8:	e8 8f 93 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157ed:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157f4:	89 c6                	mov    esi,eax
c00157f6:	e8 89 93 00 00       	call   c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00157fb:	83 c4 10             	add    esp,0x10
c00157fe:	39 f3                	cmp    ebx,esi
c0015800:	74 b6                	je     c00157b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015802:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015805:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015808:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001580e:	75 a8                	jne    c00157b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015810:	e9 77 ff ff ff       	jmp    c001578c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015815:	8d 76 00             	lea    esi,[esi+0x0]
c0015818:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001581c:	83 ec 0c             	sub    esp,0xc
c001581f:	68 24 12 02 c0       	push   0xc0021224
c0015824:	e9 4b ff ff ff       	jmp    c0015774 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015829:	8d 76 00             	lea    esi,[esi+0x0]
c001582c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015830:	8b 36                	mov    esi,DWORD PTR [esi]
c0015832:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015835:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015838:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001583e:	01 d7                	add    edi,edx
c0015840:	89 f8                	mov    eax,edi
c0015842:	e9 51 fe ff ff       	jmp    c0015698 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015847:	90                   	nop

c0015848 <cleanerTaskFunction(void*)>:
c0015848:	53                   	push   ebx
c0015849:	83 ec 08             	sub    esp,0x8
c001584c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015851:	83 e8 01             	sub    eax,0x1
c0015854:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015859:	75 01                	jne    c001585c <cleanerTaskFunction(void*)+0x14>
c001585b:	fb                   	sti    
c001585c:	fa                   	cli    
c001585d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015862:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015869:	8d 50 01             	lea    edx,[eax+0x1]
c001586c:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015872:	0f 84 c4 00 00 00    	je     c001593c <cleanerTaskFunction(void*)+0xf4>
c0015878:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001587d:	85 c0                	test   eax,eax
c001587f:	75 03                	jne    c0015884 <cleanerTaskFunction(void*)+0x3c>
c0015881:	fb                   	sti    
c0015882:	66 90                	xchg   ax,ax
c0015884:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c001588b:	fa                   	cli    
c001588c:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015892:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015898:	83 c2 01             	add    edx,0x1
c001589b:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00158a1:	83 c1 01             	add    ecx,0x1
c00158a4:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00158aa:	fa                   	cli    
c00158ab:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c00158b1:	83 c3 01             	add    ebx,0x1
c00158b4:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c00158ba:	eb 28                	jmp    c00158e4 <cleanerTaskFunction(void*)+0x9c>
c00158bc:	83 ec 0c             	sub    esp,0xc
c00158bf:	68 6c 81 02 c0       	push   0xc002816c
c00158c4:	e8 b3 92 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158c9:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c00158d0:	89 c3                	mov    ebx,eax
c00158d2:	e8 ad 92 00 00       	call   c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00158d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00158da:	e8 95 fc ff ff       	call   c0015574 <cleanupTerminatedTask(ThreadControlBlock*)>
c00158df:	83 c4 10             	add    esp,0x10
c00158e2:	66 90                	xchg   ax,ax
c00158e4:	83 ec 0c             	sub    esp,0xc
c00158e7:	68 6c 81 02 c0       	push   0xc002816c
c00158ec:	e8 6f 92 00 00       	call   c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00158f1:	83 c4 10             	add    esp,0x10
c00158f4:	84 c0                	test   al,al
c00158f6:	74 c4                	je     c00158bc <cleanerTaskFunction(void*)+0x74>
c00158f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158fd:	83 e8 01             	sub    eax,0x1
c0015900:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015905:	75 01                	jne    c0015908 <cleanerTaskFunction(void*)+0xc0>
c0015907:	fb                   	sti    
c0015908:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001590d:	83 e8 01             	sub    eax,0x1
c0015910:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015915:	0f 85 31 ff ff ff    	jne    c001584c <cleanerTaskFunction(void*)+0x4>
c001591b:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015920:	85 c0                	test   eax,eax
c0015922:	0f 84 24 ff ff ff    	je     c001584c <cleanerTaskFunction(void*)+0x4>
c0015928:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015932:	e8 99 f6 ff ff       	call   c0014fd0 <schedule()>
c0015937:	e9 10 ff ff ff       	jmp    c001584c <cleanerTaskFunction(void*)+0x4>
c001593c:	83 ec 0c             	sub    esp,0xc
c001593f:	6a 02                	push   0x2
c0015941:	e8 62 f8 ff ff       	call   c00151a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015946:	83 c4 10             	add    esp,0x10
c0015949:	e9 36 ff ff ff       	jmp    c0015884 <cleanerTaskFunction(void*)+0x3c>
c001594e:	66 90                	xchg   ax,ax

c0015950 <terminateTask(int)>:
c0015950:	83 ec 14             	sub    esp,0x14
c0015953:	fa                   	cli    
c0015954:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001595a:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015960:	83 c2 01             	add    edx,0x1
c0015963:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015969:	83 c1 01             	add    ecx,0x1
c001596c:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015972:	fa                   	cli    
c0015973:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015978:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001597c:	83 c0 01             	add    eax,0x1
c001597f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015984:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015989:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001598c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015991:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015994:	50                   	push   eax
c0015995:	68 6c 81 02 c0       	push   0xc002816c
c001599a:	e8 a1 92 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001599f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159a4:	83 c4 10             	add    esp,0x10
c00159a7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00159ae:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c00159b3:	85 c0                	test   eax,eax
c00159b5:	74 65                	je     c0015a1c <terminateTask(int)+0xcc>
c00159b7:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c00159be:	83 ec 0c             	sub    esp,0xc
c00159c1:	50                   	push   eax
c00159c2:	e8 01 fb ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c00159c7:	83 c4 10             	add    esp,0x10
c00159ca:	66 90                	xchg   ax,ax
c00159cc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159d1:	83 e8 01             	sub    eax,0x1
c00159d4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159d9:	75 01                	jne    c00159dc <terminateTask(int)+0x8c>
c00159db:	fb                   	sti    
c00159dc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00159e1:	83 e8 01             	sub    eax,0x1
c00159e4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00159e9:	75 09                	jne    c00159f4 <terminateTask(int)+0xa4>
c00159eb:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00159f2:	75 3c                	jne    c0015a30 <terminateTask(int)+0xe0>
c00159f4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159f9:	83 e8 01             	sub    eax,0x1
c00159fc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a01:	75 01                	jne    c0015a04 <terminateTask(int)+0xb4>
c0015a03:	fb                   	sti    
c0015a04:	fa                   	cli    
c0015a05:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a0a:	83 c0 01             	add    eax,0x1
c0015a0d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a12:	66 90                	xchg   ax,ax
c0015a14:	e8 b7 f5 ff ff       	call   c0014fd0 <schedule()>
c0015a19:	eb d9                	jmp    c00159f4 <terminateTask(int)+0xa4>
c0015a1b:	90                   	nop
c0015a1c:	83 ec 0c             	sub    esp,0xc
c0015a1f:	68 52 11 02 c0       	push   0xc0021152
c0015a24:	e8 28 4f ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0015a29:	83 c4 10             	add    esp,0x10
c0015a2c:	eb 9e                	jmp    c00159cc <terminateTask(int)+0x7c>
c0015a2e:	66 90                	xchg   ax,ax
c0015a30:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015a3a:	eb d8                	jmp    c0015a14 <terminateTask(int)+0xc4>

c0015a3c <Thr::terminateFromIRQ(int)>:
c0015a3c:	83 ec 18             	sub    esp,0x18
c0015a3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a43:	50                   	push   eax
c0015a44:	e8 07 ff ff ff       	call   c0015950 <terminateTask(int)>
c0015a49:	90                   	nop
c0015a4a:	66 90                	xchg   ax,ax

c0015a4c <Semaphore::release()>:
c0015a4c:	83 ec 0c             	sub    esp,0xc
c0015a4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a53:	fa                   	cli    
c0015a54:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a59:	83 c0 01             	add    eax,0x1
c0015a5c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a61:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a66:	8d 48 01             	lea    ecx,[eax+0x1]
c0015a69:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015a6f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015a72:	85 c9                	test   ecx,ecx
c0015a74:	74 42                	je     c0015ab8 <Semaphore::release()+0x6c>
c0015a76:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015a79:	83 ec 0c             	sub    esp,0xc
c0015a7c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015a7f:	51                   	push   ecx
c0015a80:	e8 43 fa ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c0015a85:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a8a:	83 c4 10             	add    esp,0x10
c0015a8d:	83 e8 01             	sub    eax,0x1
c0015a90:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a95:	85 c0                	test   eax,eax
c0015a97:	75 0b                	jne    c0015aa4 <Semaphore::release()+0x58>
c0015a99:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015a9e:	85 c0                	test   eax,eax
c0015aa0:	75 22                	jne    c0015ac4 <Semaphore::release()+0x78>
c0015aa2:	66 90                	xchg   ax,ax
c0015aa4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015aa9:	83 e8 01             	sub    eax,0x1
c0015aac:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ab1:	75 01                	jne    c0015ab4 <Semaphore::release()+0x68>
c0015ab3:	fb                   	sti    
c0015ab4:	83 c4 0c             	add    esp,0xc
c0015ab7:	c3                   	ret    
c0015ab8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015abb:	83 e9 01             	sub    ecx,0x1
c0015abe:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015ac1:	eb cd                	jmp    c0015a90 <Semaphore::release()+0x44>
c0015ac3:	90                   	nop
c0015ac4:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015ace:	e8 fd f4 ff ff       	call   c0014fd0 <schedule()>
c0015ad3:	eb cf                	jmp    c0015aa4 <Semaphore::release()+0x58>
c0015ad5:	8d 76 00             	lea    esi,[esi+0x0]

c0015ad8 <__static_initialization_and_destruction_0(int, int)>:
c0015ad8:	83 ec 0c             	sub    esp,0xc
c0015adb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015ae0:	0f 85 8e 00 00 00    	jne    c0015b74 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015ae6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015aee:	0f 85 80 00 00 00    	jne    c0015b74 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015af4:	83 ec 0c             	sub    esp,0xc
c0015af7:	68 84 81 02 c0       	push   0xc0028184
c0015afc:	e8 f3 93 00 00       	call   c001eef4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b01:	83 c4 10             	add    esp,0x10
c0015b04:	83 ec 04             	sub    esp,0x4
c0015b07:	68 ec 1d 02 c0       	push   0xc0021dec
c0015b0c:	68 84 81 02 c0       	push   0xc0028184
c0015b11:	68 a4 ee 01 c0       	push   0xc001eea4
c0015b16:	e8 e8 4c ff ff       	call   c000a803 <__cxa_atexit>
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	83 ec 0c             	sub    esp,0xc
c0015b21:	68 78 81 02 c0       	push   0xc0028178
c0015b26:	e8 c9 93 00 00       	call   c001eef4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b2b:	83 c4 10             	add    esp,0x10
c0015b2e:	83 ec 04             	sub    esp,0x4
c0015b31:	68 ec 1d 02 c0       	push   0xc0021dec
c0015b36:	68 78 81 02 c0       	push   0xc0028178
c0015b3b:	68 a4 ee 01 c0       	push   0xc001eea4
c0015b40:	e8 be 4c ff ff       	call   c000a803 <__cxa_atexit>
c0015b45:	83 c4 10             	add    esp,0x10
c0015b48:	83 ec 0c             	sub    esp,0xc
c0015b4b:	68 6c 81 02 c0       	push   0xc002816c
c0015b50:	e8 9f 93 00 00       	call   c001eef4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b55:	83 c4 10             	add    esp,0x10
c0015b58:	83 ec 04             	sub    esp,0x4
c0015b5b:	68 ec 1d 02 c0       	push   0xc0021dec
c0015b60:	68 6c 81 02 c0       	push   0xc002816c
c0015b65:	68 a4 ee 01 c0       	push   0xc001eea4
c0015b6a:	e8 94 4c ff ff       	call   c000a803 <__cxa_atexit>
c0015b6f:	83 c4 10             	add    esp,0x10
c0015b72:	66 90                	xchg   ax,ax
c0015b74:	90                   	nop
c0015b75:	83 c4 0c             	add    esp,0xc
c0015b78:	c3                   	ret    
c0015b79:	8d 76 00             	lea    esi,[esi+0x0]

c0015b7c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015b7c:	83 ec 0c             	sub    esp,0xc
c0015b7f:	83 ec 08             	sub    esp,0x8
c0015b82:	68 ff ff 00 00       	push   0xffff
c0015b87:	6a 01                	push   0x1
c0015b89:	e8 4a ff ff ff       	call   c0015ad8 <__static_initialization_and_destruction_0(int, int)>
c0015b8e:	83 c4 10             	add    esp,0x10
c0015b91:	83 c4 0c             	add    esp,0xc
c0015b94:	c3                   	ret    

c0015b95 <Vm::inbv(unsigned short)>:
c0015b95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b99:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015b9e:	75 06                	jne    c0015ba6 <Vm::inbv(unsigned short)+0x11>
c0015ba0:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015ba5:	c3                   	ret    
c0015ba6:	ec                   	in     al,dx
c0015ba7:	c3                   	ret    

c0015ba8 <Vm::outbv(unsigned short, unsigned char)>:
c0015ba8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015bac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015bb0:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015bb5:	75 25                	jne    c0015bdc <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015bb7:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015bbd:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015bc3:	8d 51 01             	lea    edx,[ecx+0x1]
c0015bc6:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015bcc:	83 fa 20             	cmp    edx,0x20
c0015bcf:	75 0c                	jne    c0015bdd <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015bd1:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015bdb:	c3                   	ret    
c0015bdc:	ee                   	out    dx,al
c0015bdd:	c3                   	ret    

c0015bde <Vm::realToLinear(unsigned short, unsigned short)>:
c0015bde:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015be3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015be8:	c1 e0 04             	shl    eax,0x4
c0015beb:	01 d0                	add    eax,edx
c0015bed:	c3                   	ret    

c0015bee <Vm::getSegment(unsigned int)>:
c0015bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bf2:	c1 e8 10             	shr    eax,0x10
c0015bf5:	c3                   	ret    

c0015bf6 <Vm::getOffset(unsigned int)>:
c0015bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bfa:	c3                   	ret    

c0015bfb <Vm::mainloop2()>:
c0015bfb:	83 ec 18             	sub    esp,0x18
c0015bfe:	fa                   	cli    
c0015bff:	6a 02                	push   0x2
c0015c01:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c07:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015c0e:	e8 95 f5 ff ff       	call   c00151a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c18:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c1c:	52                   	push   edx
c0015c1d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c21:	52                   	push   edx
c0015c22:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015c26:	52                   	push   edx
c0015c27:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015c2b:	50                   	push   eax
c0015c2c:	e8 de a5 fe ff       	call   c000020f <goToVM86>
c0015c31:	83 c4 2c             	add    esp,0x2c
c0015c34:	c3                   	ret    

c0015c35 <Vm::mainVm8086Loop(void*)>:
c0015c35:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c3a:	48                   	dec    eax
c0015c3b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015c40:	75 01                	jne    c0015c43 <Vm::mainVm8086Loop(void*)+0xe>
c0015c42:	fb                   	sti    
c0015c43:	eb b6                	jmp    c0015bfb <Vm::mainloop2()>

c0015c45 <Vm::mainloop3(unsigned long)>:
c0015c45:	83 ec 18             	sub    esp,0x18
c0015c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c4c:	fa                   	cli    
c0015c4d:	6a 02                	push   0x2
c0015c4f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c55:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015c5c:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015c61:	e8 42 f5 ff ff       	call   c00151a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c66:	83 c4 1c             	add    esp,0x1c
c0015c69:	eb 90                	jmp    c0015bfb <Vm::mainloop2()>

c0015c6b <Vm::initialise8086()>:
c0015c6b:	83 ec 0c             	sub    esp,0xc
c0015c6e:	68 80 00 00 00       	push   0x80
c0015c73:	6a 00                	push   0x0
c0015c75:	68 35 5c 01 c0       	push   0xc0015c35
c0015c7a:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015c80:	e8 ff f0 ff ff       	call   c0014d84 <Process::createThread(void (*)(void*), void*, int)>
c0015c85:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015c8c:	68 00 01 00 00       	push   0x100
c0015c91:	6a 00                	push   0x0
c0015c93:	6a 00                	push   0x0
c0015c95:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015c9a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015c9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015ca5:	e8 54 43 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015caa:	83 c4 2c             	add    esp,0x2c
c0015cad:	c3                   	ret    

c0015cae <Vm::finish8086()>:
c0015cae:	53                   	push   ebx
c0015caf:	83 ec 08             	sub    esp,0x8
c0015cb2:	fa                   	cli    
c0015cb3:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015cb9:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015cc0:	75 15                	jne    c0015cd7 <Vm::finish8086()+0x29>
c0015cc2:	e8 09 f3 ff ff       	call   c0014fd0 <schedule()>
c0015cc7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ccc:	48                   	dec    eax
c0015ccd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cd2:	75 de                	jne    c0015cb2 <Vm::finish8086()+0x4>
c0015cd4:	fb                   	sti    
c0015cd5:	eb db                	jmp    c0015cb2 <Vm::finish8086()+0x4>
c0015cd7:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015cde:	83 ec 0c             	sub    esp,0xc
c0015ce1:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015ce7:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015ced:	e8 d6 f7 ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c0015cf2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cf7:	83 c4 10             	add    esp,0x10
c0015cfa:	8d 50 ff             	lea    edx,[eax-0x1]
c0015cfd:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d03:	85 d2                	test   edx,edx
c0015d05:	75 01                	jne    c0015d08 <Vm::finish8086()+0x5a>
c0015d07:	fb                   	sti    
c0015d08:	83 c4 08             	add    esp,0x8
c0015d0b:	89 d8                	mov    eax,ebx
c0015d0d:	5b                   	pop    ebx
c0015d0e:	c3                   	ret    

c0015d0f <Vm::getOutput8086(unsigned char*)>:
c0015d0f:	57                   	push   edi
c0015d10:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015d16:	56                   	push   esi
c0015d17:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d1c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d22:	5e                   	pop    esi
c0015d23:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015d28:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d32:	5f                   	pop    edi
c0015d33:	c3                   	ret    

c0015d34 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015d34:	55                   	push   ebp
c0015d35:	57                   	push   edi
c0015d36:	56                   	push   esi
c0015d37:	53                   	push   ebx
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015d3f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015d43:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015d47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015d4b:	fa                   	cli    
c0015d4c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d52:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015d59:	75 15                	jne    c0015d70 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015d5b:	e8 70 f2 ff ff       	call   c0014fd0 <schedule()>
c0015d60:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d65:	48                   	dec    eax
c0015d66:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d6b:	75 de                	jne    c0015d4b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015d6d:	fb                   	sti    
c0015d6e:	eb db                	jmp    c0015d4b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015d70:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d7a:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015d7f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015d83:	0f b7 ff             	movzx  edi,di
c0015d86:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015d8a:	0f b7 f6             	movzx  esi,si
c0015d8d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015d91:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015d95:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015d99:	50                   	push   eax
c0015d9a:	6a 20                	push   0x20
c0015d9c:	6a 00                	push   0x0
c0015d9e:	68 e0 81 02 c0       	push   0xc00281e0
c0015da3:	e8 48 a7 fe ff       	call   c00004f0 <memset>
c0015da8:	5a                   	pop    edx
c0015da9:	59                   	pop    ecx
c0015daa:	57                   	push   edi
c0015dab:	56                   	push   esi
c0015dac:	e8 2d fe ff ff       	call   c0015bde <Vm::realToLinear(unsigned short, unsigned short)>
c0015db1:	83 c4 10             	add    esp,0x10
c0015db4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015db8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015dbc:	89 c7                	mov    edi,eax
c0015dbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015dc0:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015dc7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015dcc:	48                   	dec    eax
c0015dcd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dd2:	75 01                	jne    c0015dd5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015dd4:	fb                   	sti    
c0015dd5:	83 ec 0c             	sub    esp,0xc
c0015dd8:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015dde:	e8 e5 f6 ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c0015de3:	83 c4 1c             	add    esp,0x1c
c0015de6:	b0 01                	mov    al,0x1
c0015de8:	5b                   	pop    ebx
c0015de9:	5e                   	pop    esi
c0015dea:	5f                   	pop    edi
c0015deb:	5d                   	pop    ebp
c0015dec:	c3                   	ret    

c0015ded <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015ded:	55                   	push   ebp
c0015dee:	57                   	push   edi
c0015def:	56                   	push   esi
c0015df0:	53                   	push   ebx
c0015df1:	83 ec 2c             	sub    esp,0x2c
c0015df4:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015df8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015dfc:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015e00:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015e04:	fa                   	cli    
c0015e05:	8a 1d c5 81 02 c0    	mov    bl,BYTE PTR ds:0xc00281c5
c0015e0b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e11:	84 db                	test   bl,bl
c0015e13:	75 1d                	jne    c0015e32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x45>
c0015e15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015e19:	e8 b2 f1 ff ff       	call   c0014fd0 <schedule()>
c0015e1e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e27:	48                   	dec    eax
c0015e28:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e2d:	75 d5                	jne    c0015e04 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e2f:	fb                   	sti    
c0015e30:	eb d2                	jmp    c0015e04 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e32:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e3c:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015e41:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015e45:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0015e49:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015e4d:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015e51:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e55:	50                   	push   eax
c0015e56:	6a 20                	push   0x20
c0015e58:	6a 00                	push   0x0
c0015e5a:	68 e0 81 02 c0       	push   0xc00281e0
c0015e5f:	e8 8c a6 fe ff       	call   c00004f0 <memset>
c0015e64:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015e6b:	e8 5b 1c ff ff       	call   c0007acb <malloc>
c0015e70:	83 c4 0c             	add    esp,0xc
c0015e73:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015e79:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e7d:	89 c5                	mov    ebp,eax
c0015e7f:	50                   	push   eax
c0015e80:	e8 75 50 ff ff       	call   c000aefa <File::File(char const*, Process*)>
c0015e85:	83 c4 10             	add    esp,0x10
c0015e88:	85 ed                	test   ebp,ebp
c0015e8a:	75 0a                	jne    c0015e96 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0015e8c:	83 ec 0c             	sub    esp,0xc
c0015e8f:	68 80 12 02 c0       	push   0xc0021280
c0015e94:	eb 2b                	jmp    c0015ec1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0015e96:	50                   	push   eax
c0015e97:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015e9b:	50                   	push   eax
c0015e9c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015ea0:	50                   	push   eax
c0015ea1:	55                   	push   ebp
c0015ea2:	e8 bb 53 ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c0015ea7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015eab:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015eaf:	83 c4 10             	add    esp,0x10
c0015eb2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015eb7:	74 27                	je     c0015ee0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf3>
c0015eb9:	83 ec 0c             	sub    esp,0xc
c0015ebc:	68 94 12 02 c0       	push   0xc0021294
c0015ec1:	e8 0f a9 ff ff       	call   c00107d5 <KePanic(char const*)>
c0015ec6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ecb:	83 c4 10             	add    esp,0x10
c0015ece:	48                   	dec    eax
c0015ecf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ed4:	85 c0                	test   eax,eax
c0015ed6:	75 01                	jne    c0015ed9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015ed8:	fb                   	sti    
c0015ed9:	31 db                	xor    ebx,ebx
c0015edb:	e9 90 00 00 00       	jmp    c0015f70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015ee0:	51                   	push   ecx
c0015ee1:	51                   	push   ecx
c0015ee2:	6a 01                	push   0x1
c0015ee4:	55                   	push   ebp
c0015ee5:	e8 cc 50 ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0015eea:	83 c4 10             	add    esp,0x10
c0015eed:	85 c0                	test   eax,eax
c0015eef:	74 26                	je     c0015f17 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12a>
c0015ef1:	83 ec 0c             	sub    esp,0xc
c0015ef4:	68 ad 12 02 c0       	push   0xc00212ad
c0015ef9:	e8 d7 a8 ff ff       	call   c00107d5 <KePanic(char const*)>
c0015efe:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f03:	83 c4 10             	add    esp,0x10
c0015f06:	48                   	dec    eax
c0015f07:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f0c:	85 c0                	test   eax,eax
c0015f0e:	75 c9                	jne    c0015ed9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015f10:	fb                   	sti    
c0015f11:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0015f15:	eb 59                	jmp    c0015f70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015f17:	50                   	push   eax
c0015f18:	0f b7 ff             	movzx  edi,di
c0015f1b:	50                   	push   eax
c0015f1c:	0f b7 f6             	movzx  esi,si
c0015f1f:	57                   	push   edi
c0015f20:	56                   	push   esi
c0015f21:	e8 b8 fc ff ff       	call   c0015bde <Vm::realToLinear(unsigned short, unsigned short)>
c0015f26:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015f29:	5a                   	pop    edx
c0015f2a:	8d 74 24 20          	lea    esi,[esp+0x20]
c0015f2e:	56                   	push   esi
c0015f2f:	50                   	push   eax
c0015f30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f34:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f38:	55                   	push   ebp
c0015f39:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015f3c:	83 c4 14             	add    esp,0x14
c0015f3f:	55                   	push   ebp
c0015f40:	e8 cf 50 ff ff       	call   c000b014 <File::close()>
c0015f45:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f4a:	83 c4 10             	add    esp,0x10
c0015f4d:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015f54:	48                   	dec    eax
c0015f55:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f5a:	85 c0                	test   eax,eax
c0015f5c:	75 01                	jne    c0015f5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x172>
c0015f5e:	fb                   	sti    
c0015f5f:	83 ec 0c             	sub    esp,0xc
c0015f62:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015f68:	e8 5b f5 ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c0015f6d:	83 c4 10             	add    esp,0x10
c0015f70:	83 c4 2c             	add    esp,0x2c
c0015f73:	88 d8                	mov    al,bl
c0015f75:	5b                   	pop    ebx
c0015f76:	5e                   	pop    esi
c0015f77:	5f                   	pop    edi
c0015f78:	5d                   	pop    ebp
c0015f79:	c3                   	ret    

c0015f7a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015f7a:	57                   	push   edi
c0015f7b:	56                   	push   esi
c0015f7c:	53                   	push   ebx
c0015f7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f85:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015f89:	83 e8 06             	sub    eax,0x6
c0015f8c:	0f b7 c0             	movzx  eax,ax
c0015f8f:	50                   	push   eax
c0015f90:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015f95:	50                   	push   eax
c0015f96:	e8 43 fc ff ff       	call   c0015bde <Vm::realToLinear(unsigned short, unsigned short)>
c0015f9b:	5a                   	pop    edx
c0015f9c:	5e                   	pop    esi
c0015f9d:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015fa0:	8d 56 fa             	lea    edx,[esi-0x6]
c0015fa3:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0015fa6:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015fac:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015faf:	8d 56 02             	lea    edx,[esi+0x2]
c0015fb2:	66 89 10             	mov    WORD PTR [eax],dx
c0015fb5:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015fb8:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015fbc:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0015fbf:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0015fc3:	89 d6                	mov    esi,edx
c0015fc5:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0015fcb:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c0015fd1:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0015fd5:	74 05                	je     c0015fdc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c0015fd7:	80 ce 02             	or     dh,0x2
c0015fda:	89 d6                	mov    esi,edx
c0015fdc:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015fe0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fe5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015fe9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015ff1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015ff4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015ffc:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0015fff:	5b                   	pop    ebx
c0016000:	5e                   	pop    esi
c0016001:	5f                   	pop    edi
c0016002:	c3                   	ret    

c0016003 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016003:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016008:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001600d:	c1 e0 04             	shl    eax,0x4
c0016010:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016013:	c3                   	ret    

c0016014 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016014:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016019:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001601e:	c1 e0 04             	shl    eax,0x4
c0016021:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016025:	c3                   	ret    

c0016026 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016026:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001602b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016030:	c1 e0 04             	shl    eax,0x4
c0016033:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016036:	c3                   	ret    

c0016037 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016037:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001603c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016041:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016045:	c1 e0 04             	shl    eax,0x4
c0016048:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001604b:	c3                   	ret    

c001604c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001604c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016051:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016056:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001605a:	c1 e0 04             	shl    eax,0x4
c001605d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016061:	c3                   	ret    

c0016062 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016062:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016067:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001606c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016070:	c1 e0 04             	shl    eax,0x4
c0016073:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016076:	c3                   	ret    

c0016077 <Vm::faultHandler(regs*)>:
c0016077:	55                   	push   ebp
c0016078:	57                   	push   edi
c0016079:	56                   	push   esi
c001607a:	53                   	push   ebx
c001607b:	83 ec 2c             	sub    esp,0x2c
c001607e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016082:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016085:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016089:	0f b7 f8             	movzx  edi,ax
c001608c:	0f b7 c0             	movzx  eax,ax
c001608f:	52                   	push   edx
c0016090:	50                   	push   eax
c0016091:	e8 48 fb ff ff       	call   c0015bde <Vm::realToLinear(unsigned short, unsigned short)>
c0016096:	5a                   	pop    edx
c0016097:	59                   	pop    ecx
c0016098:	89 c1                	mov    ecx,eax
c001609a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001609d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160a1:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00160a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160aa:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00160ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160b1:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00160b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00160c2:	e8 17 fb ff ff       	call   c0015bde <Vm::realToLinear(unsigned short, unsigned short)>
c00160c7:	5e                   	pop    esi
c00160c8:	be 06 00 00 00       	mov    esi,0x6
c00160cd:	5d                   	pop    ebp
c00160ce:	31 ed                	xor    ebp,ebp
c00160d0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00160d5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00160d8:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00160de:	0f 84 54 02 00 00    	je     c0016338 <Vm::faultHandler(regs*)+0x2c1>
c00160e4:	0f 87 94 00 00 00    	ja     c001617e <Vm::faultHandler(regs*)+0x107>
c00160ea:	83 fa 66             	cmp    edx,0x66
c00160ed:	0f 84 c2 01 00 00    	je     c00162b5 <Vm::faultHandler(regs*)+0x23e>
c00160f3:	77 47                	ja     c001613c <Vm::faultHandler(regs*)+0xc5>
c00160f5:	83 fa 36             	cmp    edx,0x36
c00160f8:	0f 84 aa 01 00 00    	je     c00162a8 <Vm::faultHandler(regs*)+0x231>
c00160fe:	77 1a                	ja     c001611a <Vm::faultHandler(regs*)+0xa3>
c0016100:	83 fa 26             	cmp    edx,0x26
c0016103:	0f 84 78 01 00 00    	je     c0016281 <Vm::faultHandler(regs*)+0x20a>
c0016109:	83 fa 2e             	cmp    edx,0x2e
c001610c:	0f 85 07 06 00 00    	jne    c0016719 <Vm::faultHandler(regs*)+0x6a2>
c0016112:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016115:	31 f6                	xor    esi,esi
c0016117:	41                   	inc    ecx
c0016118:	eb bb                	jmp    c00160d5 <Vm::faultHandler(regs*)+0x5e>
c001611a:	83 fa 64             	cmp    edx,0x64
c001611d:	0f 84 6b 01 00 00    	je     c001628e <Vm::faultHandler(regs*)+0x217>
c0016123:	0f 87 72 01 00 00    	ja     c001629b <Vm::faultHandler(regs*)+0x224>
c0016129:	83 fa 3e             	cmp    edx,0x3e
c001612c:	0f 85 e7 05 00 00    	jne    c0016719 <Vm::faultHandler(regs*)+0x6a2>
c0016132:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016135:	be 01 00 00 00       	mov    esi,0x1
c001613a:	eb db                	jmp    c0016117 <Vm::faultHandler(regs*)+0xa0>
c001613c:	83 fa 6d             	cmp    edx,0x6d
c001613f:	0f 84 14 03 00 00    	je     c0016459 <Vm::faultHandler(regs*)+0x3e2>
c0016145:	77 17                	ja     c001615e <Vm::faultHandler(regs*)+0xe7>
c0016147:	83 fa 67             	cmp    edx,0x67
c001614a:	0f 84 72 01 00 00    	je     c00162c2 <Vm::faultHandler(regs*)+0x24b>
c0016150:	83 fa 6c             	cmp    edx,0x6c
c0016153:	0f 84 91 02 00 00    	je     c00163ea <Vm::faultHandler(regs*)+0x373>
c0016159:	e9 bb 05 00 00       	jmp    c0016719 <Vm::faultHandler(regs*)+0x6a2>
c001615e:	83 fa 6f             	cmp    edx,0x6f
c0016161:	0f 84 20 04 00 00    	je     c0016587 <Vm::faultHandler(regs*)+0x510>
c0016167:	0f 82 82 03 00 00    	jb     c00164ef <Vm::faultHandler(regs*)+0x478>
c001616d:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016173:	0f 84 56 01 00 00    	je     c00162cf <Vm::faultHandler(regs*)+0x258>
c0016179:	e9 9b 05 00 00       	jmp    c0016719 <Vm::faultHandler(regs*)+0x6a2>
c001617e:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016184:	0f 84 37 05 00 00    	je     c00166c1 <Vm::faultHandler(regs*)+0x64a>
c001618a:	0f 87 89 00 00 00    	ja     c0016219 <Vm::faultHandler(regs*)+0x1a2>
c0016190:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016196:	0f 84 b6 04 00 00    	je     c0016652 <Vm::faultHandler(regs*)+0x5db>
c001619c:	77 58                	ja     c00161f6 <Vm::faultHandler(regs*)+0x17f>
c001619e:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00161a4:	0f 84 ee 01 00 00    	je     c0016398 <Vm::faultHandler(regs*)+0x321>
c00161aa:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00161b0:	0f 85 63 05 00 00    	jne    c0016719 <Vm::faultHandler(regs*)+0x6a2>
c00161b6:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00161b9:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00161bc:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00161c0:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00161c3:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00161c7:	81 ca 00 02 02 00    	or     edx,0x20200
c00161cd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00161d0:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c00161d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00161da:	c1 e8 09             	shr    eax,0x9
c00161dd:	83 e0 01             	and    eax,0x1
c00161e0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00161e3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00161e6:	83 c0 06             	add    eax,0x6
c00161e9:	25 ff ff 00 00       	and    eax,0xffff
c00161ee:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00161f1:	e9 1f 05 00 00       	jmp    c0016715 <Vm::faultHandler(regs*)+0x69e>
c00161f6:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00161fc:	0f 84 95 04 00 00    	je     c0016697 <Vm::faultHandler(regs*)+0x620>
c0016202:	0f 82 66 04 00 00    	jb     c001666e <Vm::faultHandler(regs*)+0x5f7>
c0016208:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001620e:	0f 84 9a 04 00 00    	je     c00166ae <Vm::faultHandler(regs*)+0x637>
c0016214:	e9 00 05 00 00       	jmp    c0016719 <Vm::faultHandler(regs*)+0x6a2>
c0016219:	81 fa ef 00 00 00    	cmp    edx,0xef
c001621f:	0f 84 dd 04 00 00    	je     c0016702 <Vm::faultHandler(regs*)+0x68b>
c0016225:	77 2e                	ja     c0016255 <Vm::faultHandler(regs*)+0x1de>
c0016227:	81 fa ed 00 00 00    	cmp    edx,0xed
c001622d:	0f 84 aa 04 00 00    	je     c00166dd <Vm::faultHandler(regs*)+0x666>
c0016233:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016239:	0f 85 da 04 00 00    	jne    c0016719 <Vm::faultHandler(regs*)+0x6a2>
c001623f:	50                   	push   eax
c0016240:	50                   	push   eax
c0016241:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016245:	50                   	push   eax
c0016246:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001624a:	50                   	push   eax
c001624b:	e8 58 f9 ff ff       	call   c0015ba8 <Vm::outbv(unsigned short, unsigned char)>
c0016250:	e9 a5 04 00 00       	jmp    c00166fa <Vm::faultHandler(regs*)+0x683>
c0016255:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001625b:	0f 84 6d 01 00 00    	je     c00163ce <Vm::faultHandler(regs*)+0x357>
c0016261:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016267:	0f 84 6f 01 00 00    	je     c00163dc <Vm::faultHandler(regs*)+0x365>
c001626d:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016273:	0f 85 a0 04 00 00    	jne    c0016719 <Vm::faultHandler(regs*)+0x6a2>
c0016279:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001627c:	e9 96 fe ff ff       	jmp    c0016117 <Vm::faultHandler(regs*)+0xa0>
c0016281:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016284:	be 02 00 00 00       	mov    esi,0x2
c0016289:	e9 89 fe ff ff       	jmp    c0016117 <Vm::faultHandler(regs*)+0xa0>
c001628e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016291:	be 03 00 00 00       	mov    esi,0x3
c0016296:	e9 7c fe ff ff       	jmp    c0016117 <Vm::faultHandler(regs*)+0xa0>
c001629b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001629e:	be 04 00 00 00       	mov    esi,0x4
c00162a3:	e9 6f fe ff ff       	jmp    c0016117 <Vm::faultHandler(regs*)+0xa0>
c00162a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162ab:	be 05 00 00 00       	mov    esi,0x5
c00162b0:	e9 62 fe ff ff       	jmp    c0016117 <Vm::faultHandler(regs*)+0xa0>
c00162b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162b8:	bd 01 00 00 00       	mov    ebp,0x1
c00162bd:	e9 55 fe ff ff       	jmp    c0016117 <Vm::faultHandler(regs*)+0xa0>
c00162c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162c5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00162ca:	e9 48 fe ff ff       	jmp    c0016117 <Vm::faultHandler(regs*)+0xa0>
c00162cf:	83 e5 01             	and    ebp,0x1
c00162d2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00162d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00162d9:	74 30                	je     c001630b <Vm::faultHandler(regs*)+0x294>
c00162db:	83 e9 04             	sub    ecx,0x4
c00162de:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00162e4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00162ea:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00162ed:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00162f0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00162f6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00162fa:	0f 84 12 04 00 00    	je     c0016712 <Vm::faultHandler(regs*)+0x69b>
c0016300:	80 ce 02             	or     dh,0x2
c0016303:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016306:	e9 07 04 00 00       	jmp    c0016712 <Vm::faultHandler(regs*)+0x69b>
c001630b:	83 e9 02             	sub    ecx,0x2
c001630e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016314:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016317:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001631b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016321:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016325:	74 05                	je     c001632c <Vm::faultHandler(regs*)+0x2b5>
c0016327:	80 ce 02             	or     dh,0x2
c001632a:	eb 03                	jmp    c001632f <Vm::faultHandler(regs*)+0x2b8>
c001632c:	80 e6 fd             	and    dh,0xfd
c001632f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016333:	e9 da 03 00 00       	jmp    c0016712 <Vm::faultHandler(regs*)+0x69b>
c0016338:	83 e5 01             	and    ebp,0x1
c001633b:	74 2a                	je     c0016367 <Vm::faultHandler(regs*)+0x2f0>
c001633d:	8b 10                	mov    edx,DWORD PTR [eax]
c001633f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016345:	81 ca 00 02 02 00    	or     edx,0x20200
c001634b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001634e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016350:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016356:	c1 e8 09             	shr    eax,0x9
c0016359:	83 e0 01             	and    eax,0x1
c001635c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001635f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016362:	83 c0 04             	add    eax,0x4
c0016365:	eb 24                	jmp    c001638b <Vm::faultHandler(regs*)+0x314>
c0016367:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001636a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016370:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016373:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016376:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001637c:	c1 e8 09             	shr    eax,0x9
c001637f:	83 e0 01             	and    eax,0x1
c0016382:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016385:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016388:	83 c0 02             	add    eax,0x2
c001638b:	25 ff ff 00 00       	and    eax,0xffff
c0016390:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016393:	e9 7a 03 00 00       	jmp    c0016712 <Vm::faultHandler(regs*)+0x69b>
c0016398:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001639c:	3d ee 00 00 00       	cmp    eax,0xee
c00163a1:	75 10                	jne    c00163b3 <Vm::faultHandler(regs*)+0x33c>
c00163a3:	83 ec 0c             	sub    esp,0xc
c00163a6:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00163a9:	e8 97 f8 ff ff       	call   c0015c45 <Vm::mainloop3(unsigned long)>
c00163ae:	e9 4a 03 00 00       	jmp    c00166fd <Vm::faultHandler(regs*)+0x686>
c00163b3:	83 ec 0c             	sub    esp,0xc
c00163b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00163ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163be:	51                   	push   ecx
c00163bf:	50                   	push   eax
c00163c0:	53                   	push   ebx
c00163c1:	e8 b4 fb ff ff       	call   c0015f7a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00163c6:	83 c4 20             	add    esp,0x20
c00163c9:	e9 47 03 00 00       	jmp    c0016715 <Vm::faultHandler(regs*)+0x69e>
c00163ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00163d7:	e9 36 03 00 00       	jmp    c0016712 <Vm::faultHandler(regs*)+0x69b>
c00163dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163e1:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00163e5:	e9 28 03 00 00       	jmp    c0016712 <Vm::faultHandler(regs*)+0x69b>
c00163ea:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00163ef:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00163f2:	74 2b                	je     c001641f <Vm::faultHandler(regs*)+0x3a8>
c00163f4:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00163fb:	76 22                	jbe    c001641f <Vm::faultHandler(regs*)+0x3a8>
c00163fd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016401:	50                   	push   eax
c0016402:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016406:	50                   	push   eax
c0016407:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001640b:	50                   	push   eax
c001640c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016410:	50                   	push   eax
c0016411:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016415:	50                   	push   eax
c0016416:	6a 6c                	push   0x6c
c0016418:	6a 6c                	push   0x6c
c001641a:	e9 c0 01 00 00       	jmp    c00165df <Vm::faultHandler(regs*)+0x568>
c001641f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016423:	83 ec 0c             	sub    esp,0xc
c0016426:	0f b7 f6             	movzx  esi,si
c0016429:	50                   	push   eax
c001642a:	e8 66 f7 ff ff       	call   c0015b95 <Vm::inbv(unsigned short)>
c001642f:	83 c4 0c             	add    esp,0xc
c0016432:	0f b6 c0             	movzx  eax,al
c0016435:	50                   	push   eax
c0016436:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001643a:	50                   	push   eax
c001643b:	56                   	push   esi
c001643c:	e8 f6 fb ff ff       	call   c0016037 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016441:	83 c4 10             	add    esp,0x10
c0016444:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016447:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001644b:	74 03                	je     c0016450 <Vm::faultHandler(regs*)+0x3d9>
c001644d:	48                   	dec    eax
c001644e:	eb 01                	jmp    c0016451 <Vm::faultHandler(regs*)+0x3da>
c0016450:	40                   	inc    eax
c0016451:	0f b7 c0             	movzx  eax,ax
c0016454:	e9 8e 00 00 00       	jmp    c00164e7 <Vm::faultHandler(regs*)+0x470>
c0016459:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001645e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016461:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016464:	74 29                	je     c001648f <Vm::faultHandler(regs*)+0x418>
c0016466:	3d ff ff 00 00       	cmp    eax,0xffff
c001646b:	76 22                	jbe    c001648f <Vm::faultHandler(regs*)+0x418>
c001646d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016471:	50                   	push   eax
c0016472:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016476:	50                   	push   eax
c0016477:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001647b:	50                   	push   eax
c001647c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016480:	50                   	push   eax
c0016481:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016485:	50                   	push   eax
c0016486:	6a 6d                	push   0x6d
c0016488:	6a 6d                	push   0x6d
c001648a:	e9 50 01 00 00       	jmp    c00165df <Vm::faultHandler(regs*)+0x568>
c001648f:	83 e5 01             	and    ebp,0x1
c0016492:	0f b7 c8             	movzx  ecx,ax
c0016495:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016498:	0f b7 f6             	movzx  esi,si
c001649b:	74 1e                	je     c00164bb <Vm::faultHandler(regs*)+0x444>
c001649d:	ed                   	in     eax,dx
c001649e:	55                   	push   ebp
c001649f:	50                   	push   eax
c00164a0:	51                   	push   ecx
c00164a1:	56                   	push   esi
c00164a2:	e8 bb fb ff ff       	call   c0016062 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00164a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164aa:	83 c4 10             	add    esp,0x10
c00164ad:	8d 50 04             	lea    edx,[eax+0x4]
c00164b0:	83 e8 04             	sub    eax,0x4
c00164b3:	81 e2 ff ff 00 00    	and    edx,0xffff
c00164b9:	eb 20                	jmp    c00164db <Vm::faultHandler(regs*)+0x464>
c00164bb:	66 ed                	in     ax,dx
c00164bd:	57                   	push   edi
c00164be:	0f b7 c0             	movzx  eax,ax
c00164c1:	50                   	push   eax
c00164c2:	51                   	push   ecx
c00164c3:	56                   	push   esi
c00164c4:	e8 83 fb ff ff       	call   c001604c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00164c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164cc:	83 c4 10             	add    esp,0x10
c00164cf:	8d 50 02             	lea    edx,[eax+0x2]
c00164d2:	83 e8 02             	sub    eax,0x2
c00164d5:	81 e2 ff ff 00 00    	and    edx,0xffff
c00164db:	25 ff ff 00 00       	and    eax,0xffff
c00164e0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164e4:	0f 44 c2             	cmove  eax,edx
c00164e7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00164ea:	e9 23 02 00 00       	jmp    c0016712 <Vm::faultHandler(regs*)+0x69b>
c00164ef:	8d 46 ff             	lea    eax,[esi-0x1]
c00164f2:	0f b6 f0             	movzx  esi,al
c00164f5:	83 fe 05             	cmp    esi,0x5
c00164f8:	77 23                	ja     c001651d <Vm::faultHandler(regs*)+0x4a6>
c00164fa:	ff 24 b5 20 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdece0]
c0016501:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016506:	eb 15                	jmp    c001651d <Vm::faultHandler(regs*)+0x4a6>
c0016508:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001650c:	eb 0f                	jmp    c001651d <Vm::faultHandler(regs*)+0x4a6>
c001650e:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016512:	eb 09                	jmp    c001651d <Vm::faultHandler(regs*)+0x4a6>
c0016514:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016518:	eb 03                	jmp    c001651d <Vm::faultHandler(regs*)+0x4a6>
c001651a:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001651d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016522:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016525:	74 29                	je     c0016550 <Vm::faultHandler(regs*)+0x4d9>
c0016527:	3d ff ff 00 00       	cmp    eax,0xffff
c001652c:	76 22                	jbe    c0016550 <Vm::faultHandler(regs*)+0x4d9>
c001652e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016532:	50                   	push   eax
c0016533:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016537:	50                   	push   eax
c0016538:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001653c:	50                   	push   eax
c001653d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016541:	50                   	push   eax
c0016542:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016546:	50                   	push   eax
c0016547:	6a 6e                	push   0x6e
c0016549:	6a 6e                	push   0x6e
c001654b:	e9 8f 00 00 00       	jmp    c00165df <Vm::faultHandler(regs*)+0x568>
c0016550:	52                   	push   edx
c0016551:	0f b7 c0             	movzx  eax,ax
c0016554:	52                   	push   edx
c0016555:	50                   	push   eax
c0016556:	57                   	push   edi
c0016557:	e8 a7 fa ff ff       	call   c0016003 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001655c:	59                   	pop    ecx
c001655d:	5e                   	pop    esi
c001655e:	0f b6 c0             	movzx  eax,al
c0016561:	50                   	push   eax
c0016562:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016566:	50                   	push   eax
c0016567:	e8 3c f6 ff ff       	call   c0015ba8 <Vm::outbv(unsigned short, unsigned char)>
c001656c:	83 c4 10             	add    esp,0x10
c001656f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016572:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016576:	74 03                	je     c001657b <Vm::faultHandler(regs*)+0x504>
c0016578:	48                   	dec    eax
c0016579:	eb 01                	jmp    c001657c <Vm::faultHandler(regs*)+0x505>
c001657b:	40                   	inc    eax
c001657c:	0f b7 c0             	movzx  eax,ax
c001657f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016582:	e9 8b 01 00 00       	jmp    c0016712 <Vm::faultHandler(regs*)+0x69b>
c0016587:	8d 46 ff             	lea    eax,[esi-0x1]
c001658a:	0f b6 f0             	movzx  esi,al
c001658d:	83 fe 05             	cmp    esi,0x5
c0016590:	77 1e                	ja     c00165b0 <Vm::faultHandler(regs*)+0x539>
c0016592:	ff 24 b5 38 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdecc8]
c0016599:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001659d:	eb 11                	jmp    c00165b0 <Vm::faultHandler(regs*)+0x539>
c001659f:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00165a2:	eb 0c                	jmp    c00165b0 <Vm::faultHandler(regs*)+0x539>
c00165a4:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00165a7:	eb 07                	jmp    c00165b0 <Vm::faultHandler(regs*)+0x539>
c00165a9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00165ac:	eb 02                	jmp    c00165b0 <Vm::faultHandler(regs*)+0x539>
c00165ae:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00165b0:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00165b5:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00165b8:	74 37                	je     c00165f1 <Vm::faultHandler(regs*)+0x57a>
c00165ba:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00165c0:	76 2f                	jbe    c00165f1 <Vm::faultHandler(regs*)+0x57a>
c00165c2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00165c6:	50                   	push   eax
c00165c7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00165cb:	50                   	push   eax
c00165cc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165d0:	50                   	push   eax
c00165d1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165d5:	50                   	push   eax
c00165d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165da:	50                   	push   eax
c00165db:	6a 6f                	push   0x6f
c00165dd:	6a 6f                	push   0x6f
c00165df:	68 c6 12 02 c0       	push   0xc00212c6
c00165e4:	e8 68 43 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00165e9:	83 c4 20             	add    esp,0x20
c00165ec:	e9 86 01 00 00       	jmp    c0016777 <Vm::faultHandler(regs*)+0x700>
c00165f1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00165f4:	0f b7 d7             	movzx  edx,di
c00165f7:	0f b7 c6             	movzx  eax,si
c00165fa:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00165fd:	81 e1 00 04 00 00    	and    ecx,0x400
c0016603:	83 e5 01             	and    ebp,0x1
c0016606:	74 1c                	je     c0016624 <Vm::faultHandler(regs*)+0x5ad>
c0016608:	55                   	push   ebp
c0016609:	55                   	push   ebp
c001660a:	50                   	push   eax
c001660b:	52                   	push   edx
c001660c:	e8 15 fa ff ff       	call   c0016026 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016611:	83 c4 10             	add    esp,0x10
c0016614:	89 fa                	mov    edx,edi
c0016616:	ef                   	out    dx,eax
c0016617:	8d 46 04             	lea    eax,[esi+0x4]
c001661a:	83 ee 04             	sub    esi,0x4
c001661d:	25 ff ff 00 00       	and    eax,0xffff
c0016622:	eb 1b                	jmp    c001663f <Vm::faultHandler(regs*)+0x5c8>
c0016624:	55                   	push   ebp
c0016625:	55                   	push   ebp
c0016626:	50                   	push   eax
c0016627:	52                   	push   edx
c0016628:	e8 e7 f9 ff ff       	call   c0016014 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001662d:	83 c4 10             	add    esp,0x10
c0016630:	89 fa                	mov    edx,edi
c0016632:	66 ef                	out    dx,ax
c0016634:	8d 46 02             	lea    eax,[esi+0x2]
c0016637:	83 ee 02             	sub    esi,0x2
c001663a:	25 ff ff 00 00       	and    eax,0xffff
c001663f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016645:	85 c9                	test   ecx,ecx
c0016647:	0f 44 f0             	cmove  esi,eax
c001664a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001664d:	e9 c0 00 00 00       	jmp    c0016712 <Vm::faultHandler(regs*)+0x69b>
c0016652:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016659:	83 ec 0c             	sub    esp,0xc
c001665c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016660:	50                   	push   eax
c0016661:	e8 2f f5 ff ff       	call   c0015b95 <Vm::inbv(unsigned short)>
c0016666:	0f b6 c0             	movzx  eax,al
c0016669:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001666c:	eb 3a                	jmp    c00166a8 <Vm::faultHandler(regs*)+0x631>
c001666e:	83 e5 01             	and    ebp,0x1
c0016671:	74 07                	je     c001667a <Vm::faultHandler(regs*)+0x603>
c0016673:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016677:	ed                   	in     eax,dx
c0016678:	eb 14                	jmp    c001668e <Vm::faultHandler(regs*)+0x617>
c001667a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001667d:	66 31 f6             	xor    si,si
c0016680:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016683:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016687:	66 ed                	in     ax,dx
c0016689:	0f b7 c0             	movzx  eax,ax
c001668c:	09 f0                	or     eax,esi
c001668e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016691:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016695:	eb 7e                	jmp    c0016715 <Vm::faultHandler(regs*)+0x69e>
c0016697:	52                   	push   edx
c0016698:	52                   	push   edx
c0016699:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001669d:	50                   	push   eax
c001669e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166a2:	50                   	push   eax
c00166a3:	e8 00 f5 ff ff       	call   c0015ba8 <Vm::outbv(unsigned short, unsigned char)>
c00166a8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00166ac:	eb 4f                	jmp    c00166fd <Vm::faultHandler(regs*)+0x686>
c00166ae:	83 e5 01             	and    ebp,0x1
c00166b1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00166b4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166b8:	74 03                	je     c00166bd <Vm::faultHandler(regs*)+0x646>
c00166ba:	ef                   	out    dx,eax
c00166bb:	eb d4                	jmp    c0016691 <Vm::faultHandler(regs*)+0x61a>
c00166bd:	66 ef                	out    dx,ax
c00166bf:	eb d0                	jmp    c0016691 <Vm::faultHandler(regs*)+0x61a>
c00166c1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00166c5:	83 ec 0c             	sub    esp,0xc
c00166c8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166cf:	50                   	push   eax
c00166d0:	e8 c0 f4 ff ff       	call   c0015b95 <Vm::inbv(unsigned short)>
c00166d5:	0f b6 c0             	movzx  eax,al
c00166d8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00166db:	eb 1d                	jmp    c00166fa <Vm::faultHandler(regs*)+0x683>
c00166dd:	83 e5 01             	and    ebp,0x1
c00166e0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00166e3:	74 03                	je     c00166e8 <Vm::faultHandler(regs*)+0x671>
c00166e5:	ed                   	in     eax,dx
c00166e6:	eb 0d                	jmp    c00166f5 <Vm::faultHandler(regs*)+0x67e>
c00166e8:	66 ed                	in     ax,dx
c00166ea:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00166ed:	0f b7 c0             	movzx  eax,ax
c00166f0:	66 31 d2             	xor    dx,dx
c00166f3:	09 d0                	or     eax,edx
c00166f5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00166f8:	eb 18                	jmp    c0016712 <Vm::faultHandler(regs*)+0x69b>
c00166fa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166fd:	83 c4 10             	add    esp,0x10
c0016700:	eb 13                	jmp    c0016715 <Vm::faultHandler(regs*)+0x69e>
c0016702:	83 e5 01             	and    ebp,0x1
c0016705:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016708:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001670b:	74 03                	je     c0016710 <Vm::faultHandler(regs*)+0x699>
c001670d:	ef                   	out    dx,eax
c001670e:	eb 02                	jmp    c0016712 <Vm::faultHandler(regs*)+0x69b>
c0016710:	66 ef                	out    dx,ax
c0016712:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016715:	b0 01                	mov    al,0x1
c0016717:	eb 60                	jmp    c0016779 <Vm::faultHandler(regs*)+0x702>
c0016719:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001671d:	50                   	push   eax
c001671e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016722:	50                   	push   eax
c0016723:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016727:	50                   	push   eax
c0016728:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001672c:	50                   	push   eax
c001672d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016731:	50                   	push   eax
c0016732:	52                   	push   edx
c0016733:	52                   	push   edx
c0016734:	68 f3 12 02 c0       	push   0xc00212f3
c0016739:	e8 13 42 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001673e:	83 c4 20             	add    esp,0x20
c0016741:	83 ec 0c             	sub    esp,0xc
c0016744:	6a 60                	push   0x60
c0016746:	e8 4a f4 ff ff       	call   c0015b95 <Vm::inbv(unsigned short)>
c001674b:	83 c4 10             	add    esp,0x10
c001674e:	0f b6 d0             	movzx  edx,al
c0016751:	83 fa 1c             	cmp    edx,0x1c
c0016754:	74 05                	je     c001675b <Vm::faultHandler(regs*)+0x6e4>
c0016756:	83 fa 5a             	cmp    edx,0x5a
c0016759:	75 e6                	jne    c0016741 <Vm::faultHandler(regs*)+0x6ca>
c001675b:	0f b6 c0             	movzx  eax,al
c001675e:	83 f8 1c             	cmp    eax,0x1c
c0016761:	74 05                	je     c0016768 <Vm::faultHandler(regs*)+0x6f1>
c0016763:	83 f8 5a             	cmp    eax,0x5a
c0016766:	75 0f                	jne    c0016777 <Vm::faultHandler(regs*)+0x700>
c0016768:	83 ec 0c             	sub    esp,0xc
c001676b:	6a 60                	push   0x60
c001676d:	e8 23 f4 ff ff       	call   c0015b95 <Vm::inbv(unsigned short)>
c0016772:	83 c4 10             	add    esp,0x10
c0016775:	eb e4                	jmp    c001675b <Vm::faultHandler(regs*)+0x6e4>
c0016777:	31 c0                	xor    eax,eax
c0016779:	83 c4 2c             	add    esp,0x2c
c001677c:	5b                   	pop    ebx
c001677d:	5e                   	pop    esi
c001677e:	5f                   	pop    edi
c001677f:	5d                   	pop    ebp
c0016780:	c3                   	ret    

c0016781 <noCopro(unsigned long)>:
c0016781:	c3                   	ret    

c0016782 <nmiHandler(regs*, void*)>:
c0016782:	83 ec 0c             	sub    esp,0xc
c0016785:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001678a:	83 ec 0c             	sub    esp,0xc
c001678d:	50                   	push   eax
c001678e:	e8 3b 0b ff ff       	call   c00072ce <Computer::handleNMI()>
c0016793:	83 c4 10             	add    esp,0x10
c0016796:	90                   	nop
c0016797:	83 c4 0c             	add    esp,0xc
c001679a:	c3                   	ret    

c001679b <doubleFault(regs*, void*)>:
c001679b:	55                   	push   ebp
c001679c:	89 e5                	mov    ebp,esp
c001679e:	83 ec 08             	sub    esp,0x8
c00167a1:	83 ec 0c             	sub    esp,0xc
c00167a4:	68 50 13 02 c0       	push   0xc0021350
c00167a9:	e8 27 a0 ff ff       	call   c00107d5 <KePanic(char const*)>
c00167ae:	83 c4 10             	add    esp,0x10
c00167b1:	90                   	nop
c00167b2:	c9                   	leave  
c00167b3:	c3                   	ret    

c00167b4 <displayDebugInfo(regs*)>:
c00167b4:	83 ec 1c             	sub    esp,0x1c
c00167b7:	0f 20 c0             	mov    eax,cr0
c00167ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167be:	0f 20 d0             	mov    eax,cr2
c00167c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167c5:	0f 20 d8             	mov    eax,cr3
c00167c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167cc:	0f 20 e0             	mov    eax,cr4
c00167cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00167d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167d6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00167d9:	83 ec 08             	sub    esp,0x8
c00167dc:	50                   	push   eax
c00167dd:	68 6c 13 02 c0       	push   0xc002136c
c00167e2:	e8 6a 41 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00167e7:	83 c4 10             	add    esp,0x10
c00167ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ee:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00167f1:	83 ec 08             	sub    esp,0x8
c00167f4:	50                   	push   eax
c00167f5:	68 5d 13 02 c0       	push   0xc002135d
c00167fa:	e8 52 41 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00167ff:	83 c4 10             	add    esp,0x10
c0016802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016806:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016809:	83 ec 08             	sub    esp,0x8
c001680c:	50                   	push   eax
c001680d:	68 68 13 02 c0       	push   0xc0021368
c0016812:	e8 3a 41 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016817:	83 c4 10             	add    esp,0x10
c001681a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001681e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016821:	83 ec 08             	sub    esp,0x8
c0016824:	50                   	push   eax
c0016825:	68 77 13 02 c0       	push   0xc0021377
c001682a:	e8 22 41 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001682f:	83 c4 10             	add    esp,0x10
c0016832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016836:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016839:	83 ec 08             	sub    esp,0x8
c001683c:	50                   	push   eax
c001683d:	68 82 13 02 c0       	push   0xc0021382
c0016842:	e8 0a 41 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016847:	83 c4 10             	add    esp,0x10
c001684a:	83 ec 08             	sub    esp,0x8
c001684d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016851:	68 8d 13 02 c0       	push   0xc002138d
c0016856:	e8 f6 40 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001685b:	83 c4 10             	add    esp,0x10
c001685e:	83 ec 08             	sub    esp,0x8
c0016861:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016865:	68 98 13 02 c0       	push   0xc0021398
c001686a:	e8 e2 40 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001686f:	83 c4 10             	add    esp,0x10
c0016872:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016877:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001687d:	83 ec 0c             	sub    esp,0xc
c0016880:	50                   	push   eax
c0016881:	e8 d3 1e ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0016886:	83 c4 10             	add    esp,0x10
c0016889:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001688e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016894:	83 ec 08             	sub    esp,0x8
c0016897:	68 a3 13 02 c0       	push   0xc00213a3
c001689c:	50                   	push   eax
c001689d:	e8 f4 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00168a2:	83 c4 10             	add    esp,0x10
c00168a5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00168b4:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00168b7:	83 ec 08             	sub    esp,0x8
c00168ba:	52                   	push   edx
c00168bb:	50                   	push   eax
c00168bc:	e8 8f 21 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c00168c1:	83 c4 10             	add    esp,0x10
c00168c4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168c9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168cf:	83 ec 08             	sub    esp,0x8
c00168d2:	68 b1 13 02 c0       	push   0xc00213b1
c00168d7:	50                   	push   eax
c00168d8:	e8 b9 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00168dd:	83 c4 10             	add    esp,0x10
c00168e0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168eb:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00168f0:	8b 12                	mov    edx,DWORD PTR [edx]
c00168f2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00168f5:	83 c2 0c             	add    edx,0xc
c00168f8:	83 ec 08             	sub    esp,0x8
c00168fb:	52                   	push   edx
c00168fc:	50                   	push   eax
c00168fd:	e8 94 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016902:	83 c4 10             	add    esp,0x10
c0016905:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001690a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016910:	83 ec 08             	sub    esp,0x8
c0016913:	68 ba 13 02 c0       	push   0xc00213ba
c0016918:	50                   	push   eax
c0016919:	e8 78 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001691e:	83 c4 10             	add    esp,0x10
c0016921:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016926:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001692c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016930:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016933:	83 ec 08             	sub    esp,0x8
c0016936:	52                   	push   edx
c0016937:	50                   	push   eax
c0016938:	e8 13 21 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016945:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001694b:	83 ec 08             	sub    esp,0x8
c001694e:	68 c2 13 02 c0       	push   0xc00213c2
c0016953:	50                   	push   eax
c0016954:	e8 3d 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016959:	83 c4 10             	add    esp,0x10
c001695c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016961:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016967:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001696b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001696e:	83 ec 08             	sub    esp,0x8
c0016971:	52                   	push   edx
c0016972:	50                   	push   eax
c0016973:	e8 d8 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016978:	83 c4 10             	add    esp,0x10
c001697b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016980:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016986:	83 ec 08             	sub    esp,0x8
c0016989:	68 ca 13 02 c0       	push   0xc00213ca
c001698e:	50                   	push   eax
c001698f:	e8 02 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016994:	83 c4 10             	add    esp,0x10
c0016997:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001699c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169a2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169a6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00169a9:	83 ec 08             	sub    esp,0x8
c00169ac:	52                   	push   edx
c00169ad:	50                   	push   eax
c00169ae:	e8 9d 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c00169b3:	83 c4 10             	add    esp,0x10
c00169b6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169bb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169c1:	83 ec 08             	sub    esp,0x8
c00169c4:	68 d2 13 02 c0       	push   0xc00213d2
c00169c9:	50                   	push   eax
c00169ca:	e8 c7 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00169cf:	83 c4 10             	add    esp,0x10
c00169d2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169d7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169e1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00169e4:	83 ec 08             	sub    esp,0x8
c00169e7:	52                   	push   edx
c00169e8:	50                   	push   eax
c00169e9:	e8 62 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c00169ee:	83 c4 10             	add    esp,0x10
c00169f1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169f6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169fc:	83 ec 08             	sub    esp,0x8
c00169ff:	68 da 13 02 c0       	push   0xc00213da
c0016a04:	50                   	push   eax
c0016a05:	e8 8c 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a0a:	83 c4 10             	add    esp,0x10
c0016a0d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a12:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a1c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016a1f:	83 ec 08             	sub    esp,0x8
c0016a22:	52                   	push   edx
c0016a23:	50                   	push   eax
c0016a24:	e8 27 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a29:	83 c4 10             	add    esp,0x10
c0016a2c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a31:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a37:	83 ec 08             	sub    esp,0x8
c0016a3a:	68 e2 13 02 c0       	push   0xc00213e2
c0016a3f:	50                   	push   eax
c0016a40:	e8 51 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a45:	83 c4 10             	add    esp,0x10
c0016a48:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a4d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a57:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016a5a:	83 ec 08             	sub    esp,0x8
c0016a5d:	52                   	push   edx
c0016a5e:	50                   	push   eax
c0016a5f:	e8 ec 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a64:	83 c4 10             	add    esp,0x10
c0016a67:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a6c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a72:	83 ec 08             	sub    esp,0x8
c0016a75:	68 ea 13 02 c0       	push   0xc00213ea
c0016a7a:	50                   	push   eax
c0016a7b:	e8 16 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a80:	83 c4 10             	add    esp,0x10
c0016a83:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a8e:	83 ec 08             	sub    esp,0x8
c0016a91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a95:	50                   	push   eax
c0016a96:	e8 b5 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a9b:	83 c4 10             	add    esp,0x10
c0016a9e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aa3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aa9:	83 ec 08             	sub    esp,0x8
c0016aac:	68 f3 13 02 c0       	push   0xc00213f3
c0016ab1:	50                   	push   eax
c0016ab2:	e8 df 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016ab7:	83 c4 10             	add    esp,0x10
c0016aba:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016abf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ac5:	83 ec 08             	sub    esp,0x8
c0016ac8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016acc:	50                   	push   eax
c0016acd:	e8 7e 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016ad2:	83 c4 10             	add    esp,0x10
c0016ad5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ada:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ae0:	83 ec 08             	sub    esp,0x8
c0016ae3:	68 fb 13 02 c0       	push   0xc00213fb
c0016ae8:	50                   	push   eax
c0016ae9:	e8 a8 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016aee:	83 c4 10             	add    esp,0x10
c0016af1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016af6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016afc:	83 ec 08             	sub    esp,0x8
c0016aff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016b03:	50                   	push   eax
c0016b04:	e8 47 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b09:	83 c4 10             	add    esp,0x10
c0016b0c:	fa                   	cli    
c0016b0d:	f4                   	hlt    
c0016b0e:	eb fe                	jmp    c0016b0e <displayDebugInfo(regs*)+0x35a>

c0016b10 <HalSystemIdle()>:
c0016b10:	56                   	push   esi
c0016b11:	53                   	push   ebx
c0016b12:	83 ec 14             	sub    esp,0x14
c0016b15:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b20:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016b26:	83 e0 04             	and    eax,0x4
c0016b29:	0f b6 c0             	movzx  eax,al
c0016b2c:	85 c0                	test   eax,eax
c0016b2e:	0f 95 c0             	setne  al
c0016b31:	0f b6 c0             	movzx  eax,al
c0016b34:	85 c0                	test   eax,eax
c0016b36:	74 4c                	je     c0016b84 <HalSystemIdle()+0x74>
c0016b38:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b3d:	83 ec 08             	sub    esp,0x8
c0016b40:	68 e1 00 00 00       	push   0xe1
c0016b45:	50                   	push   eax
c0016b46:	e8 8f 05 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0016b4b:	83 c4 10             	add    esp,0x10
c0016b4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b56:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016b5f:	83 e2 02             	and    edx,0x2
c0016b62:	89 d3                	mov    ebx,edx
c0016b64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b68:	83 e2 00             	and    edx,0x0
c0016b6b:	89 d6                	mov    esi,edx
c0016b6d:	56                   	push   esi
c0016b6e:	53                   	push   ebx
c0016b6f:	68 e1 00 00 00       	push   0xe1
c0016b74:	50                   	push   eax
c0016b75:	e8 8c 05 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016b7a:	83 c4 10             	add    esp,0x10
c0016b7d:	e8 12 96 fe ff       	call   c0000194 <doTPAUSE>
c0016b82:	eb 01                	jmp    c0016b85 <HalSystemIdle()+0x75>
c0016b84:	f4                   	hlt    
c0016b85:	90                   	nop
c0016b86:	83 c4 14             	add    esp,0x14
c0016b89:	5b                   	pop    ebx
c0016b8a:	5e                   	pop    esi
c0016b8b:	c3                   	ret    

c0016b8c <displayProgramFault(char const*)>:
c0016b8c:	83 ec 0c             	sub    esp,0xc
c0016b8f:	83 ec 0c             	sub    esp,0xc
c0016b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b96:	e8 b6 3d ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016b9b:	83 c4 10             	add    esp,0x10
c0016b9e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016ba3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ba5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ba8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bae:	85 c0                	test   eax,eax
c0016bb0:	74 21                	je     c0016bd3 <displayProgramFault(char const*)+0x47>
c0016bb2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016bb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bb9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016bbc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bc2:	6a 04                	push   0x4
c0016bc4:	6a 0f                	push   0xf
c0016bc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bca:	50                   	push   eax
c0016bcb:	e8 38 1f ff ff       	call   c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016bd0:	83 c4 10             	add    esp,0x10
c0016bd3:	90                   	nop
c0016bd4:	83 c4 0c             	add    esp,0xc
c0016bd7:	c3                   	ret    

c0016bd8 <gpFault(regs*, void*)>:
c0016bd8:	83 ec 1c             	sub    esp,0x1c
c0016bdb:	c7 05 10 82 02 c0 77 60 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc0016077
c0016be5:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016bea:	85 c0                	test   eax,eax
c0016bec:	74 1e                	je     c0016c0c <gpFault(regs*, void*)+0x34>
c0016bee:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016bf3:	83 ec 0c             	sub    esp,0xc
c0016bf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016bfa:	ff d0                	call   eax
c0016bfc:	83 c4 10             	add    esp,0x10
c0016bff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016c03:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016c08:	85 c0                	test   eax,eax
c0016c0a:	75 2e                	jne    c0016c3a <gpFault(regs*, void*)+0x62>
c0016c0c:	83 ec 0c             	sub    esp,0xc
c0016c0f:	68 03 14 02 c0       	push   0xc0021403
c0016c14:	e8 73 ff ff ff       	call   c0016b8c <displayProgramFault(char const*)>
c0016c19:	83 c4 10             	add    esp,0x10
c0016c1c:	83 ec 0c             	sub    esp,0xc
c0016c1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c23:	e8 8c fb ff ff       	call   c00167b4 <displayDebugInfo(regs*)>
c0016c28:	83 c4 10             	add    esp,0x10
c0016c2b:	83 ec 0c             	sub    esp,0xc
c0016c2e:	6a 00                	push   0x0
c0016c30:	e8 07 ee ff ff       	call   c0015a3c <Thr::terminateFromIRQ(int)>
c0016c35:	83 c4 10             	add    esp,0x10
c0016c38:	eb 01                	jmp    c0016c3b <gpFault(regs*, void*)+0x63>
c0016c3a:	90                   	nop
c0016c3b:	83 c4 1c             	add    esp,0x1c
c0016c3e:	c3                   	ret    

c0016c3f <pgFault(regs*, void*)>:
c0016c3f:	83 ec 1c             	sub    esp,0x1c
c0016c42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c46:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016c49:	0f 20 d0             	mov    eax,cr2
c0016c4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c54:	83 ec 04             	sub    esp,0x4
c0016c57:	52                   	push   edx
c0016c58:	50                   	push   eax
c0016c59:	68 e0 14 02 c0       	push   0xc00214e0
c0016c5e:	e8 ee 3c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016c63:	83 c4 10             	add    esp,0x10
c0016c66:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c6d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c70:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016c76:	0f 20 d2             	mov    edx,cr2
c0016c79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c81:	83 ec 08             	sub    esp,0x8
c0016c84:	52                   	push   edx
c0016c85:	50                   	push   eax
c0016c86:	e8 89 38 ff ff       	call   c000a514 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016c8b:	83 c4 10             	add    esp,0x10
c0016c8e:	0f b6 c0             	movzx  eax,al
c0016c91:	85 c0                	test   eax,eax
c0016c93:	75 2e                	jne    c0016cc3 <pgFault(regs*, void*)+0x84>
c0016c95:	83 ec 0c             	sub    esp,0xc
c0016c98:	68 1c 14 02 c0       	push   0xc002141c
c0016c9d:	e8 ea fe ff ff       	call   c0016b8c <displayProgramFault(char const*)>
c0016ca2:	83 c4 10             	add    esp,0x10
c0016ca5:	83 ec 0c             	sub    esp,0xc
c0016ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cac:	e8 03 fb ff ff       	call   c00167b4 <displayDebugInfo(regs*)>
c0016cb1:	83 c4 10             	add    esp,0x10
c0016cb4:	83 ec 0c             	sub    esp,0xc
c0016cb7:	6a 00                	push   0x0
c0016cb9:	e8 7e ed ff ff       	call   c0015a3c <Thr::terminateFromIRQ(int)>
c0016cbe:	83 c4 10             	add    esp,0x10
c0016cc1:	eb 01                	jmp    c0016cc4 <pgFault(regs*, void*)+0x85>
c0016cc3:	90                   	nop
c0016cc4:	83 c4 1c             	add    esp,0x1c
c0016cc7:	c3                   	ret    

c0016cc8 <otherISRHandler(regs*, void*)>:
c0016cc8:	83 ec 0c             	sub    esp,0xc
c0016ccb:	83 ec 0c             	sub    esp,0xc
c0016cce:	68 08 15 02 c0       	push   0xc0021508
c0016cd3:	e8 b4 fe ff ff       	call   c0016b8c <displayProgramFault(char const*)>
c0016cd8:	83 c4 10             	add    esp,0x10
c0016cdb:	83 ec 0c             	sub    esp,0xc
c0016cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ce2:	e8 cd fa ff ff       	call   c00167b4 <displayDebugInfo(regs*)>
c0016ce7:	83 c4 10             	add    esp,0x10
c0016cea:	83 ec 0c             	sub    esp,0xc
c0016ced:	6a 00                	push   0x0
c0016cef:	e8 48 ed ff ff       	call   c0015a3c <Thr::terminateFromIRQ(int)>
c0016cf4:	83 c4 10             	add    esp,0x10
c0016cf7:	90                   	nop
c0016cf8:	83 c4 0c             	add    esp,0xc
c0016cfb:	c3                   	ret    

c0016cfc <opcodeFault(regs*, void*)>:
c0016cfc:	55                   	push   ebp
c0016cfd:	89 e5                	mov    ebp,esp
c0016cff:	83 ec 08             	sub    esp,0x8
c0016d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d05:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d08:	83 ec 08             	sub    esp,0x8
c0016d0b:	50                   	push   eax
c0016d0c:	68 27 14 02 c0       	push   0xc0021427
c0016d11:	e8 3b 3c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016d16:	83 c4 10             	add    esp,0x10
c0016d19:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016d1e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d24:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016d2a:	0f b6 c0             	movzx  eax,al
c0016d2d:	85 c0                	test   eax,eax
c0016d2f:	74 21                	je     c0016d52 <opcodeFault(regs*, void*)+0x56>
c0016d31:	83 ec 0c             	sub    esp,0xc
c0016d34:	68 30 15 02 c0       	push   0xc0021530
c0016d39:	e8 13 3c ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016d3e:	83 c4 10             	add    esp,0x10
c0016d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d47:	8d 50 19             	lea    edx,[eax+0x19]
c0016d4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d4d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016d50:	eb 2b                	jmp    c0016d7d <opcodeFault(regs*, void*)+0x81>
c0016d52:	83 ec 0c             	sub    esp,0xc
c0016d55:	68 35 14 02 c0       	push   0xc0021435
c0016d5a:	e8 2d fe ff ff       	call   c0016b8c <displayProgramFault(char const*)>
c0016d5f:	83 c4 10             	add    esp,0x10
c0016d62:	83 ec 0c             	sub    esp,0xc
c0016d65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016d68:	e8 47 fa ff ff       	call   c00167b4 <displayDebugInfo(regs*)>
c0016d6d:	83 c4 10             	add    esp,0x10
c0016d70:	83 ec 0c             	sub    esp,0xc
c0016d73:	6a 00                	push   0x0
c0016d75:	e8 c2 ec ff ff       	call   c0015a3c <Thr::terminateFromIRQ(int)>
c0016d7a:	83 c4 10             	add    esp,0x10
c0016d7d:	c9                   	leave  
c0016d7e:	c3                   	ret    

c0016d7f <i386SaveCoprocessor(void*)>:
c0016d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d83:	83 c0 3f             	add    eax,0x3f
c0016d86:	83 e0 c0             	and    eax,0xffffffc0
c0016d89:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d8d:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016d93 <i386LoadCoprocessor(void*)>:
c0016d93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d97:	83 c0 3f             	add    eax,0x3f
c0016d9a:	83 e0 c0             	and    eax,0xffffffc0
c0016d9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016da1:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c0016da7 <x87EmulHandler(regs*, void*)>:
c0016da7:	53                   	push   ebx
c0016da8:	83 ec 08             	sub    esp,0x8
c0016dab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016db0:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016db4:	74 10                	je     c0016dc6 <x87EmulHandler(regs*, void*)+0x1f>
c0016db6:	83 ec 0c             	sub    esp,0xc
c0016db9:	68 42 14 02 c0       	push   0xc0021442
c0016dbe:	e8 12 9a ff ff       	call   c00107d5 <KePanic(char const*)>
c0016dc3:	83 c4 10             	add    esp,0x10
c0016dc6:	0f 20 c0             	mov    eax,cr0
c0016dc9:	a8 08                	test   al,0x8
c0016dcb:	74 59                	je     c0016e26 <x87EmulHandler(regs*, void*)+0x7f>
c0016dcd:	0f 06                	clts   
c0016dcf:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016dd4:	85 c0                	test   eax,eax
c0016dd6:	74 0e                	je     c0016de6 <x87EmulHandler(regs*, void*)+0x3f>
c0016dd8:	83 ec 0c             	sub    esp,0xc
c0016ddb:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016dde:	e8 9c ff ff ff       	call   c0016d7f <i386SaveCoprocessor(void*)>
c0016de3:	83 c4 10             	add    esp,0x10
c0016de6:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016dec:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016df0:	75 12                	jne    c0016e04 <x87EmulHandler(regs*, void*)+0x5d>
c0016df2:	83 ec 0c             	sub    esp,0xc
c0016df5:	68 40 02 00 00       	push   0x240
c0016dfa:	e8 cc 0c ff ff       	call   c0007acb <malloc>
c0016dff:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016e02:	eb 10                	jmp    c0016e14 <x87EmulHandler(regs*, void*)+0x6d>
c0016e04:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016e09:	83 ec 0c             	sub    esp,0xc
c0016e0c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e0f:	e8 7f ff ff ff       	call   c0016d93 <i386LoadCoprocessor(void*)>
c0016e14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e19:	83 c4 10             	add    esp,0x10
c0016e1c:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c0016e21:	83 c4 08             	add    esp,0x8
c0016e24:	5b                   	pop    ebx
c0016e25:	c3                   	ret    
c0016e26:	83 ec 0c             	sub    esp,0xc
c0016e29:	68 56 14 02 c0       	push   0xc0021456
c0016e2e:	e8 1e 3b ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016e33:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016e3b:	83 c4 18             	add    esp,0x18
c0016e3e:	5b                   	pop    ebx
c0016e3f:	e9 f8 eb ff ff       	jmp    c0015a3c <Thr::terminateFromIRQ(int)>

c0016e44 <HalInitialiseCoprocessor()>:
c0016e44:	83 ec 10             	sub    esp,0x10
c0016e47:	6a 00                	push   0x0
c0016e49:	68 a7 6d 01 c0       	push   0xc0016da7
c0016e4e:	6a 07                	push   0x7
c0016e50:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c0016e5a:	e8 8b 54 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016e5f:	e8 1c 70 00 00       	call   c001de80 <avxDetect>
c0016e64:	83 c4 10             	add    esp,0x10
c0016e67:	85 c0                	test   eax,eax
c0016e69:	74 1c                	je     c0016e87 <HalInitialiseCoprocessor()+0x43>
c0016e6b:	c7 05 0c 82 02 c0 aa de 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001deaa
c0016e75:	c7 05 08 82 02 c0 bb de 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001debb
c0016e7f:	83 c4 0c             	add    esp,0xc
c0016e82:	e9 45 70 00 00       	jmp    c001decc <avxInit>
c0016e87:	e8 84 73 00 00       	call   c001e210 <absolutelyNoChanceInHell>
c0016e8c:	85 c0                	test   eax,eax
c0016e8e:	74 1c                	je     c0016eac <HalInitialiseCoprocessor()+0x68>
c0016e90:	c7 05 0c 82 02 c0 28 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e228
c0016e9a:	c7 05 08 82 02 c0 30 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e230
c0016ea4:	83 c4 0c             	add    esp,0xc
c0016ea7:	e9 8c 73 00 00       	jmp    c001e238 <sseInit>
c0016eac:	e8 a5 73 00 00       	call   c001e256 <x87Detect>
c0016eb1:	85 c0                	test   eax,eax
c0016eb3:	74 1c                	je     c0016ed1 <HalInitialiseCoprocessor()+0x8d>
c0016eb5:	c7 05 0c 82 02 c0 71 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e271
c0016ebf:	c7 05 08 82 02 c0 78 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e278
c0016ec9:	83 c4 0c             	add    esp,0xc
c0016ecc:	e9 ae 73 00 00       	jmp    c001e27f <x87Init>
c0016ed1:	c7 05 0c 82 02 c0 81 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc0016781
c0016edb:	c7 05 08 82 02 c0 81 67 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc0016781
c0016ee5:	0f 20 c0             	mov    eax,cr0
c0016ee8:	83 c8 04             	or     eax,0x4
c0016eeb:	0f 22 c0             	mov    cr0,eax
c0016eee:	83 c4 0c             	add    esp,0xc
c0016ef1:	c3                   	ret    

c0016ef2 <HalPanic(char const*)>:
c0016ef2:	53                   	push   ebx
c0016ef3:	83 ec 10             	sub    esp,0x10
c0016ef6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016efa:	fa                   	cli    
c0016efb:	53                   	push   ebx
c0016efc:	68 6c 14 02 c0       	push   0xc002146c
c0016f01:	e8 4b 3a ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0016f06:	83 c4 0c             	add    esp,0xc
c0016f09:	6a 01                	push   0x1
c0016f0b:	6a 0f                	push   0xf
c0016f0d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f13:	e8 9c 16 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f18:	58                   	pop    eax
c0016f19:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f1f:	e8 80 18 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0016f24:	5a                   	pop    edx
c0016f25:	59                   	pop    ecx
c0016f26:	68 c4 fc 01 c0       	push   0xc001fcc4
c0016f2b:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f31:	e8 b6 16 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0016f36:	83 c4 0c             	add    esp,0xc
c0016f39:	6a 01                	push   0x1
c0016f3b:	6a 0f                	push   0xf
c0016f3d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f43:	e8 6c 16 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f48:	58                   	pop    eax
c0016f49:	5a                   	pop    edx
c0016f4a:	68 85 14 02 c0       	push   0xc0021485
c0016f4f:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f55:	e8 3c 1b ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016f5a:	83 c4 0c             	add    esp,0xc
c0016f5d:	6a 0f                	push   0xf
c0016f5f:	6a 01                	push   0x1
c0016f61:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f67:	e8 48 16 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f6c:	59                   	pop    ecx
c0016f6d:	58                   	pop    eax
c0016f6e:	68 8e 14 02 c0       	push   0xc002148e
c0016f73:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f79:	e8 18 1b ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016f7e:	83 c4 0c             	add    esp,0xc
c0016f81:	6a 01                	push   0x1
c0016f83:	6a 0f                	push   0xf
c0016f85:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f8b:	e8 24 16 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f90:	58                   	pop    eax
c0016f91:	5a                   	pop    edx
c0016f92:	68 d2 14 02 c0       	push   0xc00214d2
c0016f97:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f9d:	e8 f4 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016fa2:	59                   	pop    ecx
c0016fa3:	58                   	pop    eax
c0016fa4:	68 9b 14 02 c0       	push   0xc002149b
c0016fa9:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016faf:	e8 e2 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016fb4:	58                   	pop    eax
c0016fb5:	5a                   	pop    edx
c0016fb6:	68 d5 14 02 c0       	push   0xc00214d5
c0016fbb:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fc1:	e8 d0 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016fc6:	59                   	pop    ecx
c0016fc7:	58                   	pop    eax
c0016fc8:	53                   	push   ebx
c0016fc9:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fcf:	e8 c2 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016fd4:	58                   	pop    eax
c0016fd5:	5a                   	pop    edx
c0016fd6:	68 d2 14 02 c0       	push   0xc00214d2
c0016fdb:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fe1:	e8 b0 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016fe6:	83 c4 10             	add    esp,0x10
c0016fe9:	eb fe                	jmp    c0016fe9 <HalPanic(char const*)+0xf7>

c0016feb <HalQueryPerformanceCounter()>:
c0016feb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016ff0:	31 d2                	xor    edx,edx
c0016ff2:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016ff8:	31 c0                	xor    eax,eax
c0016ffa:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017001:	74 02                	je     c0017005 <HalQueryPerformanceCounter()+0x1a>
c0017003:	0f 31                	rdtsc  
c0017005:	c3                   	ret    

c0017006 <HalInitialise()>:
c0017006:	53                   	push   ebx
c0017007:	83 ec 08             	sub    esp,0x8
c001700a:	e8 12 55 ff ff       	call   c000c521 <setupINTS()>
c001700f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017014:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c001701b:	75 0f                	jne    c001702c <HalInitialise()+0x26>
c001701d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017023:	83 e2 fe             	and    edx,0xfffffffe
c0017026:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001702c:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c0017033:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017039:	83 e2 fe             	and    edx,0xfffffffe
c001703c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017042:	e8 a1 02 00 00       	call   c00172e8 <picOpen()>
c0017047:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c001704e:	74 0a                	je     c001705a <HalInitialise()+0x54>
c0017050:	e8 e3 01 00 00       	call   c0017238 <picDisable()>
c0017055:	e8 9a 67 00 00       	call   c001d7f4 <apicOpen()>
c001705a:	50                   	push   eax
c001705b:	bb 0f 00 00 00       	mov    ebx,0xf
c0017060:	6a 00                	push   0x0
c0017062:	68 c8 6c 01 c0       	push   0xc0016cc8
c0017067:	6a 00                	push   0x0
c0017069:	e8 7c 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c001706e:	83 c4 0c             	add    esp,0xc
c0017071:	6a 00                	push   0x0
c0017073:	68 c8 6c 01 c0       	push   0xc0016cc8
c0017078:	6a 01                	push   0x1
c001707a:	e8 6b 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c001707f:	83 c4 0c             	add    esp,0xc
c0017082:	6a 00                	push   0x0
c0017084:	68 82 67 01 c0       	push   0xc0016782
c0017089:	6a 02                	push   0x2
c001708b:	e8 5a 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017090:	83 c4 0c             	add    esp,0xc
c0017093:	6a 00                	push   0x0
c0017095:	68 c8 6c 01 c0       	push   0xc0016cc8
c001709a:	6a 03                	push   0x3
c001709c:	e8 49 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170a1:	83 c4 0c             	add    esp,0xc
c00170a4:	6a 00                	push   0x0
c00170a6:	68 c8 6c 01 c0       	push   0xc0016cc8
c00170ab:	6a 04                	push   0x4
c00170ad:	e8 38 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170b2:	83 c4 0c             	add    esp,0xc
c00170b5:	6a 00                	push   0x0
c00170b7:	68 c8 6c 01 c0       	push   0xc0016cc8
c00170bc:	6a 05                	push   0x5
c00170be:	e8 27 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170c3:	83 c4 0c             	add    esp,0xc
c00170c6:	6a 00                	push   0x0
c00170c8:	68 fc 6c 01 c0       	push   0xc0016cfc
c00170cd:	6a 06                	push   0x6
c00170cf:	e8 16 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170d4:	83 c4 0c             	add    esp,0xc
c00170d7:	6a 00                	push   0x0
c00170d9:	68 9b 67 01 c0       	push   0xc001679b
c00170de:	6a 08                	push   0x8
c00170e0:	e8 05 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170e5:	83 c4 0c             	add    esp,0xc
c00170e8:	6a 00                	push   0x0
c00170ea:	68 c8 6c 01 c0       	push   0xc0016cc8
c00170ef:	6a 09                	push   0x9
c00170f1:	e8 f4 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170f6:	83 c4 0c             	add    esp,0xc
c00170f9:	6a 00                	push   0x0
c00170fb:	68 c8 6c 01 c0       	push   0xc0016cc8
c0017100:	6a 0a                	push   0xa
c0017102:	e8 e3 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017107:	83 c4 0c             	add    esp,0xc
c001710a:	6a 00                	push   0x0
c001710c:	68 c8 6c 01 c0       	push   0xc0016cc8
c0017111:	6a 0b                	push   0xb
c0017113:	e8 d2 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017118:	83 c4 0c             	add    esp,0xc
c001711b:	6a 00                	push   0x0
c001711d:	68 d8 6b 01 c0       	push   0xc0016bd8
c0017122:	6a 0d                	push   0xd
c0017124:	e8 c1 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017129:	83 c4 0c             	add    esp,0xc
c001712c:	6a 00                	push   0x0
c001712e:	68 3f 6c 01 c0       	push   0xc0016c3f
c0017133:	6a 0e                	push   0xe
c0017135:	e8 b0 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c001713a:	83 c4 10             	add    esp,0x10
c001713d:	50                   	push   eax
c001713e:	6a 00                	push   0x0
c0017140:	68 c8 6c 01 c0       	push   0xc0016cc8
c0017145:	53                   	push   ebx
c0017146:	43                   	inc    ebx
c0017147:	e8 9e 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c001714c:	83 c4 10             	add    esp,0x10
c001714f:	83 fb 1e             	cmp    ebx,0x1e
c0017152:	75 e9                	jne    c001713d <HalInitialise()+0x137>
c0017154:	50                   	push   eax
c0017155:	6a 00                	push   0x0
c0017157:	68 c3 1a 01 c0       	push   0xc0011ac3
c001715c:	6a 60                	push   0x60
c001715e:	e8 87 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017163:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017168:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017172:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017179:	e8 4d 09 ff ff       	call   c0007acb <malloc>
c001717e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017181:	89 c3                	mov    ebx,eax
c0017183:	e8 38 09 00 00       	call   c0017ac0 <RTC::RTC()>
c0017188:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017192:	5a                   	pop    edx
c0017193:	59                   	pop    ecx
c0017194:	53                   	push   ebx
c0017195:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001719b:	e8 14 4c ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c00171a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00171a2:	6a 00                	push   0x0
c00171a4:	6a 00                	push   0x0
c00171a6:	6a 00                	push   0x0
c00171a8:	53                   	push   ebx
c00171a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00171ac:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00171b1:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00171b7:	83 c4 28             	add    esp,0x28
c00171ba:	5b                   	pop    ebx
c00171bb:	c3                   	ret    

c00171bc <HalMakeBeep(int)>:
c00171bc:	53                   	push   ebx
c00171bd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00171c1:	85 db                	test   ebx,ebx
c00171c3:	75 07                	jne    c00171cc <HalMakeBeep(int)+0x10>
c00171c5:	e4 61                	in     al,0x61
c00171c7:	83 e0 fc             	and    eax,0xfffffffc
c00171ca:	eb 26                	jmp    c00171f2 <HalMakeBeep(int)+0x36>
c00171cc:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00171d1:	99                   	cdq    
c00171d2:	f7 fb                	idiv   ebx
c00171d4:	89 c1                	mov    ecx,eax
c00171d6:	b0 b6                	mov    al,0xb6
c00171d8:	e6 43                	out    0x43,al
c00171da:	88 c8                	mov    al,cl
c00171dc:	e6 42                	out    0x42,al
c00171de:	89 c8                	mov    eax,ecx
c00171e0:	c1 e8 08             	shr    eax,0x8
c00171e3:	e6 42                	out    0x42,al
c00171e5:	e4 61                	in     al,0x61
c00171e7:	89 c2                	mov    edx,eax
c00171e9:	83 ca 03             	or     edx,0x3
c00171ec:	38 d0                	cmp    al,dl
c00171ee:	74 04                	je     c00171f4 <HalMakeBeep(int)+0x38>
c00171f0:	88 d0                	mov    al,dl
c00171f2:	e6 61                	out    0x61,al
c00171f4:	5b                   	pop    ebx
c00171f5:	c3                   	ret    

c00171f6 <HalGetRand()>:
c00171f6:	31 c0                	xor    eax,eax
c00171f8:	c3                   	ret    

c00171f9 <HalEndOfInterrupt(int)>:
c00171f9:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017200:	74 23                	je     c0017225 <HalEndOfInterrupt(int)+0x2c>
c0017202:	83 ec 14             	sub    esp,0x14
c0017205:	6a 1b                	push   0x1b
c0017207:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001720d:	e8 c8 fe fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0017212:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017217:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017221:	83 c4 1c             	add    esp,0x1c
c0017224:	c3                   	ret    
c0017225:	e9 42 02 00 00       	jmp    c001746c <picEOI(int)>

c001722a <HalRestart()>:
c001722a:	c3                   	ret    

c001722b <HalShutdown()>:
c001722b:	c3                   	ret    

c001722c <HalSleep()>:
c001722c:	c3                   	ret    
c001722d:	66 90                	xchg   ax,ax
c001722f:	90                   	nop

c0017230 <picIoWait()>:
c0017230:	eb 00                	jmp    c0017232 <picIoWait()+0x2>
c0017232:	eb 00                	jmp    c0017234 <picIoWait()+0x4>
c0017234:	90                   	nop
c0017235:	c3                   	ret    
c0017236:	66 90                	xchg   ax,ax

c0017238 <picDisable()>:
c0017238:	83 ec 10             	sub    esp,0x10
c001723b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017242:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017247:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001724b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017250:	ee                   	out    dx,al
c0017251:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017258:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001725d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017261:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017266:	ee                   	out    dx,al
c0017267:	90                   	nop
c0017268:	83 c4 10             	add    esp,0x10
c001726b:	c3                   	ret    

c001726c <picGetIRQReg(int)>:
c001726c:	83 ec 10             	sub    esp,0x10
c001726f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017273:	0f b6 c0             	movzx  eax,al
c0017276:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001727d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017281:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017285:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001728a:	ee                   	out    dx,al
c001728b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001728f:	0f b6 c0             	movzx  eax,al
c0017292:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017299:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001729d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00172a1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00172a6:	ee                   	out    dx,al
c00172a7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00172ae:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00172b3:	89 c2                	mov    edx,eax
c00172b5:	ec                   	in     al,dx
c00172b6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00172ba:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00172be:	0f b6 c0             	movzx  eax,al
c00172c1:	c1 e0 08             	shl    eax,0x8
c00172c4:	89 c1                	mov    ecx,eax
c00172c6:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00172cd:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00172d2:	89 c2                	mov    edx,eax
c00172d4:	ec                   	in     al,dx
c00172d5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00172d9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00172dd:	0f b6 c0             	movzx  eax,al
c00172e0:	09 c8                	or     eax,ecx
c00172e2:	83 c4 10             	add    esp,0x10
c00172e5:	c3                   	ret    
c00172e6:	66 90                	xchg   ax,ax

c00172e8 <picOpen()>:
c00172e8:	83 ec 50             	sub    esp,0x50
c00172eb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00172f2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00172f7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00172fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00172ff:	ee                   	out    dx,al
c0017300:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017307:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001730c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017310:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017314:	ee                   	out    dx,al
c0017315:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001731d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017325:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001732c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017330:	89 c2                	mov    edx,eax
c0017332:	ec                   	in     al,dx
c0017333:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017337:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001733b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001733f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017346:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001734a:	89 c2                	mov    edx,eax
c001734c:	ec                   	in     al,dx
c001734d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017351:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017355:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017359:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017360:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017369:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001736d:	ee                   	out    dx,al
c001736e:	e8 bd fe ff ff       	call   c0017230 <picIoWait()>
c0017373:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001737a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001737f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017383:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017387:	ee                   	out    dx,al
c0017388:	e8 a3 fe ff ff       	call   c0017230 <picIoWait()>
c001738d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017391:	0f b6 c0             	movzx  eax,al
c0017394:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001739b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001739f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00173a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173a7:	ee                   	out    dx,al
c00173a8:	e8 83 fe ff ff       	call   c0017230 <picIoWait()>
c00173ad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00173b1:	0f b6 c0             	movzx  eax,al
c00173b4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00173bb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00173bf:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00173c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00173c7:	ee                   	out    dx,al
c00173c8:	e8 63 fe ff ff       	call   c0017230 <picIoWait()>
c00173cd:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00173d4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00173d9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00173dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173e1:	ee                   	out    dx,al
c00173e2:	e8 49 fe ff ff       	call   c0017230 <picIoWait()>
c00173e7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00173ee:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00173f3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00173f7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173fb:	ee                   	out    dx,al
c00173fc:	e8 2f fe ff ff       	call   c0017230 <picIoWait()>
c0017401:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017408:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001740d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017411:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017415:	ee                   	out    dx,al
c0017416:	e8 15 fe ff ff       	call   c0017230 <picIoWait()>
c001741b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017422:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017427:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001742b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001742f:	ee                   	out    dx,al
c0017430:	e8 fb fd ff ff       	call   c0017230 <picIoWait()>
c0017435:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001743a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017441:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017445:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017449:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001744d:	ee                   	out    dx,al
c001744e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017453:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001745a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001745e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017462:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017466:	ee                   	out    dx,al
c0017467:	90                   	nop
c0017468:	83 c4 50             	add    esp,0x50
c001746b:	c3                   	ret    

c001746c <picEOI(int)>:
c001746c:	83 ec 10             	sub    esp,0x10
c001746f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017474:	75 1e                	jne    c0017494 <picEOI(int)+0x28>
c0017476:	6a 0b                	push   0xb
c0017478:	e8 ef fd ff ff       	call   c001726c <picGetIRQReg(int)>
c001747d:	83 c4 04             	add    esp,0x4
c0017480:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0017485:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001748a:	25 80 00 00 00       	and    eax,0x80
c001748f:	74 73                	je     c0017504 <picEOI(int)+0x98>
c0017491:	8d 76 00             	lea    esi,[esi+0x0]
c0017494:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017499:	75 31                	jne    c00174cc <picEOI(int)+0x60>
c001749b:	6a 0b                	push   0xb
c001749d:	e8 ca fd ff ff       	call   c001726c <picGetIRQReg(int)>
c00174a2:	83 c4 04             	add    esp,0x4
c00174a5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00174aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174ae:	98                   	cwde   
c00174af:	85 c0                	test   eax,eax
c00174b1:	78 19                	js     c00174cc <picEOI(int)+0x60>
c00174b3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00174ba:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00174bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00174c3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00174c8:	ee                   	out    dx,al
c00174c9:	eb 3d                	jmp    c0017508 <picEOI(int)+0x9c>
c00174cb:	90                   	nop
c00174cc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00174d1:	7e 19                	jle    c00174ec <picEOI(int)+0x80>
c00174d3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00174da:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00174df:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00174e3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00174e8:	ee                   	out    dx,al
c00174e9:	8d 76 00             	lea    esi,[esi+0x0]
c00174ec:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00174f3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00174f8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00174fc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017501:	ee                   	out    dx,al
c0017502:	eb 04                	jmp    c0017508 <picEOI(int)+0x9c>
c0017504:	90                   	nop
c0017505:	8d 76 00             	lea    esi,[esi+0x0]
c0017508:	83 c4 10             	add    esp,0x10
c001750b:	c3                   	ret    

c001750c <RTC::open(int, int, void*)>:
c001750c:	31 c0                	xor    eax,eax
c001750e:	c3                   	ret    
c001750f:	90                   	nop

c0017510 <RTC::close(int, int, void*)>:
c0017510:	31 c0                	xor    eax,eax
c0017512:	c3                   	ret    
c0017513:	90                   	nop

c0017514 <RTC::timeInSecondsUTC()>:
c0017514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017518:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001751e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017524:	c3                   	ret    
c0017525:	90                   	nop

c0017526 <RTC::timeInDatetimeUTC()>:
c0017526:	53                   	push   ebx
c0017527:	83 ec 14             	sub    esp,0x14
c001752a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001752e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017532:	8b 10                	mov    edx,DWORD PTR [eax]
c0017534:	50                   	push   eax
c0017535:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017538:	83 c4 0c             	add    esp,0xc
c001753b:	52                   	push   edx
c001753c:	50                   	push   eax
c001753d:	53                   	push   ebx
c001753e:	e8 e5 45 ff ff       	call   c000bb28 <secondsToDatetime(unsigned long long)>
c0017543:	89 d8                	mov    eax,ebx
c0017545:	83 c4 14             	add    esp,0x14
c0017548:	5b                   	pop    ebx
c0017549:	c2 04 00             	ret    0x4

c001754c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001754c:	56                   	push   esi
c001754d:	53                   	push   ebx
c001754e:	83 ec 14             	sub    esp,0x14
c0017551:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017555:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017557:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001755a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001755e:	52                   	push   edx
c001755f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017567:	50                   	push   eax
c0017568:	e8 bb 45 ff ff       	call   c000bb28 <secondsToDatetime(unsigned long long)>
c001756d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017571:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017575:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017579:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001757d:	89 f0                	mov    eax,esi
c001757f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017583:	83 c4 20             	add    esp,0x20
c0017586:	5b                   	pop    ebx
c0017587:	5e                   	pop    esi
c0017588:	ff e0                	jmp    eax

c001758a <RTC::~RTC()>:
c001758a:	83 ec 0c             	sub    esp,0xc
c001758d:	ba 70 15 02 c0       	mov    edx,0xc0021570
c0017592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017596:	89 10                	mov    DWORD PTR [eax],edx
c0017598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001759c:	83 ec 0c             	sub    esp,0xc
c001759f:	50                   	push   eax
c00175a0:	e8 0f 43 ff ff       	call   c000b8b4 <Clock::~Clock()>
c00175a5:	83 c4 10             	add    esp,0x10
c00175a8:	90                   	nop
c00175a9:	83 c4 0c             	add    esp,0xc
c00175ac:	c3                   	ret    
c00175ad:	90                   	nop

c00175ae <RTC::~RTC()>:
c00175ae:	83 ec 0c             	sub    esp,0xc
c00175b1:	83 ec 0c             	sub    esp,0xc
c00175b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175b8:	e8 cd ff ff ff       	call   c001758a <RTC::~RTC()>
c00175bd:	83 c4 10             	add    esp,0x10
c00175c0:	83 ec 08             	sub    esp,0x8
c00175c3:	68 60 01 00 00       	push   0x160
c00175c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175cc:	e8 82 32 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c00175d1:	83 c4 10             	add    esp,0x10
c00175d4:	83 c4 0c             	add    esp,0xc
c00175d7:	c3                   	ret    

c00175d8 <RTC::get_update_in_progress_flag()>:
c00175d8:	83 ec 14             	sub    esp,0x14
c00175db:	6a 0a                	push   0xa
c00175dd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175e3:	e8 aa fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00175e8:	83 c4 1c             	add    esp,0x1c
c00175eb:	0f b6 c0             	movzx  eax,al
c00175ee:	c1 e8 07             	shr    eax,0x7
c00175f1:	c3                   	ret    

c00175f2 <RTC::completeRTCRefresh()>:
c00175f2:	55                   	push   ebp
c00175f3:	57                   	push   edi
c00175f4:	56                   	push   esi
c00175f5:	53                   	push   ebx
c00175f6:	83 ec 3c             	sub    esp,0x3c
c00175f9:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c00175ff:	83 ec 0c             	sub    esp,0xc
c0017602:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017606:	e8 cd ff ff ff       	call   c00175d8 <RTC::get_update_in_progress_flag()>
c001760b:	83 c4 10             	add    esp,0x10
c001760e:	84 c0                	test   al,al
c0017610:	74 0e                	je     c0017620 <RTC::completeRTCRefresh()+0x2e>
c0017612:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017618:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c001761e:	73 df                	jae    c00175ff <RTC::completeRTCRefresh()+0xd>
c0017620:	50                   	push   eax
c0017621:	50                   	push   eax
c0017622:	6a 00                	push   0x0
c0017624:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001762a:	e8 63 fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001762f:	89 c7                	mov    edi,eax
c0017631:	58                   	pop    eax
c0017632:	5a                   	pop    edx
c0017633:	6a 02                	push   0x2
c0017635:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001763b:	e8 52 fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017640:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0017644:	59                   	pop    ecx
c0017645:	5b                   	pop    ebx
c0017646:	6a 04                	push   0x4
c0017648:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001764e:	e8 3f fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017653:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017657:	5e                   	pop    esi
c0017658:	5d                   	pop    ebp
c0017659:	6a 07                	push   0x7
c001765b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017661:	e8 2c fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017666:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001766a:	58                   	pop    eax
c001766b:	5a                   	pop    edx
c001766c:	6a 08                	push   0x8
c001766e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017674:	e8 19 fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017679:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001767d:	59                   	pop    ecx
c001767e:	5b                   	pop    ebx
c001767f:	6a 09                	push   0x9
c0017681:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017687:	e8 06 fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001768c:	0f b6 c0             	movzx  eax,al
c001768f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017693:	83 c4 10             	add    esp,0x10
c0017696:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c001769c:	83 ec 0c             	sub    esp,0xc
c001769f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00176a3:	e8 30 ff ff ff       	call   c00175d8 <RTC::get_update_in_progress_flag()>
c00176a8:	83 c4 10             	add    esp,0x10
c00176ab:	84 c0                	test   al,al
c00176ad:	74 0e                	je     c00176bd <RTC::completeRTCRefresh()+0xcb>
c00176af:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00176b5:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00176bb:	73 df                	jae    c001769c <RTC::completeRTCRefresh()+0xaa>
c00176bd:	51                   	push   ecx
c00176be:	51                   	push   ecx
c00176bf:	6a 00                	push   0x0
c00176c1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176c7:	e8 c6 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176cc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00176d0:	5b                   	pop    ebx
c00176d1:	5e                   	pop    esi
c00176d2:	6a 02                	push   0x2
c00176d4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176da:	e8 b3 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176df:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00176e3:	5d                   	pop    ebp
c00176e4:	58                   	pop    eax
c00176e5:	6a 04                	push   0x4
c00176e7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176ed:	e8 a0 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176f2:	88 c3                	mov    bl,al
c00176f4:	58                   	pop    eax
c00176f5:	5a                   	pop    edx
c00176f6:	6a 07                	push   0x7
c00176f8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176fe:	e8 8f fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017703:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017707:	59                   	pop    ecx
c0017708:	5e                   	pop    esi
c0017709:	6a 08                	push   0x8
c001770b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017711:	e8 7c fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017716:	5d                   	pop    ebp
c0017717:	89 c6                	mov    esi,eax
c0017719:	58                   	pop    eax
c001771a:	6a 09                	push   0x9
c001771c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017722:	e8 6b fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017727:	89 f9                	mov    ecx,edi
c0017729:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001772d:	83 c4 10             	add    esp,0x10
c0017730:	0f b6 e8             	movzx  ebp,al
c0017733:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017738:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001773c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017740:	74 27                	je     c0017769 <RTC::completeRTCRefresh()+0x177>
c0017742:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0017746:	89 f0                	mov    eax,esi
c0017748:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001774c:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017750:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017754:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0017758:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001775c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017760:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017764:	e9 2d ff ff ff       	jmp    c0017696 <RTC::completeRTCRefresh()+0xa4>
c0017769:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001776e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017772:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017776:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001777a:	75 c6                	jne    c0017742 <RTC::completeRTCRefresh()+0x150>
c001777c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017781:	89 f1                	mov    ecx,esi
c0017783:	0f b6 fb             	movzx  edi,bl
c0017786:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001778a:	0f b6 c9             	movzx  ecx,cl
c001778d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017791:	89 f1                	mov    ecx,esi
c0017793:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017797:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001779b:	0f 94 c2             	sete   dl
c001779e:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00177a2:	0f 94 c0             	sete   al
c00177a5:	21 d0                	and    eax,edx
c00177a7:	31 d2                	xor    edx,edx
c00177a9:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00177ad:	0f 94 c2             	sete   dl
c00177b0:	85 c2                	test   edx,eax
c00177b2:	74 8e                	je     c0017742 <RTC::completeRTCRefresh()+0x150>
c00177b4:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00177b8:	75 88                	jne    c0017742 <RTC::completeRTCRefresh()+0x150>
c00177ba:	52                   	push   edx
c00177bb:	52                   	push   edx
c00177bc:	6a 0b                	push   0xb
c00177be:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177c4:	e8 c9 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00177c9:	83 c4 10             	add    esp,0x10
c00177cc:	a8 04                	test   al,0x4
c00177ce:	75 7a                	jne    c001784a <RTC::completeRTCRefresh()+0x258>
c00177d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177d4:	c1 ef 04             	shr    edi,0x4
c00177d7:	83 e6 0f             	and    esi,0xf
c00177da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00177de:	c1 ed 04             	shr    ebp,0x4
c00177e1:	6b ed 0a             	imul   ebp,ebp,0xa
c00177e4:	c1 ea 04             	shr    edx,0x4
c00177e7:	6b d2 0a             	imul   edx,edx,0xa
c00177ea:	83 e1 0f             	and    ecx,0xf
c00177ed:	01 d1                	add    ecx,edx
c00177ef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177f3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00177f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00177fb:	c1 ea 04             	shr    edx,0x4
c00177fe:	6b d2 0a             	imul   edx,edx,0xa
c0017801:	83 e1 0f             	and    ecx,0xf
c0017804:	01 d1                	add    ecx,edx
c0017806:	89 fa                	mov    edx,edi
c0017808:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001780c:	83 e2 07             	and    edx,0x7
c001780f:	89 d9                	mov    ecx,ebx
c0017811:	6b d2 0a             	imul   edx,edx,0xa
c0017814:	83 e1 0f             	and    ecx,0xf
c0017817:	83 e3 80             	and    ebx,0xffffff80
c001781a:	01 d1                	add    ecx,edx
c001781c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017820:	09 cb                	or     ebx,ecx
c0017822:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017826:	c1 ea 04             	shr    edx,0x4
c0017829:	6b d2 0a             	imul   edx,edx,0xa
c001782c:	83 e1 0f             	and    ecx,0xf
c001782f:	01 d1                	add    ecx,edx
c0017831:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017835:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017839:	c1 ea 04             	shr    edx,0x4
c001783c:	6b d2 0a             	imul   edx,edx,0xa
c001783f:	01 d6                	add    esi,edx
c0017841:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017845:	83 e2 0f             	and    edx,0xf
c0017848:	01 d5                	add    ebp,edx
c001784a:	a8 02                	test   al,0x2
c001784c:	75 15                	jne    c0017863 <RTC::completeRTCRefresh()+0x271>
c001784e:	f6 c3 80             	test   bl,0x80
c0017851:	74 10                	je     c0017863 <RTC::completeRTCRefresh()+0x271>
c0017853:	83 e3 7f             	and    ebx,0x7f
c0017856:	b9 18 00 00 00       	mov    ecx,0x18
c001785b:	8d 43 0c             	lea    eax,[ebx+0xc]
c001785e:	99                   	cdq    
c001785f:	f7 f9                	idiv   ecx
c0017861:	88 d3                	mov    bl,dl
c0017863:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0017869:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c001786f:	77 06                	ja     c0017877 <RTC::completeRTCRefresh()+0x285>
c0017871:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0017877:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001787c:	31 c9                	xor    ecx,ecx
c001787e:	31 d2                	xor    edx,edx
c0017880:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0017884:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017888:	89 cd                	mov    ebp,ecx
c001788a:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001788e:	c1 e7 10             	shl    edi,0x10
c0017891:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0017897:	c1 e0 10             	shl    eax,0x10
c001789a:	09 c5                	or     ebp,eax
c001789c:	89 e9                	mov    ecx,ebp
c001789e:	0f b7 c2             	movzx  eax,dx
c00178a1:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00178a5:	09 f8                	or     eax,edi
c00178a7:	89 c2                	mov    edx,eax
c00178a9:	50                   	push   eax
c00178aa:	50                   	push   eax
c00178ab:	88 d9                	mov    cl,bl
c00178ad:	51                   	push   ecx
c00178ae:	52                   	push   edx
c00178af:	e8 ef 40 ff ff       	call   c000b9a3 <datetimeToSeconds(datetime_t)>
c00178b4:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00178b8:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00178be:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00178c4:	83 c4 4c             	add    esp,0x4c
c00178c7:	5b                   	pop    ebx
c00178c8:	5e                   	pop    esi
c00178c9:	5f                   	pop    edi
c00178ca:	5d                   	pop    ebp
c00178cb:	c3                   	ret    

c00178cc <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00178cc:	55                   	push   ebp
c00178cd:	57                   	push   edi
c00178ce:	56                   	push   esi
c00178cf:	53                   	push   ebx
c00178d0:	83 ec 30             	sub    esp,0x30
c00178d3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00178d7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00178db:	6a 00                	push   0x0
c00178dd:	6a 00                	push   0x0
c00178df:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178e5:	e8 c0 f9 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c00178ea:	83 c4 0c             	add    esp,0xc
c00178ed:	6a 00                	push   0x0
c00178ef:	6a 02                	push   0x2
c00178f1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178f7:	e8 ae f9 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c00178fc:	89 f8                	mov    eax,edi
c00178fe:	89 f9                	mov    ecx,edi
c0017900:	0f b6 c4             	movzx  eax,ah
c0017903:	31 d2                	xor    edx,edx
c0017905:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017909:	c1 e9 10             	shr    ecx,0x10
c001790c:	89 f0                	mov    eax,esi
c001790e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017912:	89 f0                	mov    eax,esi
c0017914:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017918:	0f b6 c4             	movzx  eax,ah
c001791b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001791f:	89 f0                	mov    eax,esi
c0017921:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017925:	c1 e8 10             	shr    eax,0x10
c0017928:	b9 64 00 00 00       	mov    ecx,0x64
c001792d:	f7 f1                	div    ecx
c001792f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017933:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017937:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001793b:	59                   	pop    ecx
c001793c:	5b                   	pop    ebx
c001793d:	89 fb                	mov    ebx,edi
c001793f:	6a 0b                	push   0xb
c0017941:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017947:	e8 46 f8 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001794c:	83 c4 10             	add    esp,0x10
c001794f:	a8 04                	test   al,0x4
c0017951:	89 c5                	mov    ebp,eax
c0017953:	75 6e                	jne    c00179c3 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017955:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017959:	31 d2                	xor    edx,edx
c001795b:	0f b6 c1             	movzx  eax,cl
c001795e:	b9 0a 00 00 00       	mov    ecx,0xa
c0017963:	f7 f1                	div    ecx
c0017965:	c1 e0 04             	shl    eax,0x4
c0017968:	09 d0                	or     eax,edx
c001796a:	31 d2                	xor    edx,edx
c001796c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017970:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017975:	f7 f1                	div    ecx
c0017977:	c1 e0 04             	shl    eax,0x4
c001797a:	09 d0                	or     eax,edx
c001797c:	31 d2                	xor    edx,edx
c001797e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017982:	0f b6 c3             	movzx  eax,bl
c0017985:	f7 f1                	div    ecx
c0017987:	c1 e0 04             	shl    eax,0x4
c001798a:	09 d0                	or     eax,edx
c001798c:	31 d2                	xor    edx,edx
c001798e:	89 c3                	mov    ebx,eax
c0017990:	89 f0                	mov    eax,esi
c0017992:	0f b6 c0             	movzx  eax,al
c0017995:	f7 f1                	div    ecx
c0017997:	c1 e0 04             	shl    eax,0x4
c001799a:	09 d0                	or     eax,edx
c001799c:	31 d2                	xor    edx,edx
c001799e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00179a7:	f7 f1                	div    ecx
c00179a9:	c1 e0 04             	shl    eax,0x4
c00179ac:	09 d0                	or     eax,edx
c00179ae:	31 d2                	xor    edx,edx
c00179b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179b8:	f7 f1                	div    ecx
c00179ba:	c1 e0 04             	shl    eax,0x4
c00179bd:	09 d0                	or     eax,edx
c00179bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179c3:	83 e5 02             	and    ebp,0x2
c00179c6:	75 1e                	jne    c00179e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00179c8:	0f b6 c3             	movzx  eax,bl
c00179cb:	83 f8 0b             	cmp    eax,0xb
c00179ce:	76 10                	jbe    c00179e0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00179d0:	8d 53 f4             	lea    edx,[ebx-0xc]
c00179d3:	84 d2                	test   dl,dl
c00179d5:	88 d3                	mov    bl,dl
c00179d7:	75 02                	jne    c00179db <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00179d9:	b3 0c                	mov    bl,0xc
c00179db:	83 cb 80             	or     ebx,0xffffff80
c00179de:	eb 06                	jmp    c00179e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00179e0:	85 c0                	test   eax,eax
c00179e2:	75 02                	jne    c00179e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00179e4:	b3 0c                	mov    bl,0xc
c00179e6:	50                   	push   eax
c00179e7:	0f b6 db             	movzx  ebx,bl
c00179ea:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00179ef:	52                   	push   edx
c00179f0:	6a 00                	push   0x0
c00179f2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179f8:	e8 ad f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c00179fd:	83 c4 0c             	add    esp,0xc
c0017a00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a05:	50                   	push   eax
c0017a06:	6a 02                	push   0x2
c0017a08:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a0e:	e8 97 f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a13:	83 c4 0c             	add    esp,0xc
c0017a16:	53                   	push   ebx
c0017a17:	6a 04                	push   0x4
c0017a19:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a1f:	e8 86 f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a24:	83 c4 0c             	add    esp,0xc
c0017a27:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017a2c:	52                   	push   edx
c0017a2d:	6a 07                	push   0x7
c0017a2f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a35:	e8 70 f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a3a:	83 c4 0c             	add    esp,0xc
c0017a3d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017a42:	50                   	push   eax
c0017a43:	6a 08                	push   0x8
c0017a45:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a4b:	e8 5a f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a50:	83 c4 0c             	add    esp,0xc
c0017a53:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017a58:	55                   	push   ebp
c0017a59:	6a 09                	push   0x9
c0017a5b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a61:	e8 44 f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a66:	5a                   	pop    edx
c0017a67:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017a6b:	e8 82 fb ff ff       	call   c00175f2 <RTC::completeRTCRefresh()>
c0017a70:	83 c4 3c             	add    esp,0x3c
c0017a73:	b0 01                	mov    al,0x1
c0017a75:	5b                   	pop    ebx
c0017a76:	5e                   	pop    esi
c0017a77:	5f                   	pop    edi
c0017a78:	5d                   	pop    ebp
c0017a79:	c3                   	ret    

c0017a7a <rtcIRQHandler(regs*, void*)>:
c0017a7a:	53                   	push   ebx
c0017a7b:	83 ec 10             	sub    esp,0x10
c0017a7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017a82:	6a 0c                	push   0xc
c0017a84:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a8a:	e8 03 f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a8f:	83 c4 10             	add    esp,0x10
c0017a92:	a8 80                	test   al,0x80
c0017a94:	74 24                	je     c0017aba <rtcIRQHandler(regs*, void*)+0x40>
c0017a96:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017a9d:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017aa4:	66 ff 05 14 82 02 c0 	inc    WORD PTR ds:0xc0028214
c0017aab:	75 0d                	jne    c0017aba <rtcIRQHandler(regs*, void*)+0x40>
c0017aad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017ab1:	83 c4 08             	add    esp,0x8
c0017ab4:	5b                   	pop    ebx
c0017ab5:	e9 38 fb ff ff       	jmp    c00175f2 <RTC::completeRTCRefresh()>
c0017aba:	83 c4 08             	add    esp,0x8
c0017abd:	5b                   	pop    ebx
c0017abe:	c3                   	ret    
c0017abf:	90                   	nop

c0017ac0 <RTC::RTC()>:
c0017ac0:	83 ec 1c             	sub    esp,0x1c
c0017ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac7:	83 ec 08             	sub    esp,0x8
c0017aca:	68 53 15 02 c0       	push   0xc0021553
c0017acf:	50                   	push   eax
c0017ad0:	e8 a9 3d ff ff       	call   c000b87e <Clock::Clock(char const*)>
c0017ad5:	83 c4 10             	add    esp,0x10
c0017ad8:	ba 70 15 02 c0       	mov    edx,0xc0021570
c0017add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae1:	89 10                	mov    DWORD PTR [eax],edx
c0017ae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae7:	83 ec 0c             	sub    esp,0xc
c0017aea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017aee:	6a 01                	push   0x1
c0017af0:	68 7a 7a 01 c0       	push   0xc0017a7a
c0017af5:	6a 08                	push   0x8
c0017af7:	50                   	push   eax
c0017af8:	e8 63 42 ff ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017afd:	83 c4 20             	add    esp,0x20
c0017b00:	89 c2                	mov    edx,eax
c0017b02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b06:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017b0c:	fa                   	cli    
c0017b0d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b12:	83 c0 01             	add    eax,0x1
c0017b15:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b1a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b1f:	83 ec 08             	sub    esp,0x8
c0017b22:	6a 0b                	push   0xb
c0017b24:	50                   	push   eax
c0017b25:	e8 68 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b2a:	83 c4 10             	add    esp,0x10
c0017b2d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017b31:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b36:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017b3a:	83 ca 10             	or     edx,0x10
c0017b3d:	0f b6 d2             	movzx  edx,dl
c0017b40:	83 ec 04             	sub    esp,0x4
c0017b43:	52                   	push   edx
c0017b44:	6a 0b                	push   0xb
c0017b46:	50                   	push   eax
c0017b47:	e8 5e f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b4c:	83 c4 10             	add    esp,0x10
c0017b4f:	83 ec 0c             	sub    esp,0xc
c0017b52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b56:	e8 97 fa ff ff       	call   c00175f2 <RTC::completeRTCRefresh()>
c0017b5b:	83 c4 10             	add    esp,0x10
c0017b5e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b63:	83 e8 01             	sub    eax,0x1
c0017b66:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b6b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b70:	85 c0                	test   eax,eax
c0017b72:	75 01                	jne    c0017b75 <RTC::RTC()+0xb5>
c0017b74:	fb                   	sti    
c0017b75:	90                   	nop
c0017b76:	83 c4 1c             	add    esp,0x1c
c0017b79:	c3                   	ret    
c0017b7a:	66 90                	xchg   ax,ax

c0017b7c <HalConsoleScroll(int, int)>:
c0017b7c:	83 ec 10             	sub    esp,0x10
c0017b7f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017b87:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017b8f:	90                   	nop
c0017b90:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017b95:	0f 8f e1 00 00 00    	jg     c0017c7c <HalConsoleScroll(int, int)+0x100>
c0017b9b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017ba3:	90                   	nop
c0017ba4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017bac:	0f 8f be 00 00 00    	jg     c0017c70 <HalConsoleScroll(int, int)+0xf4>
c0017bb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bb6:	89 d0                	mov    eax,edx
c0017bb8:	c1 e0 02             	shl    eax,0x2
c0017bbb:	01 d0                	add    eax,edx
c0017bbd:	c1 e0 05             	shl    eax,0x5
c0017bc0:	89 c2                	mov    edx,eax
c0017bc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bc6:	01 d0                	add    eax,edx
c0017bc8:	89 c2                	mov    edx,eax
c0017bca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bce:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017bd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bd5:	89 d0                	mov    eax,edx
c0017bd7:	c1 e0 02             	shl    eax,0x2
c0017bda:	01 d0                	add    eax,edx
c0017bdc:	c1 e0 05             	shl    eax,0x5
c0017bdf:	89 c2                	mov    edx,eax
c0017be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017be5:	01 d0                	add    eax,edx
c0017be7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017bed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bf1:	01 d0                	add    eax,edx
c0017bf3:	8a 11                	mov    dl,BYTE PTR [ecx]
c0017bf5:	88 10                	mov    BYTE PTR [eax],dl
c0017bf7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017bfc:	75 66                	jne    c0017c64 <HalConsoleScroll(int, int)+0xe8>
c0017bfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c02:	83 e0 01             	and    eax,0x1
c0017c05:	74 39                	je     c0017c40 <HalConsoleScroll(int, int)+0xc4>
c0017c07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c0b:	83 e0 0f             	and    eax,0xf
c0017c0e:	88 c2                	mov    dl,al
c0017c10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c14:	c1 e0 04             	shl    eax,0x4
c0017c17:	09 d0                	or     eax,edx
c0017c19:	88 c1                	mov    cl,al
c0017c1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c1f:	89 d0                	mov    eax,edx
c0017c21:	c1 e0 02             	shl    eax,0x2
c0017c24:	01 d0                	add    eax,edx
c0017c26:	c1 e0 05             	shl    eax,0x5
c0017c29:	89 c2                	mov    edx,eax
c0017c2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c2f:	01 d0                	add    eax,edx
c0017c31:	89 c2                	mov    edx,eax
c0017c33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c37:	01 d0                	add    eax,edx
c0017c39:	88 ca                	mov    dl,cl
c0017c3b:	88 10                	mov    BYTE PTR [eax],dl
c0017c3d:	eb 25                	jmp    c0017c64 <HalConsoleScroll(int, int)+0xe8>
c0017c3f:	90                   	nop
c0017c40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c44:	89 d0                	mov    eax,edx
c0017c46:	c1 e0 02             	shl    eax,0x2
c0017c49:	01 d0                	add    eax,edx
c0017c4b:	c1 e0 05             	shl    eax,0x5
c0017c4e:	89 c2                	mov    edx,eax
c0017c50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c54:	01 d0                	add    eax,edx
c0017c56:	89 c2                	mov    edx,eax
c0017c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c5c:	01 d0                	add    eax,edx
c0017c5e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017c61:	8d 76 00             	lea    esi,[esi+0x0]
c0017c64:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017c69:	e9 36 ff ff ff       	jmp    c0017ba4 <HalConsoleScroll(int, int)+0x28>
c0017c6e:	66 90                	xchg   ax,ax
c0017c70:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017c75:	e9 16 ff ff ff       	jmp    c0017b90 <HalConsoleScroll(int, int)+0x14>
c0017c7a:	66 90                	xchg   ax,ax
c0017c7c:	90                   	nop
c0017c7d:	83 c4 10             	add    esp,0x10
c0017c80:	c3                   	ret    
c0017c81:	8d 76 00             	lea    esi,[esi+0x0]

c0017c84 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017c84:	83 ec 14             	sub    esp,0x14
c0017c87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c8b:	88 04 24             	mov    BYTE PTR [esp],al
c0017c8e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017c91:	0f b6 c0             	movzx  eax,al
c0017c94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c98:	89 d1                	mov    ecx,edx
c0017c9a:	83 e1 0f             	and    ecx,0xf
c0017c9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ca1:	c1 e2 04             	shl    edx,0x4
c0017ca4:	0f b6 d2             	movzx  edx,dl
c0017ca7:	09 ca                	or     edx,ecx
c0017ca9:	c1 e2 08             	shl    edx,0x8
c0017cac:	09 d0                	or     eax,edx
c0017cae:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017cb3:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017cbb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cbf:	89 d0                	mov    eax,edx
c0017cc1:	c1 e0 02             	shl    eax,0x2
c0017cc4:	01 d0                	add    eax,edx
c0017cc6:	c1 e0 04             	shl    eax,0x4
c0017cc9:	89 c2                	mov    edx,eax
c0017ccb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ccf:	01 d0                	add    eax,edx
c0017cd1:	d1 e0                	shl    eax,1
c0017cd3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017cd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cdb:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0017ce0:	66 89 10             	mov    WORD PTR [eax],dx
c0017ce3:	90                   	nop
c0017ce4:	83 c4 14             	add    esp,0x14
c0017ce7:	c3                   	ret    

c0017ce8 <HalConsoleCursorUpdate(int, int)>:
c0017ce8:	83 ec 20             	sub    esp,0x20
c0017ceb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cef:	89 c2                	mov    edx,eax
c0017cf1:	c1 e2 02             	shl    edx,0x2
c0017cf4:	01 d0                	add    eax,edx
c0017cf6:	c1 e0 04             	shl    eax,0x4
c0017cf9:	89 c2                	mov    edx,eax
c0017cfb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cff:	01 d0                	add    eax,edx
c0017d01:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017d06:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017d0d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017d12:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d1a:	ee                   	out    dx,al
c0017d1b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017d20:	0f b6 c0             	movzx  eax,al
c0017d23:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017d2a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017d2e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017d32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d36:	ee                   	out    dx,al
c0017d37:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017d3e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017d43:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017d47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d4b:	ee                   	out    dx,al
c0017d4c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017d51:	c1 e8 08             	shr    eax,0x8
c0017d54:	0f b6 c0             	movzx  eax,al
c0017d57:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017d5e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017d62:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017d66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d6a:	ee                   	out    dx,al
c0017d6b:	90                   	nop
c0017d6c:	83 c4 20             	add    esp,0x20
c0017d6f:	c3                   	ret    

c0017d70 <FAT::getName()>:
c0017d70:	b8 a4 15 02 c0       	mov    eax,0xc00215a4
c0017d75:	c3                   	ret    
c0017d76:	66 90                	xchg   ax,ax

c0017d78 <FAT::tell(void*, unsigned long long*)>:
c0017d78:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017d7d:	75 09                	jne    c0017d88 <FAT::tell(void*, unsigned long long*)+0x10>
c0017d7f:	b8 04 00 00 00       	mov    eax,0x4
c0017d84:	c3                   	ret    
c0017d85:	8d 76 00             	lea    esi,[esi+0x0]
c0017d88:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017d8d:	75 09                	jne    c0017d98 <FAT::tell(void*, unsigned long long*)+0x20>
c0017d8f:	b8 04 00 00 00       	mov    eax,0x4
c0017d94:	c3                   	ret    
c0017d95:	8d 76 00             	lea    esi,[esi+0x0]
c0017d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d9c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017d9f:	ba 00 00 00 00       	mov    edx,0x0
c0017da4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017da8:	89 01                	mov    DWORD PTR [ecx],eax
c0017daa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017dad:	b8 00 00 00 00       	mov    eax,0x0
c0017db2:	c3                   	ret    
c0017db3:	90                   	nop

c0017db4 <FAT::stat(void*, unsigned long long*)>:
c0017db4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017db9:	75 09                	jne    c0017dc4 <FAT::stat(void*, unsigned long long*)+0x10>
c0017dbb:	b8 04 00 00 00       	mov    eax,0x4
c0017dc0:	c3                   	ret    
c0017dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0017dc4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017dc9:	75 09                	jne    c0017dd4 <FAT::stat(void*, unsigned long long*)+0x20>
c0017dcb:	b8 04 00 00 00       	mov    eax,0x4
c0017dd0:	c3                   	ret    
c0017dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0017dd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017ddb:	ba 00 00 00 00       	mov    edx,0x0
c0017de0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017de4:	89 01                	mov    DWORD PTR [ecx],eax
c0017de6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017de9:	b8 00 00 00 00       	mov    eax,0x0
c0017dee:	c3                   	ret    
c0017def:	90                   	nop

c0017df0 <FAT::~FAT()>:
c0017df0:	83 ec 0c             	sub    esp,0xc
c0017df3:	ba f0 15 02 c0       	mov    edx,0xc00215f0
c0017df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dfc:	89 10                	mov    DWORD PTR [eax],edx
c0017dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e02:	83 ec 0c             	sub    esp,0xc
c0017e05:	50                   	push   eax
c0017e06:	e8 8d 2e ff ff       	call   c000ac98 <Filesystem::~Filesystem()>
c0017e0b:	83 c4 10             	add    esp,0x10
c0017e0e:	90                   	nop
c0017e0f:	83 c4 0c             	add    esp,0xc
c0017e12:	c3                   	ret    
c0017e13:	90                   	nop

c0017e14 <FAT::~FAT()>:
c0017e14:	83 ec 0c             	sub    esp,0xc
c0017e17:	83 ec 0c             	sub    esp,0xc
c0017e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e1e:	e8 cd ff ff ff       	call   c0017df0 <FAT::~FAT()>
c0017e23:	83 c4 10             	add    esp,0x10
c0017e26:	83 ec 08             	sub    esp,0x8
c0017e29:	6a 08                	push   0x8
c0017e2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e2f:	e8 1f 2a ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c0017e34:	83 c4 10             	add    esp,0x10
c0017e37:	83 c4 0c             	add    esp,0xc
c0017e3a:	c3                   	ret    
c0017e3b:	90                   	nop

c0017e3c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017e3c:	83 ec 1c             	sub    esp,0x1c
c0017e3f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017e46:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017e4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e4f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017e56:	83 f8 ff             	cmp    eax,0xffffffff
c0017e59:	75 35                	jne    c0017e90 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017e5b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e5f:	88 c2                	mov    dl,al
c0017e61:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e66:	01 d0                	add    eax,edx
c0017e68:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017e6c:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017e72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e76:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017e7d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e86:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017e8d:	eb 19                	jmp    c0017ea8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017e8f:	90                   	nop
c0017e90:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e94:	88 c2                	mov    dl,al
c0017e96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e9a:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017ea1:	01 d0                	add    eax,edx
c0017ea3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017ea7:	90                   	nop
c0017ea8:	83 ec 04             	sub    esp,0x4
c0017eab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017eaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017eb3:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017eb7:	50                   	push   eax
c0017eb8:	e8 36 d1 fe ff       	call   c0004ff3 <f_getlabel>
c0017ebd:	83 c4 10             	add    esp,0x10
c0017ec0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ec4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ec9:	75 09                	jne    c0017ed4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017ecb:	b8 00 00 00 00       	mov    eax,0x0
c0017ed0:	eb 0a                	jmp    c0017edc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017ed2:	66 90                	xchg   ax,ax
c0017ed4:	b8 01 00 00 00       	mov    eax,0x1
c0017ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0017edc:	83 c4 1c             	add    esp,0x1c
c0017edf:	c3                   	ret    

c0017ee0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017ee0:	53                   	push   ebx
c0017ee1:	83 ec 58             	sub    esp,0x58
c0017ee4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017eec:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017ef0:	b9 00 00 00 00       	mov    ecx,0x0
c0017ef5:	b8 3c 00 00 00       	mov    eax,0x3c
c0017efa:	83 e0 f8             	and    eax,0xfffffff8
c0017efd:	89 c3                	mov    ebx,eax
c0017eff:	b8 00 00 00 00       	mov    eax,0x0
c0017f04:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0017f08:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0017f0c:	83 c0 08             	add    eax,0x8
c0017f0f:	39 d8                	cmp    eax,ebx
c0017f11:	72 f1                	jb     c0017f04 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0017f13:	01 c2                	add    edx,eax
c0017f15:	89 0a                	mov    DWORD PTR [edx],ecx
c0017f17:	83 c2 04             	add    edx,0x4
c0017f1a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f1e:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f25:	83 f8 ff             	cmp    eax,0xffffffff
c0017f28:	75 36                	jne    c0017f60 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0017f2a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f2e:	88 c2                	mov    dl,al
c0017f30:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f35:	01 d0                	add    eax,edx
c0017f37:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f3b:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f41:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f45:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017f4c:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f51:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017f55:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017f5c:	eb 1a                	jmp    c0017f78 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0017f5e:	66 90                	xchg   ax,ax
c0017f60:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f64:	88 c2                	mov    dl,al
c0017f66:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f6a:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f71:	01 d0                	add    eax,edx
c0017f73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f77:	90                   	nop
c0017f78:	83 ec 08             	sub    esp,0x8
c0017f7b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017f7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017f83:	50                   	push   eax
c0017f84:	e8 e7 88 fe ff       	call   c0000870 <strcat>
c0017f89:	83 c4 10             	add    esp,0x10
c0017f8c:	83 ec 0c             	sub    esp,0xc
c0017f8f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017f93:	50                   	push   eax
c0017f94:	e8 ae d1 fe ff       	call   c0005147 <f_setlabel>
c0017f99:	83 c4 10             	add    esp,0x10
c0017f9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017fa0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0017fa5:	75 09                	jne    c0017fb0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0017fa7:	b8 00 00 00 00       	mov    eax,0x0
c0017fac:	eb 0a                	jmp    c0017fb8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0017fae:	66 90                	xchg   ax,ax
c0017fb0:	b8 01 00 00 00       	mov    eax,0x1
c0017fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0017fb8:	83 c4 58             	add    esp,0x58
c0017fbb:	5b                   	pop    ebx
c0017fbc:	c3                   	ret    
c0017fbd:	90                   	nop
c0017fbe:	66 90                	xchg   ax,ax

c0017fc0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017fc0:	83 ec 2c             	sub    esp,0x2c
c0017fc3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017fcb:	83 ec 08             	sub    esp,0x8
c0017fce:	68 c8 15 02 c0       	push   0xc00215c8
c0017fd3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017fd7:	e8 a4 87 fe ff       	call   c0000780 <strcmp>
c0017fdc:	83 c4 10             	add    esp,0x10
c0017fdf:	85 c0                	test   eax,eax
c0017fe1:	0f 94 c0             	sete   al
c0017fe4:	0f b6 c0             	movzx  eax,al
c0017fe7:	85 c0                	test   eax,eax
c0017fe9:	74 0d                	je     c0017ff8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017feb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017ff3:	e9 c0 00 00 00       	jmp    c00180b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0017ff8:	83 ec 08             	sub    esp,0x8
c0017ffb:	68 ba 15 02 c0       	push   0xc00215ba
c0018000:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018004:	e8 77 87 fe ff       	call   c0000780 <strcmp>
c0018009:	83 c4 10             	add    esp,0x10
c001800c:	85 c0                	test   eax,eax
c001800e:	0f 94 c0             	sete   al
c0018011:	0f b6 c0             	movzx  eax,al
c0018014:	85 c0                	test   eax,eax
c0018016:	74 10                	je     c0018028 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018018:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018020:	e9 93 00 00 00       	jmp    c00180b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018025:	8d 76 00             	lea    esi,[esi+0x0]
c0018028:	83 ec 08             	sub    esp,0x8
c001802b:	68 c0 15 02 c0       	push   0xc00215c0
c0018030:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018034:	e8 47 87 fe ff       	call   c0000780 <strcmp>
c0018039:	83 c4 10             	add    esp,0x10
c001803c:	85 c0                	test   eax,eax
c001803e:	0f 94 c0             	sete   al
c0018041:	0f b6 c0             	movzx  eax,al
c0018044:	85 c0                	test   eax,eax
c0018046:	74 0c                	je     c0018054 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018048:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018050:	eb 66                	jmp    c00180b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018052:	66 90                	xchg   ax,ax
c0018054:	83 ec 08             	sub    esp,0x8
c0018057:	68 7c f3 01 c0       	push   0xc001f37c
c001805c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018060:	e8 1b 87 fe ff       	call   c0000780 <strcmp>
c0018065:	83 c4 10             	add    esp,0x10
c0018068:	85 c0                	test   eax,eax
c001806a:	0f 94 c0             	sete   al
c001806d:	0f b6 c0             	movzx  eax,al
c0018070:	85 c0                	test   eax,eax
c0018072:	74 0c                	je     c0018080 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018074:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001807c:	eb 3a                	jmp    c00180b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001807e:	66 90                	xchg   ax,ax
c0018080:	83 ec 08             	sub    esp,0x8
c0018083:	68 c6 15 02 c0       	push   0xc00215c6
c0018088:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001808c:	e8 ef 86 fe ff       	call   c0000780 <strcmp>
c0018091:	83 c4 10             	add    esp,0x10
c0018094:	85 c0                	test   eax,eax
c0018096:	0f 94 c0             	sete   al
c0018099:	0f b6 c0             	movzx  eax,al
c001809c:	85 c0                	test   eax,eax
c001809e:	74 0c                	je     c00180ac <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00180a0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00180a8:	eb 0e                	jmp    c00180b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180aa:	66 90                	xchg   ax,ax
c00180ac:	b8 08 00 00 00       	mov    eax,0x8
c00180b1:	e9 ea 00 00 00       	jmp    c00181a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00180b6:	66 90                	xchg   ax,ax
c00180b8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00180bf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00180c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00180c8:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00180cf:	83 f8 ff             	cmp    eax,0xffffffff
c00180d2:	75 34                	jne    c0018108 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00180d4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00180d8:	88 c2                	mov    dl,al
c00180da:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00180df:	01 d0                	add    eax,edx
c00180e1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00180e5:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00180eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00180ef:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00180f6:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00180fb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00180ff:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018106:	eb 18                	jmp    c0018120 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018108:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001810c:	88 c2                	mov    dl,al
c001810e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018112:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018119:	01 d0                	add    eax,edx
c001811b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001811f:	90                   	nop
c0018120:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018124:	88 04 24             	mov    BYTE PTR [esp],al
c0018127:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001812b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001812f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018137:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001813c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018144:	83 ec 0c             	sub    esp,0xc
c0018147:	68 00 20 00 00       	push   0x2000
c001814c:	e8 7a f9 fe ff       	call   c0007acb <malloc>
c0018151:	83 c4 10             	add    esp,0x10
c0018154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018158:	68 00 20 00 00       	push   0x2000
c001815d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018161:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018165:	50                   	push   eax
c0018166:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001816a:	50                   	push   eax
c001816b:	e8 d4 d2 fe ff       	call   c0005444 <f_mkfs>
c0018170:	83 c4 10             	add    esp,0x10
c0018173:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001817c:	75 0a                	jne    c0018188 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001817e:	b8 00 00 00 00       	mov    eax,0x0
c0018183:	eb 1b                	jmp    c00181a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018185:	8d 76 00             	lea    esi,[esi+0x0]
c0018188:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001818d:	75 09                	jne    c0018198 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001818f:	b8 09 00 00 00       	mov    eax,0x9
c0018194:	eb 0a                	jmp    c00181a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018196:	66 90                	xchg   ax,ax
c0018198:	b8 01 00 00 00       	mov    eax,0x1
c001819d:	8d 76 00             	lea    esi,[esi+0x0]
c00181a0:	83 c4 2c             	add    esp,0x2c
c00181a3:	c3                   	ret    

c00181a4 <FAT::tryMount(LogicalDisk*, int)>:
c00181a4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00181aa:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181af:	83 f8 14             	cmp    eax,0x14
c00181b2:	75 18                	jne    c00181cc <FAT::tryMount(LogicalDisk*, int)+0x28>
c00181b4:	83 ec 0c             	sub    esp,0xc
c00181b7:	68 cc 15 02 c0       	push   0xc00215cc
c00181bc:	e8 14 86 ff ff       	call   c00107d5 <KePanic(char const*)>
c00181c1:	83 c4 10             	add    esp,0x10
c00181c4:	b0 00                	mov    al,0x0
c00181c6:	e9 ed 01 00 00       	jmp    c00183b8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181cb:	90                   	nop
c00181cc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00181d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00181d9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00181df:	3d 00 02 00 00       	cmp    eax,0x200
c00181e4:	74 0a                	je     c00181f0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00181e6:	b0 00                	mov    al,0x0
c00181e8:	e9 cb 01 00 00       	jmp    c00183b8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181ed:	8d 76 00             	lea    esi,[esi+0x0]
c00181f0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00181f8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00181ff:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018206:	83 f8 ff             	cmp    eax,0xffffffff
c0018209:	74 09                	je     c0018214 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001820b:	b0 01                	mov    al,0x1
c001820d:	e9 a6 01 00 00       	jmp    c00183b8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018212:	66 90                	xchg   ax,ax
c0018214:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001821e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018226:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001822d:	88 c2                	mov    dl,al
c001822f:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018234:	01 d0                	add    eax,edx
c0018236:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001823d:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018243:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001824a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018251:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018256:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001825d:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018264:	83 ec 0c             	sub    esp,0xc
c0018267:	68 34 02 00 00       	push   0x234
c001826c:	e8 5a f8 fe ff       	call   c0007acb <malloc>
c0018271:	83 c4 10             	add    esp,0x10
c0018274:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001827b:	83 ec 04             	sub    esp,0x4
c001827e:	6a 00                	push   0x0
c0018280:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018287:	50                   	push   eax
c0018288:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001828f:	e8 aa b9 fe ff       	call   c0003c3e <f_mount>
c0018294:	83 c4 10             	add    esp,0x10
c0018297:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001829e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00182a6:	74 1c                	je     c00182c4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00182a8:	83 ec 0c             	sub    esp,0xc
c00182ab:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00182b2:	e8 34 f8 fe ff       	call   c0007aeb <rfree>
c00182b7:	83 c4 10             	add    esp,0x10
c00182ba:	b0 00                	mov    al,0x0
c00182bc:	e9 f7 00 00 00       	jmp    c00183b8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182c1:	8d 76 00             	lea    esi,[esi+0x0]
c00182c4:	83 ec 04             	sub    esp,0x4
c00182c7:	68 00 01 00 00       	push   0x100
c00182cc:	6a 00                	push   0x0
c00182ce:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00182d5:	50                   	push   eax
c00182d6:	e8 15 82 fe ff       	call   c00004f0 <memset>
c00182db:	83 c4 10             	add    esp,0x10
c00182de:	83 ec 08             	sub    esp,0x8
c00182e1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00182e8:	50                   	push   eax
c00182e9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00182f0:	50                   	push   eax
c00182f1:	e8 7a 85 fe ff       	call   c0000870 <strcat>
c00182f6:	83 c4 10             	add    esp,0x10
c00182f9:	83 ec 08             	sub    esp,0x8
c00182fc:	68 da 15 02 c0       	push   0xc00215da
c0018301:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018308:	50                   	push   eax
c0018309:	e8 62 85 fe ff       	call   c0000870 <strcat>
c001830e:	83 c4 10             	add    esp,0x10
c0018311:	83 ec 04             	sub    esp,0x4
c0018314:	6a 01                	push   0x1
c0018316:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001831d:	50                   	push   eax
c001831e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018322:	50                   	push   eax
c0018323:	e8 78 b9 fe ff       	call   c0003ca0 <f_open>
c0018328:	83 c4 10             	add    esp,0x10
c001832b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018332:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018339:	85 c0                	test   eax,eax
c001833b:	74 0b                	je     c0018348 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001833d:	78 31                	js     c0018370 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001833f:	83 e8 04             	sub    eax,0x4
c0018342:	83 f8 01             	cmp    eax,0x1
c0018345:	77 29                	ja     c0018370 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018347:	90                   	nop
c0018348:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018350:	83 ec 0c             	sub    esp,0xc
c0018353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018357:	50                   	push   eax
c0018358:	e8 f3 c0 fe ff       	call   c0004450 <f_close>
c001835d:	83 c4 10             	add    esp,0x10
c0018360:	90                   	nop
c0018361:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018369:	85 c0                	test   eax,eax
c001836b:	74 43                	je     c00183b0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001836d:	eb 31                	jmp    c00183a0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001836f:	90                   	nop
c0018370:	83 ec 0c             	sub    esp,0xc
c0018373:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001837a:	e8 6c f7 fe ff       	call   c0007aeb <rfree>
c001837f:	83 c4 10             	add    esp,0x10
c0018382:	83 ec 04             	sub    esp,0x4
c0018385:	6a 00                	push   0x0
c0018387:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001838e:	50                   	push   eax
c001838f:	6a 00                	push   0x0
c0018391:	e8 a8 b8 fe ff       	call   c0003c3e <f_mount>
c0018396:	83 c4 10             	add    esp,0x10
c0018399:	b0 00                	mov    al,0x0
c001839b:	eb 1b                	jmp    c00183b8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001839d:	8d 76 00             	lea    esi,[esi+0x0]
c00183a0:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00183a5:	83 c0 01             	add    eax,0x1
c00183a8:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c00183ad:	8d 76 00             	lea    esi,[esi+0x0]
c00183b0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00183b7:	90                   	nop
c00183b8:	81 c4 4c 03 00 00    	add    esp,0x34c
c00183be:	c3                   	ret    
c00183bf:	90                   	nop

c00183c0 <FAT::allocateSwapfile(char const*, int)>:
c00183c0:	55                   	push   ebp
c00183c1:	57                   	push   edi
c00183c2:	56                   	push   esi
c00183c3:	53                   	push   ebx
c00183c4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00183ca:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00183d5:	83 ec 0c             	sub    esp,0xc
c00183d8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00183df:	e8 e7 f6 fe ff       	call   c0007acb <malloc>
c00183e4:	83 c4 10             	add    esp,0x10
c00183e7:	89 c7                	mov    edi,eax
c00183e9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00183ee:	83 ec 04             	sub    esp,0x4
c00183f1:	50                   	push   eax
c00183f2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00183f9:	57                   	push   edi
c00183fa:	e8 fb 2a ff ff       	call   c000aefa <File::File(char const*, Process*)>
c00183ff:	83 c4 10             	add    esp,0x10
c0018402:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018409:	83 ec 04             	sub    esp,0x4
c001840c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018410:	50                   	push   eax
c0018411:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018415:	50                   	push   eax
c0018416:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001841d:	e8 40 2e ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c0018422:	83 c4 10             	add    esp,0x10
c0018425:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001842c:	c1 e0 14             	shl    eax,0x14
c001842f:	89 c7                	mov    edi,eax
c0018431:	89 c5                	mov    ebp,eax
c0018433:	c1 fd 1f             	sar    ebp,0x1f
c0018436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001843a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001843e:	89 f9                	mov    ecx,edi
c0018440:	31 c1                	xor    ecx,eax
c0018442:	89 cb                	mov    ebx,ecx
c0018444:	89 e9                	mov    ecx,ebp
c0018446:	31 d1                	xor    ecx,edx
c0018448:	89 ce                	mov    esi,ecx
c001844a:	89 f0                	mov    eax,esi
c001844c:	09 d8                	or     eax,ebx
c001844e:	0f 84 9c 00 00 00    	je     c00184f0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018454:	83 ec 0c             	sub    esp,0xc
c0018457:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001845e:	e8 cb 2c ff ff       	call   c000b12e <File::unlink()>
c0018463:	83 c4 10             	add    esp,0x10
c0018466:	83 ec 08             	sub    esp,0x8
c0018469:	6a 12                	push   0x12
c001846b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018472:	e8 3f 2b ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0018477:	83 c4 10             	add    esp,0x10
c001847a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018481:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018487:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001848e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018495:	c1 e0 14             	shl    eax,0x14
c0018498:	83 ec 04             	sub    esp,0x4
c001849b:	6a 01                	push   0x1
c001849d:	50                   	push   eax
c001849e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00184a5:	e8 2d ce fe ff       	call   c00052d7 <f_expand>
c00184aa:	83 c4 10             	add    esp,0x10
c00184ad:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00184b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00184b6:	83 c0 10             	add    eax,0x10
c00184b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00184bb:	83 ec 0c             	sub    esp,0xc
c00184be:	8d 54 24 24          	lea    edx,[esp+0x24]
c00184c2:	52                   	push   edx
c00184c3:	8d 54 24 30          	lea    edx,[esp+0x30]
c00184c7:	52                   	push   edx
c00184c8:	6a 00                	push   0x0
c00184ca:	68 00 04 00 00       	push   0x400
c00184cf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00184d6:	ff d0                	call   eax
c00184d8:	83 c4 20             	add    esp,0x20
c00184db:	83 ec 0c             	sub    esp,0xc
c00184de:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184e5:	e8 2a 2b ff ff       	call   c000b014 <File::close()>
c00184ea:	83 c4 10             	add    esp,0x10
c00184ed:	8d 76 00             	lea    esi,[esi+0x0]
c00184f0:	83 ec 08             	sub    esp,0x8
c00184f3:	6a 01                	push   0x1
c00184f5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184fc:	e8 b5 2a ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c0018501:	83 c4 10             	add    esp,0x10
c0018504:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001850b:	8b 00                	mov    eax,DWORD PTR [eax]
c001850d:	83 c0 0c             	add    eax,0xc
c0018510:	8b 00                	mov    eax,DWORD PTR [eax]
c0018512:	83 ec 0c             	sub    esp,0xc
c0018515:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018519:	52                   	push   edx
c001851a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001851e:	52                   	push   edx
c001851f:	6a 00                	push   0x0
c0018521:	6a 04                	push   0x4
c0018523:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001852a:	ff d0                	call   eax
c001852c:	83 c4 20             	add    esp,0x20
c001852f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018536:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001853c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018543:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001854a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001854d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018554:	83 ec 0c             	sub    esp,0xc
c0018557:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001855e:	e8 b1 2a ff ff       	call   c000b014 <File::close()>
c0018563:	83 c4 10             	add    esp,0x10
c0018566:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001856d:	ba 00 00 00 00       	mov    edx,0x0
c0018572:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018578:	5b                   	pop    ebx
c0018579:	5e                   	pop    esi
c001857a:	5f                   	pop    edi
c001857b:	5d                   	pop    ebp
c001857c:	c3                   	ret    
c001857d:	90                   	nop
c001857e:	66 90                	xchg   ax,ax

c0018580 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018580:	57                   	push   edi
c0018581:	56                   	push   esi
c0018582:	53                   	push   ebx
c0018583:	81 ec 50 02 00 00    	sub    esp,0x250
c0018589:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018591:	74 0d                	je     c00185a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018593:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001859b:	75 0f                	jne    c00185ac <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001859d:	8d 76 00             	lea    esi,[esi+0x0]
c00185a0:	b8 04 00 00 00       	mov    eax,0x4
c00185a5:	e9 3a 01 00 00       	jmp    c00186e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00185aa:	66 90                	xchg   ax,ax
c00185ac:	83 ec 08             	sub    esp,0x8
c00185af:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00185b6:	50                   	push   eax
c00185b7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00185be:	e8 59 c1 fe ff       	call   c000471c <f_readdir>
c00185c3:	83 c4 10             	add    esp,0x10
c00185c6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00185cd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00185d4:	83 ec 0c             	sub    esp,0xc
c00185d7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00185de:	83 c0 16             	add    eax,0x16
c00185e1:	50                   	push   eax
c00185e2:	e8 99 7f fe ff       	call   c0000580 <strlen>
c00185e7:	83 c4 10             	add    esp,0x10
c00185ea:	ba 00 00 00 00       	mov    edx,0x0
c00185ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00185f3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00185f7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00185fe:	0f b6 c0             	movzx  eax,al
c0018601:	83 e0 10             	and    eax,0x10
c0018604:	74 0a                	je     c0018610 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018606:	b8 02 00 00 00       	mov    eax,0x2
c001860b:	eb 0b                	jmp    c0018618 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001860d:	8d 76 00             	lea    esi,[esi+0x0]
c0018610:	b8 01 00 00 00       	mov    eax,0x1
c0018615:	8d 76 00             	lea    esi,[esi+0x0]
c0018618:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001861c:	83 ec 08             	sub    esp,0x8
c001861f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018626:	83 c0 16             	add    eax,0x16
c0018629:	50                   	push   eax
c001862a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001862e:	83 c0 10             	add    eax,0x10
c0018631:	50                   	push   eax
c0018632:	e8 19 80 fe ff       	call   c0000650 <strcpy>
c0018637:	83 c4 10             	add    esp,0x10
c001863a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018641:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018648:	8d 44 24 08          	lea    eax,[esp+0x8]
c001864c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018653:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001865a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018661:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018668:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001866f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018676:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001867d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018684:	89 c6                	mov    esi,eax
c0018686:	89 d7                	mov    edi,edx
c0018688:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001868a:	89 c8                	mov    eax,ecx
c001868c:	89 fa                	mov    edx,edi
c001868e:	89 f3                	mov    ebx,esi
c0018690:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018697:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001869e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00186a5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00186ac:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00186b2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00186b9:	0f be c0             	movsx  eax,al
c00186bc:	85 c0                	test   eax,eax
c00186be:	75 08                	jne    c00186c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00186c0:	b8 07 00 00 00       	mov    eax,0x7
c00186c5:	eb 1d                	jmp    c00186e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00186c7:	90                   	nop
c00186c8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00186cf:	85 c0                	test   eax,eax
c00186d1:	75 09                	jne    c00186dc <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00186d3:	b8 00 00 00 00       	mov    eax,0x0
c00186d8:	eb 0a                	jmp    c00186e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00186da:	66 90                	xchg   ax,ax
c00186dc:	b8 01 00 00 00       	mov    eax,0x1
c00186e1:	8d 76 00             	lea    esi,[esi+0x0]
c00186e4:	81 c4 50 02 00 00    	add    esp,0x250
c00186ea:	5b                   	pop    ebx
c00186eb:	5e                   	pop    esi
c00186ec:	5f                   	pop    edi
c00186ed:	c3                   	ret    
c00186ee:	66 90                	xchg   ax,ax

c00186f0 <FAT::read(void*, unsigned long, void*, int*)>:
c00186f0:	83 ec 1c             	sub    esp,0x1c
c00186f3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00186f8:	74 0a                	je     c0018704 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00186fa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00186ff:	75 0b                	jne    c001870c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018701:	8d 76 00             	lea    esi,[esi+0x0]
c0018704:	b8 04 00 00 00       	mov    eax,0x4
c0018709:	eb 41                	jmp    c001874c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001870b:	90                   	nop
c001870c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018710:	50                   	push   eax
c0018711:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018715:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018719:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001871d:	e8 41 b8 fe ff       	call   c0003f63 <f_read>
c0018722:	83 c4 10             	add    esp,0x10
c0018725:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001872d:	89 c2                	mov    edx,eax
c001872f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018733:	89 10                	mov    DWORD PTR [eax],edx
c0018735:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018739:	85 c0                	test   eax,eax
c001873b:	75 07                	jne    c0018744 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001873d:	b8 00 00 00 00       	mov    eax,0x0
c0018742:	eb 08                	jmp    c001874c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018744:	b8 01 00 00 00       	mov    eax,0x1
c0018749:	8d 76 00             	lea    esi,[esi+0x0]
c001874c:	83 c4 1c             	add    esp,0x1c
c001874f:	c3                   	ret    

c0018750 <FAT::write(void*, unsigned long, void*, int*)>:
c0018750:	83 ec 1c             	sub    esp,0x1c
c0018753:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018758:	74 0a                	je     c0018764 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001875a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001875f:	75 0b                	jne    c001876c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018761:	8d 76 00             	lea    esi,[esi+0x0]
c0018764:	b8 04 00 00 00       	mov    eax,0x4
c0018769:	eb 41                	jmp    c00187ac <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001876b:	90                   	nop
c001876c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018770:	50                   	push   eax
c0018771:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018775:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018779:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001877d:	e8 c2 b9 fe ff       	call   c0004144 <f_write>
c0018782:	83 c4 10             	add    esp,0x10
c0018785:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001878d:	89 c2                	mov    edx,eax
c001878f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018793:	89 10                	mov    DWORD PTR [eax],edx
c0018795:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018799:	85 c0                	test   eax,eax
c001879b:	75 07                	jne    c00187a4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001879d:	b8 00 00 00 00       	mov    eax,0x0
c00187a2:	eb 08                	jmp    c00187ac <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00187a4:	b8 01 00 00 00       	mov    eax,0x1
c00187a9:	8d 76 00             	lea    esi,[esi+0x0]
c00187ac:	83 c4 1c             	add    esp,0x1c
c00187af:	c3                   	ret    

c00187b0 <FAT::close(void*)>:
c00187b0:	83 ec 1c             	sub    esp,0x1c
c00187b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187b8:	75 0a                	jne    c00187c4 <FAT::close(void*)+0x14>
c00187ba:	b8 04 00 00 00       	mov    eax,0x4
c00187bf:	eb 3f                	jmp    c0018800 <FAT::close(void*)+0x50>
c00187c1:	8d 76 00             	lea    esi,[esi+0x0]
c00187c4:	83 ec 0c             	sub    esp,0xc
c00187c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187cb:	e8 80 bc fe ff       	call   c0004450 <f_close>
c00187d0:	83 c4 10             	add    esp,0x10
c00187d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187d7:	83 ec 0c             	sub    esp,0xc
c00187da:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187de:	e8 f8 f2 fe ff       	call   c0007adb <free>
c00187e3:	83 c4 10             	add    esp,0x10
c00187e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187ea:	85 c0                	test   eax,eax
c00187ec:	75 0a                	jne    c00187f8 <FAT::close(void*)+0x48>
c00187ee:	b8 00 00 00 00       	mov    eax,0x0
c00187f3:	eb 0b                	jmp    c0018800 <FAT::close(void*)+0x50>
c00187f5:	8d 76 00             	lea    esi,[esi+0x0]
c00187f8:	b8 01 00 00 00       	mov    eax,0x1
c00187fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018800:	83 c4 1c             	add    esp,0x1c
c0018803:	c3                   	ret    

c0018804 <FAT::closeDir(void*)>:
c0018804:	83 ec 1c             	sub    esp,0x1c
c0018807:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001880c:	75 0a                	jne    c0018818 <FAT::closeDir(void*)+0x14>
c001880e:	b8 04 00 00 00       	mov    eax,0x4
c0018813:	eb 3f                	jmp    c0018854 <FAT::closeDir(void*)+0x50>
c0018815:	8d 76 00             	lea    esi,[esi+0x0]
c0018818:	83 ec 0c             	sub    esp,0xc
c001881b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001881f:	e8 d6 be fe ff       	call   c00046fa <f_closedir>
c0018824:	83 c4 10             	add    esp,0x10
c0018827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001882b:	83 ec 0c             	sub    esp,0xc
c001882e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018832:	e8 a4 f2 fe ff       	call   c0007adb <free>
c0018837:	83 c4 10             	add    esp,0x10
c001883a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001883e:	85 c0                	test   eax,eax
c0018840:	75 0a                	jne    c001884c <FAT::closeDir(void*)+0x48>
c0018842:	b8 00 00 00 00       	mov    eax,0x0
c0018847:	eb 0b                	jmp    c0018854 <FAT::closeDir(void*)+0x50>
c0018849:	8d 76 00             	lea    esi,[esi+0x0]
c001884c:	b8 01 00 00 00       	mov    eax,0x1
c0018851:	8d 76 00             	lea    esi,[esi+0x0]
c0018854:	83 c4 1c             	add    esp,0x1c
c0018857:	c3                   	ret    

c0018858 <FAT::seek(void*, unsigned long long)>:
c0018858:	83 ec 2c             	sub    esp,0x2c
c001885b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001885f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018863:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018867:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001886b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018870:	75 0a                	jne    c001887c <FAT::seek(void*, unsigned long long)+0x24>
c0018872:	b8 04 00 00 00       	mov    eax,0x4
c0018877:	eb 33                	jmp    c00188ac <FAT::seek(void*, unsigned long long)+0x54>
c0018879:	8d 76 00             	lea    esi,[esi+0x0]
c001887c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018880:	83 ec 08             	sub    esp,0x8
c0018883:	50                   	push   eax
c0018884:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018888:	e8 f2 bb fe ff       	call   c000447f <f_lseek>
c001888d:	83 c4 10             	add    esp,0x10
c0018890:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018894:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018898:	85 c0                	test   eax,eax
c001889a:	75 08                	jne    c00188a4 <FAT::seek(void*, unsigned long long)+0x4c>
c001889c:	b8 00 00 00 00       	mov    eax,0x0
c00188a1:	eb 09                	jmp    c00188ac <FAT::seek(void*, unsigned long long)+0x54>
c00188a3:	90                   	nop
c00188a4:	b8 01 00 00 00       	mov    eax,0x1
c00188a9:	8d 76 00             	lea    esi,[esi+0x0]
c00188ac:	83 c4 2c             	add    esp,0x2c
c00188af:	c3                   	ret    

c00188b0 <fatWrapperReadDisk>:
c00188b0:	53                   	push   ebx
c00188b1:	83 ec 18             	sub    esp,0x18
c00188b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00188c1:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00188c8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00188cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188d0:	ba 00 00 00 00       	mov    edx,0x0
c00188d5:	83 ec 0c             	sub    esp,0xc
c00188d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188dc:	53                   	push   ebx
c00188dd:	52                   	push   edx
c00188de:	50                   	push   eax
c00188df:	51                   	push   ecx
c00188e0:	e8 b9 48 ff ff       	call   c000d19e <LogicalDisk::read(unsigned long long, int, void*)>
c00188e5:	83 c4 20             	add    esp,0x20
c00188e8:	83 c4 18             	add    esp,0x18
c00188eb:	5b                   	pop    ebx
c00188ec:	c3                   	ret    
c00188ed:	8d 76 00             	lea    esi,[esi+0x0]

c00188f0 <fatWrapperWriteDisk>:
c00188f0:	53                   	push   ebx
c00188f1:	83 ec 18             	sub    esp,0x18
c00188f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018901:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018908:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001890c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018910:	ba 00 00 00 00       	mov    edx,0x0
c0018915:	83 ec 0c             	sub    esp,0xc
c0018918:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001891c:	53                   	push   ebx
c001891d:	52                   	push   edx
c001891e:	50                   	push   eax
c001891f:	51                   	push   ecx
c0018920:	e8 e5 48 ff ff       	call   c000d20a <LogicalDisk::write(unsigned long long, int, void*)>
c0018925:	83 c4 20             	add    esp,0x20
c0018928:	83 c4 18             	add    esp,0x18
c001892b:	5b                   	pop    ebx
c001892c:	c3                   	ret    
c001892d:	8d 76 00             	lea    esi,[esi+0x0]

c0018930 <fatWrapperIoctl>:
c0018930:	53                   	push   ebx
c0018931:	83 ec 28             	sub    esp,0x28
c0018934:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018938:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001893c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018940:	88 d0                	mov    al,dl
c0018942:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018946:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001894b:	83 f8 02             	cmp    eax,0x2
c001894e:	75 34                	jne    c0018984 <fatWrapperIoctl+0x54>
c0018950:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018954:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018958:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001895d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018964:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001896a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018970:	89 c2                	mov    edx,eax
c0018972:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018976:	66 89 10             	mov    WORD PTR [eax],dx
c0018979:	b8 00 00 00 00       	mov    eax,0x0
c001897e:	e9 c5 00 00 00       	jmp    c0018a48 <fatWrapperIoctl+0x118>
c0018983:	90                   	nop
c0018984:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018989:	83 f8 01             	cmp    eax,0x1
c001898c:	75 6a                	jne    c00189f8 <fatWrapperIoctl+0xc8>
c001898e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018992:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018996:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001899b:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189a2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189a8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00189ae:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00189b4:	89 c8                	mov    eax,ecx
c00189b6:	89 da                	mov    edx,ebx
c00189b8:	0f a4 c2 0a          	shld   edx,eax,0xa
c00189bc:	c1 e0 0a             	shl    eax,0xa
c00189bf:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00189c4:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c00189cb:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00189d1:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00189d7:	89 cb                	mov    ebx,ecx
c00189d9:	c1 fb 1f             	sar    ebx,0x1f
c00189dc:	53                   	push   ebx
c00189dd:	51                   	push   ecx
c00189de:	52                   	push   edx
c00189df:	50                   	push   eax
c00189e0:	e8 ab 5b 00 00       	call   c001e590 <__udivdi3>
c00189e5:	83 c4 10             	add    esp,0x10
c00189e8:	89 c2                	mov    edx,eax
c00189ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189ee:	89 10                	mov    DWORD PTR [eax],edx
c00189f0:	b8 00 00 00 00       	mov    eax,0x0
c00189f5:	eb 51                	jmp    c0018a48 <fatWrapperIoctl+0x118>
c00189f7:	90                   	nop
c00189f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189fd:	85 c0                	test   eax,eax
c00189ff:	75 07                	jne    c0018a08 <fatWrapperIoctl+0xd8>
c0018a01:	b8 00 00 00 00       	mov    eax,0x0
c0018a06:	eb 40                	jmp    c0018a48 <fatWrapperIoctl+0x118>
c0018a08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a0d:	83 f8 03             	cmp    eax,0x3
c0018a10:	75 1a                	jne    c0018a2c <fatWrapperIoctl+0xfc>
c0018a12:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a16:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a1e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018a24:	b8 00 00 00 00       	mov    eax,0x0
c0018a29:	eb 1d                	jmp    c0018a48 <fatWrapperIoctl+0x118>
c0018a2b:	90                   	nop
c0018a2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a31:	83 f8 04             	cmp    eax,0x4
c0018a34:	75 0a                	jne    c0018a40 <fatWrapperIoctl+0x110>
c0018a36:	b8 00 00 00 00       	mov    eax,0x0
c0018a3b:	eb 0b                	jmp    c0018a48 <fatWrapperIoctl+0x118>
c0018a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a40:	b8 04 00 00 00       	mov    eax,0x4
c0018a45:	8d 76 00             	lea    esi,[esi+0x0]
c0018a48:	83 c4 28             	add    esp,0x28
c0018a4b:	5b                   	pop    ebx
c0018a4c:	c3                   	ret    
c0018a4d:	90                   	nop
c0018a4e:	66 90                	xchg   ax,ax

c0018a50 <FAT::FAT()>:
c0018a50:	83 ec 1c             	sub    esp,0x1c
c0018a53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a57:	83 ec 0c             	sub    esp,0xc
c0018a5a:	50                   	push   eax
c0018a5b:	e8 14 22 ff ff       	call   c000ac74 <Filesystem::Filesystem()>
c0018a60:	83 c4 10             	add    esp,0x10
c0018a63:	ba f0 15 02 c0       	mov    edx,0xc00215f0
c0018a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a6c:	89 10                	mov    DWORD PTR [eax],edx
c0018a6e:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018a78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018a80:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018a85:	7f 19                	jg     c0018aa0 <FAT::FAT()+0x50>
c0018a87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a8b:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018a96:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018a9b:	eb e3                	jmp    c0018a80 <FAT::FAT()+0x30>
c0018a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018aa0:	90                   	nop
c0018aa1:	83 c4 1c             	add    esp,0x1c
c0018aa4:	c3                   	ret    
c0018aa5:	90                   	nop
c0018aa6:	66 90                	xchg   ax,ax

c0018aa8 <FAT::fixFilepath(char*)>:
c0018aa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aac:	8a 00                	mov    al,BYTE PTR [eax]
c0018aae:	0f be c0             	movsx  eax,al
c0018ab1:	83 f8 40             	cmp    eax,0x40
c0018ab4:	7e 2e                	jle    c0018ae4 <FAT::fixFilepath(char*)+0x3c>
c0018ab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aba:	8a 00                	mov    al,BYTE PTR [eax]
c0018abc:	83 e8 41             	sub    eax,0x41
c0018abf:	88 c2                	mov    dl,al
c0018ac1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ac5:	88 10                	mov    BYTE PTR [eax],dl
c0018ac7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018acb:	8a 00                	mov    al,BYTE PTR [eax]
c0018acd:	0f be c0             	movsx  eax,al
c0018ad0:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018ad7:	83 c0 30             	add    eax,0x30
c0018ada:	88 c2                	mov    dl,al
c0018adc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ae0:	88 10                	mov    BYTE PTR [eax],dl
c0018ae2:	66 90                	xchg   ax,ax
c0018ae4:	90                   	nop
c0018ae5:	c3                   	ret    
c0018ae6:	66 90                	xchg   ax,ax

c0018ae8 <FAT::open(char const*, void**, FileOpenMode)>:
c0018ae8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018aee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018af6:	74 0c                	je     c0018b04 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018af8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018b00:	75 0e                	jne    c0018b10 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018b02:	66 90                	xchg   ax,ax
c0018b04:	b8 04 00 00 00       	mov    eax,0x4
c0018b09:	e9 46 01 00 00       	jmp    c0018c54 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018b0e:	66 90                	xchg   ax,ax
c0018b10:	83 ec 08             	sub    esp,0x8
c0018b13:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b1e:	50                   	push   eax
c0018b1f:	e8 2c 7b fe ff       	call   c0000650 <strcpy>
c0018b24:	83 c4 10             	add    esp,0x10
c0018b27:	83 ec 08             	sub    esp,0x8
c0018b2a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b2e:	50                   	push   eax
c0018b2f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b36:	e8 6d ff ff ff       	call   c0018aa8 <FAT::fixFilepath(char*)>
c0018b3b:	83 c4 10             	add    esp,0x10
c0018b3e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018b46:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b4d:	83 e0 01             	and    eax,0x1
c0018b50:	74 12                	je     c0018b64 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018b52:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018b59:	83 c8 01             	or     eax,0x1
c0018b5c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018b63:	90                   	nop
c0018b64:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b6b:	83 e0 04             	and    eax,0x4
c0018b6e:	74 24                	je     c0018b94 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018b70:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018b77:	83 c8 30             	or     eax,0x30
c0018b7a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018b81:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018b88:	83 c8 02             	or     eax,0x2
c0018b8b:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018b92:	66 90                	xchg   ax,ax
c0018b94:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b9b:	83 e0 02             	and    eax,0x2
c0018b9e:	74 14                	je     c0018bb4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018ba0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018ba7:	83 c8 02             	or     eax,0x2
c0018baa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bb4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bbb:	83 e0 08             	and    eax,0x8
c0018bbe:	74 14                	je     c0018bd4 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018bc0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bc7:	83 c8 04             	or     eax,0x4
c0018bca:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bd4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bdb:	83 e0 10             	and    eax,0x10
c0018bde:	74 14                	je     c0018bf4 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018be0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018be7:	83 c8 08             	or     eax,0x8
c0018bea:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bf4:	83 ec 0c             	sub    esp,0xc
c0018bf7:	68 28 02 00 00       	push   0x228
c0018bfc:	e8 ca ee fe ff       	call   c0007acb <malloc>
c0018c01:	83 c4 10             	add    esp,0x10
c0018c04:	89 c2                	mov    edx,eax
c0018c06:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c0d:	89 10                	mov    DWORD PTR [eax],edx
c0018c0f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018c17:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c20:	83 ec 04             	sub    esp,0x4
c0018c23:	52                   	push   edx
c0018c24:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c28:	52                   	push   edx
c0018c29:	50                   	push   eax
c0018c2a:	e8 71 b0 fe ff       	call   c0003ca0 <f_open>
c0018c2f:	83 c4 10             	add    esp,0x10
c0018c32:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018c39:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018c41:	74 09                	je     c0018c4c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018c43:	b8 01 00 00 00       	mov    eax,0x1
c0018c48:	eb 0a                	jmp    c0018c54 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018c4a:	66 90                	xchg   ax,ax
c0018c4c:	b8 00 00 00 00       	mov    eax,0x0
c0018c51:	8d 76 00             	lea    esi,[esi+0x0]
c0018c54:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018c5a:	c3                   	ret    
c0018c5b:	90                   	nop

c0018c5c <FAT::openDir(char const*, void**)>:
c0018c5c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018c62:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018c6a:	74 0c                	je     c0018c78 <FAT::openDir(char const*, void**)+0x1c>
c0018c6c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018c74:	75 0e                	jne    c0018c84 <FAT::openDir(char const*, void**)+0x28>
c0018c76:	66 90                	xchg   ax,ax
c0018c78:	b8 04 00 00 00       	mov    eax,0x4
c0018c7d:	e9 82 00 00 00       	jmp    c0018d04 <FAT::openDir(char const*, void**)+0xa8>
c0018c82:	66 90                	xchg   ax,ax
c0018c84:	83 ec 08             	sub    esp,0x8
c0018c87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c92:	50                   	push   eax
c0018c93:	e8 b8 79 fe ff       	call   c0000650 <strcpy>
c0018c98:	83 c4 10             	add    esp,0x10
c0018c9b:	83 ec 08             	sub    esp,0x8
c0018c9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ca2:	50                   	push   eax
c0018ca3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018caa:	e8 f9 fd ff ff       	call   c0018aa8 <FAT::fixFilepath(char*)>
c0018caf:	83 c4 10             	add    esp,0x10
c0018cb2:	83 ec 0c             	sub    esp,0xc
c0018cb5:	6a 30                	push   0x30
c0018cb7:	e8 0f ee fe ff       	call   c0007acb <malloc>
c0018cbc:	83 c4 10             	add    esp,0x10
c0018cbf:	89 c2                	mov    edx,eax
c0018cc1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018cc8:	89 10                	mov    DWORD PTR [eax],edx
c0018cca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018cd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cd3:	83 ec 08             	sub    esp,0x8
c0018cd6:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018cda:	52                   	push   edx
c0018cdb:	50                   	push   eax
c0018cdc:	e8 4e b9 fe ff       	call   c000462f <f_opendir>
c0018ce1:	83 c4 10             	add    esp,0x10
c0018ce4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018ceb:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018cf3:	74 07                	je     c0018cfc <FAT::openDir(char const*, void**)+0xa0>
c0018cf5:	b8 01 00 00 00       	mov    eax,0x1
c0018cfa:	eb 08                	jmp    c0018d04 <FAT::openDir(char const*, void**)+0xa8>
c0018cfc:	b8 00 00 00 00       	mov    eax,0x0
c0018d01:	8d 76 00             	lea    esi,[esi+0x0]
c0018d04:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d0a:	c3                   	ret    
c0018d0b:	90                   	nop

c0018d0c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018d0c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018d12:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018d1a:	75 0c                	jne    c0018d28 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018d1c:	b8 04 00 00 00       	mov    eax,0x4
c0018d21:	e9 d6 00 00 00       	jmp    c0018dfc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d26:	66 90                	xchg   ax,ax
c0018d28:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018d30:	75 0a                	jne    c0018d3c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018d32:	b8 04 00 00 00       	mov    eax,0x4
c0018d37:	e9 c0 00 00 00       	jmp    c0018dfc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d3c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018d44:	75 0a                	jne    c0018d50 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018d46:	b8 04 00 00 00       	mov    eax,0x4
c0018d4b:	e9 ac 00 00 00       	jmp    c0018dfc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d50:	83 ec 08             	sub    esp,0x8
c0018d53:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018d5a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018d61:	50                   	push   eax
c0018d62:	e8 e9 78 fe ff       	call   c0000650 <strcpy>
c0018d67:	83 c4 10             	add    esp,0x10
c0018d6a:	83 ec 08             	sub    esp,0x8
c0018d6d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018d74:	50                   	push   eax
c0018d75:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018d7c:	e8 27 fd ff ff       	call   c0018aa8 <FAT::fixFilepath(char*)>
c0018d81:	83 c4 10             	add    esp,0x10
c0018d84:	83 ec 08             	sub    esp,0x8
c0018d87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8b:	50                   	push   eax
c0018d8c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018d93:	50                   	push   eax
c0018d94:	e8 15 ba fe ff       	call   c00047ae <f_stat>
c0018d99:	83 c4 10             	add    esp,0x10
c0018d9c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018da3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018daa:	85 c0                	test   eax,eax
c0018dac:	74 0a                	je     c0018db8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018dae:	83 f8 04             	cmp    eax,0x4
c0018db1:	74 39                	je     c0018dec <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018db3:	eb 3f                	jmp    c0018df4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018db5:	8d 76 00             	lea    esi,[esi+0x0]
c0018db8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018dbc:	0f b6 c0             	movzx  eax,al
c0018dbf:	83 e0 10             	and    eax,0x10
c0018dc2:	0f 95 c2             	setne  dl
c0018dc5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018dcc:	88 10                	mov    BYTE PTR [eax],dl
c0018dce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dd2:	ba 00 00 00 00       	mov    edx,0x0
c0018dd7:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018dde:	89 01                	mov    DWORD PTR [ecx],eax
c0018de0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018de3:	b8 00 00 00 00       	mov    eax,0x0
c0018de8:	eb 12                	jmp    c0018dfc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018dea:	66 90                	xchg   ax,ax
c0018dec:	b8 02 00 00 00       	mov    eax,0x2
c0018df1:	eb 09                	jmp    c0018dfc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018df3:	90                   	nop
c0018df4:	b8 01 00 00 00       	mov    eax,0x1
c0018df9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dfc:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018e02:	c3                   	ret    
c0018e03:	90                   	nop

c0018e04 <FAT::unlink(char const*)>:
c0018e04:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e0a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018e12:	75 08                	jne    c0018e1c <FAT::unlink(char const*)+0x18>
c0018e14:	b8 04 00 00 00       	mov    eax,0x4
c0018e19:	eb 61                	jmp    c0018e7c <FAT::unlink(char const*)+0x78>
c0018e1b:	90                   	nop
c0018e1c:	83 ec 08             	sub    esp,0x8
c0018e1f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e26:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e2a:	50                   	push   eax
c0018e2b:	e8 20 78 fe ff       	call   c0000650 <strcpy>
c0018e30:	83 c4 10             	add    esp,0x10
c0018e33:	83 ec 08             	sub    esp,0x8
c0018e36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e3a:	50                   	push   eax
c0018e3b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e42:	e8 61 fc ff ff       	call   c0018aa8 <FAT::fixFilepath(char*)>
c0018e47:	83 c4 10             	add    esp,0x10
c0018e4a:	83 ec 0c             	sub    esp,0xc
c0018e4d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e51:	50                   	push   eax
c0018e52:	e8 c9 bb fe ff       	call   c0004a20 <f_unlink>
c0018e57:	83 c4 10             	add    esp,0x10
c0018e5a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018e61:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018e68:	85 c0                	test   eax,eax
c0018e6a:	75 08                	jne    c0018e74 <FAT::unlink(char const*)+0x70>
c0018e6c:	b8 00 00 00 00       	mov    eax,0x0
c0018e71:	eb 09                	jmp    c0018e7c <FAT::unlink(char const*)+0x78>
c0018e73:	90                   	nop
c0018e74:	b8 01 00 00 00       	mov    eax,0x1
c0018e79:	8d 76 00             	lea    esi,[esi+0x0]
c0018e7c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018e82:	c3                   	ret    
c0018e83:	90                   	nop

c0018e84 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018e84:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018e8a:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018e91:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0018e98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018e9c:	88 d0                	mov    al,dl
c0018e9e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018ea2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018eaa:	75 0c                	jne    c0018eb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0018eac:	b8 04 00 00 00       	mov    eax,0x4
c0018eb1:	e9 7e 01 00 00       	jmp    c0019034 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0018eb6:	66 90                	xchg   ax,ax
c0018eb8:	83 ec 08             	sub    esp,0x8
c0018ebb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018ec2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018ec6:	50                   	push   eax
c0018ec7:	e8 84 77 fe ff       	call   c0000650 <strcpy>
c0018ecc:	83 c4 10             	add    esp,0x10
c0018ecf:	83 ec 08             	sub    esp,0x8
c0018ed2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018ed6:	50                   	push   eax
c0018ed7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018ede:	e8 c5 fb ff ff       	call   c0018aa8 <FAT::fixFilepath(char*)>
c0018ee3:	83 c4 10             	add    esp,0x10
c0018ee6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018eee:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018ef6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018efb:	83 e0 01             	and    eax,0x1
c0018efe:	74 14                	je     c0018f14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0018f00:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f07:	83 c8 01             	or     eax,0x1
c0018f0a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f11:	8d 76 00             	lea    esi,[esi+0x0]
c0018f14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f19:	83 e0 02             	and    eax,0x2
c0018f1c:	74 12                	je     c0018f30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0018f1e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f25:	83 c8 20             	or     eax,0x20
c0018f28:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f2f:	90                   	nop
c0018f30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f35:	83 e0 04             	and    eax,0x4
c0018f38:	74 12                	je     c0018f4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0018f3a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f41:	83 c8 04             	or     eax,0x4
c0018f44:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f4b:	90                   	nop
c0018f4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f51:	83 e0 08             	and    eax,0x8
c0018f54:	74 12                	je     c0018f68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0018f56:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f5d:	83 c8 02             	or     eax,0x2
c0018f60:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f67:	90                   	nop
c0018f68:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018f6d:	83 e0 01             	and    eax,0x1
c0018f70:	74 12                	je     c0018f84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0018f72:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018f79:	83 c8 01             	or     eax,0x1
c0018f7c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018f83:	90                   	nop
c0018f84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018f89:	83 e0 02             	and    eax,0x2
c0018f8c:	74 12                	je     c0018fa0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0018f8e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018f95:	83 c8 20             	or     eax,0x20
c0018f98:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018f9f:	90                   	nop
c0018fa0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fa5:	83 e0 04             	and    eax,0x4
c0018fa8:	74 12                	je     c0018fbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0018faa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fb1:	83 c8 04             	or     eax,0x4
c0018fb4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fbb:	90                   	nop
c0018fbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fc1:	83 e0 08             	and    eax,0x8
c0018fc4:	74 12                	je     c0018fd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0018fc6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fcd:	83 c8 02             	or     eax,0x2
c0018fd0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fd7:	90                   	nop
c0018fd8:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0018fdf:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fe6:	09 d0                	or     eax,edx
c0018fe8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fef:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0018ff7:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0018fff:	83 ec 04             	sub    esp,0x4
c0019002:	52                   	push   edx
c0019003:	50                   	push   eax
c0019004:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019008:	50                   	push   eax
c0019009:	e8 85 be fe ff       	call   c0004e93 <f_chmod>
c001900e:	83 c4 10             	add    esp,0x10
c0019011:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019018:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001901f:	85 c0                	test   eax,eax
c0019021:	75 09                	jne    c001902c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019023:	b8 00 00 00 00       	mov    eax,0x0
c0019028:	eb 0a                	jmp    c0019034 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001902a:	66 90                	xchg   ax,ax
c001902c:	b8 01 00 00 00       	mov    eax,0x1
c0019031:	8d 76 00             	lea    esi,[esi+0x0]
c0019034:	81 c4 2c 01 00 00    	add    esp,0x12c
c001903a:	c3                   	ret    
c001903b:	90                   	nop

c001903c <FAT::rename(char const*, char const*)>:
c001903c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019042:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001904a:	74 0c                	je     c0019058 <FAT::rename(char const*, char const*)+0x1c>
c001904c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019054:	75 0e                	jne    c0019064 <FAT::rename(char const*, char const*)+0x28>
c0019056:	66 90                	xchg   ax,ax
c0019058:	b8 04 00 00 00       	mov    eax,0x4
c001905d:	e9 9e 00 00 00       	jmp    c0019100 <FAT::rename(char const*, char const*)+0xc4>
c0019062:	66 90                	xchg   ax,ax
c0019064:	83 ec 08             	sub    esp,0x8
c0019067:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001906e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019075:	50                   	push   eax
c0019076:	e8 d5 75 fe ff       	call   c0000650 <strcpy>
c001907b:	83 c4 10             	add    esp,0x10
c001907e:	83 ec 08             	sub    esp,0x8
c0019081:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019088:	50                   	push   eax
c0019089:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019090:	e8 13 fa ff ff       	call   c0018aa8 <FAT::fixFilepath(char*)>
c0019095:	83 c4 10             	add    esp,0x10
c0019098:	83 ec 08             	sub    esp,0x8
c001909b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00190a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190a6:	50                   	push   eax
c00190a7:	e8 a4 75 fe ff       	call   c0000650 <strcpy>
c00190ac:	83 c4 10             	add    esp,0x10
c00190af:	83 ec 08             	sub    esp,0x8
c00190b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190b6:	50                   	push   eax
c00190b7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190be:	e8 e5 f9 ff ff       	call   c0018aa8 <FAT::fixFilepath(char*)>
c00190c3:	83 c4 10             	add    esp,0x10
c00190c6:	83 ec 08             	sub    esp,0x8
c00190c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190cd:	50                   	push   eax
c00190ce:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00190d5:	50                   	push   eax
c00190d6:	e8 00 bc fe ff       	call   c0004cdb <f_rename>
c00190db:	83 c4 10             	add    esp,0x10
c00190de:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00190e5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00190ec:	85 c0                	test   eax,eax
c00190ee:	75 08                	jne    c00190f8 <FAT::rename(char const*, char const*)+0xbc>
c00190f0:	b8 00 00 00 00       	mov    eax,0x0
c00190f5:	eb 09                	jmp    c0019100 <FAT::rename(char const*, char const*)+0xc4>
c00190f7:	90                   	nop
c00190f8:	b8 01 00 00 00       	mov    eax,0x1
c00190fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019100:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019106:	c3                   	ret    
c0019107:	90                   	nop

c0019108 <FAT::mkdir(char const*)>:
c0019108:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001910e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019116:	75 08                	jne    c0019120 <FAT::mkdir(char const*)+0x18>
c0019118:	b8 04 00 00 00       	mov    eax,0x4
c001911d:	eb 61                	jmp    c0019180 <FAT::mkdir(char const*)+0x78>
c001911f:	90                   	nop
c0019120:	83 ec 08             	sub    esp,0x8
c0019123:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001912a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001912e:	50                   	push   eax
c001912f:	e8 1c 75 fe ff       	call   c0000650 <strcpy>
c0019134:	83 c4 10             	add    esp,0x10
c0019137:	83 ec 08             	sub    esp,0x8
c001913a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001913e:	50                   	push   eax
c001913f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019146:	e8 5d f9 ff ff       	call   c0018aa8 <FAT::fixFilepath(char*)>
c001914b:	83 c4 10             	add    esp,0x10
c001914e:	83 ec 0c             	sub    esp,0xc
c0019151:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019155:	50                   	push   eax
c0019156:	e8 e5 b9 fe ff       	call   c0004b40 <f_mkdir>
c001915b:	83 c4 10             	add    esp,0x10
c001915e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019165:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001916c:	85 c0                	test   eax,eax
c001916e:	75 08                	jne    c0019178 <FAT::mkdir(char const*)+0x70>
c0019170:	b8 00 00 00 00       	mov    eax,0x0
c0019175:	eb 09                	jmp    c0019180 <FAT::mkdir(char const*)+0x78>
c0019177:	90                   	nop
c0019178:	b8 01 00 00 00       	mov    eax,0x1
c001917d:	8d 76 00             	lea    esi,[esi+0x0]
c0019180:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019186:	c3                   	ret    
c0019187:	90                   	nop

c0019188 <FAT::exists(char const*)>:
c0019188:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001918e:	83 ec 08             	sub    esp,0x8
c0019191:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019198:	8d 44 24 10          	lea    eax,[esp+0x10]
c001919c:	50                   	push   eax
c001919d:	e8 ae 74 fe ff       	call   c0000650 <strcpy>
c00191a2:	83 c4 10             	add    esp,0x10
c00191a5:	83 ec 08             	sub    esp,0x8
c00191a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00191ac:	50                   	push   eax
c00191ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00191b4:	e8 ef f8 ff ff       	call   c0018aa8 <FAT::fixFilepath(char*)>
c00191b9:	83 c4 10             	add    esp,0x10
c00191bc:	83 ec 08             	sub    esp,0x8
c00191bf:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00191c6:	50                   	push   eax
c00191c7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191cb:	50                   	push   eax
c00191cc:	e8 dd b5 fe ff       	call   c00047ae <f_stat>
c00191d1:	83 c4 10             	add    esp,0x10
c00191d4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00191db:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00191e2:	85 c0                	test   eax,eax
c00191e4:	75 06                	jne    c00191ec <FAT::exists(char const*)+0x64>
c00191e6:	b0 01                	mov    al,0x1
c00191e8:	eb 06                	jmp    c00191f0 <FAT::exists(char const*)+0x68>
c00191ea:	66 90                	xchg   ax,ax
c00191ec:	b0 00                	mov    al,0x0
c00191ee:	66 90                	xchg   ax,ax
c00191f0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00191f6:	c3                   	ret    
c00191f7:	90                   	nop

c00191f8 <isoReadDiscSectorHelper>:
c00191f8:	83 ec 2c             	sub    esp,0x2c
c00191fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00191ff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019203:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019208:	83 e8 41             	sub    eax,0x41
c001920b:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0019212:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019216:	ba 00 00 00 00       	mov    edx,0x0
c001921b:	83 ec 0c             	sub    esp,0xc
c001921e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019222:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019226:	52                   	push   edx
c0019227:	50                   	push   eax
c0019228:	51                   	push   ecx
c0019229:	e8 70 3f ff ff       	call   c000d19e <LogicalDisk::read(unsigned long long, int, void*)>
c001922e:	83 c4 20             	add    esp,0x20
c0019231:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019235:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001923a:	74 0c                	je     c0019248 <isoReadDiscSectorHelper+0x50>
c001923c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019240:	c1 e0 0b             	shl    eax,0xb
c0019243:	eb 0b                	jmp    c0019250 <isoReadDiscSectorHelper+0x58>
c0019245:	8d 76 00             	lea    esi,[esi+0x0]
c0019248:	b8 00 00 00 00       	mov    eax,0x0
c001924d:	8d 76 00             	lea    esi,[esi+0x0]
c0019250:	83 c4 2c             	add    esp,0x2c
c0019253:	c3                   	ret    

c0019254 <iso_kprintf>:
c0019254:	83 ec 0c             	sub    esp,0xc
c0019257:	83 ec 08             	sub    esp,0x8
c001925a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001925e:	68 f9 0f 02 c0       	push   0xc0020ff9
c0019263:	e8 e9 16 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0019268:	83 c4 10             	add    esp,0x10
c001926b:	90                   	nop
c001926c:	83 c4 0c             	add    esp,0xc
c001926f:	c3                   	ret    

c0019270 <iso_kprintfd>:
c0019270:	83 ec 0c             	sub    esp,0xc
c0019273:	83 ec 08             	sub    esp,0x8
c0019276:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001927a:	68 1b 00 02 c0       	push   0xc002001b
c001927f:	e8 cd 16 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c0019284:	83 c4 10             	add    esp,0x10
c0019287:	90                   	nop
c0019288:	83 c4 0c             	add    esp,0xc
c001928b:	c3                   	ret    

c001928c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001928c:	b8 08 00 00 00       	mov    eax,0x8
c0019291:	c3                   	ret    

c0019292 <ISO9660::getName()>:
c0019292:	b8 50 16 02 c0       	mov    eax,0xc0021650
c0019297:	c3                   	ret    

c0019298 <ISO9660::closeDir(void*)>:
c0019298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001929c:	8b 00                	mov    eax,DWORD PTR [eax]
c001929e:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00192a1:	90                   	nop

c00192a2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00192a2:	b8 01 00 00 00       	mov    eax,0x1
c00192a7:	c3                   	ret    

c00192a8 <ISO9660::unlink(char const*)>:
c00192a8:	b8 01 00 00 00       	mov    eax,0x1
c00192ad:	c3                   	ret    

c00192ae <ISO9660::write(void*, unsigned long, void*, int*)>:
c00192ae:	b8 03 00 00 00       	mov    eax,0x3
c00192b3:	c3                   	ret    

c00192b4 <ISO9660::rename(char const*, char const*)>:
c00192b4:	b8 01 00 00 00       	mov    eax,0x1
c00192b9:	c3                   	ret    

c00192ba <ISO9660::mkdir(char const*)>:
c00192ba:	b8 01 00 00 00       	mov    eax,0x1
c00192bf:	c3                   	ret    

c00192c0 <ISO9660::~ISO9660()>:
c00192c0:	83 ec 0c             	sub    esp,0xc
c00192c3:	ba 90 17 02 c0       	mov    edx,0xc0021790
c00192c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192cc:	89 10                	mov    DWORD PTR [eax],edx
c00192ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192d2:	83 ec 0c             	sub    esp,0xc
c00192d5:	50                   	push   eax
c00192d6:	e8 bd 19 ff ff       	call   c000ac98 <Filesystem::~Filesystem()>
c00192db:	83 c4 10             	add    esp,0x10
c00192de:	90                   	nop
c00192df:	83 c4 0c             	add    esp,0xc
c00192e2:	c3                   	ret    
c00192e3:	90                   	nop

c00192e4 <ISO9660::~ISO9660()>:
c00192e4:	83 ec 0c             	sub    esp,0xc
c00192e7:	83 ec 0c             	sub    esp,0xc
c00192ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192ee:	e8 cd ff ff ff       	call   c00192c0 <ISO9660::~ISO9660()>
c00192f3:	83 c4 10             	add    esp,0x10
c00192f6:	83 ec 08             	sub    esp,0x8
c00192f9:	6a 08                	push   0x8
c00192fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192ff:	e8 4f 15 ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c0019304:	83 c4 10             	add    esp,0x10
c0019307:	83 c4 0c             	add    esp,0xc
c001930a:	c3                   	ret    
c001930b:	90                   	nop

c001930c <ISO9660::exists(char const*)>:
c001930c:	83 ec 18             	sub    esp,0x18
c001930f:	68 6b 16 02 c0       	push   0xc002166b
c0019314:	e8 bc 74 ff ff       	call   c00107d5 <KePanic(char const*)>
c0019319:	31 c0                	xor    eax,eax
c001931b:	83 c4 1c             	add    esp,0x1c
c001931e:	c3                   	ret    
c001931f:	90                   	nop

c0019320 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019320:	56                   	push   esi
c0019321:	53                   	push   ebx
c0019322:	53                   	push   ebx
c0019323:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019327:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001932b:	85 db                	test   ebx,ebx
c001932d:	0f 84 ca 00 00 00    	je     c00193fd <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019333:	85 f6                	test   esi,esi
c0019335:	0f 84 c2 00 00 00    	je     c00193fd <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001933b:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019340:	b8 03 00 00 00       	mov    eax,0x3
c0019345:	0f 85 b7 00 00 00    	jne    c0019402 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001934b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001934d:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019353:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001935a:	74 1b                	je     c0019377 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001935c:	85 c0                	test   eax,eax
c001935e:	74 10                	je     c0019370 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019360:	83 ec 0c             	sub    esp,0xc
c0019363:	68 89 16 02 c0       	push   0xc0021689
c0019368:	e8 68 74 ff ff       	call   c00107d5 <KePanic(char const*)>
c001936d:	83 c4 10             	add    esp,0x10
c0019370:	8a 03                	mov    al,BYTE PTR [ebx]
c0019372:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019377:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001937a:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019381:	85 c0                	test   eax,eax
c0019383:	74 09                	je     c001938e <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019385:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001938c:	74 48                	je     c00193d6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001938e:	83 ec 0c             	sub    esp,0xc
c0019391:	68 99 16 02 c0       	push   0xc0021699
c0019396:	e8 b6 15 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001939b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001939e:	83 c4 10             	add    esp,0x10
c00193a1:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00193a8:	85 c0                	test   eax,eax
c00193aa:	74 17                	je     c00193c3 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00193ac:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00193b3:	83 ec 0c             	sub    esp,0xc
c00193b6:	68 b9 16 02 c0       	push   0xc00216b9
c00193bb:	e8 91 15 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00193c0:	83 c4 10             	add    esp,0x10
c00193c3:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00193ca:	83 ec 0c             	sub    esp,0xc
c00193cd:	50                   	push   eax
c00193ce:	e8 94 d6 fe ff       	call   c0006a67 <init_percd>
c00193d3:	83 c4 10             	add    esp,0x10
c00193d6:	51                   	push   ecx
c00193d7:	83 c3 03             	add    ebx,0x3
c00193da:	51                   	push   ecx
c00193db:	6a 00                	push   0x0
c00193dd:	53                   	push   ebx
c00193de:	e8 47 d1 fe ff       	call   c000652a <iso_open>
c00193e3:	83 c4 10             	add    esp,0x10
c00193e6:	89 c2                	mov    edx,eax
c00193e8:	b8 01 00 00 00       	mov    eax,0x1
c00193ed:	83 fa ff             	cmp    edx,0xffffffff
c00193f0:	74 10                	je     c0019402 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00193f2:	83 c2 32             	add    edx,0x32
c00193f5:	31 c0                	xor    eax,eax
c00193f7:	01 d2                	add    edx,edx
c00193f9:	89 16                	mov    DWORD PTR [esi],edx
c00193fb:	eb 05                	jmp    c0019402 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00193fd:	b8 04 00 00 00       	mov    eax,0x4
c0019402:	5a                   	pop    edx
c0019403:	5b                   	pop    ebx
c0019404:	5e                   	pop    esi
c0019405:	c3                   	ret    

c0019406 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019406:	53                   	push   ebx
c0019407:	83 ec 08             	sub    esp,0x8
c001940a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001940e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019412:	85 c0                	test   eax,eax
c0019414:	74 2d                	je     c0019443 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019416:	85 db                	test   ebx,ebx
c0019418:	74 29                	je     c0019443 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001941a:	52                   	push   edx
c001941b:	b9 02 00 00 00       	mov    ecx,0x2
c0019420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019424:	99                   	cdq    
c0019425:	f7 f9                	idiv   ecx
c0019427:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001942b:	83 e8 32             	sub    eax,0x32
c001942e:	50                   	push   eax
c001942f:	e8 9e d1 fe ff       	call   c00065d2 <iso_read>
c0019434:	83 c4 10             	add    esp,0x10
c0019437:	89 03                	mov    DWORD PTR [ebx],eax
c0019439:	09 d0                	or     eax,edx
c001943b:	0f 94 c0             	sete   al
c001943e:	0f b6 c0             	movzx  eax,al
c0019441:	eb 05                	jmp    c0019448 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0019443:	b8 04 00 00 00       	mov    eax,0x4
c0019448:	83 c4 08             	add    esp,0x8
c001944b:	5b                   	pop    ebx
c001944c:	c3                   	ret    
c001944d:	90                   	nop

c001944e <ISO9660::seek(void*, unsigned long long)>:
c001944e:	57                   	push   edi
c001944f:	b8 04 00 00 00       	mov    eax,0x4
c0019454:	56                   	push   esi
c0019455:	51                   	push   ecx
c0019456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001945a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001945e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019462:	85 d2                	test   edx,edx
c0019464:	74 26                	je     c001948c <ISO9660::seek(void*, unsigned long long)+0x3e>
c0019466:	89 d0                	mov    eax,edx
c0019468:	b9 02 00 00 00       	mov    ecx,0x2
c001946d:	6a 00                	push   0x0
c001946f:	99                   	cdq    
c0019470:	f7 f9                	idiv   ecx
c0019472:	57                   	push   edi
c0019473:	56                   	push   esi
c0019474:	83 e8 32             	sub    eax,0x32
c0019477:	50                   	push   eax
c0019478:	e8 6b d2 fe ff       	call   c00066e8 <iso_seek>
c001947d:	83 c4 10             	add    esp,0x10
c0019480:	31 f0                	xor    eax,esi
c0019482:	31 fa                	xor    edx,edi
c0019484:	09 d0                	or     eax,edx
c0019486:	0f 95 c0             	setne  al
c0019489:	0f b6 c0             	movzx  eax,al
c001948c:	5a                   	pop    edx
c001948d:	5e                   	pop    esi
c001948e:	5f                   	pop    edi
c001948f:	c3                   	ret    

c0019490 <ISO9660::tell(void*, unsigned long long*)>:
c0019490:	53                   	push   ebx
c0019491:	83 ec 08             	sub    esp,0x8
c0019494:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019498:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001949c:	85 c0                	test   eax,eax
c001949e:	74 24                	je     c00194c4 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00194a0:	85 db                	test   ebx,ebx
c00194a2:	74 20                	je     c00194c4 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00194a4:	b9 02 00 00 00       	mov    ecx,0x2
c00194a9:	99                   	cdq    
c00194aa:	f7 f9                	idiv   ecx
c00194ac:	83 ec 0c             	sub    esp,0xc
c00194af:	83 e8 32             	sub    eax,0x32
c00194b2:	50                   	push   eax
c00194b3:	e8 b4 d2 fe ff       	call   c000676c <iso_tell>
c00194b8:	83 c4 10             	add    esp,0x10
c00194bb:	89 03                	mov    DWORD PTR [ebx],eax
c00194bd:	31 c0                	xor    eax,eax
c00194bf:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00194c2:	eb 05                	jmp    c00194c9 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00194c4:	b8 04 00 00 00       	mov    eax,0x4
c00194c9:	83 c4 08             	add    esp,0x8
c00194cc:	5b                   	pop    ebx
c00194cd:	c3                   	ret    

c00194ce <ISO9660::stat(void*, unsigned long long*)>:
c00194ce:	56                   	push   esi
c00194cf:	53                   	push   ebx
c00194d0:	83 ec 10             	sub    esp,0x10
c00194d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00194d7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00194db:	68 dd 16 02 c0       	push   0xc00216dd
c00194e0:	e8 6c 14 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00194e5:	83 c4 10             	add    esp,0x10
c00194e8:	85 db                	test   ebx,ebx
c00194ea:	74 2a                	je     c0019516 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00194ec:	85 f6                	test   esi,esi
c00194ee:	74 26                	je     c0019516 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00194f0:	89 d8                	mov    eax,ebx
c00194f2:	b9 02 00 00 00       	mov    ecx,0x2
c00194f7:	99                   	cdq    
c00194f8:	83 ec 0c             	sub    esp,0xc
c00194fb:	f7 f9                	idiv   ecx
c00194fd:	83 e8 32             	sub    eax,0x32
c0019500:	50                   	push   eax
c0019501:	e8 97 d2 fe ff       	call   c000679d <iso_total>
c0019506:	83 c4 10             	add    esp,0x10
c0019509:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019510:	89 06                	mov    DWORD PTR [esi],eax
c0019512:	31 c0                	xor    eax,eax
c0019514:	eb 05                	jmp    c001951b <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0019516:	b8 04 00 00 00       	mov    eax,0x4
c001951b:	5a                   	pop    edx
c001951c:	5b                   	pop    ebx
c001951d:	5e                   	pop    esi
c001951e:	c3                   	ret    
c001951f:	90                   	nop

c0019520 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019520:	55                   	push   ebp
c0019521:	57                   	push   edi
c0019522:	56                   	push   esi
c0019523:	53                   	push   ebx
c0019524:	83 ec 18             	sub    esp,0x18
c0019527:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001952b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001952f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019533:	68 e5 16 02 c0       	push   0xc00216e5
c0019538:	e8 14 14 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001953d:	83 c4 10             	add    esp,0x10
c0019540:	85 ff                	test   edi,edi
c0019542:	0f 94 c0             	sete   al
c0019545:	85 f6                	test   esi,esi
c0019547:	0f 94 c2             	sete   dl
c001954a:	09 d0                	or     eax,edx
c001954c:	a8 01                	test   al,0x1
c001954e:	0f 85 dd 00 00 00    	jne    c0019631 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019554:	85 db                	test   ebx,ebx
c0019556:	0f 84 d5 00 00 00    	je     c0019631 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001955c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001955f:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0019565:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001956c:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019573:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019575:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c001957b:	74 1b                	je     c0019598 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001957d:	85 c0                	test   eax,eax
c001957f:	74 10                	je     c0019591 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019581:	83 ec 0c             	sub    esp,0xc
c0019584:	68 89 16 02 c0       	push   0xc0021689
c0019589:	e8 47 72 ff ff       	call   c00107d5 <KePanic(char const*)>
c001958e:	83 c4 10             	add    esp,0x10
c0019591:	8a 03                	mov    al,BYTE PTR [ebx]
c0019593:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019598:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001959b:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00195a2:	85 c0                	test   eax,eax
c00195a4:	74 09                	je     c00195af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00195a6:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00195ad:	74 51                	je     c0019600 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00195af:	83 ec 0c             	sub    esp,0xc
c00195b2:	68 ed 16 02 c0       	push   0xc00216ed
c00195b7:	e8 95 13 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00195bc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00195bf:	83 c4 10             	add    esp,0x10
c00195c2:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c00195ca:	74 21                	je     c00195ed <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00195cc:	83 ec 0c             	sub    esp,0xc
c00195cf:	68 0d 17 02 c0       	push   0xc002170d
c00195d4:	e8 78 13 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00195d9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00195dc:	83 c4 10             	add    esp,0x10
c00195df:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00195e6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00195ed:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00195f4:	83 ec 0c             	sub    esp,0xc
c00195f7:	50                   	push   eax
c00195f8:	e8 6a d4 fe ff       	call   c0006a67 <init_percd>
c00195fd:	83 c4 10             	add    esp,0x10
c0019600:	52                   	push   edx
c0019601:	83 c3 03             	add    ebx,0x3
c0019604:	52                   	push   edx
c0019605:	6a 00                	push   0x0
c0019607:	53                   	push   ebx
c0019608:	e8 1d cf fe ff       	call   c000652a <iso_open>
c001960d:	83 c4 10             	add    esp,0x10
c0019610:	83 f8 ff             	cmp    eax,0xffffffff
c0019613:	89 c5                	mov    ebp,eax
c0019615:	75 21                	jne    c0019638 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0019617:	50                   	push   eax
c0019618:	50                   	push   eax
c0019619:	6a 01                	push   0x1
c001961b:	53                   	push   ebx
c001961c:	e8 09 cf fe ff       	call   c000652a <iso_open>
c0019621:	83 c4 10             	add    esp,0x10
c0019624:	ba 02 00 00 00       	mov    edx,0x2
c0019629:	40                   	inc    eax
c001962a:	74 2b                	je     c0019657 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001962c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001962f:	eb 24                	jmp    c0019655 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019631:	ba 04 00 00 00       	mov    edx,0x4
c0019636:	eb 1f                	jmp    c0019657 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019638:	83 ec 0c             	sub    esp,0xc
c001963b:	50                   	push   eax
c001963c:	e8 5c d1 fe ff       	call   c000679d <iso_total>
c0019641:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019648:	89 07                	mov    DWORD PTR [edi],eax
c001964a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001964d:	e8 62 cf fe ff       	call   c00065b4 <iso_close>
c0019652:	83 c4 10             	add    esp,0x10
c0019655:	31 d2                	xor    edx,edx
c0019657:	83 c4 0c             	add    esp,0xc
c001965a:	89 d0                	mov    eax,edx
c001965c:	5b                   	pop    ebx
c001965d:	5e                   	pop    esi
c001965e:	5f                   	pop    edi
c001965f:	5d                   	pop    ebp
c0019660:	c3                   	ret    
c0019661:	90                   	nop

c0019662 <ISO9660::close(void*)>:
c0019662:	83 ec 0c             	sub    esp,0xc
c0019665:	b8 04 00 00 00       	mov    eax,0x4
c001966a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001966e:	85 d2                	test   edx,edx
c0019670:	74 1b                	je     c001968d <ISO9660::close(void*)+0x2b>
c0019672:	89 d0                	mov    eax,edx
c0019674:	b9 02 00 00 00       	mov    ecx,0x2
c0019679:	99                   	cdq    
c001967a:	83 ec 0c             	sub    esp,0xc
c001967d:	f7 f9                	idiv   ecx
c001967f:	83 e8 32             	sub    eax,0x32
c0019682:	50                   	push   eax
c0019683:	e8 2c cf fe ff       	call   c00065b4 <iso_close>
c0019688:	83 c4 10             	add    esp,0x10
c001968b:	31 c0                	xor    eax,eax
c001968d:	83 c4 0c             	add    esp,0xc
c0019690:	c3                   	ret    
c0019691:	90                   	nop

c0019692 <ISO9660::openDir(char const*, void**)>:
c0019692:	56                   	push   esi
c0019693:	53                   	push   ebx
c0019694:	50                   	push   eax
c0019695:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019699:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001969d:	85 db                	test   ebx,ebx
c001969f:	0f 84 bd 00 00 00    	je     c0019762 <ISO9660::openDir(char const*, void**)+0xd0>
c00196a5:	85 f6                	test   esi,esi
c00196a7:	0f 84 b5 00 00 00    	je     c0019762 <ISO9660::openDir(char const*, void**)+0xd0>
c00196ad:	8a 13                	mov    dl,BYTE PTR [ebx]
c00196af:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c00196b5:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00196bc:	74 1b                	je     c00196d9 <ISO9660::openDir(char const*, void**)+0x47>
c00196be:	85 c0                	test   eax,eax
c00196c0:	74 10                	je     c00196d2 <ISO9660::openDir(char const*, void**)+0x40>
c00196c2:	83 ec 0c             	sub    esp,0xc
c00196c5:	68 89 16 02 c0       	push   0xc0021689
c00196ca:	e8 06 71 ff ff       	call   c00107d5 <KePanic(char const*)>
c00196cf:	83 c4 10             	add    esp,0x10
c00196d2:	8a 03                	mov    al,BYTE PTR [ebx]
c00196d4:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00196d9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196dc:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00196e3:	85 c0                	test   eax,eax
c00196e5:	74 10                	je     c00196f7 <ISO9660::openDir(char const*, void**)+0x65>
c00196e7:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00196ee:	74 1a                	je     c001970a <ISO9660::openDir(char const*, void**)+0x78>
c00196f0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00196f7:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00196fe:	83 ec 0c             	sub    esp,0xc
c0019701:	50                   	push   eax
c0019702:	e8 60 d3 fe ff       	call   c0006a67 <init_percd>
c0019707:	83 c4 10             	add    esp,0x10
c001970a:	50                   	push   eax
c001970b:	83 c3 03             	add    ebx,0x3
c001970e:	50                   	push   eax
c001970f:	6a 01                	push   0x1
c0019711:	53                   	push   ebx
c0019712:	e8 13 ce fe ff       	call   c000652a <iso_open>
c0019717:	83 c4 10             	add    esp,0x10
c001971a:	83 f8 ff             	cmp    eax,0xffffffff
c001971d:	89 c3                	mov    ebx,eax
c001971f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019724:	75 1c                	jne    c0019742 <ISO9660::openDir(char const*, void**)+0xb0>
c0019726:	53                   	push   ebx
c0019727:	53                   	push   ebx
c0019728:	68 31 17 02 c0       	push   0xc0021731
c001972d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019733:	e8 5e f3 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c0019738:	83 c4 10             	add    esp,0x10
c001973b:	b8 01 00 00 00       	mov    eax,0x1
c0019740:	eb 25                	jmp    c0019767 <ISO9660::openDir(char const*, void**)+0xd5>
c0019742:	51                   	push   ecx
c0019743:	01 db                	add    ebx,ebx
c0019745:	51                   	push   ecx
c0019746:	83 c3 65             	add    ebx,0x65
c0019749:	68 44 17 02 c0       	push   0xc0021744
c001974e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019754:	e8 3d f3 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c0019759:	83 c4 10             	add    esp,0x10
c001975c:	31 c0                	xor    eax,eax
c001975e:	89 1e                	mov    DWORD PTR [esi],ebx
c0019760:	eb 05                	jmp    c0019767 <ISO9660::openDir(char const*, void**)+0xd5>
c0019762:	b8 04 00 00 00       	mov    eax,0x4
c0019767:	5a                   	pop    edx
c0019768:	5b                   	pop    ebx
c0019769:	5e                   	pop    esi
c001976a:	c3                   	ret    
c001976b:	90                   	nop

c001976c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001976c:	55                   	push   ebp
c001976d:	57                   	push   edi
c001976e:	56                   	push   esi
c001976f:	53                   	push   ebx
c0019770:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019776:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001977d:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019784:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001978b:	85 db                	test   ebx,ebx
c001978d:	0f 84 e4 00 00 00    	je     c0019877 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019793:	85 ed                	test   ebp,ebp
c0019795:	0f 84 dc 00 00 00    	je     c0019877 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001979b:	83 ec 0c             	sub    esp,0xc
c001979e:	68 57 17 02 c0       	push   0xc0021757
c00197a3:	e8 a9 11 ff ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c00197a8:	89 d8                	mov    eax,ebx
c00197aa:	b9 02 00 00 00       	mov    ecx,0x2
c00197af:	99                   	cdq    
c00197b0:	f7 f9                	idiv   ecx
c00197b2:	83 e8 32             	sub    eax,0x32
c00197b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00197b8:	e8 32 d0 fe ff       	call   c00067ef <iso_readdir>
c00197bd:	83 c4 10             	add    esp,0x10
c00197c0:	85 c0                	test   eax,eax
c00197c2:	89 c3                	mov    ebx,eax
c00197c4:	75 38                	jne    c00197fe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c00197c6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00197cb:	53                   	push   ebx
c00197cc:	53                   	push   ebx
c00197cd:	68 62 17 02 c0       	push   0xc0021762
c00197d2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197d8:	e8 b9 f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c00197dd:	83 c4 0c             	add    esp,0xc
c00197e0:	68 10 01 00 00       	push   0x110
c00197e5:	6a 00                	push   0x0
c00197e7:	57                   	push   edi
c00197e8:	e8 03 6d fe ff       	call   c00004f0 <memset>
c00197ed:	83 c4 10             	add    esp,0x10
c00197f0:	b8 01 00 00 00       	mov    eax,0x1
c00197f5:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c00197fc:	eb 7e                	jmp    c001987c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00197fe:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019804:	8d 70 08             	lea    esi,[eax+0x8]
c0019807:	83 ec 0c             	sub    esp,0xc
c001980a:	56                   	push   esi
c001980b:	e8 70 6d fe ff       	call   c0000580 <strlen>
c0019810:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019818:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001981c:	83 c4 10             	add    esp,0x10
c001981f:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0019823:	75 0a                	jne    c001982f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0019825:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0019828:	b8 02 00 00 00       	mov    eax,0x2
c001982d:	74 05                	je     c0019834 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001982f:	b8 01 00 00 00       	mov    eax,0x1
c0019834:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019838:	50                   	push   eax
c0019839:	50                   	push   eax
c001983a:	56                   	push   esi
c001983b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001983f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019843:	50                   	push   eax
c0019844:	e8 07 6e fe ff       	call   c0000650 <strcpy>
c0019849:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019850:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019852:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0019859:	5a                   	pop    edx
c001985a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001985f:	59                   	pop    ecx
c0019860:	68 75 17 02 c0       	push   0xc0021775
c0019865:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001986b:	e8 26 f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c0019870:	83 c4 10             	add    esp,0x10
c0019873:	31 c0                	xor    eax,eax
c0019875:	eb 05                	jmp    c001987c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019877:	b8 04 00 00 00       	mov    eax,0x4
c001987c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019882:	5b                   	pop    ebx
c0019883:	5e                   	pop    esi
c0019884:	5f                   	pop    edi
c0019885:	5d                   	pop    ebp
c0019886:	c3                   	ret    

c0019887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019887:	57                   	push   edi
c0019888:	56                   	push   esi
c0019889:	53                   	push   ebx
c001988a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001988e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019892:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c0019898:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001989c:	0f be cb             	movsx  ecx,bl
c001989f:	75 0b                	jne    c00198ac <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00198a1:	0f be 05 c4 22 02 c0 	movsx  eax,BYTE PTR ds:0xc00222c4
c00198a8:	39 c8                	cmp    eax,ecx
c00198aa:	74 47                	je     c00198f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00198ac:	83 ec 0c             	sub    esp,0xc
c00198af:	31 d2                	xor    edx,edx
c00198b1:	68 40 83 02 c0       	push   0xc0028340
c00198b6:	6a 01                	push   0x1
c00198b8:	52                   	push   edx
c00198b9:	56                   	push   esi
c00198ba:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c00198c1:	e8 d8 38 ff ff       	call   c000d19e <LogicalDisk::read(unsigned long long, int, void*)>
c00198c6:	83 c4 20             	add    esp,0x20
c00198c9:	85 c0                	test   eax,eax
c00198cb:	75 0e                	jne    c00198db <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00198cd:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c00198d3:	88 1d c4 22 02 c0    	mov    BYTE PTR ds:0xc00222c4,bl
c00198d9:	eb 18                	jmp    c00198f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00198db:	50                   	push   eax
c00198dc:	68 00 08 00 00       	push   0x800
c00198e1:	6a 00                	push   0x0
c00198e3:	57                   	push   edi
c00198e4:	e8 07 6c fe ff       	call   c00004f0 <memset>
c00198e9:	83 c4 10             	add    esp,0x10
c00198ec:	b8 01 00 00 00       	mov    eax,0x1
c00198f1:	eb 0e                	jmp    c0019901 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00198f3:	be 40 83 02 c0       	mov    esi,0xc0028340
c00198f8:	b9 00 08 00 00       	mov    ecx,0x800
c00198fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198ff:	31 c0                	xor    eax,eax
c0019901:	5b                   	pop    ebx
c0019902:	5e                   	pop    esi
c0019903:	5f                   	pop    edi
c0019904:	c3                   	ret    
c0019905:	90                   	nop

c0019906 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019906:	53                   	push   ebx
c0019907:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001990d:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019917:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001991e:	8d 58 41             	lea    ebx,[eax+0x41]
c0019921:	0f be db             	movsx  ebx,bl
c0019924:	53                   	push   ebx
c0019925:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019929:	50                   	push   eax
c001992a:	6a 10                	push   0x10
c001992c:	e8 56 ff ff ff       	call   c0019887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019931:	83 c4 10             	add    esp,0x10
c0019934:	31 d2                	xor    edx,edx
c0019936:	85 c0                	test   eax,eax
c0019938:	75 33                	jne    c001996d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001993a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001993f:	75 2c                	jne    c001996d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019941:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019946:	75 25                	jne    c001996d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019948:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001994d:	75 1e                	jne    c001996d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001994f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019954:	75 17                	jne    c001996d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019956:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001995b:	75 10                	jne    c001996d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001995d:	83 ec 0c             	sub    esp,0xc
c0019960:	53                   	push   ebx
c0019961:	e8 01 d1 fe ff       	call   c0006a67 <init_percd>
c0019966:	83 c4 10             	add    esp,0x10
c0019969:	40                   	inc    eax
c001996a:	0f 95 c2             	setne  dl
c001996d:	81 c4 08 08 00 00    	add    esp,0x808
c0019973:	88 d0                	mov    al,dl
c0019975:	5b                   	pop    ebx
c0019976:	c3                   	ret    
c0019977:	90                   	nop

c0019978 <ISO9660::ISO9660()>:
c0019978:	83 ec 0c             	sub    esp,0xc
c001997b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001997f:	83 ec 0c             	sub    esp,0xc
c0019982:	50                   	push   eax
c0019983:	e8 ec 12 ff ff       	call   c000ac74 <Filesystem::Filesystem()>
c0019988:	83 c4 10             	add    esp,0x10
c001998b:	ba 90 17 02 c0       	mov    edx,0xc0021790
c0019990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019994:	89 10                	mov    DWORD PTR [eax],edx
c0019996:	e8 de d1 fe ff       	call   c0006b79 <fs_iso9660_init>
c001999b:	90                   	nop
c001999c:	83 c4 0c             	add    esp,0xc
c001999f:	c3                   	ret    

c00199a0 <SoundCard::beginPlayback()>:
c00199a0:	c7 44 24 04 f0 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217f0
c00199a8:	e9 28 6e ff ff       	jmp    c00107d5 <KePanic(char const*)>
c00199ad:	90                   	nop

c00199ae <SoundCard::stopPlayback()>:
c00199ae:	c7 44 24 04 f0 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217f0
c00199b6:	e9 1a 6e ff ff       	jmp    c00107d5 <KePanic(char const*)>
c00199bb:	90                   	nop

c00199bc <SoundCard::SoundCard(char const*)>:
c00199bc:	83 ec 1c             	sub    esp,0x1c
c00199bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199c3:	83 ec 08             	sub    esp,0x8
c00199c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199ca:	50                   	push   eax
c00199cb:	e8 7c 25 ff ff       	call   c000bf4c <Device::Device(char const*)>
c00199d0:	83 c4 10             	add    esp,0x10
c00199d3:	ba 3c 18 02 c0       	mov    edx,0xc002183c
c00199d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199dc:	89 10                	mov    DWORD PTR [eax],edx
c00199de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199e2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00199e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199ed:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00199f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199fb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a09:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a17:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019a21:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a29:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019a2e:	7f 1a                	jg     c0019a4a <SoundCard::SoundCard(char const*)+0x8e>
c0019a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a38:	83 c2 54             	add    edx,0x54
c0019a3b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019a43:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019a48:	eb df                	jmp    c0019a29 <SoundCard::SoundCard(char const*)+0x6d>
c0019a4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a4e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a55:	90                   	nop
c0019a56:	83 c4 1c             	add    esp,0x1c
c0019a59:	c3                   	ret    

c0019a5a <SoundCard::~SoundCard()>:
c0019a5a:	83 ec 0c             	sub    esp,0xc
c0019a5d:	ba 3c 18 02 c0       	mov    edx,0xc002183c
c0019a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a66:	89 10                	mov    DWORD PTR [eax],edx
c0019a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a6c:	83 ec 0c             	sub    esp,0xc
c0019a6f:	50                   	push   eax
c0019a70:	e8 41 22 ff ff       	call   c000bcb6 <Device::~Device()>
c0019a75:	83 c4 10             	add    esp,0x10
c0019a78:	90                   	nop
c0019a79:	83 c4 0c             	add    esp,0xc
c0019a7c:	c3                   	ret    
c0019a7d:	90                   	nop

c0019a7e <SoundCard::~SoundCard()>:
c0019a7e:	83 ec 0c             	sub    esp,0xc
c0019a81:	83 ec 0c             	sub    esp,0xc
c0019a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a88:	e8 cd ff ff ff       	call   c0019a5a <SoundCard::~SoundCard()>
c0019a8d:	83 c4 10             	add    esp,0x10
c0019a90:	83 ec 08             	sub    esp,0x8
c0019a93:	68 e8 01 00 00       	push   0x1e8
c0019a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a9c:	e8 b2 0d ff ff       	call   c000a853 <operator delete(void*, unsigned long)>
c0019aa1:	83 c4 10             	add    esp,0x10
c0019aa4:	83 c4 0c             	add    esp,0xc
c0019aa7:	c3                   	ret    

c0019aa8 <SoundCard::configureRates(int, int, int)>:
c0019aa8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019aac:	31 c0                	xor    eax,eax
c0019aae:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019ab5:	75 20                	jne    c0019ad7 <SoundCard::configureRates(int, int, int)+0x2f>
c0019ab7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019abb:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019ac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ac5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019acb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019acf:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019ad5:	b0 01                	mov    al,0x1
c0019ad7:	c3                   	ret    

c0019ad8 <SoundCard::getSamples16(int, short*)>:
c0019ad8:	55                   	push   ebp
c0019ad9:	57                   	push   edi
c0019ada:	31 ff                	xor    edi,edi
c0019adc:	56                   	push   esi
c0019add:	53                   	push   ebx
c0019ade:	31 db                	xor    ebx,ebx
c0019ae0:	83 ec 10             	sub    esp,0x10
c0019ae3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019ae7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019aeb:	8d 04 36             	lea    eax,[esi+esi*1]
c0019aee:	50                   	push   eax
c0019aef:	6a 00                	push   0x0
c0019af1:	55                   	push   ebp
c0019af2:	e8 f9 69 fe ff       	call   c00004f0 <memset>
c0019af7:	83 c4 10             	add    esp,0x10
c0019afa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019afe:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019b05:	85 c0                	test   eax,eax
c0019b07:	74 1a                	je     c0019b23 <SoundCard::getSamples16(int, short*)+0x4b>
c0019b09:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019b0d:	75 14                	jne    c0019b23 <SoundCard::getSamples16(int, short*)+0x4b>
c0019b0f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019b13:	55                   	push   ebp
c0019b14:	56                   	push   esi
c0019b15:	50                   	push   eax
c0019b16:	e8 f1 02 00 00       	call   c0019e0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019b1b:	83 c4 10             	add    esp,0x10
c0019b1e:	39 c3                	cmp    ebx,eax
c0019b20:	0f 4c d8             	cmovl  ebx,eax
c0019b23:	47                   	inc    edi
c0019b24:	83 ff 20             	cmp    edi,0x20
c0019b27:	75 d1                	jne    c0019afa <SoundCard::getSamples16(int, short*)+0x22>
c0019b29:	83 c4 0c             	add    esp,0xc
c0019b2c:	89 d8                	mov    eax,ebx
c0019b2e:	5b                   	pop    ebx
c0019b2f:	5e                   	pop    esi
c0019b30:	5f                   	pop    edi
c0019b31:	5d                   	pop    ebp
c0019b32:	c3                   	ret    
c0019b33:	90                   	nop

c0019b34 <SoundCard::getSamples32(int, int*)>:
c0019b34:	55                   	push   ebp
c0019b35:	57                   	push   edi
c0019b36:	31 ff                	xor    edi,edi
c0019b38:	56                   	push   esi
c0019b39:	31 f6                	xor    esi,esi
c0019b3b:	53                   	push   ebx
c0019b3c:	83 ec 10             	sub    esp,0x10
c0019b3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b43:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b47:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019b4b:	c1 e0 02             	shl    eax,0x2
c0019b4e:	50                   	push   eax
c0019b4f:	6a 00                	push   0x0
c0019b51:	55                   	push   ebp
c0019b52:	e8 99 69 fe ff       	call   c00004f0 <memset>
c0019b57:	83 c4 10             	add    esp,0x10
c0019b5a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019b61:	85 c0                	test   eax,eax
c0019b63:	74 1a                	je     c0019b7f <SoundCard::getSamples32(int, int*)+0x4b>
c0019b65:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019b69:	75 14                	jne    c0019b7f <SoundCard::getSamples32(int, int*)+0x4b>
c0019b6b:	53                   	push   ebx
c0019b6c:	55                   	push   ebp
c0019b6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b71:	50                   	push   eax
c0019b72:	e8 65 03 00 00       	call   c0019edc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019b77:	83 c4 10             	add    esp,0x10
c0019b7a:	39 c6                	cmp    esi,eax
c0019b7c:	0f 4c f0             	cmovl  esi,eax
c0019b7f:	47                   	inc    edi
c0019b80:	83 ff 20             	cmp    edi,0x20
c0019b83:	75 d5                	jne    c0019b5a <SoundCard::getSamples32(int, int*)+0x26>
c0019b85:	85 f6                	test   esi,esi
c0019b87:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019b8e:	75 0f                	jne    c0019b9f <SoundCard::getSamples32(int, int*)+0x6b>
c0019b90:	85 c0                	test   eax,eax
c0019b92:	74 1b                	je     c0019baf <SoundCard::getSamples32(int, int*)+0x7b>
c0019b94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b96:	83 ec 0c             	sub    esp,0xc
c0019b99:	53                   	push   ebx
c0019b9a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019b9d:	eb 0d                	jmp    c0019bac <SoundCard::getSamples32(int, int*)+0x78>
c0019b9f:	85 c0                	test   eax,eax
c0019ba1:	75 0c                	jne    c0019baf <SoundCard::getSamples32(int, int*)+0x7b>
c0019ba3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ba5:	83 ec 0c             	sub    esp,0xc
c0019ba8:	53                   	push   ebx
c0019ba9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019bac:	83 c4 10             	add    esp,0x10
c0019baf:	83 c4 0c             	add    esp,0xc
c0019bb2:	89 f0                	mov    eax,esi
c0019bb4:	5b                   	pop    ebx
c0019bb5:	5e                   	pop    esi
c0019bb6:	5f                   	pop    edi
c0019bb7:	5d                   	pop    ebp
c0019bb8:	c3                   	ret    
c0019bb9:	90                   	nop

c0019bba <SoundCard::addChannel(SoundPort*)>:
c0019bba:	83 ec 0c             	sub    esp,0xc
c0019bbd:	31 c0                	xor    eax,eax
c0019bbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bc3:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019bcb:	74 1b                	je     c0019be8 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019bcd:	40                   	inc    eax
c0019bce:	83 f8 20             	cmp    eax,0x20
c0019bd1:	75 f0                	jne    c0019bc3 <SoundCard::addChannel(SoundPort*)+0x9>
c0019bd3:	83 ec 0c             	sub    esp,0xc
c0019bd6:	68 15 18 02 c0       	push   0xc0021815
c0019bdb:	e8 f5 6b ff ff       	call   c00107d5 <KePanic(char const*)>
c0019be0:	83 c4 10             	add    esp,0x10
c0019be3:	83 c8 ff             	or     eax,0xffffffff
c0019be6:	eb 0b                	jmp    c0019bf3 <SoundCard::addChannel(SoundPort*)+0x39>
c0019be8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019bec:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019bf3:	83 c4 0c             	add    esp,0xc
c0019bf6:	c3                   	ret    
c0019bf7:	90                   	nop

c0019bf8 <SoundCard::removeChannel(int)>:
c0019bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c00:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019c0b:	c3                   	ret    

c0019c0c <SoundPort::SoundPort(int, int, int, int)>:
c0019c0c:	83 ec 0c             	sub    esp,0xc
c0019c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c13:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c1e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c2a:	89 10                	mov    DWORD PTR [eax],edx
c0019c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c3f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c42:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019c47:	75 13                	jne    c0019c5c <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c4f:	05 a0 0f 00 00       	add    eax,0xfa0
c0019c54:	d1 e0                	shl    eax,1
c0019c56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019c5a:	66 90                	xchg   ax,ax
c0019c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019c64:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c6b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c76:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019c79:	c1 e0 02             	shl    eax,0x2
c0019c7c:	83 ec 0c             	sub    esp,0xc
c0019c7f:	50                   	push   eax
c0019c80:	e8 46 de fe ff       	call   c0007acb <malloc>
c0019c85:	83 c4 10             	add    esp,0x10
c0019c88:	89 c2                	mov    edx,eax
c0019c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c8e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019c91:	90                   	nop
c0019c92:	83 c4 0c             	add    esp,0xc
c0019c95:	c3                   	ret    
c0019c96:	66 90                	xchg   ax,ax

c0019c98 <SoundPort::~SoundPort()>:
c0019c98:	83 ec 0c             	sub    esp,0xc
c0019c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c9f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019ca2:	85 c0                	test   eax,eax
c0019ca4:	74 1e                	je     c0019cc4 <SoundPort::~SoundPort()+0x2c>
c0019ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019caa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019cad:	83 ec 0c             	sub    esp,0xc
c0019cb0:	50                   	push   eax
c0019cb1:	e8 25 de fe ff       	call   c0007adb <free>
c0019cb6:	83 c4 10             	add    esp,0x10
c0019cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cbd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019cc4:	90                   	nop
c0019cc5:	83 c4 0c             	add    esp,0xc
c0019cc8:	c3                   	ret    
c0019cc9:	90                   	nop
c0019cca:	66 90                	xchg   ax,ax

c0019ccc <SoundPort::unpause()>:
c0019ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cd0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019cd4:	c3                   	ret    
c0019cd5:	90                   	nop
c0019cd6:	66 90                	xchg   ax,ax

c0019cd8 <SoundPort::pause()>:
c0019cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cdc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019ce0:	c3                   	ret    
c0019ce1:	90                   	nop
c0019ce2:	66 90                	xchg   ax,ax

c0019ce4 <SoundPort::getBufferUsed()>:
c0019ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ce8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019ceb:	c3                   	ret    

c0019cec <SoundPort::getBufferSize()>:
c0019cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cf0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019cf3:	c3                   	ret    

c0019cf4 <SoundPort::buffer16(short*, int)>:
c0019cf4:	55                   	push   ebp
c0019cf5:	57                   	push   edi
c0019cf6:	56                   	push   esi
c0019cf7:	53                   	push   ebx
c0019cf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019cfc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019d00:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019d03:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019d06:	74 68                	je     c0019d70 <SoundPort::buffer16(short*, int)+0x7c>
c0019d08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d0c:	85 c9                	test   ecx,ecx
c0019d0e:	7e 60                	jle    c0019d70 <SoundPort::buffer16(short*, int)+0x7c>
c0019d10:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019d14:	8d 70 01             	lea    esi,[eax+0x1]
c0019d17:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019d1a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019d1d:	c1 e1 0f             	shl    ecx,0xf
c0019d20:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019d23:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d26:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d29:	74 4d                	je     c0019d78 <SoundPort::buffer16(short*, int)+0x84>
c0019d2b:	31 f6                	xor    esi,esi
c0019d2d:	eb 21                	jmp    c0019d50 <SoundPort::buffer16(short*, int)+0x5c>
c0019d2f:	90                   	nop
c0019d30:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019d35:	8d 79 01             	lea    edi,[ecx+0x1]
c0019d38:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019d3b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019d3e:	c1 e3 0f             	shl    ebx,0xf
c0019d41:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019d44:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d47:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d4a:	74 1c                	je     c0019d68 <SoundPort::buffer16(short*, int)+0x74>
c0019d4c:	89 c6                	mov    esi,eax
c0019d4e:	66 90                	xchg   ax,ax
c0019d50:	8d 46 01             	lea    eax,[esi+0x1]
c0019d53:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019d57:	75 d7                	jne    c0019d30 <SoundPort::buffer16(short*, int)+0x3c>
c0019d59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d60:	5b                   	pop    ebx
c0019d61:	5e                   	pop    esi
c0019d62:	5f                   	pop    edi
c0019d63:	5d                   	pop    ebp
c0019d64:	c3                   	ret    
c0019d65:	8d 76 00             	lea    esi,[esi+0x0]
c0019d68:	5b                   	pop    ebx
c0019d69:	8d 46 02             	lea    eax,[esi+0x2]
c0019d6c:	5e                   	pop    esi
c0019d6d:	5f                   	pop    edi
c0019d6e:	5d                   	pop    ebp
c0019d6f:	c3                   	ret    
c0019d70:	5b                   	pop    ebx
c0019d71:	31 c0                	xor    eax,eax
c0019d73:	5e                   	pop    esi
c0019d74:	5f                   	pop    edi
c0019d75:	5d                   	pop    ebp
c0019d76:	c3                   	ret    
c0019d77:	90                   	nop
c0019d78:	b8 01 00 00 00       	mov    eax,0x1
c0019d7d:	eb e1                	jmp    c0019d60 <SoundPort::buffer16(short*, int)+0x6c>
c0019d7f:	90                   	nop

c0019d80 <SoundPort::buffer32(int*, int)>:
c0019d80:	55                   	push   ebp
c0019d81:	57                   	push   edi
c0019d82:	56                   	push   esi
c0019d83:	53                   	push   ebx
c0019d84:	83 ec 04             	sub    esp,0x4
c0019d87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019d8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d8f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019d93:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d96:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d99:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d9c:	74 5a                	je     c0019df8 <SoundPort::buffer32(int*, int)+0x78>
c0019d9e:	85 c0                	test   eax,eax
c0019da0:	7e 56                	jle    c0019df8 <SoundPort::buffer32(int*, int)+0x78>
c0019da2:	8d 71 01             	lea    esi,[ecx+0x1]
c0019da5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019da8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019dab:	8b 37                	mov    esi,DWORD PTR [edi]
c0019dad:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019db0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019db3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019db6:	74 4c                	je     c0019e04 <SoundPort::buffer32(int*, int)+0x84>
c0019db8:	31 f6                	xor    esi,esi
c0019dba:	eb 1c                	jmp    c0019dd8 <SoundPort::buffer32(int*, int)+0x58>
c0019dbc:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019dbf:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019dc2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019dc5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019dc8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019dcc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019dcf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019dd2:	74 18                	je     c0019dec <SoundPort::buffer32(int*, int)+0x6c>
c0019dd4:	89 de                	mov    esi,ebx
c0019dd6:	66 90                	xchg   ax,ax
c0019dd8:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019ddb:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019dde:	75 dc                	jne    c0019dbc <SoundPort::buffer32(int*, int)+0x3c>
c0019de0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019de3:	90                   	nop
c0019de4:	83 c4 04             	add    esp,0x4
c0019de7:	5b                   	pop    ebx
c0019de8:	5e                   	pop    esi
c0019de9:	5f                   	pop    edi
c0019dea:	5d                   	pop    ebp
c0019deb:	c3                   	ret    
c0019dec:	8d 46 02             	lea    eax,[esi+0x2]
c0019def:	83 c4 04             	add    esp,0x4
c0019df2:	5b                   	pop    ebx
c0019df3:	5e                   	pop    esi
c0019df4:	5f                   	pop    edi
c0019df5:	5d                   	pop    ebp
c0019df6:	c3                   	ret    
c0019df7:	90                   	nop
c0019df8:	83 c4 04             	add    esp,0x4
c0019dfb:	31 c0                	xor    eax,eax
c0019dfd:	5b                   	pop    ebx
c0019dfe:	5e                   	pop    esi
c0019dff:	5f                   	pop    edi
c0019e00:	5d                   	pop    ebp
c0019e01:	c3                   	ret    
c0019e02:	66 90                	xchg   ax,ax
c0019e04:	b8 01 00 00 00       	mov    eax,0x1
c0019e09:	eb d9                	jmp    c0019de4 <SoundPort::buffer32(int*, int)+0x64>
c0019e0b:	90                   	nop

c0019e0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019e0c:	55                   	push   ebp
c0019e0d:	57                   	push   edi
c0019e0e:	56                   	push   esi
c0019e0f:	53                   	push   ebx
c0019e10:	83 ec 0c             	sub    esp,0xc
c0019e13:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019e17:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019e1b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019e1f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019e23:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019e29:	39 03                	cmp    DWORD PTR [ebx],eax
c0019e2b:	74 13                	je     c0019e40 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0019e2d:	83 ec 0c             	sub    esp,0xc
c0019e30:	68 68 18 02 c0       	push   0xc0021868
c0019e35:	e8 9b 69 ff ff       	call   c00107d5 <KePanic(char const*)>
c0019e3a:	83 c4 10             	add    esp,0x10
c0019e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e40:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019e46:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019e49:	74 11                	je     c0019e5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0019e4b:	83 ec 0c             	sub    esp,0xc
c0019e4e:	68 a7 18 02 c0       	push   0xc00218a7
c0019e53:	e8 7d 69 ff ff       	call   c00107d5 <KePanic(char const*)>
c0019e58:	83 c4 10             	add    esp,0x10
c0019e5b:	90                   	nop
c0019e5c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019e62:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019e65:	74 11                	je     c0019e78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0019e67:	83 ec 0c             	sub    esp,0xc
c0019e6a:	68 a7 18 02 c0       	push   0xc00218a7
c0019e6f:	e8 61 69 ff ff       	call   c00107d5 <KePanic(char const*)>
c0019e74:	83 c4 10             	add    esp,0x10
c0019e77:	90                   	nop
c0019e78:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019e7b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019e7f:	85 f6                	test   esi,esi
c0019e81:	7e 2d                	jle    c0019eb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0019e83:	31 c0                	xor    eax,eax
c0019e85:	8d 76 00             	lea    esi,[esi+0x0]
c0019e88:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019e8b:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019e8e:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019e94:	85 c9                	test   ecx,ecx
c0019e96:	0f 49 d1             	cmovns edx,ecx
c0019e99:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0019e9d:	c1 fa 0f             	sar    edx,0xf
c0019ea0:	01 d1                	add    ecx,edx
c0019ea2:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0019ea6:	83 c0 01             	add    eax,0x1
c0019ea9:	39 f0                	cmp    eax,esi
c0019eab:	75 db                	jne    c0019e88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0019ead:	8d 76 00             	lea    esi,[esi+0x0]
c0019eb0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019eb3:	83 ec 04             	sub    esp,0x4
c0019eb6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019eb9:	29 f0                	sub    eax,esi
c0019ebb:	c1 e0 02             	shl    eax,0x2
c0019ebe:	50                   	push   eax
c0019ebf:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019ec2:	50                   	push   eax
c0019ec3:	52                   	push   edx
c0019ec4:	e8 07 65 fe ff       	call   c00003d0 <memmove>
c0019ec9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019ecc:	29 f0                	sub    eax,esi
c0019ece:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019ed1:	83 c4 1c             	add    esp,0x1c
c0019ed4:	89 f0                	mov    eax,esi
c0019ed6:	5b                   	pop    ebx
c0019ed7:	5e                   	pop    esi
c0019ed8:	5f                   	pop    edi
c0019ed9:	5d                   	pop    ebp
c0019eda:	c3                   	ret    
c0019edb:	90                   	nop

c0019edc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019edc:	55                   	push   ebp
c0019edd:	57                   	push   edi
c0019ede:	56                   	push   esi
c0019edf:	53                   	push   ebx
c0019ee0:	83 ec 0c             	sub    esp,0xc
c0019ee3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019ee7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019eeb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0019eef:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019ef3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019ef9:	39 03                	cmp    DWORD PTR [ebx],eax
c0019efb:	74 13                	je     c0019f10 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0019efd:	83 ec 0c             	sub    esp,0xc
c0019f00:	68 88 18 02 c0       	push   0xc0021888
c0019f05:	e8 cb 68 ff ff       	call   c00107d5 <KePanic(char const*)>
c0019f0a:	83 c4 10             	add    esp,0x10
c0019f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f10:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019f16:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019f19:	74 11                	je     c0019f2c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0019f1b:	83 ec 0c             	sub    esp,0xc
c0019f1e:	68 c3 18 02 c0       	push   0xc00218c3
c0019f23:	e8 ad 68 ff ff       	call   c00107d5 <KePanic(char const*)>
c0019f28:	83 c4 10             	add    esp,0x10
c0019f2b:	90                   	nop
c0019f2c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019f32:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019f35:	74 11                	je     c0019f48 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0019f37:	83 ec 0c             	sub    esp,0xc
c0019f3a:	68 c3 18 02 c0       	push   0xc00218c3
c0019f3f:	e8 91 68 ff ff       	call   c00107d5 <KePanic(char const*)>
c0019f44:	83 c4 10             	add    esp,0x10
c0019f47:	90                   	nop
c0019f48:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019f4b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019f4f:	85 ff                	test   edi,edi
c0019f51:	7e 21                	jle    c0019f74 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c0019f53:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019f5a:	31 c0                	xor    eax,eax
c0019f5c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f5f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c0019f62:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019f65:	01 d5                	add    ebp,edx
c0019f67:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c0019f6a:	83 c0 04             	add    eax,0x4
c0019f6d:	39 c1                	cmp    ecx,eax
c0019f6f:	75 eb                	jne    c0019f5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0019f71:	8d 76 00             	lea    esi,[esi+0x0]
c0019f74:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f77:	83 ec 04             	sub    esp,0x4
c0019f7a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f7d:	29 f8                	sub    eax,edi
c0019f7f:	c1 e0 02             	shl    eax,0x2
c0019f82:	50                   	push   eax
c0019f83:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019f86:	50                   	push   eax
c0019f87:	52                   	push   edx
c0019f88:	e8 43 64 fe ff       	call   c00003d0 <memmove>
c0019f8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019f90:	29 f8                	sub    eax,edi
c0019f92:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019f95:	83 c4 1c             	add    esp,0x1c
c0019f98:	89 f8                	mov    eax,edi
c0019f9a:	5b                   	pop    ebx
c0019f9b:	5e                   	pop    esi
c0019f9c:	5f                   	pop    edi
c0019f9d:	5d                   	pop    ebp
c0019f9e:	c3                   	ret    
c0019f9f:	90                   	nop

c0019fa0 <PCI::open(int, int, void*)>:
c0019fa0:	83 ec 18             	sub    esp,0x18
c0019fa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019fa7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019fab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019fb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0019fb3:	50                   	push   eax
c0019fb4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019fb7:	31 c0                	xor    eax,eax
c0019fb9:	83 c4 1c             	add    esp,0x1c
c0019fbc:	c3                   	ret    
c0019fbd:	90                   	nop

c0019fbe <PCI::close(int, int, void*)>:
c0019fbe:	31 c0                	xor    eax,eax
c0019fc0:	c3                   	ret    
c0019fc1:	90                   	nop

c0019fc2 <PCI::PCI()>:
c0019fc2:	83 ec 0c             	sub    esp,0xc
c0019fc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fc9:	83 ec 08             	sub    esp,0x8
c0019fcc:	68 df 18 02 c0       	push   0xc00218df
c0019fd1:	50                   	push   eax
c0019fd2:	e8 39 17 ff ff       	call   c000b710 <Bus::Bus(char const*)>
c0019fd7:	83 c4 10             	add    esp,0x10
c0019fda:	ba 88 19 02 c0       	mov    edx,0xc0021988
c0019fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe3:	89 10                	mov    DWORD PTR [eax],edx
c0019fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0019ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ff7:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c0019ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a000:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a006:	0f b6 d0             	movzx  edx,al
c001a009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a00d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a018:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a01e:	0f b6 d0             	movzx  edx,al
c001a021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a025:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a02e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a034:	8d 50 01             	lea    edx,[eax+0x1]
c001a037:	88 d1                	mov    cl,dl
c001a039:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a03d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a043:	0f b6 d0             	movzx  edx,al
c001a046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a04a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a04e:	83 c9 c0             	or     ecx,0xffffffc0
c001a051:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a055:	90                   	nop
c001a056:	83 c4 0c             	add    esp,0xc
c001a059:	c3                   	ret    

c001a05a <PCI::readBAR8(unsigned int, int)>:
c001a05a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a05e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a062:	f6 c2 01             	test   dl,0x1
c001a065:	74 07                	je     c001a06e <PCI::readBAR8(unsigned int, int)+0x14>
c001a067:	83 e2 fc             	and    edx,0xfffffffc
c001a06a:	01 c2                	add    edx,eax
c001a06c:	ec                   	in     al,dx
c001a06d:	c3                   	ret    
c001a06e:	83 e2 f0             	and    edx,0xfffffff0
c001a071:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a074:	c3                   	ret    
c001a075:	90                   	nop

c001a076 <PCI::readBAR16(unsigned int, int)>:
c001a076:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a07a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a07e:	f6 c2 01             	test   dl,0x1
c001a081:	74 08                	je     c001a08b <PCI::readBAR16(unsigned int, int)+0x15>
c001a083:	83 e2 fc             	and    edx,0xfffffffc
c001a086:	01 c2                	add    edx,eax
c001a088:	66 ed                	in     ax,dx
c001a08a:	c3                   	ret    
c001a08b:	83 e2 f0             	and    edx,0xfffffff0
c001a08e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a092:	c3                   	ret    
c001a093:	90                   	nop

c001a094 <PCI::readBAR32(unsigned int, int)>:
c001a094:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a098:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a09c:	f6 c2 01             	test   dl,0x1
c001a09f:	74 07                	je     c001a0a8 <PCI::readBAR32(unsigned int, int)+0x14>
c001a0a1:	83 e2 fc             	and    edx,0xfffffffc
c001a0a4:	01 c2                	add    edx,eax
c001a0a6:	ed                   	in     eax,dx
c001a0a7:	c3                   	ret    
c001a0a8:	83 e2 f0             	and    edx,0xfffffff0
c001a0ab:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a0ae:	c3                   	ret    
c001a0af:	90                   	nop

c001a0b0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a0b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0bc:	f6 c2 01             	test   dl,0x1
c001a0bf:	74 07                	je     c001a0c8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a0c1:	83 e2 fc             	and    edx,0xfffffffc
c001a0c4:	01 ca                	add    edx,ecx
c001a0c6:	ee                   	out    dx,al
c001a0c7:	c3                   	ret    
c001a0c8:	83 e2 f0             	and    edx,0xfffffff0
c001a0cb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a0ce:	c3                   	ret    
c001a0cf:	90                   	nop

c001a0d0 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a0d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0dc:	f6 c2 01             	test   dl,0x1
c001a0df:	74 08                	je     c001a0e9 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a0e1:	83 e2 fc             	and    edx,0xfffffffc
c001a0e4:	01 ca                	add    edx,ecx
c001a0e6:	66 ef                	out    dx,ax
c001a0e8:	c3                   	ret    
c001a0e9:	83 e2 f0             	and    edx,0xfffffff0
c001a0ec:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a0f0:	c3                   	ret    
c001a0f1:	90                   	nop

c001a0f2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a0f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0fe:	f6 c2 01             	test   dl,0x1
c001a101:	74 07                	je     c001a10a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a103:	83 e2 fc             	and    edx,0xfffffffc
c001a106:	01 ca                	add    edx,ecx
c001a108:	ef                   	out    dx,eax
c001a109:	c3                   	ret    
c001a10a:	83 e2 f0             	and    edx,0xfffffff0
c001a10d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a110:	c3                   	ret    
c001a111:	90                   	nop

c001a112 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a112:	55                   	push   ebp
c001a113:	57                   	push   edi
c001a114:	56                   	push   esi
c001a115:	53                   	push   ebx
c001a116:	83 ec 0c             	sub    esp,0xc
c001a119:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a11e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a122:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a126:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a12a:	83 fe 07             	cmp    esi,0x7
c001a12d:	76 10                	jbe    c001a13f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a12f:	83 ec 0c             	sub    esp,0xc
c001a132:	68 e7 18 02 c0       	push   0xc00218e7
c001a137:	e8 99 66 ff ff       	call   c00107d5 <KePanic(char const*)>
c001a13c:	83 c4 10             	add    esp,0x10
c001a13f:	0f b6 db             	movzx  ebx,bl
c001a142:	83 fb 0f             	cmp    ebx,0xf
c001a145:	76 10                	jbe    c001a157 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a147:	83 ec 0c             	sub    esp,0xc
c001a14a:	68 17 19 02 c0       	push   0xc0021917
c001a14f:	e8 81 66 ff ff       	call   c00107d5 <KePanic(char const*)>
c001a154:	83 c4 10             	add    esp,0x10
c001a157:	8d 04 36             	lea    eax,[esi+esi*1]
c001a15a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a15f:	83 c8 f0             	or     eax,0xfffffff0
c001a162:	ee                   	out    dx,al
c001a163:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a168:	89 e8                	mov    eax,ebp
c001a16a:	ee                   	out    dx,al
c001a16b:	89 f9                	mov    ecx,edi
c001a16d:	89 d8                	mov    eax,ebx
c001a16f:	0f b6 d9             	movzx  ebx,cl
c001a172:	83 c4 0c             	add    esp,0xc
c001a175:	c1 e0 08             	shl    eax,0x8
c001a178:	83 e3 fc             	and    ebx,0xfffffffc
c001a17b:	09 d8                	or     eax,ebx
c001a17d:	5b                   	pop    ebx
c001a17e:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a183:	5e                   	pop    esi
c001a184:	5f                   	pop    edi
c001a185:	5d                   	pop    ebp
c001a186:	c3                   	ret    
c001a187:	90                   	nop

c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a188:	57                   	push   edi
c001a189:	56                   	push   esi
c001a18a:	53                   	push   ebx
c001a18b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a18f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a193:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a197:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a19b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a1a1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1a5:	83 ff 01             	cmp    edi,0x1
c001a1a8:	75 3f                	jne    c001a1e9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a1aa:	89 de                	mov    esi,ebx
c001a1ac:	0f b6 c0             	movzx  eax,al
c001a1af:	c1 e0 10             	shl    eax,0x10
c001a1b2:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a1b8:	0f b6 c9             	movzx  ecx,cl
c001a1bb:	09 f0                	or     eax,esi
c001a1bd:	c1 e1 08             	shl    ecx,0x8
c001a1c0:	0f b6 d2             	movzx  edx,dl
c001a1c3:	c1 e2 0b             	shl    edx,0xb
c001a1c6:	09 c8                	or     eax,ecx
c001a1c8:	09 d0                	or     eax,edx
c001a1ca:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a1cf:	0d 00 00 00 80       	or     eax,0x80000000
c001a1d4:	ef                   	out    dx,eax
c001a1d5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a1da:	ed                   	in     eax,dx
c001a1db:	83 e3 02             	and    ebx,0x2
c001a1de:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a1e5:	d3 e8                	shr    eax,cl
c001a1e7:	eb 44                	jmp    c001a22d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a1e9:	83 ff 02             	cmp    edi,0x2
c001a1ec:	75 2d                	jne    c001a21b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a1ee:	83 ec 0c             	sub    esp,0xc
c001a1f1:	0f b6 fb             	movzx  edi,bl
c001a1f4:	57                   	push   edi
c001a1f5:	0f b6 c9             	movzx  ecx,cl
c001a1f8:	51                   	push   ecx
c001a1f9:	0f b6 d2             	movzx  edx,dl
c001a1fc:	52                   	push   edx
c001a1fd:	0f b6 c0             	movzx  eax,al
c001a200:	50                   	push   eax
c001a201:	56                   	push   esi
c001a202:	e8 0b ff ff ff       	call   c001a112 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a207:	89 c2                	mov    edx,eax
c001a209:	ed                   	in     eax,dx
c001a20a:	83 e3 02             	and    ebx,0x2
c001a20d:	83 c4 20             	add    esp,0x20
c001a210:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a217:	d3 e8                	shr    eax,cl
c001a219:	eb 12                	jmp    c001a22d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a21b:	83 ec 0c             	sub    esp,0xc
c001a21e:	68 47 19 02 c0       	push   0xc0021947
c001a223:	e8 ad 65 ff ff       	call   c00107d5 <KePanic(char const*)>
c001a228:	83 c4 10             	add    esp,0x10
c001a22b:	31 c0                	xor    eax,eax
c001a22d:	5b                   	pop    ebx
c001a22e:	5e                   	pop    esi
c001a22f:	5f                   	pop    edi
c001a230:	c3                   	ret    
c001a231:	90                   	nop

c001a232 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a232:	83 ec 18             	sub    esp,0x18
c001a235:	6a 00                	push   0x0
c001a237:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a23c:	50                   	push   eax
c001a23d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a242:	50                   	push   eax
c001a243:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a248:	50                   	push   eax
c001a249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a24d:	e8 36 ff ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a252:	83 c4 2c             	add    esp,0x2c
c001a255:	c3                   	ret    

c001a256 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a256:	83 ec 18             	sub    esp,0x18
c001a259:	6a 0e                	push   0xe
c001a25b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a260:	50                   	push   eax
c001a261:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a266:	50                   	push   eax
c001a267:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a26c:	50                   	push   eax
c001a26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a271:	e8 12 ff ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a276:	83 c4 2c             	add    esp,0x2c
c001a279:	0f b6 c0             	movzx  eax,al
c001a27c:	c3                   	ret    
c001a27d:	90                   	nop

c001a27e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a27e:	55                   	push   ebp
c001a27f:	57                   	push   edi
c001a280:	56                   	push   esi
c001a281:	53                   	push   ebx
c001a282:	83 ec 18             	sub    esp,0x18
c001a285:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a28a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a28f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a294:	6a 0a                	push   0xa
c001a296:	56                   	push   esi
c001a297:	55                   	push   ebp
c001a298:	57                   	push   edi
c001a299:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a29d:	e8 e6 fe ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2a2:	83 c4 14             	add    esp,0x14
c001a2a5:	6a 0a                	push   0xa
c001a2a7:	56                   	push   esi
c001a2a8:	55                   	push   ebp
c001a2a9:	57                   	push   edi
c001a2aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a2ae:	89 c3                	mov    ebx,eax
c001a2b0:	0f b6 db             	movzx  ebx,bl
c001a2b3:	e8 d0 fe ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2b8:	83 c4 2c             	add    esp,0x2c
c001a2bb:	25 00 ff 00 00       	and    eax,0xff00
c001a2c0:	09 d8                	or     eax,ebx
c001a2c2:	5b                   	pop    ebx
c001a2c3:	5e                   	pop    esi
c001a2c4:	5f                   	pop    edi
c001a2c5:	5d                   	pop    ebp
c001a2c6:	c3                   	ret    
c001a2c7:	90                   	nop

c001a2c8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a2c8:	83 ec 18             	sub    esp,0x18
c001a2cb:	6a 08                	push   0x8
c001a2cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2d2:	50                   	push   eax
c001a2d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2d8:	50                   	push   eax
c001a2d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2de:	50                   	push   eax
c001a2df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2e3:	e8 a0 fe ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2e8:	83 c4 2c             	add    esp,0x2c
c001a2eb:	0f b6 c4             	movzx  eax,ah
c001a2ee:	c3                   	ret    
c001a2ef:	90                   	nop

c001a2f0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a2f0:	83 ec 18             	sub    esp,0x18
c001a2f3:	6a 08                	push   0x8
c001a2f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2fa:	50                   	push   eax
c001a2fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a300:	50                   	push   eax
c001a301:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a306:	50                   	push   eax
c001a307:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a30b:	e8 78 fe ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a310:	83 c4 2c             	add    esp,0x2c
c001a313:	c3                   	ret    

c001a314 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a314:	83 ec 18             	sub    esp,0x18
c001a317:	6a 3c                	push   0x3c
c001a319:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a31e:	50                   	push   eax
c001a31f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a324:	50                   	push   eax
c001a325:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a32a:	50                   	push   eax
c001a32b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a32f:	e8 54 fe ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a334:	83 c4 2c             	add    esp,0x2c
c001a337:	c3                   	ret    

c001a338 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a338:	83 ec 18             	sub    esp,0x18
c001a33b:	6a 18                	push   0x18
c001a33d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a342:	50                   	push   eax
c001a343:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a348:	50                   	push   eax
c001a349:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a34e:	50                   	push   eax
c001a34f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a353:	e8 30 fe ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a358:	83 c4 2c             	add    esp,0x2c
c001a35b:	0f b6 c4             	movzx  eax,ah
c001a35e:	c3                   	ret    
c001a35f:	90                   	nop

c001a360 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a360:	55                   	push   ebp
c001a361:	57                   	push   edi
c001a362:	56                   	push   esi
c001a363:	53                   	push   ebx
c001a364:	83 ec 28             	sub    esp,0x28
c001a367:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a36b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a370:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a375:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a37a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a381:	8d 43 12             	lea    eax,[ebx+0x12]
c001a384:	83 c3 10             	add    ebx,0x10
c001a387:	0f b6 c0             	movzx  eax,al
c001a38a:	0f b6 db             	movzx  ebx,bl
c001a38d:	50                   	push   eax
c001a38e:	51                   	push   ecx
c001a38f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a393:	57                   	push   edi
c001a394:	55                   	push   ebp
c001a395:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a399:	e8 ea fd ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a39e:	83 c4 14             	add    esp,0x14
c001a3a1:	53                   	push   ebx
c001a3a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a3a6:	51                   	push   ecx
c001a3a7:	89 c6                	mov    esi,eax
c001a3a9:	57                   	push   edi
c001a3aa:	55                   	push   ebp
c001a3ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a3af:	c1 e6 10             	shl    esi,0x10
c001a3b2:	e8 d1 fd ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3b7:	83 c4 3c             	add    esp,0x3c
c001a3ba:	5b                   	pop    ebx
c001a3bb:	0f b7 c0             	movzx  eax,ax
c001a3be:	09 f0                	or     eax,esi
c001a3c0:	5e                   	pop    esi
c001a3c1:	5f                   	pop    edi
c001a3c2:	5d                   	pop    ebp
c001a3c3:	c3                   	ret    

c001a3c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a3c4:	55                   	push   ebp
c001a3c5:	57                   	push   edi
c001a3c6:	56                   	push   esi
c001a3c7:	53                   	push   ebx
c001a3c8:	83 ec 0c             	sub    esp,0xc
c001a3cb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a3cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a3d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a3d7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a3db:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001a3e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a3e5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a3e9:	83 f9 01             	cmp    ecx,0x1
c001a3ec:	75 5d                	jne    c001a44b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001a3ee:	0f b6 c8             	movzx  ecx,al
c001a3f1:	89 f0                	mov    eax,esi
c001a3f3:	25 fc 00 00 00       	and    eax,0xfc
c001a3f8:	0f b6 d2             	movzx  edx,dl
c001a3fb:	c1 e1 10             	shl    ecx,0x10
c001a3fe:	c1 e2 0b             	shl    edx,0xb
c001a401:	09 c1                	or     ecx,eax
c001a403:	89 f8                	mov    eax,edi
c001a405:	0f b6 f8             	movzx  edi,al
c001a408:	c1 e7 08             	shl    edi,0x8
c001a40b:	09 f9                	or     ecx,edi
c001a40d:	09 d1                	or     ecx,edx
c001a40f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a414:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a41a:	89 c8                	mov    eax,ecx
c001a41c:	ef                   	out    dx,eax
c001a41d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a422:	ed                   	in     eax,dx
c001a423:	83 e6 02             	and    esi,0x2
c001a426:	0f b7 db             	movzx  ebx,bx
c001a429:	74 0a                	je     c001a435 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001a42b:	c1 e3 10             	shl    ebx,0x10
c001a42e:	0f b7 d0             	movzx  edx,ax
c001a431:	09 d3                	or     ebx,edx
c001a433:	eb 05                	jmp    c001a43a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001a435:	66 31 c0             	xor    ax,ax
c001a438:	09 c3                	or     ebx,eax
c001a43a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a43f:	89 c8                	mov    eax,ecx
c001a441:	ef                   	out    dx,eax
c001a442:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a447:	89 d8                	mov    eax,ebx
c001a449:	eb 41                	jmp    c001a48c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a44b:	83 f9 02             	cmp    ecx,0x2
c001a44e:	75 45                	jne    c001a495 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001a450:	89 f1                	mov    ecx,esi
c001a452:	83 ec 0c             	sub    esp,0xc
c001a455:	0f b6 f1             	movzx  esi,cl
c001a458:	89 f9                	mov    ecx,edi
c001a45a:	56                   	push   esi
c001a45b:	0f b6 f9             	movzx  edi,cl
c001a45e:	57                   	push   edi
c001a45f:	0f b6 d2             	movzx  edx,dl
c001a462:	52                   	push   edx
c001a463:	0f b6 c0             	movzx  eax,al
c001a466:	50                   	push   eax
c001a467:	55                   	push   ebp
c001a468:	e8 a5 fc ff ff       	call   c001a112 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a46d:	89 c2                	mov    edx,eax
c001a46f:	ed                   	in     eax,dx
c001a470:	83 c4 20             	add    esp,0x20
c001a473:	f6 c2 02             	test   dl,0x2
c001a476:	0f b7 db             	movzx  ebx,bx
c001a479:	74 0c                	je     c001a487 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001a47b:	0f b7 c8             	movzx  ecx,ax
c001a47e:	89 d8                	mov    eax,ebx
c001a480:	c1 e0 10             	shl    eax,0x10
c001a483:	09 c8                	or     eax,ecx
c001a485:	eb 05                	jmp    c001a48c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a487:	66 31 c0             	xor    ax,ax
c001a48a:	09 d8                	or     eax,ebx
c001a48c:	ef                   	out    dx,eax
c001a48d:	83 c4 0c             	add    esp,0xc
c001a490:	5b                   	pop    ebx
c001a491:	5e                   	pop    esi
c001a492:	5f                   	pop    edi
c001a493:	5d                   	pop    ebp
c001a494:	c3                   	ret    
c001a495:	c7 44 24 20 47 19 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021947
c001a49d:	83 c4 0c             	add    esp,0xc
c001a4a0:	5b                   	pop    ebx
c001a4a1:	5e                   	pop    esi
c001a4a2:	5f                   	pop    edi
c001a4a3:	5d                   	pop    ebp
c001a4a4:	e9 2c 63 ff ff       	jmp    c00107d5 <KePanic(char const*)>
c001a4a9:	90                   	nop

c001a4aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a4aa:	55                   	push   ebp
c001a4ab:	57                   	push   edi
c001a4ac:	56                   	push   esi
c001a4ad:	53                   	push   ebx
c001a4ae:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a4b4:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a4bb:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001a4c2:	0f 85 bd 00 00 00    	jne    c001a585 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a4c8:	83 ec 0c             	sub    esp,0xc
c001a4cb:	68 14 01 00 00       	push   0x114
c001a4d0:	e8 f6 d5 fe ff       	call   c0007acb <malloc>
c001a4d5:	83 c4 0c             	add    esp,0xc
c001a4d8:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a4de:	68 4d 19 02 c0       	push   0xc002194d
c001a4e3:	50                   	push   eax
c001a4e4:	89 c3                	mov    ebx,eax
c001a4e6:	e8 0f 0a ff ff       	call   c000aefa <File::File(char const*, Process*)>
c001a4eb:	83 c4 10             	add    esp,0x10
c001a4ee:	85 db                	test   ebx,ebx
c001a4f0:	0f 84 6b 02 00 00    	je     c001a761 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a4f6:	57                   	push   edi
c001a4f7:	57                   	push   edi
c001a4f8:	6a 01                	push   0x1
c001a4fa:	53                   	push   ebx
c001a4fb:	e8 b6 0a ff ff       	call   c000afb6 <File::open(FileOpenMode)>
c001a500:	83 c4 10             	add    esp,0x10
c001a503:	85 c0                	test   eax,eax
c001a505:	0f 85 56 02 00 00    	jne    c001a761 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a50b:	52                   	push   edx
c001a50c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a510:	50                   	push   eax
c001a511:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a515:	50                   	push   eax
c001a516:	53                   	push   ebx
c001a517:	e8 46 0d ff ff       	call   c000b262 <File::stat(unsigned long long*, bool*)>
c001a51c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a520:	40                   	inc    eax
c001a521:	89 04 24             	mov    DWORD PTR [esp],eax
c001a524:	e8 a2 d5 fe ff       	call   c0007acb <malloc>
c001a529:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a52d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a531:	59                   	pop    ecx
c001a532:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a537:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a539:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a53d:	51                   	push   ecx
c001a53e:	50                   	push   eax
c001a53f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a543:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a547:	53                   	push   ebx
c001a548:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a54b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a54f:	83 c4 20             	add    esp,0x20
c001a552:	89 c8                	mov    eax,ecx
c001a554:	99                   	cdq    
c001a555:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a559:	0f 85 02 02 00 00    	jne    c001a761 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a55f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a563:	0f 85 f8 01 00 00    	jne    c001a761 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a569:	83 ec 0c             	sub    esp,0xc
c001a56c:	53                   	push   ebx
c001a56d:	e8 a2 0a ff ff       	call   c000b014 <File::close()>
c001a572:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a576:	83 c4 10             	add    esp,0x10
c001a579:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a580:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a585:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a58d:	31 c9                	xor    ecx,ecx
c001a58f:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001a596:	8b 2d 44 8b 02 c0    	mov    ebp,DWORD PTR ds:0xc0028b44
c001a59c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a5a3:	8b 15 48 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b48
c001a5a9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a5ae:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a5b6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a5bb:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a5c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a5c7:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a5cf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a5d3:	39 cd                	cmp    ebp,ecx
c001a5d5:	0f 8e 86 01 00 00    	jle    c001a761 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a5db:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001a5de:	d4 40                	aam    0x40
c001a5e0:	d5 39                	aad    0x39
c001a5e2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a5e6:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001a5ea:	d4 40                	aam    0x40
c001a5ec:	d5 39                	aad    0x39
c001a5ee:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a5f2:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001a5f6:	d4 40                	aam    0x40
c001a5f8:	d5 39                	aad    0x39
c001a5fa:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a5fe:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001a602:	d4 40                	aam    0x40
c001a604:	d5 39                	aad    0x39
c001a606:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a60a:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001a60e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a612:	3c 56                	cmp    al,0x56
c001a614:	74 47                	je     c001a65d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001a616:	d4 40                	aam    0x40
c001a618:	d5 39                	aad    0x39
c001a61a:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a61d:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001a621:	0f b6 db             	movzx  ebx,bl
c001a624:	c1 e3 04             	shl    ebx,0x4
c001a627:	d4 40                	aam    0x40
c001a629:	d5 39                	aad    0x39
c001a62b:	83 e8 30             	sub    eax,0x30
c001a62e:	0f b6 c0             	movzx  eax,al
c001a631:	09 c3                	or     ebx,eax
c001a633:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001a637:	c1 e3 04             	shl    ebx,0x4
c001a63a:	d4 40                	aam    0x40
c001a63c:	d5 39                	aad    0x39
c001a63e:	83 e8 30             	sub    eax,0x30
c001a641:	0f b6 c0             	movzx  eax,al
c001a644:	09 c3                	or     ebx,eax
c001a646:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001a64a:	c1 e3 04             	shl    ebx,0x4
c001a64d:	d4 40                	aam    0x40
c001a64f:	d5 39                	aad    0x39
c001a651:	83 e8 30             	sub    eax,0x30
c001a654:	0f b6 c0             	movzx  eax,al
c001a657:	09 c3                	or     ebx,eax
c001a659:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a65d:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001a661:	80 fb 58             	cmp    bl,0x58
c001a664:	74 49                	je     c001a6af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001a666:	88 d8                	mov    al,bl
c001a668:	d4 40                	aam    0x40
c001a66a:	d5 39                	aad    0x39
c001a66c:	83 e8 30             	sub    eax,0x30
c001a66f:	0f b6 f8             	movzx  edi,al
c001a672:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001a676:	c1 e7 04             	shl    edi,0x4
c001a679:	d4 40                	aam    0x40
c001a67b:	d5 39                	aad    0x39
c001a67d:	83 e8 30             	sub    eax,0x30
c001a680:	0f b6 c0             	movzx  eax,al
c001a683:	09 c7                	or     edi,eax
c001a685:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001a689:	c1 e7 04             	shl    edi,0x4
c001a68c:	d4 40                	aam    0x40
c001a68e:	d5 39                	aad    0x39
c001a690:	83 e8 30             	sub    eax,0x30
c001a693:	0f b6 c0             	movzx  eax,al
c001a696:	09 c7                	or     edi,eax
c001a698:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001a69c:	c1 e7 04             	shl    edi,0x4
c001a69f:	d4 40                	aam    0x40
c001a6a1:	d5 39                	aad    0x39
c001a6a3:	83 e8 30             	sub    eax,0x30
c001a6a6:	0f b6 c0             	movzx  eax,al
c001a6a9:	09 c7                	or     edi,eax
c001a6ab:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001a6af:	8d 41 10             	lea    eax,[ecx+0x10]
c001a6b2:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a6b6:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001a6ba:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001a6be:	83 f9 0a             	cmp    ecx,0xa
c001a6c1:	74 07                	je     c001a6ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001a6c3:	47                   	inc    edi
c001a6c4:	39 c5                	cmp    ebp,eax
c001a6c6:	75 16                	jne    c001a6de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001a6c8:	89 e8                	mov    eax,ebp
c001a6ca:	83 f9 0a             	cmp    ecx,0xa
c001a6cd:	0f 94 c1             	sete   cl
c001a6d0:	0f b6 c9             	movzx  ecx,cl
c001a6d3:	01 c1                	add    ecx,eax
c001a6d5:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a6da:	75 0f                	jne    c001a6eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a6dc:	eb 1c                	jmp    c001a6fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001a6de:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a6e1:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001a6e5:	40                   	inc    eax
c001a6e6:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001a6e9:	eb cb                	jmp    c001a6b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001a6eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a6ef:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a6f4:	0f 85 d9 fe ff ff    	jne    c001a5d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a6fa:	80 fb 58             	cmp    bl,0x58
c001a6fd:	74 10                	je     c001a70f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001a6ff:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a704:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001a709:	0f 85 c4 fe ff ff    	jne    c001a5d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a70f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a713:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a717:	83 e8 30             	sub    eax,0x30
c001a71a:	c1 e0 04             	shl    eax,0x4
c001a71d:	83 eb 30             	sub    ebx,0x30
c001a720:	09 d8                	or     eax,ebx
c001a722:	0f b6 c0             	movzx  eax,al
c001a725:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a729:	0f 85 a4 fe ff ff    	jne    c001a5d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a72f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a733:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a737:	83 e8 30             	sub    eax,0x30
c001a73a:	c1 e0 04             	shl    eax,0x4
c001a73d:	83 eb 30             	sub    ebx,0x30
c001a740:	09 d8                	or     eax,ebx
c001a742:	0f b6 c0             	movzx  eax,al
c001a745:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a749:	0f 85 84 fe ff ff    	jne    c001a5d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a74f:	50                   	push   eax
c001a750:	50                   	push   eax
c001a751:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a755:	50                   	push   eax
c001a756:	56                   	push   esi
c001a757:	e8 f4 5e fe ff       	call   c0000650 <strcpy>
c001a75c:	83 c4 10             	add    esp,0x10
c001a75f:	eb 05                	jmp    c001a766 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001a761:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a764:	31 f6                	xor    esi,esi
c001a766:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a76c:	89 f0                	mov    eax,esi
c001a76e:	5b                   	pop    ebx
c001a76f:	5e                   	pop    esi
c001a770:	5f                   	pop    edi
c001a771:	5d                   	pop    ebp
c001a772:	c3                   	ret    
c001a773:	90                   	nop

c001a774 <PCI::checkBus(unsigned char)>:
c001a774:	56                   	push   esi
c001a775:	53                   	push   ebx
c001a776:	31 db                	xor    ebx,ebx
c001a778:	51                   	push   ecx
c001a779:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a77e:	52                   	push   edx
c001a77f:	53                   	push   ebx
c001a780:	43                   	inc    ebx
c001a781:	56                   	push   esi
c001a782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a786:	e8 0f 03 00 00       	call   c001aa9a <PCI::checkDevice(unsigned char, unsigned char)>
c001a78b:	83 c4 10             	add    esp,0x10
c001a78e:	83 fb 20             	cmp    ebx,0x20
c001a791:	75 eb                	jne    c001a77e <PCI::checkBus(unsigned char)+0xa>
c001a793:	58                   	pop    eax
c001a794:	5b                   	pop    ebx
c001a795:	5e                   	pop    esi
c001a796:	c3                   	ret    
c001a797:	90                   	nop

c001a798 <PCI::foundDevice(PCIDeviceInfo)>:
c001a798:	55                   	push   ebp
c001a799:	57                   	push   edi
c001a79a:	56                   	push   esi
c001a79b:	53                   	push   ebx
c001a79c:	83 ec 1c             	sub    esp,0x1c
c001a79f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a7a4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7a8:	3d ff ff 00 00       	cmp    eax,0xffff
c001a7ad:	0f 84 63 01 00 00    	je     c001a916 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a7b3:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a7b8:	66 3d 06 04          	cmp    ax,0x406
c001a7bc:	75 2c                	jne    c001a7ea <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a7be:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a7c3:	50                   	push   eax
c001a7c4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a7c9:	50                   	push   eax
c001a7ca:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a7cf:	50                   	push   eax
c001a7d0:	53                   	push   ebx
c001a7d1:	e8 62 fb ff ff       	call   c001a338 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a7d6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a7da:	0f b6 c0             	movzx  eax,al
c001a7dd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a7e1:	83 c4 2c             	add    esp,0x2c
c001a7e4:	5b                   	pop    ebx
c001a7e5:	5e                   	pop    esi
c001a7e6:	5f                   	pop    edi
c001a7e7:	5d                   	pop    ebp
c001a7e8:	eb 8a                	jmp    c001a774 <PCI::checkBus(unsigned char)>
c001a7ea:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001a7ef:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a7f5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a7f9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a7fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a801:	85 d2                	test   edx,edx
c001a803:	74 34                	je     c001a839 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a805:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a808:	85 c9                	test   ecx,ecx
c001a80a:	74 29                	je     c001a835 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a80c:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001a812:	31 f5                	xor    ebp,esi
c001a814:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001a81a:	75 19                	jne    c001a835 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a81c:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001a822:	75 11                	jne    c001a835 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a824:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a82b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a82f:	0f 84 e1 00 00 00    	je     c001a916 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a835:	8b 12                	mov    edx,DWORD PTR [edx]
c001a837:	eb c8                	jmp    c001a801 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a839:	3d 01 06 00 00       	cmp    eax,0x601
c001a83e:	75 19                	jne    c001a859 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a840:	83 ec 0c             	sub    esp,0xc
c001a843:	68 64 01 00 00       	push   0x164
c001a848:	e8 7e d2 fe ff       	call   c0007acb <malloc>
c001a84d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a850:	89 c5                	mov    ebp,eax
c001a852:	e8 ab 0e 00 00       	call   c001b702 <SATABus::SATABus()>
c001a857:	eb 1e                	jmp    c001a877 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a859:	3d 01 01 00 00       	cmp    eax,0x101
c001a85e:	75 62                	jne    c001a8c2 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001a860:	83 ec 0c             	sub    esp,0xc
c001a863:	68 70 02 00 00       	push   0x270
c001a868:	e8 5e d2 fe ff       	call   c0007acb <malloc>
c001a86d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a870:	89 c5                	mov    ebp,eax
c001a872:	e8 f3 02 00 00       	call   c001ab6a <IDE::IDE()>
c001a877:	58                   	pop    eax
c001a878:	5a                   	pop    edx
c001a879:	55                   	push   ebp
c001a87a:	53                   	push   ebx
c001a87b:	e8 34 15 ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c001a880:	83 ec 1c             	sub    esp,0x1c
c001a883:	b9 09 00 00 00       	mov    ecx,0x9
c001a888:	fc                   	cld    
c001a889:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a88d:	89 e7                	mov    edi,esp
c001a88f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a891:	55                   	push   ebp
c001a892:	e8 63 14 ff ff       	call   c000bcfa <Device::preOpenPCI(PCIDeviceInfo)>
c001a897:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a89a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a89e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a8a6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a8ae:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a8b6:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a8b9:	83 c4 4c             	add    esp,0x4c
c001a8bc:	5b                   	pop    ebx
c001a8bd:	5e                   	pop    esi
c001a8be:	5f                   	pop    edi
c001a8bf:	5d                   	pop    ebp
c001a8c0:	ff e0                	jmp    eax
c001a8c2:	83 ec 0c             	sub    esp,0xc
c001a8c5:	68 58 01 00 00       	push   0x158
c001a8ca:	e8 fc d1 fe ff       	call   c0007acb <malloc>
c001a8cf:	5a                   	pop    edx
c001a8d0:	59                   	pop    ecx
c001a8d1:	68 66 19 02 c0       	push   0xc0021966
c001a8d6:	50                   	push   eax
c001a8d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a8db:	e8 72 17 ff ff       	call   c000c052 <DriverlessDevice::DriverlessDevice(char const*)>
c001a8e0:	5e                   	pop    esi
c001a8e1:	5f                   	pop    edi
c001a8e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8e6:	50                   	push   eax
c001a8e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8eb:	53                   	push   ebx
c001a8ec:	e8 c3 14 ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c001a8f1:	83 c4 10             	add    esp,0x10
c001a8f4:	b9 09 00 00 00       	mov    ecx,0x9
c001a8f9:	fc                   	cld    
c001a8fa:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a8fe:	89 fe                	mov    esi,edi
c001a900:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a906:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a90a:	83 c4 1c             	add    esp,0x1c
c001a90d:	5b                   	pop    ebx
c001a90e:	5e                   	pop    esi
c001a90f:	5f                   	pop    edi
c001a910:	5d                   	pop    ebp
c001a911:	e9 e4 13 ff ff       	jmp    c000bcfa <Device::preOpenPCI(PCIDeviceInfo)>
c001a916:	83 c4 1c             	add    esp,0x1c
c001a919:	5b                   	pop    ebx
c001a91a:	5e                   	pop    esi
c001a91b:	5f                   	pop    edi
c001a91c:	5d                   	pop    ebp
c001a91d:	c3                   	ret    

c001a91e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a91e:	55                   	push   ebp
c001a91f:	57                   	push   edi
c001a920:	56                   	push   esi
c001a921:	53                   	push   ebx
c001a922:	83 ec 68             	sub    esp,0x68
c001a925:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a92c:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a930:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a934:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a93b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001a940:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a944:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a94b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001a950:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a954:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001a959:	6a 0c                	push   0xc
c001a95b:	57                   	push   edi
c001a95c:	53                   	push   ebx
c001a95d:	56                   	push   esi
c001a95e:	55                   	push   ebp
c001a95f:	e8 24 f8 ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a964:	83 c4 20             	add    esp,0x20
c001a967:	57                   	push   edi
c001a968:	53                   	push   ebx
c001a969:	56                   	push   esi
c001a96a:	55                   	push   ebp
c001a96b:	e8 0e f9 ff ff       	call   c001a27e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a970:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a975:	57                   	push   edi
c001a976:	53                   	push   ebx
c001a977:	56                   	push   esi
c001a978:	55                   	push   ebp
c001a979:	e8 96 f9 ff ff       	call   c001a314 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a97e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a982:	83 c4 14             	add    esp,0x14
c001a985:	6a 3c                	push   0x3c
c001a987:	57                   	push   edi
c001a988:	53                   	push   ebx
c001a989:	56                   	push   esi
c001a98a:	55                   	push   ebp
c001a98b:	e8 f8 f7 ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a990:	0f b6 c4             	movzx  eax,ah
c001a993:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a997:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a99b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a99f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001a9a4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001a9aa:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001a9b0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9b4:	83 c4 20             	add    esp,0x20
c001a9b7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001a9bc:	74 30                	je     c001a9ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a9be:	31 c0                	xor    eax,eax
c001a9c0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a9c4:	7e 28                	jle    c001a9ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a9c6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001a9ce:	39 cb                	cmp    ebx,ecx
c001a9d0:	75 19                	jne    c001a9eb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a9d2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001a9da:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a9de:	75 0b                	jne    c001a9eb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a9e0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001a9e7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001a9eb:	40                   	inc    eax
c001a9ec:	eb d2                	jmp    c001a9c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001a9ee:	31 d2                	xor    edx,edx
c001a9f0:	83 ec 0c             	sub    esp,0xc
c001a9f3:	57                   	push   edi
c001a9f4:	53                   	push   ebx
c001a9f5:	56                   	push   esi
c001a9f6:	52                   	push   edx
c001a9f7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a9fb:	55                   	push   ebp
c001a9fc:	e8 5f f9 ff ff       	call   c001a360 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa01:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa05:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aa09:	42                   	inc    edx
c001aa0a:	83 c4 20             	add    esp,0x20
c001aa0d:	83 fa 06             	cmp    edx,0x6
c001aa10:	75 de                	jne    c001a9f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001aa12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa16:	83 ec 0c             	sub    esp,0xc
c001aa19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa1d:	c1 e2 08             	shl    edx,0x8
c001aa20:	0f b6 c4             	movzx  eax,ah
c001aa23:	09 d0                	or     eax,edx
c001aa25:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aa2a:	6a 02                	push   0x2
c001aa2c:	57                   	push   edi
c001aa2d:	53                   	push   ebx
c001aa2e:	56                   	push   esi
c001aa2f:	55                   	push   ebp
c001aa30:	e8 53 f7 ff ff       	call   c001a188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa35:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aa3a:	83 c4 20             	add    esp,0x20
c001aa3d:	57                   	push   edi
c001aa3e:	53                   	push   ebx
c001aa3f:	56                   	push   esi
c001aa40:	55                   	push   ebp
c001aa41:	e8 82 f8 ff ff       	call   c001a2c8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aa46:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aa4a:	57                   	push   edi
c001aa4b:	53                   	push   ebx
c001aa4c:	56                   	push   esi
c001aa4d:	55                   	push   ebp
c001aa4e:	e8 df f7 ff ff       	call   c001a232 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aa53:	b9 09 00 00 00       	mov    ecx,0x9
c001aa58:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001aa5d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aa61:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001aa65:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001aa69:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001aa6d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001aa71:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001aa75:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001aa79:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001aa7d:	83 ec 0c             	sub    esp,0xc
c001aa80:	fc                   	cld    
c001aa81:	8d 74 24 58          	lea    esi,[esp+0x58]
c001aa85:	89 e7                	mov    edi,esp
c001aa87:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aa89:	55                   	push   ebp
c001aa8a:	e8 09 fd ff ff       	call   c001a798 <PCI::foundDevice(PCIDeviceInfo)>
c001aa8f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001aa95:	5b                   	pop    ebx
c001aa96:	5e                   	pop    esi
c001aa97:	5f                   	pop    edi
c001aa98:	5d                   	pop    ebp
c001aa99:	c3                   	ret    

c001aa9a <PCI::checkDevice(unsigned char, unsigned char)>:
c001aa9a:	55                   	push   ebp
c001aa9b:	57                   	push   edi
c001aa9c:	56                   	push   esi
c001aa9d:	53                   	push   ebx
c001aa9e:	83 ec 0c             	sub    esp,0xc
c001aaa1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001aaa6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001aaab:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001aaaf:	6a 00                	push   0x0
c001aab1:	56                   	push   esi
c001aab2:	57                   	push   edi
c001aab3:	55                   	push   ebp
c001aab4:	e8 79 f7 ff ff       	call   c001a232 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aab9:	6a 00                	push   0x0
c001aabb:	56                   	push   esi
c001aabc:	57                   	push   edi
c001aabd:	55                   	push   ebp
c001aabe:	e8 5b fe ff ff       	call   c001a91e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001aac3:	83 c4 20             	add    esp,0x20
c001aac6:	6a 00                	push   0x0
c001aac8:	56                   	push   esi
c001aac9:	57                   	push   edi
c001aaca:	55                   	push   ebp
c001aacb:	e8 86 f7 ff ff       	call   c001a256 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001aad0:	83 c4 10             	add    esp,0x10
c001aad3:	a8 80                	test   al,0x80
c001aad5:	74 2d                	je     c001ab04 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001aad7:	bb 01 00 00 00       	mov    ebx,0x1
c001aadc:	53                   	push   ebx
c001aadd:	56                   	push   esi
c001aade:	57                   	push   edi
c001aadf:	55                   	push   ebp
c001aae0:	e8 4d f7 ff ff       	call   c001a232 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aae5:	83 c4 10             	add    esp,0x10
c001aae8:	0f b7 c0             	movzx  eax,ax
c001aaeb:	3d ff ff 00 00       	cmp    eax,0xffff
c001aaf0:	74 0c                	je     c001aafe <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001aaf2:	53                   	push   ebx
c001aaf3:	56                   	push   esi
c001aaf4:	57                   	push   edi
c001aaf5:	55                   	push   ebp
c001aaf6:	e8 23 fe ff ff       	call   c001a91e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001aafb:	83 c4 10             	add    esp,0x10
c001aafe:	43                   	inc    ebx
c001aaff:	83 fb 08             	cmp    ebx,0x8
c001ab02:	75 d8                	jne    c001aadc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ab04:	83 c4 0c             	add    esp,0xc
c001ab07:	5b                   	pop    ebx
c001ab08:	5e                   	pop    esi
c001ab09:	5f                   	pop    edi
c001ab0a:	5d                   	pop    ebp
c001ab0b:	c3                   	ret    

c001ab0c <PCI::detect()>:
c001ab0c:	56                   	push   esi
c001ab0d:	53                   	push   ebx
c001ab0e:	53                   	push   ebx
c001ab0f:	31 db                	xor    ebx,ebx
c001ab11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab15:	6a 00                	push   0x0
c001ab17:	6a 00                	push   0x0
c001ab19:	6a 00                	push   0x0
c001ab1b:	56                   	push   esi
c001ab1c:	e8 35 f7 ff ff       	call   c001a256 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab21:	83 c4 10             	add    esp,0x10
c001ab24:	a8 80                	test   al,0x80
c001ab26:	75 21                	jne    c001ab49 <PCI::detect()+0x3d>
c001ab28:	51                   	push   ecx
c001ab29:	51                   	push   ecx
c001ab2a:	6a 00                	push   0x0
c001ab2c:	56                   	push   esi
c001ab2d:	e8 42 fc ff ff       	call   c001a774 <PCI::checkBus(unsigned char)>
c001ab32:	83 c4 10             	add    esp,0x10
c001ab35:	eb 2a                	jmp    c001ab61 <PCI::detect()+0x55>
c001ab37:	52                   	push   edx
c001ab38:	52                   	push   edx
c001ab39:	53                   	push   ebx
c001ab3a:	43                   	inc    ebx
c001ab3b:	56                   	push   esi
c001ab3c:	e8 33 fc ff ff       	call   c001a774 <PCI::checkBus(unsigned char)>
c001ab41:	83 c4 10             	add    esp,0x10
c001ab44:	83 fb 08             	cmp    ebx,0x8
c001ab47:	74 18                	je     c001ab61 <PCI::detect()+0x55>
c001ab49:	53                   	push   ebx
c001ab4a:	6a 00                	push   0x0
c001ab4c:	6a 00                	push   0x0
c001ab4e:	56                   	push   esi
c001ab4f:	e8 de f6 ff ff       	call   c001a232 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab54:	83 c4 10             	add    esp,0x10
c001ab57:	0f b7 c0             	movzx  eax,ax
c001ab5a:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab5f:	74 d6                	je     c001ab37 <PCI::detect()+0x2b>
c001ab61:	58                   	pop    eax
c001ab62:	5b                   	pop    ebx
c001ab63:	5e                   	pop    esi
c001ab64:	c3                   	ret    
c001ab65:	90                   	nop

c001ab66 <IDE::close(int, int, void*)>:
c001ab66:	83 c8 ff             	or     eax,0xffffffff
c001ab69:	c3                   	ret    

c001ab6a <IDE::IDE()>:
c001ab6a:	83 ec 0c             	sub    esp,0xc
c001ab6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab71:	83 ec 08             	sub    esp,0x8
c001ab74:	68 ac 19 02 c0       	push   0xc00219ac
c001ab79:	50                   	push   eax
c001ab7a:	e8 79 15 ff ff       	call   c000c0f8 <HardDiskController::HardDiskController(char const*)>
c001ab7f:	83 c4 10             	add    esp,0x10
c001ab82:	ba 3c 1a 02 c0       	mov    edx,0xc0021a3c
c001ab87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab8b:	89 10                	mov    DWORD PTR [eax],edx
c001ab8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab91:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ab98:	90                   	nop
c001ab99:	83 c4 0c             	add    esp,0xc
c001ab9c:	c3                   	ret    
c001ab9d:	90                   	nop

c001ab9e <IDE::prepareInterrupt(unsigned char)>:
c001ab9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aba3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aba7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001abaf:	c3                   	ret    

c001abb0 <selectDrive(unsigned char, unsigned char)>:
c001abb0:	c3                   	ret    
c001abb1:	90                   	nop

c001abb2 <IDE::getBase(unsigned char)>:
c001abb2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001abb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abbb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001abc3:	c3                   	ret    

c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001abc4:	55                   	push   ebp
c001abc5:	57                   	push   edi
c001abc6:	56                   	push   esi
c001abc7:	53                   	push   ebx
c001abc8:	83 ec 1c             	sub    esp,0x1c
c001abcb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001abcf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001abd3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001abd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abdb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001abde:	80 f9 03             	cmp    cl,0x3
c001abe1:	77 4f                	ja     c001ac32 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001abe3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abe7:	0f b6 f2             	movzx  esi,dl
c001abea:	0f b6 db             	movzx  ebx,bl
c001abed:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001abf0:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001abf5:	80 ca 80             	or     dl,0x80
c001abf8:	52                   	push   edx
c001abf9:	6a 0c                	push   0xc
c001abfb:	56                   	push   esi
c001abfc:	57                   	push   edi
c001abfd:	e8 c2 ff ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac02:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ac07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac0b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ac0f:	ee                   	out    dx,al
c001ac10:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ac15:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ac19:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ac1d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ac25:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac29:	83 c4 2c             	add    esp,0x2c
c001ac2c:	5b                   	pop    ebx
c001ac2d:	5e                   	pop    esi
c001ac2e:	5f                   	pop    edi
c001ac2f:	5d                   	pop    ebp
c001ac30:	eb 92                	jmp    c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac32:	0f b6 cb             	movzx  ecx,bl
c001ac35:	83 f9 07             	cmp    ecx,0x7
c001ac38:	77 12                	ja     c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ac3a:	0f b6 d2             	movzx  edx,dl
c001ac3d:	0f b6 db             	movzx  ebx,bl
c001ac40:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001ac48:	01 da                	add    edx,ebx
c001ac4a:	eb 2f                	jmp    c001ac7b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ac4c:	83 f9 0d             	cmp    ecx,0xd
c001ac4f:	77 13                	ja     c001ac64 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ac51:	0f b6 d2             	movzx  edx,dl
c001ac54:	0f b6 db             	movzx  ebx,bl
c001ac57:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ac5e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ac62:	eb 17                	jmp    c001ac7b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ac64:	83 f9 15             	cmp    ecx,0x15
c001ac67:	77 13                	ja     c001ac7c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ac69:	0f b6 d2             	movzx  edx,dl
c001ac6c:	0f b6 db             	movzx  ebx,bl
c001ac6f:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ac77:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ac7b:	ee                   	out    dx,al
c001ac7c:	83 c4 1c             	add    esp,0x1c
c001ac7f:	5b                   	pop    ebx
c001ac80:	5e                   	pop    esi
c001ac81:	5f                   	pop    edi
c001ac82:	5d                   	pop    ebp
c001ac83:	c3                   	ret    

c001ac84 <IDE::read(unsigned char, unsigned char)>:
c001ac84:	57                   	push   edi
c001ac85:	56                   	push   esi
c001ac86:	53                   	push   ebx
c001ac87:	83 ec 10             	sub    esp,0x10
c001ac8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ac8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac92:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ac96:	8d 42 f8             	lea    eax,[edx-0x8]
c001ac99:	3c 03                	cmp    al,0x3
c001ac9b:	77 48                	ja     c001ace5 <IDE::read(unsigned char, unsigned char)+0x61>
c001ac9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aca1:	0f b6 f1             	movzx  esi,cl
c001aca4:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001aca7:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001acac:	0c 80                	or     al,0x80
c001acae:	50                   	push   eax
c001acaf:	6a 0c                	push   0xc
c001acb1:	56                   	push   esi
c001acb2:	53                   	push   ebx
c001acb3:	e8 0c ff ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001acbc:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001acc1:	0f b6 d2             	movzx  edx,dl
c001acc4:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001acc8:	ec                   	in     al,dx
c001acc9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001accd:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001acd2:	52                   	push   edx
c001acd3:	6a 0c                	push   0xc
c001acd5:	56                   	push   esi
c001acd6:	53                   	push   ebx
c001acd7:	e8 e8 fe ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acdc:	83 c4 20             	add    esp,0x20
c001acdf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ace3:	eb 4c                	jmp    c001ad31 <IDE::read(unsigned char, unsigned char)+0xad>
c001ace5:	0f b6 f2             	movzx  esi,dl
c001ace8:	83 fe 07             	cmp    esi,0x7
c001aceb:	77 12                	ja     c001acff <IDE::read(unsigned char, unsigned char)+0x7b>
c001aced:	0f b6 c9             	movzx  ecx,cl
c001acf0:	0f b6 d2             	movzx  edx,dl
c001acf3:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001acfb:	01 c2                	add    edx,eax
c001acfd:	eb 31                	jmp    c001ad30 <IDE::read(unsigned char, unsigned char)+0xac>
c001acff:	83 fe 0d             	cmp    esi,0xd
c001ad02:	77 13                	ja     c001ad17 <IDE::read(unsigned char, unsigned char)+0x93>
c001ad04:	0f b6 c9             	movzx  ecx,cl
c001ad07:	0f b6 d2             	movzx  edx,dl
c001ad0a:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001ad11:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ad15:	eb 19                	jmp    c001ad30 <IDE::read(unsigned char, unsigned char)+0xac>
c001ad17:	31 c0                	xor    eax,eax
c001ad19:	83 fe 15             	cmp    esi,0x15
c001ad1c:	77 13                	ja     c001ad31 <IDE::read(unsigned char, unsigned char)+0xad>
c001ad1e:	0f b6 c9             	movzx  ecx,cl
c001ad21:	0f b6 d2             	movzx  edx,dl
c001ad24:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001ad2c:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ad30:	ec                   	in     al,dx
c001ad31:	83 c4 10             	add    esp,0x10
c001ad34:	5b                   	pop    ebx
c001ad35:	5e                   	pop    esi
c001ad36:	5f                   	pop    edi
c001ad37:	c3                   	ret    

c001ad38 <IDE::waitInterrupt(unsigned char)>:
c001ad38:	55                   	push   ebp
c001ad39:	57                   	push   edi
c001ad3a:	56                   	push   esi
c001ad3b:	53                   	push   ebx
c001ad3c:	31 db                	xor    ebx,ebx
c001ad3e:	83 ec 0c             	sub    esp,0xc
c001ad41:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ad45:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ad4a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ad52:	89 e8                	mov    eax,ebp
c001ad54:	84 c0                	test   al,al
c001ad56:	75 30                	jne    c001ad88 <IDE::waitInterrupt(unsigned char)+0x50>
c001ad58:	50                   	push   eax
c001ad59:	6a 0c                	push   0xc
c001ad5b:	56                   	push   esi
c001ad5c:	57                   	push   edi
c001ad5d:	e8 22 ff ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001ad62:	83 c4 10             	add    esp,0x10
c001ad65:	a8 01                	test   al,0x1
c001ad67:	75 27                	jne    c001ad90 <IDE::waitInterrupt(unsigned char)+0x58>
c001ad69:	f6 c3 04             	test   bl,0x4
c001ad6c:	75 12                	jne    c001ad80 <IDE::waitInterrupt(unsigned char)+0x48>
c001ad6e:	83 fb 32             	cmp    ebx,0x32
c001ad71:	7e 0d                	jle    c001ad80 <IDE::waitInterrupt(unsigned char)+0x48>
c001ad73:	83 ec 0c             	sub    esp,0xc
c001ad76:	6a 64                	push   0x64
c001ad78:	e8 6f a5 ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001ad7d:	83 c4 10             	add    esp,0x10
c001ad80:	83 fb 3c             	cmp    ebx,0x3c
c001ad83:	74 0b                	je     c001ad90 <IDE::waitInterrupt(unsigned char)+0x58>
c001ad85:	43                   	inc    ebx
c001ad86:	eb c2                	jmp    c001ad4a <IDE::waitInterrupt(unsigned char)+0x12>
c001ad88:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ad90:	83 c4 0c             	add    esp,0xc
c001ad93:	89 e8                	mov    eax,ebp
c001ad95:	5b                   	pop    ebx
c001ad96:	5e                   	pop    esi
c001ad97:	5f                   	pop    edi
c001ad98:	5d                   	pop    ebp
c001ad99:	c3                   	ret    

c001ad9a <ideChannel0IRQHandler(regs*, void*)>:
c001ad9a:	83 ec 10             	sub    esp,0x10
c001ad9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ada1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ada8:	6a 07                	push   0x7
c001adaa:	6a 00                	push   0x0
c001adac:	50                   	push   eax
c001adad:	e8 d2 fe ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001adb2:	83 c4 1c             	add    esp,0x1c
c001adb5:	c3                   	ret    

c001adb6 <ideChannel1IRQHandler(regs*, void*)>:
c001adb6:	83 ec 10             	sub    esp,0x10
c001adb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adbd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001adc4:	6a 07                	push   0x7
c001adc6:	6a 01                	push   0x1
c001adc8:	50                   	push   eax
c001adc9:	e8 b6 fe ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001adce:	83 c4 1c             	add    esp,0x1c
c001add1:	c3                   	ret    

c001add2 <IDE::enableIRQs(unsigned char, bool)>:
c001add2:	57                   	push   edi
c001add3:	b8 02 00 00 00       	mov    eax,0x2
c001add8:	56                   	push   esi
c001add9:	53                   	push   ebx
c001adda:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001addf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ade3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ade7:	74 02                	je     c001adeb <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ade9:	31 c0                	xor    eax,eax
c001adeb:	0f b6 db             	movzx  ebx,bl
c001adee:	bf 04 00 00 00       	mov    edi,0x4
c001adf3:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001adfa:	50                   	push   eax
c001adfb:	6a 0c                	push   0xc
c001adfd:	53                   	push   ebx
c001adfe:	56                   	push   esi
c001adff:	e8 c0 fd ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae04:	83 c4 10             	add    esp,0x10
c001ae07:	50                   	push   eax
c001ae08:	6a 0c                	push   0xc
c001ae0a:	53                   	push   ebx
c001ae0b:	56                   	push   esi
c001ae0c:	e8 73 fe ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001ae11:	83 c4 10             	add    esp,0x10
c001ae14:	4f                   	dec    edi
c001ae15:	75 f0                	jne    c001ae07 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ae17:	5b                   	pop    ebx
c001ae18:	5e                   	pop    esi
c001ae19:	5f                   	pop    edi
c001ae1a:	c3                   	ret    
c001ae1b:	90                   	nop

c001ae1c <IDE::open(int, int, void*)>:
c001ae1c:	55                   	push   ebp
c001ae1d:	57                   	push   edi
c001ae1e:	56                   	push   esi
c001ae1f:	53                   	push   ebx
c001ae20:	83 ec 1c             	sub    esp,0x1c
c001ae23:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae27:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ae2e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ae37:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ae40:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ae47:	0f 85 da 02 00 00    	jne    c001b127 <IDE::open(int, int, void*)+0x30b>
c001ae4d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ae53:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001ae57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae5b:	83 e0 7f             	and    eax,0x7f
c001ae5e:	83 f8 05             	cmp    eax,0x5
c001ae61:	74 05                	je     c001ae68 <IDE::open(int, int, void*)+0x4c>
c001ae63:	83 f8 0f             	cmp    eax,0xf
c001ae66:	75 32                	jne    c001ae9a <IDE::open(int, int, void*)+0x7e>
c001ae68:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ae6e:	83 e0 fc             	and    eax,0xfffffffc
c001ae71:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ae78:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ae7e:	83 e0 fc             	and    eax,0xfffffffc
c001ae81:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ae88:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ae8e:	83 e0 fc             	and    eax,0xfffffffc
c001ae91:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ae98:	eb 14                	jmp    c001aeae <IDE::open(int, int, void*)+0x92>
c001ae9a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001aea4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001aeae:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001aeb5:	bf f8 0c 00 00       	mov    edi,0xcf8
c001aeba:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001aec1:	89 fa                	mov    edx,edi
c001aec3:	89 f1                	mov    ecx,esi
c001aec5:	c1 e1 10             	shl    ecx,0x10
c001aec8:	89 e8                	mov    eax,ebp
c001aeca:	c1 e0 0b             	shl    eax,0xb
c001aecd:	09 c1                	or     ecx,eax
c001aecf:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001aed6:	c1 e0 08             	shl    eax,0x8
c001aed9:	09 c1                	or     ecx,eax
c001aedb:	89 c8                	mov    eax,ecx
c001aedd:	0d 08 00 00 80       	or     eax,0x80000008
c001aee2:	ef                   	out    dx,eax
c001aee3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aee8:	ed                   	in     eax,dx
c001aee9:	c1 e8 10             	shr    eax,0x10
c001aeec:	3d ff ff 00 00       	cmp    eax,0xffff
c001aef1:	0f 84 f9 00 00 00    	je     c001aff0 <IDE::open(int, int, void*)+0x1d4>
c001aef7:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001aefd:	89 fa                	mov    edx,edi
c001aeff:	89 c8                	mov    eax,ecx
c001af01:	ef                   	out    dx,eax
c001af02:	b0 fe                	mov    al,0xfe
c001af04:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af09:	ee                   	out    dx,al
c001af0a:	89 c8                	mov    eax,ecx
c001af0c:	89 fa                	mov    edx,edi
c001af0e:	ef                   	out    dx,eax
c001af0f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af14:	ed                   	in     eax,dx
c001af15:	3c fe                	cmp    al,0xfe
c001af17:	0f 85 a4 00 00 00    	jne    c001afc1 <IDE::open(int, int, void*)+0x1a5>
c001af1d:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001af23:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001af2a:	74 30                	je     c001af5c <IDE::open(int, int, void*)+0x140>
c001af2c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001af32:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001af36:	83 ec 0c             	sub    esp,0xc
c001af39:	40                   	inc    eax
c001af3a:	0f b6 c0             	movzx  eax,al
c001af3d:	50                   	push   eax
c001af3e:	55                   	push   ebp
c001af3f:	56                   	push   esi
c001af40:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001af46:	51                   	push   ecx
c001af47:	e8 04 3e ff ff       	call   c000ed50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001af4c:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001af51:	83 c4 1c             	add    esp,0x1c
c001af54:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001af5a:	eb 0a                	jmp    c001af66 <IDE::open(int, int, void*)+0x14a>
c001af5c:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001af66:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001af6d:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001af72:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001af79:	89 ea                	mov    edx,ebp
c001af7b:	c1 e1 10             	shl    ecx,0x10
c001af7e:	c1 e0 08             	shl    eax,0x8
c001af81:	09 c1                	or     ecx,eax
c001af83:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001af8a:	c1 e0 0b             	shl    eax,0xb
c001af8d:	09 c1                	or     ecx,eax
c001af8f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001af95:	89 c8                	mov    eax,ecx
c001af97:	ef                   	out    dx,eax
c001af98:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001af9e:	be fc 0c 00 00       	mov    esi,0xcfc
c001afa3:	89 f2                	mov    edx,esi
c001afa5:	89 f8                	mov    eax,edi
c001afa7:	ee                   	out    dx,al
c001afa8:	89 c8                	mov    eax,ecx
c001afaa:	89 ea                	mov    edx,ebp
c001afac:	ef                   	out    dx,eax
c001afad:	89 f2                	mov    edx,esi
c001afaf:	ed                   	in     eax,dx
c001afb0:	0f b6 c0             	movzx  eax,al
c001afb3:	39 f8                	cmp    eax,edi
c001afb5:	74 49                	je     c001b000 <IDE::open(int, int, void*)+0x1e4>
c001afb7:	83 ec 0c             	sub    esp,0xc
c001afba:	68 c4 19 02 c0       	push   0xc00219c4
c001afbf:	eb 37                	jmp    c001aff8 <IDE::open(int, int, void*)+0x1dc>
c001afc1:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001afca:	75 1a                	jne    c001afe6 <IDE::open(int, int, void*)+0x1ca>
c001afcc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001afd1:	3d 8a 00 00 00       	cmp    eax,0x8a
c001afd6:	74 05                	je     c001afdd <IDE::open(int, int, void*)+0x1c1>
c001afd8:	83 c0 80             	add    eax,0xffffff80
c001afdb:	75 09                	jne    c001afe6 <IDE::open(int, int, void*)+0x1ca>
c001afdd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001afe4:	eb 1a                	jmp    c001b000 <IDE::open(int, int, void*)+0x1e4>
c001afe6:	83 ec 0c             	sub    esp,0xc
c001afe9:	68 cc 19 02 c0       	push   0xc00219cc
c001afee:	eb 08                	jmp    c001aff8 <IDE::open(int, int, void*)+0x1dc>
c001aff0:	83 ec 0c             	sub    esp,0xc
c001aff3:	68 fd 19 02 c0       	push   0xc00219fd
c001aff8:	e8 d8 57 ff ff       	call   c00107d5 <KePanic(char const*)>
c001affd:	83 c4 10             	add    esp,0x10
c001b000:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b007:	74 1a                	je     c001b023 <IDE::open(int, int, void*)+0x207>
c001b009:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b00f:	83 e0 fc             	and    eax,0xfffffffc
c001b012:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b019:	83 c0 08             	add    eax,0x8
c001b01c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b023:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b029:	89 c2                	mov    edx,eax
c001b02b:	83 e2 0f             	and    edx,0xf
c001b02e:	83 fa 08             	cmp    edx,0x8
c001b031:	75 0a                	jne    c001b03d <IDE::open(int, int, void*)+0x221>
c001b033:	83 e8 02             	sub    eax,0x2
c001b036:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b03d:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b043:	89 c2                	mov    edx,eax
c001b045:	83 e2 0f             	and    edx,0xf
c001b048:	83 fa 08             	cmp    edx,0x8
c001b04b:	75 0a                	jne    c001b057 <IDE::open(int, int, void*)+0x23b>
c001b04d:	83 e8 02             	sub    eax,0x2
c001b050:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b057:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b05e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b065:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b068:	89 d0                	mov    eax,edx
c001b06a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b06e:	8d 7a 01             	lea    edi,[edx+0x1]
c001b071:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b075:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b079:	83 e1 3f             	and    ecx,0x3f
c001b07c:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b080:	89 f9                	mov    ecx,edi
c001b082:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b089:	8d 78 02             	lea    edi,[eax+0x2]
c001b08c:	0f b6 c9             	movzx  ecx,cl
c001b08f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b092:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b096:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b09a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b09e:	83 e2 3f             	and    edx,0x3f
c001b0a1:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b0a5:	89 f9                	mov    ecx,edi
c001b0a7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b0ad:	8d 78 03             	lea    edi,[eax+0x3]
c001b0b0:	0f b6 d1             	movzx  edx,cl
c001b0b3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b0b6:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b0ba:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0be:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b0c2:	83 e1 3f             	and    ecx,0x3f
c001b0c5:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b0c9:	89 f9                	mov    ecx,edi
c001b0cb:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b0d1:	8d 78 04             	lea    edi,[eax+0x4]
c001b0d4:	0f b6 c9             	movzx  ecx,cl
c001b0d7:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b0da:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b0de:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b0e2:	89 fa                	mov    edx,edi
c001b0e4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b0ea:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b0ee:	83 e2 3f             	and    edx,0x3f
c001b0f1:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b0f5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b0fc:	66 85 f6             	test   si,si
c001b0ff:	74 65                	je     c001b166 <IDE::open(int, int, void*)+0x34a>
c001b101:	89 f9                	mov    ecx,edi
c001b103:	83 c0 05             	add    eax,0x5
c001b106:	0f b6 d1             	movzx  edx,cl
c001b109:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b10c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b110:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b114:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b11a:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b11e:	83 e0 3f             	and    eax,0x3f
c001b121:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b125:	eb 3f                	jmp    c001b166 <IDE::open(int, int, void*)+0x34a>
c001b127:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b12e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b134:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b13b:	05 06 02 00 00       	add    eax,0x206
c001b140:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b147:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b14e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b155:	05 06 02 00 00       	add    eax,0x206
c001b15a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b161:	e9 bd fe ff ff       	jmp    c001b023 <IDE::open(int, int, void*)+0x207>
c001b166:	50                   	push   eax
c001b167:	50                   	push   eax
c001b168:	6a 00                	push   0x0
c001b16a:	53                   	push   ebx
c001b16b:	e8 2e fa ff ff       	call   c001ab9e <IDE::prepareInterrupt(unsigned char)>
c001b170:	5a                   	pop    edx
c001b171:	59                   	pop    ecx
c001b172:	6a 01                	push   0x1
c001b174:	53                   	push   ebx
c001b175:	e8 24 fa ff ff       	call   c001ab9e <IDE::prepareInterrupt(unsigned char)>
c001b17a:	83 c4 0c             	add    esp,0xc
c001b17d:	6a 00                	push   0x0
c001b17f:	6a 00                	push   0x0
c001b181:	53                   	push   ebx
c001b182:	e8 4b fc ff ff       	call   c001add2 <IDE::enableIRQs(unsigned char, bool)>
c001b187:	83 c4 0c             	add    esp,0xc
c001b18a:	6a 00                	push   0x0
c001b18c:	6a 01                	push   0x1
c001b18e:	53                   	push   ebx
c001b18f:	e8 3e fc ff ff       	call   c001add2 <IDE::enableIRQs(unsigned char, bool)>
c001b194:	83 c4 10             	add    esp,0x10
c001b197:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b19e:	74 34                	je     c001b1d4 <IDE::open(int, int, void*)+0x3b8>
c001b1a0:	83 ec 0c             	sub    esp,0xc
c001b1a3:	53                   	push   ebx
c001b1a4:	6a 01                	push   0x1
c001b1a6:	68 9a ad 01 c0       	push   0xc001ad9a
c001b1ab:	6a 0e                	push   0xe
c001b1ad:	53                   	push   ebx
c001b1ae:	e8 ad 0b ff ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1b3:	83 c4 14             	add    esp,0x14
c001b1b6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b1bc:	53                   	push   ebx
c001b1bd:	6a 01                	push   0x1
c001b1bf:	68 b6 ad 01 c0       	push   0xc001adb6
c001b1c4:	6a 0f                	push   0xf
c001b1c6:	53                   	push   ebx
c001b1c7:	e8 94 0b ff ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1cc:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b1d2:	eb 38                	jmp    c001b20c <IDE::open(int, int, void*)+0x3f0>
c001b1d4:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b1de:	83 ec 0c             	sub    esp,0xc
c001b1e1:	53                   	push   ebx
c001b1e2:	6a 00                	push   0x0
c001b1e4:	68 9a ad 01 c0       	push   0xc001ad9a
c001b1e9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b1ef:	53                   	push   ebx
c001b1f0:	e8 6b 0b ff ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1f5:	83 c4 14             	add    esp,0x14
c001b1f8:	53                   	push   ebx
c001b1f9:	6a 00                	push   0x0
c001b1fb:	68 b6 ad 01 c0       	push   0xc001adb6
c001b200:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b206:	53                   	push   ebx
c001b207:	e8 54 0b ff ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b20c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b20e:	83 c4 20             	add    esp,0x20
c001b211:	83 ec 0c             	sub    esp,0xc
c001b214:	53                   	push   ebx
c001b215:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b218:	83 c4 0c             	add    esp,0xc
c001b21b:	6a 07                	push   0x7
c001b21d:	6a 00                	push   0x0
c001b21f:	53                   	push   ebx
c001b220:	e8 5f fa ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b225:	83 c4 0c             	add    esp,0xc
c001b228:	6a 07                	push   0x7
c001b22a:	6a 01                	push   0x1
c001b22c:	53                   	push   ebx
c001b22d:	e8 52 fa ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b232:	83 c4 0c             	add    esp,0xc
c001b235:	6a 01                	push   0x1
c001b237:	6a 00                	push   0x0
c001b239:	53                   	push   ebx
c001b23a:	e8 93 fb ff ff       	call   c001add2 <IDE::enableIRQs(unsigned char, bool)>
c001b23f:	83 c4 0c             	add    esp,0xc
c001b242:	6a 01                	push   0x1
c001b244:	6a 01                	push   0x1
c001b246:	53                   	push   ebx
c001b247:	e8 86 fb ff ff       	call   c001add2 <IDE::enableIRQs(unsigned char, bool)>
c001b24c:	83 c4 2c             	add    esp,0x2c
c001b24f:	31 c0                	xor    eax,eax
c001b251:	5b                   	pop    ebx
c001b252:	5e                   	pop    esi
c001b253:	5f                   	pop    edi
c001b254:	5d                   	pop    ebp
c001b255:	c3                   	ret    

c001b256 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b256:	55                   	push   ebp
c001b257:	57                   	push   edi
c001b258:	56                   	push   esi
c001b259:	53                   	push   ebx
c001b25a:	83 ec 1c             	sub    esp,0x1c
c001b25d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b261:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b265:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b269:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b26d:	8d 42 f8             	lea    eax,[edx-0x8]
c001b270:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b274:	3c 03                	cmp    al,0x3
c001b276:	77 5a                	ja     c001b2d2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b278:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b27c:	0f b6 db             	movzx  ebx,bl
c001b27f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b283:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b286:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b28b:	0c 80                	or     al,0x80
c001b28d:	50                   	push   eax
c001b28e:	6a 0c                	push   0xc
c001b290:	53                   	push   ebx
c001b291:	56                   	push   esi
c001b292:	e8 2d f9 ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b29b:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b2a0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b2a4:	0f b6 d2             	movzx  edx,dl
c001b2a7:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b2ab:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b2ad:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b2b2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b2b6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b2ba:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b2c2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b2c6:	83 c4 2c             	add    esp,0x2c
c001b2c9:	5b                   	pop    ebx
c001b2ca:	5e                   	pop    esi
c001b2cb:	5f                   	pop    edi
c001b2cc:	5d                   	pop    ebp
c001b2cd:	e9 f2 f8 ff ff       	jmp    c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2d2:	0f b6 c2             	movzx  eax,dl
c001b2d5:	83 f8 07             	cmp    eax,0x7
c001b2d8:	77 12                	ja     c001b2ec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b2da:	0f b6 db             	movzx  ebx,bl
c001b2dd:	0f b6 c2             	movzx  eax,dl
c001b2e0:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b2e8:	01 c2                	add    edx,eax
c001b2ea:	eb 2f                	jmp    c001b31b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b2ec:	83 f8 0d             	cmp    eax,0xd
c001b2ef:	77 13                	ja     c001b304 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b2f1:	0f b6 db             	movzx  ebx,bl
c001b2f4:	0f b6 d2             	movzx  edx,dl
c001b2f7:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b2fe:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b302:	eb 17                	jmp    c001b31b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b304:	83 f8 15             	cmp    eax,0x15
c001b307:	77 14                	ja     c001b31d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b309:	0f b6 db             	movzx  ebx,bl
c001b30c:	0f b6 d2             	movzx  edx,dl
c001b30f:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b317:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b31b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b31d:	83 c4 1c             	add    esp,0x1c
c001b320:	5b                   	pop    ebx
c001b321:	5e                   	pop    esi
c001b322:	5f                   	pop    edi
c001b323:	5d                   	pop    ebp
c001b324:	c3                   	ret    
c001b325:	90                   	nop

c001b326 <IDE::detect()>:
c001b326:	55                   	push   ebp
c001b327:	57                   	push   edi
c001b328:	56                   	push   esi
c001b329:	53                   	push   ebx
c001b32a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b330:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b337:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b33e:	0f 85 9e 02 00 00    	jne    c001b5e2 <IDE::detect()+0x2bc>
c001b344:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b34b:	31 f6                	xor    esi,esi
c001b34d:	31 ff                	xor    edi,edi
c001b34f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b357:	89 f8                	mov    eax,edi
c001b359:	c1 e0 06             	shl    eax,0x6
c001b35c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b364:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b368:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b36c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b370:	c1 e0 04             	shl    eax,0x4
c001b373:	83 c8 a0             	or     eax,0xffffffa0
c001b376:	0f b6 c0             	movzx  eax,al
c001b379:	50                   	push   eax
c001b37a:	6a 06                	push   0x6
c001b37c:	56                   	push   esi
c001b37d:	53                   	push   ebx
c001b37e:	e8 41 f8 ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b383:	83 c4 0c             	add    esp,0xc
c001b386:	6a 0c                	push   0xc
c001b388:	56                   	push   esi
c001b389:	53                   	push   ebx
c001b38a:	e8 f5 f8 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b38f:	83 c4 0c             	add    esp,0xc
c001b392:	6a 0c                	push   0xc
c001b394:	56                   	push   esi
c001b395:	53                   	push   ebx
c001b396:	e8 e9 f8 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b39b:	83 c4 0c             	add    esp,0xc
c001b39e:	6a 0c                	push   0xc
c001b3a0:	56                   	push   esi
c001b3a1:	53                   	push   ebx
c001b3a2:	e8 dd f8 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b3a7:	83 c4 0c             	add    esp,0xc
c001b3aa:	6a 0c                	push   0xc
c001b3ac:	56                   	push   esi
c001b3ad:	53                   	push   ebx
c001b3ae:	e8 d1 f8 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b3b3:	68 ec 00 00 00       	push   0xec
c001b3b8:	6a 07                	push   0x7
c001b3ba:	56                   	push   esi
c001b3bb:	53                   	push   ebx
c001b3bc:	e8 03 f8 ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3c1:	83 c4 1c             	add    esp,0x1c
c001b3c4:	6a 0c                	push   0xc
c001b3c6:	56                   	push   esi
c001b3c7:	53                   	push   ebx
c001b3c8:	e8 b7 f8 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b3cd:	83 c4 0c             	add    esp,0xc
c001b3d0:	6a 0c                	push   0xc
c001b3d2:	56                   	push   esi
c001b3d3:	53                   	push   ebx
c001b3d4:	e8 ab f8 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b3d9:	83 c4 0c             	add    esp,0xc
c001b3dc:	6a 0c                	push   0xc
c001b3de:	56                   	push   esi
c001b3df:	53                   	push   ebx
c001b3e0:	e8 9f f8 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b3e5:	83 c4 0c             	add    esp,0xc
c001b3e8:	6a 0c                	push   0xc
c001b3ea:	56                   	push   esi
c001b3eb:	53                   	push   ebx
c001b3ec:	e8 93 f8 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b3f1:	83 c4 0c             	add    esp,0xc
c001b3f4:	6a 0c                	push   0xc
c001b3f6:	56                   	push   esi
c001b3f7:	53                   	push   ebx
c001b3f8:	e8 87 f8 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b3fd:	83 c4 10             	add    esp,0x10
c001b400:	84 c0                	test   al,al
c001b402:	0f 84 61 01 00 00    	je     c001b569 <IDE::detect()+0x243>
c001b408:	31 ed                	xor    ebp,ebp
c001b40a:	50                   	push   eax
c001b40b:	6a 0c                	push   0xc
c001b40d:	56                   	push   esi
c001b40e:	53                   	push   ebx
c001b40f:	e8 70 f8 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b414:	83 c4 10             	add    esp,0x10
c001b417:	a8 01                	test   al,0x1
c001b419:	0f 85 6b 01 00 00    	jne    c001b58a <IDE::detect()+0x264>
c001b41f:	a8 80                	test   al,0x80
c001b421:	75 04                	jne    c001b427 <IDE::detect()+0x101>
c001b423:	a8 08                	test   al,0x8
c001b425:	75 23                	jne    c001b44a <IDE::detect()+0x124>
c001b427:	45                   	inc    ebp
c001b428:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b42e:	7e da                	jle    c001b40a <IDE::detect()+0xe4>
c001b430:	83 ec 0c             	sub    esp,0xc
c001b433:	6a 32                	push   0x32
c001b435:	e8 b2 9e ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001b43a:	83 c4 10             	add    esp,0x10
c001b43d:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b443:	75 c5                	jne    c001b40a <IDE::detect()+0xe4>
c001b445:	e9 40 01 00 00       	jmp    c001b58a <IDE::detect()+0x264>
c001b44a:	31 c9                	xor    ecx,ecx
c001b44c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b450:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b454:	83 ec 0c             	sub    esp,0xc
c001b457:	68 80 00 00 00       	push   0x80
c001b45c:	55                   	push   ebp
c001b45d:	6a 00                	push   0x0
c001b45f:	56                   	push   esi
c001b460:	53                   	push   ebx
c001b461:	e8 f0 fd ff ff       	call   c001b256 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b466:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b46b:	89 f8                	mov    eax,edi
c001b46d:	c1 e0 06             	shl    eax,0x6
c001b470:	01 d8                	add    eax,ebx
c001b472:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b479:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b480:	89 d1                	mov    ecx,edx
c001b482:	89 f2                	mov    edx,esi
c001b484:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b48a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b48e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b494:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b498:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b49f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b4a7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b4ae:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b4b6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b4bc:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b4c3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b4c9:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b4cd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b4d1:	83 c4 20             	add    esp,0x20
c001b4d4:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001b4d7:	83 c5 02             	add    ebp,0x2
c001b4da:	83 c0 02             	add    eax,0x2
c001b4dd:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b4e3:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001b4e6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b4ec:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001b4f0:	75 e2                	jne    c001b4d4 <IDE::detect()+0x1ae>
c001b4f2:	89 f8                	mov    eax,edi
c001b4f4:	c1 e0 06             	shl    eax,0x6
c001b4f7:	01 d8                	add    eax,ebx
c001b4f9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b500:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b507:	c1 ea 09             	shr    edx,0x9
c001b50a:	83 e2 01             	and    edx,0x1
c001b50d:	80 e1 01             	and    cl,0x1
c001b510:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b516:	75 22                	jne    c001b53a <IDE::detect()+0x214>
c001b518:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b51f:	74 47                	je     c001b568 <IDE::detect()+0x242>
c001b521:	83 ec 0c             	sub    esp,0xc
c001b524:	68 7c 01 00 00       	push   0x17c
c001b529:	e8 9d c5 fe ff       	call   c0007acb <malloc>
c001b52e:	89 04 24             	mov    DWORD PTR [esp],eax
c001b531:	89 c5                	mov    ebp,eax
c001b533:	e8 16 05 00 00       	call   c001ba4e <ATA::ATA()>
c001b538:	eb 17                	jmp    c001b551 <IDE::detect()+0x22b>
c001b53a:	83 ec 0c             	sub    esp,0xc
c001b53d:	68 84 01 00 00       	push   0x184
c001b542:	e8 84 c5 fe ff       	call   c0007acb <malloc>
c001b547:	89 04 24             	mov    DWORD PTR [esp],eax
c001b54a:	89 c5                	mov    ebp,eax
c001b54c:	e8 6f 0e 00 00       	call   c001c3c0 <ATAPI::ATAPI()>
c001b551:	5a                   	pop    edx
c001b552:	59                   	pop    ecx
c001b553:	55                   	push   ebp
c001b554:	53                   	push   ebx
c001b555:	e8 5a 08 ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c001b55a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b55d:	53                   	push   ebx
c001b55e:	57                   	push   edi
c001b55f:	6a 00                	push   0x0
c001b561:	55                   	push   ebp
c001b562:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b565:	83 c4 20             	add    esp,0x20
c001b568:	47                   	inc    edi
c001b569:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b56e:	74 0d                	je     c001b57d <IDE::detect()+0x257>
c001b570:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b578:	e9 da fd ff ff       	jmp    c001b357 <IDE::detect()+0x31>
c001b57d:	4e                   	dec    esi
c001b57e:	74 62                	je     c001b5e2 <IDE::detect()+0x2bc>
c001b580:	be 01 00 00 00       	mov    esi,0x1
c001b585:	e9 c5 fd ff ff       	jmp    c001b34f <IDE::detect()+0x29>
c001b58a:	50                   	push   eax
c001b58b:	6a 04                	push   0x4
c001b58d:	56                   	push   esi
c001b58e:	53                   	push   ebx
c001b58f:	e8 f0 f6 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b594:	83 c4 0c             	add    esp,0xc
c001b597:	6a 05                	push   0x5
c001b599:	56                   	push   esi
c001b59a:	53                   	push   ebx
c001b59b:	89 c5                	mov    ebp,eax
c001b59d:	e8 e2 f6 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b5a2:	89 e9                	mov    ecx,ebp
c001b5a4:	83 c4 10             	add    esp,0x10
c001b5a7:	0f b6 e9             	movzx  ebp,cl
c001b5aa:	83 fd 14             	cmp    ebp,0x14
c001b5ad:	74 2d                	je     c001b5dc <IDE::detect()+0x2b6>
c001b5af:	83 fd 69             	cmp    ebp,0x69
c001b5b2:	75 b5                	jne    c001b569 <IDE::detect()+0x243>
c001b5b4:	3c 96                	cmp    al,0x96
c001b5b6:	75 b1                	jne    c001b569 <IDE::detect()+0x243>
c001b5b8:	68 a1 00 00 00       	push   0xa1
c001b5bd:	6a 07                	push   0x7
c001b5bf:	56                   	push   esi
c001b5c0:	53                   	push   ebx
c001b5c1:	e8 fe f5 ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5c6:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b5cd:	e8 1a 9d ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001b5d2:	83 c4 10             	add    esp,0x10
c001b5d5:	b1 01                	mov    cl,0x1
c001b5d7:	e9 70 fe ff ff       	jmp    c001b44c <IDE::detect()+0x126>
c001b5dc:	3c eb                	cmp    al,0xeb
c001b5de:	75 cf                	jne    c001b5af <IDE::detect()+0x289>
c001b5e0:	eb d6                	jmp    c001b5b8 <IDE::detect()+0x292>
c001b5e2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b5e8:	5b                   	pop    ebx
c001b5e9:	5e                   	pop    esi
c001b5ea:	5f                   	pop    edi
c001b5eb:	5d                   	pop    ebp
c001b5ec:	c3                   	ret    
c001b5ed:	90                   	nop

c001b5ee <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b5ee:	55                   	push   ebp
c001b5ef:	57                   	push   edi
c001b5f0:	56                   	push   esi
c001b5f1:	53                   	push   ebx
c001b5f2:	83 ec 1c             	sub    esp,0x1c
c001b5f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b5f9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b5fd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b605:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b609:	88 c3                	mov    bl,al
c001b60b:	25 ff 00 00 00       	and    eax,0xff
c001b610:	0f 84 88 00 00 00    	je     c001b69e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b616:	83 ec 0c             	sub    esp,0xc
c001b619:	89 c7                	mov    edi,eax
c001b61b:	68 27 1a 02 c0       	push   0xc0021a27
c001b620:	e8 2c f3 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001b625:	83 c4 10             	add    esp,0x10
c001b628:	83 ff 01             	cmp    edi,0x1
c001b62b:	74 6b                	je     c001b698 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b62d:	83 ff 02             	cmp    edi,0x2
c001b630:	75 58                	jne    c001b68a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b632:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b637:	50                   	push   eax
c001b638:	6a 01                	push   0x1
c001b63a:	01 ff                	add    edi,edi
c001b63c:	09 fe                	or     esi,edi
c001b63e:	89 f0                	mov    eax,esi
c001b640:	0f b6 f0             	movzx  esi,al
c001b643:	c1 e6 06             	shl    esi,0x6
c001b646:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b64e:	50                   	push   eax
c001b64f:	55                   	push   ebp
c001b650:	e8 2f f6 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b655:	83 c4 10             	add    esp,0x10
c001b658:	a8 01                	test   al,0x1
c001b65a:	74 02                	je     c001b65e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b65c:	b3 07                	mov    bl,0x7
c001b65e:	a8 02                	test   al,0x2
c001b660:	74 02                	je     c001b664 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b662:	b3 03                	mov    bl,0x3
c001b664:	a8 04                	test   al,0x4
c001b666:	74 02                	je     c001b66a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b668:	b3 14                	mov    bl,0x14
c001b66a:	a8 08                	test   al,0x8
c001b66c:	74 02                	je     c001b670 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b66e:	b3 03                	mov    bl,0x3
c001b670:	a8 10                	test   al,0x10
c001b672:	74 02                	je     c001b676 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b674:	b3 15                	mov    bl,0x15
c001b676:	a8 20                	test   al,0x20
c001b678:	74 02                	je     c001b67c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b67a:	b3 03                	mov    bl,0x3
c001b67c:	a8 40                	test   al,0x40
c001b67e:	74 02                	je     c001b682 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b680:	b3 16                	mov    bl,0x16
c001b682:	a8 80                	test   al,0x80
c001b684:	74 18                	je     c001b69e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b686:	b3 0d                	mov    bl,0xd
c001b688:	eb 14                	jmp    c001b69e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b68a:	83 ff 03             	cmp    edi,0x3
c001b68d:	74 0d                	je     c001b69c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b68f:	83 ff 04             	cmp    edi,0x4
c001b692:	75 0a                	jne    c001b69e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b694:	b3 08                	mov    bl,0x8
c001b696:	eb 06                	jmp    c001b69e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b698:	b3 13                	mov    bl,0x13
c001b69a:	eb 02                	jmp    c001b69e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b69c:	b3 17                	mov    bl,0x17
c001b69e:	83 c4 1c             	add    esp,0x1c
c001b6a1:	88 d8                	mov    al,bl
c001b6a3:	5b                   	pop    ebx
c001b6a4:	5e                   	pop    esi
c001b6a5:	5f                   	pop    edi
c001b6a6:	5d                   	pop    ebp
c001b6a7:	c3                   	ret    

c001b6a8 <IDE::polling(unsigned char, unsigned int)>:
c001b6a8:	57                   	push   edi
c001b6a9:	56                   	push   esi
c001b6aa:	53                   	push   ebx
c001b6ab:	bb 04 00 00 00       	mov    ebx,0x4
c001b6b0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b6b4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b6b9:	52                   	push   edx
c001b6ba:	6a 0c                	push   0xc
c001b6bc:	56                   	push   esi
c001b6bd:	57                   	push   edi
c001b6be:	e8 c1 f5 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b6c3:	83 c4 10             	add    esp,0x10
c001b6c6:	4b                   	dec    ebx
c001b6c7:	75 f0                	jne    c001b6b9 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b6c9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b6ce:	50                   	push   eax
c001b6cf:	6a 0c                	push   0xc
c001b6d1:	56                   	push   esi
c001b6d2:	57                   	push   edi
c001b6d3:	e8 ac f5 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001b6d8:	83 c4 10             	add    esp,0x10
c001b6db:	a8 01                	test   al,0x1
c001b6dd:	75 17                	jne    c001b6f6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b6df:	a8 20                	test   al,0x20
c001b6e1:	75 0f                	jne    c001b6f2 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b6e3:	4b                   	dec    ebx
c001b6e4:	74 10                	je     c001b6f6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b6e6:	a8 80                	test   al,0x80
c001b6e8:	75 e4                	jne    c001b6ce <IDE::polling(unsigned char, unsigned int)+0x26>
c001b6ea:	a8 08                	test   al,0x8
c001b6ec:	74 e0                	je     c001b6ce <IDE::polling(unsigned char, unsigned int)+0x26>
c001b6ee:	31 c0                	xor    eax,eax
c001b6f0:	eb 06                	jmp    c001b6f8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b6f2:	b0 01                	mov    al,0x1
c001b6f4:	eb 02                	jmp    c001b6f8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b6f6:	b0 02                	mov    al,0x2
c001b6f8:	5b                   	pop    ebx
c001b6f9:	5e                   	pop    esi
c001b6fa:	5f                   	pop    edi
c001b6fb:	c3                   	ret    

c001b6fc <SATABus::close(int, int, void*)>:
c001b6fc:	31 c0                	xor    eax,eax
c001b6fe:	c3                   	ret    
c001b6ff:	90                   	nop

c001b700 <SATABus::detect()>:
c001b700:	c3                   	ret    
c001b701:	90                   	nop

c001b702 <SATABus::SATABus()>:
c001b702:	83 ec 0c             	sub    esp,0xc
c001b705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b709:	83 ec 08             	sub    esp,0x8
c001b70c:	68 60 1a 02 c0       	push   0xc0021a60
c001b711:	50                   	push   eax
c001b712:	e8 e1 09 ff ff       	call   c000c0f8 <HardDiskController::HardDiskController(char const*)>
c001b717:	83 c4 10             	add    esp,0x10
c001b71a:	ba 8c 1a 02 c0       	mov    edx,0xc0021a8c
c001b71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b723:	89 10                	mov    DWORD PTR [eax],edx
c001b725:	83 ec 0c             	sub    esp,0xc
c001b728:	6a 50                	push   0x50
c001b72a:	e8 76 c7 fe ff       	call   c0007ea5 <Phys::allocateContiguousPages(int)>
c001b72f:	83 c4 10             	add    esp,0x10
c001b732:	89 c2                	mov    edx,eax
c001b734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b738:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b73e:	83 ec 0c             	sub    esp,0xc
c001b741:	6a 50                	push   0x50
c001b743:	e8 bd de fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001b748:	83 c4 10             	add    esp,0x10
c001b74b:	89 c2                	mov    edx,eax
c001b74d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b751:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b757:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b75c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b760:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b766:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b76a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b770:	83 ec 0c             	sub    esp,0xc
c001b773:	6a 03                	push   0x3
c001b775:	6a 50                	push   0x50
c001b777:	51                   	push   ecx
c001b778:	52                   	push   edx
c001b779:	50                   	push   eax
c001b77a:	e8 7f e8 fe ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b77f:	83 c4 20             	add    esp,0x20
c001b782:	90                   	nop
c001b783:	83 c4 0c             	add    esp,0xc
c001b786:	c3                   	ret    
c001b787:	90                   	nop

c001b788 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b78c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b78f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b792:	09 c2                	or     edx,eax
c001b794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b798:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b79e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b7a0:	31 c0                	xor    eax,eax
c001b7a2:	c1 e9 08             	shr    ecx,0x8
c001b7a5:	83 e1 0f             	and    ecx,0xf
c001b7a8:	39 c8                	cmp    eax,ecx
c001b7aa:	74 0a                	je     c001b7b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b7ac:	f6 c2 01             	test   dl,0x1
c001b7af:	74 08                	je     c001b7b9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b7b1:	d1 ea                	shr    edx,1
c001b7b3:	40                   	inc    eax
c001b7b4:	eb f2                	jmp    c001b7a8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b7b6:	83 c8 ff             	or     eax,0xffffffff
c001b7b9:	c3                   	ret    

c001b7ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b7ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b7be:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b7c1:	89 c2                	mov    edx,eax
c001b7c3:	c1 ea 08             	shr    edx,0x8
c001b7c6:	83 e2 0f             	and    edx,0xf
c001b7c9:	4a                   	dec    edx
c001b7ca:	75 32                	jne    c001b7fe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b7cc:	83 e0 0f             	and    eax,0xf
c001b7cf:	83 f8 03             	cmp    eax,0x3
c001b7d2:	75 2a                	jne    c001b7fe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b7d4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b7d7:	b8 02 00 00 00       	mov    eax,0x2
c001b7dc:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b7e2:	74 1c                	je     c001b800 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b7e4:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b7ea:	b8 04 00 00 00       	mov    eax,0x4
c001b7ef:	74 0f                	je     c001b800 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b7f1:	31 c0                	xor    eax,eax
c001b7f3:	83 fa 03             	cmp    edx,0x3
c001b7f6:	0f 94 c0             	sete   al
c001b7f9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b7fd:	c3                   	ret    
c001b7fe:	31 c0                	xor    eax,eax
c001b800:	c3                   	ret    
c001b801:	90                   	nop

c001b802 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b802:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b806:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b809:	0f ba e2 0f          	bt     edx,0xf
c001b80d:	72 f7                	jb     c001b806 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b80f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b812:	83 ca 10             	or     edx,0x10
c001b815:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b818:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b81b:	83 ca 01             	or     edx,0x1
c001b81e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b821:	c3                   	ret    

c001b822 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b822:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b826:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b829:	83 e2 fe             	and    edx,0xfffffffe
c001b82c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b82f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b832:	83 e2 ef             	and    edx,0xffffffef
c001b835:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b838:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b83b:	0f ba e2 0e          	bt     edx,0xe
c001b83f:	72 f7                	jb     c001b838 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b841:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b844:	0f ba e2 0f          	bt     edx,0xf
c001b848:	72 ee                	jb     c001b838 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b84a:	c3                   	ret    
c001b84b:	90                   	nop

c001b84c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b84c:	55                   	push   ebp
c001b84d:	57                   	push   edi
c001b84e:	56                   	push   esi
c001b84f:	53                   	push   ebx
c001b850:	83 ec 1c             	sub    esp,0x1c
c001b853:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b857:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b85b:	53                   	push   ebx
c001b85c:	57                   	push   edi
c001b85d:	e8 c0 ff ff ff       	call   c001b822 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b862:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b866:	83 ec 0c             	sub    esp,0xc
c001b869:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b86f:	c1 e5 0a             	shl    ebp,0xa
c001b872:	01 e8                	add    eax,ebp
c001b874:	89 03                	mov    DWORD PTR [ebx],eax
c001b876:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b878:	68 00 04 00 00       	push   0x400
c001b87d:	6a 00                	push   0x0
c001b87f:	50                   	push   eax
c001b880:	e8 6b 4c fe ff       	call   c00004f0 <memset>
c001b885:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b88b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b88f:	83 c4 1c             	add    esp,0x1c
c001b892:	01 e8                	add    eax,ebp
c001b894:	89 03                	mov    DWORD PTR [ebx],eax
c001b896:	c1 e6 08             	shl    esi,0x8
c001b899:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b8a0:	81 c6 00 80 00 00    	add    esi,0x8000
c001b8a6:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b8ac:	01 f0                	add    eax,esi
c001b8ae:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b8b1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b8b4:	68 00 01 00 00       	push   0x100
c001b8b9:	6a 00                	push   0x0
c001b8bb:	50                   	push   eax
c001b8bc:	e8 2f 4c fe ff       	call   c00004f0 <memset>
c001b8c1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b8c7:	31 d2                	xor    edx,edx
c001b8c9:	01 f0                	add    eax,esi
c001b8cb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b8ce:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b8d5:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001b8db:	01 ee                	add    esi,ebp
c001b8dd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b8e1:	83 c4 10             	add    esp,0x10
c001b8e4:	c1 e5 0d             	shl    ebp,0xd
c001b8e7:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001b8ed:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001b8f3:	83 c6 20             	add    esi,0x20
c001b8f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b8fa:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b900:	01 e8                	add    eax,ebp
c001b902:	01 d0                	add    eax,edx
c001b904:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b907:	52                   	push   edx
c001b908:	68 00 01 00 00       	push   0x100
c001b90d:	6a 00                	push   0x0
c001b90f:	50                   	push   eax
c001b910:	e8 db 4b fe ff       	call   c00004f0 <memset>
c001b915:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b91b:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001b922:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b926:	83 c4 10             	add    esp,0x10
c001b929:	01 e8                	add    eax,ebp
c001b92b:	01 d0                	add    eax,edx
c001b92d:	81 c2 00 01 00 00    	add    edx,0x100
c001b933:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b936:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b93c:	75 af                	jne    c001b8ed <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001b93e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b945:	50                   	push   eax
c001b946:	50                   	push   eax
c001b947:	53                   	push   ebx
c001b948:	57                   	push   edi
c001b949:	e8 b4 fe ff ff       	call   c001b802 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b94e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b955:	83 c4 2c             	add    esp,0x2c
c001b958:	5b                   	pop    ebx
c001b959:	5e                   	pop    esi
c001b95a:	5f                   	pop    edi
c001b95b:	5d                   	pop    ebp
c001b95c:	c3                   	ret    
c001b95d:	90                   	nop

c001b95e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b95e:	55                   	push   ebp
c001b95f:	57                   	push   edi
c001b960:	56                   	push   esi
c001b961:	53                   	push   ebx
c001b962:	31 db                	xor    ebx,ebx
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b96b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b96f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b972:	f7 c7 01 00 00 00    	test   edi,0x1
c001b978:	74 7a                	je     c001b9f4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b97a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b97e:	89 d8                	mov    eax,ebx
c001b980:	c1 e0 07             	shl    eax,0x7
c001b983:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b98a:	55                   	push   ebp
c001b98b:	56                   	push   esi
c001b98c:	e8 29 fe ff ff       	call   c001b7ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b991:	5a                   	pop    edx
c001b992:	59                   	pop    ecx
c001b993:	83 f8 01             	cmp    eax,0x1
c001b996:	75 21                	jne    c001b9b9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b998:	50                   	push   eax
c001b999:	53                   	push   ebx
c001b99a:	55                   	push   ebp
c001b99b:	56                   	push   esi
c001b99c:	e8 ab fe ff ff       	call   c001b84c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b9a1:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b9a8:	e8 1e c1 fe ff       	call   c0007acb <malloc>
c001b9ad:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9b0:	89 c5                	mov    ebp,eax
c001b9b2:	e8 c1 10 00 00       	call   c001ca78 <SATA::SATA()>
c001b9b7:	eb 24                	jmp    c001b9dd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b9b9:	83 f8 04             	cmp    eax,0x4
c001b9bc:	75 36                	jne    c001b9f4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b9be:	51                   	push   ecx
c001b9bf:	53                   	push   ebx
c001b9c0:	55                   	push   ebp
c001b9c1:	56                   	push   esi
c001b9c2:	e8 85 fe ff ff       	call   c001b84c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b9c7:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b9ce:	e8 f8 c0 fe ff       	call   c0007acb <malloc>
c001b9d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9d6:	89 c5                	mov    ebp,eax
c001b9d8:	e8 f5 17 00 00       	call   c001d1d2 <SATAPI::SATAPI()>
c001b9dd:	58                   	pop    eax
c001b9de:	5a                   	pop    edx
c001b9df:	55                   	push   ebp
c001b9e0:	56                   	push   esi
c001b9e1:	e8 ce 03 ff ff       	call   c000bdb4 <Device::addChild(Device*)>
c001b9e6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b9e9:	56                   	push   esi
c001b9ea:	6a 00                	push   0x0
c001b9ec:	53                   	push   ebx
c001b9ed:	55                   	push   ebp
c001b9ee:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9f1:	83 c4 20             	add    esp,0x20
c001b9f4:	d1 ef                	shr    edi,1
c001b9f6:	43                   	inc    ebx
c001b9f7:	83 fb 20             	cmp    ebx,0x20
c001b9fa:	0f 85 72 ff ff ff    	jne    c001b972 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ba00:	83 c4 0c             	add    esp,0xc
c001ba03:	5b                   	pop    ebx
c001ba04:	5e                   	pop    esi
c001ba05:	5f                   	pop    edi
c001ba06:	5d                   	pop    ebp
c001ba07:	c3                   	ret    

c001ba08 <SATABus::open(int, int, void*)>:
c001ba08:	83 ec 14             	sub    esp,0x14
c001ba0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba0f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001ba15:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ba1b:	52                   	push   edx
c001ba1c:	50                   	push   eax
c001ba1d:	e8 3c ff ff ff       	call   c001b95e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ba22:	31 c0                	xor    eax,eax
c001ba24:	83 c4 1c             	add    esp,0x1c
c001ba27:	c3                   	ret    

c001ba28 <ATA::close(int, int, void*)>:
c001ba28:	83 ec 0c             	sub    esp,0xc
c001ba2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ba35:	85 c0                	test   eax,eax
c001ba37:	74 0c                	je     c001ba45 <ATA::close(int, int, void*)+0x1d>
c001ba39:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba3b:	83 ec 0c             	sub    esp,0xc
c001ba3e:	50                   	push   eax
c001ba3f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ba42:	83 c4 10             	add    esp,0x10
c001ba45:	31 c0                	xor    eax,eax
c001ba47:	83 c4 0c             	add    esp,0xc
c001ba4a:	c3                   	ret    
c001ba4b:	90                   	nop

c001ba4c <ATA::powerSaving(PowerSavingLevel)>:
c001ba4c:	c3                   	ret    
c001ba4d:	90                   	nop

c001ba4e <ATA::ATA()>:
c001ba4e:	83 ec 0c             	sub    esp,0xc
c001ba51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba55:	83 ec 04             	sub    esp,0x4
c001ba58:	68 00 02 00 00       	push   0x200
c001ba5d:	68 59 1b 02 c0       	push   0xc0021b59
c001ba62:	50                   	push   eax
c001ba63:	e8 1a 07 ff ff       	call   c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ba68:	83 c4 10             	add    esp,0x10
c001ba6b:	ba cc 1a 02 c0       	mov    edx,0xc0021acc
c001ba70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba74:	89 10                	mov    DWORD PTR [eax],edx
c001ba76:	90                   	nop
c001ba77:	83 c4 0c             	add    esp,0xc
c001ba7a:	c3                   	ret    
c001ba7b:	90                   	nop

c001ba7c <ATA::flush(bool)>:
c001ba7c:	53                   	push   ebx
c001ba7d:	83 ec 08             	sub    esp,0x8
c001ba80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ba85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba89:	83 f8 01             	cmp    eax,0x1
c001ba8c:	19 c0                	sbb    eax,eax
c001ba8e:	83 e0 fd             	and    eax,0xfffffffd
c001ba91:	05 ea 00 00 00       	add    eax,0xea
c001ba96:	50                   	push   eax
c001ba97:	6a 07                	push   0x7
c001ba99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001baa0:	50                   	push   eax
c001baa1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001baa7:	e8 18 f1 ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001baac:	83 c4 0c             	add    esp,0xc
c001baaf:	6a 00                	push   0x0
c001bab1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bab8:	50                   	push   eax
c001bab9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001babf:	e8 e4 fb ff ff       	call   c001b6a8 <IDE::polling(unsigned char, unsigned int)>
c001bac4:	83 c4 18             	add    esp,0x18
c001bac7:	5b                   	pop    ebx
c001bac8:	c3                   	ret    
c001bac9:	90                   	nop

c001baca <ATA::readyForCommand()>:
c001baca:	56                   	push   esi
c001bacb:	53                   	push   ebx
c001bacc:	53                   	push   ebx
c001bacd:	31 db                	xor    ebx,ebx
c001bacf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bad3:	51                   	push   ecx
c001bad4:	6a 0c                	push   0xc
c001bad6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001badd:	50                   	push   eax
c001bade:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bae4:	e8 9b f1 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001bae9:	83 c4 10             	add    esp,0x10
c001baec:	a8 88                	test   al,0x88
c001baee:	74 1f                	je     c001bb0f <ATA::readyForCommand()+0x45>
c001baf0:	43                   	inc    ebx
c001baf1:	83 fb 63             	cmp    ebx,0x63
c001baf4:	7e dd                	jle    c001bad3 <ATA::readyForCommand()+0x9>
c001baf6:	83 ec 0c             	sub    esp,0xc
c001baf9:	6a 0a                	push   0xa
c001bafb:	e8 ec 97 ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001bb00:	83 c4 10             	add    esp,0x10
c001bb03:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bb09:	75 c8                	jne    c001bad3 <ATA::readyForCommand()+0x9>
c001bb0b:	31 c0                	xor    eax,eax
c001bb0d:	eb 02                	jmp    c001bb11 <ATA::readyForCommand()+0x47>
c001bb0f:	b0 01                	mov    al,0x1
c001bb11:	5a                   	pop    edx
c001bb12:	5b                   	pop    ebx
c001bb13:	5e                   	pop    esi
c001bb14:	c3                   	ret    
c001bb15:	90                   	nop

c001bb16 <ATA::access(unsigned long long, int, void*, bool)>:
c001bb16:	55                   	push   ebp
c001bb17:	57                   	push   edi
c001bb18:	56                   	push   esi
c001bb19:	53                   	push   ebx
c001bb1a:	83 ec 2c             	sub    esp,0x2c
c001bb1d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bb21:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bb25:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bb29:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bb2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb31:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bb35:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001bb39:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bb3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb43:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bb49:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bb4d:	c1 e0 06             	shl    eax,0x6
c001bb50:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bb58:	74 5b                	je     c001bbb5 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001bb5a:	89 fa                	mov    edx,edi
c001bb5c:	89 f0                	mov    eax,esi
c001bb5e:	c1 ea 1c             	shr    edx,0x1c
c001bb61:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001bb65:	89 d1                	mov    ecx,edx
c001bb67:	09 c1                	or     ecx,eax
c001bb69:	74 25                	je     c001bb90 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bb6b:	31 ed                	xor    ebp,ebp
c001bb6d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bb74:	89 fa                	mov    edx,edi
c001bb76:	89 f0                	mov    eax,esi
c001bb78:	0f ad d0             	shrd   eax,edx,cl
c001bb7b:	d3 ea                	shr    edx,cl
c001bb7d:	f6 c1 20             	test   cl,0x20
c001bb80:	74 02                	je     c001bb84 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bb82:	89 d0                	mov    eax,edx
c001bb84:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bb88:	45                   	inc    ebp
c001bb89:	83 fd 06             	cmp    ebp,0x6
c001bb8c:	75 df                	jne    c001bb6d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bb8e:	eb 71                	jmp    c001bc01 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001bb90:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bb95:	89 f0                	mov    eax,esi
c001bb97:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bb9e:	0f ac f8 10          	shrd   eax,edi,0x10
c001bba2:	bf 01 00 00 00       	mov    edi,0x1
c001bba7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bbab:	c1 ee 18             	shr    esi,0x18
c001bbae:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bbb3:	eb 53                	jmp    c001bc08 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bbb5:	6a 00                	push   0x0
c001bbb7:	6a 3f                	push   0x3f
c001bbb9:	57                   	push   edi
c001bbba:	56                   	push   esi
c001bbbb:	e8 d0 2a 00 00       	call   c001e690 <__umoddi3>
c001bbc0:	83 c4 10             	add    esp,0x10
c001bbc3:	40                   	inc    eax
c001bbc4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bbc8:	6a 00                	push   0x0
c001bbca:	68 f0 03 00 00       	push   0x3f0
c001bbcf:	57                   	push   edi
c001bbd0:	56                   	push   esi
c001bbd1:	e8 ba 29 00 00       	call   c001e590 <__udivdi3>
c001bbd6:	83 c4 10             	add    esp,0x10
c001bbd9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bbde:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bbe5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bbea:	6a 00                	push   0x0
c001bbec:	6a 3f                	push   0x3f
c001bbee:	57                   	push   edi
c001bbef:	31 ff                	xor    edi,edi
c001bbf1:	56                   	push   esi
c001bbf2:	e8 99 29 00 00       	call   c001e590 <__udivdi3>
c001bbf7:	83 c4 10             	add    esp,0x10
c001bbfa:	83 e0 0f             	and    eax,0xf
c001bbfd:	89 c6                	mov    esi,eax
c001bbff:	eb 07                	jmp    c001bc08 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bc01:	31 f6                	xor    esi,esi
c001bc03:	bf 02 00 00 00       	mov    edi,0x2
c001bc08:	50                   	push   eax
c001bc09:	6a 00                	push   0x0
c001bc0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc12:	50                   	push   eax
c001bc13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bc17:	e8 b6 f1 ff ff       	call   c001add2 <IDE::enableIRQs(unsigned char, bool)>
c001bc1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc1f:	e8 a6 fe ff ff       	call   c001baca <ATA::readyForCommand()>
c001bc24:	83 c4 10             	add    esp,0x10
c001bc27:	84 c0                	test   al,al
c001bc29:	75 0a                	jne    c001bc35 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001bc2b:	be 01 00 00 00       	mov    esi,0x1
c001bc30:	e9 9b 02 00 00       	jmp    c001bed0 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bc35:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bc3b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bc41:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bc48:	c1 e0 04             	shl    eax,0x4
c001bc4b:	09 c6                	or     esi,eax
c001bc4d:	f7 c7 03 00 00 00    	test   edi,0x3
c001bc53:	75 05                	jne    c001bc5a <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001bc55:	83 ce a0             	or     esi,0xffffffa0
c001bc58:	eb 03                	jmp    c001bc5d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bc5a:	83 ce e0             	or     esi,0xffffffe0
c001bc5d:	89 f0                	mov    eax,esi
c001bc5f:	0f b6 f0             	movzx  esi,al
c001bc62:	56                   	push   esi
c001bc63:	6a 06                	push   0x6
c001bc65:	51                   	push   ecx
c001bc66:	52                   	push   edx
c001bc67:	e8 58 ef ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc6c:	83 c4 10             	add    esp,0x10
c001bc6f:	6a 00                	push   0x0
c001bc71:	6a 01                	push   0x1
c001bc73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc7a:	50                   	push   eax
c001bc7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bc81:	e8 3e ef ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc86:	89 f8                	mov    eax,edi
c001bc88:	83 c4 10             	add    esp,0x10
c001bc8b:	0f b6 f0             	movzx  esi,al
c001bc8e:	83 fe 02             	cmp    esi,0x2
c001bc91:	75 6e                	jne    c001bd01 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001bc93:	6a 00                	push   0x0
c001bc95:	6a 08                	push   0x8
c001bc97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc9e:	50                   	push   eax
c001bc9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bca5:	e8 1a ef ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcaa:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bcaf:	50                   	push   eax
c001bcb0:	6a 09                	push   0x9
c001bcb2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcb9:	50                   	push   eax
c001bcba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcc0:	e8 ff ee ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcc5:	83 c4 20             	add    esp,0x20
c001bcc8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bccd:	50                   	push   eax
c001bcce:	6a 0a                	push   0xa
c001bcd0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcd7:	50                   	push   eax
c001bcd8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcde:	e8 e1 ee ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bce3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bce8:	50                   	push   eax
c001bce9:	6a 0b                	push   0xb
c001bceb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcf2:	50                   	push   eax
c001bcf3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcf9:	e8 c6 ee ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcfe:	83 c4 20             	add    esp,0x20
c001bd01:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bd06:	50                   	push   eax
c001bd07:	6a 02                	push   0x2
c001bd09:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd10:	50                   	push   eax
c001bd11:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd17:	e8 a8 ee ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd1c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bd21:	50                   	push   eax
c001bd22:	6a 03                	push   0x3
c001bd24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd2b:	50                   	push   eax
c001bd2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd32:	e8 8d ee ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd37:	83 c4 20             	add    esp,0x20
c001bd3a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bd3f:	50                   	push   eax
c001bd40:	6a 04                	push   0x4
c001bd42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd49:	50                   	push   eax
c001bd4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd50:	e8 6f ee ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd5a:	50                   	push   eax
c001bd5b:	6a 05                	push   0x5
c001bd5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd64:	50                   	push   eax
c001bd65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd6b:	e8 54 ee ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd70:	83 c4 20             	add    esp,0x20
c001bd73:	83 fe 02             	cmp    esi,0x2
c001bd76:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001bd7b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001bd80:	85 c9                	test   ecx,ecx
c001bd82:	74 07                	je     c001bd8b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001bd84:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bd89:	75 47                	jne    c001bdd2 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001bd8b:	89 f8                	mov    eax,edi
c001bd8d:	0f b6 f8             	movzx  edi,al
c001bd90:	31 c0                	xor    eax,eax
c001bd92:	83 ff 02             	cmp    edi,0x2
c001bd95:	0f 95 c0             	setne  al
c001bd98:	89 c6                	mov    esi,eax
c001bd9a:	74 0c                	je     c001bda8 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001bd9c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bda1:	b8 30 00 00 00       	mov    eax,0x30
c001bda6:	75 2f                	jne    c001bdd7 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001bda8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bdac:	83 f2 01             	xor    edx,0x1
c001bdaf:	85 c9                	test   ecx,ecx
c001bdb1:	74 09                	je     c001bdbc <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001bdb3:	84 d2                	test   dl,dl
c001bdb5:	b8 24 00 00 00       	mov    eax,0x24
c001bdba:	75 1b                	jne    c001bdd7 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001bdbc:	85 f6                	test   esi,esi
c001bdbe:	0f 84 67 fe ff ff    	je     c001bc2b <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001bdc4:	84 d2                	test   dl,dl
c001bdc6:	b8 20 00 00 00       	mov    eax,0x20
c001bdcb:	75 0a                	jne    c001bdd7 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001bdcd:	e9 59 fe ff ff       	jmp    c001bc2b <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001bdd2:	b8 34 00 00 00       	mov    eax,0x34
c001bdd7:	50                   	push   eax
c001bdd8:	6a 07                	push   0x7
c001bdda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bde1:	50                   	push   eax
c001bde2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bde8:	e8 d7 ed ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bded:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001bdf1:	83 c4 10             	add    esp,0x10
c001bdf4:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001bdf9:	85 f6                	test   esi,esi
c001bdfb:	0f 84 b5 00 00 00    	je     c001beb6 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001be01:	50                   	push   eax
c001be02:	6a 01                	push   0x1
c001be04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be0b:	50                   	push   eax
c001be0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be12:	e8 91 f8 ff ff       	call   c001b6a8 <IDE::polling(unsigned char, unsigned int)>
c001be17:	83 c4 10             	add    esp,0x10
c001be1a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001be20:	0f b6 c0             	movzx  eax,al
c001be23:	85 c0                	test   eax,eax
c001be25:	74 1f                	je     c001be46 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001be27:	50                   	push   eax
c001be28:	89 c6                	mov    esi,eax
c001be2a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001be31:	0f b6 d2             	movzx  edx,dl
c001be34:	50                   	push   eax
c001be35:	52                   	push   edx
c001be36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be3c:	e8 ad f7 ff ff       	call   c001b5ee <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001be41:	e9 87 00 00 00       	jmp    c001becd <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001be46:	85 ed                	test   ebp,ebp
c001be48:	74 3b                	je     c001be85 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001be4a:	31 ff                	xor    edi,edi
c001be4c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be50:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001be54:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001be59:	50                   	push   eax
c001be5a:	50                   	push   eax
c001be5b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be62:	50                   	push   eax
c001be63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be69:	e8 44 ed ff ff       	call   c001abb2 <IDE::getBase(unsigned char)>
c001be6e:	89 c2                	mov    edx,eax
c001be70:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001be75:	66 ef                	out    dx,ax
c001be77:	47                   	inc    edi
c001be78:	83 c4 10             	add    esp,0x10
c001be7b:	81 ff 00 01 00 00    	cmp    edi,0x100
c001be81:	75 c9                	jne    c001be4c <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001be83:	eb 23                	jmp    c001bea8 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001be85:	51                   	push   ecx
c001be86:	0f b6 d2             	movzx  edx,dl
c001be89:	51                   	push   ecx
c001be8a:	52                   	push   edx
c001be8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be91:	e8 1c ed ff ff       	call   c001abb2 <IDE::getBase(unsigned char)>
c001be96:	b9 00 01 00 00       	mov    ecx,0x100
c001be9b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001be9f:	89 c2                	mov    edx,eax
c001bea1:	fc                   	cld    
c001bea2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bea5:	83 c4 10             	add    esp,0x10
c001bea8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001beb0:	4e                   	dec    esi
c001beb1:	e9 43 ff ff ff       	jmp    c001bdf9 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001beb6:	31 f6                	xor    esi,esi
c001beb8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bebd:	74 11                	je     c001bed0 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bebf:	50                   	push   eax
c001bec0:	50                   	push   eax
c001bec1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bec6:	50                   	push   eax
c001bec7:	53                   	push   ebx
c001bec8:	e8 af fb ff ff       	call   c001ba7c <ATA::flush(bool)>
c001becd:	83 c4 10             	add    esp,0x10
c001bed0:	83 c4 2c             	add    esp,0x2c
c001bed3:	89 f0                	mov    eax,esi
c001bed5:	5b                   	pop    ebx
c001bed6:	5e                   	pop    esi
c001bed7:	5f                   	pop    edi
c001bed8:	5d                   	pop    ebp
c001bed9:	c3                   	ret    

c001beda <ATA::detectCHS()>:
c001beda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bede:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bee4:	c1 e0 06             	shl    eax,0x6
c001bee7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001beed:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bef7:	c7 44 24 04 b0 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ab0
c001beff:	e9 d1 48 ff ff       	jmp    c00107d5 <KePanic(char const*)>

c001bf04 <ATA::open(int, int, void*)>:
c001bf04:	53                   	push   ebx
c001bf05:	83 ec 08             	sub    esp,0x8
c001bf08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf14:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bf1a:	c1 e0 06             	shl    eax,0x6
c001bf1d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bf23:	01 d0                	add    eax,edx
c001bf25:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bf2c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bf32:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bf39:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bf43:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bf4a:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bf50:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bf57:	75 0c                	jne    c001bf65 <ATA::open(int, int, void*)+0x61>
c001bf59:	83 ec 0c             	sub    esp,0xc
c001bf5c:	53                   	push   ebx
c001bf5d:	e8 78 ff ff ff       	call   c001beda <ATA::detectCHS()>
c001bf62:	83 c4 10             	add    esp,0x10
c001bf65:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bf6b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bf71:	c1 e0 06             	shl    eax,0x6
c001bf74:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001bf7b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bf85:	d1 e8                	shr    eax,1
c001bf87:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001bf8d:	6a 04                	push   0x4
c001bf8f:	6a 0c                	push   0xc
c001bf91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf98:	50                   	push   eax
c001bf99:	52                   	push   edx
c001bf9a:	e8 25 ec ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf9f:	90                   	nop
c001bfa0:	90                   	nop
c001bfa1:	6a 00                	push   0x0
c001bfa3:	6a 0c                	push   0xc
c001bfa5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bfac:	50                   	push   eax
c001bfad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bfb3:	e8 0c ec ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfb8:	83 c4 14             	add    esp,0x14
c001bfbb:	53                   	push   ebx
c001bfbc:	e8 29 02 ff ff       	call   c000c1ea <PhysicalDisk::startCache()>
c001bfc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfc4:	e8 6d 14 ff ff       	call   c000d436 <createPartitionsForDisk(PhysicalDisk*)>
c001bfc9:	83 c4 18             	add    esp,0x18
c001bfcc:	31 c0                	xor    eax,eax
c001bfce:	5b                   	pop    ebx
c001bfcf:	c3                   	ret    

c001bfd0 <combineCharAndColour(char, unsigned char)>:
c001bfd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bfd5:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001bfdb:	c1 e0 08             	shl    eax,0x8
c001bfde:	09 d0                	or     eax,edx
c001bfe0:	c3                   	ret    

c001bfe1 <combineColours(unsigned char, unsigned char)>:
c001bfe1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bfe6:	c1 e0 04             	shl    eax,0x4
c001bfe9:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001bfed:	c3                   	ret    

c001bfee <ATA::read(unsigned long long, int, void*)>:
c001bfee:	55                   	push   ebp
c001bfef:	57                   	push   edi
c001bff0:	56                   	push   esi
c001bff1:	be 04 00 00 00       	mov    esi,0x4
c001bff6:	53                   	push   ebx
c001bff7:	83 ec 0c             	sub    esp,0xc
c001bffa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bffe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c002:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c006:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c00a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c00d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c013:	0f 87 a1 01 00 00    	ja     c001c1ba <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c019:	85 c9                	test   ecx,ecx
c001c01b:	be 06 00 00 00       	mov    esi,0x6
c001c020:	0f 84 94 01 00 00    	je     c001c1ba <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c026:	55                   	push   ebp
c001c027:	55                   	push   ebp
c001c028:	6a 00                	push   0x0
c001c02a:	51                   	push   ecx
c001c02b:	53                   	push   ebx
c001c02c:	52                   	push   edx
c001c02d:	50                   	push   eax
c001c02e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c032:	e8 df fa ff ff       	call   c001bb16 <ATA::access(unsigned long long, int, void*, bool)>
c001c037:	83 c4 20             	add    esp,0x20
c001c03a:	85 c0                	test   eax,eax
c001c03c:	89 c6                	mov    esi,eax
c001c03e:	0f 85 71 01 00 00    	jne    c001c1b5 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c044:	50                   	push   eax
c001c045:	bd 10 27 00 00       	mov    ebp,0x2710
c001c04a:	50                   	push   eax
c001c04b:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c051:	6a 0f                	push   0xf
c001c053:	6a 00                	push   0x0
c001c055:	89 da                	mov    edx,ebx
c001c057:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c05d:	e8 7f ff ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001c062:	59                   	pop    ecx
c001c063:	b9 0a 00 00 00       	mov    ecx,0xa
c001c068:	5b                   	pop    ebx
c001c069:	0f b6 d8             	movzx  ebx,al
c001c06c:	89 d0                	mov    eax,edx
c001c06e:	53                   	push   ebx
c001c06f:	99                   	cdq    
c001c070:	f7 fd                	idiv   ebp
c001c072:	99                   	cdq    
c001c073:	f7 f9                	idiv   ecx
c001c075:	83 c2 30             	add    edx,0x30
c001c078:	0f b6 d2             	movzx  edx,dl
c001c07b:	52                   	push   edx
c001c07c:	e8 4f ff ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c081:	5f                   	pop    edi
c001c082:	bf e8 03 00 00       	mov    edi,0x3e8
c001c087:	5a                   	pop    edx
c001c088:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c08e:	53                   	push   ebx
c001c08f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c094:	99                   	cdq    
c001c095:	f7 ff                	idiv   edi
c001c097:	99                   	cdq    
c001c098:	f7 f9                	idiv   ecx
c001c09a:	8d 42 30             	lea    eax,[edx+0x30]
c001c09d:	0f b6 c0             	movzx  eax,al
c001c0a0:	50                   	push   eax
c001c0a1:	e8 2a ff ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c0a6:	5f                   	pop    edi
c001c0a7:	bf 64 00 00 00       	mov    edi,0x64
c001c0ac:	5a                   	pop    edx
c001c0ad:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c0b3:	53                   	push   ebx
c001c0b4:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0b9:	99                   	cdq    
c001c0ba:	f7 ff                	idiv   edi
c001c0bc:	99                   	cdq    
c001c0bd:	f7 f9                	idiv   ecx
c001c0bf:	8d 42 30             	lea    eax,[edx+0x30]
c001c0c2:	0f b6 c0             	movzx  eax,al
c001c0c5:	50                   	push   eax
c001c0c6:	e8 05 ff ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c0cb:	5a                   	pop    edx
c001c0cc:	5a                   	pop    edx
c001c0cd:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c0d3:	53                   	push   ebx
c001c0d4:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0d9:	99                   	cdq    
c001c0da:	f7 f9                	idiv   ecx
c001c0dc:	99                   	cdq    
c001c0dd:	f7 f9                	idiv   ecx
c001c0df:	8d 42 30             	lea    eax,[edx+0x30]
c001c0e2:	0f b6 c0             	movzx  eax,al
c001c0e5:	50                   	push   eax
c001c0e6:	e8 e5 fe ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c0eb:	5a                   	pop    edx
c001c0ec:	5a                   	pop    edx
c001c0ed:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c0f3:	53                   	push   ebx
c001c0f4:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0f9:	99                   	cdq    
c001c0fa:	f7 f9                	idiv   ecx
c001c0fc:	83 c2 30             	add    edx,0x30
c001c0ff:	0f b6 d2             	movzx  edx,dl
c001c102:	52                   	push   edx
c001c103:	e8 c8 fe ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c108:	5a                   	pop    edx
c001c109:	5a                   	pop    edx
c001c10a:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c110:	53                   	push   ebx
c001c111:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c116:	99                   	cdq    
c001c117:	f7 fd                	idiv   ebp
c001c119:	99                   	cdq    
c001c11a:	f7 f9                	idiv   ecx
c001c11c:	8d 42 30             	lea    eax,[edx+0x30]
c001c11f:	0f b6 c0             	movzx  eax,al
c001c122:	50                   	push   eax
c001c123:	e8 a8 fe ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c128:	5d                   	pop    ebp
c001c129:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c12e:	5a                   	pop    edx
c001c12f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c135:	53                   	push   ebx
c001c136:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c13b:	99                   	cdq    
c001c13c:	f7 fd                	idiv   ebp
c001c13e:	99                   	cdq    
c001c13f:	f7 f9                	idiv   ecx
c001c141:	8d 42 30             	lea    eax,[edx+0x30]
c001c144:	0f b6 c0             	movzx  eax,al
c001c147:	50                   	push   eax
c001c148:	e8 83 fe ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c14d:	5d                   	pop    ebp
c001c14e:	5a                   	pop    edx
c001c14f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c155:	53                   	push   ebx
c001c156:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c15b:	99                   	cdq    
c001c15c:	f7 ff                	idiv   edi
c001c15e:	99                   	cdq    
c001c15f:	f7 f9                	idiv   ecx
c001c161:	8d 42 30             	lea    eax,[edx+0x30]
c001c164:	0f b6 c0             	movzx  eax,al
c001c167:	50                   	push   eax
c001c168:	e8 63 fe ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c16d:	5f                   	pop    edi
c001c16e:	5d                   	pop    ebp
c001c16f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c175:	53                   	push   ebx
c001c176:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c17b:	99                   	cdq    
c001c17c:	f7 f9                	idiv   ecx
c001c17e:	99                   	cdq    
c001c17f:	f7 f9                	idiv   ecx
c001c181:	8d 42 30             	lea    eax,[edx+0x30]
c001c184:	0f b6 c0             	movzx  eax,al
c001c187:	50                   	push   eax
c001c188:	e8 43 fe ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c18d:	5a                   	pop    edx
c001c18e:	5f                   	pop    edi
c001c18f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c195:	53                   	push   ebx
c001c196:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c19b:	99                   	cdq    
c001c19c:	f7 f9                	idiv   ecx
c001c19e:	83 c2 30             	add    edx,0x30
c001c1a1:	0f b6 d2             	movzx  edx,dl
c001c1a4:	52                   	push   edx
c001c1a5:	e8 26 fe ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c1aa:	83 c4 10             	add    esp,0x10
c001c1ad:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c1b3:	eb 05                	jmp    c001c1ba <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c1b5:	be 01 00 00 00       	mov    esi,0x1
c001c1ba:	83 c4 0c             	add    esp,0xc
c001c1bd:	89 f0                	mov    eax,esi
c001c1bf:	5b                   	pop    ebx
c001c1c0:	5e                   	pop    esi
c001c1c1:	5f                   	pop    edi
c001c1c2:	5d                   	pop    ebp
c001c1c3:	c3                   	ret    

c001c1c4 <ATA::write(unsigned long long, int, void*)>:
c001c1c4:	55                   	push   ebp
c001c1c5:	57                   	push   edi
c001c1c6:	56                   	push   esi
c001c1c7:	be 04 00 00 00       	mov    esi,0x4
c001c1cc:	53                   	push   ebx
c001c1cd:	83 ec 0c             	sub    esp,0xc
c001c1d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c1d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c1d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c1dc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c1e0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c1e3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c1e9:	0f 87 9c 01 00 00    	ja     c001c38b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c1ef:	85 c9                	test   ecx,ecx
c001c1f1:	be 06 00 00 00       	mov    esi,0x6
c001c1f6:	0f 84 8f 01 00 00    	je     c001c38b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c1fc:	55                   	push   ebp
c001c1fd:	55                   	push   ebp
c001c1fe:	6a 01                	push   0x1
c001c200:	51                   	push   ecx
c001c201:	53                   	push   ebx
c001c202:	52                   	push   edx
c001c203:	50                   	push   eax
c001c204:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c208:	e8 09 f9 ff ff       	call   c001bb16 <ATA::access(unsigned long long, int, void*, bool)>
c001c20d:	83 c4 20             	add    esp,0x20
c001c210:	85 c0                	test   eax,eax
c001c212:	89 c6                	mov    esi,eax
c001c214:	0f 85 6c 01 00 00    	jne    c001c386 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c21a:	50                   	push   eax
c001c21b:	bd 10 27 00 00       	mov    ebp,0x2710
c001c220:	50                   	push   eax
c001c221:	6a 0f                	push   0xf
c001c223:	6a 00                	push   0x0
c001c225:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c22b:	e8 b1 fd ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001c230:	5a                   	pop    edx
c001c231:	59                   	pop    ecx
c001c232:	b9 0a 00 00 00       	mov    ecx,0xa
c001c237:	0f b6 d8             	movzx  ebx,al
c001c23a:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c23f:	53                   	push   ebx
c001c240:	99                   	cdq    
c001c241:	f7 fd                	idiv   ebp
c001c243:	99                   	cdq    
c001c244:	f7 f9                	idiv   ecx
c001c246:	8d 42 30             	lea    eax,[edx+0x30]
c001c249:	0f b6 c0             	movzx  eax,al
c001c24c:	50                   	push   eax
c001c24d:	e8 7e fd ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c252:	5f                   	pop    edi
c001c253:	bf e8 03 00 00       	mov    edi,0x3e8
c001c258:	5a                   	pop    edx
c001c259:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c25f:	53                   	push   ebx
c001c260:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c265:	99                   	cdq    
c001c266:	f7 ff                	idiv   edi
c001c268:	99                   	cdq    
c001c269:	f7 f9                	idiv   ecx
c001c26b:	8d 42 30             	lea    eax,[edx+0x30]
c001c26e:	0f b6 c0             	movzx  eax,al
c001c271:	50                   	push   eax
c001c272:	e8 59 fd ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c277:	5f                   	pop    edi
c001c278:	bf 64 00 00 00       	mov    edi,0x64
c001c27d:	5a                   	pop    edx
c001c27e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c284:	53                   	push   ebx
c001c285:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c28a:	99                   	cdq    
c001c28b:	f7 ff                	idiv   edi
c001c28d:	99                   	cdq    
c001c28e:	f7 f9                	idiv   ecx
c001c290:	8d 42 30             	lea    eax,[edx+0x30]
c001c293:	0f b6 c0             	movzx  eax,al
c001c296:	50                   	push   eax
c001c297:	e8 34 fd ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c29c:	5a                   	pop    edx
c001c29d:	5a                   	pop    edx
c001c29e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c2a4:	53                   	push   ebx
c001c2a5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2aa:	99                   	cdq    
c001c2ab:	f7 f9                	idiv   ecx
c001c2ad:	99                   	cdq    
c001c2ae:	f7 f9                	idiv   ecx
c001c2b0:	8d 42 30             	lea    eax,[edx+0x30]
c001c2b3:	0f b6 c0             	movzx  eax,al
c001c2b6:	50                   	push   eax
c001c2b7:	e8 14 fd ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c2bc:	5a                   	pop    edx
c001c2bd:	5a                   	pop    edx
c001c2be:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c2c4:	53                   	push   ebx
c001c2c5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2ca:	99                   	cdq    
c001c2cb:	f7 f9                	idiv   ecx
c001c2cd:	83 c2 30             	add    edx,0x30
c001c2d0:	0f b6 d2             	movzx  edx,dl
c001c2d3:	52                   	push   edx
c001c2d4:	e8 f7 fc ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c2d9:	5a                   	pop    edx
c001c2da:	5a                   	pop    edx
c001c2db:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c2e1:	53                   	push   ebx
c001c2e2:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c2e7:	99                   	cdq    
c001c2e8:	f7 fd                	idiv   ebp
c001c2ea:	99                   	cdq    
c001c2eb:	f7 f9                	idiv   ecx
c001c2ed:	8d 42 30             	lea    eax,[edx+0x30]
c001c2f0:	0f b6 c0             	movzx  eax,al
c001c2f3:	50                   	push   eax
c001c2f4:	e8 d7 fc ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c2f9:	5d                   	pop    ebp
c001c2fa:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c2ff:	5a                   	pop    edx
c001c300:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c306:	53                   	push   ebx
c001c307:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c30c:	99                   	cdq    
c001c30d:	f7 fd                	idiv   ebp
c001c30f:	99                   	cdq    
c001c310:	f7 f9                	idiv   ecx
c001c312:	8d 42 30             	lea    eax,[edx+0x30]
c001c315:	0f b6 c0             	movzx  eax,al
c001c318:	50                   	push   eax
c001c319:	e8 b2 fc ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c31e:	5d                   	pop    ebp
c001c31f:	5a                   	pop    edx
c001c320:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c326:	53                   	push   ebx
c001c327:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c32c:	99                   	cdq    
c001c32d:	f7 ff                	idiv   edi
c001c32f:	99                   	cdq    
c001c330:	f7 f9                	idiv   ecx
c001c332:	8d 42 30             	lea    eax,[edx+0x30]
c001c335:	0f b6 c0             	movzx  eax,al
c001c338:	50                   	push   eax
c001c339:	e8 92 fc ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c33e:	5f                   	pop    edi
c001c33f:	5d                   	pop    ebp
c001c340:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c346:	53                   	push   ebx
c001c347:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c34c:	99                   	cdq    
c001c34d:	f7 f9                	idiv   ecx
c001c34f:	99                   	cdq    
c001c350:	f7 f9                	idiv   ecx
c001c352:	8d 42 30             	lea    eax,[edx+0x30]
c001c355:	0f b6 c0             	movzx  eax,al
c001c358:	50                   	push   eax
c001c359:	e8 72 fc ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c35e:	5a                   	pop    edx
c001c35f:	5f                   	pop    edi
c001c360:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c366:	53                   	push   ebx
c001c367:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c36c:	99                   	cdq    
c001c36d:	f7 f9                	idiv   ecx
c001c36f:	83 c2 30             	add    edx,0x30
c001c372:	0f b6 d2             	movzx  edx,dl
c001c375:	52                   	push   edx
c001c376:	e8 55 fc ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001c37b:	83 c4 10             	add    esp,0x10
c001c37e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c384:	eb 05                	jmp    c001c38b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c386:	be 01 00 00 00       	mov    esi,0x1
c001c38b:	83 c4 0c             	add    esp,0xc
c001c38e:	89 f0                	mov    eax,esi
c001c390:	5b                   	pop    ebx
c001c391:	5e                   	pop    esi
c001c392:	5f                   	pop    edi
c001c393:	5d                   	pop    ebp
c001c394:	c3                   	ret    
c001c395:	90                   	nop

c001c396 <ATAPI::write(unsigned long long, int, void*)>:
c001c396:	b8 03 00 00 00       	mov    eax,0x3
c001c39b:	c3                   	ret    

c001c39c <ATAPI::close(int, int, void*)>:
c001c39c:	83 ec 0c             	sub    esp,0xc
c001c39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c3a9:	85 c0                	test   eax,eax
c001c3ab:	74 0c                	je     c001c3b9 <ATAPI::close(int, int, void*)+0x1d>
c001c3ad:	8b 10                	mov    edx,DWORD PTR [eax]
c001c3af:	83 ec 0c             	sub    esp,0xc
c001c3b2:	50                   	push   eax
c001c3b3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c3b6:	83 c4 10             	add    esp,0x10
c001c3b9:	31 c0                	xor    eax,eax
c001c3bb:	83 c4 0c             	add    esp,0xc
c001c3be:	c3                   	ret    
c001c3bf:	90                   	nop

c001c3c0 <ATAPI::ATAPI()>:
c001c3c0:	83 ec 0c             	sub    esp,0xc
c001c3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c7:	83 ec 04             	sub    esp,0x4
c001c3ca:	68 00 08 00 00       	push   0x800
c001c3cf:	68 f9 1b 02 c0       	push   0xc0021bf9
c001c3d4:	50                   	push   eax
c001c3d5:	e8 a8 fd fe ff       	call   c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c3da:	83 c4 10             	add    esp,0x10
c001c3dd:	ba 14 1b 02 c0       	mov    edx,0xc0021b14
c001c3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e6:	89 10                	mov    DWORD PTR [eax],edx
c001c3e8:	90                   	nop
c001c3e9:	83 c4 0c             	add    esp,0xc
c001c3ec:	c3                   	ret    
c001c3ed:	90                   	nop

c001c3ee <ATAPI::readyForCommand()>:
c001c3ee:	56                   	push   esi
c001c3ef:	53                   	push   ebx
c001c3f0:	53                   	push   ebx
c001c3f1:	31 db                	xor    ebx,ebx
c001c3f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c3f7:	51                   	push   ecx
c001c3f8:	6a 0c                	push   0xc
c001c3fa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c401:	50                   	push   eax
c001c402:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c408:	e8 77 e8 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001c40d:	83 c4 10             	add    esp,0x10
c001c410:	a8 88                	test   al,0x88
c001c412:	74 25                	je     c001c439 <ATAPI::readyForCommand()+0x4b>
c001c414:	43                   	inc    ebx
c001c415:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c41b:	7e da                	jle    c001c3f7 <ATAPI::readyForCommand()+0x9>
c001c41d:	83 ec 0c             	sub    esp,0xc
c001c420:	68 5e 01 00 00       	push   0x15e
c001c425:	e8 c2 8e ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001c42a:	83 c4 10             	add    esp,0x10
c001c42d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c433:	75 c2                	jne    c001c3f7 <ATAPI::readyForCommand()+0x9>
c001c435:	31 c0                	xor    eax,eax
c001c437:	eb 02                	jmp    c001c43b <ATAPI::readyForCommand()+0x4d>
c001c439:	b0 01                	mov    al,0x1
c001c43b:	5a                   	pop    edx
c001c43c:	5b                   	pop    ebx
c001c43d:	5e                   	pop    esi
c001c43e:	c3                   	ret    
c001c43f:	90                   	nop

c001c440 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c440:	55                   	push   ebp
c001c441:	57                   	push   edi
c001c442:	56                   	push   esi
c001c443:	53                   	push   ebx
c001c444:	83 ec 20             	sub    esp,0x20
c001c447:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c44b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c44f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c453:	6a 01                	push   0x1
c001c455:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c45c:	50                   	push   eax
c001c45d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c463:	e8 6a e9 ff ff       	call   c001add2 <IDE::enableIRQs(unsigned char, bool)>
c001c468:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c46f:	59                   	pop    ecx
c001c470:	5e                   	pop    esi
c001c471:	50                   	push   eax
c001c472:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c478:	e8 21 e7 ff ff       	call   c001ab9e <IDE::prepareInterrupt(unsigned char)>
c001c47d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c480:	e8 69 ff ff ff       	call   c001c3ee <ATAPI::readyForCommand()>
c001c485:	83 c4 10             	add    esp,0x10
c001c488:	84 c0                	test   al,al
c001c48a:	75 0a                	jne    c001c496 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001c48c:	bb 01 00 00 00       	mov    ebx,0x1
c001c491:	e9 5f 02 00 00       	jmp    c001c6f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c496:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c49c:	c1 e0 04             	shl    eax,0x4
c001c49f:	0f b6 c0             	movzx  eax,al
c001c4a2:	50                   	push   eax
c001c4a3:	6a 06                	push   0x6
c001c4a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4ac:	50                   	push   eax
c001c4ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4b3:	e8 0c e7 ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4b8:	6a 00                	push   0x0
c001c4ba:	6a 01                	push   0x1
c001c4bc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4c3:	50                   	push   eax
c001c4c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4ca:	e8 f5 e6 ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4cf:	83 c4 20             	add    esp,0x20
c001c4d2:	0f b6 c3             	movzx  eax,bl
c001c4d5:	50                   	push   eax
c001c4d6:	0f b6 df             	movzx  ebx,bh
c001c4d9:	6a 04                	push   0x4
c001c4db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4e2:	50                   	push   eax
c001c4e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4e9:	e8 d6 e6 ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4ee:	53                   	push   ebx
c001c4ef:	6a 05                	push   0x5
c001c4f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4f8:	50                   	push   eax
c001c4f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4ff:	e8 c0 e6 ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c504:	83 c4 20             	add    esp,0x20
c001c507:	68 a0 00 00 00       	push   0xa0
c001c50c:	6a 07                	push   0x7
c001c50e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c515:	50                   	push   eax
c001c516:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c51c:	e8 a3 e6 ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c521:	83 c4 0c             	add    esp,0xc
c001c524:	6a 01                	push   0x1
c001c526:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c52d:	50                   	push   eax
c001c52e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c534:	e8 6f f1 ff ff       	call   c001b6a8 <IDE::polling(unsigned char, unsigned int)>
c001c539:	83 c4 10             	add    esp,0x10
c001c53c:	0f b6 d8             	movzx  ebx,al
c001c53f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c545:	85 db                	test   ebx,ebx
c001c547:	74 20                	je     c001c569 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001c549:	53                   	push   ebx
c001c54a:	0f b6 c0             	movzx  eax,al
c001c54d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c554:	52                   	push   edx
c001c555:	50                   	push   eax
c001c556:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c55c:	e8 8d f0 ff ff       	call   c001b5ee <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c561:	83 c4 10             	add    esp,0x10
c001c564:	e9 8c 01 00 00       	jmp    c001c6f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c569:	52                   	push   edx
c001c56a:	0f b6 c0             	movzx  eax,al
c001c56d:	52                   	push   edx
c001c56e:	50                   	push   eax
c001c56f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c575:	e8 38 e6 ff ff       	call   c001abb2 <IDE::getBase(unsigned char)>
c001c57a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c57e:	b9 06 00 00 00       	mov    ecx,0x6
c001c583:	89 c2                	mov    edx,eax
c001c585:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c588:	89 e8                	mov    eax,ebp
c001c58a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c58e:	83 c4 10             	add    esp,0x10
c001c591:	0f b6 c0             	movzx  eax,al
c001c594:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c598:	85 db                	test   ebx,ebx
c001c59a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c5a0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c5a7:	0f 84 eb 00 00 00    	je     c001c698 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c5ad:	55                   	push   ebp
c001c5ae:	55                   	push   ebp
c001c5af:	52                   	push   edx
c001c5b0:	50                   	push   eax
c001c5b1:	e8 82 e7 ff ff       	call   c001ad38 <IDE::waitInterrupt(unsigned char)>
c001c5b6:	83 c4 10             	add    esp,0x10
c001c5b9:	84 c0                	test   al,al
c001c5bb:	0f 84 cb fe ff ff    	je     c001c48c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c5c1:	56                   	push   esi
c001c5c2:	56                   	push   esi
c001c5c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5ca:	50                   	push   eax
c001c5cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5d1:	e8 c8 e5 ff ff       	call   c001ab9e <IDE::prepareInterrupt(unsigned char)>
c001c5d6:	83 c4 0c             	add    esp,0xc
c001c5d9:	6a 04                	push   0x4
c001c5db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5e2:	50                   	push   eax
c001c5e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5e9:	e8 96 e6 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001c5ee:	83 c4 0c             	add    esp,0xc
c001c5f1:	6a 05                	push   0x5
c001c5f3:	89 c6                	mov    esi,eax
c001c5f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5fc:	50                   	push   eax
c001c5fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c603:	e8 7c e6 ff ff       	call   c001ac84 <IDE::read(unsigned char, unsigned char)>
c001c608:	83 c4 10             	add    esp,0x10
c001c60b:	0f b6 e8             	movzx  ebp,al
c001c60e:	89 f0                	mov    eax,esi
c001c610:	c1 e5 08             	shl    ebp,0x8
c001c613:	0f b6 f0             	movzx  esi,al
c001c616:	09 f5                	or     ebp,esi
c001c618:	31 f6                	xor    esi,esi
c001c61a:	d1 fd                	sar    ebp,1
c001c61c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c621:	74 5c                	je     c001c67f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001c623:	39 ee                	cmp    esi,ebp
c001c625:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c62b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c632:	75 0d                	jne    c001c641 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001c634:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c637:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001c63b:	4b                   	dec    ebx
c001c63c:	e9 57 ff ff ff       	jmp    c001c598 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001c641:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c645:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001c649:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001c64e:	51                   	push   ecx
c001c64f:	51                   	push   ecx
c001c650:	52                   	push   edx
c001c651:	50                   	push   eax
c001c652:	e8 5b e5 ff ff       	call   c001abb2 <IDE::getBase(unsigned char)>
c001c657:	89 c2                	mov    edx,eax
c001c659:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001c65e:	66 ef                	out    dx,ax
c001c660:	46                   	inc    esi
c001c661:	83 c4 10             	add    esp,0x10
c001c664:	eb bd                	jmp    c001c623 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001c666:	51                   	push   ecx
c001c667:	51                   	push   ecx
c001c668:	52                   	push   edx
c001c669:	50                   	push   eax
c001c66a:	e8 43 e5 ff ff       	call   c001abb2 <IDE::getBase(unsigned char)>
c001c66f:	89 c2                	mov    edx,eax
c001c671:	66 ed                	in     ax,dx
c001c673:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c677:	83 c4 10             	add    esp,0x10
c001c67a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001c67e:	46                   	inc    esi
c001c67f:	39 ee                	cmp    esi,ebp
c001c681:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c687:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c68e:	75 d6                	jne    c001c666 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c690:	01 f6                	add    esi,esi
c001c692:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001c696:	eb a3                	jmp    c001c63b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001c698:	51                   	push   ecx
c001c699:	51                   	push   ecx
c001c69a:	52                   	push   edx
c001c69b:	50                   	push   eax
c001c69c:	e8 97 e6 ff ff       	call   c001ad38 <IDE::waitInterrupt(unsigned char)>
c001c6a1:	83 c4 10             	add    esp,0x10
c001c6a4:	84 c0                	test   al,al
c001c6a6:	0f 84 e0 fd ff ff    	je     c001c48c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c6ac:	52                   	push   edx
c001c6ad:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c6b2:	52                   	push   edx
c001c6b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6ba:	50                   	push   eax
c001c6bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6c1:	e8 d8 e4 ff ff       	call   c001ab9e <IDE::prepareInterrupt(unsigned char)>
c001c6c6:	83 c4 10             	add    esp,0x10
c001c6c9:	50                   	push   eax
c001c6ca:	50                   	push   eax
c001c6cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6d2:	50                   	push   eax
c001c6d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6d9:	e8 d4 e4 ff ff       	call   c001abb2 <IDE::getBase(unsigned char)>
c001c6de:	8d 50 07             	lea    edx,[eax+0x7]
c001c6e1:	ec                   	in     al,dx
c001c6e2:	83 c4 10             	add    esp,0x10
c001c6e5:	a8 88                	test   al,0x88
c001c6e7:	74 0a                	je     c001c6f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c6e9:	4b                   	dec    ebx
c001c6ea:	75 dd                	jne    c001c6c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001c6ec:	bb 02 00 00 00       	mov    ebx,0x2
c001c6f1:	eb 02                	jmp    c001c6f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c6f3:	31 db                	xor    ebx,ebx
c001c6f5:	83 c4 1c             	add    esp,0x1c
c001c6f8:	89 d8                	mov    eax,ebx
c001c6fa:	5b                   	pop    ebx
c001c6fb:	5e                   	pop    esi
c001c6fc:	5f                   	pop    edi
c001c6fd:	5d                   	pop    ebp
c001c6fe:	c3                   	ret    
c001c6ff:	90                   	nop

c001c700 <ATAPI::diskRemoved()>:
c001c700:	53                   	push   ebx
c001c701:	83 ec 14             	sub    esp,0x14
c001c704:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c708:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c70f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c715:	e8 0a 0a ff ff       	call   c000d124 <LogicalDisk::unmount()>
c001c71a:	58                   	pop    eax
c001c71b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c721:	e8 e2 13 ff ff       	call   c000db08 <VCache::writeWriteBuffer()>
c001c726:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c72c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c730:	83 c4 18             	add    esp,0x18
c001c733:	5b                   	pop    ebx
c001c734:	e9 bf 13 ff ff       	jmp    c000daf8 <VCache::invalidateReadBuffer()>
c001c739:	90                   	nop

c001c73a <ATAPI::eject()>:
c001c73a:	57                   	push   edi
c001c73b:	b9 03 00 00 00       	mov    ecx,0x3
c001c740:	53                   	push   ebx
c001c741:	83 ec 14             	sub    esp,0x14
c001c744:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c748:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c74c:	fc                   	cld    
c001c74d:	31 c0                	xor    eax,eax
c001c74f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c751:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c756:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c75b:	50                   	push   eax
c001c75c:	50                   	push   eax
c001c75d:	6a 00                	push   0x0
c001c75f:	6a 00                	push   0x0
c001c761:	6a 00                	push   0x0
c001c763:	6a 02                	push   0x2
c001c765:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c769:	50                   	push   eax
c001c76a:	53                   	push   ebx
c001c76b:	e8 d0 fc ff ff       	call   c001c440 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c770:	83 c4 14             	add    esp,0x14
c001c773:	53                   	push   ebx
c001c774:	e8 87 ff ff ff       	call   c001c700 <ATAPI::diskRemoved()>
c001c779:	83 c4 24             	add    esp,0x24
c001c77c:	31 c0                	xor    eax,eax
c001c77e:	5b                   	pop    ebx
c001c77f:	5f                   	pop    edi
c001c780:	c3                   	ret    
c001c781:	90                   	nop

c001c782 <ATAPI::diskInserted()>:
c001c782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c786:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c78d:	c3                   	ret    

c001c78e <ATAPI::detectMedia()>:
c001c78e:	56                   	push   esi
c001c78f:	53                   	push   ebx
c001c790:	83 ec 28             	sub    esp,0x28
c001c793:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c797:	6a 0c                	push   0xc
c001c799:	6a 00                	push   0x0
c001c79b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c79f:	56                   	push   esi
c001c7a0:	e8 4b 3d fe ff       	call   c00004f0 <memset>
c001c7a5:	58                   	pop    eax
c001c7a6:	5a                   	pop    edx
c001c7a7:	6a 00                	push   0x0
c001c7a9:	6a 00                	push   0x0
c001c7ab:	6a 00                	push   0x0
c001c7ad:	6a 00                	push   0x0
c001c7af:	56                   	push   esi
c001c7b0:	53                   	push   ebx
c001c7b1:	e8 8a fc ff ff       	call   c001c440 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7b6:	83 c4 1c             	add    esp,0x1c
c001c7b9:	6a 0c                	push   0xc
c001c7bb:	6a 00                	push   0x0
c001c7bd:	56                   	push   esi
c001c7be:	e8 2d 3d fe ff       	call   c00004f0 <memset>
c001c7c3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c7c8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c7cd:	59                   	pop    ecx
c001c7ce:	58                   	pop    eax
c001c7cf:	6a 01                	push   0x1
c001c7d1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c7d5:	50                   	push   eax
c001c7d6:	6a 00                	push   0x0
c001c7d8:	6a 12                	push   0x12
c001c7da:	56                   	push   esi
c001c7db:	53                   	push   ebx
c001c7dc:	e8 5f fc ff ff       	call   c001c440 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7e1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c7e5:	83 c4 20             	add    esp,0x20
c001c7e8:	83 e0 7f             	and    eax,0x7f
c001c7eb:	83 f8 70             	cmp    eax,0x70
c001c7ee:	74 15                	je     c001c805 <ATAPI::detectMedia()+0x77>
c001c7f0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c7f7:	75 0c                	jne    c001c805 <ATAPI::detectMedia()+0x77>
c001c7f9:	83 ec 0c             	sub    esp,0xc
c001c7fc:	53                   	push   ebx
c001c7fd:	e8 80 ff ff ff       	call   c001c782 <ATAPI::diskInserted()>
c001c802:	83 c4 10             	add    esp,0x10
c001c805:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c809:	83 e0 0f             	and    eax,0xf
c001c80c:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c811:	0f b6 c0             	movzx  eax,al
c001c814:	75 19                	jne    c001c82f <ATAPI::detectMedia()+0xa1>
c001c816:	83 f8 02             	cmp    eax,0x2
c001c819:	75 14                	jne    c001c82f <ATAPI::detectMedia()+0xa1>
c001c81b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c822:	74 24                	je     c001c848 <ATAPI::detectMedia()+0xba>
c001c824:	83 ec 0c             	sub    esp,0xc
c001c827:	53                   	push   ebx
c001c828:	e8 d3 fe ff ff       	call   c001c700 <ATAPI::diskRemoved()>
c001c82d:	eb 16                	jmp    c001c845 <ATAPI::detectMedia()+0xb7>
c001c82f:	85 c0                	test   eax,eax
c001c831:	75 15                	jne    c001c848 <ATAPI::detectMedia()+0xba>
c001c833:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c83a:	75 0c                	jne    c001c848 <ATAPI::detectMedia()+0xba>
c001c83c:	83 ec 0c             	sub    esp,0xc
c001c83f:	53                   	push   ebx
c001c840:	e8 3d ff ff ff       	call   c001c782 <ATAPI::diskInserted()>
c001c845:	83 c4 10             	add    esp,0x10
c001c848:	83 c4 24             	add    esp,0x24
c001c84b:	5b                   	pop    ebx
c001c84c:	5e                   	pop    esi
c001c84d:	c3                   	ret    

c001c84e <ATAPI::open(int, int, void*)>:
c001c84e:	56                   	push   esi
c001c84f:	53                   	push   ebx
c001c850:	50                   	push   eax
c001c851:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c855:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c859:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c85d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c863:	c1 e0 06             	shl    eax,0x6
c001c866:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c86c:	01 d0                	add    eax,edx
c001c86e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c875:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c87b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c882:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c88c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c893:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c899:	6a 04                	push   0x4
c001c89b:	6a 0c                	push   0xc
c001c89d:	51                   	push   ecx
c001c89e:	52                   	push   edx
c001c89f:	e8 20 e3 ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8a4:	90                   	nop
c001c8a5:	90                   	nop
c001c8a6:	6a 00                	push   0x0
c001c8a8:	6a 0c                	push   0xc
c001c8aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8b1:	50                   	push   eax
c001c8b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8b8:	e8 07 e3 ff ff       	call   c001abc4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8bd:	83 c4 14             	add    esp,0x14
c001c8c0:	68 78 01 00 00       	push   0x178
c001c8c5:	e8 01 b2 fe ff       	call   c0007acb <malloc>
c001c8ca:	83 c4 0c             	add    esp,0xc
c001c8cd:	6a 00                	push   0x0
c001c8cf:	68 ff ff ff 7f       	push   0x7fffffff
c001c8d4:	6a 00                	push   0x0
c001c8d6:	6a 00                	push   0x0
c001c8d8:	53                   	push   ebx
c001c8d9:	68 ab 1c 02 c0       	push   0xc0021cab
c001c8de:	89 c6                	mov    esi,eax
c001c8e0:	50                   	push   eax
c001c8e1:	e8 7c 06 ff ff       	call   c000cf62 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c8e6:	83 c4 14             	add    esp,0x14
c001c8e9:	56                   	push   esi
c001c8ea:	e8 33 07 ff ff       	call   c000d022 <LogicalDisk::assignDriveLetter()>
c001c8ef:	5a                   	pop    edx
c001c8f0:	59                   	pop    ecx
c001c8f1:	0f be c0             	movsx  eax,al
c001c8f4:	50                   	push   eax
c001c8f5:	68 fc 1a 02 c0       	push   0xc0021afc
c001c8fa:	e8 52 e0 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001c8ff:	58                   	pop    eax
c001c900:	5a                   	pop    edx
c001c901:	56                   	push   esi
c001c902:	53                   	push   ebx
c001c903:	e8 ac f4 fe ff       	call   c000bdb4 <Device::addChild(Device*)>
c001c908:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c90e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c911:	e8 d4 f8 fe ff       	call   c000c1ea <PhysicalDisk::startCache()>
c001c916:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c91d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c920:	e8 69 fe ff ff       	call   c001c78e <ATAPI::detectMedia()>
c001c925:	83 c4 14             	add    esp,0x14
c001c928:	31 c0                	xor    eax,eax
c001c92a:	5b                   	pop    ebx
c001c92b:	5e                   	pop    esi
c001c92c:	c3                   	ret    
c001c92d:	90                   	nop

c001c92e <ATAPI::read(unsigned long long, int, void*)>:
c001c92e:	55                   	push   ebp
c001c92f:	57                   	push   edi
c001c930:	56                   	push   esi
c001c931:	53                   	push   ebx
c001c932:	83 ec 1c             	sub    esp,0x1c
c001c935:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c939:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c93d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c941:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c948:	74 3c                	je     c001c986 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c94a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c94e:	b9 03 00 00 00       	mov    ecx,0x3
c001c953:	fc                   	cld    
c001c954:	31 c0                	xor    eax,eax
c001c956:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c958:	89 e8                	mov    eax,ebp
c001c95a:	0f ce                	bswap  esi
c001c95c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c960:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c965:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c969:	50                   	push   eax
c001c96a:	50                   	push   eax
c001c96b:	55                   	push   ebp
c001c96c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c970:	c1 e5 0b             	shl    ebp,0xb
c001c973:	6a 00                	push   0x0
c001c975:	55                   	push   ebp
c001c976:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c97a:	50                   	push   eax
c001c97b:	53                   	push   ebx
c001c97c:	e8 bf fa ff ff       	call   c001c440 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c981:	83 c4 20             	add    esp,0x20
c001c984:	eb 1a                	jmp    c001c9a0 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c986:	83 ec 0c             	sub    esp,0xc
c001c989:	53                   	push   ebx
c001c98a:	e8 ff fd ff ff       	call   c001c78e <ATAPI::detectMedia()>
c001c98f:	83 c4 10             	add    esp,0x10
c001c992:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c999:	75 af                	jne    c001c94a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c99b:	b8 02 00 00 00       	mov    eax,0x2
c001c9a0:	83 c4 1c             	add    esp,0x1c
c001c9a3:	5b                   	pop    ebx
c001c9a4:	5e                   	pop    esi
c001c9a5:	5f                   	pop    edi
c001c9a6:	5d                   	pop    ebp
c001c9a7:	c3                   	ret    

c001c9a8 <SATA::close(int, int, void*)>:
c001c9a8:	83 ec 0c             	sub    esp,0xc
c001c9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9af:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c9b5:	85 c0                	test   eax,eax
c001c9b7:	74 0c                	je     c001c9c5 <SATA::close(int, int, void*)+0x1d>
c001c9b9:	8b 10                	mov    edx,DWORD PTR [eax]
c001c9bb:	83 ec 0c             	sub    esp,0xc
c001c9be:	50                   	push   eax
c001c9bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c9c2:	83 c4 10             	add    esp,0x10
c001c9c5:	31 c0                	xor    eax,eax
c001c9c7:	83 c4 0c             	add    esp,0xc
c001c9ca:	c3                   	ret    
c001c9cb:	90                   	nop

c001c9cc <SATA::powerSaving(PowerSavingLevel)>:
c001c9cc:	c3                   	ret    
c001c9cd:	90                   	nop

c001c9ce <SATA::open(int, int, void*)>:
c001c9ce:	56                   	push   esi
c001c9cf:	53                   	push   ebx
c001c9d0:	50                   	push   eax
c001c9d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9d9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c9e3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c9e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c9ed:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c9f7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ca01:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ca08:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ca0e:	e8 c3 b3 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001ca13:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ca19:	89 c6                	mov    esi,eax
c001ca1b:	e8 b6 b3 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001ca20:	81 c6 00 10 00 00    	add    esi,0x1000
c001ca26:	39 c6                	cmp    esi,eax
c001ca28:	74 10                	je     c001ca3a <SATA::open(int, int, void*)+0x6c>
c001ca2a:	83 ec 0c             	sub    esp,0xc
c001ca2d:	68 44 1b 02 c0       	push   0xc0021b44
c001ca32:	e8 9e 3d ff ff       	call   c00107d5 <KePanic(char const*)>
c001ca37:	83 c4 10             	add    esp,0x10
c001ca3a:	83 ec 0c             	sub    esp,0xc
c001ca3d:	6a 02                	push   0x2
c001ca3f:	e8 c1 cb fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001ca44:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ca4a:	6a 03                	push   0x3
c001ca4c:	50                   	push   eax
c001ca4d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ca53:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001ca59:	e8 86 d2 fe ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca5e:	83 c4 14             	add    esp,0x14
c001ca61:	53                   	push   ebx
c001ca62:	e8 83 f7 fe ff       	call   c000c1ea <PhysicalDisk::startCache()>
c001ca67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca6a:	e8 c7 09 ff ff       	call   c000d436 <createPartitionsForDisk(PhysicalDisk*)>
c001ca6f:	83 c4 14             	add    esp,0x14
c001ca72:	31 c0                	xor    eax,eax
c001ca74:	5b                   	pop    ebx
c001ca75:	5e                   	pop    esi
c001ca76:	c3                   	ret    
c001ca77:	90                   	nop

c001ca78 <SATA::SATA()>:
c001ca78:	83 ec 0c             	sub    esp,0xc
c001ca7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7f:	83 ec 04             	sub    esp,0x4
c001ca82:	68 00 02 00 00       	push   0x200
c001ca87:	68 58 1b 02 c0       	push   0xc0021b58
c001ca8c:	50                   	push   eax
c001ca8d:	e8 f0 f6 fe ff       	call   c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ca92:	83 c4 10             	add    esp,0x10
c001ca95:	ba c8 1b 02 c0       	mov    edx,0xc0021bc8
c001ca9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca9e:	89 10                	mov    DWORD PTR [eax],edx
c001caa0:	90                   	nop
c001caa1:	83 c4 0c             	add    esp,0xc
c001caa4:	c3                   	ret    
c001caa5:	90                   	nop

c001caa6 <SATA::access(unsigned long long, int, void*, bool)>:
c001caa6:	55                   	push   ebp
c001caa7:	57                   	push   edi
c001caa8:	56                   	push   esi
c001caa9:	53                   	push   ebx
c001caaa:	83 ec 2c             	sub    esp,0x2c
c001caad:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cab1:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cab6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001caba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cabe:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cac2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cac6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001caca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cace:	7e 10                	jle    c001cae0 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001cad0:	83 ec 0c             	sub    esp,0xc
c001cad3:	68 68 1b 02 c0       	push   0xc0021b68
c001cad8:	e8 f8 3c ff ff       	call   c00107d5 <KePanic(char const*)>
c001cadd:	83 c4 10             	add    esp,0x10
c001cae0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cae6:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001caec:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001caf2:	89 e8                	mov    eax,ebp
c001caf4:	c1 e0 07             	shl    eax,0x7
c001caf7:	01 d0                	add    eax,edx
c001caf9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cb03:	8d 45 02             	lea    eax,[ebp+0x2]
c001cb06:	51                   	push   ecx
c001cb07:	c1 e0 07             	shl    eax,0x7
c001cb0a:	51                   	push   ecx
c001cb0b:	01 d0                	add    eax,edx
c001cb0d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cb11:	50                   	push   eax
c001cb12:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cb18:	e8 6b ec ff ff       	call   c001b788 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cb1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb21:	83 c4 10             	add    esp,0x10
c001cb24:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001cb29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cb2d:	0f 84 5b 01 00 00    	je     c001cc8e <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cb33:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cb37:	c1 e0 09             	shl    eax,0x9
c001cb3a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cb3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb43:	74 0e                	je     c001cb53 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001cb45:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cb4b:	89 c1                	mov    ecx,eax
c001cb4d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cb51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb53:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cb57:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cb5d:	8d 45 02             	lea    eax,[ebp+0x2]
c001cb60:	c1 e0 07             	shl    eax,0x7
c001cb63:	01 d0                	add    eax,edx
c001cb65:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb67:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cb6d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cb73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cb77:	c1 e1 05             	shl    ecx,0x5
c001cb7a:	01 c8                	add    eax,ecx
c001cb7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cb80:	83 e1 01             	and    ecx,0x1
c001cb83:	89 ce                	mov    esi,ecx
c001cb85:	8a 08                	mov    cl,BYTE PTR [eax]
c001cb87:	c1 e6 06             	shl    esi,0x6
c001cb8a:	83 e1 bf             	and    ecx,0xffffffbf
c001cb8d:	09 f1                	or     ecx,esi
c001cb8f:	88 08                	mov    BYTE PTR [eax],cl
c001cb91:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cb93:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cb99:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cb9f:	89 08                	mov    DWORD PTR [eax],ecx
c001cba1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cba7:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cbad:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cbb3:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cbb6:	50                   	push   eax
c001cbb7:	68 90 00 00 00       	push   0x90
c001cbbc:	6a 00                	push   0x0
c001cbbe:	56                   	push   esi
c001cbbf:	e8 2c 39 fe ff       	call   c00004f0 <memset>
c001cbc4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cbca:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbd4:	83 c4 10             	add    esp,0x10
c001cbd7:	48                   	dec    eax
c001cbd8:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cbdd:	89 c1                	mov    ecx,eax
c001cbdf:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cbe5:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cbea:	09 c8                	or     eax,ecx
c001cbec:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cbf2:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cbf8:	83 c8 80             	or     eax,0xffffff80
c001cbfb:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cc01:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cc04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc08:	25 00 7f 00 00       	and    eax,0x7f00
c001cc0d:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cc12:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cc17:	66 89 06             	mov    WORD PTR [esi],ax
c001cc1a:	b0 35                	mov    al,0x35
c001cc1c:	75 02                	jne    c001cc20 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001cc1e:	b0 25                	mov    al,0x25
c001cc20:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cc23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc27:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cc2b:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001cc2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc33:	c1 e8 10             	shr    eax,0x10
c001cc36:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cc39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc3d:	c1 e8 18             	shr    eax,0x18
c001cc40:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cc43:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cc47:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cc4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc4e:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cc51:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cc55:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cc59:	89 ee                	mov    esi,ebp
c001cc5b:	31 c0                	xor    eax,eax
c001cc5d:	c1 e6 07             	shl    esi,0x7
c001cc60:	01 d6                	add    esi,edx
c001cc62:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cc68:	80 e1 88             	and    cl,0x88
c001cc6b:	74 0a                	je     c001cc77 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001cc6d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cc72:	74 0a                	je     c001cc7e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001cc74:	40                   	inc    eax
c001cc75:	eb eb                	jmp    c001cc62 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001cc77:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cc7c:	75 17                	jne    c001cc95 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001cc7e:	83 ec 0c             	sub    esp,0xc
c001cc81:	68 a1 1b 02 c0       	push   0xc0021ba1
c001cc86:	e8 c6 dc fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001cc8b:	83 c4 10             	add    esp,0x10
c001cc8e:	b8 01 00 00 00       	mov    eax,0x1
c001cc93:	eb 5b                	jmp    c001ccf0 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cc95:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001cc99:	c1 e5 07             	shl    ebp,0x7
c001cc9c:	b8 01 00 00 00       	mov    eax,0x1
c001cca1:	01 ea                	add    edx,ebp
c001cca3:	d3 e0                	shl    eax,cl
c001cca5:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ccab:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ccb1:	85 c8                	test   eax,ecx
c001ccb3:	74 16                	je     c001cccb <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001ccb5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ccbb:	0f ba e1 1e          	bt     ecx,0x1e
c001ccbf:	73 ea                	jae    c001ccab <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001ccc1:	83 ec 0c             	sub    esp,0xc
c001ccc4:	68 af 1b 02 c0       	push   0xc0021baf
c001ccc9:	eb bb                	jmp    c001cc86 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cccb:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ccd1:	0f ba e0 1e          	bt     eax,0x1e
c001ccd5:	72 b7                	jb     c001cc8e <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001ccd7:	31 c0                	xor    eax,eax
c001ccd9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ccde:	75 10                	jne    c001ccf0 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cce0:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cce6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ccea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ccee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ccf0:	83 c4 2c             	add    esp,0x2c
c001ccf3:	5b                   	pop    ebx
c001ccf4:	5e                   	pop    esi
c001ccf5:	5f                   	pop    edi
c001ccf6:	5d                   	pop    ebp
c001ccf7:	c3                   	ret    

c001ccf8 <SATA::read(unsigned long long, int, void*)>:
c001ccf8:	55                   	push   ebp
c001ccf9:	57                   	push   edi
c001ccfa:	56                   	push   esi
c001ccfb:	be 04 00 00 00       	mov    esi,0x4
c001cd00:	53                   	push   ebx
c001cd01:	83 ec 0c             	sub    esp,0xc
c001cd04:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd0c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd10:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd14:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd17:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd1d:	0f 87 1a 02 00 00    	ja     c001cf3d <SATA::read(unsigned long long, int, void*)+0x245>
c001cd23:	85 c9                	test   ecx,ecx
c001cd25:	be 06 00 00 00       	mov    esi,0x6
c001cd2a:	0f 84 0d 02 00 00    	je     c001cf3d <SATA::read(unsigned long long, int, void*)+0x245>
c001cd30:	56                   	push   esi
c001cd31:	56                   	push   esi
c001cd32:	6a 00                	push   0x0
c001cd34:	51                   	push   ecx
c001cd35:	53                   	push   ebx
c001cd36:	52                   	push   edx
c001cd37:	50                   	push   eax
c001cd38:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd3c:	e8 65 fd ff ff       	call   c001caa6 <SATA::access(unsigned long long, int, void*, bool)>
c001cd41:	83 c4 20             	add    esp,0x20
c001cd44:	85 c0                	test   eax,eax
c001cd46:	89 c6                	mov    esi,eax
c001cd48:	0f 85 ea 01 00 00    	jne    c001cf38 <SATA::read(unsigned long long, int, void*)+0x240>
c001cd4e:	50                   	push   eax
c001cd4f:	50                   	push   eax
c001cd50:	6a 0f                	push   0xf
c001cd52:	6a 00                	push   0x0
c001cd54:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cd5a:	bb 0a 00 00 00       	mov    ebx,0xa
c001cd5f:	e8 7d f2 ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001cd64:	5a                   	pop    edx
c001cd65:	59                   	pop    ecx
c001cd66:	b9 10 27 00 00       	mov    ecx,0x2710
c001cd6b:	0f b6 c0             	movzx  eax,al
c001cd6e:	50                   	push   eax
c001cd6f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cd74:	99                   	cdq    
c001cd75:	f7 f9                	idiv   ecx
c001cd77:	99                   	cdq    
c001cd78:	f7 fb                	idiv   ebx
c001cd7a:	8d 42 30             	lea    eax,[edx+0x30]
c001cd7d:	0f b6 c0             	movzx  eax,al
c001cd80:	50                   	push   eax
c001cd81:	e8 4a f2 ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001cd86:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cd8c:	5f                   	pop    edi
c001cd8d:	5d                   	pop    ebp
c001cd8e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cd93:	6a 0f                	push   0xf
c001cd95:	6a 00                	push   0x0
c001cd97:	e8 45 f2 ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001cd9c:	5a                   	pop    edx
c001cd9d:	59                   	pop    ecx
c001cd9e:	0f b6 c0             	movzx  eax,al
c001cda1:	50                   	push   eax
c001cda2:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cda7:	99                   	cdq    
c001cda8:	f7 fd                	idiv   ebp
c001cdaa:	99                   	cdq    
c001cdab:	f7 fb                	idiv   ebx
c001cdad:	8d 42 30             	lea    eax,[edx+0x30]
c001cdb0:	0f b6 c0             	movzx  eax,al
c001cdb3:	50                   	push   eax
c001cdb4:	e8 17 f2 ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001cdb9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cdbf:	5f                   	pop    edi
c001cdc0:	bf 64 00 00 00       	mov    edi,0x64
c001cdc5:	58                   	pop    eax
c001cdc6:	6a 0f                	push   0xf
c001cdc8:	6a 00                	push   0x0
c001cdca:	e8 12 f2 ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001cdcf:	5a                   	pop    edx
c001cdd0:	59                   	pop    ecx
c001cdd1:	0f b6 c0             	movzx  eax,al
c001cdd4:	50                   	push   eax
c001cdd5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdda:	99                   	cdq    
c001cddb:	f7 ff                	idiv   edi
c001cddd:	99                   	cdq    
c001cdde:	f7 fb                	idiv   ebx
c001cde0:	8d 42 30             	lea    eax,[edx+0x30]
c001cde3:	0f b6 c0             	movzx  eax,al
c001cde6:	50                   	push   eax
c001cde7:	e8 e4 f1 ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001cdec:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cdf2:	58                   	pop    eax
c001cdf3:	5a                   	pop    edx
c001cdf4:	6a 0f                	push   0xf
c001cdf6:	6a 00                	push   0x0
c001cdf8:	e8 e4 f1 ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001cdfd:	59                   	pop    ecx
c001cdfe:	5a                   	pop    edx
c001cdff:	0f b6 c0             	movzx  eax,al
c001ce02:	50                   	push   eax
c001ce03:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce08:	99                   	cdq    
c001ce09:	f7 fb                	idiv   ebx
c001ce0b:	99                   	cdq    
c001ce0c:	f7 fb                	idiv   ebx
c001ce0e:	8d 42 30             	lea    eax,[edx+0x30]
c001ce11:	0f b6 c0             	movzx  eax,al
c001ce14:	50                   	push   eax
c001ce15:	e8 b6 f1 ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001ce1a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce20:	59                   	pop    ecx
c001ce21:	58                   	pop    eax
c001ce22:	6a 0f                	push   0xf
c001ce24:	6a 00                	push   0x0
c001ce26:	e8 b6 f1 ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001ce2b:	5a                   	pop    edx
c001ce2c:	59                   	pop    ecx
c001ce2d:	0f b6 c0             	movzx  eax,al
c001ce30:	50                   	push   eax
c001ce31:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce36:	99                   	cdq    
c001ce37:	f7 fb                	idiv   ebx
c001ce39:	83 c2 30             	add    edx,0x30
c001ce3c:	0f b6 d2             	movzx  edx,dl
c001ce3f:	52                   	push   edx
c001ce40:	e8 8b f1 ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001ce45:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce4b:	58                   	pop    eax
c001ce4c:	5a                   	pop    edx
c001ce4d:	6a 0f                	push   0xf
c001ce4f:	6a 00                	push   0x0
c001ce51:	e8 8b f1 ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001ce56:	59                   	pop    ecx
c001ce57:	b9 10 27 00 00       	mov    ecx,0x2710
c001ce5c:	5a                   	pop    edx
c001ce5d:	0f b6 c0             	movzx  eax,al
c001ce60:	50                   	push   eax
c001ce61:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce66:	99                   	cdq    
c001ce67:	f7 f9                	idiv   ecx
c001ce69:	99                   	cdq    
c001ce6a:	f7 fb                	idiv   ebx
c001ce6c:	8d 42 30             	lea    eax,[edx+0x30]
c001ce6f:	0f b6 c0             	movzx  eax,al
c001ce72:	50                   	push   eax
c001ce73:	e8 58 f1 ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001ce78:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce7e:	59                   	pop    ecx
c001ce7f:	58                   	pop    eax
c001ce80:	6a 0f                	push   0xf
c001ce82:	6a 00                	push   0x0
c001ce84:	e8 58 f1 ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001ce89:	5a                   	pop    edx
c001ce8a:	59                   	pop    ecx
c001ce8b:	0f b6 c0             	movzx  eax,al
c001ce8e:	50                   	push   eax
c001ce8f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce94:	99                   	cdq    
c001ce95:	f7 fd                	idiv   ebp
c001ce97:	99                   	cdq    
c001ce98:	f7 fb                	idiv   ebx
c001ce9a:	8d 42 30             	lea    eax,[edx+0x30]
c001ce9d:	0f b6 c0             	movzx  eax,al
c001cea0:	50                   	push   eax
c001cea1:	e8 2a f1 ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001cea6:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ceac:	5d                   	pop    ebp
c001cead:	58                   	pop    eax
c001ceae:	6a 0f                	push   0xf
c001ceb0:	6a 00                	push   0x0
c001ceb2:	e8 2a f1 ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001ceb7:	5a                   	pop    edx
c001ceb8:	59                   	pop    ecx
c001ceb9:	0f b6 c0             	movzx  eax,al
c001cebc:	50                   	push   eax
c001cebd:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cec2:	99                   	cdq    
c001cec3:	f7 ff                	idiv   edi
c001cec5:	99                   	cdq    
c001cec6:	f7 fb                	idiv   ebx
c001cec8:	8d 42 30             	lea    eax,[edx+0x30]
c001cecb:	0f b6 c0             	movzx  eax,al
c001cece:	50                   	push   eax
c001cecf:	e8 fc f0 ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001ced4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ceda:	5f                   	pop    edi
c001cedb:	5d                   	pop    ebp
c001cedc:	6a 0f                	push   0xf
c001cede:	6a 00                	push   0x0
c001cee0:	e8 fc f0 ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001cee5:	5a                   	pop    edx
c001cee6:	59                   	pop    ecx
c001cee7:	0f b6 c0             	movzx  eax,al
c001ceea:	50                   	push   eax
c001ceeb:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cef0:	99                   	cdq    
c001cef1:	f7 fb                	idiv   ebx
c001cef3:	99                   	cdq    
c001cef4:	f7 fb                	idiv   ebx
c001cef6:	8d 42 30             	lea    eax,[edx+0x30]
c001cef9:	0f b6 c0             	movzx  eax,al
c001cefc:	50                   	push   eax
c001cefd:	e8 ce f0 ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001cf02:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf08:	5f                   	pop    edi
c001cf09:	5d                   	pop    ebp
c001cf0a:	6a 0f                	push   0xf
c001cf0c:	6a 00                	push   0x0
c001cf0e:	e8 ce f0 ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001cf13:	5a                   	pop    edx
c001cf14:	59                   	pop    ecx
c001cf15:	0f b6 c0             	movzx  eax,al
c001cf18:	50                   	push   eax
c001cf19:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf1e:	99                   	cdq    
c001cf1f:	f7 fb                	idiv   ebx
c001cf21:	83 c2 30             	add    edx,0x30
c001cf24:	0f b6 d2             	movzx  edx,dl
c001cf27:	52                   	push   edx
c001cf28:	e8 a3 f0 ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001cf2d:	83 c4 10             	add    esp,0x10
c001cf30:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf36:	eb 05                	jmp    c001cf3d <SATA::read(unsigned long long, int, void*)+0x245>
c001cf38:	be 01 00 00 00       	mov    esi,0x1
c001cf3d:	83 c4 0c             	add    esp,0xc
c001cf40:	89 f0                	mov    eax,esi
c001cf42:	5b                   	pop    ebx
c001cf43:	5e                   	pop    esi
c001cf44:	5f                   	pop    edi
c001cf45:	5d                   	pop    ebp
c001cf46:	c3                   	ret    
c001cf47:	90                   	nop

c001cf48 <SATA::write(unsigned long long, int, void*)>:
c001cf48:	55                   	push   ebp
c001cf49:	57                   	push   edi
c001cf4a:	56                   	push   esi
c001cf4b:	53                   	push   ebx
c001cf4c:	83 ec 0c             	sub    esp,0xc
c001cf4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cf53:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf57:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cf5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cf5f:	8d 70 ff             	lea    esi,[eax-0x1]
c001cf62:	b8 04 00 00 00       	mov    eax,0x4
c001cf67:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001cf6d:	0f 87 2c 02 00 00    	ja     c001d19f <SATA::write(unsigned long long, int, void*)+0x257>
c001cf73:	85 db                	test   ebx,ebx
c001cf75:	b8 06 00 00 00       	mov    eax,0x6
c001cf7a:	0f 84 1f 02 00 00    	je     c001d19f <SATA::write(unsigned long long, int, void*)+0x257>
c001cf80:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf84:	c1 e6 09             	shl    esi,0x9
c001cf87:	01 de                	add    esi,ebx
c001cf89:	50                   	push   eax
c001cf8a:	89 d7                	mov    edi,edx
c001cf8c:	50                   	push   eax
c001cf8d:	83 c7 01             	add    edi,0x1
c001cf90:	6a 01                	push   0x1
c001cf92:	89 cd                	mov    ebp,ecx
c001cf94:	53                   	push   ebx
c001cf95:	83 d5 00             	adc    ebp,0x0
c001cf98:	6a 01                	push   0x1
c001cf9a:	81 c3 00 02 00 00    	add    ebx,0x200
c001cfa0:	51                   	push   ecx
c001cfa1:	52                   	push   edx
c001cfa2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cfa6:	e8 fb fa ff ff       	call   c001caa6 <SATA::access(unsigned long long, int, void*, bool)>
c001cfab:	83 c4 20             	add    esp,0x20
c001cfae:	39 f3                	cmp    ebx,esi
c001cfb0:	89 fa                	mov    edx,edi
c001cfb2:	89 e9                	mov    ecx,ebp
c001cfb4:	75 d3                	jne    c001cf89 <SATA::write(unsigned long long, int, void*)+0x41>
c001cfb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cfba:	bd 10 27 00 00       	mov    ebp,0x2710
c001cfbf:	bb 0a 00 00 00       	mov    ebx,0xa
c001cfc4:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001cfca:	50                   	push   eax
c001cfcb:	50                   	push   eax
c001cfcc:	6a 0f                	push   0xf
c001cfce:	6a 00                	push   0x0
c001cfd0:	e8 0c f0 ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001cfd5:	5a                   	pop    edx
c001cfd6:	59                   	pop    ecx
c001cfd7:	0f b6 c0             	movzx  eax,al
c001cfda:	50                   	push   eax
c001cfdb:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cfe0:	99                   	cdq    
c001cfe1:	f7 fd                	idiv   ebp
c001cfe3:	99                   	cdq    
c001cfe4:	f7 fb                	idiv   ebx
c001cfe6:	8d 42 30             	lea    eax,[edx+0x30]
c001cfe9:	0f b6 c0             	movzx  eax,al
c001cfec:	50                   	push   eax
c001cfed:	e8 de ef ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001cff2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cff8:	5e                   	pop    esi
c001cff9:	5f                   	pop    edi
c001cffa:	bf e8 03 00 00       	mov    edi,0x3e8
c001cfff:	6a 0f                	push   0xf
c001d001:	6a 00                	push   0x0
c001d003:	e8 d9 ef ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001d008:	5a                   	pop    edx
c001d009:	59                   	pop    ecx
c001d00a:	0f b6 c0             	movzx  eax,al
c001d00d:	50                   	push   eax
c001d00e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d013:	99                   	cdq    
c001d014:	f7 ff                	idiv   edi
c001d016:	99                   	cdq    
c001d017:	f7 fb                	idiv   ebx
c001d019:	8d 42 30             	lea    eax,[edx+0x30]
c001d01c:	0f b6 c0             	movzx  eax,al
c001d01f:	50                   	push   eax
c001d020:	e8 ab ef ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001d025:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d02b:	5e                   	pop    esi
c001d02c:	be 64 00 00 00       	mov    esi,0x64
c001d031:	58                   	pop    eax
c001d032:	6a 0f                	push   0xf
c001d034:	6a 00                	push   0x0
c001d036:	e8 a6 ef ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001d03b:	5a                   	pop    edx
c001d03c:	59                   	pop    ecx
c001d03d:	0f b6 c0             	movzx  eax,al
c001d040:	50                   	push   eax
c001d041:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d046:	99                   	cdq    
c001d047:	f7 fe                	idiv   esi
c001d049:	99                   	cdq    
c001d04a:	f7 fb                	idiv   ebx
c001d04c:	8d 42 30             	lea    eax,[edx+0x30]
c001d04f:	0f b6 c0             	movzx  eax,al
c001d052:	50                   	push   eax
c001d053:	e8 78 ef ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001d058:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d05e:	58                   	pop    eax
c001d05f:	5a                   	pop    edx
c001d060:	6a 0f                	push   0xf
c001d062:	6a 00                	push   0x0
c001d064:	e8 78 ef ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001d069:	59                   	pop    ecx
c001d06a:	5a                   	pop    edx
c001d06b:	0f b6 c0             	movzx  eax,al
c001d06e:	50                   	push   eax
c001d06f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d074:	99                   	cdq    
c001d075:	f7 fb                	idiv   ebx
c001d077:	99                   	cdq    
c001d078:	f7 fb                	idiv   ebx
c001d07a:	8d 42 30             	lea    eax,[edx+0x30]
c001d07d:	0f b6 c0             	movzx  eax,al
c001d080:	50                   	push   eax
c001d081:	e8 4a ef ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001d086:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d08c:	59                   	pop    ecx
c001d08d:	58                   	pop    eax
c001d08e:	6a 0f                	push   0xf
c001d090:	6a 00                	push   0x0
c001d092:	e8 4a ef ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001d097:	5a                   	pop    edx
c001d098:	59                   	pop    ecx
c001d099:	0f b6 c0             	movzx  eax,al
c001d09c:	50                   	push   eax
c001d09d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0a2:	99                   	cdq    
c001d0a3:	f7 fb                	idiv   ebx
c001d0a5:	83 c2 30             	add    edx,0x30
c001d0a8:	0f b6 d2             	movzx  edx,dl
c001d0ab:	52                   	push   edx
c001d0ac:	e8 1f ef ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001d0b1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d0b7:	58                   	pop    eax
c001d0b8:	5a                   	pop    edx
c001d0b9:	6a 0f                	push   0xf
c001d0bb:	6a 00                	push   0x0
c001d0bd:	e8 1f ef ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001d0c2:	59                   	pop    ecx
c001d0c3:	5a                   	pop    edx
c001d0c4:	0f b6 c0             	movzx  eax,al
c001d0c7:	50                   	push   eax
c001d0c8:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d0cd:	99                   	cdq    
c001d0ce:	f7 fd                	idiv   ebp
c001d0d0:	99                   	cdq    
c001d0d1:	f7 fb                	idiv   ebx
c001d0d3:	8d 42 30             	lea    eax,[edx+0x30]
c001d0d6:	0f b6 c0             	movzx  eax,al
c001d0d9:	50                   	push   eax
c001d0da:	e8 f1 ee ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001d0df:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d0e5:	59                   	pop    ecx
c001d0e6:	5d                   	pop    ebp
c001d0e7:	6a 0f                	push   0xf
c001d0e9:	6a 00                	push   0x0
c001d0eb:	e8 f1 ee ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001d0f0:	5a                   	pop    edx
c001d0f1:	59                   	pop    ecx
c001d0f2:	0f b6 c0             	movzx  eax,al
c001d0f5:	50                   	push   eax
c001d0f6:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d0fb:	99                   	cdq    
c001d0fc:	f7 ff                	idiv   edi
c001d0fe:	99                   	cdq    
c001d0ff:	f7 fb                	idiv   ebx
c001d101:	8d 42 30             	lea    eax,[edx+0x30]
c001d104:	0f b6 c0             	movzx  eax,al
c001d107:	50                   	push   eax
c001d108:	e8 c3 ee ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001d10d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d113:	5f                   	pop    edi
c001d114:	5d                   	pop    ebp
c001d115:	6a 0f                	push   0xf
c001d117:	6a 00                	push   0x0
c001d119:	e8 c3 ee ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001d11e:	5a                   	pop    edx
c001d11f:	59                   	pop    ecx
c001d120:	0f b6 c0             	movzx  eax,al
c001d123:	50                   	push   eax
c001d124:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d129:	99                   	cdq    
c001d12a:	f7 fe                	idiv   esi
c001d12c:	99                   	cdq    
c001d12d:	f7 fb                	idiv   ebx
c001d12f:	8d 42 30             	lea    eax,[edx+0x30]
c001d132:	0f b6 c0             	movzx  eax,al
c001d135:	50                   	push   eax
c001d136:	e8 95 ee ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001d13b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d141:	5e                   	pop    esi
c001d142:	5f                   	pop    edi
c001d143:	6a 0f                	push   0xf
c001d145:	6a 00                	push   0x0
c001d147:	e8 95 ee ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001d14c:	5d                   	pop    ebp
c001d14d:	5a                   	pop    edx
c001d14e:	0f b6 c0             	movzx  eax,al
c001d151:	50                   	push   eax
c001d152:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d157:	99                   	cdq    
c001d158:	f7 fb                	idiv   ebx
c001d15a:	99                   	cdq    
c001d15b:	f7 fb                	idiv   ebx
c001d15d:	8d 42 30             	lea    eax,[edx+0x30]
c001d160:	0f b6 c0             	movzx  eax,al
c001d163:	50                   	push   eax
c001d164:	e8 67 ee ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001d169:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d16f:	59                   	pop    ecx
c001d170:	5e                   	pop    esi
c001d171:	6a 0f                	push   0xf
c001d173:	6a 00                	push   0x0
c001d175:	e8 67 ee ff ff       	call   c001bfe1 <combineColours(unsigned char, unsigned char)>
c001d17a:	5f                   	pop    edi
c001d17b:	5d                   	pop    ebp
c001d17c:	0f b6 c0             	movzx  eax,al
c001d17f:	50                   	push   eax
c001d180:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d185:	99                   	cdq    
c001d186:	f7 fb                	idiv   ebx
c001d188:	83 c2 30             	add    edx,0x30
c001d18b:	0f b6 d2             	movzx  edx,dl
c001d18e:	52                   	push   edx
c001d18f:	e8 3c ee ff ff       	call   c001bfd0 <combineCharAndColour(char, unsigned char)>
c001d194:	83 c4 10             	add    esp,0x10
c001d197:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d19d:	31 c0                	xor    eax,eax
c001d19f:	83 c4 0c             	add    esp,0xc
c001d1a2:	5b                   	pop    ebx
c001d1a3:	5e                   	pop    esi
c001d1a4:	5f                   	pop    edi
c001d1a5:	5d                   	pop    ebp
c001d1a6:	c3                   	ret    
c001d1a7:	90                   	nop

c001d1a8 <SATAPI::write(unsigned long long, int, void*)>:
c001d1a8:	b8 03 00 00 00       	mov    eax,0x3
c001d1ad:	c3                   	ret    

c001d1ae <SATAPI::close(int, int, void*)>:
c001d1ae:	83 ec 0c             	sub    esp,0xc
c001d1b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d1bb:	85 c0                	test   eax,eax
c001d1bd:	74 0c                	je     c001d1cb <SATAPI::close(int, int, void*)+0x1d>
c001d1bf:	8b 10                	mov    edx,DWORD PTR [eax]
c001d1c1:	83 ec 0c             	sub    esp,0xc
c001d1c4:	50                   	push   eax
c001d1c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d1c8:	83 c4 10             	add    esp,0x10
c001d1cb:	31 c0                	xor    eax,eax
c001d1cd:	83 c4 0c             	add    esp,0xc
c001d1d0:	c3                   	ret    
c001d1d1:	90                   	nop

c001d1d2 <SATAPI::SATAPI()>:
c001d1d2:	83 ec 0c             	sub    esp,0xc
c001d1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d9:	83 ec 04             	sub    esp,0x4
c001d1dc:	68 00 08 00 00       	push   0x800
c001d1e1:	68 f8 1b 02 c0       	push   0xc0021bf8
c001d1e6:	50                   	push   eax
c001d1e7:	e8 96 ef fe ff       	call   c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d1ec:	83 c4 10             	add    esp,0x10
c001d1ef:	ba ec 1c 02 c0       	mov    edx,0xc0021cec
c001d1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1f8:	89 10                	mov    DWORD PTR [eax],edx
c001d1fa:	90                   	nop
c001d1fb:	83 c4 0c             	add    esp,0xc
c001d1fe:	c3                   	ret    
c001d1ff:	90                   	nop

c001d200 <SATAPI::diskRemoved()>:
c001d200:	c3                   	ret    
c001d201:	90                   	nop

c001d202 <SATAPI::diskInserted()>:
c001d202:	83 ec 18             	sub    esp,0x18
c001d205:	68 04 1c 02 c0       	push   0xc0021c04
c001d20a:	e8 42 d7 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001d20f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d213:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d21a:	83 c4 1c             	add    esp,0x1c
c001d21d:	c3                   	ret    

c001d21e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d21e:	55                   	push   ebp
c001d21f:	57                   	push   edi
c001d220:	56                   	push   esi
c001d221:	53                   	push   ebx
c001d222:	83 ec 34             	sub    esp,0x34
c001d225:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d229:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d22d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d231:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d235:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d239:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d23f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d249:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d24f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d253:	83 c0 02             	add    eax,0x2
c001d256:	c1 e0 07             	shl    eax,0x7
c001d259:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d25d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d261:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d265:	c1 e0 07             	shl    eax,0x7
c001d268:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d26c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d270:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d27a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d27e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d284:	e8 ff e4 ff ff       	call   c001b788 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d289:	83 c4 10             	add    esp,0x10
c001d28c:	89 c2                	mov    edx,eax
c001d28e:	b8 01 00 00 00       	mov    eax,0x1
c001d293:	83 fa ff             	cmp    edx,0xffffffff
c001d296:	0f 84 5f 02 00 00    	je     c001d4fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d29c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d2a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2a4:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d2aa:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2ac:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d2b2:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d2b8:	89 d1                	mov    ecx,edx
c001d2ba:	c1 e1 05             	shl    ecx,0x5
c001d2bd:	01 c8                	add    eax,ecx
c001d2bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d2c1:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d2c7:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d2cd:	89 08                	mov    DWORD PTR [eax],ecx
c001d2cf:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d2d5:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d2db:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d2e1:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d2e4:	50                   	push   eax
c001d2e5:	68 90 00 00 00       	push   0x90
c001d2ea:	6a 00                	push   0x0
c001d2ec:	53                   	push   ebx
c001d2ed:	e8 fe 31 fe ff       	call   c00004f0 <memset>
c001d2f2:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d2f5:	b9 0c 00 00 00       	mov    ecx,0xc
c001d2fa:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d2fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d300:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d306:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d30a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d30e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d314:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d318:	48                   	dec    eax
c001d319:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d31e:	89 c1                	mov    ecx,eax
c001d320:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d326:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d32b:	09 c8                	or     eax,ecx
c001d32d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d333:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d339:	83 c8 80             	or     eax,0xffffff80
c001d33c:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d342:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d345:	25 00 7f 00 00       	and    eax,0x7f00
c001d34a:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d34f:	66 89 03             	mov    WORD PTR [ebx],ax
c001d352:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d356:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d35a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d35e:	c1 e8 10             	shr    eax,0x10
c001d361:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d364:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d368:	c1 e8 18             	shr    eax,0x18
c001d36b:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d36e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d372:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d375:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d379:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d37c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d380:	83 c4 10             	add    esp,0x10
c001d383:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d387:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d38b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d38f:	31 c0                	xor    eax,eax
c001d391:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d397:	80 e1 88             	and    cl,0x88
c001d39a:	74 0a                	je     c001d3a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001d39c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d3a1:	74 0a                	je     c001d3ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001d3a3:	40                   	inc    eax
c001d3a4:	eb eb                	jmp    c001d391 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001d3a6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d3ab:	75 43                	jne    c001d3f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001d3ad:	83 ec 0c             	sub    esp,0xc
c001d3b0:	68 1c 1c 02 c0       	push   0xc0021c1c
c001d3b5:	e8 97 d5 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001d3ba:	58                   	pop    eax
c001d3bb:	5a                   	pop    edx
c001d3bc:	68 31 1c 02 c0       	push   0xc0021c31
c001d3c1:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d3c7:	e8 ca b6 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c001d3cc:	59                   	pop    ecx
c001d3cd:	5b                   	pop    ebx
c001d3ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d3d2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d3d8:	e8 45 e4 ff ff       	call   c001b822 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d3dd:	5e                   	pop    esi
c001d3de:	5f                   	pop    edi
c001d3df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d3e3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d3e9:	e8 14 e4 ff ff       	call   c001b802 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d3ee:	eb 48                	jmp    c001d438 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001d3f0:	b8 01 00 00 00       	mov    eax,0x1
c001d3f5:	88 d1                	mov    cl,dl
c001d3f7:	d3 e0                	shl    eax,cl
c001d3f9:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001d3fe:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001d404:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d408:	89 c7                	mov    edi,eax
c001d40a:	c1 e3 07             	shl    ebx,0x7
c001d40d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d411:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d417:	85 c7                	test   edi,eax
c001d419:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d41f:	0f 84 a3 00 00 00    	je     c001d4c8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001d425:	0f ba e0 1e          	bt     eax,0x1e
c001d429:	73 1a                	jae    c001d445 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001d42b:	83 ec 0c             	sub    esp,0xc
c001d42e:	68 43 1c 02 c0       	push   0xc0021c43
c001d433:	e8 19 d5 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001d438:	83 c4 10             	add    esp,0x10
c001d43b:	b8 01 00 00 00       	mov    eax,0x1
c001d440:	e9 b6 00 00 00       	jmp    c001d4fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d445:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001d44b:	83 f8 0d             	cmp    eax,0xd
c001d44e:	77 0a                	ja     c001d45a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001d450:	83 ec 0c             	sub    esp,0xc
c001d453:	68 c8 00 00 00       	push   0xc8
c001d458:	eb 28                	jmp    c001d482 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d45a:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001d460:	83 f8 0d             	cmp    eax,0xd
c001d463:	77 0a                	ja     c001d46f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001d465:	83 ec 0c             	sub    esp,0xc
c001d468:	68 58 02 00 00       	push   0x258
c001d46d:	eb 13                	jmp    c001d482 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d46f:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001d475:	83 f8 06             	cmp    eax,0x6
c001d478:	77 10                	ja     c001d48a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001d47a:	83 ec 0c             	sub    esp,0xc
c001d47d:	68 dc 05 00 00       	push   0x5dc
c001d482:	e8 65 7e ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001d487:	83 c4 10             	add    esp,0x10
c001d48a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d48e:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d491:	75 06                	jne    c001d499 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001d493:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d497:	74 15                	je     c001d4ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d499:	83 fe 06             	cmp    esi,0x6
c001d49c:	77 10                	ja     c001d4ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d49e:	83 ec 0c             	sub    esp,0xc
c001d4a1:	68 c4 09 00 00       	push   0x9c4
c001d4a6:	e8 41 7e ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001d4ab:	83 c4 10             	add    esp,0x10
c001d4ae:	46                   	inc    esi
c001d4af:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001d4b5:	0f 85 56 ff ff ff    	jne    c001d411 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001d4bb:	83 ec 0c             	sub    esp,0xc
c001d4be:	68 56 1c 02 c0       	push   0xc0021c56
c001d4c3:	e9 6b ff ff ff       	jmp    c001d433 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d4c8:	0f ba e0 1e          	bt     eax,0x1e
c001d4cc:	73 0d                	jae    c001d4db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001d4ce:	83 ec 0c             	sub    esp,0xc
c001d4d1:	68 6a 1c 02 c0       	push   0xc0021c6a
c001d4d6:	e9 58 ff ff ff       	jmp    c001d433 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d4db:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d4e0:	74 17                	je     c001d4f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d4e2:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d4e7:	74 10                	je     c001d4f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d4e9:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d4ef:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d4f3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d4f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d4f9:	31 c0                	xor    eax,eax
c001d4fb:	83 c4 2c             	add    esp,0x2c
c001d4fe:	5b                   	pop    ebx
c001d4ff:	5e                   	pop    esi
c001d500:	5f                   	pop    edi
c001d501:	5d                   	pop    ebp
c001d502:	c3                   	ret    
c001d503:	90                   	nop

c001d504 <SATAPI::eject()>:
c001d504:	57                   	push   edi
c001d505:	b9 03 00 00 00       	mov    ecx,0x3
c001d50a:	83 ec 18             	sub    esp,0x18
c001d50d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d511:	fc                   	cld    
c001d512:	31 c0                	xor    eax,eax
c001d514:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d516:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d51b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d520:	50                   	push   eax
c001d521:	6a 00                	push   0x0
c001d523:	6a 00                	push   0x0
c001d525:	6a 00                	push   0x0
c001d527:	6a 00                	push   0x0
c001d529:	6a 02                	push   0x2
c001d52b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d52f:	50                   	push   eax
c001d530:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d534:	e8 e5 fc ff ff       	call   c001d21e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d539:	83 c4 38             	add    esp,0x38
c001d53c:	31 c0                	xor    eax,eax
c001d53e:	5f                   	pop    edi
c001d53f:	c3                   	ret    

c001d540 <SATAPI::detectMedia()>:
c001d540:	53                   	push   ebx
c001d541:	83 ec 14             	sub    esp,0x14
c001d544:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d548:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d54e:	e8 b5 05 ff ff       	call   c000db08 <VCache::writeWriteBuffer()>
c001d553:	59                   	pop    ecx
c001d554:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d55a:	e8 99 05 ff ff       	call   c000daf8 <VCache::invalidateReadBuffer()>
c001d55f:	c7 04 24 7f 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c7f
c001d566:	e8 e6 d3 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001d56b:	83 c4 10             	add    esp,0x10
c001d56e:	31 c0                	xor    eax,eax
c001d570:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d577:	85 d2                	test   edx,edx
c001d579:	74 0f                	je     c001d58a <SATAPI::detectMedia()+0x4a>
c001d57b:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d581:	75 07                	jne    c001d58a <SATAPI::detectMedia()+0x4a>
c001d583:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d58a:	40                   	inc    eax
c001d58b:	83 f8 1a             	cmp    eax,0x1a
c001d58e:	75 e0                	jne    c001d570 <SATAPI::detectMedia()+0x30>
c001d590:	83 c4 08             	add    esp,0x8
c001d593:	5b                   	pop    ebx
c001d594:	c3                   	ret    
c001d595:	90                   	nop

c001d596 <SATAPI::open(int, int, void*)>:
c001d596:	56                   	push   esi
c001d597:	53                   	push   ebx
c001d598:	51                   	push   ecx
c001d599:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d59d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5a1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d5ab:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d5b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5b5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d5bf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d5c9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d5d0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d5d6:	e8 fb a7 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001d5db:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d5e1:	89 c6                	mov    esi,eax
c001d5e3:	e8 ee a7 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001d5e8:	81 c6 00 10 00 00    	add    esi,0x1000
c001d5ee:	39 c6                	cmp    esi,eax
c001d5f0:	74 10                	je     c001d602 <SATAPI::open(int, int, void*)+0x6c>
c001d5f2:	83 ec 0c             	sub    esp,0xc
c001d5f5:	68 94 1c 02 c0       	push   0xc0021c94
c001d5fa:	e8 d6 31 ff ff       	call   c00107d5 <KePanic(char const*)>
c001d5ff:	83 c4 10             	add    esp,0x10
c001d602:	83 ec 0c             	sub    esp,0xc
c001d605:	6a 02                	push   0x2
c001d607:	e8 f9 bf fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001d60c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d612:	6a 03                	push   0x3
c001d614:	50                   	push   eax
c001d615:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d61b:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d621:	e8 be c6 fe ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d626:	83 c4 14             	add    esp,0x14
c001d629:	68 78 01 00 00       	push   0x178
c001d62e:	e8 98 a4 fe ff       	call   c0007acb <malloc>
c001d633:	83 c4 0c             	add    esp,0xc
c001d636:	6a 00                	push   0x0
c001d638:	68 ff ff ff 7f       	push   0x7fffffff
c001d63d:	6a 00                	push   0x0
c001d63f:	6a 00                	push   0x0
c001d641:	53                   	push   ebx
c001d642:	68 aa 1c 02 c0       	push   0xc0021caa
c001d647:	89 c6                	mov    esi,eax
c001d649:	50                   	push   eax
c001d64a:	e8 13 f9 fe ff       	call   c000cf62 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d64f:	83 c4 14             	add    esp,0x14
c001d652:	56                   	push   esi
c001d653:	e8 ca f9 fe ff       	call   c000d022 <LogicalDisk::assignDriveLetter()>
c001d658:	5a                   	pop    edx
c001d659:	59                   	pop    ecx
c001d65a:	0f be c0             	movsx  eax,al
c001d65d:	50                   	push   eax
c001d65e:	68 fc 1a 02 c0       	push   0xc0021afc
c001d663:	e8 e9 d2 fe ff       	call   c000a951 <Dbg::kprintf(char const*, ...)>
c001d668:	58                   	pop    eax
c001d669:	5a                   	pop    edx
c001d66a:	56                   	push   esi
c001d66b:	53                   	push   ebx
c001d66c:	e8 43 e7 fe ff       	call   c000bdb4 <Device::addChild(Device*)>
c001d671:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d677:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d67a:	e8 6b eb fe ff       	call   c000c1ea <PhysicalDisk::startCache()>
c001d67f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d686:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d689:	e8 b2 fe ff ff       	call   c001d540 <SATAPI::detectMedia()>
c001d68e:	83 c4 14             	add    esp,0x14
c001d691:	31 c0                	xor    eax,eax
c001d693:	5b                   	pop    ebx
c001d694:	5e                   	pop    esi
c001d695:	c3                   	ret    

c001d696 <SATAPI::read(unsigned long long, int, void*)>:
c001d696:	55                   	push   ebp
c001d697:	57                   	push   edi
c001d698:	56                   	push   esi
c001d699:	53                   	push   ebx
c001d69a:	83 ec 3c             	sub    esp,0x3c
c001d69d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001d6a1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d6a5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d6a9:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001d6ad:	83 fd 04             	cmp    ebp,0x4
c001d6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d6b8:	7e 10                	jle    c001d6ca <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d6ba:	83 ec 0c             	sub    esp,0xc
c001d6bd:	68 b8 1c 02 c0       	push   0xc0021cb8
c001d6c2:	e8 0e 31 ff ff       	call   c00107d5 <KePanic(char const*)>
c001d6c7:	83 c4 10             	add    esp,0x10
c001d6ca:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d6d0:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d6d6:	51                   	push   ecx
c001d6d7:	50                   	push   eax
c001d6d8:	83 c0 02             	add    eax,0x2
c001d6db:	c1 e0 07             	shl    eax,0x7
c001d6de:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d6e4:	50                   	push   eax
c001d6e5:	52                   	push   edx
c001d6e6:	e8 61 e1 ff ff       	call   c001b84c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d6eb:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d6ef:	b9 03 00 00 00       	mov    ecx,0x3
c001d6f4:	fc                   	cld    
c001d6f5:	31 c0                	xor    eax,eax
c001d6f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d6f9:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d6fe:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d703:	83 c4 0c             	add    esp,0xc
c001d706:	6a 00                	push   0x0
c001d708:	6a 00                	push   0x0
c001d70a:	6a 00                	push   0x0
c001d70c:	6a 00                	push   0x0
c001d70e:	6a 02                	push   0x2
c001d710:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d714:	50                   	push   eax
c001d715:	53                   	push   ebx
c001d716:	e8 03 fb ff ff       	call   c001d21e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d71b:	83 c4 20             	add    esp,0x20
c001d71e:	85 c0                	test   eax,eax
c001d720:	89 c6                	mov    esi,eax
c001d722:	75 46                	jne    c001d76a <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001d724:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d728:	b9 03 00 00 00       	mov    ecx,0x3
c001d72d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d72f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d733:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d738:	0f c8                	bswap  eax
c001d73a:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d73e:	89 e8                	mov    eax,ebp
c001d740:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d744:	50                   	push   eax
c001d745:	55                   	push   ebp
c001d746:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d74a:	c1 e5 0b             	shl    ebp,0xb
c001d74d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d751:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d755:	55                   	push   ebp
c001d756:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d75a:	50                   	push   eax
c001d75b:	53                   	push   ebx
c001d75c:	e8 bd fa ff ff       	call   c001d21e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d761:	83 c4 20             	add    esp,0x20
c001d764:	85 c0                	test   eax,eax
c001d766:	89 c6                	mov    esi,eax
c001d768:	74 0c                	je     c001d776 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001d76a:	83 ec 0c             	sub    esp,0xc
c001d76d:	53                   	push   ebx
c001d76e:	e8 cd fd ff ff       	call   c001d540 <SATAPI::detectMedia()>
c001d773:	83 c4 10             	add    esp,0x10
c001d776:	83 c4 3c             	add    esp,0x3c
c001d779:	89 f0                	mov    eax,esi
c001d77b:	5b                   	pop    ebx
c001d77c:	5e                   	pop    esi
c001d77d:	5f                   	pop    edi
c001d77e:	5d                   	pop    ebp
c001d77f:	c3                   	ret    

c001d780 <IOAPIC::close(int, int, void*)>:
c001d780:	b8 00 00 00 00       	mov    eax,0x0
c001d785:	c3                   	ret    

c001d786 <apicGetBase()>:
c001d786:	55                   	push   ebp
c001d787:	89 e5                	mov    ebp,esp
c001d789:	83 ec 18             	sub    esp,0x18
c001d78c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d791:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d797:	83 e0 08             	and    eax,0x8
c001d79a:	0f b6 c0             	movzx  eax,al
c001d79d:	85 c0                	test   eax,eax
c001d79f:	75 07                	jne    c001d7a8 <apicGetBase()+0x22>
c001d7a1:	b8 00 00 00 00       	mov    eax,0x0
c001d7a6:	eb 21                	jmp    c001d7c9 <apicGetBase()+0x43>
c001d7a8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d7ad:	83 ec 08             	sub    esp,0x8
c001d7b0:	6a 1b                	push   0x1b
c001d7b2:	50                   	push   eax
c001d7b3:	e8 22 99 fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001d7b8:	83 c4 10             	add    esp,0x10
c001d7bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d7be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d7c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d7c4:	25 00 00 ff ff       	and    eax,0xffff0000
c001d7c9:	c9                   	leave  
c001d7ca:	c3                   	ret    
c001d7cb:	90                   	nop

c001d7cc <IOAPIC::IOAPIC()>:
c001d7cc:	83 ec 0c             	sub    esp,0xc
c001d7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7d3:	83 ec 08             	sub    esp,0x8
c001d7d6:	68 1c 1d 02 c0       	push   0xc0021d1c
c001d7db:	50                   	push   eax
c001d7dc:	e8 6b e7 fe ff       	call   c000bf4c <Device::Device(char const*)>
c001d7e1:	83 c4 10             	add    esp,0x10
c001d7e4:	ba 2c 1d 02 c0       	mov    edx,0xc0021d2c
c001d7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ed:	89 10                	mov    DWORD PTR [eax],edx
c001d7ef:	90                   	nop
c001d7f0:	83 c4 0c             	add    esp,0xc
c001d7f3:	c3                   	ret    

c001d7f4 <apicOpen()>:
c001d7f4:	55                   	push   ebp
c001d7f5:	89 e5                	mov    ebp,esp
c001d7f7:	53                   	push   ebx
c001d7f8:	83 ec 34             	sub    esp,0x34
c001d7fb:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d800:	83 f0 01             	xor    eax,0x1
c001d803:	0f b6 c0             	movzx  eax,al
c001d806:	85 c0                	test   eax,eax
c001d808:	0f 84 a3 00 00 00    	je     c001d8b1 <apicOpen()+0xbd>
c001d80e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d812:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d817:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d81b:	0f b6 c0             	movzx  eax,al
c001d81e:	39 c2                	cmp    edx,eax
c001d820:	0f 83 84 00 00 00    	jae    c001d8aa <apicOpen()+0xb6>
c001d826:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d82d:	83 ec 0c             	sub    esp,0xc
c001d830:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d833:	e8 93 a2 fe ff       	call   c0007acb <malloc>
c001d838:	83 c4 10             	add    esp,0x10
c001d83b:	89 c3                	mov    ebx,eax
c001d83d:	83 ec 0c             	sub    esp,0xc
c001d840:	53                   	push   ebx
c001d841:	e8 86 ff ff ff       	call   c001d7cc <IOAPIC::IOAPIC()>
c001d846:	83 c4 10             	add    esp,0x10
c001d849:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d84c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d850:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d853:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d85a:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d85f:	83 c0 01             	add    eax,0x1
c001d862:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d867:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d86c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d872:	83 ec 08             	sub    esp,0x8
c001d875:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d878:	50                   	push   eax
c001d879:	e8 36 e5 fe ff       	call   c000bdb4 <Device::addChild(Device*)>
c001d87e:	83 c4 10             	add    esp,0x10
c001d881:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d884:	8b 00                	mov    eax,DWORD PTR [eax]
c001d886:	83 c0 08             	add    eax,0x8
c001d889:	8b 00                	mov    eax,DWORD PTR [eax]
c001d88b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d88f:	6a 00                	push   0x0
c001d891:	6a 00                	push   0x0
c001d893:	52                   	push   edx
c001d894:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d897:	ff d0                	call   eax
c001d899:	83 c4 10             	add    esp,0x10
c001d89c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d89f:	83 c0 01             	add    eax,0x1
c001d8a2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d8a5:	e9 68 ff ff ff       	jmp    c001d812 <apicOpen()+0x1e>
c001d8aa:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d8b1:	e8 d0 fe ff ff       	call   c001d786 <apicGetBase()>
c001d8b6:	05 f0 00 00 00       	add    eax,0xf0
c001d8bb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d8be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d8c1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8c3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d8c6:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d8cd:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d8d4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d8d7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d8da:	89 10                	mov    DWORD PTR [eax],edx
c001d8dc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d8e3:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d8e8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d8eb:	7d 7c                	jge    c001d969 <apicOpen()+0x175>
c001d8ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8f0:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d8f7:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d8fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8fd:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d904:	c1 e8 08             	shr    eax,0x8
c001d907:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d90b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d90e:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d915:	c1 e8 18             	shr    eax,0x18
c001d918:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d91b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d91f:	3d ff 00 00 00       	cmp    eax,0xff
c001d924:	75 3a                	jne    c001d960 <apicOpen()+0x16c>
c001d926:	e8 5b fe ff ff       	call   c001d786 <apicGetBase()>
c001d92b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d92f:	83 fa 01             	cmp    edx,0x1
c001d932:	75 07                	jne    c001d93b <apicOpen()+0x147>
c001d934:	ba 60 03 00 00       	mov    edx,0x360
c001d939:	eb 05                	jmp    c001d940 <apicOpen()+0x14c>
c001d93b:	ba 50 03 00 00       	mov    edx,0x350
c001d940:	01 d0                	add    eax,edx
c001d942:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d945:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d948:	8b 00                	mov    eax,DWORD PTR [eax]
c001d94a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d94d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d954:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d958:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d95b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d95e:	89 10                	mov    DWORD PTR [eax],edx
c001d960:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001d964:	e9 7a ff ff ff       	jmp    c001d8e3 <apicOpen()+0xef>
c001d969:	90                   	nop
c001d96a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d96d:	c9                   	leave  
c001d96e:	c3                   	ret    
c001d96f:	90                   	nop

c001d970 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d970:	55                   	push   ebp
c001d971:	89 e5                	mov    ebp,esp
c001d973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d976:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d97c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d97f:	72 1d                	jb     c001d99e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d984:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d98a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d98d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d993:	01 d0                	add    eax,edx
c001d995:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d998:	73 04                	jae    c001d99e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d99a:	b0 01                	mov    al,0x1
c001d99c:	eb 02                	jmp    c001d9a0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d99e:	b0 00                	mov    al,0x0
c001d9a0:	5d                   	pop    ebp
c001d9a1:	c3                   	ret    

c001d9a2 <IOAPIC::read(int)>:
c001d9a2:	55                   	push   ebp
c001d9a3:	89 e5                	mov    ebp,esp
c001d9a5:	83 ec 10             	sub    esp,0x10
c001d9a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d9b1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9b7:	0f b6 d0             	movzx  edx,al
c001d9ba:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9bd:	89 10                	mov    DWORD PTR [eax],edx
c001d9bf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9c2:	83 c0 10             	add    eax,0x10
c001d9c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9c7:	c9                   	leave  
c001d9c8:	c3                   	ret    
c001d9c9:	90                   	nop

c001d9ca <IOAPIC::open(int, int, void*)>:
c001d9ca:	55                   	push   ebp
c001d9cb:	89 e5                	mov    ebp,esp
c001d9cd:	57                   	push   edi
c001d9ce:	56                   	push   esi
c001d9cf:	53                   	push   ebx
c001d9d0:	83 ec 04             	sub    esp,0x4
c001d9d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9d6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d9d9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d9df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d9e8:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001d9ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9f2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d9f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da01:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001da08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da0b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001da11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da14:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001da1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da1d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da23:	0f b6 f0             	movzx  esi,al
c001da26:	89 d0                	mov    eax,edx
c001da28:	ba 00 00 00 00       	mov    edx,0x0
c001da2d:	89 c7                	mov    edi,eax
c001da2f:	83 e7 ff             	and    edi,0xffffffff
c001da32:	89 f9                	mov    ecx,edi
c001da34:	0f b6 da             	movzx  ebx,dl
c001da37:	89 c8                	mov    eax,ecx
c001da39:	89 da                	mov    edx,ebx
c001da3b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001da3e:	8d 5e 08             	lea    ebx,[esi+0x8]
c001da41:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001da45:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001da49:	83 e0 00             	and    eax,0x0
c001da4c:	09 d0                	or     eax,edx
c001da4e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001da52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da55:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da5b:	8d 50 01             	lea    edx,[eax+0x1]
c001da5e:	88 d1                	mov    cl,dl
c001da60:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001da63:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001da69:	0f b6 d0             	movzx  edx,al
c001da6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da6f:	83 c2 08             	add    edx,0x8
c001da72:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001da76:	0f b6 c9             	movzx  ecx,cl
c001da79:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001da7f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001da83:	6a 01                	push   0x1
c001da85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da88:	e8 15 ff ff ff       	call   c001d9a2 <IOAPIC::read(int)>
c001da8d:	83 c4 08             	add    esp,0x8
c001da90:	c1 f8 10             	sar    eax,0x10
c001da93:	0f b6 c0             	movzx  eax,al
c001da96:	8d 50 01             	lea    edx,[eax+0x1]
c001da99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da9c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001daa2:	b8 00 00 00 00       	mov    eax,0x0
c001daa7:	8d 65 f4             	lea    esp,[ebp-0xc]
c001daaa:	5b                   	pop    ebx
c001daab:	5e                   	pop    esi
c001daac:	5f                   	pop    edi
c001daad:	5d                   	pop    ebp
c001daae:	c3                   	ret    
c001daaf:	90                   	nop

c001dab0 <IOAPIC::write(int, int)>:
c001dab0:	55                   	push   ebp
c001dab1:	89 e5                	mov    ebp,esp
c001dab3:	83 ec 10             	sub    esp,0x10
c001dab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dab9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dabf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001dac2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dac5:	0f b6 d0             	movzx  edx,al
c001dac8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dacb:	89 10                	mov    DWORD PTR [eax],edx
c001dacd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dad0:	8d 50 10             	lea    edx,[eax+0x10]
c001dad3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dad6:	89 02                	mov    DWORD PTR [edx],eax
c001dad8:	90                   	nop
c001dad9:	c9                   	leave  
c001dada:	c3                   	ret    
c001dadb:	90                   	nop

c001dadc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001dadc:	55                   	push   ebp
c001dadd:	89 e5                	mov    ebp,esp
c001dadf:	53                   	push   ebx
c001dae0:	83 ec 2c             	sub    esp,0x2c
c001dae3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dae6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001dae9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001daec:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001daef:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001daf2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001daf5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001daf8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dafb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001dafe:	88 d8                	mov    al,bl
c001db00:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001db03:	88 c8                	mov    al,cl
c001db05:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001db08:	88 d0                	mov    al,dl
c001db0a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001db0d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db11:	83 c0 08             	add    eax,0x8
c001db14:	d1 e0                	shl    eax,1
c001db16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001db19:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db1d:	83 c0 08             	add    eax,0x8
c001db20:	d1 e0                	shl    eax,1
c001db22:	83 c0 01             	add    eax,0x1
c001db25:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001db28:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db2b:	50                   	push   eax
c001db2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db2f:	e8 6e fe ff ff       	call   c001d9a2 <IOAPIC::read(int)>
c001db34:	83 c4 08             	add    esp,0x8
c001db37:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001db3a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001db41:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001db44:	c1 e0 18             	shl    eax,0x18
c001db47:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001db4a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001db4d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db50:	52                   	push   edx
c001db51:	50                   	push   eax
c001db52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db55:	e8 56 ff ff ff       	call   c001dab0 <IOAPIC::write(int, int)>
c001db5a:	83 c4 0c             	add    esp,0xc
c001db5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db60:	50                   	push   eax
c001db61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db64:	e8 39 fe ff ff       	call   c001d9a2 <IOAPIC::read(int)>
c001db69:	83 c4 08             	add    esp,0x8
c001db6c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001db6f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001db76:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001db7d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001db84:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001db88:	85 c0                	test   eax,eax
c001db8a:	74 09                	je     c001db95 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001db8c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001db93:	eb 07                	jmp    c001db9c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001db95:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001db9c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dba0:	85 c0                	test   eax,eax
c001dba2:	74 09                	je     c001dbad <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dba4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dbab:	eb 07                	jmp    c001dbb4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dbad:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dbb4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dbbb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dbbf:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dbc2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dbc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dbc8:	52                   	push   edx
c001dbc9:	50                   	push   eax
c001dbca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbcd:	e8 de fe ff ff       	call   c001dab0 <IOAPIC::write(int, int)>
c001dbd2:	83 c4 0c             	add    esp,0xc
c001dbd5:	90                   	nop
c001dbd6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dbd9:	c9                   	leave  
c001dbda:	c3                   	ret    
c001dbdb:	90                   	nop

c001dbdc <APICTimer::close(int, int, void*)>:
c001dbdc:	b8 00 00 00 00       	mov    eax,0x0
c001dbe1:	c3                   	ret    
c001dbe2:	66 90                	xchg   ax,ax

c001dbe4 <apicTimerHandler(regs*, void*)>:
c001dbe4:	83 ec 0c             	sub    esp,0xc
c001dbe7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dbeb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dbed:	b8 10 27 00 00       	mov    eax,0x2710
c001dbf2:	ba 00 00 00 00       	mov    edx,0x0
c001dbf7:	f7 f1                	div    ecx
c001dbf9:	83 ec 0c             	sub    esp,0xc
c001dbfc:	50                   	push   eax
c001dbfd:	e8 1e fc fe ff       	call   c000d820 <timerHandler(unsigned int)>
c001dc02:	83 c4 10             	add    esp,0x10
c001dc05:	90                   	nop
c001dc06:	83 c4 0c             	add    esp,0xc
c001dc09:	c3                   	ret    
c001dc0a:	66 90                	xchg   ax,ax

c001dc0c <APICTimer::open(int, int, void*)>:
c001dc0c:	83 ec 0c             	sub    esp,0xc
c001dc0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc13:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc15:	83 c0 24             	add    eax,0x24
c001dc18:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc1a:	83 ec 08             	sub    esp,0x8
c001dc1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc25:	ff d0                	call   eax
c001dc27:	83 c4 10             	add    esp,0x10
c001dc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc2e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dc32:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc40:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dc46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc4a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dc50:	83 ec 0c             	sub    esp,0xc
c001dc53:	51                   	push   ecx
c001dc54:	6a 01                	push   0x1
c001dc56:	68 e4 db 01 c0       	push   0xc001dbe4
c001dc5b:	52                   	push   edx
c001dc5c:	50                   	push   eax
c001dc5d:	e8 fe e0 fe ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc62:	83 c4 20             	add    esp,0x20
c001dc65:	89 c2                	mov    edx,eax
c001dc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dc71:	b8 00 00 00 00       	mov    eax,0x0
c001dc76:	83 c4 0c             	add    esp,0xc
c001dc79:	c3                   	ret    
c001dc7a:	66 90                	xchg   ax,ax

c001dc7c <APICTimer::write(int)>:
c001dc7c:	83 ec 0c             	sub    esp,0xc
c001dc7f:	83 ec 0c             	sub    esp,0xc
c001dc82:	68 50 1d 02 c0       	push   0xc0021d50
c001dc87:	e8 49 2b ff ff       	call   c00107d5 <KePanic(char const*)>
c001dc8c:	83 c4 10             	add    esp,0x10
c001dc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc97:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dc9d:	90                   	nop
c001dc9e:	83 c4 0c             	add    esp,0xc
c001dca1:	c3                   	ret    
c001dca2:	66 90                	xchg   ax,ax

c001dca4 <APICTimer::APICTimer()>:
c001dca4:	83 ec 0c             	sub    esp,0xc
c001dca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcab:	83 ec 08             	sub    esp,0x8
c001dcae:	68 60 1d 02 c0       	push   0xc0021d60
c001dcb3:	50                   	push   eax
c001dcb4:	e8 9b fa fe ff       	call   c000d754 <Timer::Timer(char const*)>
c001dcb9:	83 c4 10             	add    esp,0x10
c001dcbc:	ba 74 1d 02 c0       	mov    edx,0xc0021d74
c001dcc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc5:	89 10                	mov    DWORD PTR [eax],edx
c001dcc7:	90                   	nop
c001dcc8:	83 c4 0c             	add    esp,0xc
c001dccb:	c3                   	ret    

c001dccc <PIT::write(int)>:
c001dccc:	83 ec 10             	sub    esp,0x10
c001dccf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcd3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dcd7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dcdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dce1:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dce6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dceb:	89 c2                	mov    edx,eax
c001dced:	c1 fa 1f             	sar    edx,0x1f
c001dcf0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dcf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dcf8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dcff:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dd04:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dd08:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dd0d:	ee                   	out    dx,al
c001dd0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd12:	0f b6 c0             	movzx  eax,al
c001dd15:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dd1c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dd20:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dd24:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dd29:	ee                   	out    dx,al
c001dd2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd2e:	c1 f8 08             	sar    eax,0x8
c001dd31:	0f b6 c0             	movzx  eax,al
c001dd34:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dd3b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dd3f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dd43:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001dd48:	ee                   	out    dx,al
c001dd49:	90                   	nop
c001dd4a:	83 c4 10             	add    esp,0x10
c001dd4d:	c3                   	ret    
c001dd4e:	66 90                	xchg   ax,ax

c001dd50 <pitHandler(regs*, void*)>:
c001dd50:	83 ec 0c             	sub    esp,0xc
c001dd53:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001dd59:	b8 10 27 00 00       	mov    eax,0x2710
c001dd5e:	89 c2                	mov    edx,eax
c001dd60:	c1 fa 1f             	sar    edx,0x1f
c001dd63:	f7 f9                	idiv   ecx
c001dd65:	83 ec 0c             	sub    esp,0xc
c001dd68:	50                   	push   eax
c001dd69:	e8 b2 fa fe ff       	call   c000d820 <timerHandler(unsigned int)>
c001dd6e:	83 c4 10             	add    esp,0x10
c001dd71:	90                   	nop
c001dd72:	83 c4 0c             	add    esp,0xc
c001dd75:	c3                   	ret    
c001dd76:	66 90                	xchg   ax,ax

c001dd78 <PIT::open(int, int, void*)>:
c001dd78:	83 ec 0c             	sub    esp,0xc
c001dd7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd7f:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd81:	83 c0 24             	add    eax,0x24
c001dd84:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd86:	83 ec 08             	sub    esp,0x8
c001dd89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd91:	ff d0                	call   eax
c001dd93:	83 c4 10             	add    esp,0x10
c001dd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd9a:	83 ec 0c             	sub    esp,0xc
c001dd9d:	6a 00                	push   0x0
c001dd9f:	6a 01                	push   0x1
c001dda1:	68 50 dd 01 c0       	push   0xc001dd50
c001dda6:	6a 00                	push   0x0
c001dda8:	50                   	push   eax
c001dda9:	e8 b2 df fe ff       	call   c000bd60 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ddae:	83 c4 20             	add    esp,0x20
c001ddb1:	89 c2                	mov    edx,eax
c001ddb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddb7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ddbd:	b8 00 00 00 00       	mov    eax,0x0
c001ddc2:	83 c4 0c             	add    esp,0xc
c001ddc5:	c3                   	ret    
c001ddc6:	66 90                	xchg   ax,ax

c001ddc8 <PIT::close(int, int, void*)>:
c001ddc8:	83 ec 0c             	sub    esp,0xc
c001ddcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddcf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ddd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dddd:	6a 01                	push   0x1
c001dddf:	68 50 dd 01 c0       	push   0xc001dd50
c001dde4:	6a 00                	push   0x0
c001dde6:	50                   	push   eax
c001dde7:	e8 aa df fe ff       	call   c000bd96 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ddec:	83 c4 10             	add    esp,0x10
c001ddef:	b8 00 00 00 00       	mov    eax,0x0
c001ddf4:	83 c4 0c             	add    esp,0xc
c001ddf7:	c3                   	ret    

c001ddf8 <PIT::PIT()>:
c001ddf8:	83 ec 0c             	sub    esp,0xc
c001ddfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddff:	83 ec 08             	sub    esp,0x8
c001de02:	68 9c 1d 02 c0       	push   0xc0021d9c
c001de07:	50                   	push   eax
c001de08:	e8 47 f9 fe ff       	call   c000d754 <Timer::Timer(char const*)>
c001de0d:	83 c4 10             	add    esp,0x10
c001de10:	ba c4 1d 02 c0       	mov    edx,0xc0021dc4
c001de15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de19:	89 10                	mov    DWORD PTR [eax],edx
c001de1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de25:	0f b6 d0             	movzx  edx,al
c001de28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de2c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001de33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de37:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de3d:	0f b6 d0             	movzx  edx,al
c001de40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de44:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001de49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de53:	8d 50 01             	lea    edx,[eax+0x1]
c001de56:	88 d1                	mov    cl,dl
c001de58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de5c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001de62:	0f b6 d0             	movzx  edx,al
c001de65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de69:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001de6d:	83 e1 3f             	and    ecx,0x3f
c001de70:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001de74:	90                   	nop
c001de75:	83 c4 0c             	add    esp,0xc
c001de78:	c3                   	ret    
c001de79:	66 90                	xchg   ax,ax
c001de7b:	66 90                	xchg   ax,ax
c001de7d:	66 90                	xchg   ax,ax
c001de7f:	90                   	nop

c001de80 <avxDetect>:
c001de80:	b8 01 00 00 00       	mov    eax,0x1
c001de85:	0f a2                	cpuid  
c001de87:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001de8d:	74 15                	je     c001dea4 <avxDetect.noAVX>
c001de8f:	b8 01 00 00 00       	mov    eax,0x1
c001de94:	0f a2                	cpuid  
c001de96:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001de9c:	74 06                	je     c001dea4 <avxDetect.noAVX>
c001de9e:	b8 01 00 00 00       	mov    eax,0x1
c001dea3:	c3                   	ret    

c001dea4 <avxDetect.noAVX>:
c001dea4:	b8 00 00 00 00       	mov    eax,0x0
c001dea9:	c3                   	ret    

c001deaa <avxSave>:
c001deaa:	53                   	push   ebx
c001deab:	52                   	push   edx
c001deac:	31 c0                	xor    eax,eax
c001deae:	48                   	dec    eax
c001deaf:	89 c2                	mov    edx,eax
c001deb1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001deb5:	0f ae 23             	xsave  [ebx]
c001deb8:	5a                   	pop    edx
c001deb9:	5b                   	pop    ebx
c001deba:	c3                   	ret    

c001debb <avxLoad>:
c001debb:	53                   	push   ebx
c001debc:	52                   	push   edx
c001debd:	31 c0                	xor    eax,eax
c001debf:	48                   	dec    eax
c001dec0:	89 c2                	mov    edx,eax
c001dec2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dec6:	0f ae 2b             	xrstor [ebx]
c001dec9:	5a                   	pop    edx
c001deca:	5b                   	pop    ebx
c001decb:	c3                   	ret    

c001decc <avxInit>:
c001decc:	e8 67 03 00 00       	call   c001e238 <sseInit>
c001ded1:	50                   	push   eax
c001ded2:	51                   	push   ecx
c001ded3:	0f 20 e0             	mov    eax,cr4
c001ded6:	0d 00 00 04 00       	or     eax,0x40000
c001dedb:	0f 22 e0             	mov    cr4,eax
c001dede:	31 c9                	xor    ecx,ecx
c001dee0:	0f 01 d0             	xgetbv 
c001dee3:	0d 07 00 00 00       	or     eax,0x7
c001dee8:	0f 01 d1             	xsetbv 
c001deeb:	59                   	pop    ecx
c001deec:	58                   	pop    eax
c001deed:	c3                   	ret    

c001deee <avxClose>:
c001deee:	c3                   	ret    

c001deef <wouldSheSayYes>:
c001deef:	c3                   	ret    
c001def0:	49                   	dec    ecx
c001def1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001def5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001def9:	75 20                	jne    c001df1b <isr0+0xb>
c001defb:	4e                   	dec    esi
c001defc:	79 61                	jns    c001df5f <isr7+0x3>
c001defe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001df03:	66 90                	xchg   ax,ax
c001df05:	66 90                	xchg   ax,ax
c001df07:	66 90                	xchg   ax,ax
c001df09:	66 90                	xchg   ax,ax
c001df0b:	66 90                	xchg   ax,ax
c001df0d:	66 90                	xchg   ax,ax
c001df0f:	90                   	nop

c001df10 <isr0>:
c001df10:	fa                   	cli    
c001df11:	68 00 00 00 00       	push   0x0
c001df16:	68 00 00 00 00       	push   0x0
c001df1b:	e9 56 01 00 00       	jmp    c001e076 <int_common_stub>

c001df20 <isr1>:
c001df20:	fa                   	cli    
c001df21:	6a 00                	push   0x0
c001df23:	6a 01                	push   0x1
c001df25:	e9 4c 01 00 00       	jmp    c001e076 <int_common_stub>

c001df2a <isr2>:
c001df2a:	fa                   	cli    
c001df2b:	6a 00                	push   0x0
c001df2d:	6a 02                	push   0x2
c001df2f:	e9 42 01 00 00       	jmp    c001e076 <int_common_stub>

c001df34 <isr3>:
c001df34:	fa                   	cli    
c001df35:	6a 00                	push   0x0
c001df37:	6a 03                	push   0x3
c001df39:	e9 38 01 00 00       	jmp    c001e076 <int_common_stub>

c001df3e <isr4>:
c001df3e:	fa                   	cli    
c001df3f:	6a 00                	push   0x0
c001df41:	6a 04                	push   0x4
c001df43:	e9 2e 01 00 00       	jmp    c001e076 <int_common_stub>

c001df48 <isr5>:
c001df48:	fa                   	cli    
c001df49:	6a 00                	push   0x0
c001df4b:	6a 05                	push   0x5
c001df4d:	e9 24 01 00 00       	jmp    c001e076 <int_common_stub>

c001df52 <isr6>:
c001df52:	fa                   	cli    
c001df53:	6a 00                	push   0x0
c001df55:	6a 06                	push   0x6
c001df57:	e9 1a 01 00 00       	jmp    c001e076 <int_common_stub>

c001df5c <isr7>:
c001df5c:	fa                   	cli    
c001df5d:	6a 00                	push   0x0
c001df5f:	6a 07                	push   0x7
c001df61:	e9 10 01 00 00       	jmp    c001e076 <int_common_stub>

c001df66 <isr8>:
c001df66:	fa                   	cli    
c001df67:	6a 08                	push   0x8
c001df69:	e9 08 01 00 00       	jmp    c001e076 <int_common_stub>

c001df6e <isr9>:
c001df6e:	fa                   	cli    
c001df6f:	6a 00                	push   0x0
c001df71:	6a 09                	push   0x9
c001df73:	e9 fe 00 00 00       	jmp    c001e076 <int_common_stub>

c001df78 <isr10>:
c001df78:	fa                   	cli    
c001df79:	6a 0a                	push   0xa
c001df7b:	e9 f6 00 00 00       	jmp    c001e076 <int_common_stub>

c001df80 <isr11>:
c001df80:	fa                   	cli    
c001df81:	6a 0b                	push   0xb
c001df83:	e9 ee 00 00 00       	jmp    c001e076 <int_common_stub>

c001df88 <isr12>:
c001df88:	fa                   	cli    
c001df89:	6a 0c                	push   0xc
c001df8b:	e9 e6 00 00 00       	jmp    c001e076 <int_common_stub>

c001df90 <isr13>:
c001df90:	fa                   	cli    
c001df91:	6a 0d                	push   0xd
c001df93:	53                   	push   ebx
c001df94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df98:	81 fb 66 e1 01 c0    	cmp    ebx,0xc001e166
c001df9e:	5b                   	pop    ebx
c001df9f:	0f 84 c3 01 00 00    	je     c001e168 <finishSignal2>
c001dfa5:	e9 cc 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfaa <isr14>:
c001dfaa:	fa                   	cli    
c001dfab:	6a 0e                	push   0xe
c001dfad:	e9 c4 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfb2 <isr15>:
c001dfb2:	fa                   	cli    
c001dfb3:	6a 00                	push   0x0
c001dfb5:	6a 0f                	push   0xf
c001dfb7:	e9 ba 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfbc <isr16>:
c001dfbc:	fa                   	cli    
c001dfbd:	6a 00                	push   0x0
c001dfbf:	6a 10                	push   0x10
c001dfc1:	e9 b0 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfc6 <isr17>:
c001dfc6:	fa                   	cli    
c001dfc7:	6a 00                	push   0x0
c001dfc9:	6a 11                	push   0x11
c001dfcb:	e9 a6 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfd0 <isr18>:
c001dfd0:	fa                   	cli    
c001dfd1:	6a 00                	push   0x0
c001dfd3:	6a 12                	push   0x12
c001dfd5:	e9 9c 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfda <irq3>:
c001dfda:	fa                   	cli    
c001dfdb:	6a 00                	push   0x0
c001dfdd:	6a 23                	push   0x23
c001dfdf:	e9 92 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfe4 <irq4>:
c001dfe4:	fa                   	cli    
c001dfe5:	6a 00                	push   0x0
c001dfe7:	6a 24                	push   0x24
c001dfe9:	e9 88 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfee <irq5>:
c001dfee:	fa                   	cli    
c001dfef:	6a 00                	push   0x0
c001dff1:	6a 25                	push   0x25
c001dff3:	e9 7e 00 00 00       	jmp    c001e076 <int_common_stub>

c001dff8 <irq6>:
c001dff8:	fa                   	cli    
c001dff9:	6a 00                	push   0x0
c001dffb:	6a 26                	push   0x26
c001dffd:	e9 74 00 00 00       	jmp    c001e076 <int_common_stub>

c001e002 <irq7>:
c001e002:	fa                   	cli    
c001e003:	6a 00                	push   0x0
c001e005:	6a 27                	push   0x27
c001e007:	e9 6a 00 00 00       	jmp    c001e076 <int_common_stub>

c001e00c <irq8>:
c001e00c:	fa                   	cli    
c001e00d:	6a 00                	push   0x0
c001e00f:	6a 28                	push   0x28
c001e011:	e9 60 00 00 00       	jmp    c001e076 <int_common_stub>

c001e016 <irq9>:
c001e016:	fa                   	cli    
c001e017:	6a 00                	push   0x0
c001e019:	6a 29                	push   0x29
c001e01b:	e9 56 00 00 00       	jmp    c001e076 <int_common_stub>

c001e020 <irq10>:
c001e020:	fa                   	cli    
c001e021:	6a 00                	push   0x0
c001e023:	6a 2a                	push   0x2a
c001e025:	e9 4c 00 00 00       	jmp    c001e076 <int_common_stub>

c001e02a <irq11>:
c001e02a:	fa                   	cli    
c001e02b:	6a 00                	push   0x0
c001e02d:	6a 2b                	push   0x2b
c001e02f:	e9 42 00 00 00       	jmp    c001e076 <int_common_stub>

c001e034 <irq12>:
c001e034:	fa                   	cli    
c001e035:	6a 00                	push   0x0
c001e037:	6a 2c                	push   0x2c
c001e039:	e9 38 00 00 00       	jmp    c001e076 <int_common_stub>

c001e03e <irq13>:
c001e03e:	fa                   	cli    
c001e03f:	6a 00                	push   0x0
c001e041:	6a 2d                	push   0x2d
c001e043:	e9 2e 00 00 00       	jmp    c001e076 <int_common_stub>

c001e048 <irq14>:
c001e048:	fa                   	cli    
c001e049:	6a 00                	push   0x0
c001e04b:	6a 2e                	push   0x2e
c001e04d:	e9 24 00 00 00       	jmp    c001e076 <int_common_stub>

c001e052 <irq15>:
c001e052:	fa                   	cli    
c001e053:	6a 00                	push   0x0
c001e055:	6a 2f                	push   0x2f
c001e057:	e9 1a 00 00 00       	jmp    c001e076 <int_common_stub>

c001e05c <irq1>:
c001e05c:	fa                   	cli    
c001e05d:	6a 00                	push   0x0
c001e05f:	6a 21                	push   0x21
c001e061:	eb 13                	jmp    c001e076 <int_common_stub>

c001e063 <irq2>:
c001e063:	fa                   	cli    
c001e064:	6a 00                	push   0x0
c001e066:	6a 22                	push   0x22
c001e068:	eb 0c                	jmp    c001e076 <int_common_stub>

c001e06a <isr96>:
c001e06a:	6a 00                	push   0x0
c001e06c:	6a 60                	push   0x60
c001e06e:	fb                   	sti    
c001e06f:	eb 37                	jmp    c001e0a8 <syscall_common_stub>

c001e071 <irq0>:
c001e071:	fa                   	cli    
c001e072:	6a 00                	push   0x0
c001e074:	6a 20                	push   0x20

c001e076 <int_common_stub>:
c001e076:	60                   	pusha  
c001e077:	1e                   	push   ds
c001e078:	06                   	push   es
c001e079:	0f a0                	push   fs
c001e07b:	0f a8                	push   gs
c001e07d:	66 b8 10 00          	mov    ax,0x10
c001e081:	66 8e d8             	mov    ds,ax
c001e084:	66 8e c0             	mov    es,ax
c001e087:	66 8e e0             	mov    fs,ax
c001e08a:	66 8e e8             	mov    gs,ax
c001e08d:	54                   	push   esp
c001e08e:	fc                   	cld    
c001e08f:	e8 cc e1 fe ff       	call   c000c260 <int_handler>
c001e094:	81 c4 04 00 00 00    	add    esp,0x4
c001e09a:	0f a9                	pop    gs
c001e09c:	0f a1                	pop    fs
c001e09e:	07                   	pop    es
c001e09f:	1f                   	pop    ds
c001e0a0:	61                   	popa   
c001e0a1:	81 c4 08 00 00 00    	add    esp,0x8
c001e0a7:	cf                   	iret   

c001e0a8 <syscall_common_stub>:
c001e0a8:	60                   	pusha  
c001e0a9:	1e                   	push   ds
c001e0aa:	06                   	push   es
c001e0ab:	0f a0                	push   fs
c001e0ad:	0f a8                	push   gs
c001e0af:	66 b8 10 00          	mov    ax,0x10
c001e0b3:	66 8e d8             	mov    ds,ax
c001e0b6:	66 8e c0             	mov    es,ax
c001e0b9:	66 8e e0             	mov    fs,ax
c001e0bc:	66 8e e8             	mov    gs,ax
c001e0bf:	54                   	push   esp
c001e0c0:	fc                   	cld    
c001e0c1:	e8 9a e1 fe ff       	call   c000c260 <int_handler>
c001e0c6:	81 c4 04 00 00 00    	add    esp,0x4
c001e0cc:	0f a9                	pop    gs
c001e0ce:	0f a1                	pop    fs
c001e0d0:	07                   	pop    es
c001e0d1:	1f                   	pop    ds
c001e0d2:	e8 04 2d ff ff       	call   c0010ddb <KiCheckSignalZ>
c001e0d7:	3d 00 00 00 00       	cmp    eax,0x0
c001e0dc:	0f 84 c0 00 00 00    	je     c001e1a2 <skipSignals>
c001e0e2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e0e7:	61                   	popa   
c001e0e8:	53                   	push   ebx
c001e0e9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e0ef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e0f2:	5b                   	pop    ebx
c001e0f3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e0f8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e0fb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e0fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e101:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e104:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e107:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e10a:	81 c4 08 00 00 00    	add    esp,0x8
c001e110:	5e                   	pop    esi
c001e111:	5b                   	pop    ebx
c001e112:	59                   	pop    ecx
c001e113:	5a                   	pop    edx
c001e114:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e117:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e11a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e11d:	52                   	push   edx
c001e11e:	51                   	push   ecx
c001e11f:	53                   	push   ebx
c001e120:	56                   	push   esi
c001e121:	81 ec 08 00 00 00    	sub    esp,0x8
c001e127:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e12a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e12d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e130:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e133:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e136:	60                   	pusha  
c001e137:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e13d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e140:	89 e3                	mov    ebx,esp
c001e142:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e145:	52                   	push   edx
c001e146:	68 66 e1 01 c0       	push   0xc001e166
c001e14b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e14e:	89 dc                	mov    esp,ebx
c001e150:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e153:	68 23 00 00 00       	push   0x23
c001e158:	51                   	push   ecx
c001e159:	68 02 02 00 00       	push   0x202
c001e15e:	68 1b 00 00 00       	push   0x1b
c001e163:	ff 36                	push   DWORD PTR [esi]
c001e165:	cf                   	iret   

c001e166 <finishSignal>:
c001e166:	cd 0f                	int    0xf

c001e168 <finishSignal2>:
c001e168:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e16e:	e8 e5 2c ff ff       	call   c0010e58 <KiFinishSignalZ>
c001e173:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e179:	68 23 00 00 00       	push   0x23
c001e17e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e181:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e184:	68 1b 00 00 00       	push   0x1b
c001e189:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e18c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e18f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e192:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e195:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e198:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e19b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e19e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e1a1:	cf                   	iret   

c001e1a2 <skipSignals>:
c001e1a2:	61                   	popa   
c001e1a3:	81 c4 08 00 00 00    	add    esp,0x8
c001e1a9:	cf                   	iret   
c001e1aa:	90                   	nop
c001e1ab:	90                   	nop

c001e1ac <irq16>:
c001e1ac:	fa                   	cli    
c001e1ad:	6a 00                	push   0x0
c001e1af:	6a 30                	push   0x30
c001e1b1:	e9 c0 fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1b6 <irq17>:
c001e1b6:	fa                   	cli    
c001e1b7:	6a 00                	push   0x0
c001e1b9:	6a 31                	push   0x31
c001e1bb:	e9 b6 fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1c0 <irq18>:
c001e1c0:	fa                   	cli    
c001e1c1:	6a 00                	push   0x0
c001e1c3:	6a 32                	push   0x32
c001e1c5:	e9 ac fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1ca <irq19>:
c001e1ca:	fa                   	cli    
c001e1cb:	6a 00                	push   0x0
c001e1cd:	6a 33                	push   0x33
c001e1cf:	e9 a2 fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1d4 <irq20>:
c001e1d4:	fa                   	cli    
c001e1d5:	6a 00                	push   0x0
c001e1d7:	6a 34                	push   0x34
c001e1d9:	e9 98 fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1de <irq21>:
c001e1de:	fa                   	cli    
c001e1df:	6a 00                	push   0x0
c001e1e1:	6a 35                	push   0x35
c001e1e3:	e9 8e fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1e8 <irq22>:
c001e1e8:	fa                   	cli    
c001e1e9:	6a 00                	push   0x0
c001e1eb:	6a 36                	push   0x36
c001e1ed:	e9 84 fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1f2 <irq23>:
c001e1f2:	fa                   	cli    
c001e1f3:	6a 00                	push   0x0
c001e1f5:	6a 37                	push   0x37
c001e1f7:	e9 7a fe ff ff       	jmp    c001e076 <int_common_stub>
c001e1fc:	66 90                	xchg   ax,ax
c001e1fe:	66 90                	xchg   ax,ax

c001e200 <i386GetRDRAND>:
c001e200:	b9 64 00 00 00       	mov    ecx,0x64

c001e205 <retry>:
c001e205:	0f c7 f0             	rdrand eax
c001e208:	72 05                	jb     c001e20f <retry.done>
c001e20a:	e2 f9                	loop   c001e205 <retry>

c001e20c <retry.fail>:
c001e20c:	31 c0                	xor    eax,eax
c001e20e:	c3                   	ret    

c001e20f <retry.done>:
c001e20f:	c3                   	ret    

c001e210 <absolutelyNoChanceInHell>:
c001e210:	b8 01 00 00 00       	mov    eax,0x1
c001e215:	0f a2                	cpuid  
c001e217:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e21d:	74 06                	je     c001e225 <sseDetect.noSSE>
c001e21f:	b8 01 00 00 00       	mov    eax,0x1
c001e224:	c3                   	ret    

c001e225 <sseDetect.noSSE>:
c001e225:	31 c0                	xor    eax,eax
c001e227:	c3                   	ret    

c001e228 <sseSave>:
c001e228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e22c:	0f ae 00             	fxsave [eax]
c001e22f:	c3                   	ret    

c001e230 <sseLoad>:
c001e230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e234:	0f ae 08             	fxrstor [eax]
c001e237:	c3                   	ret    

c001e238 <sseInit>:
c001e238:	e8 42 00 00 00       	call   c001e27f <x87Init>
c001e23d:	0f 20 e0             	mov    eax,cr4
c001e240:	66 0d 00 06          	or     ax,0x600
c001e244:	0f 22 e0             	mov    cr4,eax
c001e247:	c3                   	ret    

c001e248 <sseClose>:
c001e248:	c3                   	ret    
c001e249:	66 90                	xchg   ax,ax
c001e24b:	66 90                	xchg   ax,ax
c001e24d:	66 90                	xchg   ax,ax
c001e24f:	90                   	nop

c001e250 <value_37F>:
c001e250:	7f 03                	jg     c001e255 <value_37A+0x1>

c001e252 <value_37E>:
c001e252:	7e 03                	jle    c001e257 <x87Detect+0x1>

c001e254 <value_37A>:
c001e254:	7a 03                	jp     c001e259 <x87Detect+0x3>

c001e256 <x87Detect>:
c001e256:	b8 01 00 00 00       	mov    eax,0x1
c001e25b:	0f a2                	cpuid  
c001e25d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e263:	74 06                	je     c001e26b <x87Detect.nox87>
c001e265:	b8 01 00 00 00       	mov    eax,0x1
c001e26a:	c3                   	ret    

c001e26b <x87Detect.nox87>:
c001e26b:	b8 00 00 00 00       	mov    eax,0x0
c001e270:	c3                   	ret    

c001e271 <x87Save>:
c001e271:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e275:	dd 30                	fnsave [eax]
c001e277:	c3                   	ret    

c001e278 <x87Load>:
c001e278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e27c:	dd 20                	frstor [eax]
c001e27e:	c3                   	ret    

c001e27f <x87Init>:
c001e27f:	0f 20 c0             	mov    eax,cr0
c001e282:	66 25 fb ff          	and    ax,0xfffb
c001e286:	66 0d 22 00          	or     ax,0x22
c001e28a:	0f 22 c0             	mov    cr0,eax
c001e28d:	db e3                	fninit 
c001e28f:	0f 06                	clts   
c001e291:	d9 2d 54 e2 01 c0    	fldcw  WORD PTR ds:0xc001e254
c001e297:	c3                   	ret    

c001e298 <x87Close>:
c001e298:	c3                   	ret    
c001e299:	66 90                	xchg   ax,ax
c001e29b:	90                   	nop

c001e29c <__do_global_ctors_aux>:
c001e29c:	a1 50 f2 01 c0       	mov    eax,ds:0xc001f250
c001e2a1:	83 f8 ff             	cmp    eax,0xffffffff
c001e2a4:	74 1a                	je     c001e2c0 <__do_global_ctors_aux+0x24>
c001e2a6:	55                   	push   ebp
c001e2a7:	89 e5                	mov    ebp,esp
c001e2a9:	53                   	push   ebx
c001e2aa:	52                   	push   edx
c001e2ab:	bb 50 f2 01 c0       	mov    ebx,0xc001f250
c001e2b0:	ff d0                	call   eax
c001e2b2:	83 eb 04             	sub    ebx,0x4
c001e2b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e2b7:	83 f8 ff             	cmp    eax,0xffffffff
c001e2ba:	75 f4                	jne    c001e2b0 <__do_global_ctors_aux+0x14>
c001e2bc:	58                   	pop    eax
c001e2bd:	5b                   	pop    ebx
c001e2be:	5d                   	pop    ebp
c001e2bf:	c3                   	ret    
c001e2c0:	c3                   	ret    
c001e2c1:	66 90                	xchg   ax,ax
c001e2c3:	90                   	nop

c001e2c4 <__divdi3>:
c001e2c4:	55                   	push   ebp
c001e2c5:	57                   	push   edi
c001e2c6:	56                   	push   esi
c001e2c7:	53                   	push   ebx
c001e2c8:	83 ec 1c             	sub    esp,0x1c
c001e2cb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e2cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e2d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e2d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e2da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e2de:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e2e2:	85 db                	test   ebx,ebx
c001e2e4:	0f 88 8e 00 00 00    	js     c001e378 <__divdi3+0xb4>
c001e2ea:	89 dd                	mov    ebp,ebx
c001e2ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e2f4:	89 d3                	mov    ebx,edx
c001e2f6:	85 d2                	test   edx,edx
c001e2f8:	79 0d                	jns    c001e307 <__divdi3+0x43>
c001e2fa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e2fe:	f7 d8                	neg    eax
c001e300:	83 d2 00             	adc    edx,0x0
c001e303:	f7 da                	neg    edx
c001e305:	89 d3                	mov    ebx,edx
c001e307:	89 c7                	mov    edi,eax
c001e309:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e30c:	85 db                	test   ebx,ebx
c001e30e:	75 48                	jne    c001e358 <__divdi3+0x94>
c001e310:	39 ef                	cmp    edi,ebp
c001e312:	76 24                	jbe    c001e338 <__divdi3+0x74>
c001e314:	89 ea                	mov    edx,ebp
c001e316:	f7 f7                	div    edi
c001e318:	89 c1                	mov    ecx,eax
c001e31a:	31 f6                	xor    esi,esi
c001e31c:	89 c8                	mov    eax,ecx
c001e31e:	89 f2                	mov    edx,esi
c001e320:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e324:	85 c9                	test   ecx,ecx
c001e326:	74 07                	je     c001e32f <__divdi3+0x6b>
c001e328:	f7 d8                	neg    eax
c001e32a:	83 d2 00             	adc    edx,0x0
c001e32d:	f7 da                	neg    edx
c001e32f:	83 c4 1c             	add    esp,0x1c
c001e332:	5b                   	pop    ebx
c001e333:	5e                   	pop    esi
c001e334:	5f                   	pop    edi
c001e335:	5d                   	pop    ebp
c001e336:	c3                   	ret    
c001e337:	90                   	nop
c001e338:	85 ff                	test   edi,edi
c001e33a:	75 0b                	jne    c001e347 <__divdi3+0x83>
c001e33c:	b8 01 00 00 00       	mov    eax,0x1
c001e341:	31 d2                	xor    edx,edx
c001e343:	f7 f3                	div    ebx
c001e345:	89 c7                	mov    edi,eax
c001e347:	31 d2                	xor    edx,edx
c001e349:	89 e8                	mov    eax,ebp
c001e34b:	f7 f7                	div    edi
c001e34d:	89 c6                	mov    esi,eax
c001e34f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e352:	f7 f7                	div    edi
c001e354:	89 c1                	mov    ecx,eax
c001e356:	eb c4                	jmp    c001e31c <__divdi3+0x58>
c001e358:	39 eb                	cmp    ebx,ebp
c001e35a:	77 3c                	ja     c001e398 <__divdi3+0xd4>
c001e35c:	0f bd f3             	bsr    esi,ebx
c001e35f:	83 f6 1f             	xor    esi,0x1f
c001e362:	75 40                	jne    c001e3a4 <__divdi3+0xe0>
c001e364:	39 eb                	cmp    ebx,ebp
c001e366:	72 09                	jb     c001e371 <__divdi3+0xad>
c001e368:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e36b:	0f 87 97 00 00 00    	ja     c001e408 <__divdi3+0x144>
c001e371:	b9 01 00 00 00       	mov    ecx,0x1
c001e376:	eb a4                	jmp    c001e31c <__divdi3+0x58>
c001e378:	f7 d9                	neg    ecx
c001e37a:	83 d3 00             	adc    ebx,0x0
c001e37d:	f7 db                	neg    ebx
c001e37f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e382:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e386:	89 dd                	mov    ebp,ebx
c001e388:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e390:	e9 5f ff ff ff       	jmp    c001e2f4 <__divdi3+0x30>
c001e395:	8d 76 00             	lea    esi,[esi+0x0]
c001e398:	31 f6                	xor    esi,esi
c001e39a:	31 c9                	xor    ecx,ecx
c001e39c:	e9 7b ff ff ff       	jmp    c001e31c <__divdi3+0x58>
c001e3a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3a4:	b8 20 00 00 00       	mov    eax,0x20
c001e3a9:	29 f0                	sub    eax,esi
c001e3ab:	89 f1                	mov    ecx,esi
c001e3ad:	d3 e3                	shl    ebx,cl
c001e3af:	89 fa                	mov    edx,edi
c001e3b1:	88 c1                	mov    cl,al
c001e3b3:	d3 ea                	shr    edx,cl
c001e3b5:	09 da                	or     edx,ebx
c001e3b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3bb:	89 f1                	mov    ecx,esi
c001e3bd:	d3 e7                	shl    edi,cl
c001e3bf:	89 eb                	mov    ebx,ebp
c001e3c1:	88 c1                	mov    cl,al
c001e3c3:	d3 eb                	shr    ebx,cl
c001e3c5:	89 f1                	mov    ecx,esi
c001e3c7:	d3 e5                	shl    ebp,cl
c001e3c9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e3cc:	88 c1                	mov    cl,al
c001e3ce:	d3 ea                	shr    edx,cl
c001e3d0:	09 d5                	or     ebp,edx
c001e3d2:	89 e8                	mov    eax,ebp
c001e3d4:	89 da                	mov    edx,ebx
c001e3d6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e3da:	89 d3                	mov    ebx,edx
c001e3dc:	89 c5                	mov    ebp,eax
c001e3de:	f7 e7                	mul    edi
c001e3e0:	39 d3                	cmp    ebx,edx
c001e3e2:	72 18                	jb     c001e3fc <__divdi3+0x138>
c001e3e4:	74 0a                	je     c001e3f0 <__divdi3+0x12c>
c001e3e6:	89 e9                	mov    ecx,ebp
c001e3e8:	31 f6                	xor    esi,esi
c001e3ea:	e9 2d ff ff ff       	jmp    c001e31c <__divdi3+0x58>
c001e3ef:	90                   	nop
c001e3f0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e3f3:	89 f1                	mov    ecx,esi
c001e3f5:	d3 e7                	shl    edi,cl
c001e3f7:	39 c7                	cmp    edi,eax
c001e3f9:	73 eb                	jae    c001e3e6 <__divdi3+0x122>
c001e3fb:	90                   	nop
c001e3fc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e3ff:	31 f6                	xor    esi,esi
c001e401:	e9 16 ff ff ff       	jmp    c001e31c <__divdi3+0x58>
c001e406:	66 90                	xchg   ax,ax
c001e408:	31 c9                	xor    ecx,ecx
c001e40a:	e9 0d ff ff ff       	jmp    c001e31c <__divdi3+0x58>
c001e40f:	90                   	nop

c001e410 <__moddi3>:
c001e410:	55                   	push   ebp
c001e411:	57                   	push   edi
c001e412:	56                   	push   esi
c001e413:	53                   	push   ebx
c001e414:	83 ec 2c             	sub    esp,0x2c
c001e417:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e41b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e41f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e423:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e427:	85 db                	test   ebx,ebx
c001e429:	0f 88 85 00 00 00    	js     c001e4b4 <__moddi3+0xa4>
c001e42f:	89 de                	mov    esi,ebx
c001e431:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e439:	89 d7                	mov    edi,edx
c001e43b:	85 d2                	test   edx,edx
c001e43d:	79 09                	jns    c001e448 <__moddi3+0x38>
c001e43f:	f7 d8                	neg    eax
c001e441:	83 d2 00             	adc    edx,0x0
c001e444:	f7 da                	neg    edx
c001e446:	89 d7                	mov    edi,edx
c001e448:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e44c:	89 cd                	mov    ebp,ecx
c001e44e:	85 ff                	test   edi,edi
c001e450:	75 52                	jne    c001e4a4 <__moddi3+0x94>
c001e452:	89 c3                	mov    ebx,eax
c001e454:	39 f0                	cmp    eax,esi
c001e456:	76 24                	jbe    c001e47c <__moddi3+0x6c>
c001e458:	89 c8                	mov    eax,ecx
c001e45a:	89 f2                	mov    edx,esi
c001e45c:	f7 f3                	div    ebx
c001e45e:	89 d6                	mov    esi,edx
c001e460:	89 f0                	mov    eax,esi
c001e462:	31 d2                	xor    edx,edx
c001e464:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e468:	85 c9                	test   ecx,ecx
c001e46a:	74 07                	je     c001e473 <__moddi3+0x63>
c001e46c:	f7 d8                	neg    eax
c001e46e:	83 d2 00             	adc    edx,0x0
c001e471:	f7 da                	neg    edx
c001e473:	83 c4 2c             	add    esp,0x2c
c001e476:	5b                   	pop    ebx
c001e477:	5e                   	pop    esi
c001e478:	5f                   	pop    edi
c001e479:	5d                   	pop    ebp
c001e47a:	c3                   	ret    
c001e47b:	90                   	nop
c001e47c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e480:	85 db                	test   ebx,ebx
c001e482:	75 0d                	jne    c001e491 <__moddi3+0x81>
c001e484:	b8 01 00 00 00       	mov    eax,0x1
c001e489:	31 d2                	xor    edx,edx
c001e48b:	f7 f7                	div    edi
c001e48d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e491:	89 f0                	mov    eax,esi
c001e493:	31 d2                	xor    edx,edx
c001e495:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e499:	f7 f7                	div    edi
c001e49b:	89 e8                	mov    eax,ebp
c001e49d:	f7 f7                	div    edi
c001e49f:	89 d6                	mov    esi,edx
c001e4a1:	eb bd                	jmp    c001e460 <__moddi3+0x50>
c001e4a3:	90                   	nop
c001e4a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e4a8:	39 f7                	cmp    edi,esi
c001e4aa:	76 20                	jbe    c001e4cc <__moddi3+0xbc>
c001e4ac:	89 c8                	mov    eax,ecx
c001e4ae:	89 f2                	mov    edx,esi
c001e4b0:	eb b2                	jmp    c001e464 <__moddi3+0x54>
c001e4b2:	66 90                	xchg   ax,ax
c001e4b4:	f7 d9                	neg    ecx
c001e4b6:	83 d3 00             	adc    ebx,0x0
c001e4b9:	f7 db                	neg    ebx
c001e4bb:	89 de                	mov    esi,ebx
c001e4bd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e4c5:	e9 6f ff ff ff       	jmp    c001e439 <__moddi3+0x29>
c001e4ca:	66 90                	xchg   ax,ax
c001e4cc:	0f bd c7             	bsr    eax,edi
c001e4cf:	83 f0 1f             	xor    eax,0x1f
c001e4d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e4d6:	75 24                	jne    c001e4fc <__moddi3+0xec>
c001e4d8:	39 f7                	cmp    edi,esi
c001e4da:	72 06                	jb     c001e4e2 <__moddi3+0xd2>
c001e4dc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e4e0:	77 0c                	ja     c001e4ee <__moddi3+0xde>
c001e4e2:	89 e9                	mov    ecx,ebp
c001e4e4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e4e8:	19 fe                	sbb    esi,edi
c001e4ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e4ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4f2:	89 f2                	mov    edx,esi
c001e4f4:	e9 6b ff ff ff       	jmp    c001e464 <__moddi3+0x54>
c001e4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001e4fc:	b8 20 00 00 00       	mov    eax,0x20
c001e501:	89 c2                	mov    edx,eax
c001e503:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e507:	29 da                	sub    edx,ebx
c001e509:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e50d:	88 d9                	mov    cl,bl
c001e50f:	d3 e7                	shl    edi,cl
c001e511:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e515:	88 d1                	mov    cl,dl
c001e517:	d3 e8                	shr    eax,cl
c001e519:	09 c7                	or     edi,eax
c001e51b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e51f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e523:	89 d8                	mov    eax,ebx
c001e525:	88 d9                	mov    cl,bl
c001e527:	d3 e7                	shl    edi,cl
c001e529:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e52d:	89 f3                	mov    ebx,esi
c001e52f:	88 d1                	mov    cl,dl
c001e531:	d3 eb                	shr    ebx,cl
c001e533:	89 c7                	mov    edi,eax
c001e535:	88 c1                	mov    cl,al
c001e537:	d3 e6                	shl    esi,cl
c001e539:	89 e8                	mov    eax,ebp
c001e53b:	88 d1                	mov    cl,dl
c001e53d:	d3 e8                	shr    eax,cl
c001e53f:	09 f0                	or     eax,esi
c001e541:	89 f9                	mov    ecx,edi
c001e543:	d3 e5                	shl    ebp,cl
c001e545:	89 da                	mov    edx,ebx
c001e547:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e54b:	89 d3                	mov    ebx,edx
c001e54d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e551:	89 c6                	mov    esi,eax
c001e553:	89 d1                	mov    ecx,edx
c001e555:	39 d3                	cmp    ebx,edx
c001e557:	72 27                	jb     c001e580 <__moddi3+0x170>
c001e559:	74 21                	je     c001e57c <__moddi3+0x16c>
c001e55b:	29 f5                	sub    ebp,esi
c001e55d:	19 cb                	sbb    ebx,ecx
c001e55f:	89 de                	mov    esi,ebx
c001e561:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e565:	d3 e6                	shl    esi,cl
c001e567:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e56b:	89 f9                	mov    ecx,edi
c001e56d:	d3 ed                	shr    ebp,cl
c001e56f:	09 ee                	or     esi,ebp
c001e571:	89 f0                	mov    eax,esi
c001e573:	d3 eb                	shr    ebx,cl
c001e575:	89 da                	mov    edx,ebx
c001e577:	e9 e8 fe ff ff       	jmp    c001e464 <__moddi3+0x54>
c001e57c:	39 c5                	cmp    ebp,eax
c001e57e:	73 db                	jae    c001e55b <__moddi3+0x14b>
c001e580:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e584:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e588:	89 d1                	mov    ecx,edx
c001e58a:	89 c6                	mov    esi,eax
c001e58c:	eb cd                	jmp    c001e55b <__moddi3+0x14b>
c001e58e:	66 90                	xchg   ax,ax

c001e590 <__udivdi3>:
c001e590:	55                   	push   ebp
c001e591:	57                   	push   edi
c001e592:	56                   	push   esi
c001e593:	53                   	push   ebx
c001e594:	83 ec 1c             	sub    esp,0x1c
c001e597:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e59b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e59f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e5a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e5a7:	85 d2                	test   edx,edx
c001e5a9:	75 41                	jne    c001e5ec <__udivdi3+0x5c>
c001e5ab:	39 f7                	cmp    edi,esi
c001e5ad:	76 15                	jbe    c001e5c4 <__udivdi3+0x34>
c001e5af:	89 e8                	mov    eax,ebp
c001e5b1:	89 f2                	mov    edx,esi
c001e5b3:	f7 f7                	div    edi
c001e5b5:	31 db                	xor    ebx,ebx
c001e5b7:	89 da                	mov    edx,ebx
c001e5b9:	83 c4 1c             	add    esp,0x1c
c001e5bc:	5b                   	pop    ebx
c001e5bd:	5e                   	pop    esi
c001e5be:	5f                   	pop    edi
c001e5bf:	5d                   	pop    ebp
c001e5c0:	c3                   	ret    
c001e5c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e5c4:	89 f9                	mov    ecx,edi
c001e5c6:	85 ff                	test   edi,edi
c001e5c8:	75 0b                	jne    c001e5d5 <__udivdi3+0x45>
c001e5ca:	b8 01 00 00 00       	mov    eax,0x1
c001e5cf:	31 d2                	xor    edx,edx
c001e5d1:	f7 f7                	div    edi
c001e5d3:	89 c1                	mov    ecx,eax
c001e5d5:	31 d2                	xor    edx,edx
c001e5d7:	89 f0                	mov    eax,esi
c001e5d9:	f7 f1                	div    ecx
c001e5db:	89 c3                	mov    ebx,eax
c001e5dd:	89 e8                	mov    eax,ebp
c001e5df:	f7 f1                	div    ecx
c001e5e1:	89 da                	mov    edx,ebx
c001e5e3:	83 c4 1c             	add    esp,0x1c
c001e5e6:	5b                   	pop    ebx
c001e5e7:	5e                   	pop    esi
c001e5e8:	5f                   	pop    edi
c001e5e9:	5d                   	pop    ebp
c001e5ea:	c3                   	ret    
c001e5eb:	90                   	nop
c001e5ec:	39 f2                	cmp    edx,esi
c001e5ee:	77 1c                	ja     c001e60c <__udivdi3+0x7c>
c001e5f0:	0f bd da             	bsr    ebx,edx
c001e5f3:	83 f3 1f             	xor    ebx,0x1f
c001e5f6:	75 24                	jne    c001e61c <__udivdi3+0x8c>
c001e5f8:	39 f2                	cmp    edx,esi
c001e5fa:	72 08                	jb     c001e604 <__udivdi3+0x74>
c001e5fc:	39 ef                	cmp    edi,ebp
c001e5fe:	0f 87 84 00 00 00    	ja     c001e688 <__udivdi3+0xf8>
c001e604:	b8 01 00 00 00       	mov    eax,0x1
c001e609:	eb ac                	jmp    c001e5b7 <__udivdi3+0x27>
c001e60b:	90                   	nop
c001e60c:	31 db                	xor    ebx,ebx
c001e60e:	31 c0                	xor    eax,eax
c001e610:	89 da                	mov    edx,ebx
c001e612:	83 c4 1c             	add    esp,0x1c
c001e615:	5b                   	pop    ebx
c001e616:	5e                   	pop    esi
c001e617:	5f                   	pop    edi
c001e618:	5d                   	pop    ebp
c001e619:	c3                   	ret    
c001e61a:	66 90                	xchg   ax,ax
c001e61c:	b8 20 00 00 00       	mov    eax,0x20
c001e621:	29 d8                	sub    eax,ebx
c001e623:	88 d9                	mov    cl,bl
c001e625:	d3 e2                	shl    edx,cl
c001e627:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e62b:	89 fa                	mov    edx,edi
c001e62d:	88 c1                	mov    cl,al
c001e62f:	d3 ea                	shr    edx,cl
c001e631:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e635:	09 d1                	or     ecx,edx
c001e637:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e63b:	88 d9                	mov    cl,bl
c001e63d:	d3 e7                	shl    edi,cl
c001e63f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e643:	89 f7                	mov    edi,esi
c001e645:	88 c1                	mov    cl,al
c001e647:	d3 ef                	shr    edi,cl
c001e649:	88 d9                	mov    cl,bl
c001e64b:	d3 e6                	shl    esi,cl
c001e64d:	89 ea                	mov    edx,ebp
c001e64f:	88 c1                	mov    cl,al
c001e651:	d3 ea                	shr    edx,cl
c001e653:	09 d6                	or     esi,edx
c001e655:	89 f0                	mov    eax,esi
c001e657:	89 fa                	mov    edx,edi
c001e659:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e65d:	89 d7                	mov    edi,edx
c001e65f:	89 c6                	mov    esi,eax
c001e661:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e665:	39 d7                	cmp    edi,edx
c001e667:	72 13                	jb     c001e67c <__udivdi3+0xec>
c001e669:	74 09                	je     c001e674 <__udivdi3+0xe4>
c001e66b:	89 f0                	mov    eax,esi
c001e66d:	31 db                	xor    ebx,ebx
c001e66f:	e9 43 ff ff ff       	jmp    c001e5b7 <__udivdi3+0x27>
c001e674:	88 d9                	mov    cl,bl
c001e676:	d3 e5                	shl    ebp,cl
c001e678:	39 c5                	cmp    ebp,eax
c001e67a:	73 ef                	jae    c001e66b <__udivdi3+0xdb>
c001e67c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e67f:	31 db                	xor    ebx,ebx
c001e681:	e9 31 ff ff ff       	jmp    c001e5b7 <__udivdi3+0x27>
c001e686:	66 90                	xchg   ax,ax
c001e688:	31 c0                	xor    eax,eax
c001e68a:	e9 28 ff ff ff       	jmp    c001e5b7 <__udivdi3+0x27>
c001e68f:	90                   	nop

c001e690 <__umoddi3>:
c001e690:	55                   	push   ebp
c001e691:	57                   	push   edi
c001e692:	56                   	push   esi
c001e693:	53                   	push   ebx
c001e694:	83 ec 1c             	sub    esp,0x1c
c001e697:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e69b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e69f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e6a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e6a7:	89 da                	mov    edx,ebx
c001e6a9:	85 c0                	test   eax,eax
c001e6ab:	75 37                	jne    c001e6e4 <__umoddi3+0x54>
c001e6ad:	39 df                	cmp    edi,ebx
c001e6af:	76 13                	jbe    c001e6c4 <__umoddi3+0x34>
c001e6b1:	89 f0                	mov    eax,esi
c001e6b3:	f7 f7                	div    edi
c001e6b5:	89 d0                	mov    eax,edx
c001e6b7:	31 d2                	xor    edx,edx
c001e6b9:	83 c4 1c             	add    esp,0x1c
c001e6bc:	5b                   	pop    ebx
c001e6bd:	5e                   	pop    esi
c001e6be:	5f                   	pop    edi
c001e6bf:	5d                   	pop    ebp
c001e6c0:	c3                   	ret    
c001e6c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e6c4:	89 fd                	mov    ebp,edi
c001e6c6:	85 ff                	test   edi,edi
c001e6c8:	75 0b                	jne    c001e6d5 <__umoddi3+0x45>
c001e6ca:	b8 01 00 00 00       	mov    eax,0x1
c001e6cf:	31 d2                	xor    edx,edx
c001e6d1:	f7 f7                	div    edi
c001e6d3:	89 c5                	mov    ebp,eax
c001e6d5:	89 d8                	mov    eax,ebx
c001e6d7:	31 d2                	xor    edx,edx
c001e6d9:	f7 f5                	div    ebp
c001e6db:	89 f0                	mov    eax,esi
c001e6dd:	f7 f5                	div    ebp
c001e6df:	89 d0                	mov    eax,edx
c001e6e1:	eb d4                	jmp    c001e6b7 <__umoddi3+0x27>
c001e6e3:	90                   	nop
c001e6e4:	89 f1                	mov    ecx,esi
c001e6e6:	39 d8                	cmp    eax,ebx
c001e6e8:	76 0a                	jbe    c001e6f4 <__umoddi3+0x64>
c001e6ea:	89 f0                	mov    eax,esi
c001e6ec:	83 c4 1c             	add    esp,0x1c
c001e6ef:	5b                   	pop    ebx
c001e6f0:	5e                   	pop    esi
c001e6f1:	5f                   	pop    edi
c001e6f2:	5d                   	pop    ebp
c001e6f3:	c3                   	ret    
c001e6f4:	0f bd e8             	bsr    ebp,eax
c001e6f7:	83 f5 1f             	xor    ebp,0x1f
c001e6fa:	75 1c                	jne    c001e718 <__umoddi3+0x88>
c001e6fc:	39 d8                	cmp    eax,ebx
c001e6fe:	72 04                	jb     c001e704 <__umoddi3+0x74>
c001e700:	39 f7                	cmp    edi,esi
c001e702:	77 08                	ja     c001e70c <__umoddi3+0x7c>
c001e704:	89 da                	mov    edx,ebx
c001e706:	29 fe                	sub    esi,edi
c001e708:	19 c2                	sbb    edx,eax
c001e70a:	89 f1                	mov    ecx,esi
c001e70c:	89 c8                	mov    eax,ecx
c001e70e:	83 c4 1c             	add    esp,0x1c
c001e711:	5b                   	pop    ebx
c001e712:	5e                   	pop    esi
c001e713:	5f                   	pop    edi
c001e714:	5d                   	pop    ebp
c001e715:	c3                   	ret    
c001e716:	66 90                	xchg   ax,ax
c001e718:	ba 20 00 00 00       	mov    edx,0x20
c001e71d:	29 ea                	sub    edx,ebp
c001e71f:	89 e9                	mov    ecx,ebp
c001e721:	d3 e0                	shl    eax,cl
c001e723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e727:	89 f8                	mov    eax,edi
c001e729:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e72d:	88 d1                	mov    cl,dl
c001e72f:	d3 e8                	shr    eax,cl
c001e731:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e735:	09 c1                	or     ecx,eax
c001e737:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e73b:	89 e9                	mov    ecx,ebp
c001e73d:	d3 e7                	shl    edi,cl
c001e73f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e743:	89 d8                	mov    eax,ebx
c001e745:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e749:	88 d1                	mov    cl,dl
c001e74b:	d3 e8                	shr    eax,cl
c001e74d:	89 c7                	mov    edi,eax
c001e74f:	89 e9                	mov    ecx,ebp
c001e751:	d3 e3                	shl    ebx,cl
c001e753:	89 f0                	mov    eax,esi
c001e755:	88 d1                	mov    cl,dl
c001e757:	d3 e8                	shr    eax,cl
c001e759:	09 d8                	or     eax,ebx
c001e75b:	89 e9                	mov    ecx,ebp
c001e75d:	d3 e6                	shl    esi,cl
c001e75f:	89 f3                	mov    ebx,esi
c001e761:	89 fa                	mov    edx,edi
c001e763:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e767:	89 d1                	mov    ecx,edx
c001e769:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e76d:	89 c6                	mov    esi,eax
c001e76f:	89 d7                	mov    edi,edx
c001e771:	39 d1                	cmp    ecx,edx
c001e773:	72 27                	jb     c001e79c <__umoddi3+0x10c>
c001e775:	74 21                	je     c001e798 <__umoddi3+0x108>
c001e777:	89 ca                	mov    edx,ecx
c001e779:	29 f3                	sub    ebx,esi
c001e77b:	19 fa                	sbb    edx,edi
c001e77d:	89 d0                	mov    eax,edx
c001e77f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e783:	d3 e0                	shl    eax,cl
c001e785:	89 e9                	mov    ecx,ebp
c001e787:	d3 eb                	shr    ebx,cl
c001e789:	09 d8                	or     eax,ebx
c001e78b:	d3 ea                	shr    edx,cl
c001e78d:	83 c4 1c             	add    esp,0x1c
c001e790:	5b                   	pop    ebx
c001e791:	5e                   	pop    esi
c001e792:	5f                   	pop    edi
c001e793:	5d                   	pop    ebp
c001e794:	c3                   	ret    
c001e795:	8d 76 00             	lea    esi,[esi+0x0]
c001e798:	39 c3                	cmp    ebx,eax
c001e79a:	73 db                	jae    c001e777 <__umoddi3+0xe7>
c001e79c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e7a0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e7a4:	89 d7                	mov    edi,edx
c001e7a6:	89 c6                	mov    esi,eax
c001e7a8:	eb cd                	jmp    c001e777 <__umoddi3+0xe7>

Disassembly of section .init:

c001e7aa <_init>:
c001e7aa:	55                   	push   ebp
c001e7ab:	89 e5                	mov    ebp,esp
c001e7ad:	e8 42 19 fe ff       	call   c00000f4 <frame_dummy>
c001e7b2:	e8 e5 fa ff ff       	call   c001e29c <__do_global_ctors_aux>
c001e7b7:	5d                   	pop    ebp
c001e7b8:	c3                   	ret    

Disassembly of section .fini:

c001e7b9 <_fini>:
c001e7b9:	55                   	push   ebp
c001e7ba:	89 e5                	mov    ebp,esp
c001e7bc:	e8 c3 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e7c1:	5d                   	pop    ebp
c001e7c2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e7c4 <Computer::~Computer()>:
c001e7c4:	83 ec 0c             	sub    esp,0xc
c001e7c7:	ba d4 fa 01 c0       	mov    edx,0xc001fad4
c001e7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7d0:	89 10                	mov    DWORD PTR [eax],edx
c001e7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7d6:	83 ec 0c             	sub    esp,0xc
c001e7d9:	50                   	push   eax
c001e7da:	e8 d7 d4 fe ff       	call   c000bcb6 <Device::~Device()>
c001e7df:	83 c4 10             	add    esp,0x10
c001e7e2:	90                   	nop
c001e7e3:	83 c4 0c             	add    esp,0xc
c001e7e6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e7e8 <Computer::~Computer()>:
c001e7e8:	83 ec 0c             	sub    esp,0xc
c001e7eb:	83 ec 0c             	sub    esp,0xc
c001e7ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7f2:	e8 cd ff ff ff       	call   c001e7c4 <Computer::~Computer()>
c001e7f7:	83 c4 10             	add    esp,0x10
c001e7fa:	83 ec 08             	sub    esp,0x8
c001e7fd:	68 70 01 00 00       	push   0x170
c001e802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e806:	e8 48 c0 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001e80b:	83 c4 10             	add    esp,0x10
c001e80e:	83 c4 0c             	add    esp,0xc
c001e811:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e812 <idleCommon()>:
c001e812:	83 ec 0c             	sub    esp,0xc
c001e815:	fa                   	cli    
c001e816:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e81c:	e8 af 67 ff ff       	call   c0014fd0 <schedule()>
c001e821:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e826:	48                   	dec    eax
c001e827:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e82c:	75 01                	jne    c001e82f <idleCommon()+0x1d>
c001e82e:	fb                   	sti    
c001e82f:	83 c4 0c             	add    esp,0xc
c001e832:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e834 <LinkedList<UnixFile>::~LinkedList()>:
c001e834:	90                   	nop
c001e835:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e836 <LinkedList<UnixFile>::LinkedList()>:
c001e836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e83a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e844:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e84b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e84f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e85a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e864:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e86b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e86f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e876:	90                   	nop
c001e877:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e878 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e878:	83 ec 0c             	sub    esp,0xc
c001e87b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e880:	75 10                	jne    c001e892 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e882:	83 ec 0c             	sub    esp,0xc
c001e885:	68 e8 fc 01 c0       	push   0xc001fce8
c001e88a:	e8 46 1f ff ff       	call   c00107d5 <KePanic(char const*)>
c001e88f:	83 c4 10             	add    esp,0x10
c001e892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e896:	8b 00                	mov    eax,DWORD PTR [eax]
c001e898:	85 c0                	test   eax,eax
c001e89a:	74 34                	je     c001e8d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8a3:	85 c0                	test   eax,eax
c001e8a5:	74 29                	je     c001e8d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8ce:	eb 65                	jmp    c001e935 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8d6:	85 c0                	test   eax,eax
c001e8d8:	75 4b                	jne    c001e925 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8e1:	85 c0                	test   eax,eax
c001e8e3:	75 40                	jne    c001e925 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e8e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8ed:	89 10                	mov    DWORD PTR [eax],edx
c001e8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e901:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e90f:	85 c0                	test   eax,eax
c001e911:	74 22                	je     c001e935 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e913:	83 ec 0c             	sub    esp,0xc
c001e916:	68 0a fd 01 c0       	push   0xc001fd0a
c001e91b:	e8 b5 1e ff ff       	call   c00107d5 <KePanic(char const*)>
c001e920:	83 c4 10             	add    esp,0x10
c001e923:	eb 10                	jmp    c001e935 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e925:	83 ec 0c             	sub    esp,0xc
c001e928:	68 14 fd 01 c0       	push   0xc001fd14
c001e92d:	e8 a3 1e ff ff       	call   c00107d5 <KePanic(char const*)>
c001e932:	83 c4 10             	add    esp,0x10
c001e935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e939:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e93c:	8d 50 01             	lea    edx,[eax+0x1]
c001e93f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e943:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e946:	90                   	nop
c001e947:	83 c4 0c             	add    esp,0xc
c001e94a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e94c <LinkedList<UnixFile>::getFirstElement()>:
c001e94c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e950:	8b 00                	mov    eax,DWORD PTR [eax]
c001e952:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e954 <LinkedList<UnixFile>::removeFirst()>:
c001e954:	83 ec 0c             	sub    esp,0xc
c001e957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e95d:	85 c0                	test   eax,eax
c001e95f:	75 12                	jne    c001e973 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e961:	83 ec 0c             	sub    esp,0xc
c001e964:	68 20 fd 01 c0       	push   0xc001fd20
c001e969:	e8 67 1e ff ff       	call   c00107d5 <KePanic(char const*)>
c001e96e:	83 c4 10             	add    esp,0x10
c001e971:	eb 7e                	jmp    c001e9f1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e977:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e97a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e97d:	85 c0                	test   eax,eax
c001e97f:	74 10                	je     c001e991 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e981:	83 ec 0c             	sub    esp,0xc
c001e984:	68 6b fd 01 c0       	push   0xc001fd6b
c001e989:	e8 47 1e ff ff       	call   c00107d5 <KePanic(char const*)>
c001e98e:	83 c4 10             	add    esp,0x10
c001e991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e995:	8b 00                	mov    eax,DWORD PTR [eax]
c001e997:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e99a:	85 c0                	test   eax,eax
c001e99c:	75 33                	jne    c001e9d1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9ba:	83 f8 01             	cmp    eax,0x1
c001e9bd:	74 21                	je     c001e9e0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e9bf:	83 ec 0c             	sub    esp,0xc
c001e9c2:	68 44 fd 01 c0       	push   0xc001fd44
c001e9c7:	e8 09 1e ff ff       	call   c00107d5 <KePanic(char const*)>
c001e9cc:	83 c4 10             	add    esp,0x10
c001e9cf:	eb 0f                	jmp    c001e9e0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9d7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9de:	89 10                	mov    DWORD PTR [eax],edx
c001e9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9e7:	8d 50 ff             	lea    edx,[eax-0x1]
c001e9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9f1:	83 c4 0c             	add    esp,0xc
c001e9f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e9f6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e9f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9fd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e9fe <DriverlessDevice::~DriverlessDevice()>:
c001e9fe:	ba bc 03 02 c0       	mov    edx,0xc00203bc
c001ea03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea07:	89 10                	mov    DWORD PTR [eax],edx
c001ea09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea0d:	50                   	push   eax
c001ea0e:	e8 a3 d2 fe ff       	call   c000bcb6 <Device::~Device()>
c001ea13:	83 c4 04             	add    esp,0x4
c001ea16:	90                   	nop
c001ea17:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ea18 <DriverlessDevice::~DriverlessDevice()>:
c001ea18:	83 ec 0c             	sub    esp,0xc
c001ea1b:	83 ec 0c             	sub    esp,0xc
c001ea1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea22:	e8 d7 ff ff ff       	call   c001e9fe <DriverlessDevice::~DriverlessDevice()>
c001ea27:	83 c4 10             	add    esp,0x10
c001ea2a:	83 ec 08             	sub    esp,0x8
c001ea2d:	68 58 01 00 00       	push   0x158
c001ea32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea36:	e8 18 be fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001ea3b:	83 c4 10             	add    esp,0x10
c001ea3e:	83 c4 0c             	add    esp,0xc
c001ea41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ea42 <LinkedList<Device>::addElement(Device*)>:
c001ea42:	83 ec 0c             	sub    esp,0xc
c001ea45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea4a:	75 10                	jne    c001ea5c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ea4c:	83 ec 0c             	sub    esp,0xc
c001ea4f:	68 e8 fc 01 c0       	push   0xc001fce8
c001ea54:	e8 7c 1d ff ff       	call   c00107d5 <KePanic(char const*)>
c001ea59:	83 c4 10             	add    esp,0x10
c001ea5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea62:	85 c0                	test   eax,eax
c001ea64:	74 3a                	je     c001eaa0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ea66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea6d:	85 c0                	test   eax,eax
c001ea6f:	74 2f                	je     c001eaa0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ea71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea7c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea8a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea94:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ea9e:	eb 68                	jmp    c001eb08 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eaa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaa6:	85 c0                	test   eax,eax
c001eaa8:	75 4e                	jne    c001eaf8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eab1:	85 c0                	test   eax,eax
c001eab3:	75 43                	jne    c001eaf8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eabd:	89 10                	mov    DWORD PTR [eax],edx
c001eabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eac7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ead1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eadb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eadf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eae2:	85 c0                	test   eax,eax
c001eae4:	74 22                	je     c001eb08 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eae6:	83 ec 0c             	sub    esp,0xc
c001eae9:	68 0a fd 01 c0       	push   0xc001fd0a
c001eaee:	e8 e2 1c ff ff       	call   c00107d5 <KePanic(char const*)>
c001eaf3:	83 c4 10             	add    esp,0x10
c001eaf6:	eb 10                	jmp    c001eb08 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eaf8:	83 ec 0c             	sub    esp,0xc
c001eafb:	68 14 fd 01 c0       	push   0xc001fd14
c001eb00:	e8 d0 1c ff ff       	call   c00107d5 <KePanic(char const*)>
c001eb05:	83 c4 10             	add    esp,0x10
c001eb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb0f:	8d 50 01             	lea    edx,[eax+0x1]
c001eb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb19:	90                   	nop
c001eb1a:	83 c4 0c             	add    esp,0xc
c001eb1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001eb1e <LinkedList<Device>::LinkedList()>:
c001eb1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb5e:	90                   	nop
c001eb5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eb60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb64:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb66:	85 c0                	test   eax,eax
c001eb68:	75 0e                	jne    c001eb78 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb71:	85 c0                	test   eax,eax
c001eb73:	75 03                	jne    c001eb78 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb75:	b0 01                	mov    al,0x1
c001eb77:	c3                   	ret    
c001eb78:	b0 00                	mov    al,0x0
c001eb7a:	90                   	nop
c001eb7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001eb7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb80:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001eb84:	83 ec 0c             	sub    esp,0xc
c001eb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb8d:	85 c0                	test   eax,eax
c001eb8f:	75 17                	jne    c001eba8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001eb91:	83 ec 0c             	sub    esp,0xc
c001eb94:	68 20 fd 01 c0       	push   0xc001fd20
c001eb99:	e8 37 1c ff ff       	call   c00107d5 <KePanic(char const*)>
c001eb9e:	83 c4 10             	add    esp,0x10
c001eba1:	e9 96 00 00 00       	jmp    c001ec3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001eba6:	66 90                	xchg   ax,ax
c001eba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebaf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebb2:	85 c0                	test   eax,eax
c001ebb4:	0f 95 c0             	setne  al
c001ebb7:	0f b6 c0             	movzx  eax,al
c001ebba:	85 c0                	test   eax,eax
c001ebbc:	74 12                	je     c001ebd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ebbe:	83 ec 0c             	sub    esp,0xc
c001ebc1:	68 6b fd 01 c0       	push   0xc001fd6b
c001ebc6:	e8 0a 1c ff ff       	call   c00107d5 <KePanic(char const*)>
c001ebcb:	83 c4 10             	add    esp,0x10
c001ebce:	66 90                	xchg   ax,ax
c001ebd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebd9:	85 c0                	test   eax,eax
c001ebdb:	0f 94 c0             	sete   al
c001ebde:	0f b6 c0             	movzx  eax,al
c001ebe1:	85 c0                	test   eax,eax
c001ebe3:	74 33                	je     c001ec18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ebe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebfe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec01:	83 f8 01             	cmp    eax,0x1
c001ec04:	74 22                	je     c001ec28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec06:	83 ec 0c             	sub    esp,0xc
c001ec09:	68 44 fd 01 c0       	push   0xc001fd44
c001ec0e:	e8 c2 1b ff ff       	call   c00107d5 <KePanic(char const*)>
c001ec13:	83 c4 10             	add    esp,0x10
c001ec16:	eb 10                	jmp    c001ec28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec1e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec25:	89 10                	mov    DWORD PTR [eax],edx
c001ec27:	90                   	nop
c001ec28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec2f:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec39:	8d 76 00             	lea    esi,[esi+0x0]
c001ec3c:	83 c4 0c             	add    esp,0xc
c001ec3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ec40:	83 ec 0c             	sub    esp,0xc
c001ec43:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec48:	75 12                	jne    c001ec5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ec4a:	83 ec 0c             	sub    esp,0xc
c001ec4d:	68 e8 fc 01 c0       	push   0xc001fce8
c001ec52:	e8 7e 1b ff ff       	call   c00107d5 <KePanic(char const*)>
c001ec57:	83 c4 10             	add    esp,0x10
c001ec5a:	66 90                	xchg   ax,ax
c001ec5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec62:	85 c0                	test   eax,eax
c001ec64:	74 36                	je     c001ec9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ec66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec6d:	85 c0                	test   eax,eax
c001ec6f:	74 2b                	je     c001ec9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ec71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec7c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ec7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ec8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec91:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ec98:	eb 6a                	jmp    c001ed04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ec9a:	66 90                	xchg   ax,ax
c001ec9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eca2:	85 c0                	test   eax,eax
c001eca4:	75 4e                	jne    c001ecf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001eca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecad:	85 c0                	test   eax,eax
c001ecaf:	75 43                	jne    c001ecf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ecb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecb9:	89 10                	mov    DWORD PTR [eax],edx
c001ecbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecc3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eccd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ecd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecdb:	85 c0                	test   eax,eax
c001ecdd:	74 25                	je     c001ed04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ecdf:	83 ec 0c             	sub    esp,0xc
c001ece2:	68 0a fd 01 c0       	push   0xc001fd0a
c001ece7:	e8 e9 1a ff ff       	call   c00107d5 <KePanic(char const*)>
c001ecec:	83 c4 10             	add    esp,0x10
c001ecef:	eb 13                	jmp    c001ed04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ecf1:	8d 76 00             	lea    esi,[esi+0x0]
c001ecf4:	83 ec 0c             	sub    esp,0xc
c001ecf7:	68 14 fd 01 c0       	push   0xc001fd14
c001ecfc:	e8 d4 1a ff ff       	call   c00107d5 <KePanic(char const*)>
c001ed01:	83 c4 10             	add    esp,0x10
c001ed04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed0b:	8d 50 01             	lea    edx,[eax+0x1]
c001ed0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed15:	90                   	nop
c001ed16:	83 c4 0c             	add    esp,0xc
c001ed19:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ed1c <ACPI::~ACPI()>:
c001ed1c:	83 ec 0c             	sub    esp,0xc
c001ed1f:	ba 88 09 02 c0       	mov    edx,0xc0020988
c001ed24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed28:	89 10                	mov    DWORD PTR [eax],edx
c001ed2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2e:	83 ec 0c             	sub    esp,0xc
c001ed31:	50                   	push   eax
c001ed32:	e8 7f cf fe ff       	call   c000bcb6 <Device::~Device()>
c001ed37:	83 c4 10             	add    esp,0x10
c001ed3a:	90                   	nop
c001ed3b:	83 c4 0c             	add    esp,0xc
c001ed3e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ed40 <ACPI::~ACPI()>:
c001ed40:	83 ec 0c             	sub    esp,0xc
c001ed43:	83 ec 0c             	sub    esp,0xc
c001ed46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed4a:	e8 cd ff ff ff       	call   c001ed1c <ACPI::~ACPI()>
c001ed4f:	83 c4 10             	add    esp,0x10
c001ed52:	83 ec 08             	sub    esp,0x8
c001ed55:	68 64 12 00 00       	push   0x1264
c001ed5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed5e:	e8 f0 ba fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001ed63:	83 c4 10             	add    esp,0x10
c001ed66:	83 c4 0c             	add    esp,0xc
c001ed69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ed6c <LinkedList<Device>::~LinkedList()>:
c001ed6c:	90                   	nop
c001ed6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ed70 <LinkedList<Device>::isEmpty()>:
c001ed70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed74:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed76:	85 c0                	test   eax,eax
c001ed78:	75 0e                	jne    c001ed88 <LinkedList<Device>::isEmpty()+0x18>
c001ed7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed81:	85 c0                	test   eax,eax
c001ed83:	75 03                	jne    c001ed88 <LinkedList<Device>::isEmpty()+0x18>
c001ed85:	b0 01                	mov    al,0x1
c001ed87:	c3                   	ret    
c001ed88:	b0 00                	mov    al,0x0
c001ed8a:	90                   	nop
c001ed8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ed8c <LinkedList<Device>::getFirstElement()>:
c001ed8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ed94 <LinkedList<Device>::removeFirst()>:
c001ed94:	83 ec 0c             	sub    esp,0xc
c001ed97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed9d:	85 c0                	test   eax,eax
c001ed9f:	75 17                	jne    c001edb8 <LinkedList<Device>::removeFirst()+0x24>
c001eda1:	83 ec 0c             	sub    esp,0xc
c001eda4:	68 20 fd 01 c0       	push   0xc001fd20
c001eda9:	e8 27 1a ff ff       	call   c00107d5 <KePanic(char const*)>
c001edae:	83 c4 10             	add    esp,0x10
c001edb1:	e9 92 00 00 00       	jmp    c001ee48 <LinkedList<Device>::removeFirst()+0xb4>
c001edb6:	66 90                	xchg   ax,ax
c001edb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edbf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001edc5:	85 c0                	test   eax,eax
c001edc7:	74 13                	je     c001eddc <LinkedList<Device>::removeFirst()+0x48>
c001edc9:	83 ec 0c             	sub    esp,0xc
c001edcc:	68 6b fd 01 c0       	push   0xc001fd6b
c001edd1:	e8 ff 19 ff ff       	call   c00107d5 <KePanic(char const*)>
c001edd6:	83 c4 10             	add    esp,0x10
c001edd9:	8d 76 00             	lea    esi,[esi+0x0]
c001eddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ede2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ede8:	85 c0                	test   eax,eax
c001edea:	75 34                	jne    c001ee20 <LinkedList<Device>::removeFirst()+0x8c>
c001edec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001edf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edfa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee08:	83 f8 01             	cmp    eax,0x1
c001ee0b:	74 27                	je     c001ee34 <LinkedList<Device>::removeFirst()+0xa0>
c001ee0d:	83 ec 0c             	sub    esp,0xc
c001ee10:	68 44 fd 01 c0       	push   0xc001fd44
c001ee15:	e8 bb 19 ff ff       	call   c00107d5 <KePanic(char const*)>
c001ee1a:	83 c4 10             	add    esp,0x10
c001ee1d:	eb 15                	jmp    c001ee34 <LinkedList<Device>::removeFirst()+0xa0>
c001ee1f:	90                   	nop
c001ee20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee26:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ee2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee30:	89 10                	mov    DWORD PTR [eax],edx
c001ee32:	66 90                	xchg   ax,ax
c001ee34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee3b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee45:	8d 76 00             	lea    esi,[esi+0x0]
c001ee48:	83 c4 0c             	add    esp,0xc
c001ee4b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ee4c <CPU::~CPU()>:
c001ee4c:	83 ec 0c             	sub    esp,0xc
c001ee4f:	ba 24 0b 02 c0       	mov    edx,0xc0020b24
c001ee54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee58:	89 10                	mov    DWORD PTR [eax],edx
c001ee5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5e:	83 ec 0c             	sub    esp,0xc
c001ee61:	50                   	push   eax
c001ee62:	e8 4f ce fe ff       	call   c000bcb6 <Device::~Device()>
c001ee67:	83 c4 10             	add    esp,0x10
c001ee6a:	90                   	nop
c001ee6b:	83 c4 0c             	add    esp,0xc
c001ee6e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ee70 <CPU::~CPU()>:
c001ee70:	83 ec 0c             	sub    esp,0xc
c001ee73:	83 ec 0c             	sub    esp,0xc
c001ee76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee7a:	e8 cd ff ff ff       	call   c001ee4c <CPU::~CPU()>
c001ee7f:	83 c4 10             	add    esp,0x10
c001ee82:	83 ec 08             	sub    esp,0x8
c001ee85:	68 94 11 00 00       	push   0x1194
c001ee8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee8e:	e8 c0 b9 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001ee93:	83 c4 10             	add    esp,0x10
c001ee96:	83 c4 0c             	add    esp,0xc
c001ee99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ee9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ee9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eea0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eea3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001eea4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001eea4:	90                   	nop
c001eea5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001eea8 <ThreadControlBlock::ThreadControlBlock()>:
c001eea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeac:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eeb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeb7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001eebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eec2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001eec9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eecd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001eed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eed8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001eedf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eee3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001eee7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeeb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001eeef:	90                   	nop
c001eef0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001eef4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001eef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eefe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef02:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef0d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef18:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef2d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef34:	90                   	nop
c001ef35:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ef36 <PCI::~PCI()>:
c001ef36:	83 ec 0c             	sub    esp,0xc
c001ef39:	ba 88 19 02 c0       	mov    edx,0xc0021988
c001ef3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef42:	89 10                	mov    DWORD PTR [eax],edx
c001ef44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef48:	83 ec 0c             	sub    esp,0xc
c001ef4b:	50                   	push   eax
c001ef4c:	e8 f7 c7 fe ff       	call   c000b748 <Bus::~Bus()>
c001ef51:	83 c4 10             	add    esp,0x10
c001ef54:	90                   	nop
c001ef55:	83 c4 0c             	add    esp,0xc
c001ef58:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ef5a <PCI::~PCI()>:
c001ef5a:	83 ec 0c             	sub    esp,0xc
c001ef5d:	83 ec 0c             	sub    esp,0xc
c001ef60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef64:	e8 cd ff ff ff       	call   c001ef36 <PCI::~PCI()>
c001ef69:	83 c4 10             	add    esp,0x10
c001ef6c:	83 ec 08             	sub    esp,0x8
c001ef6f:	68 5c 01 00 00       	push   0x15c
c001ef74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef78:	e8 d6 b8 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001ef7d:	83 c4 10             	add    esp,0x10
c001ef80:	83 c4 0c             	add    esp,0xc
c001ef83:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ef84 <IDE::~IDE()>:
c001ef84:	83 ec 0c             	sub    esp,0xc
c001ef87:	ba 3c 1a 02 c0       	mov    edx,0xc0021a3c
c001ef8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef90:	89 10                	mov    DWORD PTR [eax],edx
c001ef92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef96:	83 ec 0c             	sub    esp,0xc
c001ef99:	50                   	push   eax
c001ef9a:	e8 91 d1 fe ff       	call   c000c130 <HardDiskController::~HardDiskController()>
c001ef9f:	83 c4 10             	add    esp,0x10
c001efa2:	90                   	nop
c001efa3:	83 c4 0c             	add    esp,0xc
c001efa6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001efa8 <IDE::~IDE()>:
c001efa8:	83 ec 0c             	sub    esp,0xc
c001efab:	83 ec 0c             	sub    esp,0xc
c001efae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efb2:	e8 cd ff ff ff       	call   c001ef84 <IDE::~IDE()>
c001efb7:	83 c4 10             	add    esp,0x10
c001efba:	83 ec 08             	sub    esp,0x8
c001efbd:	68 70 02 00 00       	push   0x270
c001efc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efc6:	e8 88 b8 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001efcb:	83 c4 10             	add    esp,0x10
c001efce:	83 c4 0c             	add    esp,0xc
c001efd1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001efd2 <SATABus::~SATABus()>:
c001efd2:	83 ec 0c             	sub    esp,0xc
c001efd5:	ba 8c 1a 02 c0       	mov    edx,0xc0021a8c
c001efda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efde:	89 10                	mov    DWORD PTR [eax],edx
c001efe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe4:	83 ec 0c             	sub    esp,0xc
c001efe7:	50                   	push   eax
c001efe8:	e8 43 d1 fe ff       	call   c000c130 <HardDiskController::~HardDiskController()>
c001efed:	83 c4 10             	add    esp,0x10
c001eff0:	90                   	nop
c001eff1:	83 c4 0c             	add    esp,0xc
c001eff4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001eff6 <SATABus::~SATABus()>:
c001eff6:	83 ec 0c             	sub    esp,0xc
c001eff9:	83 ec 0c             	sub    esp,0xc
c001effc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f000:	e8 cd ff ff ff       	call   c001efd2 <SATABus::~SATABus()>
c001f005:	83 c4 10             	add    esp,0x10
c001f008:	83 ec 08             	sub    esp,0x8
c001f00b:	68 64 01 00 00       	push   0x164
c001f010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f014:	e8 3a b8 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f019:	83 c4 10             	add    esp,0x10
c001f01c:	83 c4 0c             	add    esp,0xc
c001f01f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f020 <ATA::~ATA()>:
c001f020:	83 ec 0c             	sub    esp,0xc
c001f023:	ba cc 1a 02 c0       	mov    edx,0xc0021acc
c001f028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02c:	89 10                	mov    DWORD PTR [eax],edx
c001f02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f032:	83 ec 0c             	sub    esp,0xc
c001f035:	50                   	push   eax
c001f036:	e8 d7 d1 fe ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c001f03b:	83 c4 10             	add    esp,0x10
c001f03e:	90                   	nop
c001f03f:	83 c4 0c             	add    esp,0xc
c001f042:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f044 <ATA::~ATA()>:
c001f044:	83 ec 0c             	sub    esp,0xc
c001f047:	83 ec 0c             	sub    esp,0xc
c001f04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f04e:	e8 cd ff ff ff       	call   c001f020 <ATA::~ATA()>
c001f053:	83 c4 10             	add    esp,0x10
c001f056:	83 ec 08             	sub    esp,0x8
c001f059:	68 7c 01 00 00       	push   0x17c
c001f05e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f062:	e8 ec b7 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f067:	83 c4 10             	add    esp,0x10
c001f06a:	83 c4 0c             	add    esp,0xc
c001f06d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f06e <ATAPI::~ATAPI()>:
c001f06e:	83 ec 0c             	sub    esp,0xc
c001f071:	ba 14 1b 02 c0       	mov    edx,0xc0021b14
c001f076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07a:	89 10                	mov    DWORD PTR [eax],edx
c001f07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f080:	83 ec 0c             	sub    esp,0xc
c001f083:	50                   	push   eax
c001f084:	e8 89 d1 fe ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c001f089:	83 c4 10             	add    esp,0x10
c001f08c:	90                   	nop
c001f08d:	83 c4 0c             	add    esp,0xc
c001f090:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f092 <ATAPI::~ATAPI()>:
c001f092:	83 ec 0c             	sub    esp,0xc
c001f095:	83 ec 0c             	sub    esp,0xc
c001f098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f09c:	e8 cd ff ff ff       	call   c001f06e <ATAPI::~ATAPI()>
c001f0a1:	83 c4 10             	add    esp,0x10
c001f0a4:	83 ec 08             	sub    esp,0x8
c001f0a7:	68 84 01 00 00       	push   0x184
c001f0ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0b0:	e8 9e b7 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f0b5:	83 c4 10             	add    esp,0x10
c001f0b8:	83 c4 0c             	add    esp,0xc
c001f0bb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f0bc <SATA::~SATA()>:
c001f0bc:	83 ec 0c             	sub    esp,0xc
c001f0bf:	ba c8 1b 02 c0       	mov    edx,0xc0021bc8
c001f0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c8:	89 10                	mov    DWORD PTR [eax],edx
c001f0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ce:	83 ec 0c             	sub    esp,0xc
c001f0d1:	50                   	push   eax
c001f0d2:	e8 3b d1 fe ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c001f0d7:	83 c4 10             	add    esp,0x10
c001f0da:	90                   	nop
c001f0db:	83 c4 0c             	add    esp,0xc
c001f0de:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f0e0 <SATA::~SATA()>:
c001f0e0:	83 ec 0c             	sub    esp,0xc
c001f0e3:	83 ec 0c             	sub    esp,0xc
c001f0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0ea:	e8 cd ff ff ff       	call   c001f0bc <SATA::~SATA()>
c001f0ef:	83 c4 10             	add    esp,0x10
c001f0f2:	83 ec 08             	sub    esp,0x8
c001f0f5:	68 7c 01 00 00       	push   0x17c
c001f0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0fe:	e8 50 b7 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f103:	83 c4 10             	add    esp,0x10
c001f106:	83 c4 0c             	add    esp,0xc
c001f109:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f10a <SATAPI::~SATAPI()>:
c001f10a:	83 ec 0c             	sub    esp,0xc
c001f10d:	ba ec 1c 02 c0       	mov    edx,0xc0021cec
c001f112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f116:	89 10                	mov    DWORD PTR [eax],edx
c001f118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11c:	83 ec 0c             	sub    esp,0xc
c001f11f:	50                   	push   eax
c001f120:	e8 ed d0 fe ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c001f125:	83 c4 10             	add    esp,0x10
c001f128:	90                   	nop
c001f129:	83 c4 0c             	add    esp,0xc
c001f12c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f12e <SATAPI::~SATAPI()>:
c001f12e:	83 ec 0c             	sub    esp,0xc
c001f131:	83 ec 0c             	sub    esp,0xc
c001f134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f138:	e8 cd ff ff ff       	call   c001f10a <SATAPI::~SATAPI()>
c001f13d:	83 c4 10             	add    esp,0x10
c001f140:	83 ec 08             	sub    esp,0x8
c001f143:	68 84 01 00 00       	push   0x184
c001f148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f14c:	e8 02 b7 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f151:	83 c4 10             	add    esp,0x10
c001f154:	83 c4 0c             	add    esp,0xc
c001f157:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f158 <IOAPIC::~IOAPIC()>:
c001f158:	83 ec 0c             	sub    esp,0xc
c001f15b:	ba 2c 1d 02 c0       	mov    edx,0xc0021d2c
c001f160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f164:	89 10                	mov    DWORD PTR [eax],edx
c001f166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f16a:	83 ec 0c             	sub    esp,0xc
c001f16d:	50                   	push   eax
c001f16e:	e8 43 cb fe ff       	call   c000bcb6 <Device::~Device()>
c001f173:	83 c4 10             	add    esp,0x10
c001f176:	90                   	nop
c001f177:	83 c4 0c             	add    esp,0xc
c001f17a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f17c <IOAPIC::~IOAPIC()>:
c001f17c:	83 ec 0c             	sub    esp,0xc
c001f17f:	83 ec 0c             	sub    esp,0xc
c001f182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f186:	e8 cd ff ff ff       	call   c001f158 <IOAPIC::~IOAPIC()>
c001f18b:	83 c4 10             	add    esp,0x10
c001f18e:	83 ec 08             	sub    esp,0x8
c001f191:	68 68 01 00 00       	push   0x168
c001f196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f19a:	e8 b4 b6 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f19f:	83 c4 10             	add    esp,0x10
c001f1a2:	83 c4 0c             	add    esp,0xc
c001f1a5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f1a8 <APICTimer::~APICTimer()>:
c001f1a8:	83 ec 0c             	sub    esp,0xc
c001f1ab:	ba 74 1d 02 c0       	mov    edx,0xc0021d74
c001f1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1b4:	89 10                	mov    DWORD PTR [eax],edx
c001f1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ba:	83 ec 0c             	sub    esp,0xc
c001f1bd:	50                   	push   eax
c001f1be:	e8 c9 e5 fe ff       	call   c000d78c <Timer::~Timer()>
c001f1c3:	83 c4 10             	add    esp,0x10
c001f1c6:	90                   	nop
c001f1c7:	83 c4 0c             	add    esp,0xc
c001f1ca:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f1cc <APICTimer::~APICTimer()>:
c001f1cc:	83 ec 0c             	sub    esp,0xc
c001f1cf:	83 ec 0c             	sub    esp,0xc
c001f1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1d6:	e8 cd ff ff ff       	call   c001f1a8 <APICTimer::~APICTimer()>
c001f1db:	83 c4 10             	add    esp,0x10
c001f1de:	83 ec 08             	sub    esp,0x8
c001f1e1:	68 60 01 00 00       	push   0x160
c001f1e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ea:	e8 64 b6 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f1ef:	83 c4 10             	add    esp,0x10
c001f1f2:	83 c4 0c             	add    esp,0xc
c001f1f5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f1f8 <PIT::~PIT()>:
c001f1f8:	83 ec 0c             	sub    esp,0xc
c001f1fb:	ba c4 1d 02 c0       	mov    edx,0xc0021dc4
c001f200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f204:	89 10                	mov    DWORD PTR [eax],edx
c001f206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f20a:	83 ec 0c             	sub    esp,0xc
c001f20d:	50                   	push   eax
c001f20e:	e8 79 e5 fe ff       	call   c000d78c <Timer::~Timer()>
c001f213:	83 c4 10             	add    esp,0x10
c001f216:	90                   	nop
c001f217:	83 c4 0c             	add    esp,0xc
c001f21a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f21c <PIT::~PIT()>:
c001f21c:	83 ec 0c             	sub    esp,0xc
c001f21f:	83 ec 0c             	sub    esp,0xc
c001f222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f226:	e8 cd ff ff ff       	call   c001f1f8 <PIT::~PIT()>
c001f22b:	83 c4 10             	add    esp,0x10
c001f22e:	83 ec 08             	sub    esp,0x8
c001f231:	68 5c 01 00 00       	push   0x15c
c001f236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f23a:	e8 14 b6 fe ff       	call   c000a853 <operator delete(void*, unsigned long)>
c001f23f:	83 c4 10             	add    esp,0x10
c001f242:	83 c4 0c             	add    esp,0xc
c001f245:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 15 0c 02 c0       	mov    esi,0xc0020c15
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 31 0c 02 c0       	mov    esi,0xc0020c31
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
