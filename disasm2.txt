
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 05 7b 00 00       	call   c0007b25 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e8 23 02 c0       	mov    eax,0xc00223e8
c0000025:	3d e8 23 02 c0       	cmp    eax,0xc00223e8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e8 23 02 c0       	push   0xc00223e8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e8 23 02 c0       	mov    eax,0xc00223e8
c0000051:	2d e8 23 02 c0       	sub    eax,0xc00223e8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e8 23 02 c0       	push   0xc00223e8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb ec f2 01 c0       	mov    ebx,0xc001f2ec
c0000097:	81 eb e8 f2 01 c0    	sub    ebx,0xc001f2e8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be e8 f2 01 c0       	mov    esi,0xc001f2e8
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e8 23 02 c0       	push   0xc00223e8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 e8 23 02 c0       	push   0xc00223e8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 d3 45 01 00       	call   c0014880 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 75 a4 00 00       	call   c000a73a <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b1 45 01 00       	call   c0014880 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 be 4a 01 00       	call   c0014dac <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 59 51 01 00       	call   c0015450 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 b9 04 01 00       	jmp    c0010838 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 00 f3 01 c0 02 	test   BYTE PTR [edx-0x3ffe0d00],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 00 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d00],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 00 f3 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d00],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 00 f3 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d00],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 00 f3 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0d00],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 00 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d00],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e2a:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 9b 6a 00 00       	call   c00079a0 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 f6 69 00 00       	call   c00079a0 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e0 69 00 00       	call   c00079a0 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 de 68 00 00       	call   c00079a0 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c00011af:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001206:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c000124f:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c000126a:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c0001324:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c000132a:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001331:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013f7:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013fd:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c0001404:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001552:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 04 f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0bfc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 5e 6b 01 00       	jmp    c0018938 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 88 6b 01 00       	jmp    c0018978 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 a9 6b 01 00       	jmp    c00189b8 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 60 f5 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0aa0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 60 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0aa0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba e0 16 02 c0       	mov    edx,0xc00216e0
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 1c f4 01 c0       	mov    edx,0xc001f41c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 22 f4 01 c0       	mov    eax,0xc001f422
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf e0 f4 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0b20]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 2b f4 01 c0       	mov    eax,0xc001f42b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 60 f5 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0aa0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 b0 f4 01 c0       	mov    eax,0xc001f4b0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb a0 f4 01 c0       	mov    ebx,0xc001f4a0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 80 f4 01 c0       	mov    eax,0xc001f480
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 90 f4 01 c0       	mov    eax,0xc001f490
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 32 f4 01 c0       	mov    edx,0xc001f432
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 3e f4 01 c0       	mov    edx,0xc001f43e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 52 f4 01 c0       	mov    edx,0xc001f452
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 68 1e 00 00       	call   c0007acb <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 60 1e 00 00       	call   c0007adb <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 80 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f880
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 80 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f880
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 80 f6 01 c0       	mov    eax,0xc001f680
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 c0 f5 01 c0       	mov    eax,0xc001f5c0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 80 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0a80]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 80 f9 01 c0       	push   0xc001f980
c0006147:	e8 90 31 01 00       	call   c00192dc <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 8e f9 01 c0       	push   0xc001f98e
c000617f:	e8 58 31 01 00       	call   c00192dc <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 c1 30 01 00       	call   c0019280 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 40 02 c0       	mov    eax,0xc0024020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 9d f9 01 c0       	push   0xc001f99d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000657b:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c0006585:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c000659d:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006616:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c00066ad:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000670f:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000674c:	05 40 45 02 c0       	add    eax,0xc0024540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c000680c:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 a0 f9 01 c0       	push   0xc001f9a0
c000682f:	e8 a8 2a 01 00       	call   c00192dc <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 b6 2a 01 00       	call   c00192f8 <iso_kprintfd>
c0006842:	c7 04 24 a5 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a5
c0006849:	e8 8e 2a 01 00       	call   c00192dc <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006855:	e8 9e 2a 01 00       	call   c00192f8 <iso_kprintfd>
c000685a:	c7 04 24 ab f9 01 c0 	mov    DWORD PTR [esp],0xc001f9ab
c0006861:	e8 76 2a 01 00       	call   c00192dc <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c000686d:	e8 86 2a 01 00       	call   c00192f8 <iso_kprintfd>
c0006872:	c7 04 24 b1 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9b1
c0006879:	e8 5e 2a 01 00       	call   c00192dc <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006885:	e8 6e 2a 01 00       	call   c00192f8 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068eb:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 9d f9 01 c0       	push   0xc001f99d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a2a:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a30:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 ba f9 01 c0       	push   0xc001f9ba
c0006a52:	e8 85 28 01 00       	call   c00192dc <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a87:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 c5 f9 01 c0       	push   0xc001f9c5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 cc f9 01 c0       	push   0xc001f9cc
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b25:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b48:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 d3 f9 01 c0       	push   0xc001f9d3
c0006b69:	e8 6e 27 01 00       	call   c00192dc <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 de f9 01 c0       	push   0xc001f9de
c0006b84:	e8 53 27 01 00       	call   c00192dc <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 45 02 c0       	push   0xc0024540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 18 0f 00 00       	call   c0007acb <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006bbf:	e8 07 0f 00 00       	call   c0007acb <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 f2 0e 00 00       	call   c0007acb <malloc>
c0006bd9:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 d9 0e 00 00       	call   c0007acb <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006c1f:	e8 b7 0e 00 00       	call   c0007adb <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 a9 0e 00 00       	call   c0007adb <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 8f 0e 00 00       	call   c0007adb <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 7a 0e 00 00       	call   c0007adb <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	83 ec 0c             	sub    esp,0xc
c0006c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006c92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c98:	50                   	push   eax
c0006c99:	e8 64 52 00 00       	call   c000bf02 <Device::closeAll()>
c0006c9e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca4:	83 c4 10             	add    esp,0x10
c0006ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ca9:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cad:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cb5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cbd:	5b                   	pop    ebx
c0006cbe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc1:	5e                   	pop    esi
c0006cc2:	5f                   	pop    edi
c0006cc3:	ff e0                	jmp    eax

c0006cc5 <Krnl::firstTask()>:
c0006cc5:	53                   	push   ebx
c0006cc6:	83 ec 14             	sub    esp,0x14
c0006cc9:	fb                   	sti    
c0006cca:	68 ef f9 01 c0       	push   0xc001f9ef
c0006ccf:	e8 fc 94 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c0006cd4:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cdb:	e8 eb 0d 00 00       	call   c0007acb <malloc>
c0006ce0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ce7:	89 c3                	mov    ebx,eax
c0006ce9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cee:	50                   	push   eax
c0006cef:	68 08 fa 01 c0       	push   0xc001fa08
c0006cf4:	6a 01                	push   0x1
c0006cf6:	53                   	push   ebx
c0006cf7:	e8 dc de 00 00       	call   c0014bd8 <Process::Process(bool, char const*, Process*, char**)>
c0006cfc:	83 c4 20             	add    esp,0x20
c0006cff:	68 ff 00 00 00       	push   0xff
c0006d04:	6a 00                	push   0x0
c0006d06:	68 15 75 00 c0       	push   0xc0007515
c0006d0b:	53                   	push   ebx
c0006d0c:	e8 eb e0 00 00       	call   c0014dfc <Process::createThread(void (*)(void*), void*, int)>
c0006d11:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006d17:	6a 7a                	push   0x7a
c0006d19:	6a 00                	push   0x0
c0006d1b:	68 c0 58 01 c0       	push   0xc00158c0
c0006d20:	52                   	push   edx
c0006d21:	e8 d6 e0 00 00       	call   c0014dfc <Process::createThread(void (*)(void*), void*, int)>
c0006d26:	83 c4 20             	add    esp,0x20
c0006d29:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d30:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d35:	e8 ca 9c 00 00       	call   c0010a04 <KeInitRand()>
c0006d3a:	83 ec 0c             	sub    esp,0xc
c0006d3d:	68 04 fb 01 c0       	push   0xc001fb04
c0006d42:	e8 89 94 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c0006d47:	e8 97 ef 00 00       	call   c0015ce3 <Vm::initialise8086()>
c0006d4c:	e8 d5 3f 00 00       	call   c000ad26 <Fs::initVFS()>
c0006d51:	c7 04 24 15 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa15
c0006d58:	e8 73 94 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c0006d5d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d62:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6a:	6a 00                	push   0x0
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	50                   	push   eax
c0006d71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d74:	83 c4 14             	add    esp,0x14
c0006d77:	68 04 fb 01 c0       	push   0xc001fb04
c0006d7c:	e8 4f 94 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c0006d81:	e8 2a 99 00 00       	call   c00106b0 <Krnl::loadSystemEnv()>
c0006d86:	e8 87 9b 00 00       	call   c0010912 <Krnl::setupPowerManager()>
c0006d8b:	83 c4 0c             	add    esp,0xc
c0006d8e:	6a 3a                	push   0x3a
c0006d90:	68 2f fa 01 c0       	push   0xc001fa2f
c0006d95:	68 38 fa 01 c0       	push   0xc001fa38
c0006d9a:	e8 63 c1 00 00       	call   c0012f02 <Reg::readIntWithDefault(char*, char*, int)>
c0006d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da2:	e8 b5 4a 00 00       	call   c000b85c <User::loadClockSettings(int)>
c0006da7:	c7 04 24 28 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb28
c0006dae:	e8 1d 94 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c0006db3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006db8:	59                   	pop    ecx
c0006db9:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dbf:	53                   	push   ebx
c0006dc0:	e8 3b 51 00 00       	call   c000bf00 <Device::loadDriversForAll()>
c0006dc5:	c7 04 24 40 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa40
c0006dcc:	e8 ff 93 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c0006dd1:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dd7:	58                   	pop    eax
c0006dd8:	5a                   	pop    edx
c0006dd9:	6a 01                	push   0x1
c0006ddb:	68 51 fa 01 c0       	push   0xc001fa51
c0006de0:	e8 f7 d7 00 00       	call   c00145dc <Thr::loadDLL(char const*, bool)>
c0006de5:	59                   	pop    ecx
c0006de6:	5a                   	pop    edx
c0006de7:	53                   	push   ebx
c0006de8:	50                   	push   eax
c0006de9:	e8 2e da 00 00       	call   c001481c <Thr::executeDLL(unsigned long, void*)>
c0006dee:	83 c4 10             	add    esp,0x10
c0006df1:	83 ec 0c             	sub    esp,0xc
c0006df4:	6a 02                	push   0x2
c0006df6:	e8 4d e4 00 00       	call   c0015248 <blockTask(TaskState)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	eb f1                	jmp    c0006df1 <Krnl::firstTask()+0x12c>

c0006e00 <Computer::Computer()>:
c0006e00:	83 ec 0c             	sub    esp,0xc
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	83 ec 08             	sub    esp,0x8
c0006e0a:	68 6d fa 01 c0       	push   0xc001fa6d
c0006e0f:	50                   	push   eax
c0006e10:	e8 67 51 00 00       	call   c000bf7c <Device::Device(char const*)>
c0006e15:	83 c4 10             	add    esp,0x10
c0006e18:	ba 74 fb 01 c0       	mov    edx,0xc001fb74
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	89 10                	mov    DWORD PTR [eax],edx
c0006e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e27:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e35:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e43:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e49:	83 ca 04             	or     edx,0x4
c0006e4c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5c:	0f b6 d0             	movzx  edx,al
c0006e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e63:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e74:	0f b6 d0             	movzx  edx,al
c0006e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e8a:	8d 50 01             	lea    edx,[eax+0x1]
c0006e8d:	88 d1                	mov    cl,dl
c0006e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e93:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e99:	0f b6 d0             	movzx  edx,al
c0006e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ea4:	83 e1 3f             	and    ecx,0x3f
c0006ea7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eab:	90                   	nop
c0006eac:	83 c4 0c             	add    esp,0xc
c0006eaf:	c3                   	ret    

c0006eb0 <Computer::setBootMessage(char const*)>:
c0006eb0:	c3                   	ret    
c0006eb1:	90                   	nop

c0006eb2 <Computer::detectFeatures()>:
c0006eb2:	55                   	push   ebp
c0006eb3:	57                   	push   edi
c0006eb4:	56                   	push   esi
c0006eb5:	53                   	push   ebx
c0006eb6:	83 ec 1c             	sub    esp,0x1c
c0006eb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ebd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ec3:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ec9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ecf:	e8 25 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ed4:	31 d2                	xor    edx,edx
c0006ed6:	85 c0                	test   eax,eax
c0006ed8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ede:	0f 95 c2             	setne  dl
c0006ee1:	d1 e2                	shl    edx,1
c0006ee3:	83 e0 fd             	and    eax,0xfffffffd
c0006ee6:	09 d0                	or     eax,edx
c0006ee8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006eee:	a8 02                	test   al,0x2
c0006ef0:	75 51                	jne    c0006f43 <Computer::detectFeatures()+0x91>
c0006ef2:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ef9:	74 0f                	je     c0006f0a <Computer::detectFeatures()+0x58>
c0006efb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f01:	83 e0 fb             	and    eax,0xfffffffb
c0006f04:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0a:	e8 d7 73 01 00       	call   c001e2e6 <x87Detect>
c0006f0f:	83 e0 01             	and    eax,0x1
c0006f12:	c1 e0 04             	shl    eax,0x4
c0006f15:	89 c2                	mov    edx,eax
c0006f17:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f1d:	83 e0 ef             	and    eax,0xffffffef
c0006f20:	09 d0                	or     eax,edx
c0006f22:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f28:	a8 10                	test   al,0x10
c0006f2a:	88 c2                	mov    dl,al
c0006f2c:	0f 85 33 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1b3>
c0006f32:	80 e2 80             	and    dl,0x80
c0006f35:	0f 85 4c 01 00 00    	jne    c0007087 <Computer::detectFeatures()+0x1d5>
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	5b                   	pop    ebx
c0006f3f:	5e                   	pop    esi
c0006f40:	5f                   	pop    edi
c0006f41:	5d                   	pop    ebp
c0006f42:	c3                   	ret    
c0006f43:	83 ec 0c             	sub    esp,0xc
c0006f46:	6a 20                	push   0x20
c0006f48:	e8 99 87 00 00       	call   c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f4d:	83 e0 01             	and    eax,0x1
c0006f50:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f57:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f5d:	83 e0 f7             	and    eax,0xfffffff7
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f68:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f6f:	e8 72 87 00 00       	call   c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	83 e2 01             	and    edx,0x1
c0006f7f:	83 e0 fe             	and    eax,0xfffffffe
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f91:	e8 50 87 00 00       	call   c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	89 c2                	mov    edx,eax
c0006f98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f9e:	c1 e2 07             	shl    edx,0x7
c0006fa1:	83 e0 7f             	and    eax,0x7f
c0006fa4:	09 d0                	or     eax,edx
c0006fa6:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fac:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fb3:	e8 2e 87 00 00       	call   c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>
c0006fb8:	83 c4 10             	add    esp,0x10
c0006fbb:	83 e0 01             	and    eax,0x1
c0006fbe:	c1 e0 05             	shl    eax,0x5
c0006fc1:	89 c2                	mov    edx,eax
c0006fc3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc9:	83 e0 df             	and    eax,0xffffffdf
c0006fcc:	09 d0                	or     eax,edx
c0006fce:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fde:	0f 84 c9 00 00 00    	je     c00070ad <Computer::detectFeatures()+0x1fb>
c0006fe4:	83 e0 fe             	and    eax,0xfffffffe
c0006fe7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fed:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ff3:	89 c2                	mov    edx,eax
c0006ff5:	83 e2 09             	and    edx,0x9
c0006ff8:	83 fa 01             	cmp    edx,0x1
c0006ffb:	75 09                	jne    c0007006 <Computer::detectFeatures()+0x154>
c0006ffd:	83 e0 fe             	and    eax,0xfffffffe
c0007000:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	8d 44 24 18          	lea    eax,[esp+0x18]
c000700d:	50                   	push   eax
c000700e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007012:	55                   	push   ebp
c0007013:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007017:	57                   	push   edi
c0007018:	8d 74 24 18          	lea    esi,[esp+0x18]
c000701c:	56                   	push   esi
c000701d:	68 00 00 00 80       	push   0x80000000
c0007022:	e8 3b 86 00 00       	call   c000f662 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007027:	83 c4 20             	add    esp,0x20
c000702a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007035:	0f 86 b7 fe ff ff    	jbe    c0006ef2 <Computer::detectFeatures()+0x40>
c000703b:	83 ec 0c             	sub    esp,0xc
c000703e:	50                   	push   eax
c000703f:	55                   	push   ebp
c0007040:	57                   	push   edi
c0007041:	56                   	push   esi
c0007042:	68 01 00 00 80       	push   0x80000001
c0007047:	e8 16 86 00 00       	call   c000f662 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000704c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007052:	83 c4 20             	add    esp,0x20
c0007055:	25 bf ff fc ff       	and    eax,0xfffcffbf
c000705a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007060:	e9 8d fe ff ff       	jmp    c0006ef2 <Computer::detectFeatures()+0x40>
c0007065:	e8 36 72 01 00       	call   c001e2a0 <absolutelyNoChanceInHell>
c000706a:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007070:	83 e2 7f             	and    edx,0x7f
c0007073:	c1 e0 07             	shl    eax,0x7
c0007076:	09 c2                	or     edx,eax
c0007078:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000707e:	80 e2 80             	and    dl,0x80
c0007081:	0f 84 b4 fe ff ff    	je     c0006f3b <Computer::detectFeatures()+0x89>
c0007087:	e8 84 6e 01 00       	call   c001df10 <avxDetect>
c000708c:	83 e0 01             	and    eax,0x1
c000708f:	c1 e0 05             	shl    eax,0x5
c0007092:	89 c2                	mov    edx,eax
c0007094:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000709a:	83 e0 df             	and    eax,0xffffffdf
c000709d:	09 d0                	or     eax,edx
c000709f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070a5:	83 c4 1c             	add    esp,0x1c
c00070a8:	5b                   	pop    ebx
c00070a9:	5e                   	pop    esi
c00070aa:	5f                   	pop    edi
c00070ab:	5d                   	pop    ebp
c00070ac:	c3                   	ret    
c00070ad:	83 ec 0c             	sub    esp,0xc
c00070b0:	68 00 02 00 00       	push   0x200
c00070b5:	e8 2c 86 00 00       	call   c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>
c00070ba:	83 c4 10             	add    esp,0x10
c00070bd:	89 c2                	mov    edx,eax
c00070bf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070c5:	83 e2 01             	and    edx,0x1
c00070c8:	83 e0 fe             	and    eax,0xfffffffe
c00070cb:	09 d0                	or     eax,edx
c00070cd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070d3:	e9 15 ff ff ff       	jmp    c0006fed <Computer::detectFeatures()+0x13b>

c00070d8 <Computer::displayFeatures()>:
c00070d8:	c3                   	ret    
c00070d9:	90                   	nop

c00070da <Computer::rdmsr(unsigned int)>:
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070e8:	74 0a                	je     c00070f4 <Computer::rdmsr(unsigned int)+0x1a>
c00070ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070ee:	0f 32                	rdmsr  
c00070f0:	83 c4 0c             	add    esp,0xc
c00070f3:	c3                   	ret    
c00070f4:	83 ec 0c             	sub    esp,0xc
c00070f7:	68 76 fa 01 c0       	push   0xc001fa76
c00070fc:	e8 4c 97 00 00       	call   c001084d <KePanic(char const*)>
c0007101:	83 c4 10             	add    esp,0x10
c0007104:	eb e4                	jmp    c00070ea <Computer::rdmsr(unsigned int)+0x10>

c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007106:	57                   	push   edi
c0007107:	56                   	push   esi
c0007108:	83 ec 04             	sub    esp,0x4
c000710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000710f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007113:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007117:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000711e:	74 10                	je     c0007130 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007120:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007124:	89 f0                	mov    eax,esi
c0007126:	89 fa                	mov    edx,edi
c0007128:	0f 30                	wrmsr  
c000712a:	83 c4 04             	add    esp,0x4
c000712d:	5e                   	pop    esi
c000712e:	5f                   	pop    edi
c000712f:	c3                   	ret    
c0007130:	83 ec 0c             	sub    esp,0xc
c0007133:	68 7c fa 01 c0       	push   0xc001fa7c
c0007138:	e8 10 97 00 00       	call   c001084d <KePanic(char const*)>
c000713d:	83 c4 10             	add    esp,0x10
c0007140:	eb de                	jmp    c0007120 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007142 <Computer::shutdown()>:
c0007142:	83 ec 0c             	sub    esp,0xc
c0007145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007149:	8b 10                	mov    edx,DWORD PTR [eax]
c000714b:	6a 00                	push   0x0
c000714d:	6a 00                	push   0x0
c000714f:	6a 00                	push   0x0
c0007151:	50                   	push   eax
c0007152:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007155:	83 c4 1c             	add    esp,0x1c
c0007158:	c3                   	ret    
c0007159:	90                   	nop

c000715a <Computer::restart()>:
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007161:	8b 10                	mov    edx,DWORD PTR [eax]
c0007163:	6a 00                	push   0x0
c0007165:	6a 00                	push   0x0
c0007167:	6a 01                	push   0x1
c0007169:	50                   	push   eax
c000716a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000716d:	83 c4 1c             	add    esp,0x1c
c0007170:	c3                   	ret    
c0007171:	90                   	nop

c0007172 <Computer::sleep()>:
c0007172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007176:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000717c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007180:	e9 33 80 00 00       	jmp    c000f1b8 <ACPI::sleep()>
c0007185:	90                   	nop

c0007186 <Computer::nmiEnabled()>:
c0007186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000718a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007190:	c3                   	ret    
c0007191:	90                   	nop

c0007192 <Computer::readCMOS(unsigned char)>:
c0007192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007196:	31 d2                	xor    edx,edx
c0007198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000719c:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071a3:	75 02                	jne    c00071a7 <Computer::readCMOS(unsigned char)+0x15>
c00071a5:	b2 80                	mov    dl,0x80
c00071a7:	09 d0                	or     eax,edx
c00071a9:	e6 70                	out    0x70,al
c00071ab:	e4 71                	in     al,0x71
c00071ad:	c3                   	ret    

c00071ae <Computer::enableNMI(bool)>:
c00071ae:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071b6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071bc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071c4:	eb cc                	jmp    c0007192 <Computer::readCMOS(unsigned char)>

c00071c6 <Computer::open(int, int, void*)>:
c00071c6:	56                   	push   esi
c00071c7:	53                   	push   ebx
c00071c8:	83 ec 10             	sub    esp,0x10
c00071cb:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071d6:	68 82 fa 01 c0       	push   0xc001fa82
c00071db:	0f 94 05 20 1f 02 c0 	sete   BYTE PTR ds:0xc0021f20
c00071e2:	e8 e9 8f 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c00071e7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ee:	e8 d8 08 00 00       	call   c0007acb <malloc>
c00071f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071f6:	89 c6                	mov    esi,eax
c00071f8:	e8 2f 7b 00 00       	call   c000ed2c <ACPI::ACPI()>
c00071fd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007203:	58                   	pop    eax
c0007204:	5a                   	pop    edx
c0007205:	56                   	push   esi
c0007206:	53                   	push   ebx
c0007207:	e8 d8 4b 00 00       	call   c000bde4 <Device::addChild(Device*)>
c000720c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000720f:	e8 9e fc ff ff       	call   c0006eb2 <Computer::detectFeatures()>
c0007214:	59                   	pop    ecx
c0007215:	5e                   	pop    esi
c0007216:	6a 01                	push   0x1
c0007218:	53                   	push   ebx
c0007219:	e8 90 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c000721e:	c7 04 24 9a fa 01 c0 	mov    DWORD PTR [esp],0xc001fa9a
c0007225:	e8 a6 8f 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c000722a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007231:	e8 95 08 00 00       	call   c0007acb <malloc>
c0007236:	89 04 24             	mov    DWORD PTR [esp],eax
c0007239:	89 c6                	mov    esi,eax
c000723b:	e8 5e 85 00 00       	call   c000f79e <CPU::CPU()>
c0007240:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007246:	58                   	pop    eax
c0007247:	5a                   	pop    edx
c0007248:	56                   	push   esi
c0007249:	53                   	push   ebx
c000724a:	e8 95 4b 00 00       	call   c000bde4 <Device::addChild(Device*)>
c000724f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007255:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007259:	8b 10                	mov    edx,DWORD PTR [eax]
c000725b:	51                   	push   ecx
c000725c:	6a 00                	push   0x0
c000725e:	6a 00                	push   0x0
c0007260:	50                   	push   eax
c0007261:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007264:	83 c4 14             	add    esp,0x14
c0007267:	68 48 fb 01 c0       	push   0xc001fb48
c000726c:	e8 5f 8f 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c0007271:	e8 46 fc 00 00       	call   c0016ebc <HalInitialiseCoprocessor()>
c0007276:	c7 04 24 b4 fa 01 c0 	mov    DWORD PTR [esp],0xc001fab4
c000727d:	e8 4e 8f 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c0007282:	c7 04 24 c5 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cc5
c0007289:	e8 96 dc 00 00       	call   c0014f24 <setupMultitasking(void (*)())>
c000728e:	83 c4 14             	add    esp,0x14
c0007291:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007296:	5b                   	pop    ebx
c0007297:	5e                   	pop    esi
c0007298:	c3                   	ret    
c0007299:	90                   	nop

c000729a <Computer::disableNMI()>:
c000729a:	6a 00                	push   0x0
c000729c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a0:	50                   	push   eax
c00072a1:	e8 08 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c00072a6:	5a                   	pop    edx
c00072a7:	59                   	pop    ecx
c00072a8:	c3                   	ret    
c00072a9:	90                   	nop

c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072aa:	53                   	push   ebx
c00072ab:	b2 80                	mov    dl,0x80
c00072ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c0:	74 02                	je     c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072c2:	31 d2                	xor    edx,edx
c00072c4:	09 d0                	or     eax,edx
c00072c6:	e6 70                	out    0x70,al
c00072c8:	88 c8                	mov    al,cl
c00072ca:	e6 71                	out    0x71,al
c00072cc:	5b                   	pop    ebx
c00072cd:	c3                   	ret    

c00072ce <Computer::handleNMI()>:
c00072ce:	56                   	push   esi
c00072cf:	53                   	push   ebx
c00072d0:	83 ec 10             	sub    esp,0x10
c00072d3:	e4 92                	in     al,0x92
c00072d5:	89 c6                	mov    esi,eax
c00072d7:	e4 61                	in     al,0x61
c00072d9:	68 cf fa 01 c0       	push   0xc001facf
c00072de:	88 c3                	mov    bl,al
c00072e0:	e8 9e 36 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00072e5:	83 c4 10             	add    esp,0x10
c00072e8:	83 e6 10             	and    esi,0x10
c00072eb:	75 10                	jne    c00072fd <Computer::handleNMI()+0x2f>
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	75 20                	jne    c0007312 <Computer::handleNMI()+0x44>
c00072f2:	80 e3 80             	and    bl,0x80
c00072f5:	75 30                	jne    c0007327 <Computer::handleNMI()+0x59>
c00072f7:	83 c4 04             	add    esp,0x4
c00072fa:	5b                   	pop    ebx
c00072fb:	5e                   	pop    esi
c00072fc:	c3                   	ret    
c00072fd:	83 ec 0c             	sub    esp,0xc
c0007300:	68 e0 fa 01 c0       	push   0xc001fae0
c0007305:	e8 43 95 00 00       	call   c001084d <KePanic(char const*)>
c000730a:	83 c4 10             	add    esp,0x10
c000730d:	f6 c3 40             	test   bl,0x40
c0007310:	74 e0                	je     c00072f2 <Computer::handleNMI()+0x24>
c0007312:	83 ec 0c             	sub    esp,0xc
c0007315:	68 ed fa 01 c0       	push   0xc001faed
c000731a:	e8 2e 95 00 00       	call   c001084d <KePanic(char const*)>
c000731f:	83 c4 10             	add    esp,0x10
c0007322:	80 e3 80             	and    bl,0x80
c0007325:	74 d0                	je     c00072f7 <Computer::handleNMI()+0x29>
c0007327:	c7 44 24 10 f7 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001faf7
c000732f:	83 c4 04             	add    esp,0x4
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	e9 14 95 00 00       	jmp    c001084d <KePanic(char const*)>
c0007339:	90                   	nop

c000733a <GDTEntry::setBase(unsigned int)>:
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007342:	89 c1                	mov    ecx,eax
c0007344:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007348:	c1 e9 10             	shr    ecx,0x10
c000734b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000734e:	c1 e8 18             	shr    eax,0x18
c0007351:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007354:	c3                   	ret    
c0007355:	90                   	nop

c0007356 <GDTEntry::setLimit(unsigned int)>:
c0007356:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000735a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007361:	66 89 01             	mov    WORD PTR [ecx],ax
c0007364:	c1 e8 10             	shr    eax,0x10
c0007367:	83 e0 0f             	and    eax,0xf
c000736a:	83 e2 f0             	and    edx,0xfffffff0
c000736d:	09 d0                	or     eax,edx
c000736f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007372:	c3                   	ret    
c0007373:	90                   	nop

c0007374 <GDT::GDT()>:
c0007374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000737e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007382:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007388:	90                   	nop
c0007389:	c3                   	ret    

c000738a <GDT::addEntry(GDTEntry)>:
c000738a:	53                   	push   ebx
c000738b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000738f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007393:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007397:	8b 02                	mov    eax,DWORD PTR [edx]
c0007399:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000739d:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a0:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073a4:	c1 e0 03             	shl    eax,0x3
c00073a7:	89 0a                	mov    DWORD PTR [edx],ecx
c00073a9:	5b                   	pop    ebx
c00073aa:	c3                   	ret    
c00073ab:	90                   	nop

c00073ac <GDT::getNumberOfEntries()>:
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::flush()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00073ba:	83 c0 04             	add    eax,0x4
c00073bd:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073c2:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073c9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073d0:	e9 85 8f ff ff       	jmp    c000035a <loadGDT>
c00073d5:	90                   	nop

c00073d6 <GDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 30             	sub    esp,0x30
c00073dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e0:	6a 00                	push   0x0
c00073e2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073e6:	56                   	push   esi
c00073e7:	e8 4e ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c00073ec:	6a 00                	push   0x0
c00073ee:	56                   	push   esi
c00073ef:	e8 62 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c00073f4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073fc:	6a 00                	push   0x0
c00073fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007402:	56                   	push   esi
c0007403:	e8 32 ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0007408:	68 ff ff ff 00       	push   0xffffff
c000740d:	56                   	push   esi
c000740e:	e8 43 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0007413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007417:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000741b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007420:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007424:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007429:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000742d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007431:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007435:	89 f8                	mov    eax,edi
c0007437:	89 fa                	mov    edx,edi
c0007439:	80 e4 f7             	and    ah,0xf7
c000743c:	80 ce 60             	or     dh,0x60
c000743f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007443:	89 c7                	mov    edi,eax
c0007445:	80 cc 60             	or     ah,0x60
c0007448:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000744c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007454:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007458:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000745c:	83 c4 20             	add    esp,0x20
c000745f:	6a 00                	push   0x0
c0007461:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007465:	50                   	push   eax
c0007466:	e8 cf fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000746b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000746f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007473:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007477:	83 e0 3f             	and    eax,0x3f
c000747a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000747e:	6a 00                	push   0x0
c0007480:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007484:	50                   	push   eax
c0007485:	e8 b0 fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000748a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000748e:	83 e0 3f             	and    eax,0x3f
c0007491:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007495:	83 c4 0c             	add    esp,0xc
c0007498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000749c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a0:	53                   	push   ebx
c00074a1:	e8 e4 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074a6:	83 c4 0c             	add    esp,0xc
c00074a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b1:	53                   	push   ebx
c00074b2:	e8 d3 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074b7:	83 c4 0c             	add    esp,0xc
c00074ba:	57                   	push   edi
c00074bb:	56                   	push   esi
c00074bc:	53                   	push   ebx
c00074bd:	e8 c8 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074c2:	83 c4 0c             	add    esp,0xc
c00074c5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074c9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074cd:	53                   	push   ebx
c00074ce:	e8 b7 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074d3:	83 c4 0c             	add    esp,0xc
c00074d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074de:	53                   	push   ebx
c00074df:	e8 a6 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074e4:	83 c4 0c             	add    esp,0xc
c00074e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074ef:	53                   	push   ebx
c00074f0:	e8 95 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074f5:	83 c4 0c             	add    esp,0xc
c00074f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007500:	53                   	push   ebx
c0007501:	e8 84 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c0007506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007509:	e8 a6 fe ff ff       	call   c00073b4 <GDT::flush()>
c000750e:	83 c4 40             	add    esp,0x40
c0007511:	5b                   	pop    ebx
c0007512:	5e                   	pop    esi
c0007513:	5f                   	pop    edi
c0007514:	c3                   	ret    

c0007515 <idleFunction(void*)>:
c0007515:	83 ec 0c             	sub    esp,0xc
c0007518:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000751d:	48                   	dec    eax
c000751e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007523:	75 01                	jne    c0007526 <idleFunction(void*)+0x11>
c0007525:	fb                   	sti    
c0007526:	e8 5d f6 00 00       	call   c0016b88 <HalSystemIdle()>
c000752b:	e8 72 73 01 00       	call   c001e8a2 <idleCommon()>
c0007530:	eb f4                	jmp    c0007526 <idleFunction(void*)+0x11>
c0007532:	66 90                	xchg   ax,ax

c0007534 <IDTEntry::IDTEntry(bool)>:
c0007534:	53                   	push   ebx
c0007535:	83 ec 04             	sub    esp,0x4
c0007538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753c:	88 04 24             	mov    BYTE PTR [esp],al
c000753f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007543:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007558:	83 e2 f0             	and    edx,0xfffffff0
c000755b:	83 ca 0e             	or     edx,0xe
c000755e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007565:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007568:	83 e2 ef             	and    edx,0xffffffef
c000756b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000756e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007572:	85 c0                	test   eax,eax
c0007574:	74 06                	je     c000757c <IDTEntry::IDTEntry(bool)+0x48>
c0007576:	b2 03                	mov    dl,0x3
c0007578:	eb 06                	jmp    c0007580 <IDTEntry::IDTEntry(bool)+0x4c>
c000757a:	66 90                	xchg   ax,ax
c000757c:	b2 00                	mov    dl,0x0
c000757e:	66 90                	xchg   ax,ax
c0007580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007584:	83 e2 03             	and    edx,0x3
c0007587:	89 d3                	mov    ebx,edx
c0007589:	c1 e3 05             	shl    ebx,0x5
c000758c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758f:	83 e2 9f             	and    edx,0xffffff9f
c0007592:	88 d1                	mov    cl,dl
c0007594:	88 da                	mov    dl,bl
c0007596:	09 ca                	or     edx,ecx
c0007598:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000759b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a2:	83 ca 80             	or     edx,0xffffff80
c00075a5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a8:	90                   	nop
c00075a9:	83 c4 04             	add    esp,0x4
c00075ac:	5b                   	pop    ebx
c00075ad:	c3                   	ret    

c00075ae <IDTEntry::setOffset(unsigned int)>:
c00075ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b6:	66 89 02             	mov    WORD PTR [edx],ax
c00075b9:	c1 e8 10             	shr    eax,0x10
c00075bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c0:	c3                   	ret    
c00075c1:	90                   	nop
c00075c2:	66 90                	xchg   ax,ax

c00075c4 <IDT::IDT()>:
c00075c4:	90                   	nop
c00075c5:	c3                   	ret    

c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ca:	83 c0 30             	add    eax,0x30
c00075cd:	c3                   	ret    

c00075ce <IDT::addEntry(IDTEntry, int)>:
c00075ce:	53                   	push   ebx
c00075cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075df:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075e2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075e6:	5b                   	pop    ebx
c00075e7:	c3                   	ret    

c00075e8 <IDT::addEntry(int, void (*)(), bool)>:
c00075e8:	53                   	push   ebx
c00075e9:	83 ec 10             	sub    esp,0x10
c00075ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f1:	50                   	push   eax
c00075f2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075f6:	53                   	push   ebx
c00075f7:	e8 38 ff ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c00075fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007600:	53                   	push   ebx
c0007601:	e8 a8 ff ff ff       	call   c00075ae <IDTEntry::setOffset(unsigned int)>
c0007606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000760a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000760e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007612:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007616:	e8 b3 ff ff ff       	call   c00075ce <IDT::addEntry(IDTEntry, int)>
c000761b:	83 c4 30             	add    esp,0x30
c000761e:	5b                   	pop    ebx
c000761f:	c3                   	ret    

c0007620 <IDT::flush()>:
c0007620:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c0007629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000762d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007632:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007639:	c3                   	ret    

c000763a <IDT::setup()>:
c000763a:	57                   	push   edi
c000763b:	56                   	push   esi
c000763c:	53                   	push   ebx
c000763d:	83 ec 10             	sub    esp,0x10
c0007640:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007644:	6a 00                	push   0x0
c0007646:	68 a0 df 01 c0       	push   0xc001dfa0
c000764b:	6a 00                	push   0x0
c000764d:	53                   	push   ebx
c000764e:	e8 95 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007653:	6a 00                	push   0x0
c0007655:	68 b0 df 01 c0       	push   0xc001dfb0
c000765a:	6a 01                	push   0x1
c000765c:	53                   	push   ebx
c000765d:	e8 86 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	83 c4 20             	add    esp,0x20
c0007665:	6a 00                	push   0x0
c0007667:	68 ba df 01 c0       	push   0xc001dfba
c000766c:	6a 02                	push   0x2
c000766e:	53                   	push   ebx
c000766f:	e8 74 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007674:	6a 00                	push   0x0
c0007676:	68 c4 df 01 c0       	push   0xc001dfc4
c000767b:	6a 03                	push   0x3
c000767d:	53                   	push   ebx
c000767e:	e8 65 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	83 c4 20             	add    esp,0x20
c0007686:	6a 00                	push   0x0
c0007688:	68 ce df 01 c0       	push   0xc001dfce
c000768d:	6a 04                	push   0x4
c000768f:	53                   	push   ebx
c0007690:	e8 53 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007695:	6a 00                	push   0x0
c0007697:	68 d8 df 01 c0       	push   0xc001dfd8
c000769c:	6a 05                	push   0x5
c000769e:	53                   	push   ebx
c000769f:	e8 44 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	83 c4 20             	add    esp,0x20
c00076a7:	6a 00                	push   0x0
c00076a9:	68 e2 df 01 c0       	push   0xc001dfe2
c00076ae:	6a 06                	push   0x6
c00076b0:	53                   	push   ebx
c00076b1:	e8 32 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	6a 00                	push   0x0
c00076b8:	68 ec df 01 c0       	push   0xc001dfec
c00076bd:	6a 07                	push   0x7
c00076bf:	53                   	push   ebx
c00076c0:	e8 23 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076c5:	83 c4 20             	add    esp,0x20
c00076c8:	6a 00                	push   0x0
c00076ca:	68 f6 df 01 c0       	push   0xc001dff6
c00076cf:	6a 08                	push   0x8
c00076d1:	53                   	push   ebx
c00076d2:	e8 11 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	6a 00                	push   0x0
c00076d9:	68 fe df 01 c0       	push   0xc001dffe
c00076de:	6a 09                	push   0x9
c00076e0:	53                   	push   ebx
c00076e1:	e8 02 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076e6:	83 c4 20             	add    esp,0x20
c00076e9:	6a 00                	push   0x0
c00076eb:	68 08 e0 01 c0       	push   0xc001e008
c00076f0:	6a 0a                	push   0xa
c00076f2:	53                   	push   ebx
c00076f3:	e8 f0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	6a 00                	push   0x0
c00076fa:	68 10 e0 01 c0       	push   0xc001e010
c00076ff:	6a 0b                	push   0xb
c0007701:	53                   	push   ebx
c0007702:	e8 e1 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007707:	83 c4 20             	add    esp,0x20
c000770a:	6a 00                	push   0x0
c000770c:	68 18 e0 01 c0       	push   0xc001e018
c0007711:	6a 0c                	push   0xc
c0007713:	53                   	push   ebx
c0007714:	e8 cf fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007719:	6a 00                	push   0x0
c000771b:	68 20 e0 01 c0       	push   0xc001e020
c0007720:	6a 0d                	push   0xd
c0007722:	53                   	push   ebx
c0007723:	e8 c0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007728:	83 c4 20             	add    esp,0x20
c000772b:	6a 00                	push   0x0
c000772d:	68 3a e0 01 c0       	push   0xc001e03a
c0007732:	6a 0e                	push   0xe
c0007734:	53                   	push   ebx
c0007735:	e8 ae fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000773a:	6a 00                	push   0x0
c000773c:	68 42 e0 01 c0       	push   0xc001e042
c0007741:	6a 0f                	push   0xf
c0007743:	53                   	push   ebx
c0007744:	e8 9f fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007749:	83 c4 20             	add    esp,0x20
c000774c:	6a 00                	push   0x0
c000774e:	68 4c e0 01 c0       	push   0xc001e04c
c0007753:	6a 10                	push   0x10
c0007755:	53                   	push   ebx
c0007756:	e8 8d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000775b:	6a 00                	push   0x0
c000775d:	68 56 e0 01 c0       	push   0xc001e056
c0007762:	6a 11                	push   0x11
c0007764:	53                   	push   ebx
c0007765:	e8 7e fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000776a:	83 c4 20             	add    esp,0x20
c000776d:	6a 00                	push   0x0
c000776f:	68 60 e0 01 c0       	push   0xc001e060
c0007774:	6a 12                	push   0x12
c0007776:	53                   	push   ebx
c0007777:	e8 6c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000777c:	6a 01                	push   0x1
c000777e:	68 fa e0 01 c0       	push   0xc001e0fa
c0007783:	6a 60                	push   0x60
c0007785:	53                   	push   ebx
c0007786:	e8 5d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000778b:	83 c4 20             	add    esp,0x20
c000778e:	6a 00                	push   0x0
c0007790:	68 01 e1 01 c0       	push   0xc001e101
c0007795:	6a 20                	push   0x20
c0007797:	53                   	push   ebx
c0007798:	e8 4b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000779d:	6a 00                	push   0x0
c000779f:	68 ec e0 01 c0       	push   0xc001e0ec
c00077a4:	6a 21                	push   0x21
c00077a6:	53                   	push   ebx
c00077a7:	e8 3c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ac:	83 c4 20             	add    esp,0x20
c00077af:	6a 00                	push   0x0
c00077b1:	68 f3 e0 01 c0       	push   0xc001e0f3
c00077b6:	6a 22                	push   0x22
c00077b8:	53                   	push   ebx
c00077b9:	e8 2a fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077be:	6a 00                	push   0x0
c00077c0:	68 6a e0 01 c0       	push   0xc001e06a
c00077c5:	6a 23                	push   0x23
c00077c7:	53                   	push   ebx
c00077c8:	e8 1b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077cd:	83 c4 20             	add    esp,0x20
c00077d0:	6a 00                	push   0x0
c00077d2:	68 74 e0 01 c0       	push   0xc001e074
c00077d7:	6a 24                	push   0x24
c00077d9:	53                   	push   ebx
c00077da:	e8 09 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077df:	6a 00                	push   0x0
c00077e1:	68 7e e0 01 c0       	push   0xc001e07e
c00077e6:	6a 25                	push   0x25
c00077e8:	53                   	push   ebx
c00077e9:	e8 fa fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ee:	83 c4 20             	add    esp,0x20
c00077f1:	6a 00                	push   0x0
c00077f3:	68 88 e0 01 c0       	push   0xc001e088
c00077f8:	6a 26                	push   0x26
c00077fa:	53                   	push   ebx
c00077fb:	e8 e8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007800:	6a 00                	push   0x0
c0007802:	68 92 e0 01 c0       	push   0xc001e092
c0007807:	6a 27                	push   0x27
c0007809:	53                   	push   ebx
c000780a:	e8 d9 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	6a 00                	push   0x0
c0007814:	68 9c e0 01 c0       	push   0xc001e09c
c0007819:	6a 28                	push   0x28
c000781b:	53                   	push   ebx
c000781c:	e8 c7 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007821:	6a 00                	push   0x0
c0007823:	68 a6 e0 01 c0       	push   0xc001e0a6
c0007828:	6a 29                	push   0x29
c000782a:	53                   	push   ebx
c000782b:	e8 b8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	6a 00                	push   0x0
c0007835:	68 b0 e0 01 c0       	push   0xc001e0b0
c000783a:	6a 2a                	push   0x2a
c000783c:	53                   	push   ebx
c000783d:	e8 a6 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007842:	6a 00                	push   0x0
c0007844:	68 ba e0 01 c0       	push   0xc001e0ba
c0007849:	6a 2b                	push   0x2b
c000784b:	53                   	push   ebx
c000784c:	e8 97 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007851:	83 c4 20             	add    esp,0x20
c0007854:	6a 00                	push   0x0
c0007856:	68 c4 e0 01 c0       	push   0xc001e0c4
c000785b:	6a 2c                	push   0x2c
c000785d:	53                   	push   ebx
c000785e:	e8 85 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007863:	6a 00                	push   0x0
c0007865:	68 ce e0 01 c0       	push   0xc001e0ce
c000786a:	6a 2d                	push   0x2d
c000786c:	53                   	push   ebx
c000786d:	e8 76 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007872:	83 c4 20             	add    esp,0x20
c0007875:	6a 00                	push   0x0
c0007877:	68 d8 e0 01 c0       	push   0xc001e0d8
c000787c:	6a 2e                	push   0x2e
c000787e:	53                   	push   ebx
c000787f:	e8 64 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007884:	6a 00                	push   0x0
c0007886:	68 e2 e0 01 c0       	push   0xc001e0e2
c000788b:	6a 2f                	push   0x2f
c000788d:	53                   	push   ebx
c000788e:	e8 55 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007893:	83 c4 20             	add    esp,0x20
c0007896:	6a 00                	push   0x0
c0007898:	68 3c e2 01 c0       	push   0xc001e23c
c000789d:	6a 30                	push   0x30
c000789f:	53                   	push   ebx
c00078a0:	e8 43 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078a5:	6a 00                	push   0x0
c00078a7:	68 46 e2 01 c0       	push   0xc001e246
c00078ac:	6a 31                	push   0x31
c00078ae:	53                   	push   ebx
c00078af:	e8 34 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078b4:	83 c4 20             	add    esp,0x20
c00078b7:	6a 00                	push   0x0
c00078b9:	68 50 e2 01 c0       	push   0xc001e250
c00078be:	6a 32                	push   0x32
c00078c0:	53                   	push   ebx
c00078c1:	e8 22 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078c6:	6a 00                	push   0x0
c00078c8:	68 5a e2 01 c0       	push   0xc001e25a
c00078cd:	6a 33                	push   0x33
c00078cf:	53                   	push   ebx
c00078d0:	e8 13 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078d5:	83 c4 20             	add    esp,0x20
c00078d8:	6a 00                	push   0x0
c00078da:	68 64 e2 01 c0       	push   0xc001e264
c00078df:	6a 34                	push   0x34
c00078e1:	53                   	push   ebx
c00078e2:	e8 01 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078e7:	6a 00                	push   0x0
c00078e9:	68 6e e2 01 c0       	push   0xc001e26e
c00078ee:	6a 35                	push   0x35
c00078f0:	53                   	push   ebx
c00078f1:	e8 f2 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078f6:	83 c4 20             	add    esp,0x20
c00078f9:	6a 00                	push   0x0
c00078fb:	68 78 e2 01 c0       	push   0xc001e278
c0007900:	6a 36                	push   0x36
c0007902:	53                   	push   ebx
c0007903:	e8 e0 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007908:	6a 00                	push   0x0
c000790a:	68 82 e2 01 c0       	push   0xc001e282
c000790f:	6a 37                	push   0x37
c0007911:	53                   	push   ebx
c0007912:	e8 d1 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007917:	83 c4 1c             	add    esp,0x1c
c000791a:	6a 03                	push   0x3
c000791c:	6a 02                	push   0x2
c000791e:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007924:	e8 c7 24 00 00       	call   c0009df0 <VAS::allocatePages(int, int)>
c0007929:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007930:	89 c6                	mov    esi,eax
c0007932:	e8 94 01 00 00       	call   c0007acb <malloc>
c0007937:	81 c6 00 20 00 00    	add    esi,0x2000
c000793d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007940:	89 c7                	mov    edi,eax
c0007942:	e8 f5 15 00 00       	call   c0008f3c <TSS::TSS()>
c0007947:	83 c4 0c             	add    esp,0xc
c000794a:	68 f6 df 01 c0       	push   0xc001dff6
c000794f:	56                   	push   esi
c0007950:	57                   	push   edi
c0007951:	e8 2a 16 00 00       	call   c0008f80 <TSS::setup(unsigned long, unsigned long)>
c0007956:	89 c6                	mov    esi,eax
c0007958:	58                   	pop    eax
c0007959:	5a                   	pop    edx
c000795a:	6a 00                	push   0x0
c000795c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007960:	50                   	push   eax
c0007961:	e8 ce fb ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c0007966:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000796f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007976:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000797a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007980:	80 ce 05             	or     dh,0x5
c0007983:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007987:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000798a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000798e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007994:	e8 87 fc ff ff       	call   c0007620 <IDT::flush()>
c0007999:	83 c4 20             	add    esp,0x20
c000799c:	5b                   	pop    ebx
c000799d:	5e                   	pop    esi
c000799e:	5f                   	pop    edi
c000799f:	c3                   	ret    

c00079a0 <sbrk>:
c00079a0:	55                   	push   ebp
c00079a1:	57                   	push   edi
c00079a2:	56                   	push   esi
c00079a3:	53                   	push   ebx
c00079a4:	83 ec 1c             	sub    esp,0x1c
c00079a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079ab:	85 c0                	test   eax,eax
c00079ad:	74 66                	je     c0007a15 <sbrk+0x75>
c00079af:	78 6b                	js     c0007a1c <sbrk+0x7c>
c00079b1:	8b 15 08 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f08
c00079b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079bb:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c1:	05 ff 0f 00 00       	add    eax,0xfff
c00079c6:	0f 49 e8             	cmovns ebp,eax
c00079c9:	c1 fd 0c             	sar    ebp,0xc
c00079cc:	bb 00 00 00 00       	mov    ebx,0x0
c00079d1:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079d7:	8b 3d 08 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021f08
c00079dd:	e8 f4 03 00 00       	call   c0007dd6 <Phys::allocatePage()>
c00079e2:	68 01 04 00 00       	push   0x401
c00079e7:	57                   	push   edi
c00079e8:	50                   	push   eax
c00079e9:	56                   	push   esi
c00079ea:	e8 f5 22 00 00       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ef:	81 05 08 1f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021f08,0x1000
c00079f9:	83 c3 01             	add    ebx,0x1
c00079fc:	83 c4 10             	add    esp,0x10
c00079ff:	39 dd                	cmp    ebp,ebx
c0007a01:	75 ce                	jne    c00079d1 <sbrk+0x31>
c0007a03:	0f 20 d8             	mov    eax,cr3
c0007a06:	0f 22 d8             	mov    cr3,eax
c0007a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a0d:	83 c4 1c             	add    esp,0x1c
c0007a10:	5b                   	pop    ebx
c0007a11:	5e                   	pop    esi
c0007a12:	5f                   	pop    edi
c0007a13:	5d                   	pop    ebp
c0007a14:	c3                   	ret    
c0007a15:	a1 08 1f 02 c0       	mov    eax,ds:0xc0021f08
c0007a1a:	eb f1                	jmp    c0007a0d <sbrk+0x6d>
c0007a1c:	83 ec 08             	sub    esp,0x8
c0007a1f:	50                   	push   eax
c0007a20:	68 98 fb 01 c0       	push   0xc001fb98
c0007a25:	e8 59 2f 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0007a2a:	83 c4 10             	add    esp,0x10
c0007a2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a32:	eb d9                	jmp    c0007a0d <sbrk+0x6d>

c0007a34 <mmap>:
c0007a34:	83 ec 18             	sub    esp,0x18
c0007a37:	68 c8 fb 01 c0       	push   0xc001fbc8
c0007a3c:	e8 0c 8e 00 00       	call   c001084d <KePanic(char const*)>
c0007a41:	b8 00 00 00 00       	mov    eax,0x0
c0007a46:	83 c4 1c             	add    esp,0x1c
c0007a49:	c3                   	ret    

c0007a4a <munmap>:
c0007a4a:	83 ec 18             	sub    esp,0x18
c0007a4d:	68 cd fb 01 c0       	push   0xc001fbcd
c0007a52:	e8 f6 8d 00 00       	call   c001084d <KePanic(char const*)>
c0007a57:	b8 00 00 00 00       	mov    eax,0x0
c0007a5c:	83 c4 1c             	add    esp,0x1c
c0007a5f:	c3                   	ret    

c0007a60 <liballoc_lock()>:
c0007a60:	fa                   	cli    
c0007a61:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a68:	b8 00 00 00 00       	mov    eax,0x0
c0007a6d:	c3                   	ret    

c0007a6e <liballoc_unlock()>:
c0007a6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a73:	83 e8 01             	sub    eax,0x1
c0007a76:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a7b:	75 01                	jne    c0007a7e <liballoc_unlock()+0x10>
c0007a7d:	fb                   	sti    
c0007a7e:	b8 00 00 00 00       	mov    eax,0x0
c0007a83:	c3                   	ret    

c0007a84 <liballoc_alloc(int)>:
c0007a84:	83 ec 10             	sub    esp,0x10
c0007a87:	6a 01                	push   0x1
c0007a89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8d:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a93:	e8 58 23 00 00       	call   c0009df0 <VAS::allocatePages(int, int)>
c0007a98:	83 c4 1c             	add    esp,0x1c
c0007a9b:	c3                   	ret    

c0007a9c <liballoc_free(void*, int)>:
c0007a9c:	83 ec 14             	sub    esp,0x14
c0007a9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aa3:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007aa9:	e8 7c 1f 00 00       	call   c0009a2a <VAS::freeAllocatedPages(unsigned long)>
c0007aae:	b8 00 00 00 00       	mov    eax,0x0
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <realloc>:
c0007ab7:	83 ec 14             	sub    esp,0x14
c0007aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac2:	e8 5a 9b ff ff       	call   c0001621 <dlrealloc>
c0007ac7:	83 c4 1c             	add    esp,0x1c
c0007aca:	c3                   	ret    

c0007acb <malloc>:
c0007acb:	83 ec 18             	sub    esp,0x18
c0007ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad2:	e8 0d 96 ff ff       	call   c00010e4 <dlmalloc>
c0007ad7:	83 c4 1c             	add    esp,0x1c
c0007ada:	c3                   	ret    

c0007adb <free>:
c0007adb:	83 ec 18             	sub    esp,0x18
c0007ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ae2:	e8 9f 92 ff ff       	call   c0000d86 <dlfree>
c0007ae7:	83 c4 1c             	add    esp,0x1c
c0007aea:	c3                   	ret    

c0007aeb <rfree>:
c0007aeb:	83 ec 18             	sub    esp,0x18
c0007aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007af2:	e8 8f 92 ff ff       	call   c0000d86 <dlfree>
c0007af7:	83 c4 1c             	add    esp,0x1c
c0007afa:	c3                   	ret    

c0007afb <calloc>:
c0007afb:	56                   	push   esi
c0007afc:	53                   	push   ebx
c0007afd:	83 ec 10             	sub    esp,0x10
c0007b00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b04:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b09:	53                   	push   ebx
c0007b0a:	e8 bc ff ff ff       	call   c0007acb <malloc>
c0007b0f:	89 c6                	mov    esi,eax
c0007b11:	83 c4 0c             	add    esp,0xc
c0007b14:	53                   	push   ebx
c0007b15:	6a 00                	push   0x0
c0007b17:	50                   	push   eax
c0007b18:	e8 d3 89 ff ff       	call   c00004f0 <memset>
c0007b1d:	89 f0                	mov    eax,esi
c0007b1f:	83 c4 14             	add    esp,0x14
c0007b22:	5b                   	pop    ebx
c0007b23:	5e                   	pop    esi
c0007b24:	c3                   	ret    

c0007b25 <KeEntryPoint>:
c0007b25:	57                   	push   edi
c0007b26:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b2b:	56                   	push   esi
c0007b2c:	31 f6                	xor    esi,esi
c0007b2e:	53                   	push   ebx
c0007b2f:	89 fa                	mov    edx,edi
c0007b31:	83 ec 2c             	sub    esp,0x2c
c0007b34:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b39:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b3e:	89 f0                	mov    eax,esi
c0007b40:	ee                   	out    dx,al
c0007b41:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b46:	b0 80                	mov    al,0x80
c0007b48:	89 da                	mov    edx,ebx
c0007b4a:	ee                   	out    dx,al
c0007b4b:	b1 03                	mov    cl,0x3
c0007b4d:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b52:	88 c8                	mov    al,cl
c0007b54:	ee                   	out    dx,al
c0007b55:	89 f0                	mov    eax,esi
c0007b57:	89 fa                	mov    edx,edi
c0007b59:	ee                   	out    dx,al
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	ee                   	out    dx,al
c0007b5f:	b0 c7                	mov    al,0xc7
c0007b61:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 0b                	mov    al,0xb
c0007b69:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b6e:	ee                   	out    dx,al
c0007b6f:	68 d4 fb 01 c0       	push   0xc001fbd4
c0007b74:	e8 0a 2e 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0007b79:	e8 dd 85 00 00       	call   c001015b <KeDisplaySplashScreen()>
c0007b7e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b83:	05 ff 0f 00 00       	add    eax,0xfff
c0007b88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b90:	e8 af 03 00 00       	call   c0007f44 <Phys::physicalMemorySetup(unsigned int)>
c0007b95:	e8 3f 1c 00 00       	call   c00097d9 <Virt::virtualMemorySetup()>
c0007b9a:	58                   	pop    eax
c0007b9b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b9f:	53                   	push   ebx
c0007ba0:	e8 07 1f 00 00       	call   c0009aac <VAS::VAS()>
c0007ba5:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007bab:	e8 8a 6c 01 00       	call   c001e83a <_init>
c0007bb0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bb7:	e8 0f ff ff ff       	call   c0007acb <malloc>
c0007bbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bbf:	89 c6                	mov    esi,eax
c0007bc1:	e8 3a f2 ff ff       	call   c0006e00 <Computer::Computer()>
c0007bc6:	6a 00                	push   0x0
c0007bc8:	6a 00                	push   0x0
c0007bca:	6a 00                	push   0x0
c0007bcc:	56                   	push   esi
c0007bcd:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bd3:	e8 ee f5 ff ff       	call   c00071c6 <Computer::open(int, int, void*)>
c0007bd8:	83 c4 14             	add    esp,0x14
c0007bdb:	53                   	push   ebx
c0007bdc:	e8 95 1f 00 00       	call   c0009b76 <VAS::~VAS()>
c0007be1:	83 c4 30             	add    esp,0x30
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	5f                   	pop    edi
c0007be7:	c3                   	ret    

c0007be8 <Phys::allocateDMA(unsigned long)>:
c0007be8:	55                   	push   ebp
c0007be9:	31 ed                	xor    ebp,ebp
c0007beb:	57                   	push   edi
c0007bec:	56                   	push   esi
c0007bed:	31 f6                	xor    esi,esi
c0007bef:	53                   	push   ebx
c0007bf0:	31 db                	xor    ebx,ebx
c0007bf2:	83 ec 1c             	sub    esp,0x1c
c0007bf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bf9:	05 ff 0f 00 00       	add    eax,0xfff
c0007bfe:	c1 e8 0c             	shr    eax,0xc
c0007c01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c05:	31 c0                	xor    eax,eax
c0007c07:	eb 1b                	jmp    c0007c24 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c09:	8d 78 01             	lea    edi,[eax+0x1]
c0007c0c:	85 c0                	test   eax,eax
c0007c0e:	0f 44 eb             	cmove  ebp,ebx
c0007c11:	0f 44 f3             	cmove  esi,ebx
c0007c14:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c18:	74 37                	je     c0007c51 <Phys::allocateDMA(unsigned long)+0x69>
c0007c1a:	89 f8                	mov    eax,edi
c0007c1c:	83 c3 01             	add    ebx,0x1
c0007c1f:	83 fb 0f             	cmp    ebx,0xf
c0007c22:	7f 13                	jg     c0007c37 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c24:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c2b:	74 dc                	je     c0007c09 <Phys::allocateDMA(unsigned long)+0x21>
c0007c2d:	31 c0                	xor    eax,eax
c0007c2f:	83 c3 01             	add    ebx,0x1
c0007c32:	83 fb 0f             	cmp    ebx,0xf
c0007c35:	7e ed                	jle    c0007c24 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c37:	83 ec 0c             	sub    esp,0xc
c0007c3a:	68 ec fb 01 c0       	push   0xc001fbec
c0007c3f:	e8 09 8c 00 00       	call   c001084d <KePanic(char const*)>
c0007c44:	83 c4 10             	add    esp,0x10
c0007c47:	31 c0                	xor    eax,eax
c0007c49:	83 c4 1c             	add    esp,0x1c
c0007c4c:	5b                   	pop    ebx
c0007c4d:	5e                   	pop    esi
c0007c4e:	5f                   	pop    edi
c0007c4f:	5d                   	pop    ebp
c0007c50:	c3                   	ret    
c0007c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c55:	89 f2                	mov    edx,esi
c0007c57:	c1 fa 04             	sar    edx,0x4
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	01 f1                	add    ecx,esi
c0007c60:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c63:	83 e9 01             	sub    ecx,0x1
c0007c66:	0f 48 ca             	cmovs  ecx,edx
c0007c69:	c1 f9 04             	sar    ecx,0x4
c0007c6c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c70:	74 06                	je     c0007c78 <Phys::allocateDMA(unsigned long)+0x90>
c0007c72:	89 eb                	mov    ebx,ebp
c0007c74:	31 c0                	xor    eax,eax
c0007c76:	eb b7                	jmp    c0007c2f <Phys::allocateDMA(unsigned long)+0x47>
c0007c78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7c:	85 d2                	test   edx,edx
c0007c7e:	74 17                	je     c0007c97 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c80:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007c86:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007c8d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c90:	83 c2 01             	add    edx,0x1
c0007c93:	39 d0                	cmp    eax,edx
c0007c95:	75 f6                	jne    c0007c8d <Phys::allocateDMA(unsigned long)+0xa5>
c0007c97:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007c9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ca5:	01 c2                	add    edx,eax
c0007ca7:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007cad:	85 c9                	test   ecx,ecx
c0007caf:	74 17                	je     c0007cc8 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cb1:	83 ec 0c             	sub    esp,0xc
c0007cb4:	68 ec fb 01 c0       	push   0xc001fbec
c0007cb9:	e8 8f 8b 00 00       	call   c001084d <KePanic(char const*)>
c0007cbe:	83 c4 10             	add    esp,0x10
c0007cc1:	89 f8                	mov    eax,edi
c0007cc3:	e9 54 ff ff ff       	jmp    c0007c1c <Phys::allocateDMA(unsigned long)+0x34>
c0007cc8:	c1 e6 0c             	shl    esi,0xc
c0007ccb:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cd1:	e9 73 ff ff ff       	jmp    c0007c49 <Phys::allocateDMA(unsigned long)+0x61>

c0007cd6 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cda:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007ce0:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007ce5:	c1 ea 0c             	shr    edx,0xc
c0007ce8:	29 d0                	sub    eax,edx
c0007cea:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007cef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cf8:	c1 e8 0c             	shr    eax,0xc
c0007cfb:	85 d2                	test   edx,edx
c0007cfd:	74 11                	je     c0007d10 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cff:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007d04:	01 c2                	add    edx,eax
c0007d06:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d09:	83 c0 01             	add    eax,0x1
c0007d0c:	39 d0                	cmp    eax,edx
c0007d0e:	75 f6                	jne    c0007d06 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d10:	c3                   	ret    

c0007d11 <Phys::setPageState(unsigned long, bool)>:
c0007d11:	57                   	push   edi
c0007d12:	56                   	push   esi
c0007d13:	8b 35 0c 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021f0c
c0007d19:	53                   	push   ebx
c0007d1a:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d27:	89 ca                	mov    edx,ecx
c0007d29:	83 e1 07             	and    ecx,0x7
c0007d2c:	c1 ea 03             	shr    edx,0x3
c0007d2f:	0f b6 c0             	movzx  eax,al
c0007d32:	d3 c3                	rol    ebx,cl
c0007d34:	01 d6                	add    esi,edx
c0007d36:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d39:	d3 e0                	shl    eax,cl
c0007d3b:	21 fb                	and    ebx,edi
c0007d3d:	88 1e                	mov    BYTE PTR [esi],bl
c0007d3f:	8b 1d 0c 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f0c
c0007d45:	01 da                	add    edx,ebx
c0007d47:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d49:	09 c8                	or     eax,ecx
c0007d4b:	88 02                	mov    BYTE PTR [edx],al
c0007d4d:	5b                   	pop    ebx
c0007d4e:	5e                   	pop    esi
c0007d4f:	5f                   	pop    edi
c0007d50:	c3                   	ret    

c0007d51 <Phys::getPageState(unsigned long)>:
c0007d51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d55:	8b 15 0c 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f0c
c0007d5b:	89 c8                	mov    eax,ecx
c0007d5d:	83 e1 07             	and    ecx,0x7
c0007d60:	c1 e8 03             	shr    eax,0x3
c0007d63:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d67:	d3 f8                	sar    eax,cl
c0007d69:	83 e0 01             	and    eax,0x1
c0007d6c:	c3                   	ret    

c0007d6d <Phys::freePage(unsigned long)>:
c0007d6d:	53                   	push   ebx
c0007d6e:	83 ec 08             	sub    esp,0x8
c0007d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d75:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d7b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d81:	76 41                	jbe    c0007dc4 <Phys::freePage(unsigned long)+0x57>
c0007d83:	c1 e8 0c             	shr    eax,0xc
c0007d86:	50                   	push   eax
c0007d87:	89 c3                	mov    ebx,eax
c0007d89:	e8 c3 ff ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007d8e:	5a                   	pop    edx
c0007d8f:	84 c0                	test   al,al
c0007d91:	74 20                	je     c0007db3 <Phys::freePage(unsigned long)+0x46>
c0007d93:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d98:	83 ec 08             	sub    esp,0x8
c0007d9b:	6a 00                	push   0x0
c0007d9d:	53                   	push   ebx
c0007d9e:	83 e8 01             	sub    eax,0x1
c0007da1:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007da6:	e8 66 ff ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	83 c4 08             	add    esp,0x8
c0007db1:	5b                   	pop    ebx
c0007db2:	c3                   	ret    
c0007db3:	c7 44 24 10 91 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc91
c0007dbb:	83 c4 08             	add    esp,0x8
c0007dbe:	5b                   	pop    ebx
c0007dbf:	e9 89 8a 00 00       	jmp    c001084d <KePanic(char const*)>
c0007dc4:	68 00 10 00 00       	push   0x1000
c0007dc9:	50                   	push   eax
c0007dca:	e8 07 ff ff ff       	call   c0007cd6 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dcf:	59                   	pop    ecx
c0007dd0:	5b                   	pop    ebx
c0007dd1:	83 c4 08             	add    esp,0x8
c0007dd4:	5b                   	pop    ebx
c0007dd5:	c3                   	ret    

c0007dd6 <Phys::allocatePage()>:
c0007dd6:	56                   	push   esi
c0007dd7:	53                   	push   ebx
c0007dd8:	83 ec 14             	sub    esp,0x14
c0007ddb:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007de1:	89 f3                	mov    ebx,esi
c0007de3:	eb 0a                	jmp    c0007def <Phys::allocatePage()+0x19>
c0007de5:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007deb:	39 de                	cmp    esi,ebx
c0007ded:	74 26                	je     c0007e15 <Phys::allocatePage()+0x3f>
c0007def:	53                   	push   ebx
c0007df0:	e8 5c ff ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007df5:	5a                   	pop    edx
c0007df6:	84 c0                	test   al,al
c0007df8:	74 67                	je     c0007e61 <Phys::allocatePage()+0x8b>
c0007dfa:	83 c3 01             	add    ebx,0x1
c0007dfd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e03:	75 e0                	jne    c0007de5 <Phys::allocatePage()+0xf>
c0007e05:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007e0f:	31 db                	xor    ebx,ebx
c0007e11:	39 de                	cmp    esi,ebx
c0007e13:	75 da                	jne    c0007def <Phys::allocatePage()+0x19>
c0007e15:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007e1a:	83 ec 0c             	sub    esp,0xc
c0007e1d:	83 f0 01             	xor    eax,0x1
c0007e20:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e2d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e33:	50                   	push   eax
c0007e34:	e8 19 28 00 00       	call   c000a652 <VAS::scanForEviction()>
c0007e39:	83 c4 10             	add    esp,0x10
c0007e3c:	85 c0                	test   eax,eax
c0007e3e:	75 48                	jne    c0007e88 <Phys::allocatePage()+0xb2>
c0007e40:	83 ec 0c             	sub    esp,0xc
c0007e43:	68 14 fc 01 c0       	push   0xc001fc14
c0007e48:	e8 00 8a 00 00       	call   c001084d <KePanic(char const*)>
c0007e4d:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e53:	83 c4 10             	add    esp,0x10
c0007e56:	53                   	push   ebx
c0007e57:	e8 f5 fe ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007e5c:	5a                   	pop    edx
c0007e5d:	84 c0                	test   al,al
c0007e5f:	75 99                	jne    c0007dfa <Phys::allocatePage()+0x24>
c0007e61:	6a 01                	push   0x1
c0007e63:	53                   	push   ebx
c0007e64:	e8 a8 fe ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007e69:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e6f:	59                   	pop    ecx
c0007e70:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e75:	5b                   	pop    ebx
c0007e76:	83 c2 01             	add    edx,0x1
c0007e79:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e7f:	c1 e0 0c             	shl    eax,0xc
c0007e82:	83 c4 14             	add    esp,0x14
c0007e85:	5b                   	pop    ebx
c0007e86:	5e                   	pop    esi
c0007e87:	c3                   	ret    
c0007e88:	83 ec 08             	sub    esp,0x8
c0007e8b:	89 c2                	mov    edx,eax
c0007e8d:	6a 01                	push   0x1
c0007e8f:	c1 ea 0c             	shr    edx,0xc
c0007e92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e96:	52                   	push   edx
c0007e97:	e8 75 fe ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007e9c:	83 c4 10             	add    esp,0x10
c0007e9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ea3:	eb dd                	jmp    c0007e82 <Phys::allocatePage()+0xac>

c0007ea5 <Phys::allocateContiguousPages(int)>:
c0007ea5:	57                   	push   edi
c0007ea6:	56                   	push   esi
c0007ea7:	53                   	push   ebx
c0007ea8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eac:	fa                   	cli    
c0007ead:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007eb2:	31 db                	xor    ebx,ebx
c0007eb4:	83 c0 01             	add    eax,0x1
c0007eb7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ebc:	85 db                	test   ebx,ebx
c0007ebe:	75 11                	jne    c0007ed1 <Phys::allocateContiguousPages(int)+0x2c>
c0007ec0:	e8 11 ff ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0007ec5:	83 fe 01             	cmp    esi,0x1
c0007ec8:	89 c7                	mov    edi,eax
c0007eca:	74 21                	je     c0007eed <Phys::allocateContiguousPages(int)+0x48>
c0007ecc:	bb 01 00 00 00       	mov    ebx,0x1
c0007ed1:	e8 00 ff ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0007ed6:	89 da                	mov    edx,ebx
c0007ed8:	c1 e2 0c             	shl    edx,0xc
c0007edb:	01 fa                	add    edx,edi
c0007edd:	39 c2                	cmp    edx,eax
c0007edf:	74 22                	je     c0007f03 <Phys::allocateContiguousPages(int)+0x5e>
c0007ee1:	83 fe 01             	cmp    esi,0x1
c0007ee4:	bb 01 00 00 00       	mov    ebx,0x1
c0007ee9:	89 c7                	mov    edi,eax
c0007eeb:	75 e4                	jne    c0007ed1 <Phys::allocateContiguousPages(int)+0x2c>
c0007eed:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ef2:	83 e8 01             	sub    eax,0x1
c0007ef5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007efa:	75 01                	jne    c0007efd <Phys::allocateContiguousPages(int)+0x58>
c0007efc:	fb                   	sti    
c0007efd:	5b                   	pop    ebx
c0007efe:	89 f8                	mov    eax,edi
c0007f00:	5e                   	pop    esi
c0007f01:	5f                   	pop    edi
c0007f02:	c3                   	ret    
c0007f03:	83 c3 01             	add    ebx,0x1
c0007f06:	39 f3                	cmp    ebx,esi
c0007f08:	75 b2                	jne    c0007ebc <Phys::allocateContiguousPages(int)+0x17>
c0007f0a:	eb e1                	jmp    c0007eed <Phys::allocateContiguousPages(int)+0x48>

c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f0c:	56                   	push   esi
c0007f0d:	53                   	push   ebx
c0007f0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f12:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f18:	73 06                	jae    c0007f20 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f1a:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f24:	c1 eb 0c             	shr    ebx,0xc
c0007f27:	c1 e8 0c             	shr    eax,0xc
c0007f2a:	39 d8                	cmp    eax,ebx
c0007f2c:	73 13                	jae    c0007f41 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f2e:	6a 00                	push   0x0
c0007f30:	50                   	push   eax
c0007f31:	8d 70 01             	lea    esi,[eax+0x1]
c0007f34:	e8 d8 fd ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 f0                	mov    eax,esi
c0007f3d:	5a                   	pop    edx
c0007f3e:	59                   	pop    ecx
c0007f3f:	75 ed                	jne    c0007f2e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f41:	5b                   	pop    ebx
c0007f42:	5e                   	pop    esi
c0007f43:	c3                   	ret    

c0007f44 <Phys::physicalMemorySetup(unsigned int)>:
c0007f44:	55                   	push   ebp
c0007f45:	57                   	push   edi
c0007f46:	56                   	push   esi
c0007f47:	53                   	push   ebx
c0007f48:	31 db                	xor    ebx,ebx
c0007f4a:	83 ec 40             	sub    esp,0x40
c0007f4d:	6a 10                	push   0x10
c0007f4f:	6a 00                	push   0x0
c0007f51:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f56:	e8 95 85 ff ff       	call   c00004f0 <memset>
c0007f5b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f64:	05 00 10 00 00       	add    eax,0x1000
c0007f69:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f6d:	5a                   	pop    edx
c0007f6e:	59                   	pop    ecx
c0007f6f:	50                   	push   eax
c0007f70:	68 a7 fc 01 c0       	push   0xc001fca7
c0007f75:	e8 09 2a 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0007f7a:	83 c4 10             	add    esp,0x10
c0007f7d:	83 ec 08             	sub    esp,0x8
c0007f80:	6a 01                	push   0x1
c0007f82:	53                   	push   ebx
c0007f83:	83 c3 01             	add    ebx,0x1
c0007f86:	e8 86 fd ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007f8b:	83 c4 10             	add    esp,0x10
c0007f8e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f94:	75 e7                	jne    c0007f7d <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f96:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fa1:	85 c0                	test   eax,eax
c0007fa3:	0f 84 43 01 00 00    	je     c00080ec <Phys::physicalMemorySetup(unsigned int)+0x1a8>
c0007fa9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fb1:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fb6:	e9 82 00 00 00       	jmp    c000803d <Phys::physicalMemorySetup(unsigned int)+0xf9>
c0007fbb:	ba 00 00 08 00       	mov    edx,0x80000
c0007fc0:	89 c1                	mov    ecx,eax
c0007fc2:	39 f2                	cmp    edx,esi
c0007fc4:	19 f9                	sbb    ecx,edi
c0007fc6:	0f 82 c0 00 00 00    	jb     c000808c <Phys::physicalMemorySetup(unsigned int)+0x148>
c0007fcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fd0:	89 c5                	mov    ebp,eax
c0007fd2:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007fda:	19 cd                	sbb    ebp,ecx
c0007fdc:	0f 83 af 00 00 00    	jae    c0008091 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007fe2:	89 d6                	mov    esi,edx
c0007fe4:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fe9:	39 f2                	cmp    edx,esi
c0007feb:	89 cf                	mov    edi,ecx
c0007fed:	19 c8                	sbb    eax,ecx
c0007fef:	73 07                	jae    c0007ff8 <Phys::physicalMemorySetup(unsigned int)+0xb4>
c0007ff1:	be 00 00 0a 00       	mov    esi,0xa0000
c0007ff6:	31 ff                	xor    edi,edi
c0007ff8:	89 f2                	mov    edx,esi
c0007ffa:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007fff:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0008005:	89 f9                	mov    ecx,edi
c0008007:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000800b:	83 d1 ff             	adc    ecx,0xffffffff
c000800e:	39 d0                	cmp    eax,edx
c0008010:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0008014:	b8 00 00 00 00       	mov    eax,0x0
c0008019:	19 c8                	sbb    eax,ecx
c000801b:	0f 82 9d 01 00 00    	jb     c00081be <Phys::physicalMemorySetup(unsigned int)+0x27a>
c0008021:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008025:	83 c3 18             	add    ebx,0x18
c0008028:	83 c6 01             	add    esi,0x1
c000802b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000802f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008033:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0008037:	0f 84 bf 00 00 00    	je     c00080fc <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c000803d:	8b 33                	mov    esi,DWORD PTR [ebx]
c000803f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008042:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008045:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008048:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000804c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000804f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008053:	01 f0                	add    eax,esi
c0008055:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008059:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000805d:	55                   	push   ebp
c000805e:	11 fa                	adc    edx,edi
c0008060:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008064:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000806c:	50                   	push   eax
c000806d:	56                   	push   esi
c000806e:	68 44 fc 01 c0       	push   0xc001fc44
c0008073:	e8 0b 29 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0008078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	09 f8                	or     eax,edi
c0008081:	75 79                	jne    c00080fc <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c0008083:	83 fd 01             	cmp    ebp,0x1
c0008086:	0f 84 2f ff ff ff    	je     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x77>
c000808c:	83 fd 01             	cmp    ebp,0x1
c000808f:	75 90                	jne    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008091:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0008095:	31 d2                	xor    edx,edx
c0008097:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000809b:	89 c8                	mov    eax,ecx
c000809d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080a1:	19 d1                	sbb    ecx,edx
c00080a3:	0f 82 78 ff ff ff    	jb     c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080a9:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080ae:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080b2:	b9 00 00 00 00       	mov    ecx,0x0
c00080b7:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080bb:	0f 83 60 ff ff ff    	jae    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080c1:	39 c6                	cmp    esi,eax
c00080c3:	19 d7                	sbb    edi,edx
c00080c5:	0f 83 ff 00 00 00    	jae    c00081ca <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080cb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080d3:	29 c7                	sub    edi,eax
c00080d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080d9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080dd:	19 d5                	sbb    ebp,edx
c00080df:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080e7:	e9 de 00 00 00       	jmp    c00081ca <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080ec:	83 ec 0c             	sub    esp,0xc
c00080ef:	68 bf fc 01 c0       	push   0xc001fcbf
c00080f4:	e8 54 87 00 00       	call   c001084d <KePanic(char const*)>
c00080f9:	83 c4 10             	add    esp,0x10
c00080fc:	83 ec 08             	sub    esp,0x8
c00080ff:	bb 60 00 00 00       	mov    ebx,0x60
c0008104:	6a 00                	push   0x0
c0008106:	6a 06                	push   0x6
c0008108:	e8 04 fc ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c000810d:	58                   	pop    eax
c000810e:	5a                   	pop    edx
c000810f:	6a 00                	push   0x0
c0008111:	6a 07                	push   0x7
c0008113:	e8 f9 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008118:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c000811e:	83 c4 10             	add    esp,0x10
c0008121:	83 c1 02             	add    ecx,0x2
c0008124:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c000812a:	83 ec 08             	sub    esp,0x8
c000812d:	6a 00                	push   0x0
c000812f:	53                   	push   ebx
c0008130:	83 c3 01             	add    ebx,0x1
c0008133:	e8 d9 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008138:	83 c4 10             	add    esp,0x10
c000813b:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008141:	75 e7                	jne    c000812a <Phys::physicalMemorySetup(unsigned int)+0x1e6>
c0008143:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008148:	bb 40 01 00 00       	mov    ebx,0x140
c000814d:	83 c0 20             	add    eax,0x20
c0008150:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008155:	eb 26                	jmp    c000817d <Phys::physicalMemorySetup(unsigned int)+0x239>
c0008157:	83 ec 08             	sub    esp,0x8
c000815a:	6a 00                	push   0x0
c000815c:	53                   	push   ebx
c000815d:	83 c3 01             	add    ebx,0x1
c0008160:	e8 ac fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008165:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000816a:	83 c4 10             	add    esp,0x10
c000816d:	83 c0 01             	add    eax,0x1
c0008170:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008176:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000817b:	74 07                	je     c0008184 <Phys::physicalMemorySetup(unsigned int)+0x240>
c000817d:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008182:	7e d3                	jle    c0008157 <Phys::physicalMemorySetup(unsigned int)+0x213>
c0008184:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008189:	3d ff 07 00 00       	cmp    eax,0x7ff
c000818e:	7f 26                	jg     c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0008190:	83 ec 08             	sub    esp,0x8
c0008193:	6a 00                	push   0x0
c0008195:	53                   	push   ebx
c0008196:	83 c3 01             	add    ebx,0x1
c0008199:	e8 73 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c000819e:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081a3:	83 c4 10             	add    esp,0x10
c00081a6:	83 c0 01             	add    eax,0x1
c00081a9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081af:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081b4:	75 d3                	jne    c0008189 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00081b6:	83 c4 3c             	add    esp,0x3c
c00081b9:	5b                   	pop    ebx
c00081ba:	5e                   	pop    esi
c00081bb:	5f                   	pop    edi
c00081bc:	5d                   	pop    ebp
c00081bd:	c3                   	ret    
c00081be:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081c2:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081ca:	83 ec 04             	sub    esp,0x4
c00081cd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081d1:	56                   	push   esi
c00081d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081d6:	57                   	push   edi
c00081d7:	68 68 fc 01 c0       	push   0xc001fc68
c00081dc:	e8 a2 27 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00081e1:	5d                   	pop    ebp
c00081e2:	58                   	pop    eax
c00081e3:	56                   	push   esi
c00081e4:	57                   	push   edi
c00081e5:	e8 22 fd ff ff       	call   c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00081ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00081ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00081f2:	83 c4 0c             	add    esp,0xc
c00081f5:	8b 35 e8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ee8
c00081fb:	0f ac d0 0c          	shrd   eax,edx,0xc
c00081ff:	01 f0                	add    eax,esi
c0008201:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008206:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000820d:	52                   	push   edx
c000820e:	50                   	push   eax
c000820f:	68 cd fc 01 c0       	push   0xc001fccd
c0008214:	e8 6a 27 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0008219:	83 c4 10             	add    esp,0x10
c000821c:	e9 00 fe ff ff       	jmp    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008221:	90                   	nop

c0008222 <Pipe::isAtty()>:
c0008222:	31 c0                	xor    eax,eax
c0008224:	c3                   	ret    
c0008225:	90                   	nop

c0008226 <Pipe::~Pipe()>:
c0008226:	83 ec 0c             	sub    esp,0xc
c0008229:	ba 2c fd 01 c0       	mov    edx,0xc001fd2c
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	89 10                	mov    DWORD PTR [eax],edx
c0008234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008238:	83 ec 0c             	sub    esp,0xc
c000823b:	50                   	push   eax
c000823c:	e8 5b 11 00 00       	call   c000939c <UnixFile::~UnixFile()>
c0008241:	83 c4 10             	add    esp,0x10
c0008244:	90                   	nop
c0008245:	83 c4 0c             	add    esp,0xc
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <Pipe::~Pipe()>:
c000824a:	83 ec 0c             	sub    esp,0xc
c000824d:	83 ec 0c             	sub    esp,0xc
c0008250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008254:	e8 cd ff ff ff       	call   c0008226 <Pipe::~Pipe()>
c0008259:	83 c4 10             	add    esp,0x10
c000825c:	83 ec 08             	sub    esp,0x8
c000825f:	6a 20                	push   0x20
c0008261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008265:	e8 1b 26 00 00       	call   c000a885 <operator delete(void*, unsigned long)>
c000826a:	83 c4 10             	add    esp,0x10
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    
c0008271:	90                   	nop

c0008272 <Pipe::write(unsigned long long, void*, int*)>:
c0008272:	55                   	push   ebp
c0008273:	57                   	push   edi
c0008274:	56                   	push   esi
c0008275:	53                   	push   ebx
c0008276:	83 ec 1c             	sub    esp,0x1c
c0008279:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000827d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008281:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008285:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000828c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008292:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008296:	89 d8                	mov    eax,ebx
c0008298:	89 d6                	mov    esi,edx
c000829a:	89 d7                	mov    edi,edx
c000829c:	c1 ff 1f             	sar    edi,0x1f
c000829f:	03 34 24             	add    esi,DWORD PTR [esp]
c00082a2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a6:	c1 f8 1f             	sar    eax,0x1f
c00082a9:	39 f3                	cmp    ebx,esi
c00082ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082b3:	19 f8                	sbb    eax,edi
c00082b5:	b8 01 00 00 00       	mov    eax,0x1
c00082ba:	72 72                	jb     c000832e <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082bf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082c3:	01 d0                	add    eax,edx
c00082c5:	99                   	cdq    
c00082c6:	f7 fb                	idiv   ebx
c00082c8:	89 d8                	mov    eax,ebx
c00082ca:	29 d0                	sub    eax,edx
c00082cc:	89 d6                	mov    esi,edx
c00082ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082d1:	89 c3                	mov    ebx,eax
c00082d3:	c1 fb 1f             	sar    ebx,0x1f
c00082d6:	39 c2                	cmp    edx,eax
c00082d8:	19 df                	sbb    edi,ebx
c00082da:	bb 00 00 00 00       	mov    ebx,0x0
c00082df:	72 04                	jb     c00082e5 <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082e1:	89 d3                	mov    ebx,edx
c00082e3:	29 c3                	sub    ebx,eax
c00082e5:	89 d0                	mov    eax,edx
c00082e7:	29 d8                	sub    eax,ebx
c00082e9:	74 0d                	je     c00082f8 <Pipe::write(unsigned long long, void*, int*)+0x86>
c00082eb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082ee:	89 c1                	mov    ecx,eax
c00082f0:	01 f7                	add    edi,esi
c00082f2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082f8:	85 db                	test   ebx,ebx
c00082fa:	74 0d                	je     c0008309 <Pipe::write(unsigned long long, void*, int*)+0x97>
c00082fc:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008300:	89 d9                	mov    ecx,ebx
c0008302:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008305:	89 c6                	mov    esi,eax
c0008307:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008309:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000830c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008311:	75 10                	jne    c0008323 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008313:	83 ec 0c             	sub    esp,0xc
c0008316:	68 e9 fc 01 c0       	push   0xc001fce9
c000831b:	e8 2d 85 00 00       	call   c001084d <KePanic(char const*)>
c0008320:	83 c4 10             	add    esp,0x10
c0008323:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008327:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000832a:	89 08                	mov    DWORD PTR [eax],ecx
c000832c:	31 c0                	xor    eax,eax
c000832e:	83 c4 1c             	add    esp,0x1c
c0008331:	5b                   	pop    ebx
c0008332:	5e                   	pop    esi
c0008333:	5f                   	pop    edi
c0008334:	5d                   	pop    ebp
c0008335:	c3                   	ret    

c0008336 <Pipe::read(unsigned long long, void*, int*)>:
c0008336:	55                   	push   ebp
c0008337:	57                   	push   edi
c0008338:	56                   	push   esi
c0008339:	53                   	push   ebx
c000833a:	83 ec 1c             	sub    esp,0x1c
c000833d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008341:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008345:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008349:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000834c:	89 c8                	mov    eax,ecx
c000834e:	99                   	cdq    
c000834f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008353:	74 24                	je     c0008379 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008355:	39 f9                	cmp    ecx,edi
c0008357:	89 d1                	mov    ecx,edx
c0008359:	19 f1                	sbb    ecx,esi
c000835b:	73 1c                	jae    c0008379 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000835d:	fa                   	cli    
c000835e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008364:	e8 df cc 00 00       	call   c0015048 <schedule()>
c0008369:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000836e:	48                   	dec    eax
c000836f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008374:	75 d3                	jne    c0008349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008376:	fb                   	sti    
c0008377:	eb d0                	jmp    c0008349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008379:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000837d:	39 f8                	cmp    eax,edi
c000837f:	89 d1                	mov    ecx,edx
c0008381:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0008385:	19 f1                	sbb    ecx,esi
c0008387:	73 08                	jae    c0008391 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0008389:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000838d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008391:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008394:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008397:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000839b:	29 f7                	sub    edi,esi
c000839d:	89 f8                	mov    eax,edi
c000839f:	99                   	cdq    
c00083a0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083a4:	89 d0                	mov    eax,edx
c00083a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083aa:	19 c2                	sbb    edx,eax
c00083ac:	89 f8                	mov    eax,edi
c00083ae:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083b3:	89 ea                	mov    edx,ebp
c00083b5:	29 c2                	sub    edx,eax
c00083b7:	85 c0                	test   eax,eax
c00083b9:	74 0b                	je     c00083c6 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083bb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083be:	89 c1                	mov    ecx,eax
c00083c0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c6:	85 d2                	test   edx,edx
c00083c8:	74 0d                	je     c00083d7 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083ca:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083ce:	89 d1                	mov    ecx,edx
c00083d0:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083d3:	89 c7                	mov    edi,eax
c00083d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083da:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083dd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083e0:	99                   	cdq    
c00083e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083e5:	89 f7                	mov    edi,esi
c00083e7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 29 63 01 00       	call   c001e720 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083ff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 06 fd 01 c0       	push   0xc001fd06
c000840c:	e8 3c 84 00 00       	call   c001084d <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000841c:	89 10                	mov    DWORD PTR [eax],edx
c000841e:	83 c4 1c             	add    esp,0x1c
c0008421:	31 c0                	xor    eax,eax
c0008423:	5b                   	pop    ebx
c0008424:	5e                   	pop    esi
c0008425:	5f                   	pop    edi
c0008426:	5d                   	pop    ebp
c0008427:	c3                   	ret    

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 7c 0d 00 00       	call   c00091b6 <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 2c fd 01 c0       	mov    edx,0xc001fd2c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 55 f6 ff ff       	call   c0007acb <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 74 fd 01 c0       	mov    edx,0xc001fd74
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 ed 0e 00 00       	call   c000939c <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 aa 23 00 00       	call   c000a885 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 d0 47 00 00       	call   c000ccc6 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 54 f8 00 00       	call   c0017d70 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000853f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 40 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde0c0]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 40 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde0c0]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 f8 1d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde208]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 d0 1d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde230]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 86 f5 00 00       	call   c0017c04 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086ad:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086b5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	59                   	pop    ecx
c00086d2:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086d7:	0f b6 c0             	movzx  eax,al
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f0:	01 f2                	add    edx,esi
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 e3 f5 00 00       	jmp    c0017d0c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 40 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd40
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 d7 80 00 00       	jmp    c001084d <KePanic(char const*)>
c0008776:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	50                   	push   eax
c000878c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000878f:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	83 c4 10             	add    esp,0x10
c00087bb:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008842:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008853:	83 ec 0c             	sub    esp,0xc
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 30 2f 00 00       	jmp    c000b803 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088ed:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088fe:	83 ec 0c             	sub    esp,0xc
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000896f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008973:	0f be c2             	movsx  eax,dl
c0008976:	83 f8 5b             	cmp    eax,0x5b
c0008979:	75 18                	jne    c0008993 <VgaText::putchar(char)+0x2b>
c000897b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000897f:	74 20                	je     c00089a1 <VgaText::putchar(char)+0x39>
c0008981:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008987:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000898e:	e9 b8 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008993:	83 f8 1b             	cmp    eax,0x1b
c0008996:	75 09                	jne    c00089a1 <VgaText::putchar(char)+0x39>
c0008998:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000899c:	e9 aa 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c00089a1:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089a5:	89 f9                	mov    ecx,edi
c00089a7:	84 c9                	test   cl,cl
c00089a9:	0f 84 8c 00 00 00    	je     c0008a3b <VgaText::putchar(char)+0xd3>
c00089af:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089b2:	80 f9 3e             	cmp    cl,0x3e
c00089b5:	77 70                	ja     c0008a27 <VgaText::putchar(char)+0xbf>
c00089b7:	83 f8 6d             	cmp    eax,0x6d
c00089ba:	75 3f                	jne    c00089fb <VgaText::putchar(char)+0x93>
c00089bc:	31 f6                	xor    esi,esi
c00089be:	31 d2                	xor    edx,edx
c00089c0:	31 c0                	xor    eax,eax
c00089c2:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c5:	7e 25                	jle    c00089ec <VgaText::putchar(char)+0x84>
c00089c7:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089cc:	83 fa 3b             	cmp    edx,0x3b
c00089cf:	75 0f                	jne    c00089e0 <VgaText::putchar(char)+0x78>
c00089d1:	50                   	push   eax
c00089d2:	53                   	push   ebx
c00089d3:	e8 48 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089d8:	31 d2                	xor    edx,edx
c00089da:	59                   	pop    ecx
c00089db:	58                   	pop    eax
c00089dc:	31 c0                	xor    eax,eax
c00089de:	eb 09                	jmp    c00089e9 <VgaText::putchar(char)+0x81>
c00089e0:	6b c0 0a             	imul   eax,eax,0xa
c00089e3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089e7:	89 fa                	mov    edx,edi
c00089e9:	46                   	inc    esi
c00089ea:	eb d6                	jmp    c00089c2 <VgaText::putchar(char)+0x5a>
c00089ec:	84 d2                	test   dl,dl
c00089ee:	74 2f                	je     c0008a1f <VgaText::putchar(char)+0xb7>
c00089f0:	50                   	push   eax
c00089f1:	53                   	push   ebx
c00089f2:	e8 29 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089f7:	58                   	pop    eax
c00089f8:	5a                   	pop    edx
c00089f9:	eb 24                	jmp    c0008a1f <VgaText::putchar(char)+0xb7>
c00089fb:	83 f8 4a             	cmp    eax,0x4a
c00089fe:	75 1f                	jne    c0008a1f <VgaText::putchar(char)+0xb7>
c0008a00:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a04:	75 19                	jne    c0008a1f <VgaText::putchar(char)+0xb7>
c0008a06:	83 ec 0c             	sub    esp,0xc
c0008a09:	53                   	push   ebx
c0008a0a:	e8 95 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a0f:	83 c4 0c             	add    esp,0xc
c0008a12:	6a 00                	push   0x0
c0008a14:	6a 00                	push   0x0
c0008a16:	53                   	push   ebx
c0008a17:	e8 26 fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a1c:	83 c4 10             	add    esp,0x10
c0008a1f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a25:	eb 24                	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008a27:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a2a:	83 f8 0e             	cmp    eax,0xe
c0008a2d:	7f 1c                	jg     c0008a4b <VgaText::putchar(char)+0xe3>
c0008a2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a32:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a35:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a39:	eb 10                	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008a3b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a41:	50                   	push   eax
c0008a42:	53                   	push   ebx
c0008a43:	e8 50 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a48:	83 c4 10             	add    esp,0x10
c0008a4b:	5b                   	pop    ebx
c0008a4c:	5e                   	pop    esi
c0008a4d:	5f                   	pop    edi
c0008a4e:	c3                   	ret    
c0008a4f:	90                   	nop

c0008a50 <VgaText::putx(unsigned int)>:
c0008a50:	57                   	push   edi
c0008a51:	b9 11 00 00 00       	mov    ecx,0x11
c0008a56:	56                   	push   esi
c0008a57:	be 4e fd 01 c0       	mov    esi,0xc001fd4e
c0008a5c:	53                   	push   ebx
c0008a5d:	83 ec 20             	sub    esp,0x20
c0008a60:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a64:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a68:	fc                   	cld    
c0008a69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a6b:	be 08 00 00 00       	mov    esi,0x8
c0008a70:	50                   	push   eax
c0008a71:	50                   	push   eax
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	c1 e8 1c             	shr    eax,0x1c
c0008a77:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a7c:	c1 e3 04             	shl    ebx,0x4
c0008a7f:	50                   	push   eax
c0008a80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a84:	e8 df fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a89:	83 c4 10             	add    esp,0x10
c0008a8c:	4e                   	dec    esi
c0008a8d:	75 e1                	jne    c0008a70 <VgaText::putx(unsigned int)+0x20>
c0008a8f:	83 c4 20             	add    esp,0x20
c0008a92:	5b                   	pop    ebx
c0008a93:	5e                   	pop    esi
c0008a94:	5f                   	pop    edi
c0008a95:	c3                   	ret    

c0008a96 <VgaText::puts(char const*)>:
c0008a96:	53                   	push   ebx
c0008a97:	83 ec 08             	sub    esp,0x8
c0008a9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a9e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa1:	85 c0                	test   eax,eax
c0008aa3:	74 12                	je     c0008ab7 <VgaText::puts(char const*)+0x21>
c0008aa5:	51                   	push   ecx
c0008aa6:	43                   	inc    ebx
c0008aa7:	51                   	push   ecx
c0008aa8:	50                   	push   eax
c0008aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aad:	e8 b6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ab2:	83 c4 10             	add    esp,0x10
c0008ab5:	eb e7                	jmp    c0008a9e <VgaText::puts(char const*)+0x8>
c0008ab7:	83 c4 08             	add    esp,0x8
c0008aba:	5b                   	pop    ebx
c0008abb:	c3                   	ret    

c0008abc <VgaText::write(unsigned long long, void*, int*)>:
c0008abc:	55                   	push   ebp
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	53                   	push   ebx
c0008ac0:	83 ec 0c             	sub    esp,0xc
c0008ac3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008acb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008acf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ad9:	39 eb                	cmp    ebx,ebp
c0008adb:	74 13                	je     c0008af0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008add:	50                   	push   eax
c0008ade:	43                   	inc    ebx
c0008adf:	50                   	push   eax
c0008ae0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ae4:	50                   	push   eax
c0008ae5:	56                   	push   esi
c0008ae6:	e8 7d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008aeb:	83 c4 10             	add    esp,0x10
c0008aee:	eb e9                	jmp    c0008ad9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008afb:	89 38                	mov    DWORD PTR [eax],edi
c0008afd:	83 c4 0c             	add    esp,0xc
c0008b00:	31 c0                	xor    eax,eax
c0008b02:	5b                   	pop    ebx
c0008b03:	5e                   	pop    esi
c0008b04:	5f                   	pop    edi
c0008b05:	5d                   	pop    ebp
c0008b06:	c3                   	ret    
c0008b07:	90                   	nop

c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b08:	55                   	push   ebp
c0008b09:	57                   	push   edi
c0008b0a:	56                   	push   esi
c0008b0b:	53                   	push   ebx
c0008b0c:	83 ec 0c             	sub    esp,0xc
c0008b0f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b18:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b1f:	50                   	push   eax
c0008b20:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b25:	50                   	push   eax
c0008b26:	e8 c3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b2b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b2f:	5a                   	pop    edx
c0008b30:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b33:	59                   	pop    ecx
c0008b34:	0f b6 f8             	movzx  edi,al
c0008b37:	0f b7 db             	movzx  ebx,bx
c0008b3a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b3e:	01 db                	add    ebx,ebx
c0008b40:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b43:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b46:	85 c0                	test   eax,eax
c0008b48:	0f 84 ef 00 00 00    	je     c0008c3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b4e:	83 f8 0d             	cmp    eax,0xd
c0008b51:	75 0c                	jne    c0008b5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b53:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b5a:	e9 d8 00 00 00       	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b5f:	83 f8 0a             	cmp    eax,0xa
c0008b62:	75 44                	jne    c0008ba8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b64:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b6b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b6e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b71:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b74:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b77:	75 0f                	jne    c0008b88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b79:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b7c:	83 ec 0c             	sub    esp,0xc
c0008b7f:	55                   	push   ebp
c0008b80:	e8 7b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b85:	83 c4 10             	add    esp,0x10
c0008b88:	83 ec 0c             	sub    esp,0xc
c0008b8b:	55                   	push   ebp
c0008b8c:	e8 79 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b98:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b9b:	0f b7 db             	movzx  ebx,bx
c0008b9e:	01 db                	add    ebx,ebx
c0008ba0:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008ba3:	e9 8f 00 00 00       	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba8:	83 f8 08             	cmp    eax,0x8
c0008bab:	75 34                	jne    c0008be1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bad:	51                   	push   ecx
c0008bae:	51                   	push   ecx
c0008baf:	6a 01                	push   0x1
c0008bb1:	55                   	push   ebp
c0008bb2:	e8 bf fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bb7:	5b                   	pop    ebx
c0008bb8:	58                   	pop    eax
c0008bb9:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bbc:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bbf:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bc2:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bc5:	6a 20                	push   0x20
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 d5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bcd:	83 c4 20             	add    esp,0x20
c0008bd0:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bd4:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bd7:	0f b7 db             	movzx  ebx,bx
c0008bda:	01 db                	add    ebx,ebx
c0008bdc:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bdf:	eb 56                	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be1:	52                   	push   edx
c0008be2:	52                   	push   edx
c0008be3:	57                   	push   edi
c0008be4:	50                   	push   eax
c0008be5:	e8 a8 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bea:	83 c4 10             	add    esp,0x10
c0008bed:	66 89 03             	mov    WORD PTR [ebx],ax
c0008bf0:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008bf6:	75 1d                	jne    c0008c15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bf8:	83 ec 0c             	sub    esp,0xc
c0008bfb:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bfe:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c01:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c05:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c09:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c0c:	50                   	push   eax
c0008c0d:	e8 fa f0 00 00       	call   c0017d0c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c12:	83 c4 20             	add    esp,0x20
c0008c15:	50                   	push   eax
c0008c16:	83 c3 02             	add    ebx,0x2
c0008c19:	50                   	push   eax
c0008c1a:	6a 00                	push   0x0
c0008c1c:	55                   	push   ebp
c0008c1d:	e8 00 fc ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c29:	75 0c                	jne    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c2b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c2f:	0f b7 db             	movzx  ebx,bx
c0008c32:	01 db                	add    ebx,ebx
c0008c34:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c37:	46                   	inc    esi
c0008c38:	e9 06 ff ff ff       	jmp    c0008b43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	55                   	push   ebp
c0008c41:	e8 c4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c46:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c4d:	83 c4 1c             	add    esp,0x1c
c0008c50:	5b                   	pop    ebx
c0008c51:	5e                   	pop    esi
c0008c52:	5f                   	pop    edi
c0008c53:	5d                   	pop    ebp
c0008c54:	c3                   	ret    
c0008c55:	90                   	nop

c0008c56 <VgaText::VgaText(char const*)>:
c0008c56:	56                   	push   esi
c0008c57:	53                   	push   ebx
c0008c58:	83 ec 04             	sub    esp,0x4
c0008c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5f:	83 ec 08             	sub    esp,0x8
c0008c62:	6a 00                	push   0x0
c0008c64:	50                   	push   eax
c0008c65:	e8 4c 05 00 00       	call   c00091b6 <UnixFile::UnixFile(int)>
c0008c6a:	83 c4 10             	add    esp,0x10
c0008c6d:	ba 74 fd 01 c0       	mov    edx,0xc001fd74
c0008c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c76:	89 10                	mov    DWORD PTR [eax],edx
c0008c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c87:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cd5:	83 ec 0c             	sub    esp,0xc
c0008cd8:	6a 01                	push   0x1
c0008cda:	e8 26 09 00 00       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0008cdf:	83 c4 10             	add    esp,0x10
c0008ce2:	89 c2                	mov    edx,eax
c0008ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ceb:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf8:	89 c6                	mov    esi,eax
c0008cfa:	e8 d7 f0 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0008cff:	68 05 0c 00 00       	push   0xc05
c0008d04:	56                   	push   esi
c0008d05:	50                   	push   eax
c0008d06:	53                   	push   ebx
c0008d07:	e8 d8 0f 00 00       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d16:	83 ec 04             	sub    esp,0x4
c0008d19:	68 a0 0f 00 00       	push   0xfa0
c0008d1e:	6a 00                	push   0x0
c0008d20:	50                   	push   eax
c0008d21:	e8 ca 77 ff ff       	call   c00004f0 <memset>
c0008d26:	83 c4 10             	add    esp,0x10
c0008d29:	83 ec 04             	sub    esp,0x4
c0008d2c:	6a 00                	push   0x0
c0008d2e:	6a 07                	push   0x7
c0008d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d34:	e8 7b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d39:	83 c4 10             	add    esp,0x10
c0008d3c:	83 ec 04             	sub    esp,0x4
c0008d3f:	6a 00                	push   0x0
c0008d41:	6a 00                	push   0x0
c0008d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d47:	e8 f6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d4c:	83 c4 10             	add    esp,0x10
c0008d4f:	83 ec 0c             	sub    esp,0xc
c0008d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d56:	e8 49 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d62:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6a:	05 82 00 00 00       	add    eax,0x82
c0008d6f:	83 ec 04             	sub    esp,0x4
c0008d72:	68 80 00 00 00       	push   0x80
c0008d77:	6a 00                	push   0x0
c0008d79:	50                   	push   eax
c0008d7a:	e8 71 77 ff ff       	call   c00004f0 <memset>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d86:	05 02 01 00 00       	add    eax,0x102
c0008d8b:	83 ec 04             	sub    esp,0x4
c0008d8e:	68 80 00 00 00       	push   0x80
c0008d93:	6a 00                	push   0x0
c0008d95:	50                   	push   eax
c0008d96:	e8 55 77 ff ff       	call   c00004f0 <memset>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	90                   	nop
c0008d9f:	83 c4 04             	add    esp,0x4
c0008da2:	5b                   	pop    ebx
c0008da3:	5e                   	pop    esi
c0008da4:	c3                   	ret    
c0008da5:	90                   	nop

c0008da6 <VgaText::receiveKey(unsigned char)>:
c0008da6:	55                   	push   ebp
c0008da7:	57                   	push   edi
c0008da8:	56                   	push   esi
c0008da9:	53                   	push   ebx
c0008daa:	83 ec 2c             	sub    esp,0x2c
c0008dad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008db1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008db5:	89 fd                	mov    ebp,edi
c0008db7:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dbd:	0f 84 48 01 00 00    	je     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008dc3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dc9:	83 fd 08             	cmp    ebp,0x8
c0008dcc:	75 6a                	jne    c0008e38 <VgaText::receiveKey(unsigned char)+0x92>
c0008dce:	83 ec 0c             	sub    esp,0xc
c0008dd1:	56                   	push   esi
c0008dd2:	e8 a9 77 ff ff       	call   c0000580 <strlen>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	85 c0                	test   eax,eax
c0008ddc:	0f 84 ef 00 00 00    	je     c0008ed1 <VgaText::receiveKey(unsigned char)+0x12b>
c0008de2:	50                   	push   eax
c0008de3:	50                   	push   eax
c0008de4:	6a 08                	push   0x8
c0008de6:	53                   	push   ebx
c0008de7:	e8 7c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dec:	89 34 24             	mov    DWORD PTR [esp],esi
c0008def:	e8 8c 77 ff ff       	call   c0000580 <strlen>
c0008df4:	83 c4 10             	add    esp,0x10
c0008df7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008dff:	83 fa 1f             	cmp    edx,0x1f
c0008e02:	89 d0                	mov    eax,edx
c0008e04:	7f 1c                	jg     c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e06:	83 e8 08             	sub    eax,0x8
c0008e09:	3c 02                	cmp    al,0x2
c0008e0b:	76 15                	jbe    c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e0d:	83 fa 0d             	cmp    edx,0xd
c0008e10:	74 10                	je     c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e12:	57                   	push   edi
c0008e13:	57                   	push   edi
c0008e14:	68 5f fd 01 c0       	push   0xc001fd5f
c0008e19:	53                   	push   ebx
c0008e1a:	e8 77 fc ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	56                   	push   esi
c0008e26:	e8 55 77 ff ff       	call   c0000580 <strlen>
c0008e2b:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e33:	e9 96 00 00 00       	jmp    c0008ece <VgaText::receiveKey(unsigned char)+0x128>
c0008e38:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e3e:	83 ec 0c             	sub    esp,0xc
c0008e41:	50                   	push   eax
c0008e42:	e8 39 77 ff ff       	call   c0000580 <strlen>
c0008e47:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e4e:	e8 2d 77 ff ff       	call   c0000580 <strlen>
c0008e53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e57:	83 c4 10             	add    esp,0x10
c0008e5a:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e5e:	3d 80 00 00 00       	cmp    eax,0x80
c0008e63:	0f 87 a2 00 00 00    	ja     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008e69:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e6c:	3c 1e                	cmp    al,0x1e
c0008e6e:	77 35                	ja     c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e70:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e73:	3c 01                	cmp    al,0x1
c0008e75:	76 2e                	jbe    c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e77:	83 fd 0d             	cmp    ebp,0xd
c0008e7a:	74 29                	je     c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e7c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e7f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e82:	68 65 fd 01 c0       	push   0xc001fd65
c0008e87:	53                   	push   ebx
c0008e88:	e8 7b fc ff ff       	call   c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e8d:	8d 47 40             	lea    eax,[edi+0x40]
c0008e90:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e93:	0f b6 c0             	movzx  eax,al
c0008e96:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e99:	50                   	push   eax
c0008e9a:	53                   	push   ebx
c0008e9b:	e8 f8 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ea0:	83 c4 20             	add    esp,0x20
c0008ea3:	eb 11                	jmp    c0008eb6 <VgaText::receiveKey(unsigned char)+0x110>
c0008ea5:	51                   	push   ecx
c0008ea6:	89 f8                	mov    eax,edi
c0008ea8:	51                   	push   ecx
c0008ea9:	0f be c0             	movsx  eax,al
c0008eac:	50                   	push   eax
c0008ead:	53                   	push   ebx
c0008eae:	e8 b5 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ebb:	89 f8                	mov    eax,edi
c0008ebd:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ec1:	52                   	push   edx
c0008ec2:	52                   	push   edx
c0008ec3:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ec7:	50                   	push   eax
c0008ec8:	56                   	push   esi
c0008ec9:	e8 a2 79 ff ff       	call   c0000870 <strcat>
c0008ece:	83 c4 10             	add    esp,0x10
c0008ed1:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ed8:	75 0f                	jne    c0008ee9 <VgaText::receiveKey(unsigned char)+0x143>
c0008eda:	83 fd 1c             	cmp    ebp,0x1c
c0008edd:	77 2c                	ja     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008edf:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ee4:	0f a3 e8             	bt     eax,ebp
c0008ee7:	73 22                	jae    c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008ee9:	50                   	push   eax
c0008eea:	81 c3 02 01 00 00    	add    ebx,0x102
c0008ef0:	50                   	push   eax
c0008ef1:	56                   	push   esi
c0008ef2:	53                   	push   ebx
c0008ef3:	e8 78 79 ff ff       	call   c0000870 <strcat>
c0008ef8:	83 c4 0c             	add    esp,0xc
c0008efb:	68 80 00 00 00       	push   0x80
c0008f00:	6a 00                	push   0x0
c0008f02:	56                   	push   esi
c0008f03:	e8 e8 75 ff ff       	call   c00004f0 <memset>
c0008f08:	83 c4 10             	add    esp,0x10
c0008f0b:	83 c4 2c             	add    esp,0x2c
c0008f0e:	5b                   	pop    ebx
c0008f0f:	5e                   	pop    esi
c0008f10:	5f                   	pop    edi
c0008f11:	5d                   	pop    ebp
c0008f12:	c3                   	ret    
c0008f13:	90                   	nop

c0008f14 <VgaText::doUpdate()>:
c0008f14:	c3                   	ret    

c0008f15 <newTerminal(char*)>:
c0008f15:	83 ec 28             	sub    esp,0x28
c0008f18:	68 84 01 00 00       	push   0x184
c0008f1d:	e8 a9 eb ff ff       	call   c0007acb <malloc>
c0008f22:	5a                   	pop    edx
c0008f23:	59                   	pop    ecx
c0008f24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f28:	50                   	push   eax
c0008f29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f2d:	e8 24 fd ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0008f32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f36:	83 c4 2c             	add    esp,0x2c
c0008f39:	c3                   	ret    
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::TSS()>:
c0008f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f47:	90                   	nop
c0008f48:	c3                   	ret    
c0008f49:	90                   	nop
c0008f4a:	66 90                	xchg   ax,ax

c0008f4c <TSS::setESP(unsigned long)>:
c0008f4c:	55                   	push   ebp
c0008f4d:	89 e5                	mov    ebp,esp
c0008f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f58:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f5b:	90                   	nop
c0008f5c:	5d                   	pop    ebp
c0008f5d:	c3                   	ret    
c0008f5e:	66 90                	xchg   ax,ax

c0008f60 <TSS::flush()>:
c0008f60:	55                   	push   ebp
c0008f61:	89 e5                	mov    ebp,esp
c0008f63:	83 ec 10             	sub    esp,0x10
c0008f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f6b:	83 c8 03             	or     eax,0x3
c0008f6e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f72:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f76:	66 89 d0             	mov    ax,dx
c0008f79:	0f 00 d8             	ltr    ax
c0008f7c:	90                   	nop
c0008f7d:	c9                   	leave  
c0008f7e:	c3                   	ret    
c0008f7f:	90                   	nop

c0008f80 <TSS::setup(unsigned long, unsigned long)>:
c0008f80:	55                   	push   ebp
c0008f81:	89 e5                	mov    ebp,esp
c0008f83:	83 ec 18             	sub    esp,0x18
c0008f86:	83 ec 0c             	sub    esp,0xc
c0008f89:	6a 68                	push   0x68
c0008f8b:	e8 3b eb ff ff       	call   c0007acb <malloc>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	89 c2                	mov    edx,eax
c0008f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa1:	83 ec 04             	sub    esp,0x4
c0008fa4:	6a 68                	push   0x68
c0008fa6:	6a 00                	push   0x0
c0008fa8:	50                   	push   eax
c0008fa9:	e8 42 75 ff ff       	call   c00004f0 <memset>
c0008fae:	83 c4 10             	add    esp,0x10
c0008fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fd2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009026:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009032:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009045:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009048:	0f 20 da             	mov    edx,cr3
c000904b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000904e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009051:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009057:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	50                   	push   eax
c000905e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009061:	50                   	push   eax
c0009062:	e8 d3 e2 ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0009067:	83 c4 10             	add    esp,0x10
c000906a:	83 ec 08             	sub    esp,0x8
c000906d:	6a 68                	push   0x68
c000906f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009072:	50                   	push   eax
c0009073:	e8 de e2 ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0009078:	83 c4 10             	add    esp,0x10
c000907b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000907f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009082:	83 e0 0f             	and    eax,0xf
c0009085:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009088:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908b:	83 c8 40             	or     eax,0x40
c000908e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009091:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009096:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000909c:	05 78 01 00 00       	add    eax,0x178
c00090a1:	83 ec 04             	sub    esp,0x4
c00090a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090a7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090aa:	50                   	push   eax
c00090ab:	e8 da e2 ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	89 c2                	mov    edx,eax
c00090b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090b8:	89 10                	mov    DWORD PTR [eax],edx
c00090ba:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090c5:	05 78 01 00 00       	add    eax,0x178
c00090ca:	83 ec 0c             	sub    esp,0xc
c00090cd:	50                   	push   eax
c00090ce:	e8 e1 e2 ff ff       	call   c00073b4 <GDT::flush()>
c00090d3:	83 c4 10             	add    esp,0x10
c00090d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090db:	c9                   	leave  
c00090dc:	c3                   	ret    
c00090dd:	90                   	nop

c00090de <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090e9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090ee:	75 08                	jne    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090f6:	eb 38                	jmp    c0009130 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090f8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090fd:	75 17                	jne    c0009116 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009104:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009107:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000910d:	8b 10                	mov    edx,DWORD PTR [eax]
c000910f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009113:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009116:	89 c1                	mov    ecx,eax
c0009118:	83 e1 fd             	and    ecx,0xfffffffd
c000911b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009121:	74 cd                	je     c00090f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009123:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009128:	83 e0 ef             	and    eax,0xffffffef
c000912b:	83 f8 08             	cmp    eax,0x8
c000912e:	76 c0                	jbe    c00090f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009130:	31 c0                	xor    eax,eax
c0009132:	c3                   	ret    
c0009133:	90                   	nop

c0009134 <ReservedFilename::isAtty()>:
c0009134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009138:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000913b:	31 c0                	xor    eax,eax
c000913d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009143:	74 09                	je     c000914e <ReservedFilename::isAtty()+0x1a>
c0009145:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000914b:	0f 94 c0             	sete   al
c000914e:	c3                   	ret    
c000914f:	90                   	nop

c0009150 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009154:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009158:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000915c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000915f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009164:	75 08                	jne    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009166:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000916c:	eb 3d                	jmp    c00091ab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000916e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009173:	75 17                	jne    c000918c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009175:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000917a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000917d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009183:	8b 10                	mov    edx,DWORD PTR [eax]
c0009185:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009189:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000918c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009191:	75 04                	jne    c0009197 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009193:	89 0a                	mov    DWORD PTR [edx],ecx
c0009195:	eb 14                	jmp    c00091ab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009197:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000919c:	74 c8                	je     c0009166 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091a3:	83 e0 ef             	and    eax,0xffffffef
c00091a6:	83 f8 08             	cmp    eax,0x8
c00091a9:	76 bb                	jbe    c0009166 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091ab:	31 c0                	xor    eax,eax
c00091ad:	c3                   	ret    

c00091ae <UnixFile::getFileDescriptor()>:
c00091ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::UnixFile(int)>:
c00091b6:	53                   	push   ebx
c00091b7:	83 ec 28             	sub    esp,0x28
c00091ba:	ba 3c fe 01 c0       	mov    edx,0xc001fe3c
c00091bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091c3:	89 10                	mov    DWORD PTR [eax],edx
c00091c5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091cd:	0f 8f 90 01 00 00    	jg     c0009363 <UnixFile::UnixFile(int)+0x1ad>
c00091d3:	a1 80 1f 02 c0       	mov    eax,ds:0xc0021f80
c00091d8:	8d 50 01             	lea    edx,[eax+0x1]
c00091db:	89 15 80 1f 02 c0    	mov    DWORD PTR ds:0xc0021f80,edx
c00091e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091e5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091ef:	68 98 4f 02 c0       	push   0xc0024f98
c00091f4:	e8 0f 57 01 00       	call   c001e908 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009201:	83 f0 01             	xor    eax,0x1
c0009204:	0f b6 c0             	movzx  eax,al
c0009207:	85 c0                	test   eax,eax
c0009209:	0f 84 55 01 00 00    	je     c0009364 <UnixFile::UnixFile(int)+0x1ae>
c000920f:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c0009216:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000921e:	83 ec 0c             	sub    esp,0xc
c0009221:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009225:	e8 a1 e8 ff ff       	call   c0007acb <malloc>
c000922a:	83 c4 10             	add    esp,0x10
c000922d:	89 c3                	mov    ebx,eax
c000922f:	83 ec 08             	sub    esp,0x8
c0009232:	68 03 ff ff 0f       	push   0xfffff03
c0009237:	53                   	push   ebx
c0009238:	e8 2d 01 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000923d:	83 c4 10             	add    esp,0x10
c0009240:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c0009246:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000924e:	83 ec 0c             	sub    esp,0xc
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 71 e8 ff ff       	call   c0007acb <malloc>
c000925a:	83 c4 10             	add    esp,0x10
c000925d:	89 c3                	mov    ebx,eax
c000925f:	83 ec 08             	sub    esp,0x8
c0009262:	68 01 ff ff 0f       	push   0xfffff01
c0009267:	53                   	push   ebx
c0009268:	e8 fd 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000926d:	83 c4 10             	add    esp,0x10
c0009270:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c0009276:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000927e:	83 ec 0c             	sub    esp,0xc
c0009281:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009285:	e8 41 e8 ff ff       	call   c0007acb <malloc>
c000928a:	83 c4 10             	add    esp,0x10
c000928d:	89 c3                	mov    ebx,eax
c000928f:	83 ec 08             	sub    esp,0x8
c0009292:	68 00 ff ff 0f       	push   0xfffff00
c0009297:	53                   	push   ebx
c0009298:	e8 cd 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000929d:	83 c4 10             	add    esp,0x10
c00092a0:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092a6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092ae:	83 ec 0c             	sub    esp,0xc
c00092b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092b5:	e8 11 e8 ff ff       	call   c0007acb <malloc>
c00092ba:	83 c4 10             	add    esp,0x10
c00092bd:	89 c3                	mov    ebx,eax
c00092bf:	83 ec 08             	sub    esp,0x8
c00092c2:	68 02 ff ff 0f       	push   0xfffff02
c00092c7:	53                   	push   ebx
c00092c8:	e8 9d 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092d6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092de:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092e3:	7f 7f                	jg     c0009364 <UnixFile::UnixFile(int)+0x1ae>
c00092e5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092ed:	83 ec 0c             	sub    esp,0xc
c00092f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092f4:	e8 d2 e7 ff ff       	call   c0007acb <malloc>
c00092f9:	83 c4 10             	add    esp,0x10
c00092fc:	89 c3                	mov    ebx,eax
c00092fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009302:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009307:	83 ec 08             	sub    esp,0x8
c000930a:	50                   	push   eax
c000930b:	53                   	push   ebx
c000930c:	e8 59 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c0009311:	83 c4 10             	add    esp,0x10
c0009314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009318:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c000931f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009327:	83 ec 0c             	sub    esp,0xc
c000932a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932e:	e8 98 e7 ff ff       	call   c0007acb <malloc>
c0009333:	83 c4 10             	add    esp,0x10
c0009336:	89 c3                	mov    ebx,eax
c0009338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000933c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009341:	83 ec 08             	sub    esp,0x8
c0009344:	50                   	push   eax
c0009345:	53                   	push   ebx
c0009346:	e8 1f 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009352:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009359:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000935e:	e9 7b ff ff ff       	jmp    c00092de <UnixFile::UnixFile(int)+0x128>
c0009363:	90                   	nop
c0009364:	83 c4 28             	add    esp,0x28
c0009367:	5b                   	pop    ebx
c0009368:	c3                   	ret    
c0009369:	90                   	nop

c000936a <ReservedFilename::ReservedFilename(int)>:
c000936a:	83 ec 0c             	sub    esp,0xc
c000936d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009371:	83 ec 08             	sub    esp,0x8
c0009374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009378:	50                   	push   eax
c0009379:	e8 38 fe ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000937e:	83 c4 10             	add    esp,0x10
c0009381:	ba 58 fe 01 c0       	mov    edx,0xc001fe58
c0009386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000938a:	89 10                	mov    DWORD PTR [eax],edx
c000938c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009390:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009394:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009397:	90                   	nop
c0009398:	83 c4 0c             	add    esp,0xc
c000939b:	c3                   	ret    

c000939c <UnixFile::~UnixFile()>:
c000939c:	83 ec 1c             	sub    esp,0x1c
c000939f:	ba 3c fe 01 c0       	mov    edx,0xc001fe3c
c00093a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a8:	89 10                	mov    DWORD PTR [eax],edx
c00093aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093b6:	7f 76                	jg     c000942e <UnixFile::~UnixFile()+0x92>
c00093b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	68 98 4f 02 c0       	push   0xc0024f98
c00093c8:	e8 0f 56 01 00       	call   c001e9dc <LinkedList<UnixFile>::getFirstElement()>
c00093cd:	83 c4 10             	add    esp,0x10
c00093d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	68 98 4f 02 c0       	push   0xc0024f98
c00093dc:	e8 03 56 01 00       	call   c001e9e4 <LinkedList<UnixFile>::removeFirst()>
c00093e1:	83 c4 10             	add    esp,0x10
c00093e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093e8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093ec:	74 43                	je     c0009431 <UnixFile::~UnixFile()+0x95>
c00093ee:	83 ec 08             	sub    esp,0x8
c00093f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093f5:	68 98 4f 02 c0       	push   0xc0024f98
c00093fa:	e8 09 55 01 00       	call   c001e908 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ff:	83 c4 10             	add    esp,0x10
c0009402:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009406:	8d 50 01             	lea    edx,[eax+0x1]
c0009409:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000940d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009412:	0f 94 c0             	sete   al
c0009415:	0f b6 c0             	movzx  eax,al
c0009418:	85 c0                	test   eax,eax
c000941a:	74 a4                	je     c00093c0 <UnixFile::~UnixFile()+0x24>
c000941c:	83 ec 0c             	sub    esp,0xc
c000941f:	68 14 fe 01 c0       	push   0xc001fe14
c0009424:	e8 24 74 00 00       	call   c001084d <KePanic(char const*)>
c0009429:	83 c4 10             	add    esp,0x10
c000942c:	eb 92                	jmp    c00093c0 <UnixFile::~UnixFile()+0x24>
c000942e:	90                   	nop
c000942f:	eb 01                	jmp    c0009432 <UnixFile::~UnixFile()+0x96>
c0009431:	90                   	nop
c0009432:	90                   	nop
c0009433:	83 c4 1c             	add    esp,0x1c
c0009436:	c3                   	ret    
c0009437:	90                   	nop

c0009438 <UnixFile::~UnixFile()>:
c0009438:	83 ec 0c             	sub    esp,0xc
c000943b:	83 ec 0c             	sub    esp,0xc
c000943e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009442:	e8 55 ff ff ff       	call   c000939c <UnixFile::~UnixFile()>
c0009447:	83 c4 10             	add    esp,0x10
c000944a:	83 ec 08             	sub    esp,0x8
c000944d:	6a 0c                	push   0xc
c000944f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009453:	e8 2d 14 00 00       	call   c000a885 <operator delete(void*, unsigned long)>
c0009458:	83 c4 10             	add    esp,0x10
c000945b:	83 c4 0c             	add    esp,0xc
c000945e:	c3                   	ret    
c000945f:	90                   	nop

c0009460 <ReservedFilename::~ReservedFilename()>:
c0009460:	83 ec 0c             	sub    esp,0xc
c0009463:	ba 58 fe 01 c0       	mov    edx,0xc001fe58
c0009468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946c:	89 10                	mov    DWORD PTR [eax],edx
c000946e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009472:	83 ec 0c             	sub    esp,0xc
c0009475:	50                   	push   eax
c0009476:	e8 21 ff ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000947b:	83 c4 10             	add    esp,0x10
c000947e:	90                   	nop
c000947f:	83 c4 0c             	add    esp,0xc
c0009482:	c3                   	ret    
c0009483:	90                   	nop

c0009484 <ReservedFilename::~ReservedFilename()>:
c0009484:	83 ec 0c             	sub    esp,0xc
c0009487:	83 ec 0c             	sub    esp,0xc
c000948a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948e:	e8 cd ff ff ff       	call   c0009460 <ReservedFilename::~ReservedFilename()>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	83 ec 08             	sub    esp,0x8
c0009499:	6a 0c                	push   0xc
c000949b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949f:	e8 e1 13 00 00       	call   c000a885 <operator delete(void*, unsigned long)>
c00094a4:	83 c4 10             	add    esp,0x10
c00094a7:	83 c4 0c             	add    esp,0xc
c00094aa:	c3                   	ret    

c00094ab <getFromFileDescriptor(int)>:
c00094ab:	53                   	push   ebx
c00094ac:	83 ec 08             	sub    esp,0x8
c00094af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094b3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094b9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094bf:	7f 2c                	jg     c00094ed <getFromFileDescriptor(int)+0x42>
c00094c1:	83 ec 0c             	sub    esp,0xc
c00094c4:	68 98 4f 02 c0       	push   0xc0024f98
c00094c9:	e8 0e 55 01 00       	call   c001e9dc <LinkedList<UnixFile>::getFirstElement()>
c00094ce:	83 c4 10             	add    esp,0x10
c00094d1:	85 c0                	test   eax,eax
c00094d3:	75 04                	jne    c00094d9 <getFromFileDescriptor(int)+0x2e>
c00094d5:	31 c0                	xor    eax,eax
c00094d7:	eb 6e                	jmp    c0009547 <getFromFileDescriptor(int)+0x9c>
c00094d9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094dc:	74 69                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c00094de:	52                   	push   edx
c00094df:	52                   	push   edx
c00094e0:	50                   	push   eax
c00094e1:	68 98 4f 02 c0       	push   0xc0024f98
c00094e6:	e8 9b 55 01 00       	call   c001ea86 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094eb:	eb e1                	jmp    c00094ce <getFromFileDescriptor(int)+0x23>
c00094ed:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094f3:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094f8:	74 4d                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c00094fa:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009500:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009505:	74 40                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009507:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000950d:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009512:	74 33                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009514:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000951a:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c000951f:	74 26                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009521:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009527:	83 f8 08             	cmp    eax,0x8
c000952a:	77 09                	ja     c0009535 <getFromFileDescriptor(int)+0x8a>
c000952c:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009533:	eb 12                	jmp    c0009547 <getFromFileDescriptor(int)+0x9c>
c0009535:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000953b:	83 fb 08             	cmp    ebx,0x8
c000953e:	77 95                	ja     c00094d5 <getFromFileDescriptor(int)+0x2a>
c0009540:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c0009547:	83 c4 08             	add    esp,0x8
c000954a:	5b                   	pop    ebx
c000954b:	c3                   	ret    

c000954c <__static_initialization_and_destruction_0(int, int)>:
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009554:	75 34                	jne    c000958a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009556:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000955e:	75 2a                	jne    c000958a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009560:	83 ec 0c             	sub    esp,0xc
c0009563:	68 98 4f 02 c0       	push   0xc0024f98
c0009568:	e8 59 53 01 00       	call   c001e8c6 <LinkedList<UnixFile>::LinkedList()>
c000956d:	83 c4 10             	add    esp,0x10
c0009570:	83 ec 04             	sub    esp,0x4
c0009573:	68 04 1f 02 c0       	push   0xc0021f04
c0009578:	68 98 4f 02 c0       	push   0xc0024f98
c000957d:	68 c4 e8 01 c0       	push   0xc001e8c4
c0009582:	e8 ae 12 00 00       	call   c000a835 <__cxa_atexit>
c0009587:	83 c4 10             	add    esp,0x10
c000958a:	90                   	nop
c000958b:	83 c4 0c             	add    esp,0xc
c000958e:	c3                   	ret    

c000958f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000958f:	83 ec 0c             	sub    esp,0xc
c0009592:	83 ec 08             	sub    esp,0x8
c0009595:	68 ff ff 00 00       	push   0xffff
c000959a:	6a 01                	push   0x1
c000959c:	e8 ab ff ff ff       	call   c000954c <__static_initialization_and_destruction_0(int, int)>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	83 c4 0c             	add    esp,0xc
c00095a7:	c3                   	ret    

c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095a8:	53                   	push   ebx
c00095a9:	8b 15 88 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f88
c00095af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095b7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095bd:	89 d8                	mov    eax,ebx
c00095bf:	d1 e8                	shr    eax,1
c00095c1:	01 d0                	add    eax,edx
c00095c3:	80 e3 01             	and    bl,0x1
c00095c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095c8:	75 09                	jne    c00095d3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ca:	83 e2 f0             	and    edx,0xfffffff0
c00095cd:	09 ca                	or     edx,ecx
c00095cf:	88 10                	mov    BYTE PTR [eax],dl
c00095d1:	5b                   	pop    ebx
c00095d2:	c3                   	ret    
c00095d3:	0f b6 c9             	movzx  ecx,cl
c00095d6:	83 e2 0f             	and    edx,0xf
c00095d9:	c1 e1 04             	shl    ecx,0x4
c00095dc:	09 ca                	or     edx,ecx
c00095de:	88 10                	mov    BYTE PTR [eax],dl
c00095e0:	5b                   	pop    ebx
c00095e1:	c3                   	ret    

c00095e2 <Virt::getPageState(unsigned long)>:
c00095e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095e6:	8b 0d 88 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f88
c00095ec:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095f2:	89 d0                	mov    eax,edx
c00095f4:	d1 e8                	shr    eax,1
c00095f6:	80 e2 01             	and    dl,0x1
c00095f9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095fc:	74 03                	je     c0009601 <Virt::getPageState(unsigned long)+0x1f>
c00095fe:	c1 e8 04             	shr    eax,0x4
c0009601:	83 e0 0f             	and    eax,0xf
c0009604:	c3                   	ret    

c0009605 <Virt::allocateKernelVirtualPages(int)>:
c0009605:	55                   	push   ebp
c0009606:	57                   	push   edi
c0009607:	56                   	push   esi
c0009608:	31 f6                	xor    esi,esi
c000960a:	53                   	push   ebx
c000960b:	31 db                	xor    ebx,ebx
c000960d:	83 ec 1c             	sub    esp,0x1c
c0009610:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009615:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009619:	8b 2d 84 1f 02 c0    	mov    ebp,DWORD PTR ds:0xc0021f84
c000961f:	55                   	push   ebp
c0009620:	e8 bd ff ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c0009625:	5a                   	pop    edx
c0009626:	84 c0                	test   al,al
c0009628:	75 3d                	jne    c0009667 <Virt::allocateKernelVirtualPages(int)+0x62>
c000962a:	85 db                	test   ebx,ebx
c000962c:	0f 44 f5             	cmove  esi,ebp
c000962f:	83 c3 01             	add    ebx,0x1
c0009632:	39 fb                	cmp    ebx,edi
c0009634:	74 5e                	je     c0009694 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009636:	83 c5 01             	add    ebp,0x1
c0009639:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000963f:	76 33                	jbe    c0009674 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009641:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009646:	c7 05 84 1f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021f84,0xc8000
c0009650:	75 2a                	jne    c000967c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009652:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009657:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000965c:	55                   	push   ebp
c000965d:	e8 80 ff ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c0009662:	5a                   	pop    edx
c0009663:	84 c0                	test   al,al
c0009665:	74 c3                	je     c000962a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009667:	83 c5 01             	add    ebp,0x1
c000966a:	31 db                	xor    ebx,ebx
c000966c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009672:	77 cd                	ja     c0009641 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009674:	89 2d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebp
c000967a:	eb a3                	jmp    c000961f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000967c:	83 ec 0c             	sub    esp,0xc
c000967f:	68 6c fe 01 c0       	push   0xc001fe6c
c0009684:	e8 c4 71 00 00       	call   c001084d <KePanic(char const*)>
c0009689:	8b 2d 84 1f 02 c0    	mov    ebp,DWORD PTR ds:0xc0021f84
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	eb 8b                	jmp    c000961f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009694:	89 35 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,esi
c000969a:	83 fb 01             	cmp    ebx,0x1
c000969d:	74 63                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000969f:	85 ff                	test   edi,edi
c00096a1:	74 41                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096a3:	89 f0                	mov    eax,esi
c00096a5:	31 db                	xor    ebx,ebx
c00096a7:	8d 6f ff             	lea    ebp,[edi-0x1]
c00096aa:	eb 16                	jmp    c00096c2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00096ac:	6a 01                	push   0x1
c00096ae:	83 c3 01             	add    ebx,0x1
c00096b1:	50                   	push   eax
c00096b2:	e8 f1 fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b7:	39 fb                	cmp    ebx,edi
c00096b9:	58                   	pop    eax
c00096ba:	5a                   	pop    edx
c00096bb:	74 27                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096bd:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c00096c2:	8d 50 01             	lea    edx,[eax+0x1]
c00096c5:	85 db                	test   ebx,ebx
c00096c7:	89 15 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,edx
c00096cd:	74 22                	je     c00096f1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096cf:	39 dd                	cmp    ebp,ebx
c00096d1:	75 d9                	jne    c00096ac <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096d3:	6a 03                	push   0x3
c00096d5:	83 c3 01             	add    ebx,0x1
c00096d8:	50                   	push   eax
c00096d9:	e8 ca fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096de:	39 fb                	cmp    ebx,edi
c00096e0:	59                   	pop    ecx
c00096e1:	58                   	pop    eax
c00096e2:	75 d9                	jne    c00096bd <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096e4:	83 c4 1c             	add    esp,0x1c
c00096e7:	89 f0                	mov    eax,esi
c00096e9:	5b                   	pop    ebx
c00096ea:	c1 e0 0c             	shl    eax,0xc
c00096ed:	5e                   	pop    esi
c00096ee:	5f                   	pop    edi
c00096ef:	5d                   	pop    ebp
c00096f0:	c3                   	ret    
c00096f1:	6a 02                	push   0x2
c00096f3:	bb 01 00 00 00       	mov    ebx,0x1
c00096f8:	50                   	push   eax
c00096f9:	e8 aa fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fe:	58                   	pop    eax
c00096ff:	5a                   	pop    edx
c0009700:	eb bb                	jmp    c00096bd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009702:	6a 04                	push   0x4
c0009704:	56                   	push   esi
c0009705:	8d 46 01             	lea    eax,[esi+0x1]
c0009708:	a3 84 1f 02 c0       	mov    ds:0xc0021f84,eax
c000970d:	e8 96 fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009712:	89 f0                	mov    eax,esi
c0009714:	59                   	pop    ecx
c0009715:	c1 e0 0c             	shl    eax,0xc
c0009718:	5b                   	pop    ebx
c0009719:	83 c4 1c             	add    esp,0x1c
c000971c:	5b                   	pop    ebx
c000971d:	5e                   	pop    esi
c000971e:	5f                   	pop    edi
c000971f:	5d                   	pop    ebp
c0009720:	c3                   	ret    

c0009721 <Virt::freeSwapfilePage(unsigned long)>:
c0009721:	53                   	push   ebx
c0009722:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009728:	b8 01 00 00 00       	mov    eax,0x1
c000972d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009731:	d3 e0                	shl    eax,cl
c0009733:	89 cb                	mov    ebx,ecx
c0009735:	c1 eb 05             	shr    ebx,0x5
c0009738:	f7 d0                	not    eax
c000973a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000973d:	21 c1                	and    ecx,eax
c000973f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009742:	5b                   	pop    ebx
c0009743:	c3                   	ret    

c0009744 <Virt::swapIDToSector(unsigned long)>:
c0009744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009748:	8b 15 8c 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f8c
c000974e:	8b 0d 94 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f94
c0009754:	0f af c2             	imul   eax,edx
c0009757:	01 c8                	add    eax,ecx
c0009759:	c3                   	ret    

c000975a <Virt::allocateSwapfilePage()>:
c000975a:	55                   	push   ebp
c000975b:	31 d2                	xor    edx,edx
c000975d:	57                   	push   edi
c000975e:	56                   	push   esi
c000975f:	53                   	push   ebx
c0009760:	83 ec 0c             	sub    esp,0xc
c0009763:	8b 1d 90 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f90
c0009769:	8b 0d 8c 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f8c
c000976f:	89 d8                	mov    eax,ebx
c0009771:	f7 f1                	div    ecx
c0009773:	39 cb                	cmp    ebx,ecx
c0009775:	72 2f                	jb     c00097a6 <Virt::allocateSwapfilePage()+0x4c>
c0009777:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000977d:	8b 16                	mov    edx,DWORD PTR [esi]
c000977f:	f6 c2 01             	test   dl,0x1
c0009782:	74 3e                	je     c00097c2 <Virt::allocateSwapfilePage()+0x68>
c0009784:	31 c9                	xor    ecx,ecx
c0009786:	bf 01 00 00 00       	mov    edi,0x1
c000978b:	eb 12                	jmp    c000979f <Virt::allocateSwapfilePage()+0x45>
c000978d:	89 ca                	mov    edx,ecx
c000978f:	89 fd                	mov    ebp,edi
c0009791:	c1 ea 05             	shr    edx,0x5
c0009794:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009797:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009799:	d3 e5                	shl    ebp,cl
c000979b:	85 ea                	test   edx,ebp
c000979d:	74 2c                	je     c00097cb <Virt::allocateSwapfilePage()+0x71>
c000979f:	83 c1 01             	add    ecx,0x1
c00097a2:	39 c8                	cmp    eax,ecx
c00097a4:	77 e7                	ja     c000978d <Virt::allocateSwapfilePage()+0x33>
c00097a6:	83 ec 0c             	sub    esp,0xc
c00097a9:	68 04 00 02 c0       	push   0xc0020004
c00097ae:	e8 9a 70 00 00       	call   c001084d <KePanic(char const*)>
c00097b3:	83 c4 10             	add    esp,0x10
c00097b6:	31 c9                	xor    ecx,ecx
c00097b8:	83 c4 0c             	add    esp,0xc
c00097bb:	89 c8                	mov    eax,ecx
c00097bd:	5b                   	pop    ebx
c00097be:	5e                   	pop    esi
c00097bf:	5f                   	pop    edi
c00097c0:	5d                   	pop    ebp
c00097c1:	c3                   	ret    
c00097c2:	89 f3                	mov    ebx,esi
c00097c4:	bd 01 00 00 00       	mov    ebp,0x1
c00097c9:	31 c9                	xor    ecx,ecx
c00097cb:	09 ea                	or     edx,ebp
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	89 13                	mov    DWORD PTR [ebx],edx
c00097d1:	83 c4 0c             	add    esp,0xc
c00097d4:	5b                   	pop    ebx
c00097d5:	5e                   	pop    esi
c00097d6:	5f                   	pop    edi
c00097d7:	5d                   	pop    ebp
c00097d8:	c3                   	ret    

c00097d9 <Virt::virtualMemorySetup()>:
c00097d9:	53                   	push   ebx
c00097da:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097df:	6a 0f                	push   0xf
c00097e1:	53                   	push   ebx
c00097e2:	83 c3 01             	add    ebx,0x1
c00097e5:	e8 be fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ea:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f0:	58                   	pop    eax
c00097f1:	5a                   	pop    edx
c00097f2:	75 eb                	jne    c00097df <Virt::virtualMemorySetup()+0x6>
c00097f4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f9:	6a 00                	push   0x0
c00097fb:	53                   	push   ebx
c00097fc:	83 c3 01             	add    ebx,0x1
c00097ff:	e8 a4 fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009804:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000980a:	59                   	pop    ecx
c000980b:	58                   	pop    eax
c000980c:	75 eb                	jne    c00097f9 <Virt::virtualMemorySetup()+0x20>
c000980e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009813:	6a 0f                	push   0xf
c0009815:	53                   	push   ebx
c0009816:	83 c3 01             	add    ebx,0x1
c0009819:	e8 8a fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000981e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009824:	58                   	pop    eax
c0009825:	5a                   	pop    edx
c0009826:	75 eb                	jne    c0009813 <Virt::virtualMemorySetup()+0x3a>
c0009828:	5b                   	pop    ebx
c0009829:	c3                   	ret    

c000982a <Virt::setupPageSwapping(int)>:
c000982a:	53                   	push   ebx
c000982b:	83 ec 0c             	sub    esp,0xc
c000982e:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009837:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000983d:	8b 10                	mov    edx,DWORD PTR [eax]
c000983f:	53                   	push   ebx
c0009840:	68 1b 00 02 c0       	push   0xc002001b
c0009845:	50                   	push   eax
c0009846:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009849:	c1 e3 0b             	shl    ebx,0xb
c000984c:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0009852:	c1 eb 08             	shr    ebx,0x8
c0009855:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009858:	c6 05 98 1f 02 c0 43 	mov    BYTE PTR ds:0xc0021f98,0x43
c000985f:	c7 05 8c 1f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021f8c,0x8
c0009869:	a3 94 1f 02 c0       	mov    ds:0xc0021f94,eax
c000986e:	e8 58 e2 ff ff       	call   c0007acb <malloc>
c0009873:	31 d2                	xor    edx,edx
c0009875:	83 c4 0c             	add    esp,0xc
c0009878:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c000987d:	89 c1                	mov    ecx,eax
c000987f:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009884:	f7 35 8c 1f 02 c0    	div    DWORD PTR ds:0xc0021f8c
c000988a:	c1 e8 05             	shr    eax,0x5
c000988d:	50                   	push   eax
c000988e:	6a 00                	push   0x0
c0009890:	51                   	push   ecx
c0009891:	e8 5a 6c ff ff       	call   c00004f0 <memset>
c0009896:	83 c4 18             	add    esp,0x18
c0009899:	5b                   	pop    ebx
c000989a:	c3                   	ret    
c000989b:	90                   	nop

c000989c <VAS::VAS(VAS*)>:
c000989c:	83 ec 0c             	sub    esp,0xc
c000989f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098b5:	83 ec 0c             	sub    esp,0xc
c00098b8:	68 8c fe 01 c0       	push   0xc001fe8c
c00098bd:	e8 8b 6f 00 00       	call   c001084d <KePanic(char const*)>
c00098c2:	83 c4 10             	add    esp,0x10
c00098c5:	90                   	nop
c00098c6:	83 c4 0c             	add    esp,0xc
c00098c9:	c3                   	ret    

c00098ca <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098ce:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098d3:	89 c2                	mov    edx,eax
c00098d5:	c1 ea 16             	shr    edx,0x16
c00098d8:	c1 e8 0a             	shr    eax,0xa
c00098db:	83 f9 01             	cmp    ecx,0x1
c00098de:	19 c9                	sbb    ecx,ecx
c00098e0:	25 fc 0f 00 00       	and    eax,0xffc
c00098e5:	c1 e2 0c             	shl    edx,0xc
c00098e8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098ee:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098f5:	01 d0                	add    eax,edx
c00098f7:	c3                   	ret    

c00098f8 <VAS::getPageTableEntry(unsigned long)>:
c00098f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098fc:	89 ca                	mov    edx,ecx
c00098fe:	c1 ea 16             	shr    edx,0x16
c0009901:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009907:	c1 e9 0a             	shr    ecx,0xa
c000990a:	c1 e0 0c             	shl    eax,0xc
c000990d:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009913:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009916:	c3                   	ret    

c0009917 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009917:	55                   	push   ebp
c0009918:	57                   	push   edi
c0009919:	bf 01 00 00 00       	mov    edi,0x1
c000991e:	56                   	push   esi
c000991f:	53                   	push   ebx
c0009920:	83 ec 0c             	sub    esp,0xc
c0009923:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009927:	c1 ee 0c             	shr    esi,0xc
c000992a:	eb 3a                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000992c:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009931:	83 ec 08             	sub    esp,0x8
c0009934:	55                   	push   ebp
c0009935:	50                   	push   eax
c0009936:	e8 bd ff ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009940:	f6 c4 04             	test   ah,0x4
c0009943:	75 5a                	jne    c000999f <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009945:	83 fb 04             	cmp    ebx,0x4
c0009948:	74 6b                	je     c00099b5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000994a:	83 fb 02             	cmp    ebx,0x2
c000994d:	74 7f                	je     c00099ce <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 a3 00 00 00    	je     c00099fb <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 87 00 00 00    	je     c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 74 fc ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 b3                	jne    c000992c <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 32 00 02 c0       	push   0xc0020032
c0009981:	e8 c7 6e 00 00       	call   c001084d <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c000998f:	55                   	push   ebp
c0009990:	e8 63 ff ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 00                	mov    eax,DWORD PTR [eax]
c000999a:	f6 c4 04             	test   ah,0x4
c000999d:	74 c2                	je     c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c000999f:	83 ec 0c             	sub    esp,0xc
c00099a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099a7:	50                   	push   eax
c00099a8:	e8 c0 e3 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	83 fb 04             	cmp    ebx,0x4
c00099b3:	75 95                	jne    c000994a <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099b5:	83 e7 01             	and    edi,0x1
c00099b8:	75 46                	jne    c0009a00 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099ba:	c7 44 24 20 b0 fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001feb0
c00099c2:	83 c4 0c             	add    esp,0xc
c00099c5:	5b                   	pop    ebx
c00099c6:	5e                   	pop    esi
c00099c7:	5f                   	pop    edi
c00099c8:	5d                   	pop    ebp
c00099c9:	e9 7f 6e 00 00       	jmp    c001084d <KePanic(char const*)>
c00099ce:	83 e7 01             	and    edi,0x1
c00099d1:	75 15                	jne    c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	68 4e 00 02 c0       	push   0xc002004e
c00099db:	e8 6d 6e 00 00       	call   c001084d <KePanic(char const*)>
c00099e0:	83 c4 10             	add    esp,0x10
c00099e3:	e9 79 ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099e8:	83 ec 08             	sub    esp,0x8
c00099eb:	6a 00                	push   0x0
c00099ed:	56                   	push   esi
c00099ee:	e8 b5 fb ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099f3:	83 c4 10             	add    esp,0x10
c00099f6:	e9 66 ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099fb:	83 e7 01             	and    edi,0x1
c00099fe:	75 16                	jne    c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009a00:	83 ec 08             	sub    esp,0x8
c0009a03:	6a 00                	push   0x0
c0009a05:	56                   	push   esi
c0009a06:	e8 9d fb ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0b:	83 c4 10             	add    esp,0x10
c0009a0e:	83 c4 0c             	add    esp,0xc
c0009a11:	5b                   	pop    ebx
c0009a12:	5e                   	pop    esi
c0009a13:	5f                   	pop    edi
c0009a14:	5d                   	pop    ebp
c0009a15:	c3                   	ret    
c0009a16:	c7 44 24 20 6a 00 02 c0 	mov    DWORD PTR [esp+0x20],0xc002006a
c0009a1e:	83 c4 0c             	add    esp,0xc
c0009a21:	5b                   	pop    ebx
c0009a22:	5e                   	pop    esi
c0009a23:	5f                   	pop    edi
c0009a24:	5d                   	pop    ebp
c0009a25:	e9 23 6e 00 00       	jmp    c001084d <KePanic(char const*)>

c0009a2a <VAS::freeAllocatedPages(unsigned long)>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a32:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a36:	74 09                	je     c0009a41 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a3c:	e9 d6 fe ff ff       	jmp    c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a41:	c7 44 24 04 d4 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fed4
c0009a49:	e9 35 0f 00 00       	jmp    c000a983 <Dbg::kprintf(char const*, ...)>

c0009a4e <VAS::virtualToPhysical(unsigned long)>:
c0009a4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a52:	50                   	push   eax
c0009a53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a57:	52                   	push   edx
c0009a58:	e8 9b fe ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009a5d:	59                   	pop    ecx
c0009a5e:	5a                   	pop    edx
c0009a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a61:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a66:	c3                   	ret    
c0009a67:	90                   	nop

c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a68:	55                   	push   ebp
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a74:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a78:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a7c:	89 c3                	mov    ebx,eax
c0009a7e:	c1 e3 0c             	shl    ebx,0xc
c0009a81:	01 f3                	add    ebx,esi
c0009a83:	85 c0                	test   eax,eax
c0009a85:	7e 1f                	jle    c0009aa6 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c0009a87:	56                   	push   esi
c0009a88:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a8e:	55                   	push   ebp
c0009a8f:	e8 64 fe ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009a94:	5a                   	pop    edx
c0009a95:	59                   	pop    ecx
c0009a96:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009a9c:	21 f9                	and    ecx,edi
c0009a9e:	09 d1                	or     ecx,edx
c0009aa0:	39 f3                	cmp    ebx,esi
c0009aa2:	89 08                	mov    DWORD PTR [eax],ecx
c0009aa4:	75 e1                	jne    c0009a87 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c0009aa6:	5b                   	pop    ebx
c0009aa7:	5e                   	pop    esi
c0009aa8:	5f                   	pop    edi
c0009aa9:	5d                   	pop    ebp
c0009aaa:	c3                   	ret    
c0009aab:	90                   	nop

c0009aac <VAS::VAS()>:
c0009aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ab0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac6:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009acb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009acf:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ade:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009ae5:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009aea:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009aef:	29 c2                	sub    edx,eax
c0009af1:	89 d0                	mov    eax,edx
c0009af3:	05 ff 0f 00 00       	add    eax,0xfff
c0009af8:	c1 e8 0c             	shr    eax,0xc
c0009afb:	89 c2                	mov    edx,eax
c0009afd:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b02:	6a 04                	push   0x4
c0009b04:	6a ff                	push   0xffffffff
c0009b06:	52                   	push   edx
c0009b07:	50                   	push   eax
c0009b08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0c:	e8 57 ff ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b11:	83 c4 14             	add    esp,0x14
c0009b14:	90                   	nop
c0009b15:	c3                   	ret    

c0009b16 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b16:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b21:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b28:	75 01                	jne    c0009b2b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b2a:	c3                   	ret    
c0009b2b:	68 80 00 00 00       	push   0x80
c0009b30:	6a ff                	push   0xffffffff
c0009b32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b36:	50                   	push   eax
c0009b37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b3b:	52                   	push   edx
c0009b3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b40:	51                   	push   ecx
c0009b41:	e8 22 ff ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b46:	83 c4 14             	add    esp,0x14
c0009b49:	c3                   	ret    

c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b4e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b55:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b5d:	83 f8 01             	cmp    eax,0x1
c0009b60:	19 c0                	sbb    eax,eax
c0009b62:	83 ca 03             	or     edx,0x3
c0009b65:	83 e0 fc             	and    eax,0xfffffffc
c0009b68:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b6f:	0f 20 d8             	mov    eax,cr3
c0009b72:	0f 22 d8             	mov    cr3,eax
c0009b75:	c3                   	ret    

c0009b76 <VAS::~VAS()>:
c0009b76:	83 ec 2c             	sub    esp,0x2c
c0009b79:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b81:	fa                   	cli    
c0009b82:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b87:	83 c0 01             	add    eax,0x1
c0009b8a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b8f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b99:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ba3:	6a 01                	push   0x1
c0009ba5:	50                   	push   eax
c0009ba6:	e8 9f ff ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bab:	83 c4 0c             	add    esp,0xc
c0009bae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bb6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bbe:	0f 8f d8 00 00 00    	jg     c0009c9c <VAS::~VAS()+0x126>
c0009bc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bcf:	c1 e2 02             	shl    edx,0x2
c0009bd2:	01 d0                	add    eax,edx
c0009bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bde:	83 e0 01             	and    eax,0x1
c0009be1:	0f 84 ab 00 00 00    	je     c0009c92 <VAS::~VAS()+0x11c>
c0009be7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009bef:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009bf7:	7f 74                	jg     c0009c6d <VAS::~VAS()+0xf7>
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	c1 e0 0a             	shl    eax,0xa
c0009c00:	89 c2                	mov    edx,eax
c0009c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c06:	01 d0                	add    eax,edx
c0009c08:	c1 e0 0c             	shl    eax,0xc
c0009c0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c0f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c19:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c23:	6a 01                	push   0x1
c0009c25:	50                   	push   eax
c0009c26:	e8 9f fc ff ff       	call   c00098ca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c2b:	83 c4 0c             	add    esp,0xc
c0009c2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c36:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c40:	25 01 04 00 00       	and    eax,0x401
c0009c45:	3d 01 04 00 00       	cmp    eax,0x401
c0009c4a:	75 1a                	jne    c0009c66 <VAS::~VAS()+0xf0>
c0009c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c50:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c55:	83 ec 0c             	sub    esp,0xc
c0009c58:	50                   	push   eax
c0009c59:	e8 0f e1 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009c5e:	83 c4 10             	add    esp,0x10
c0009c61:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c66:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c6b:	eb 82                	jmp    c0009bef <VAS::~VAS()+0x79>
c0009c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c71:	25 00 04 00 00       	and    eax,0x400
c0009c76:	74 1a                	je     c0009c92 <VAS::~VAS()+0x11c>
c0009c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c81:	83 ec 0c             	sub    esp,0xc
c0009c84:	50                   	push   eax
c0009c85:	e8 e3 e0 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009c8a:	83 c4 10             	add    esp,0x10
c0009c8d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c92:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009c97:	e9 1a ff ff ff       	jmp    c0009bb6 <VAS::~VAS()+0x40>
c0009c9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ca3:	83 ec 0c             	sub    esp,0xc
c0009ca6:	50                   	push   eax
c0009ca7:	e8 6b fc ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cac:	83 c4 10             	add    esp,0x10
c0009caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cb3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cb6:	83 ec 0c             	sub    esp,0xc
c0009cb9:	50                   	push   eax
c0009cba:	e8 ae e0 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cc7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ccc:	83 e8 01             	sub    eax,0x1
c0009ccf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cd4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cd9:	85 c0                	test   eax,eax
c0009cdb:	75 01                	jne    c0009cde <VAS::~VAS()+0x168>
c0009cdd:	fb                   	sti    
c0009cde:	90                   	nop
c0009cdf:	83 c4 2c             	add    esp,0x2c
c0009ce2:	c3                   	ret    
c0009ce3:	90                   	nop

c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009ce4:	55                   	push   ebp
c0009ce5:	57                   	push   edi
c0009ce6:	56                   	push   esi
c0009ce7:	53                   	push   ebx
c0009ce8:	83 ec 1c             	sub    esp,0x1c
c0009ceb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009cf3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009cf7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009cfd:	77 0b                	ja     c0009d0a <VAS::mapPage(unsigned long, unsigned long, int)+0x26>
c0009cff:	0f 20 d8             	mov    eax,cr3
c0009d02:	0f 20 d8             	mov    eax,cr3
c0009d05:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d08:	75 43                	jne    c0009d4d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009d0a:	89 d8                	mov    eax,ebx
c0009d0c:	09 f8                	or     eax,edi
c0009d0e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d13:	75 53                	jne    c0009d68 <VAS::mapPage(unsigned long, unsigned long, int)+0x84>
c0009d15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d18:	89 de                	mov    esi,ebx
c0009d1a:	c1 ee 16             	shr    esi,0x16
c0009d1d:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d24:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d28:	74 50                	je     c0009d7a <VAS::mapPage(unsigned long, unsigned long, int)+0x96>
c0009d2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d2e:	c1 eb 0a             	shr    ebx,0xa
c0009d31:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d37:	c1 e6 0c             	shl    esi,0xc
c0009d3a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d40:	09 c7                	or     edi,eax
c0009d42:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d45:	83 c4 1c             	add    esp,0x1c
c0009d48:	5b                   	pop    ebx
c0009d49:	5e                   	pop    esi
c0009d4a:	5f                   	pop    edi
c0009d4b:	5d                   	pop    ebp
c0009d4c:	c3                   	ret    
c0009d4d:	83 ec 0c             	sub    esp,0xc
c0009d50:	68 f8 fe 01 c0       	push   0xc001fef8
c0009d55:	e8 29 0c 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0009d5a:	89 d8                	mov    eax,ebx
c0009d5c:	83 c4 10             	add    esp,0x10
c0009d5f:	09 f8                	or     eax,edi
c0009d61:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d66:	74 ad                	je     c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d68:	83 ec 0c             	sub    esp,0xc
c0009d6b:	68 60 ff 01 c0       	push   0xc001ff60
c0009d70:	e8 d8 6a 00 00       	call   c001084d <KePanic(char const*)>
c0009d75:	83 c4 10             	add    esp,0x10
c0009d78:	eb 9b                	jmp    c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d7e:	e8 53 e0 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009d83:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d89:	83 ec 0c             	sub    esp,0xc
c0009d8c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d94:	6a 01                	push   0x1
c0009d96:	e8 6a f8 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0009d9b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009da2:	6a 01                	push   0x1
c0009da4:	50                   	push   eax
c0009da5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009da9:	52                   	push   edx
c0009daa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dae:	51                   	push   ecx
c0009daf:	e8 4a 02 00 00       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009db4:	83 c4 1c             	add    esp,0x1c
c0009db7:	68 00 10 00 00       	push   0x1000
c0009dbc:	6a 00                	push   0x0
c0009dbe:	50                   	push   eax
c0009dbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dc3:	e8 28 67 ff ff       	call   c00004f0 <memset>
c0009dc8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dcc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dcf:	e8 43 fb ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009dd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ddc:	83 c4 10             	add    esp,0x10
c0009ddf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009de2:	0d 07 04 00 00       	or     eax,0x407
c0009de7:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009dea:	e9 3b ff ff ff       	jmp    c0009d2a <VAS::mapPage(unsigned long, unsigned long, int)+0x46>
c0009def:	90                   	nop

c0009df0 <VAS::allocatePages(int, int)>:
c0009df0:	55                   	push   ebp
c0009df1:	57                   	push   edi
c0009df2:	56                   	push   esi
c0009df3:	53                   	push   ebx
c0009df4:	83 ec 1c             	sub    esp,0x1c
c0009df7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009dfc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009e00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e06:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e0c:	83 e0 01             	and    eax,0x1
c0009e0f:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e13:	89 c7                	mov    edi,eax
c0009e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e19:	0f 85 d6 00 00 00    	jne    c0009ef5 <VAS::allocatePages(int, int)+0x105>
c0009e1f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e26:	85 c0                	test   eax,eax
c0009e28:	0f 84 ab 00 00 00    	je     c0009ed9 <VAS::allocatePages(int, int)+0xe9>
c0009e2e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e32:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e3a:	c1 e6 0c             	shl    esi,0xc
c0009e3d:	01 de                	add    esi,ebx
c0009e3f:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e42:	85 c0                	test   eax,eax
c0009e44:	7e 3a                	jle    c0009e80 <VAS::allocatePages(int, int)+0x90>
c0009e46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e4e:	80 cc 04             	or     ah,0x4
c0009e51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e55:	89 f8                	mov    eax,edi
c0009e57:	0f b6 f8             	movzx  edi,al
c0009e5a:	e8 77 df ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009e5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e63:	52                   	push   edx
c0009e64:	53                   	push   ebx
c0009e65:	50                   	push   eax
c0009e66:	55                   	push   ebp
c0009e67:	e8 78 fe ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e6c:	83 c4 10             	add    esp,0x10
c0009e6f:	85 ff                	test   edi,edi
c0009e71:	74 03                	je     c0009e76 <VAS::allocatePages(int, int)+0x86>
c0009e73:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e76:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e7c:	39 de                	cmp    esi,ebx
c0009e7e:	75 da                	jne    c0009e5a <VAS::allocatePages(int, int)+0x6a>
c0009e80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e84:	85 c9                	test   ecx,ecx
c0009e86:	75 12                	jne    c0009e9a <VAS::allocatePages(int, int)+0xaa>
c0009e88:	0f 20 d8             	mov    eax,cr3
c0009e8b:	0f 22 d8             	mov    cr3,eax
c0009e8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e92:	83 c4 1c             	add    esp,0x1c
c0009e95:	5b                   	pop    ebx
c0009e96:	5e                   	pop    esi
c0009e97:	5f                   	pop    edi
c0009e98:	5d                   	pop    ebp
c0009e99:	c3                   	ret    
c0009e9a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e9e:	c1 ee 0a             	shr    esi,0xa
c0009ea1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ea7:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ead:	c1 eb 0a             	shr    ebx,0xa
c0009eb0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009eb6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ebc:	39 c3                	cmp    ebx,eax
c0009ebe:	77 ce                	ja     c0009e8e <VAS::allocatePages(int, int)+0x9e>
c0009ec0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ec3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ec9:	39 d8                	cmp    eax,ebx
c0009ecb:	73 f3                	jae    c0009ec0 <VAS::allocatePages(int, int)+0xd0>
c0009ecd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ed1:	83 c4 1c             	add    esp,0x1c
c0009ed4:	5b                   	pop    ebx
c0009ed5:	5e                   	pop    esi
c0009ed6:	5f                   	pop    edi
c0009ed7:	5d                   	pop    ebp
c0009ed8:	c3                   	ret    
c0009ed9:	83 ec 0c             	sub    esp,0xc
c0009edc:	68 84 ff 01 c0       	push   0xc001ff84
c0009ee1:	e8 67 69 00 00       	call   c001084d <KePanic(char const*)>
c0009ee6:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009ee9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009eed:	83 c4 10             	add    esp,0x10
c0009ef0:	e9 39 ff ff ff       	jmp    c0009e2e <VAS::allocatePages(int, int)+0x3e>
c0009ef5:	83 ec 0c             	sub    esp,0xc
c0009ef8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009efc:	50                   	push   eax
c0009efd:	e8 03 f7 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0009f02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f06:	83 c4 10             	add    esp,0x10
c0009f09:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f0e:	0f 87 a4 00 00 00    	ja     c0009fb8 <VAS::allocatePages(int, int)+0x1c8>
c0009f14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f18:	85 c0                	test   eax,eax
c0009f1a:	7e 44                	jle    c0009f60 <VAS::allocatePages(int, int)+0x170>
c0009f1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f20:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f24:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f28:	c1 e0 0c             	shl    eax,0xc
c0009f2b:	01 d8                	add    eax,ebx
c0009f2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f31:	89 f8                	mov    eax,edi
c0009f33:	81 ce 00 04 00 00    	or     esi,0x400
c0009f39:	0f b6 f8             	movzx  edi,al
c0009f3c:	e8 95 de ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009f41:	56                   	push   esi
c0009f42:	53                   	push   ebx
c0009f43:	50                   	push   eax
c0009f44:	55                   	push   ebp
c0009f45:	e8 9a fd ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f4a:	83 c4 10             	add    esp,0x10
c0009f4d:	85 ff                	test   edi,edi
c0009f4f:	74 03                	je     c0009f54 <VAS::allocatePages(int, int)+0x164>
c0009f51:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f54:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f5a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f5e:	75 dc                	jne    c0009f3c <VAS::allocatePages(int, int)+0x14c>
c0009f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f64:	85 c0                	test   eax,eax
c0009f66:	0f 84 1c ff ff ff    	je     c0009e88 <VAS::allocatePages(int, int)+0x98>
c0009f6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f74:	c1 e0 0c             	shl    eax,0xc
c0009f77:	01 d0                	add    eax,edx
c0009f79:	89 d3                	mov    ebx,edx
c0009f7b:	c1 eb 0a             	shr    ebx,0xa
c0009f7e:	c1 e8 0a             	shr    eax,0xa
c0009f81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f87:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f8c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f92:	2d 00 00 40 00       	sub    eax,0x400000
c0009f97:	39 c3                	cmp    ebx,eax
c0009f99:	0f 87 ef fe ff ff    	ja     c0009e8e <VAS::allocatePages(int, int)+0x9e>
c0009f9f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fa2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fa8:	39 d8                	cmp    eax,ebx
c0009faa:	73 f3                	jae    c0009f9f <VAS::allocatePages(int, int)+0x1af>
c0009fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fb0:	83 c4 1c             	add    esp,0x1c
c0009fb3:	5b                   	pop    ebx
c0009fb4:	5e                   	pop    esi
c0009fb5:	5f                   	pop    edi
c0009fb6:	5d                   	pop    ebp
c0009fb7:	c3                   	ret    
c0009fb8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fbd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fc3:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fca:	0f 84 44 ff ff ff    	je     c0009f14 <VAS::allocatePages(int, int)+0x124>
c0009fd0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fd4:	80 cc 01             	or     ah,0x1
c0009fd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fdb:	e9 34 ff ff ff       	jmp    c0009f14 <VAS::allocatePages(int, int)+0x124>

c0009fe0 <VAS::setCPUSpecific(unsigned long)>:
c0009fe0:	83 ec 0c             	sub    esp,0xc
c0009fe3:	6a 05                	push   0x5
c0009fe5:	68 00 00 40 c2       	push   0xc2400000
c0009fea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009fee:	50                   	push   eax
c0009fef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ff3:	52                   	push   edx
c0009ff4:	e8 eb fc ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ff9:	83 c4 1c             	add    esp,0x1c
c0009ffc:	c3                   	ret    
c0009ffd:	90                   	nop

c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009ffe:	55                   	push   ebp
c0009fff:	57                   	push   edi
c000a000:	56                   	push   esi
c000a001:	53                   	push   ebx
c000a002:	83 ec 1c             	sub    esp,0x1c
c000a005:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a00a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a00e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a012:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a016:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a01c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a022:	83 e0 01             	and    eax,0x1
c000a025:	85 c9                	test   ecx,ecx
c000a027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a02b:	7e 3e                	jle    c000a06b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6d>
c000a02d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a031:	89 f3                	mov    ebx,esi
c000a033:	0f b6 f8             	movzx  edi,al
c000a036:	c1 e2 0c             	shl    edx,0xc
c000a039:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000a03c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a040:	55                   	push   ebp
c000a041:	53                   	push   ebx
c000a042:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a046:	29 f0                	sub    eax,esi
c000a048:	01 d8                	add    eax,ebx
c000a04a:	50                   	push   eax
c000a04b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a04f:	52                   	push   edx
c000a050:	e8 8f fc ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a055:	83 c4 10             	add    esp,0x10
c000a058:	85 ff                	test   edi,edi
c000a05a:	74 03                	je     c000a05f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x61>
c000a05c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a05f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a065:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a069:	75 d5                	jne    c000a040 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a06b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a06f:	85 c0                	test   eax,eax
c000a071:	75 10                	jne    c000a083 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x85>
c000a073:	0f 20 d8             	mov    eax,cr3
c000a076:	0f 22 d8             	mov    cr3,eax
c000a079:	83 c4 1c             	add    esp,0x1c
c000a07c:	89 f0                	mov    eax,esi
c000a07e:	5b                   	pop    ebx
c000a07f:	5e                   	pop    esi
c000a080:	5f                   	pop    edi
c000a081:	5d                   	pop    ebp
c000a082:	c3                   	ret    
c000a083:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a087:	89 f3                	mov    ebx,esi
c000a089:	c1 eb 0a             	shr    ebx,0xa
c000a08c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a092:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a098:	c1 e0 0c             	shl    eax,0xc
c000a09b:	01 f0                	add    eax,esi
c000a09d:	c1 e8 0a             	shr    eax,0xa
c000a0a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0a5:	2d 00 00 40 00       	sub    eax,0x400000
c000a0aa:	39 c3                	cmp    ebx,eax
c000a0ac:	77 cb                	ja     c000a079 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x7b>
c000a0ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0b7:	39 d8                	cmp    eax,ebx
c000a0b9:	73 f3                	jae    c000a0ae <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb0>
c000a0bb:	83 c4 1c             	add    esp,0x1c
c000a0be:	89 f0                	mov    eax,esi
c000a0c0:	5b                   	pop    ebx
c000a0c1:	5e                   	pop    esi
c000a0c2:	5f                   	pop    edi
c000a0c3:	5d                   	pop    ebp
c000a0c4:	c3                   	ret    
c000a0c5:	90                   	nop

c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0c6:	55                   	push   ebp
c000a0c7:	57                   	push   edi
c000a0c8:	56                   	push   esi
c000a0c9:	53                   	push   ebx
c000a0ca:	83 ec 1c             	sub    esp,0x1c
c000a0cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a0d5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a0d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0e1:	09 d8                	or     eax,ebx
c000a0e3:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0e8:	75 4b                	jne    c000a135 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a0ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a0ed:	89 de                	mov    esi,ebx
c000a0ef:	c1 ee 16             	shr    esi,0x16
c000a0f2:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c000a0f9:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c000a0fd:	74 48                	je     c000a147 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c000a0ff:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c000a104:	c1 eb 0a             	shr    ebx,0xa
c000a107:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000a10b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a10f:	83 ff 01             	cmp    edi,0x1
c000a112:	19 c0                	sbb    eax,eax
c000a114:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a11a:	c1 e6 0c             	shl    esi,0xc
c000a11d:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a122:	01 f3                	add    ebx,esi
c000a124:	09 ca                	or     edx,ecx
c000a126:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a12d:	83 c4 1c             	add    esp,0x1c
c000a130:	5b                   	pop    ebx
c000a131:	5e                   	pop    esi
c000a132:	5f                   	pop    edi
c000a133:	5d                   	pop    ebp
c000a134:	c3                   	ret    
c000a135:	83 ec 0c             	sub    esp,0xc
c000a138:	68 b0 ff 01 c0       	push   0xc001ffb0
c000a13d:	e8 0b 67 00 00       	call   c001084d <KePanic(char const*)>
c000a142:	83 c4 10             	add    esp,0x10
c000a145:	eb a3                	jmp    c000a0ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c000a147:	e8 8a dc ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a14c:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a152:	83 ec 0c             	sub    esp,0xc
c000a155:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a159:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a15d:	6a 01                	push   0x1
c000a15f:	e8 a1 f4 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000a164:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a16b:	6a 01                	push   0x1
c000a16d:	50                   	push   eax
c000a16e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a172:	50                   	push   eax
c000a173:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a177:	51                   	push   ecx
c000a178:	e8 81 fe ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a17d:	83 c4 1c             	add    esp,0x1c
c000a180:	68 00 10 00 00       	push   0x1000
c000a185:	6a 00                	push   0x0
c000a187:	50                   	push   eax
c000a188:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a18c:	e8 5f 63 ff ff       	call   c00004f0 <memset>
c000a191:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a195:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a198:	e8 7a f7 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c000a19d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a1a7:	81 ca 07 04 00 00    	or     edx,0x407
c000a1ad:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a1b0:	e9 4a ff ff ff       	jmp    c000a0ff <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a1b5:	90                   	nop

c000a1b6 <VAS::VAS(bool)>:
c000a1b6:	53                   	push   ebx
c000a1b7:	83 ec 28             	sub    esp,0x28
c000a1ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a1d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1dc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a1e0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a1e3:	e8 ee db ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a1e8:	89 c2                	mov    edx,eax
c000a1ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a1f1:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a1f7:	83 ec 0c             	sub    esp,0xc
c000a1fa:	6a 01                	push   0x1
c000a1fc:	e8 04 f4 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000a201:	83 c4 10             	add    esp,0x10
c000a204:	89 c2                	mov    edx,eax
c000a206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a20d:	83 ec 0c             	sub    esp,0xc
c000a210:	6a 03                	push   0x3
c000a212:	6a 01                	push   0x1
c000a214:	52                   	push   edx
c000a215:	50                   	push   eax
c000a216:	53                   	push   ebx
c000a217:	e8 e2 fd ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a21c:	83 c4 20             	add    esp,0x20
c000a21f:	89 c2                	mov    edx,eax
c000a221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a225:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a228:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a230:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a238:	7f 1d                	jg     c000a257 <VAS::VAS(bool)+0xa1>
c000a23a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a23e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a241:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a245:	c1 e2 02             	shl    edx,0x2
c000a248:	01 d0                	add    eax,edx
c000a24a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a250:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a255:	eb d9                	jmp    c000a230 <VAS::VAS(bool)+0x7a>
c000a257:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a25f:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a267:	7f 7e                	jg     c000a2e7 <VAS::VAS(bool)+0x131>
c000a269:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a26d:	2d 00 02 00 00       	sub    eax,0x200
c000a272:	c1 e0 0c             	shl    eax,0xc
c000a275:	83 c8 05             	or     eax,0x5
c000a278:	89 c2                	mov    edx,eax
c000a27a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a27f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a285:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a28b:	83 e0 10             	and    eax,0x10
c000a28e:	0f b6 c0             	movzx  eax,al
c000a291:	85 c0                	test   eax,eax
c000a293:	74 07                	je     c000a29c <VAS::VAS(bool)+0xe6>
c000a295:	b8 00 01 00 00       	mov    eax,0x100
c000a29a:	eb 05                	jmp    c000a2a1 <VAS::VAS(bool)+0xeb>
c000a29c:	b8 00 00 00 00       	mov    eax,0x0
c000a2a1:	09 d0                	or     eax,edx
c000a2a3:	89 c1                	mov    ecx,eax
c000a2a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2b0:	c1 e2 02             	shl    edx,0x2
c000a2b3:	01 d0                	add    eax,edx
c000a2b5:	89 ca                	mov    edx,ecx
c000a2b7:	89 10                	mov    DWORD PTR [eax],edx
c000a2b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2bd:	2d 40 03 00 00       	sub    eax,0x340
c000a2c2:	83 f8 7f             	cmp    eax,0x7f
c000a2c5:	77 16                	ja     c000a2dd <VAS::VAS(bool)+0x127>
c000a2c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2d2:	c1 e2 02             	shl    edx,0x2
c000a2d5:	01 d0                	add    eax,edx
c000a2d7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a2dd:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a2e2:	e9 78 ff ff ff       	jmp    c000a25f <VAS::VAS(bool)+0xa9>
c000a2e7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2f2:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2f8:	83 e0 10             	and    eax,0x10
c000a2fb:	0f b6 c0             	movzx  eax,al
c000a2fe:	85 c0                	test   eax,eax
c000a300:	74 07                	je     c000a309 <VAS::VAS(bool)+0x153>
c000a302:	b8 03 41 00 00       	mov    eax,0x4103
c000a307:	eb 05                	jmp    c000a30e <VAS::VAS(bool)+0x158>
c000a309:	b8 03 40 00 00       	mov    eax,0x4003
c000a30e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a312:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a315:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a31b:	89 02                	mov    DWORD PTR [edx],eax
c000a31d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a322:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a328:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a32e:	83 ec 08             	sub    esp,0x8
c000a331:	50                   	push   eax
c000a332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a336:	e8 a5 fc ff ff       	call   c0009fe0 <VAS::setCPUSpecific(unsigned long)>
c000a33b:	83 c4 10             	add    esp,0x10
c000a33e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a342:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a345:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a34a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a350:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a356:	83 e0 10             	and    eax,0x10
c000a359:	0f b6 c0             	movzx  eax,al
c000a35c:	85 c0                	test   eax,eax
c000a35e:	74 07                	je     c000a367 <VAS::VAS(bool)+0x1b1>
c000a360:	b8 00 01 00 00       	mov    eax,0x100
c000a365:	eb 05                	jmp    c000a36c <VAS::VAS(bool)+0x1b6>
c000a367:	b8 00 00 00 00       	mov    eax,0x0
c000a36c:	09 c2                	or     edx,eax
c000a36e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a372:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a375:	05 fc 0f 00 00       	add    eax,0xffc
c000a37a:	83 ca 03             	or     edx,0x3
c000a37d:	89 10                	mov    DWORD PTR [eax],edx
c000a37f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a384:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a38a:	83 ec 0c             	sub    esp,0xc
c000a38d:	50                   	push   eax
c000a38e:	e8 e5 1c 00 00       	call   c000c078 <Device::getName()>
c000a393:	83 c4 10             	add    esp,0x10
c000a396:	83 ec 08             	sub    esp,0x8
c000a399:	68 84 00 02 c0       	push   0xc0020084
c000a39e:	50                   	push   eax
c000a39f:	e8 dc 63 ff ff       	call   c0000780 <strcmp>
c000a3a4:	83 c4 10             	add    esp,0x10
c000a3a7:	85 c0                	test   eax,eax
c000a3a9:	0f 94 c0             	sete   al
c000a3ac:	0f b6 c0             	movzx  eax,al
c000a3af:	85 c0                	test   eax,eax
c000a3b1:	0f 84 8b 00 00 00    	je     c000a442 <VAS::VAS(bool)+0x28c>
c000a3b7:	fa                   	cli    
c000a3b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3bd:	83 c0 01             	add    eax,0x1
c000a3c0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3c5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3d0:	05 7c 09 00 00       	add    eax,0x97c
c000a3d5:	83 ec 0c             	sub    esp,0xc
c000a3d8:	50                   	push   eax
c000a3d9:	e8 e8 d1 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3de:	83 c4 10             	add    esp,0x10
c000a3e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3e6:	89 c3                	mov    ebx,eax
c000a3e8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3f3:	05 7c 09 00 00       	add    eax,0x97c
c000a3f8:	83 ec 0c             	sub    esp,0xc
c000a3fb:	50                   	push   eax
c000a3fc:	e8 c5 d1 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	83 ec 08             	sub    esp,0x8
c000a407:	50                   	push   eax
c000a408:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a40c:	e8 e7 f4 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a411:	83 c4 10             	add    esp,0x10
c000a414:	8b 00                	mov    eax,DWORD PTR [eax]
c000a416:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a41b:	6a 11                	push   0x11
c000a41d:	53                   	push   ebx
c000a41e:	50                   	push   eax
c000a41f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a423:	e8 bc f8 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a430:	83 e8 01             	sub    eax,0x1
c000a433:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a438:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a43d:	85 c0                	test   eax,eax
c000a43f:	75 01                	jne    c000a442 <VAS::VAS(bool)+0x28c>
c000a441:	fb                   	sti    
c000a442:	90                   	nop
c000a443:	83 c4 28             	add    esp,0x28
c000a446:	5b                   	pop    ebx
c000a447:	c3                   	ret    

c000a448 <VAS::evict(unsigned long)>:
c000a448:	55                   	push   ebp
c000a449:	57                   	push   edi
c000a44a:	56                   	push   esi
c000a44b:	53                   	push   ebx
c000a44c:	83 ec 1c             	sub    esp,0x1c
c000a44f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a453:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a45b:	e8 fa f2 ff ff       	call   c000975a <Virt::allocateSwapfilePage()>
c000a460:	89 c7                	mov    edi,eax
c000a462:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c000a467:	85 c0                	test   eax,eax
c000a469:	7e 40                	jle    c000a4ab <VAS::evict(unsigned long)+0x63>
c000a46b:	89 ee                	mov    esi,ebp
c000a46d:	31 db                	xor    ebx,ebx
c000a46f:	83 ec 0c             	sub    esp,0xc
c000a472:	57                   	push   edi
c000a473:	e8 cc f2 ff ff       	call   c0009744 <Virt::swapIDToSector(unsigned long)>
c000a478:	31 d2                	xor    edx,edx
c000a47a:	89 34 24             	mov    DWORD PTR [esp],esi
c000a47d:	81 c6 00 02 00 00    	add    esi,0x200
c000a483:	6a 01                	push   0x1
c000a485:	52                   	push   edx
c000a486:	01 d8                	add    eax,ebx
c000a488:	83 c3 01             	add    ebx,0x1
c000a48b:	50                   	push   eax
c000a48c:	0f be 05 98 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021f98
c000a493:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a49a:	50                   	push   eax
c000a49b:	e8 9a 2d 00 00       	call   c000d23a <LogicalDisk::write(unsigned long long, int, void*)>
c000a4a0:	83 c4 20             	add    esp,0x20
c000a4a3:	39 1d 8c 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f8c,ebx
c000a4a9:	7f c4                	jg     c000a46f <VAS::evict(unsigned long)+0x27>
c000a4ab:	c1 e7 0b             	shl    edi,0xb
c000a4ae:	83 ec 08             	sub    esp,0x8
c000a4b1:	55                   	push   ebp
c000a4b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4b6:	50                   	push   eax
c000a4b7:	e8 3c f4 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a4bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4be:	89 d3                	mov    ebx,edx
c000a4c0:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a4c6:	09 d7                	or     edi,edx
c000a4c8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a4ce:	89 38                	mov    DWORD PTR [eax],edi
c000a4d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a4d3:	8b 15 a8 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fa8
c000a4d9:	83 c2 01             	add    edx,0x1
c000a4dc:	89 15 a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,edx
c000a4e2:	e8 86 d8 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c000a4e7:	0f 20 d8             	mov    eax,cr3
c000a4ea:	0f 22 d8             	mov    cr3,eax
c000a4ed:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a4f3:	51                   	push   ecx
c000a4f4:	55                   	push   ebp
c000a4f5:	53                   	push   ebx
c000a4f6:	68 d4 ff 01 c0       	push   0xc001ffd4
c000a4fb:	e8 83 04 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000a500:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a505:	c7 44 24 50 92 00 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020092
c000a50d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a511:	8d 50 01             	lea    edx,[eax+0x1]
c000a514:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a51a:	83 c4 3c             	add    esp,0x3c
c000a51d:	5b                   	pop    ebx
c000a51e:	5e                   	pop    esi
c000a51f:	5f                   	pop    edi
c000a520:	5d                   	pop    ebp
c000a521:	e9 5d 04 00 00       	jmp    c000a983 <Dbg::kprintf(char const*, ...)>

c000a526 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a526:	55                   	push   ebp
c000a527:	57                   	push   edi
c000a528:	56                   	push   esi
c000a529:	53                   	push   ebx
c000a52a:	83 ec 1c             	sub    esp,0x1c
c000a52d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000a531:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a537:	77 54                	ja     c000a58d <VAS::tryLoadBackOffDisk(unsigned long)+0x67>
c000a539:	83 ec 08             	sub    esp,0x8
c000a53c:	53                   	push   ebx
c000a53d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a543:	68 b5 00 02 c0       	push   0xc00200b5
c000a548:	e8 36 04 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000a54d:	58                   	pop    eax
c000a54e:	5a                   	pop    edx
c000a54f:	53                   	push   ebx
c000a550:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a554:	51                   	push   ecx
c000a555:	e8 9e f3 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a55a:	83 c4 10             	add    esp,0x10
c000a55d:	85 c0                	test   eax,eax
c000a55f:	89 c6                	mov    esi,eax
c000a561:	0f 95 c0             	setne  al
c000a564:	85 db                	test   ebx,ebx
c000a566:	0f 95 c2             	setne  dl
c000a569:	21 d0                	and    eax,edx
c000a56b:	a8 01                	test   al,0x1
c000a56d:	89 c5                	mov    ebp,eax
c000a56f:	75 0a                	jne    c000a57b <VAS::tryLoadBackOffDisk(unsigned long)+0x55>
c000a571:	83 c4 1c             	add    esp,0x1c
c000a574:	89 e8                	mov    eax,ebp
c000a576:	5b                   	pop    ebx
c000a577:	5e                   	pop    esi
c000a578:	5f                   	pop    edi
c000a579:	5d                   	pop    ebp
c000a57a:	c3                   	ret    
c000a57b:	8b 06                	mov    eax,DWORD PTR [esi]
c000a57d:	a8 01                	test   al,0x1
c000a57f:	74 1e                	je     c000a59f <VAS::tryLoadBackOffDisk(unsigned long)+0x79>
c000a581:	83 c4 1c             	add    esp,0x1c
c000a584:	31 ed                	xor    ebp,ebp
c000a586:	5b                   	pop    ebx
c000a587:	89 e8                	mov    eax,ebp
c000a589:	5e                   	pop    esi
c000a58a:	5f                   	pop    edi
c000a58b:	5d                   	pop    ebp
c000a58c:	c3                   	ret    
c000a58d:	83 ec 0c             	sub    esp,0xc
c000a590:	68 a3 00 02 c0       	push   0xc00200a3
c000a595:	e8 b3 62 00 00       	call   c001084d <KePanic(char const*)>
c000a59a:	83 c4 10             	add    esp,0x10
c000a59d:	eb 9a                	jmp    c000a539 <VAS::tryLoadBackOffDisk(unsigned long)+0x13>
c000a59f:	c1 e8 0b             	shr    eax,0xb
c000a5a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5a6:	e8 2b d8 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a5ab:	8b 16                	mov    edx,DWORD PTR [esi]
c000a5ad:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a5b3:	09 c2                	or     edx,eax
c000a5b5:	81 ca 01 08 00 00    	or     edx,0x801
c000a5bb:	89 16                	mov    DWORD PTR [esi],edx
c000a5bd:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c000a5c2:	85 c0                	test   eax,eax
c000a5c4:	7e 44                	jle    c000a60a <VAS::tryLoadBackOffDisk(unsigned long)+0xe4>
c000a5c6:	89 df                	mov    edi,ebx
c000a5c8:	31 f6                	xor    esi,esi
c000a5ca:	83 ec 0c             	sub    esp,0xc
c000a5cd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a5d1:	51                   	push   ecx
c000a5d2:	e8 6d f1 ff ff       	call   c0009744 <Virt::swapIDToSector(unsigned long)>
c000a5d7:	31 d2                	xor    edx,edx
c000a5d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5dc:	81 c7 00 02 00 00    	add    edi,0x200
c000a5e2:	6a 01                	push   0x1
c000a5e4:	52                   	push   edx
c000a5e5:	01 f0                	add    eax,esi
c000a5e7:	83 c6 01             	add    esi,0x1
c000a5ea:	50                   	push   eax
c000a5eb:	0f be 05 98 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021f98
c000a5f2:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a5f9:	50                   	push   eax
c000a5fa:	e8 cf 2b 00 00       	call   c000d1ce <LogicalDisk::read(unsigned long long, int, void*)>
c000a5ff:	83 c4 20             	add    esp,0x20
c000a602:	39 35 8c 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f8c,esi
c000a608:	7f c0                	jg     c000a5ca <VAS::tryLoadBackOffDisk(unsigned long)+0xa4>
c000a60a:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a60f:	83 ec 04             	sub    esp,0x4
c000a612:	83 e8 01             	sub    eax,0x1
c000a615:	50                   	push   eax
c000a616:	53                   	push   ebx
c000a617:	68 c8 00 02 c0       	push   0xc00200c8
c000a61c:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a621:	e8 5d 03 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000a626:	58                   	pop    eax
c000a627:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a62b:	52                   	push   edx
c000a62c:	e8 f0 f0 ff ff       	call   c0009721 <Virt::freeSwapfilePage(unsigned long)>
c000a631:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a636:	83 c4 10             	add    esp,0x10
c000a639:	83 e8 01             	sub    eax,0x1
c000a63c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a641:	85 c0                	test   eax,eax
c000a643:	75 01                	jne    c000a646 <VAS::tryLoadBackOffDisk(unsigned long)+0x120>
c000a645:	fb                   	sti    
c000a646:	0f 20 d8             	mov    eax,cr3
c000a649:	0f 22 d8             	mov    cr3,eax
c000a64c:	e9 20 ff ff ff       	jmp    c000a571 <VAS::tryLoadBackOffDisk(unsigned long)+0x4b>
c000a651:	90                   	nop

c000a652 <VAS::scanForEviction()>:
c000a652:	57                   	push   edi
c000a653:	31 ff                	xor    edi,edi
c000a655:	56                   	push   esi
c000a656:	53                   	push   ebx
c000a657:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a65b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a65e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a664:	75 0e                	jne    c000a674 <VAS::scanForEviction()+0x22>
c000a666:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a669:	89 da                	mov    edx,ebx
c000a66b:	c1 ea 16             	shr    edx,0x16
c000a66e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a672:	74 50                	je     c000a6c4 <VAS::scanForEviction()+0x72>
c000a674:	53                   	push   ebx
c000a675:	56                   	push   esi
c000a676:	e8 7d f2 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a67b:	5a                   	pop    edx
c000a67c:	59                   	pop    ecx
c000a67d:	8b 10                	mov    edx,DWORD PTR [eax]
c000a67f:	89 d1                	mov    ecx,edx
c000a681:	81 e1 01 08 00 00    	and    ecx,0x801
c000a687:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a68d:	74 40                	je     c000a6cf <VAS::scanForEviction()+0x7d>
c000a68f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a695:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a69b:	76 2d                	jbe    c000a6ca <VAS::scanForEviction()+0x78>
c000a69d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a6a4:	83 c7 01             	add    edi,0x1
c000a6a7:	83 ff 03             	cmp    edi,0x3
c000a6aa:	74 32                	je     c000a6de <VAS::scanForEviction()+0x8c>
c000a6ac:	31 db                	xor    ebx,ebx
c000a6ae:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a6b4:	75 be                	jne    c000a674 <VAS::scanForEviction()+0x22>
c000a6b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a6b9:	89 da                	mov    edx,ebx
c000a6bb:	c1 ea 16             	shr    edx,0x16
c000a6be:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6c2:	75 b0                	jne    c000a674 <VAS::scanForEviction()+0x22>
c000a6c4:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6ca:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a6cd:	eb 8f                	jmp    c000a65e <VAS::scanForEviction()+0xc>
c000a6cf:	f6 c2 20             	test   dl,0x20
c000a6d2:	74 12                	je     c000a6e6 <VAS::scanForEviction()+0x94>
c000a6d4:	83 e2 df             	and    edx,0xffffffdf
c000a6d7:	89 10                	mov    DWORD PTR [eax],edx
c000a6d9:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6dc:	eb b1                	jmp    c000a68f <VAS::scanForEviction()+0x3d>
c000a6de:	5b                   	pop    ebx
c000a6df:	31 ff                	xor    edi,edi
c000a6e1:	89 f8                	mov    eax,edi
c000a6e3:	5e                   	pop    esi
c000a6e4:	5f                   	pop    edi
c000a6e5:	c3                   	ret    
c000a6e6:	83 ec 08             	sub    esp,0x8
c000a6e9:	89 d7                	mov    edi,edx
c000a6eb:	53                   	push   ebx
c000a6ec:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000a6f2:	68 dd 00 02 c0       	push   0xc00200dd
c000a6f7:	e8 87 02 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000a6fc:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a6ff:	58                   	pop    eax
c000a700:	5a                   	pop    edx
c000a701:	51                   	push   ecx
c000a702:	56                   	push   esi
c000a703:	e8 40 fd ff ff       	call   c000a448 <VAS::evict(unsigned long)>
c000a708:	5b                   	pop    ebx
c000a709:	58                   	pop    eax
c000a70a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a70d:	50                   	push   eax
c000a70e:	68 f1 00 02 c0       	push   0xc00200f1
c000a713:	e8 6b 02 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000a718:	58                   	pop    eax
c000a719:	5a                   	pop    edx
c000a71a:	57                   	push   edi
c000a71b:	68 04 01 02 c0       	push   0xc0020104
c000a720:	e8 5e 02 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000a725:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 f8                	mov    eax,edi
c000a72d:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a733:	89 4e 08             	mov    DWORD PTR [esi+0x8],ecx
c000a736:	5b                   	pop    ebx
c000a737:	5e                   	pop    esi
c000a738:	5f                   	pop    edi
c000a739:	c3                   	ret    

c000a73a <mapVASFirstTime>:
c000a73a:	55                   	push   ebp
c000a73b:	57                   	push   edi
c000a73c:	56                   	push   esi
c000a73d:	53                   	push   ebx
c000a73e:	83 ec 0c             	sub    esp,0xc
c000a741:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a746:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a749:	83 fa 01             	cmp    edx,0x1
c000a74c:	0f 84 cb 00 00 00    	je     c000a81d <mapVASFirstTime+0xe3>
c000a752:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a755:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a75a:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a75f:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a762:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a768:	c1 e5 15             	shl    ebp,0x15
c000a76b:	29 eb                	sub    ebx,ebp
c000a76d:	29 ef                	sub    edi,ebp
c000a76f:	e8 62 d6 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a774:	83 ec 0c             	sub    esp,0xc
c000a777:	68 03 04 00 00       	push   0x403
c000a77c:	6a 01                	push   0x1
c000a77e:	53                   	push   ebx
c000a77f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a785:	50                   	push   eax
c000a786:	56                   	push   esi
c000a787:	e8 72 f8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a78c:	83 c4 20             	add    esp,0x20
c000a78f:	39 fb                	cmp    ebx,edi
c000a791:	75 dc                	jne    c000a76f <mapVASFirstTime+0x35>
c000a793:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a798:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a79d:	29 eb                	sub    ebx,ebp
c000a79f:	29 ef                	sub    edi,ebp
c000a7a1:	e8 30 d6 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a7a6:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a7aa:	83 fa 01             	cmp    edx,0x1
c000a7ad:	19 d2                	sbb    edx,edx
c000a7af:	83 ec 0c             	sub    esp,0xc
c000a7b2:	83 e2 04             	and    edx,0x4
c000a7b5:	81 c2 03 04 00 00    	add    edx,0x403
c000a7bb:	52                   	push   edx
c000a7bc:	6a 01                	push   0x1
c000a7be:	53                   	push   ebx
c000a7bf:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7c5:	50                   	push   eax
c000a7c6:	56                   	push   esi
c000a7c7:	e8 32 f8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7cc:	83 c4 20             	add    esp,0x20
c000a7cf:	39 df                	cmp    edi,ebx
c000a7d1:	75 ce                	jne    c000a7a1 <mapVASFirstTime+0x67>
c000a7d3:	83 ec 0c             	sub    esp,0xc
c000a7d6:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a7db:	6a 04                	push   0x4
c000a7dd:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a7e3:	6a ff                	push   0xffffffff
c000a7e5:	c1 eb 0c             	shr    ebx,0xc
c000a7e8:	53                   	push   ebx
c000a7e9:	68 00 30 02 c0       	push   0xc0023000
c000a7ee:	56                   	push   esi
c000a7ef:	e8 74 f2 ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7f4:	83 c4 14             	add    esp,0x14
c000a7f7:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a7fc:	6a 04                	push   0x4
c000a7fe:	6a ff                	push   0xffffffff
c000a800:	53                   	push   ebx
c000a801:	68 00 30 02 c0       	push   0xc0023000
c000a806:	50                   	push   eax
c000a807:	e8 5c f2 ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c000a80c:	0f 20 d8             	mov    eax,cr3
c000a80f:	0f 22 d8             	mov    cr3,eax
c000a812:	83 c4 20             	add    esp,0x20
c000a815:	83 c4 0c             	add    esp,0xc
c000a818:	5b                   	pop    ebx
c000a819:	5e                   	pop    esi
c000a81a:	5f                   	pop    edi
c000a81b:	5d                   	pop    ebp
c000a81c:	c3                   	ret    
c000a81d:	83 ec 0c             	sub    esp,0xc
c000a820:	68 11 01 02 c0       	push   0xc0020111
c000a825:	e8 59 01 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000a82a:	83 c4 10             	add    esp,0x10
c000a82d:	83 c4 0c             	add    esp,0xc
c000a830:	5b                   	pop    ebx
c000a831:	5e                   	pop    esi
c000a832:	5f                   	pop    edi
c000a833:	5d                   	pop    ebp
c000a834:	c3                   	ret    

c000a835 <__cxa_atexit>:
c000a835:	31 c0                	xor    eax,eax
c000a837:	c3                   	ret    

c000a838 <__cxa_finalize>:
c000a838:	c3                   	ret    

c000a839 <__stack_chk_fail>:
c000a839:	55                   	push   ebp
c000a83a:	89 e5                	mov    ebp,esp
c000a83c:	83 ec 10             	sub    esp,0x10
c000a83f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a842:	68 2a 01 02 c0       	push   0xc002012a
c000a847:	e8 37 01 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000a84c:	58                   	pop    eax
c000a84d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a850:	5a                   	pop    edx
c000a851:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a854:	68 2a 01 02 c0       	push   0xc002012a
c000a859:	e8 25 01 00 00       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000a85e:	c7 04 24 32 01 02 c0 	mov    DWORD PTR [esp],0xc0020132
c000a865:	e8 e3 5f 00 00       	call   c001084d <KePanic(char const*)>
c000a86a:	83 c4 10             	add    esp,0x10
c000a86d:	c9                   	leave  
c000a86e:	c3                   	ret    

c000a86f <__cxa_pure_virtual>:
c000a86f:	83 ec 18             	sub    esp,0x18
c000a872:	68 4a 01 02 c0       	push   0xc002014a
c000a877:	e8 d1 5f 00 00       	call   c001084d <KePanic(char const*)>
c000a87c:	83 c4 1c             	add    esp,0x1c
c000a87f:	c3                   	ret    

c000a880 <operator new[](unsigned long)>:
c000a880:	e9 46 d2 ff ff       	jmp    c0007acb <malloc>

c000a885 <operator delete(void*, unsigned long)>:
c000a885:	e9 61 d2 ff ff       	jmp    c0007aeb <rfree>

c000a88a <operator delete[](void*)>:
c000a88a:	e9 5c d2 ff ff       	jmp    c0007aeb <rfree>

c000a88f <operator delete[](void*, unsigned long)>:
c000a88f:	e9 57 d2 ff ff       	jmp    c0007aeb <rfree>

c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a894:	55                   	push   ebp
c000a895:	57                   	push   edi
c000a896:	56                   	push   esi
c000a897:	53                   	push   ebx
c000a898:	83 ec 20             	sub    esp,0x20
c000a89b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a89f:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a8a7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a8ab:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a8b3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a8b7:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a8bf:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a8c7:	89 f7                	mov    edi,esi
c000a8c9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a8ce:	89 eb                	mov    ebx,ebp
c000a8d0:	eb 02                	jmp    c000a8d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a8d2:	89 c7                	mov    edi,eax
c000a8d4:	31 d2                	xor    edx,edx
c000a8d6:	89 f8                	mov    eax,edi
c000a8d8:	f7 f1                	div    ecx
c000a8da:	83 c3 01             	add    ebx,0x1
c000a8dd:	39 cf                	cmp    edi,ecx
c000a8df:	73 f1                	jae    c000a8d2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a8e1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a8e4:	eb 02                	jmp    c000a8e8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a8e6:	89 c6                	mov    esi,eax
c000a8e8:	31 d2                	xor    edx,edx
c000a8ea:	89 f0                	mov    eax,esi
c000a8ec:	f7 f1                	div    ecx
c000a8ee:	83 eb 01             	sub    ebx,0x1
c000a8f1:	39 ce                	cmp    esi,ecx
c000a8f3:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8f7:	88 13                	mov    BYTE PTR [ebx],dl
c000a8f9:	73 eb                	jae    c000a8e6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a8fb:	83 c4 20             	add    esp,0x20
c000a8fe:	89 e8                	mov    eax,ebp
c000a900:	5b                   	pop    ebx
c000a901:	5e                   	pop    esi
c000a902:	5f                   	pop    edi
c000a903:	5d                   	pop    ebp
c000a904:	c3                   	ret    

c000a905 <Dbg::logc(char)>:
c000a905:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a90c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a910:	75 12                	jne    c000a924 <Dbg::logc(char)+0x1f>
c000a912:	ba fd 03 00 00       	mov    edx,0x3fd
c000a917:	ec                   	in     al,dx
c000a918:	a8 20                	test   al,0x20
c000a91a:	74 fb                	je     c000a917 <Dbg::logc(char)+0x12>
c000a91c:	ba f8 03 00 00       	mov    edx,0x3f8
c000a921:	88 c8                	mov    al,cl
c000a923:	ee                   	out    dx,al
c000a924:	c3                   	ret    

c000a925 <Dbg::logs(char*)>:
c000a925:	53                   	push   ebx
c000a926:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a92a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a92d:	85 c0                	test   eax,eax
c000a92f:	74 11                	je     c000a942 <Dbg::logs(char*)+0x1d>
c000a931:	50                   	push   eax
c000a932:	83 c3 01             	add    ebx,0x1
c000a935:	e8 cb ff ff ff       	call   c000a905 <Dbg::logc(char)>
c000a93a:	58                   	pop    eax
c000a93b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a93e:	85 c0                	test   eax,eax
c000a940:	75 ef                	jne    c000a931 <Dbg::logs(char*)+0xc>
c000a942:	5b                   	pop    ebx
c000a943:	c3                   	ret    

c000a944 <Dbg::logWriteInt(unsigned int)>:
c000a944:	83 ec 10             	sub    esp,0x10
c000a947:	6a 0a                	push   0xa
c000a949:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a94d:	50                   	push   eax
c000a94e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a952:	50                   	push   eax
c000a953:	e8 3c ff ff ff       	call   c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a958:	50                   	push   eax
c000a959:	e8 c7 ff ff ff       	call   c000a925 <Dbg::logs(char*)>
c000a95e:	83 c4 20             	add    esp,0x20
c000a961:	c3                   	ret    

c000a962 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a962:	83 ec 10             	sub    esp,0x10
c000a965:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a969:	50                   	push   eax
c000a96a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a96e:	50                   	push   eax
c000a96f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a973:	52                   	push   edx
c000a974:	e8 1b ff ff ff       	call   c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a979:	50                   	push   eax
c000a97a:	e8 a6 ff ff ff       	call   c000a925 <Dbg::logs(char*)>
c000a97f:	83 c4 20             	add    esp,0x20
c000a982:	c3                   	ret    

c000a983 <Dbg::kprintf(char const*, ...)>:
c000a983:	55                   	push   ebp
c000a984:	57                   	push   edi
c000a985:	56                   	push   esi
c000a986:	53                   	push   ebx
c000a987:	83 ec 0c             	sub    esp,0xc
c000a98a:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a991:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a995:	74 08                	je     c000a99f <Dbg::kprintf(char const*, ...)+0x1c>
c000a997:	83 c4 0c             	add    esp,0xc
c000a99a:	5b                   	pop    ebx
c000a99b:	5e                   	pop    esi
c000a99c:	5f                   	pop    edi
c000a99d:	5d                   	pop    ebp
c000a99e:	c3                   	ret    
c000a99f:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a9a3:	31 ff                	xor    edi,edi
c000a9a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9a9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9ac:	85 c0                	test   eax,eax
c000a9ae:	74 e7                	je     c000a997 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b0:	8d 77 01             	lea    esi,[edi+0x1]
c000a9b3:	83 f8 25             	cmp    eax,0x25
c000a9b6:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9b9:	75 47                	jne    c000aa02 <Dbg::kprintf(char const*, ...)+0x7f>
c000a9bb:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9be:	83 c7 02             	add    edi,0x2
c000a9c1:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a9c4:	83 e8 25             	sub    eax,0x25
c000a9c7:	0f b6 c0             	movzx  eax,al
c000a9ca:	83 f8 53             	cmp    eax,0x53
c000a9cd:	0f 87 ce 00 00 00    	ja     c000aaa1 <Dbg::kprintf(char const*, ...)+0x11e>
c000a9d3:	ff 24 85 60 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfea0]
c000a9da:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9de:	89 c8                	mov    eax,ecx
c000a9e0:	83 c1 04             	add    ecx,0x4
c000a9e3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e7:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9e9:	55                   	push   ebp
c000a9ea:	e8 55 ff ff ff       	call   c000a944 <Dbg::logWriteInt(unsigned int)>
c000a9ef:	58                   	pop    eax
c000a9f0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9f3:	85 c0                	test   eax,eax
c000a9f5:	74 a0                	je     c000a997 <Dbg::kprintf(char const*, ...)+0x14>
c000a9f7:	8d 77 01             	lea    esi,[edi+0x1]
c000a9fa:	83 f8 25             	cmp    eax,0x25
c000a9fd:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000aa00:	74 b9                	je     c000a9bb <Dbg::kprintf(char const*, ...)+0x38>
c000aa02:	50                   	push   eax
c000aa03:	89 f7                	mov    edi,esi
c000aa05:	e8 fb fe ff ff       	call   c000a905 <Dbg::logc(char)>
c000aa0a:	89 ee                	mov    esi,ebp
c000aa0c:	58                   	pop    eax
c000aa0d:	eb e1                	jmp    c000a9f0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa13:	89 c8                	mov    eax,ecx
c000aa15:	83 c1 04             	add    ecx,0x4
c000aa18:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa1e:	50                   	push   eax
c000aa1f:	e8 01 ff ff ff       	call   c000a925 <Dbg::logs(char*)>
c000aa24:	58                   	pop    eax
c000aa25:	eb c9                	jmp    c000a9f0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa27:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa2b:	89 d0                	mov    eax,edx
c000aa2d:	83 c2 04             	add    edx,0x4
c000aa30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa34:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa36:	50                   	push   eax
c000aa37:	e8 08 ff ff ff       	call   c000a944 <Dbg::logWriteInt(unsigned int)>
c000aa3c:	58                   	pop    eax
c000aa3d:	eb b1                	jmp    c000a9f0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa3f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa43:	89 d0                	mov    eax,edx
c000aa45:	83 c2 04             	add    edx,0x4
c000aa48:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa4c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa4f:	50                   	push   eax
c000aa50:	e8 b0 fe ff ff       	call   c000a905 <Dbg::logc(char)>
c000aa55:	58                   	pop    eax
c000aa56:	eb 98                	jmp    c000a9f0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa58:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa5c:	89 c8                	mov    eax,ecx
c000aa5e:	83 c1 04             	add    ecx,0x4
c000aa61:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa65:	6a 10                	push   0x10
c000aa67:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa69:	51                   	push   ecx
c000aa6a:	e8 f3 fe ff ff       	call   c000a962 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa6f:	5d                   	pop    ebp
c000aa70:	58                   	pop    eax
c000aa71:	e9 7a ff ff ff       	jmp    c000a9f0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa76:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa7a:	89 d0                	mov    eax,edx
c000aa7c:	83 c2 08             	add    edx,0x8
c000aa7f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa83:	6a 10                	push   0x10
c000aa85:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa87:	50                   	push   eax
c000aa88:	e8 d5 fe ff ff       	call   c000a962 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa8d:	58                   	pop    eax
c000aa8e:	5a                   	pop    edx
c000aa8f:	e9 5c ff ff ff       	jmp    c000a9f0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa94:	6a 25                	push   0x25
c000aa96:	e8 6a fe ff ff       	call   c000a905 <Dbg::logc(char)>
c000aa9b:	5a                   	pop    edx
c000aa9c:	e9 4f ff ff ff       	jmp    c000a9f0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aaa1:	6a 25                	push   0x25
c000aaa3:	e8 5d fe ff ff       	call   c000a905 <Dbg::logc(char)>
c000aaa8:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aaac:	50                   	push   eax
c000aaad:	e8 53 fe ff ff       	call   c000a905 <Dbg::logc(char)>
c000aab2:	5a                   	pop    edx
c000aab3:	59                   	pop    ecx
c000aab4:	e9 37 ff ff ff       	jmp    c000a9f0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aab9:	90                   	nop

c000aaba <File::read(unsigned long long, void*, int*)>:
c000aaba:	53                   	push   ebx
c000aabb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aabf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aac3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aaca:	83 f8 19             	cmp    eax,0x19
c000aacd:	77 35                	ja     c000ab04 <File::read(unsigned long long, void*, int*)+0x4a>
c000aacf:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aad6:	85 c0                	test   eax,eax
c000aad8:	74 2a                	je     c000ab04 <File::read(unsigned long long, void*, int*)+0x4a>
c000aada:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aae0:	85 c0                	test   eax,eax
c000aae2:	74 20                	je     c000ab04 <File::read(unsigned long long, void*, int*)+0x4a>
c000aae4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aae8:	74 21                	je     c000ab0b <File::read(unsigned long long, void*, int*)+0x51>
c000aaea:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aaec:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aaf0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aaf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aafa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aafe:	5b                   	pop    ebx
c000aaff:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ab02:	ff e0                	jmp    eax
c000ab04:	b8 0b 00 00 00       	mov    eax,0xb
c000ab09:	eb 05                	jmp    c000ab10 <File::read(unsigned long long, void*, int*)+0x56>
c000ab0b:	b8 05 00 00 00       	mov    eax,0x5
c000ab10:	5b                   	pop    ebx
c000ab11:	c3                   	ret    

c000ab12 <File::write(unsigned long long, void*, int*)>:
c000ab12:	53                   	push   ebx
c000ab13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab1b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab22:	83 f8 19             	cmp    eax,0x19
c000ab25:	77 35                	ja     c000ab5c <File::write(unsigned long long, void*, int*)+0x4a>
c000ab27:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab2e:	85 c0                	test   eax,eax
c000ab30:	74 2a                	je     c000ab5c <File::write(unsigned long long, void*, int*)+0x4a>
c000ab32:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab38:	85 c0                	test   eax,eax
c000ab3a:	74 20                	je     c000ab5c <File::write(unsigned long long, void*, int*)+0x4a>
c000ab3c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab40:	74 21                	je     c000ab63 <File::write(unsigned long long, void*, int*)+0x51>
c000ab42:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab44:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab48:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab56:	5b                   	pop    ebx
c000ab57:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab5a:	ff e0                	jmp    eax
c000ab5c:	b8 0b 00 00 00       	mov    eax,0xb
c000ab61:	eb 05                	jmp    c000ab68 <File::write(unsigned long long, void*, int*)+0x56>
c000ab63:	b8 05 00 00 00       	mov    eax,0x5
c000ab68:	5b                   	pop    ebx
c000ab69:	c3                   	ret    

c000ab6a <Directory::read(unsigned long long, void*, int*)>:
c000ab6a:	53                   	push   ebx
c000ab6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab7a:	83 f8 19             	cmp    eax,0x19
c000ab7d:	77 35                	ja     c000abb4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab7f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab86:	85 c0                	test   eax,eax
c000ab88:	74 2a                	je     c000abb4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab90:	85 c0                	test   eax,eax
c000ab92:	74 20                	je     c000abb4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab98:	74 21                	je     c000abbb <Directory::read(unsigned long long, void*, int*)+0x51>
c000ab9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abae:	5b                   	pop    ebx
c000abaf:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000abb2:	ff e0                	jmp    eax
c000abb4:	b8 0b 00 00 00       	mov    eax,0xb
c000abb9:	eb 05                	jmp    c000abc0 <Directory::read(unsigned long long, void*, int*)+0x56>
c000abbb:	b8 05 00 00 00       	mov    eax,0x5
c000abc0:	5b                   	pop    ebx
c000abc1:	c3                   	ret    

c000abc2 <Directory::write(unsigned long long, void*, int*)>:
c000abc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abc6:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000abcd:	b8 0b 00 00 00       	mov    eax,0xb
c000abd2:	83 fa 19             	cmp    edx,0x19
c000abd5:	77 18                	ja     c000abef <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abd7:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000abde:	85 d2                	test   edx,edx
c000abe0:	74 0d                	je     c000abef <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abe2:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000abe9:	19 c0                	sbb    eax,eax
c000abeb:	83 e0 0a             	and    eax,0xa
c000abee:	40                   	inc    eax
c000abef:	c3                   	ret    

c000abf0 <File::isAtty()>:
c000abf0:	31 c0                	xor    eax,eax
c000abf2:	c3                   	ret    
c000abf3:	90                   	nop

c000abf4 <Directory::isAtty()>:
c000abf4:	31 c0                	xor    eax,eax
c000abf6:	c3                   	ret    
c000abf7:	90                   	nop

c000abf8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000abf8:	b8 0a 00 00 00       	mov    eax,0xa
c000abfd:	c3                   	ret    

c000abfe <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000abfe:	b8 0a 00 00 00       	mov    eax,0xa
c000ac03:	c3                   	ret    

c000ac04 <Filesystem::allocateSwapfile(char const*, int)>:
c000ac04:	31 c0                	xor    eax,eax
c000ac06:	31 d2                	xor    edx,edx
c000ac08:	c3                   	ret    
c000ac09:	90                   	nop

c000ac0a <File::~File()>:
c000ac0a:	83 ec 0c             	sub    esp,0xc
c000ac0d:	ba 20 03 02 c0       	mov    edx,0xc0020320
c000ac12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac16:	89 10                	mov    DWORD PTR [eax],edx
c000ac18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	50                   	push   eax
c000ac20:	e8 77 e7 ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000ac25:	83 c4 10             	add    esp,0x10
c000ac28:	90                   	nop
c000ac29:	83 c4 0c             	add    esp,0xc
c000ac2c:	c3                   	ret    
c000ac2d:	90                   	nop

c000ac2e <File::~File()>:
c000ac2e:	83 ec 0c             	sub    esp,0xc
c000ac31:	83 ec 0c             	sub    esp,0xc
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	e8 cd ff ff ff       	call   c000ac0a <File::~File()>
c000ac3d:	83 c4 10             	add    esp,0x10
c000ac40:	83 ec 08             	sub    esp,0x8
c000ac43:	68 14 01 00 00       	push   0x114
c000ac48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac4c:	e8 34 fc ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000ac51:	83 c4 10             	add    esp,0x10
c000ac54:	83 c4 0c             	add    esp,0xc
c000ac57:	c3                   	ret    

c000ac58 <Directory::~Directory()>:
c000ac58:	83 ec 0c             	sub    esp,0xc
c000ac5b:	ba 3c 03 02 c0       	mov    edx,0xc002033c
c000ac60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac64:	89 10                	mov    DWORD PTR [eax],edx
c000ac66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac6a:	83 ec 0c             	sub    esp,0xc
c000ac6d:	50                   	push   eax
c000ac6e:	e8 29 e7 ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000ac73:	83 c4 10             	add    esp,0x10
c000ac76:	90                   	nop
c000ac77:	83 c4 0c             	add    esp,0xc
c000ac7a:	c3                   	ret    
c000ac7b:	90                   	nop

c000ac7c <Directory::~Directory()>:
c000ac7c:	83 ec 0c             	sub    esp,0xc
c000ac7f:	83 ec 0c             	sub    esp,0xc
c000ac82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac86:	e8 cd ff ff ff       	call   c000ac58 <Directory::~Directory()>
c000ac8b:	83 c4 10             	add    esp,0x10
c000ac8e:	83 ec 08             	sub    esp,0x8
c000ac91:	68 14 01 00 00       	push   0x114
c000ac96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac9a:	e8 e6 fb ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000ac9f:	83 c4 10             	add    esp,0x10
c000aca2:	83 c4 0c             	add    esp,0xc
c000aca5:	c3                   	ret    

c000aca6 <Filesystem::Filesystem()>:
c000aca6:	ba b8 02 02 c0       	mov    edx,0xc00202b8
c000acab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acaf:	89 10                	mov    DWORD PTR [eax],edx
c000acb1:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000acb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acbb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000acbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acc2:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000acc7:	90                   	nop
c000acc8:	c3                   	ret    
c000acc9:	90                   	nop

c000acca <Filesystem::~Filesystem()>:
c000acca:	ba b8 02 02 c0       	mov    edx,0xc00202b8
c000accf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd3:	89 10                	mov    DWORD PTR [eax],edx
c000acd5:	90                   	nop
c000acd6:	c3                   	ret    
c000acd7:	90                   	nop

c000acd8 <Filesystem::~Filesystem()>:
c000acd8:	83 ec 0c             	sub    esp,0xc
c000acdb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acdf:	e8 e6 ff ff ff       	call   c000acca <Filesystem::~Filesystem()>
c000ace4:	83 c4 04             	add    esp,0x4
c000ace7:	83 ec 08             	sub    esp,0x8
c000acea:	6a 08                	push   0x8
c000acec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acf0:	e8 90 fb ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000acf5:	83 c4 10             	add    esp,0x10
c000acf8:	83 c4 0c             	add    esp,0xc
c000acfb:	c3                   	ret    

c000acfc <Fs::getcwd(Process*, char*, int)>:
c000acfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad00:	31 c0                	xor    eax,eax
c000ad02:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ad06:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ad09:	7d 15                	jge    c000ad20 <Fs::getcwd(Process*, char*, int)+0x24>
c000ad0b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ad0f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ad16:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ad19:	84 c9                	test   cl,cl
c000ad1b:	74 06                	je     c000ad23 <Fs::getcwd(Process*, char*, int)+0x27>
c000ad1d:	40                   	inc    eax
c000ad1e:	eb e2                	jmp    c000ad02 <Fs::getcwd(Process*, char*, int)+0x6>
c000ad20:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ad23:	31 c0                	xor    eax,eax
c000ad25:	c3                   	ret    

c000ad26 <Fs::initVFS()>:
c000ad26:	83 ec 18             	sub    esp,0x18
c000ad29:	6a 08                	push   0x8
c000ad2b:	e8 9b cd ff ff       	call   c0007acb <malloc>
c000ad30:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad33:	e8 a0 dd 00 00       	call   c0018ad8 <FAT::FAT()>
c000ad38:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ad3f:	e8 87 cd ff ff       	call   c0007acb <malloc>
c000ad44:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad47:	e8 b4 ec 00 00       	call   c0019a00 <ISO9660::ISO9660()>
c000ad4c:	83 c4 1c             	add    esp,0x1c
c000ad4f:	c3                   	ret    

c000ad50 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	81 ec 20 04 00 00    	sub    esp,0x420
c000ad5a:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000ad61:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000ad68:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000ad6f:	68 00 04 00 00       	push   0x400
c000ad74:	6a 00                	push   0x0
c000ad76:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ad7a:	56                   	push   esi
c000ad7b:	e8 70 57 ff ff       	call   c00004f0 <memset>
c000ad80:	83 c4 10             	add    esp,0x10
c000ad83:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ad87:	75 0b                	jne    c000ad94 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ad89:	50                   	push   eax
c000ad8a:	50                   	push   eax
c000ad8b:	57                   	push   edi
c000ad8c:	56                   	push   esi
c000ad8d:	e8 be 58 ff ff       	call   c0000650 <strcpy>
c000ad92:	eb 45                	jmp    c000add9 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000ad94:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad97:	83 f8 2f             	cmp    eax,0x2f
c000ad9a:	74 05                	je     c000ada1 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000ad9c:	83 f8 5c             	cmp    eax,0x5c
c000ad9f:	75 19                	jne    c000adba <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000ada1:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ada4:	3c 60                	cmp    al,0x60
c000ada6:	7e 03                	jle    c000adab <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000ada8:	83 e8 20             	sub    eax,0x20
c000adab:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000adaf:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000adb6:	50                   	push   eax
c000adb7:	50                   	push   eax
c000adb8:	eb 18                	jmp    c000add2 <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000adba:	50                   	push   eax
c000adbb:	50                   	push   eax
c000adbc:	55                   	push   ebp
c000adbd:	56                   	push   esi
c000adbe:	e8 8d 58 ff ff       	call   c0000650 <strcpy>
c000adc3:	5a                   	pop    edx
c000adc4:	59                   	pop    ecx
c000adc5:	68 33 12 02 c0       	push   0xc0021233
c000adca:	56                   	push   esi
c000adcb:	e8 a0 5a ff ff       	call   c0000870 <strcat>
c000add0:	5d                   	pop    ebp
c000add1:	58                   	pop    eax
c000add2:	57                   	push   edi
c000add3:	56                   	push   esi
c000add4:	e8 97 5a ff ff       	call   c0000870 <strcat>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000ade0:	3c 60                	cmp    al,0x60
c000ade2:	7e 03                	jle    c000ade7 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000ade4:	83 e8 20             	sub    eax,0x20
c000ade7:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000adeb:	88 03                	mov    BYTE PTR [ebx],al
c000aded:	b8 03 00 00 00       	mov    eax,0x3
c000adf2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000adf9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000adff:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ae03:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000ae0b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ae0f:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000ae14:	89 fa                	mov    edx,edi
c000ae16:	0f be ea             	movsx  ebp,dl
c000ae19:	85 ed                	test   ebp,ebp
c000ae1b:	0f 84 af 00 00 00    	je     c000aed0 <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000ae21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae25:	42                   	inc    edx
c000ae26:	83 fd 2f             	cmp    ebp,0x2f
c000ae29:	74 05                	je     c000ae30 <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000ae2b:	83 fd 5c             	cmp    ebp,0x5c
c000ae2e:	75 14                	jne    c000ae44 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000ae30:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae35:	89 c5                	mov    ebp,eax
c000ae37:	74 0b                	je     c000ae44 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000ae39:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae3d:	40                   	inc    eax
c000ae3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae42:	eb c7                	jmp    c000ae0b <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000ae44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae48:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000ae4d:	89 f9                	mov    ecx,edi
c000ae4f:	0f be e9             	movsx  ebp,cl
c000ae52:	75 63                	jne    c000aeb7 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae54:	83 fd 2e             	cmp    ebp,0x2e
c000ae57:	75 5e                	jne    c000aeb7 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae5d:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000ae62:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000ae67:	74 18                	je     c000ae81 <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000ae69:	83 fd 2e             	cmp    ebp,0x2e
c000ae6c:	74 57                	je     c000aec5 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ae6e:	89 ca                	mov    edx,ecx
c000ae70:	42                   	inc    edx
c000ae71:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ae75:	83 f9 2f             	cmp    ecx,0x2f
c000ae78:	74 f6                	je     c000ae70 <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ae7a:	83 f9 5c             	cmp    ecx,0x5c
c000ae7d:	74 f1                	je     c000ae70 <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ae7f:	eb bd                	jmp    c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae81:	83 fd 2e             	cmp    ebp,0x2e
c000ae84:	74 3f                	je     c000aec5 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ae86:	83 f8 03             	cmp    eax,0x3
c000ae89:	74 b3                	je     c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae8b:	42                   	inc    edx
c000ae8c:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ae90:	83 f9 2f             	cmp    ecx,0x2f
c000ae93:	74 f6                	je     c000ae8b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ae95:	83 f9 5c             	cmp    ecx,0x5c
c000ae98:	74 f1                	je     c000ae8b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ae9a:	48                   	dec    eax
c000ae9b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae9f:	75 06                	jne    c000aea7 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000aea1:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aea5:	eb f3                	jmp    c000ae9a <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000aea7:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aeab:	74 07                	je     c000aeb4 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000aead:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aeb1:	48                   	dec    eax
c000aeb2:	eb f3                	jmp    c000aea7 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000aeb4:	40                   	inc    eax
c000aeb5:	eb 87                	jmp    c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aeb7:	83 fd 2f             	cmp    ebp,0x2f
c000aeba:	74 82                	je     c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aebc:	83 fd 5c             	cmp    ebp,0x5c
c000aebf:	0f 84 79 ff ff ff    	je     c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aec5:	89 f9                	mov    ecx,edi
c000aec7:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000aeca:	40                   	inc    eax
c000aecb:	e9 6e ff ff ff       	jmp    c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aed0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aed4:	83 ec 0c             	sub    esp,0xc
c000aed7:	53                   	push   ebx
c000aed8:	e8 a3 56 ff ff       	call   c0000580 <strlen>
c000aedd:	83 c4 10             	add    esp,0x10
c000aee0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aee5:	75 26                	jne    c000af0d <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000aee7:	83 ec 0c             	sub    esp,0xc
c000aeea:	53                   	push   ebx
c000aeeb:	e8 90 56 ff ff       	call   c0000580 <strlen>
c000aef0:	83 c4 10             	add    esp,0x10
c000aef3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aef8:	74 26                	je     c000af20 <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000aefa:	83 ec 0c             	sub    esp,0xc
c000aefd:	53                   	push   ebx
c000aefe:	e8 7d 56 ff ff       	call   c0000580 <strlen>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000af0b:	eb c7                	jmp    c000aed4 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000af0d:	83 ec 0c             	sub    esp,0xc
c000af10:	53                   	push   ebx
c000af11:	e8 6a 56 ff ff       	call   c0000580 <strlen>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af1e:	74 c7                	je     c000aee7 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000af20:	81 c4 1c 04 00 00    	add    esp,0x41c
c000af26:	5b                   	pop    ebx
c000af27:	5e                   	pop    esi
c000af28:	5f                   	pop    edi
c000af29:	5d                   	pop    ebp
c000af2a:	c3                   	ret    
c000af2b:	90                   	nop

c000af2c <File::File(char const*, Process*)>:
c000af2c:	83 ec 0c             	sub    esp,0xc
c000af2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af33:	83 ec 08             	sub    esp,0x8
c000af36:	6a 00                	push   0x0
c000af38:	50                   	push   eax
c000af39:	e8 78 e2 ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000af3e:	83 c4 10             	add    esp,0x10
c000af41:	ba 20 03 02 c0       	mov    edx,0xc0020320
c000af46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4a:	89 10                	mov    DWORD PTR [eax],edx
c000af4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af50:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5a:	83 c0 0d             	add    eax,0xd
c000af5d:	83 ec 04             	sub    esp,0x4
c000af60:	52                   	push   edx
c000af61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af65:	50                   	push   eax
c000af66:	e8 e5 fd ff ff       	call   c000ad50 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af6b:	83 c4 10             	add    esp,0x10
c000af6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af72:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af75:	83 e8 41             	sub    eax,0x41
c000af78:	88 c2                	mov    dl,al
c000af7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af88:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af90:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af96:	0f b6 c0             	movzx  eax,al
c000af99:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afa0:	85 c0                	test   eax,eax
c000afa2:	74 3e                	je     c000afe2 <File::File(char const*, Process*)+0xb6>
c000afa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afae:	0f b6 c0             	movzx  eax,al
c000afb1:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afb8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000afbe:	85 c0                	test   eax,eax
c000afc0:	75 20                	jne    c000afe2 <File::File(char const*, Process*)+0xb6>
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afcc:	0f b6 c0             	movzx  eax,al
c000afcf:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afd6:	83 ec 0c             	sub    esp,0xc
c000afd9:	50                   	push   eax
c000afda:	e8 2d 21 00 00       	call   c000d10c <LogicalDisk::mount()>
c000afdf:	83 c4 10             	add    esp,0x10
c000afe2:	90                   	nop
c000afe3:	83 c4 0c             	add    esp,0xc
c000afe6:	c3                   	ret    
c000afe7:	90                   	nop

c000afe8 <File::open(FileOpenMode)>:
c000afe8:	53                   	push   ebx
c000afe9:	b8 0b 00 00 00       	mov    eax,0xb
c000afee:	83 ec 08             	sub    esp,0x8
c000aff1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aff5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000affc:	83 fa 19             	cmp    edx,0x19
c000afff:	77 40                	ja     c000b041 <File::open(FileOpenMode)+0x59>
c000b001:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b008:	85 d2                	test   edx,edx
c000b00a:	74 35                	je     c000b041 <File::open(FileOpenMode)+0x59>
c000b00c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b012:	85 d2                	test   edx,edx
c000b014:	74 2b                	je     c000b041 <File::open(FileOpenMode)+0x59>
c000b016:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b01a:	b8 06 00 00 00       	mov    eax,0x6
c000b01f:	75 20                	jne    c000b041 <File::open(FileOpenMode)+0x59>
c000b021:	8b 02                	mov    eax,DWORD PTR [edx]
c000b023:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b029:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b02d:	51                   	push   ecx
c000b02e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b031:	51                   	push   ecx
c000b032:	52                   	push   edx
c000b033:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b036:	83 c4 10             	add    esp,0x10
c000b039:	85 c0                	test   eax,eax
c000b03b:	75 04                	jne    c000b041 <File::open(FileOpenMode)+0x59>
c000b03d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b041:	83 c4 08             	add    esp,0x8
c000b044:	5b                   	pop    ebx
c000b045:	c3                   	ret    

c000b046 <File::close()>:
c000b046:	53                   	push   ebx
c000b047:	b8 0b 00 00 00       	mov    eax,0xb
c000b04c:	83 ec 08             	sub    esp,0x8
c000b04f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b053:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b05a:	83 f9 19             	cmp    ecx,0x19
c000b05d:	77 41                	ja     c000b0a0 <File::close()+0x5a>
c000b05f:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b066:	85 db                	test   ebx,ebx
c000b068:	74 36                	je     c000b0a0 <File::close()+0x5a>
c000b06a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b071:	74 2d                	je     c000b0a0 <File::close()+0x5a>
c000b073:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b077:	b8 05 00 00 00       	mov    eax,0x5
c000b07c:	74 22                	je     c000b0a0 <File::close()+0x5a>
c000b07e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b082:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b089:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b08f:	53                   	push   ebx
c000b090:	53                   	push   ebx
c000b091:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b093:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b099:	50                   	push   eax
c000b09a:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b09d:	83 c4 10             	add    esp,0x10
c000b0a0:	83 c4 08             	add    esp,0x8
c000b0a3:	5b                   	pop    ebx
c000b0a4:	c3                   	ret    
c000b0a5:	90                   	nop

c000b0a6 <File::seek(unsigned long long)>:
c000b0a6:	56                   	push   esi
c000b0a7:	b8 0b 00 00 00       	mov    eax,0xb
c000b0ac:	53                   	push   ebx
c000b0ad:	51                   	push   ecx
c000b0ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b0b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b0b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b0ba:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b0c1:	83 fa 19             	cmp    edx,0x19
c000b0c4:	77 31                	ja     c000b0f7 <File::seek(unsigned long long)+0x51>
c000b0c6:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0cd:	85 d2                	test   edx,edx
c000b0cf:	74 26                	je     c000b0f7 <File::seek(unsigned long long)+0x51>
c000b0d1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0d7:	85 d2                	test   edx,edx
c000b0d9:	74 1c                	je     c000b0f7 <File::seek(unsigned long long)+0x51>
c000b0db:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b0df:	b8 05 00 00 00       	mov    eax,0x5
c000b0e4:	74 11                	je     c000b0f7 <File::seek(unsigned long long)+0x51>
c000b0e6:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0e8:	53                   	push   ebx
c000b0e9:	51                   	push   ecx
c000b0ea:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b0f0:	52                   	push   edx
c000b0f1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b0f4:	83 c4 10             	add    esp,0x10
c000b0f7:	5a                   	pop    edx
c000b0f8:	5b                   	pop    ebx
c000b0f9:	5e                   	pop    esi
c000b0fa:	c3                   	ret    
c000b0fb:	90                   	nop

c000b0fc <File::tell(unsigned long long*)>:
c000b0fc:	83 ec 0c             	sub    esp,0xc
c000b0ff:	b8 0b 00 00 00       	mov    eax,0xb
c000b104:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b108:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b10f:	83 fa 19             	cmp    edx,0x19
c000b112:	77 34                	ja     c000b148 <File::tell(unsigned long long*)+0x4c>
c000b114:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b11b:	85 d2                	test   edx,edx
c000b11d:	74 29                	je     c000b148 <File::tell(unsigned long long*)+0x4c>
c000b11f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b125:	85 d2                	test   edx,edx
c000b127:	74 1f                	je     c000b148 <File::tell(unsigned long long*)+0x4c>
c000b129:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b12d:	b8 05 00 00 00       	mov    eax,0x5
c000b132:	74 14                	je     c000b148 <File::tell(unsigned long long*)+0x4c>
c000b134:	50                   	push   eax
c000b135:	8b 02                	mov    eax,DWORD PTR [edx]
c000b137:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b13b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b141:	52                   	push   edx
c000b142:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b145:	83 c4 10             	add    esp,0x10
c000b148:	83 c4 0c             	add    esp,0xc
c000b14b:	c3                   	ret    

c000b14c <File::rewind()>:
c000b14c:	83 ec 10             	sub    esp,0x10
c000b14f:	6a 00                	push   0x0
c000b151:	6a 00                	push   0x0
c000b153:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b157:	e8 4a ff ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c000b15c:	83 c4 1c             	add    esp,0x1c
c000b15f:	c3                   	ret    

c000b160 <File::unlink()>:
c000b160:	83 ec 0c             	sub    esp,0xc
c000b163:	b8 0b 00 00 00       	mov    eax,0xb
c000b168:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b16c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b173:	83 f9 19             	cmp    ecx,0x19
c000b176:	77 2f                	ja     c000b1a7 <File::unlink()+0x47>
c000b178:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b17f:	85 c9                	test   ecx,ecx
c000b181:	74 24                	je     c000b1a7 <File::unlink()+0x47>
c000b183:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b189:	85 c9                	test   ecx,ecx
c000b18b:	74 1a                	je     c000b1a7 <File::unlink()+0x47>
c000b18d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b191:	b8 06 00 00 00       	mov    eax,0x6
c000b196:	75 0f                	jne    c000b1a7 <File::unlink()+0x47>
c000b198:	50                   	push   eax
c000b199:	83 c2 0d             	add    edx,0xd
c000b19c:	50                   	push   eax
c000b19d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b19f:	52                   	push   edx
c000b1a0:	51                   	push   ecx
c000b1a1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1a4:	83 c4 10             	add    esp,0x10
c000b1a7:	83 c4 0c             	add    esp,0xc
c000b1aa:	c3                   	ret    
c000b1ab:	90                   	nop

c000b1ac <File::rename(char const*)>:
c000b1ac:	83 ec 0c             	sub    esp,0xc
c000b1af:	b8 0b 00 00 00       	mov    eax,0xb
c000b1b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1bf:	83 f9 19             	cmp    ecx,0x19
c000b1c2:	77 32                	ja     c000b1f6 <File::rename(char const*)+0x4a>
c000b1c4:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1cb:	85 c9                	test   ecx,ecx
c000b1cd:	74 27                	je     c000b1f6 <File::rename(char const*)+0x4a>
c000b1cf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1d5:	85 c9                	test   ecx,ecx
c000b1d7:	74 1d                	je     c000b1f6 <File::rename(char const*)+0x4a>
c000b1d9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1dd:	b8 06 00 00 00       	mov    eax,0x6
c000b1e2:	75 12                	jne    c000b1f6 <File::rename(char const*)+0x4a>
c000b1e4:	50                   	push   eax
c000b1e5:	83 c2 0d             	add    edx,0xd
c000b1e8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1ee:	52                   	push   edx
c000b1ef:	51                   	push   ecx
c000b1f0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1f3:	83 c4 10             	add    esp,0x10
c000b1f6:	83 c4 0c             	add    esp,0xc
c000b1f9:	c3                   	ret    

c000b1fa <File::chfatattr(unsigned char, unsigned char)>:
c000b1fa:	57                   	push   edi
c000b1fb:	b8 0b 00 00 00       	mov    eax,0xb
c000b200:	56                   	push   esi
c000b201:	53                   	push   ebx
c000b202:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b206:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b20a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b20e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b215:	83 f9 19             	cmp    ecx,0x19
c000b218:	77 37                	ja     c000b251 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b21a:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b221:	85 c9                	test   ecx,ecx
c000b223:	74 2c                	je     c000b251 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b225:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b22b:	85 c9                	test   ecx,ecx
c000b22d:	74 22                	je     c000b251 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b22f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b233:	b8 06 00 00 00       	mov    eax,0x6
c000b238:	75 17                	jne    c000b251 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b23a:	89 f0                	mov    eax,esi
c000b23c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b23e:	0f b6 db             	movzx  ebx,bl
c000b241:	0f b6 f0             	movzx  esi,al
c000b244:	83 c2 0d             	add    edx,0xd
c000b247:	56                   	push   esi
c000b248:	53                   	push   ebx
c000b249:	52                   	push   edx
c000b24a:	51                   	push   ecx
c000b24b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b24e:	83 c4 10             	add    esp,0x10
c000b251:	5b                   	pop    ebx
c000b252:	5e                   	pop    esi
c000b253:	5f                   	pop    edi
c000b254:	c3                   	ret    
c000b255:	90                   	nop

c000b256 <File::exists()>:
c000b256:	83 ec 0c             	sub    esp,0xc
c000b259:	31 c0                	xor    eax,eax
c000b25b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b25f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b266:	83 f9 19             	cmp    ecx,0x19
c000b269:	77 24                	ja     c000b28f <File::exists()+0x39>
c000b26b:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b272:	85 c9                	test   ecx,ecx
c000b274:	74 19                	je     c000b28f <File::exists()+0x39>
c000b276:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b27c:	85 c9                	test   ecx,ecx
c000b27e:	74 0f                	je     c000b28f <File::exists()+0x39>
c000b280:	50                   	push   eax
c000b281:	83 c2 0d             	add    edx,0xd
c000b284:	50                   	push   eax
c000b285:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b287:	52                   	push   edx
c000b288:	51                   	push   ecx
c000b289:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b28c:	83 c4 10             	add    esp,0x10
c000b28f:	83 c4 0c             	add    esp,0xc
c000b292:	c3                   	ret    
c000b293:	90                   	nop

c000b294 <File::stat(unsigned long long*, bool*)>:
c000b294:	56                   	push   esi
c000b295:	53                   	push   ebx
c000b296:	50                   	push   eax
c000b297:	b8 0b 00 00 00       	mov    eax,0xb
c000b29c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2a0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b2a4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2af:	83 f9 19             	cmp    ecx,0x19
c000b2b2:	77 3d                	ja     c000b2f1 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2b4:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2bb:	85 c9                	test   ecx,ecx
c000b2bd:	74 32                	je     c000b2f1 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2bf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2c5:	85 c9                	test   ecx,ecx
c000b2c7:	74 28                	je     c000b2f1 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2cf:	74 13                	je     c000b2e4 <File::stat(unsigned long long*, bool*)+0x50>
c000b2d1:	83 ec 04             	sub    esp,0x4
c000b2d4:	56                   	push   esi
c000b2d5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2db:	51                   	push   ecx
c000b2dc:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b2df:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b2e2:	eb 0a                	jmp    c000b2ee <File::stat(unsigned long long*, bool*)+0x5a>
c000b2e4:	53                   	push   ebx
c000b2e5:	83 c2 0d             	add    edx,0xd
c000b2e8:	56                   	push   esi
c000b2e9:	52                   	push   edx
c000b2ea:	51                   	push   ecx
c000b2eb:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b2ee:	83 c4 10             	add    esp,0x10
c000b2f1:	5a                   	pop    edx
c000b2f2:	5b                   	pop    ebx
c000b2f3:	5e                   	pop    esi
c000b2f4:	c3                   	ret    

c000b2f5 <Fs::setcwd(Process*, char*)>:
c000b2f5:	55                   	push   ebp
c000b2f6:	57                   	push   edi
c000b2f7:	56                   	push   esi
c000b2f8:	53                   	push   ebx
c000b2f9:	81 ec 20 02 00 00    	sub    esp,0x220
c000b2ff:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b306:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b30c:	57                   	push   edi
c000b30d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b314:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b318:	56                   	push   esi
c000b319:	e8 32 fa ff ff       	call   c000ad50 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b31e:	89 34 24             	mov    DWORD PTR [esp],esi
c000b321:	e8 5a 52 ff ff       	call   c0000580 <strlen>
c000b326:	83 c4 10             	add    esp,0x10
c000b329:	83 f8 02             	cmp    eax,0x2
c000b32c:	77 15                	ja     c000b343 <Fs::setcwd(Process*, char*)+0x4e>
c000b32e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b333:	83 eb 41             	sub    ebx,0x41
c000b336:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b33d:	85 c0                	test   eax,eax
c000b33f:	75 1c                	jne    c000b35d <Fs::setcwd(Process*, char*)+0x68>
c000b341:	eb 2f                	jmp    c000b372 <Fs::setcwd(Process*, char*)+0x7d>
c000b343:	83 ec 0c             	sub    esp,0xc
c000b346:	56                   	push   esi
c000b347:	e8 34 52 ff ff       	call   c0000580 <strlen>
c000b34c:	83 c4 10             	add    esp,0x10
c000b34f:	83 f8 03             	cmp    eax,0x3
c000b352:	75 57                	jne    c000b3ab <Fs::setcwd(Process*, char*)+0xb6>
c000b354:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b359:	75 50                	jne    c000b3ab <Fs::setcwd(Process*, char*)+0xb6>
c000b35b:	eb d1                	jmp    c000b32e <Fs::setcwd(Process*, char*)+0x39>
c000b35d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b364:	75 0c                	jne    c000b372 <Fs::setcwd(Process*, char*)+0x7d>
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	50                   	push   eax
c000b36a:	e8 9d 1d 00 00       	call   c000d10c <LogicalDisk::mount()>
c000b36f:	83 c4 10             	add    esp,0x10
c000b372:	83 fb 19             	cmp    ebx,0x19
c000b375:	b8 03 00 00 00       	mov    eax,0x3
c000b37a:	0f 87 c6 00 00 00    	ja     c000b446 <Fs::setcwd(Process*, char*)+0x151>
c000b380:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b387:	b8 05 00 00 00       	mov    eax,0x5
c000b38c:	85 d2                	test   edx,edx
c000b38e:	0f 84 b2 00 00 00    	je     c000b446 <Fs::setcwd(Process*, char*)+0x151>
c000b394:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b39b:	b8 06 00 00 00       	mov    eax,0x6
c000b3a0:	0f 85 92 00 00 00    	jne    c000b438 <Fs::setcwd(Process*, char*)+0x143>
c000b3a6:	e9 9b 00 00 00       	jmp    c000b446 <Fs::setcwd(Process*, char*)+0x151>
c000b3ab:	83 ec 0c             	sub    esp,0xc
c000b3ae:	68 14 01 00 00       	push   0x114
c000b3b3:	e8 13 c7 ff ff       	call   c0007acb <malloc>
c000b3b8:	83 c4 0c             	add    esp,0xc
c000b3bb:	55                   	push   ebp
c000b3bc:	56                   	push   esi
c000b3bd:	50                   	push   eax
c000b3be:	89 c3                	mov    ebx,eax
c000b3c0:	e8 67 fb ff ff       	call   c000af2c <File::File(char const*, Process*)>
c000b3c5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b3ca:	83 c4 0c             	add    esp,0xc
c000b3cd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b3d1:	50                   	push   eax
c000b3d2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b3d6:	50                   	push   eax
c000b3d7:	53                   	push   ebx
c000b3d8:	e8 b7 fe ff ff       	call   c000b294 <File::stat(unsigned long long*, bool*)>
c000b3dd:	83 c4 10             	add    esp,0x10
c000b3e0:	83 f8 02             	cmp    eax,0x2
c000b3e3:	74 27                	je     c000b40c <Fs::setcwd(Process*, char*)+0x117>
c000b3e5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b3ea:	75 1c                	jne    c000b408 <Fs::setcwd(Process*, char*)+0x113>
c000b3ec:	85 db                	test   ebx,ebx
c000b3ee:	b8 02 00 00 00       	mov    eax,0x2
c000b3f3:	74 51                	je     c000b446 <Fs::setcwd(Process*, char*)+0x151>
c000b3f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3f7:	83 ec 0c             	sub    esp,0xc
c000b3fa:	53                   	push   ebx
c000b3fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3fe:	83 c4 10             	add    esp,0x10
c000b401:	b8 02 00 00 00       	mov    eax,0x2
c000b406:	eb 3e                	jmp    c000b446 <Fs::setcwd(Process*, char*)+0x151>
c000b408:	85 c0                	test   eax,eax
c000b40a:	74 1c                	je     c000b428 <Fs::setcwd(Process*, char*)+0x133>
c000b40c:	85 db                	test   ebx,ebx
c000b40e:	b8 01 00 00 00       	mov    eax,0x1
c000b413:	74 31                	je     c000b446 <Fs::setcwd(Process*, char*)+0x151>
c000b415:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b417:	83 ec 0c             	sub    esp,0xc
c000b41a:	53                   	push   ebx
c000b41b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b41e:	83 c4 10             	add    esp,0x10
c000b421:	b8 01 00 00 00       	mov    eax,0x1
c000b426:	eb 1e                	jmp    c000b446 <Fs::setcwd(Process*, char*)+0x151>
c000b428:	85 db                	test   ebx,ebx
c000b42a:	74 0c                	je     c000b438 <Fs::setcwd(Process*, char*)+0x143>
c000b42c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	53                   	push   ebx
c000b432:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b435:	83 c4 10             	add    esp,0x10
c000b438:	50                   	push   eax
c000b439:	50                   	push   eax
c000b43a:	56                   	push   esi
c000b43b:	57                   	push   edi
c000b43c:	e8 0f 52 ff ff       	call   c0000650 <strcpy>
c000b441:	83 c4 10             	add    esp,0x10
c000b444:	31 c0                	xor    eax,eax
c000b446:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b44c:	5b                   	pop    ebx
c000b44d:	5e                   	pop    esi
c000b44e:	5f                   	pop    edi
c000b44f:	5d                   	pop    ebp
c000b450:	c3                   	ret    
c000b451:	90                   	nop

c000b452 <Directory::Directory(char const*, Process*)>:
c000b452:	83 ec 0c             	sub    esp,0xc
c000b455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b459:	83 ec 08             	sub    esp,0x8
c000b45c:	6a 00                	push   0x0
c000b45e:	50                   	push   eax
c000b45f:	e8 52 dd ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000b464:	83 c4 10             	add    esp,0x10
c000b467:	ba 3c 03 02 c0       	mov    edx,0xc002033c
c000b46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b470:	89 10                	mov    DWORD PTR [eax],edx
c000b472:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b476:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b480:	83 c0 0d             	add    eax,0xd
c000b483:	83 ec 04             	sub    esp,0x4
c000b486:	52                   	push   edx
c000b487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b48b:	50                   	push   eax
c000b48c:	e8 bf f8 ff ff       	call   c000ad50 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b491:	83 c4 10             	add    esp,0x10
c000b494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b498:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b49b:	83 e8 41             	sub    eax,0x41
c000b49e:	88 c2                	mov    dl,al
c000b4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ae:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4bc:	0f b6 c0             	movzx  eax,al
c000b4bf:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4c6:	85 c0                	test   eax,eax
c000b4c8:	74 3e                	je     c000b508 <Directory::Directory(char const*, Process*)+0xb6>
c000b4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ce:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4d4:	0f b6 c0             	movzx  eax,al
c000b4d7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4de:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b4e4:	85 c0                	test   eax,eax
c000b4e6:	75 20                	jne    c000b508 <Directory::Directory(char const*, Process*)+0xb6>
c000b4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ec:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4f2:	0f b6 c0             	movzx  eax,al
c000b4f5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4fc:	83 ec 0c             	sub    esp,0xc
c000b4ff:	50                   	push   eax
c000b500:	e8 07 1c 00 00       	call   c000d10c <LogicalDisk::mount()>
c000b505:	83 c4 10             	add    esp,0x10
c000b508:	90                   	nop
c000b509:	83 c4 0c             	add    esp,0xc
c000b50c:	c3                   	ret    
c000b50d:	90                   	nop

c000b50e <Directory::open()>:
c000b50e:	53                   	push   ebx
c000b50f:	b8 0b 00 00 00       	mov    eax,0xb
c000b514:	83 ec 08             	sub    esp,0x8
c000b517:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b51b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b522:	83 fa 19             	cmp    edx,0x19
c000b525:	77 3d                	ja     c000b564 <Directory::open()+0x56>
c000b527:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b52e:	85 d2                	test   edx,edx
c000b530:	74 32                	je     c000b564 <Directory::open()+0x56>
c000b532:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b538:	85 d2                	test   edx,edx
c000b53a:	74 28                	je     c000b564 <Directory::open()+0x56>
c000b53c:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b540:	b8 06 00 00 00       	mov    eax,0x6
c000b545:	75 1d                	jne    c000b564 <Directory::open()+0x56>
c000b547:	50                   	push   eax
c000b548:	8b 02                	mov    eax,DWORD PTR [edx]
c000b54a:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b550:	51                   	push   ecx
c000b551:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b554:	51                   	push   ecx
c000b555:	52                   	push   edx
c000b556:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b559:	83 c4 10             	add    esp,0x10
c000b55c:	85 c0                	test   eax,eax
c000b55e:	75 04                	jne    c000b564 <Directory::open()+0x56>
c000b560:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b564:	83 c4 08             	add    esp,0x8
c000b567:	5b                   	pop    ebx
c000b568:	c3                   	ret    
c000b569:	90                   	nop

c000b56a <Directory::close()>:
c000b56a:	53                   	push   ebx
c000b56b:	b8 0b 00 00 00       	mov    eax,0xb
c000b570:	83 ec 08             	sub    esp,0x8
c000b573:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b577:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b57e:	83 f9 19             	cmp    ecx,0x19
c000b581:	77 41                	ja     c000b5c4 <Directory::close()+0x5a>
c000b583:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b58a:	85 db                	test   ebx,ebx
c000b58c:	74 36                	je     c000b5c4 <Directory::close()+0x5a>
c000b58e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b595:	74 2d                	je     c000b5c4 <Directory::close()+0x5a>
c000b597:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b59b:	b8 05 00 00 00       	mov    eax,0x5
c000b5a0:	74 22                	je     c000b5c4 <Directory::close()+0x5a>
c000b5a2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b5a6:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5ad:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5b3:	53                   	push   ebx
c000b5b4:	53                   	push   ebx
c000b5b5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5b7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b5bd:	50                   	push   eax
c000b5be:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b5c1:	83 c4 10             	add    esp,0x10
c000b5c4:	83 c4 08             	add    esp,0x8
c000b5c7:	5b                   	pop    ebx
c000b5c8:	c3                   	ret    
c000b5c9:	90                   	nop

c000b5ca <Directory::unlink()>:
c000b5ca:	83 ec 0c             	sub    esp,0xc
c000b5cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b5d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5dd:	83 f9 19             	cmp    ecx,0x19
c000b5e0:	77 2f                	ja     c000b611 <Directory::unlink()+0x47>
c000b5e2:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5e9:	85 c9                	test   ecx,ecx
c000b5eb:	74 24                	je     c000b611 <Directory::unlink()+0x47>
c000b5ed:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b5f3:	85 c9                	test   ecx,ecx
c000b5f5:	74 1a                	je     c000b611 <Directory::unlink()+0x47>
c000b5f7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5fb:	b8 06 00 00 00       	mov    eax,0x6
c000b600:	75 0f                	jne    c000b611 <Directory::unlink()+0x47>
c000b602:	50                   	push   eax
c000b603:	83 c2 0d             	add    edx,0xd
c000b606:	50                   	push   eax
c000b607:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b609:	52                   	push   edx
c000b60a:	51                   	push   ecx
c000b60b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b60e:	83 c4 10             	add    esp,0x10
c000b611:	83 c4 0c             	add    esp,0xc
c000b614:	c3                   	ret    
c000b615:	90                   	nop

c000b616 <Directory::rename(char const*)>:
c000b616:	83 ec 0c             	sub    esp,0xc
c000b619:	b8 0b 00 00 00       	mov    eax,0xb
c000b61e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b622:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b629:	83 f9 19             	cmp    ecx,0x19
c000b62c:	77 32                	ja     c000b660 <Directory::rename(char const*)+0x4a>
c000b62e:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b635:	85 c9                	test   ecx,ecx
c000b637:	74 27                	je     c000b660 <Directory::rename(char const*)+0x4a>
c000b639:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b63f:	85 c9                	test   ecx,ecx
c000b641:	74 1d                	je     c000b660 <Directory::rename(char const*)+0x4a>
c000b643:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b647:	b8 06 00 00 00       	mov    eax,0x6
c000b64c:	75 12                	jne    c000b660 <Directory::rename(char const*)+0x4a>
c000b64e:	50                   	push   eax
c000b64f:	83 c2 0d             	add    edx,0xd
c000b652:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b654:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b658:	52                   	push   edx
c000b659:	51                   	push   ecx
c000b65a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b65d:	83 c4 10             	add    esp,0x10
c000b660:	83 c4 0c             	add    esp,0xc
c000b663:	c3                   	ret    

c000b664 <Directory::exists()>:
c000b664:	83 ec 0c             	sub    esp,0xc
c000b667:	31 c0                	xor    eax,eax
c000b669:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b66d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b674:	83 f9 19             	cmp    ecx,0x19
c000b677:	77 24                	ja     c000b69d <Directory::exists()+0x39>
c000b679:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b680:	85 c9                	test   ecx,ecx
c000b682:	74 19                	je     c000b69d <Directory::exists()+0x39>
c000b684:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b68a:	85 c9                	test   ecx,ecx
c000b68c:	74 0f                	je     c000b69d <Directory::exists()+0x39>
c000b68e:	50                   	push   eax
c000b68f:	83 c2 0d             	add    edx,0xd
c000b692:	50                   	push   eax
c000b693:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b695:	52                   	push   edx
c000b696:	51                   	push   ecx
c000b697:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b69a:	83 c4 10             	add    esp,0x10
c000b69d:	83 c4 0c             	add    esp,0xc
c000b6a0:	c3                   	ret    
c000b6a1:	90                   	nop

c000b6a2 <Directory::read(dirent*)>:
c000b6a2:	83 ec 1c             	sub    esp,0x1c
c000b6a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b6aa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b6ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6b5:	83 f9 19             	cmp    ecx,0x19
c000b6b8:	77 30                	ja     c000b6ea <Directory::read(dirent*)+0x48>
c000b6ba:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6c1:	85 c9                	test   ecx,ecx
c000b6c3:	74 25                	je     c000b6ea <Directory::read(dirent*)+0x48>
c000b6c5:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b6cc:	74 1c                	je     c000b6ea <Directory::read(dirent*)+0x48>
c000b6ce:	83 ec 0c             	sub    esp,0xc
c000b6d1:	8b 02                	mov    eax,DWORD PTR [edx]
c000b6d3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b6d7:	51                   	push   ecx
c000b6d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6dc:	6a 00                	push   0x0
c000b6de:	68 10 01 00 00       	push   0x110
c000b6e3:	52                   	push   edx
c000b6e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b6e7:	83 c4 20             	add    esp,0x20
c000b6ea:	83 c4 1c             	add    esp,0x1c
c000b6ed:	c3                   	ret    

c000b6ee <Directory::create()>:
c000b6ee:	83 ec 0c             	sub    esp,0xc
c000b6f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b6f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b701:	83 f9 19             	cmp    ecx,0x19
c000b704:	77 2f                	ja     c000b735 <Directory::create()+0x47>
c000b706:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b70d:	85 c9                	test   ecx,ecx
c000b70f:	74 24                	je     c000b735 <Directory::create()+0x47>
c000b711:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b717:	85 c9                	test   ecx,ecx
c000b719:	74 1a                	je     c000b735 <Directory::create()+0x47>
c000b71b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b71f:	b8 06 00 00 00       	mov    eax,0x6
c000b724:	75 0f                	jne    c000b735 <Directory::create()+0x47>
c000b726:	50                   	push   eax
c000b727:	83 c2 0d             	add    edx,0xd
c000b72a:	50                   	push   eax
c000b72b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b72d:	52                   	push   edx
c000b72e:	51                   	push   ecx
c000b72f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b732:	83 c4 10             	add    esp,0x10
c000b735:	83 c4 0c             	add    esp,0xc
c000b738:	c3                   	ret    
c000b739:	90                   	nop

c000b73a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b73a:	b8 0a 00 00 00       	mov    eax,0xa
c000b73f:	c3                   	ret    

c000b740 <Bus::Bus(char const*)>:
c000b740:	83 ec 0c             	sub    esp,0xc
c000b743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b747:	83 ec 08             	sub    esp,0x8
c000b74a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b74e:	50                   	push   eax
c000b74f:	e8 28 08 00 00       	call   c000bf7c <Device::Device(char const*)>
c000b754:	83 c4 10             	add    esp,0x10
c000b757:	ba 58 03 02 c0       	mov    edx,0xc0020358
c000b75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b760:	89 10                	mov    DWORD PTR [eax],edx
c000b762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b766:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b770:	90                   	nop
c000b771:	83 c4 0c             	add    esp,0xc
c000b774:	c3                   	ret    
c000b775:	90                   	nop
c000b776:	66 90                	xchg   ax,ax

c000b778 <Bus::~Bus()>:
c000b778:	83 ec 0c             	sub    esp,0xc
c000b77b:	ba 58 03 02 c0       	mov    edx,0xc0020358
c000b780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b784:	89 10                	mov    DWORD PTR [eax],edx
c000b786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b78a:	83 ec 0c             	sub    esp,0xc
c000b78d:	50                   	push   eax
c000b78e:	e8 53 05 00 00       	call   c000bce6 <Device::~Device()>
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	90                   	nop
c000b797:	83 c4 0c             	add    esp,0xc
c000b79a:	c3                   	ret    
c000b79b:	90                   	nop

c000b79c <Bus::~Bus()>:
c000b79c:	83 ec 0c             	sub    esp,0xc
c000b79f:	83 ec 0c             	sub    esp,0xc
c000b7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7a6:	e8 cd ff ff ff       	call   c000b778 <Bus::~Bus()>
c000b7ab:	83 c4 10             	add    esp,0x10
c000b7ae:	83 ec 08             	sub    esp,0x8
c000b7b1:	68 58 01 00 00       	push   0x158
c000b7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ba:	e8 c6 f0 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000b7bf:	83 c4 10             	add    esp,0x10
c000b7c2:	83 c4 0c             	add    esp,0xc
c000b7c5:	c3                   	ret    

c000b7c6 <beepThread(void*)>:
c000b7c6:	83 ec 0c             	sub    esp,0xc
c000b7c9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b7ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7d2:	48                   	dec    eax
c000b7d3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b7d8:	75 01                	jne    c000b7db <beepThread(void*)+0x15>
c000b7da:	fb                   	sti    
c000b7db:	6b c2 0a             	imul   eax,edx,0xa
c000b7de:	83 ec 0c             	sub    esp,0xc
c000b7e1:	50                   	push   eax
c000b7e2:	e8 7d 9b 00 00       	call   c0015364 <milliTenthSleep(unsigned int)>
c000b7e7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b7ee:	e8 54 ba 00 00       	call   c0017247 <HalMakeBeep(int)>
c000b7f3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b7fb:	83 c4 1c             	add    esp,0x1c
c000b7fe:	e9 45 9a 00 00       	jmp    c0015248 <blockTask(TaskState)>

c000b803 <Krnl::beep(int, int, bool)>:
c000b803:	56                   	push   esi
c000b804:	53                   	push   ebx
c000b805:	83 ec 10             	sub    esp,0x10
c000b808:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b80c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b814:	e8 2e ba 00 00       	call   c0017247 <HalMakeBeep(int)>
c000b819:	89 f0                	mov    eax,esi
c000b81b:	83 c4 10             	add    esp,0x10
c000b81e:	84 c0                	test   al,al
c000b820:	74 1e                	je     c000b840 <Krnl::beep(int, int, bool)+0x3d>
c000b822:	6b db 0a             	imul   ebx,ebx,0xa
c000b825:	83 ec 0c             	sub    esp,0xc
c000b828:	53                   	push   ebx
c000b829:	e8 36 9b 00 00       	call   c0015364 <milliTenthSleep(unsigned int)>
c000b82e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b836:	83 c4 14             	add    esp,0x14
c000b839:	5b                   	pop    ebx
c000b83a:	5e                   	pop    esi
c000b83b:	e9 07 ba 00 00       	jmp    c0017247 <HalMakeBeep(int)>
c000b840:	68 e6 00 00 00       	push   0xe6
c000b845:	53                   	push   ebx
c000b846:	68 c6 b7 00 c0       	push   0xc000b7c6
c000b84b:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b851:	e8 a6 95 00 00       	call   c0014dfc <Process::createThread(void (*)(void*), void*, int)>
c000b856:	83 c4 14             	add    esp,0x14
c000b859:	5b                   	pop    ebx
c000b85a:	5e                   	pop    esi
c000b85b:	c3                   	ret    

c000b85c <User::loadClockSettings(int)>:
c000b85c:	53                   	push   ebx
c000b85d:	83 ec 14             	sub    esp,0x14
c000b860:	68 14 01 00 00       	push   0x114
c000b865:	e8 61 c2 ff ff       	call   c0007acb <malloc>
c000b86a:	83 c4 0c             	add    esp,0xc
c000b86d:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b873:	68 7c 03 02 c0       	push   0xc002037c
c000b878:	50                   	push   eax
c000b879:	89 c3                	mov    ebx,eax
c000b87b:	e8 ac f6 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c000b880:	58                   	pop    eax
c000b881:	5a                   	pop    edx
c000b882:	6a 01                	push   0x1
c000b884:	53                   	push   ebx
c000b885:	e8 5e f7 ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c000b88a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b88d:	e8 b4 f7 ff ff       	call   c000b046 <File::close()>
c000b892:	83 c4 10             	add    esp,0x10
c000b895:	85 db                	test   ebx,ebx
c000b897:	74 0f                	je     c000b8a8 <User::loadClockSettings(int)+0x4c>
c000b899:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b89b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b89f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b8a2:	83 c4 08             	add    esp,0x8
c000b8a5:	5b                   	pop    ebx
c000b8a6:	ff e0                	jmp    eax
c000b8a8:	83 c4 08             	add    esp,0x8
c000b8ab:	5b                   	pop    ebx
c000b8ac:	c3                   	ret    
c000b8ad:	90                   	nop

c000b8ae <Clock::Clock(char const*)>:
c000b8ae:	83 ec 0c             	sub    esp,0xc
c000b8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8b5:	83 ec 08             	sub    esp,0x8
c000b8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bc:	50                   	push   eax
c000b8bd:	e8 ba 06 00 00       	call   c000bf7c <Device::Device(char const*)>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	ba a4 03 02 c0       	mov    edx,0xc00203a4
c000b8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ce:	89 10                	mov    DWORD PTR [eax],edx
c000b8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b8de:	90                   	nop
c000b8df:	83 c4 0c             	add    esp,0xc
c000b8e2:	c3                   	ret    
c000b8e3:	90                   	nop

c000b8e4 <Clock::~Clock()>:
c000b8e4:	83 ec 0c             	sub    esp,0xc
c000b8e7:	ba a4 03 02 c0       	mov    edx,0xc00203a4
c000b8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f0:	89 10                	mov    DWORD PTR [eax],edx
c000b8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f6:	83 ec 0c             	sub    esp,0xc
c000b8f9:	50                   	push   eax
c000b8fa:	e8 e7 03 00 00       	call   c000bce6 <Device::~Device()>
c000b8ff:	83 c4 10             	add    esp,0x10
c000b902:	90                   	nop
c000b903:	83 c4 0c             	add    esp,0xc
c000b906:	c3                   	ret    
c000b907:	90                   	nop

c000b908 <Clock::~Clock()>:
c000b908:	83 ec 0c             	sub    esp,0xc
c000b90b:	83 ec 0c             	sub    esp,0xc
c000b90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b912:	e8 cd ff ff ff       	call   c000b8e4 <Clock::~Clock()>
c000b917:	83 c4 10             	add    esp,0x10
c000b91a:	83 ec 08             	sub    esp,0x8
c000b91d:	68 58 01 00 00       	push   0x158
c000b922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b926:	e8 5a ef ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000b92b:	83 c4 10             	add    esp,0x10
c000b92e:	83 c4 0c             	add    esp,0xc
c000b931:	c3                   	ret    

c000b932 <Clock::timeInSecondsLocal()>:
c000b932:	53                   	push   ebx
c000b933:	83 ec 14             	sub    esp,0x14
c000b936:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b93a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b93c:	50                   	push   eax
c000b93d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b940:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b947:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b94d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b953:	89 cb                	mov    ebx,ecx
c000b955:	c1 fb 1f             	sar    ebx,0x1f
c000b958:	01 c8                	add    eax,ecx
c000b95a:	11 da                	adc    edx,ebx
c000b95c:	83 c4 10             	add    esp,0x10
c000b95f:	31 c9                	xor    ecx,ecx
c000b961:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b968:	74 05                	je     c000b96f <Clock::timeInSecondsLocal()+0x3d>
c000b96a:	b9 08 07 00 00       	mov    ecx,0x708
c000b96f:	31 db                	xor    ebx,ebx
c000b971:	01 c8                	add    eax,ecx
c000b973:	11 da                	adc    edx,ebx
c000b975:	83 c4 08             	add    esp,0x8
c000b978:	5b                   	pop    ebx
c000b979:	c3                   	ret    

c000b97a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b97a:	57                   	push   edi
c000b97b:	56                   	push   esi
c000b97c:	53                   	push   ebx
c000b97d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b981:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b985:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b989:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b98b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b98e:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b995:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b99b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b9a1:	99                   	cdq    
c000b9a2:	29 c6                	sub    esi,eax
c000b9a4:	19 d7                	sbb    edi,edx
c000b9a6:	89 f0                	mov    eax,esi
c000b9a8:	31 f6                	xor    esi,esi
c000b9aa:	89 fa                	mov    edx,edi
c000b9ac:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b9b3:	74 05                	je     c000b9ba <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b9b5:	be 08 07 00 00       	mov    esi,0x708
c000b9ba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b9be:	31 ff                	xor    edi,edi
c000b9c0:	29 f0                	sub    eax,esi
c000b9c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b9c6:	19 fa                	sbb    edx,edi
c000b9c8:	89 d8                	mov    eax,ebx
c000b9ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ce:	5b                   	pop    ebx
c000b9cf:	5e                   	pop    esi
c000b9d0:	5f                   	pop    edi
c000b9d1:	ff e0                	jmp    eax

c000b9d3 <datetimeToSeconds(datetime_t)>:
c000b9d3:	55                   	push   ebp
c000b9d4:	57                   	push   edi
c000b9d5:	56                   	push   esi
c000b9d6:	53                   	push   ebx
c000b9d7:	83 ec 0c             	sub    esp,0xc
c000b9da:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b9de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b9e2:	89 f7                	mov    edi,esi
c000b9e4:	89 f0                	mov    eax,esi
c000b9e6:	0f b6 cf             	movzx  ecx,bh
c000b9e9:	0f b6 c4             	movzx  eax,ah
c000b9ec:	c1 ef 10             	shr    edi,0x10
c000b9ef:	89 da                	mov    edx,ebx
c000b9f1:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000b9f4:	89 f9                	mov    ecx,edi
c000b9f6:	0f b6 f9             	movzx  edi,cl
c000b9f9:	89 f1                	mov    ecx,esi
c000b9fb:	6b c0 3c             	imul   eax,eax,0x3c
c000b9fe:	0f b6 f1             	movzx  esi,cl
c000ba01:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000ba07:	0f b6 db             	movzx  ebx,bl
c000ba0a:	c1 ea 10             	shr    edx,0x10
c000ba0d:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000ba13:	01 f8                	add    eax,edi
c000ba15:	01 f0                	add    eax,esi
c000ba17:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba1a:	c1 f8 1f             	sar    eax,0x1f
c000ba1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba21:	89 e8                	mov    eax,ebp
c000ba23:	0f b6 c0             	movzx  eax,al
c000ba26:	8b 0c 85 e0 03 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfc20]
c000ba2d:	83 f8 01             	cmp    eax,0x1
c000ba30:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000ba34:	0f b7 da             	movzx  ebx,dx
c000ba37:	76 27                	jbe    c000ba60 <datetimeToSeconds(datetime_t)+0x8d>
c000ba39:	80 e2 03             	and    dl,0x3
c000ba3c:	75 22                	jne    c000ba60 <datetimeToSeconds(datetime_t)+0x8d>
c000ba3e:	31 d2                	xor    edx,edx
c000ba40:	be 64 00 00 00       	mov    esi,0x64
c000ba45:	89 d8                	mov    eax,ebx
c000ba47:	f7 f6                	div    esi
c000ba49:	85 d2                	test   edx,edx
c000ba4b:	75 12                	jne    c000ba5f <datetimeToSeconds(datetime_t)+0x8c>
c000ba4d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba53:	be 90 01 00 00       	mov    esi,0x190
c000ba58:	99                   	cdq    
c000ba59:	f7 fe                	idiv   esi
c000ba5b:	85 d2                	test   edx,edx
c000ba5d:	75 01                	jne    c000ba60 <datetimeToSeconds(datetime_t)+0x8d>
c000ba5f:	41                   	inc    ecx
c000ba60:	83 fb 46             	cmp    ebx,0x46
c000ba63:	76 48                	jbe    c000baad <datetimeToSeconds(datetime_t)+0xda>
c000ba65:	be 46 00 00 00       	mov    esi,0x46
c000ba6a:	bf 64 00 00 00       	mov    edi,0x64
c000ba6f:	bd 90 01 00 00       	mov    ebp,0x190
c000ba74:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba7a:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba7f:	75 23                	jne    c000baa4 <datetimeToSeconds(datetime_t)+0xd1>
c000ba81:	89 f0                	mov    eax,esi
c000ba83:	99                   	cdq    
c000ba84:	f7 ff                	idiv   edi
c000ba86:	b8 6e 01 00 00       	mov    eax,0x16e
c000ba8b:	85 d2                	test   edx,edx
c000ba8d:	75 15                	jne    c000baa4 <datetimeToSeconds(datetime_t)+0xd1>
c000ba8f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ba95:	99                   	cdq    
c000ba96:	f7 fd                	idiv   ebp
c000ba98:	83 fa 01             	cmp    edx,0x1
c000ba9b:	19 c0                	sbb    eax,eax
c000ba9d:	f7 d0                	not    eax
c000ba9f:	05 6e 01 00 00       	add    eax,0x16e
c000baa4:	46                   	inc    esi
c000baa5:	01 c1                	add    ecx,eax
c000baa7:	39 de                	cmp    esi,ebx
c000baa9:	7c c9                	jl     c000ba74 <datetimeToSeconds(datetime_t)+0xa1>
c000baab:	eb 34                	jmp    c000bae1 <datetimeToSeconds(datetime_t)+0x10e>
c000baad:	74 32                	je     c000bae1 <datetimeToSeconds(datetime_t)+0x10e>
c000baaf:	b8 45 00 00 00       	mov    eax,0x45
c000bab4:	89 c2                	mov    edx,eax
c000bab6:	83 e2 03             	and    edx,0x3
c000bab9:	39 d8                	cmp    eax,ebx
c000babb:	7e 0f                	jle    c000bacc <datetimeToSeconds(datetime_t)+0xf9>
c000babd:	83 fa 01             	cmp    edx,0x1
c000bac0:	19 d2                	sbb    edx,edx
c000bac2:	48                   	dec    eax
c000bac3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000baca:	eb e8                	jmp    c000bab4 <datetimeToSeconds(datetime_t)+0xe1>
c000bacc:	85 d2                	test   edx,edx
c000bace:	b8 6d 01 00 00       	mov    eax,0x16d
c000bad3:	75 0a                	jne    c000badf <datetimeToSeconds(datetime_t)+0x10c>
c000bad5:	83 fb 01             	cmp    ebx,0x1
c000bad8:	19 c0                	sbb    eax,eax
c000bada:	05 6e 01 00 00       	add    eax,0x16e
c000badf:	29 c1                	sub    ecx,eax
c000bae1:	b8 80 51 01 00       	mov    eax,0x15180
c000bae6:	f7 e9                	imul   ecx
c000bae8:	03 04 24             	add    eax,DWORD PTR [esp]
c000baeb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000baef:	83 c4 0c             	add    esp,0xc
c000baf2:	5b                   	pop    ebx
c000baf3:	5e                   	pop    esi
c000baf4:	5f                   	pop    edi
c000baf5:	5d                   	pop    ebp
c000baf6:	c3                   	ret    
c000baf7:	90                   	nop

c000baf8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000baf8:	57                   	push   edi
c000baf9:	56                   	push   esi
c000bafa:	53                   	push   ebx
c000bafb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000baff:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb01:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bb04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb0c:	e8 c2 fe ff ff       	call   c000b9d3 <datetimeToSeconds(datetime_t)>
c000bb11:	59                   	pop    ecx
c000bb12:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bb19:	5b                   	pop    ebx
c000bb1a:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bb20:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb26:	89 cb                	mov    ebx,ecx
c000bb28:	c1 fb 1f             	sar    ebx,0x1f
c000bb2b:	29 c8                	sub    eax,ecx
c000bb2d:	19 da                	sbb    edx,ebx
c000bb2f:	31 c9                	xor    ecx,ecx
c000bb31:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb38:	74 05                	je     c000bb3f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb3a:	b9 08 07 00 00       	mov    ecx,0x708
c000bb3f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb43:	31 db                	xor    ebx,ebx
c000bb45:	29 c8                	sub    eax,ecx
c000bb47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb4b:	19 da                	sbb    edx,ebx
c000bb4d:	89 f8                	mov    eax,edi
c000bb4f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb53:	5b                   	pop    ebx
c000bb54:	5e                   	pop    esi
c000bb55:	5f                   	pop    edi
c000bb56:	ff e0                	jmp    eax

c000bb58 <secondsToDatetime(unsigned long long)>:
c000bb58:	55                   	push   ebp
c000bb59:	57                   	push   edi
c000bb5a:	56                   	push   esi
c000bb5b:	53                   	push   ebx
c000bb5c:	83 ec 1c             	sub    esp,0x1c
c000bb5f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb63:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb6b:	6a 00                	push   0x0
c000bb6d:	68 80 51 01 00       	push   0x15180
c000bb72:	55                   	push   ebp
c000bb73:	57                   	push   edi
c000bb74:	e8 a7 2a 01 00       	call   c001e620 <__udivdi3>
c000bb79:	83 c4 10             	add    esp,0x10
c000bb7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb80:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bb86:	6a 00                	push   0x0
c000bb88:	68 80 51 01 00       	push   0x15180
c000bb8d:	55                   	push   ebp
c000bb8e:	57                   	push   edi
c000bb8f:	bf 10 0e 00 00       	mov    edi,0xe10
c000bb94:	e8 87 2b 01 00       	call   c001e720 <__umoddi3>
c000bb99:	83 c4 10             	add    esp,0x10
c000bb9c:	99                   	cdq    
c000bb9d:	f7 ff                	idiv   edi
c000bb9f:	bf 3c 00 00 00       	mov    edi,0x3c
c000bba4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bba7:	89 d0                	mov    eax,edx
c000bba9:	99                   	cdq    
c000bbaa:	f7 ff                	idiv   edi
c000bbac:	85 db                	test   ebx,ebx
c000bbae:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bbb1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bbb4:	79 11                	jns    c000bbc7 <secondsToDatetime(unsigned long long)+0x6f>
c000bbb6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bbba:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bbc0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbc5:	eb 07                	jmp    c000bbce <secondsToDatetime(unsigned long long)+0x76>
c000bbc7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbcc:	89 d8                	mov    eax,ebx
c000bbce:	99                   	cdq    
c000bbcf:	bf b4 05 00 00       	mov    edi,0x5b4
c000bbd4:	f7 f9                	idiv   ecx
c000bbd6:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bbdb:	31 d2                	xor    edx,edx
c000bbdd:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bbe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbe6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bbee:	01 c3                	add    ebx,eax
c000bbf0:	89 d8                	mov    eax,ebx
c000bbf2:	f7 f1                	div    ecx
c000bbf4:	31 d2                	xor    edx,edx
c000bbf6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bbf9:	89 d8                	mov    eax,ebx
c000bbfb:	f7 f7                	div    edi
c000bbfd:	31 d2                	xor    edx,edx
c000bbff:	29 c1                	sub    ecx,eax
c000bc01:	89 d8                	mov    eax,ebx
c000bc03:	f7 f5                	div    ebp
c000bc05:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bc0a:	31 d2                	xor    edx,edx
c000bc0c:	29 c1                	sub    ecx,eax
c000bc0e:	89 c8                	mov    eax,ecx
c000bc10:	f7 f5                	div    ebp
c000bc12:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bc17:	31 d2                	xor    edx,edx
c000bc19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc1d:	89 c8                	mov    eax,ecx
c000bc1f:	f7 f5                	div    ebp
c000bc21:	31 d2                	xor    edx,edx
c000bc23:	01 c3                	add    ebx,eax
c000bc25:	89 c8                	mov    eax,ecx
c000bc27:	f7 f7                	div    edi
c000bc29:	bf 99 00 00 00       	mov    edi,0x99
c000bc2e:	31 d2                	xor    edx,edx
c000bc30:	29 c3                	sub    ebx,eax
c000bc32:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc3a:	29 c3                	sub    ebx,eax
c000bc3c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc3f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc42:	83 c1 02             	add    ecx,0x2
c000bc45:	89 c8                	mov    eax,ecx
c000bc47:	bb 05 00 00 00       	mov    ebx,0x5
c000bc4c:	f7 f7                	div    edi
c000bc4e:	31 d2                	xor    edx,edx
c000bc50:	89 c7                	mov    edi,eax
c000bc52:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc58:	83 c0 02             	add    eax,0x2
c000bc5b:	f7 f3                	div    ebx
c000bc5d:	89 eb                	mov    ebx,ebp
c000bc5f:	29 c3                	sub    ebx,eax
c000bc61:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc67:	88 1e                	mov    BYTE PTR [esi],bl
c000bc69:	19 c0                	sbb    eax,eax
c000bc6b:	31 d2                	xor    edx,edx
c000bc6d:	83 e0 0c             	and    eax,0xc
c000bc70:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc74:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc7c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bc80:	83 f9 01             	cmp    ecx,0x1
c000bc83:	0f 96 c2             	setbe  dl
c000bc86:	41                   	inc    ecx
c000bc87:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bc8a:	01 d0                	add    eax,edx
c000bc8c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bc90:	83 c4 1c             	add    esp,0x1c
c000bc93:	89 f0                	mov    eax,esi
c000bc95:	5b                   	pop    ebx
c000bc96:	5e                   	pop    esi
c000bc97:	5f                   	pop    edi
c000bc98:	5d                   	pop    ebp
c000bc99:	c2 04 00             	ret    0x4

c000bc9c <Clock::timeInDatetimeLocal()>:
c000bc9c:	53                   	push   ebx
c000bc9d:	83 ec 14             	sub    esp,0x14
c000bca0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bca4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bca8:	e8 85 fc ff ff       	call   c000b932 <Clock::timeInSecondsLocal()>
c000bcad:	83 c4 0c             	add    esp,0xc
c000bcb0:	52                   	push   edx
c000bcb1:	50                   	push   eax
c000bcb2:	53                   	push   ebx
c000bcb3:	e8 a0 fe ff ff       	call   c000bb58 <secondsToDatetime(unsigned long long)>
c000bcb8:	89 d8                	mov    eax,ebx
c000bcba:	83 c4 14             	add    esp,0x14
c000bcbd:	5b                   	pop    ebx
c000bcbe:	c2 04 00             	ret    0x4
c000bcc1:	90                   	nop

c000bcc2 <Device::hibernate()>:
c000bcc2:	c3                   	ret    
c000bcc3:	90                   	nop

c000bcc4 <Device::wake()>:
c000bcc4:	c3                   	ret    
c000bcc5:	90                   	nop

c000bcc6 <Device::detect()>:
c000bcc6:	c3                   	ret    
c000bcc7:	90                   	nop

c000bcc8 <Device::disableLegacy()>:
c000bcc8:	c3                   	ret    
c000bcc9:	90                   	nop

c000bcca <Device::powerSaving(PowerSavingLevel)>:
c000bcca:	c3                   	ret    
c000bccb:	90                   	nop

c000bccc <DriverlessDevice::close(int, int, void*)>:
c000bccc:	31 c0                	xor    eax,eax
c000bcce:	c3                   	ret    
c000bccf:	90                   	nop

c000bcd0 <DriverlessDevice::detect()>:
c000bcd0:	c3                   	ret    
c000bcd1:	90                   	nop

c000bcd2 <DriverlessDevice::open(int, int, void*)>:
c000bcd2:	83 ec 18             	sub    esp,0x18
c000bcd5:	68 10 04 02 c0       	push   0xc0020410
c000bcda:	e8 6e 4b 00 00       	call   c001084d <KePanic(char const*)>
c000bcdf:	83 c8 ff             	or     eax,0xffffffff
c000bce2:	83 c4 1c             	add    esp,0x1c
c000bce5:	c3                   	ret    

c000bce6 <Device::~Device()>:
c000bce6:	ba 70 04 02 c0       	mov    edx,0xc0020470
c000bceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcef:	89 10                	mov    DWORD PTR [eax],edx
c000bcf1:	90                   	nop
c000bcf2:	c3                   	ret    
c000bcf3:	90                   	nop

c000bcf4 <Device::~Device()>:
c000bcf4:	83 ec 0c             	sub    esp,0xc
c000bcf7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bcfb:	e8 e6 ff ff ff       	call   c000bce6 <Device::~Device()>
c000bd00:	83 c4 04             	add    esp,0x4
c000bd03:	83 ec 08             	sub    esp,0x8
c000bd06:	68 58 01 00 00       	push   0x158
c000bd0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd0f:	e8 71 eb ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000bd14:	83 c4 10             	add    esp,0x10
c000bd17:	83 c4 0c             	add    esp,0xc
c000bd1a:	c3                   	ret    
c000bd1b:	90                   	nop

c000bd1c <Device::findAndLoadDriver()>:
c000bd1c:	c7 44 24 04 2e 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc002042e
c000bd24:	e9 5a ec ff ff       	jmp    c000a983 <Dbg::kprintf(char const*, ...)>
c000bd29:	90                   	nop

c000bd2a <Device::preOpenPCI(PCIDeviceInfo)>:
c000bd2a:	57                   	push   edi
c000bd2b:	b9 09 00 00 00       	mov    ecx,0x9
c000bd30:	56                   	push   esi
c000bd31:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd35:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd39:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd43:	81 c7 18 01 00 00    	add    edi,0x118
c000bd49:	fc                   	cld    
c000bd4a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd4c:	5e                   	pop    esi
c000bd4d:	5f                   	pop    edi
c000bd4e:	c3                   	ret    
c000bd4f:	90                   	nop

c000bd50 <Device::preOpenACPI(void*, char*, char*)>:
c000bd50:	57                   	push   edi
c000bd51:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd56:	56                   	push   esi
c000bd57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd5f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd63:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd6d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd73:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bd79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd7b:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bd81:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd85:	b9 0e 00 00 00       	mov    ecx,0xe
c000bd8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd8c:	5e                   	pop    esi
c000bd8d:	5f                   	pop    edi
c000bd8e:	c3                   	ret    
c000bd8f:	90                   	nop

c000bd90 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bd90:	53                   	push   ebx
c000bd91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd99:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bda1:	0f b6 c0             	movzx  eax,al
c000bda4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bda8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdac:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bdb0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdb4:	5b                   	pop    ebx
c000bdb5:	e9 aa 05 00 00       	jmp    c000c364 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bdba <Device::getParent()>:
c000bdba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdbe:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bdc4:	c3                   	ret    
c000bdc5:	90                   	nop

c000bdc6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bdc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bdca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdce:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bdd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bdd7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bddb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bddf:	e9 f7 06 00 00       	jmp    c000c4db <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bde4 <Device::addChild(Device*)>:
c000bde4:	53                   	push   ebx
c000bde5:	83 ec 08             	sub    esp,0x8
c000bde8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bdf0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bdf6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bdfc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bdfe:	85 d2                	test   edx,edx
c000be00:	74 04                	je     c000be06 <Device::addChild(Device*)+0x22>
c000be02:	89 d3                	mov    ebx,edx
c000be04:	eb f6                	jmp    c000bdfc <Device::addChild(Device*)+0x18>
c000be06:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000be09:	83 ec 0c             	sub    esp,0xc
c000be0c:	6a 08                	push   0x8
c000be0e:	e8 b8 bc ff ff       	call   c0007acb <malloc>
c000be13:	89 03                	mov    DWORD PTR [ebx],eax
c000be15:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be1b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be22:	83 c4 18             	add    esp,0x18
c000be25:	5b                   	pop    ebx
c000be26:	c3                   	ret    
c000be27:	90                   	nop

c000be28 <Device::removeAllChildren()>:
c000be28:	56                   	push   esi
c000be29:	53                   	push   ebx
c000be2a:	52                   	push   edx
c000be2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be2f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be38:	74 17                	je     c000be51 <Device::removeAllChildren()+0x29>
c000be3a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be3d:	85 c0                	test   eax,eax
c000be3f:	74 0c                	je     c000be4d <Device::removeAllChildren()+0x25>
c000be41:	8b 10                	mov    edx,DWORD PTR [eax]
c000be43:	83 ec 0c             	sub    esp,0xc
c000be46:	50                   	push   eax
c000be47:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be4a:	83 c4 10             	add    esp,0x10
c000be4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be4f:	eb e4                	jmp    c000be35 <Device::removeAllChildren()+0xd>
c000be51:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be5d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be6a:	58                   	pop    eax
c000be6b:	5b                   	pop    ebx
c000be6c:	5e                   	pop    esi
c000be6d:	c3                   	ret    

c000be6e <Device::hibernateAll()>:
c000be6e:	53                   	push   ebx
c000be6f:	83 ec 14             	sub    esp,0x14
c000be72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be76:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be78:	53                   	push   ebx
c000be79:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be7c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be88:	74 0f                	je     c000be99 <Device::hibernateAll()+0x2b>
c000be8a:	83 ec 0c             	sub    esp,0xc
c000be8d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be90:	e8 d9 ff ff ff       	call   c000be6e <Device::hibernateAll()>
c000be95:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be97:	eb e9                	jmp    c000be82 <Device::hibernateAll()+0x14>
c000be99:	83 c4 08             	add    esp,0x8
c000be9c:	5b                   	pop    ebx
c000be9d:	c3                   	ret    

c000be9e <Device::wakeAll()>:
c000be9e:	53                   	push   ebx
c000be9f:	83 ec 14             	sub    esp,0x14
c000bea2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bea6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bea8:	53                   	push   ebx
c000bea9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000beac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beb2:	83 c4 10             	add    esp,0x10
c000beb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000beb8:	74 0f                	je     c000bec9 <Device::wakeAll()+0x2b>
c000beba:	83 ec 0c             	sub    esp,0xc
c000bebd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bec0:	e8 d9 ff ff ff       	call   c000be9e <Device::wakeAll()>
c000bec5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bec7:	eb e9                	jmp    c000beb2 <Device::wakeAll()+0x14>
c000bec9:	83 c4 08             	add    esp,0x8
c000becc:	5b                   	pop    ebx
c000becd:	c3                   	ret    

c000bece <Device::detectAll()>:
c000bece:	53                   	push   ebx
c000becf:	83 ec 14             	sub    esp,0x14
c000bed2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bed6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bed8:	53                   	push   ebx
c000bed9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bedc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bee2:	83 c4 10             	add    esp,0x10
c000bee5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bee8:	74 0f                	je     c000bef9 <Device::detectAll()+0x2b>
c000beea:	83 ec 0c             	sub    esp,0xc
c000beed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bef0:	e8 d9 ff ff ff       	call   c000bece <Device::detectAll()>
c000bef5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bef7:	eb e9                	jmp    c000bee2 <Device::detectAll()+0x14>
c000bef9:	83 c4 08             	add    esp,0x8
c000befc:	5b                   	pop    ebx
c000befd:	c3                   	ret    

c000befe <Device::disableLegacyAll()>:
c000befe:	c3                   	ret    
c000beff:	90                   	nop

c000bf00 <Device::loadDriversForAll()>:
c000bf00:	c3                   	ret    
c000bf01:	90                   	nop

c000bf02 <Device::closeAll()>:
c000bf02:	53                   	push   ebx
c000bf03:	83 ec 08             	sub    esp,0x8
c000bf06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf0c:	6a 00                	push   0x0
c000bf0e:	6a 00                	push   0x0
c000bf10:	6a 00                	push   0x0
c000bf12:	53                   	push   ebx
c000bf13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf16:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf1c:	83 c4 10             	add    esp,0x10
c000bf1f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf22:	74 0f                	je     c000bf33 <Device::closeAll()+0x31>
c000bf24:	83 ec 0c             	sub    esp,0xc
c000bf27:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf2a:	e8 d3 ff ff ff       	call   c000bf02 <Device::closeAll()>
c000bf2f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf31:	eb e9                	jmp    c000bf1c <Device::closeAll()+0x1a>
c000bf33:	83 c4 08             	add    esp,0x8
c000bf36:	5b                   	pop    ebx
c000bf37:	c3                   	ret    

c000bf38 <Device::powerSavingAll(PowerSavingLevel)>:
c000bf38:	56                   	push   esi
c000bf39:	53                   	push   ebx
c000bf3a:	83 ec 0c             	sub    esp,0xc
c000bf3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf41:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf45:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf47:	56                   	push   esi
c000bf48:	53                   	push   ebx
c000bf49:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf52:	83 c4 10             	add    esp,0x10
c000bf55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf58:	74 0f                	je     c000bf69 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf5a:	52                   	push   edx
c000bf5b:	52                   	push   edx
c000bf5c:	56                   	push   esi
c000bf5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf60:	e8 d3 ff ff ff       	call   c000bf38 <Device::powerSavingAll(PowerSavingLevel)>
c000bf65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf67:	eb e9                	jmp    c000bf52 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf69:	58                   	pop    eax
c000bf6a:	5b                   	pop    ebx
c000bf6b:	5e                   	pop    esi
c000bf6c:	c3                   	ret    
c000bf6d:	90                   	nop

c000bf6e <Device::setName(char const*)>:
c000bf6e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf76:	e9 d5 46 ff ff       	jmp    c0000650 <strcpy>
c000bf7b:	90                   	nop

c000bf7c <Device::Device(char const*)>:
c000bf7c:	83 ec 1c             	sub    esp,0x1c
c000bf7f:	ba 70 04 02 c0       	mov    edx,0xc0020470
c000bf84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf88:	89 10                	mov    DWORD PTR [eax],edx
c000bf8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf8e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bf98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf9c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bfa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfaa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bfb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfb8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bfc2:	83 ec 08             	sub    esp,0x8
c000bfc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfcd:	e8 9c ff ff ff       	call   c000bf6e <Device::setName(char const*)>
c000bfd2:	83 c4 10             	add    esp,0x10
c000bfd5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bfdd:	83 ec 0c             	sub    esp,0xc
c000bfe0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfe4:	e8 e2 ba ff ff       	call   c0007acb <malloc>
c000bfe9:	83 c4 10             	add    esp,0x10
c000bfec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bff2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bff9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bffd:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c007:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c00d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c017:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c01d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c028:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c02f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c033:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c03a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c03e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c048:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c04c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c05a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c068:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c072:	90                   	nop
c000c073:	83 c4 1c             	add    esp,0x1c
c000c076:	c3                   	ret    
c000c077:	90                   	nop

c000c078 <Device::getName()>:
c000c078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c07c:	05 d0 00 00 00       	add    eax,0xd0
c000c081:	c3                   	ret    

c000c082 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c082:	83 ec 0c             	sub    esp,0xc
c000c085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c089:	83 ec 08             	sub    esp,0x8
c000c08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c090:	50                   	push   eax
c000c091:	e8 e6 fe ff ff       	call   c000bf7c <Device::Device(char const*)>
c000c096:	83 c4 10             	add    esp,0x10
c000c099:	ba 9c 04 02 c0       	mov    edx,0xc002049c
c000c09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a2:	89 10                	mov    DWORD PTR [eax],edx
c000c0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c0b2:	90                   	nop
c000c0b3:	83 c4 0c             	add    esp,0xc
c000c0b6:	c3                   	ret    
c000c0b7:	90                   	nop

c000c0b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c0b8:	57                   	push   edi
c000c0b9:	56                   	push   esi
c000c0ba:	53                   	push   ebx
c000c0bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0bf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c0c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c0c7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c0cd:	75 0c                	jne    c000c0db <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c0cf:	52                   	push   edx
c000c0d0:	52                   	push   edx
c000c0d1:	53                   	push   ebx
c000c0d2:	56                   	push   esi
c000c0d3:	e8 fa 29 01 00       	call   c001ead2 <LinkedList<Device>::addElement(Device*)>
c000c0d8:	83 c4 10             	add    esp,0x10
c000c0db:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0e4:	74 12                	je     c000c0f8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c0e6:	50                   	push   eax
c000c0e7:	57                   	push   edi
c000c0e8:	56                   	push   esi
c000c0e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0ec:	e8 c7 ff ff ff       	call   c000c0b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0f3:	83 c4 10             	add    esp,0x10
c000c0f6:	eb e9                	jmp    c000c0e1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c0f8:	5b                   	pop    ebx
c000c0f9:	5e                   	pop    esi
c000c0fa:	5f                   	pop    edi
c000c0fb:	c3                   	ret    

c000c0fc <getDevicesOfType(DeviceType)>:
c000c0fc:	53                   	push   ebx
c000c0fd:	83 ec 14             	sub    esp,0x14
c000c100:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c104:	53                   	push   ebx
c000c105:	e8 a4 2a 01 00       	call   c001ebae <LinkedList<Device>::LinkedList()>
c000c10a:	83 c4 0c             	add    esp,0xc
c000c10d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c111:	53                   	push   ebx
c000c112:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c118:	e8 9b ff ff ff       	call   c000c0b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c11d:	83 c4 18             	add    esp,0x18
c000c120:	89 d8                	mov    eax,ebx
c000c122:	5b                   	pop    ebx
c000c123:	c2 04 00             	ret    0x4
c000c126:	66 90                	xchg   ax,ax

c000c128 <HardDiskController::HardDiskController(char const*)>:
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12f:	83 ec 08             	sub    esp,0x8
c000c132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c136:	50                   	push   eax
c000c137:	e8 40 fe ff ff       	call   c000bf7c <Device::Device(char const*)>
c000c13c:	83 c4 10             	add    esp,0x10
c000c13f:	ba c8 04 02 c0       	mov    edx,0xc00204c8
c000c144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c148:	89 10                	mov    DWORD PTR [eax],edx
c000c14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c14e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c158:	90                   	nop
c000c159:	83 c4 0c             	add    esp,0xc
c000c15c:	c3                   	ret    
c000c15d:	90                   	nop
c000c15e:	66 90                	xchg   ax,ax

c000c160 <HardDiskController::~HardDiskController()>:
c000c160:	83 ec 0c             	sub    esp,0xc
c000c163:	ba c8 04 02 c0       	mov    edx,0xc00204c8
c000c168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c16c:	89 10                	mov    DWORD PTR [eax],edx
c000c16e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c172:	83 ec 0c             	sub    esp,0xc
c000c175:	50                   	push   eax
c000c176:	e8 6b fb ff ff       	call   c000bce6 <Device::~Device()>
c000c17b:	83 c4 10             	add    esp,0x10
c000c17e:	90                   	nop
c000c17f:	83 c4 0c             	add    esp,0xc
c000c182:	c3                   	ret    
c000c183:	90                   	nop

c000c184 <HardDiskController::~HardDiskController()>:
c000c184:	83 ec 0c             	sub    esp,0xc
c000c187:	83 ec 0c             	sub    esp,0xc
c000c18a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18e:	e8 cd ff ff ff       	call   c000c160 <HardDiskController::~HardDiskController()>
c000c193:	83 c4 10             	add    esp,0x10
c000c196:	83 ec 08             	sub    esp,0x8
c000c199:	68 58 01 00 00       	push   0x158
c000c19e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1a2:	e8 de e6 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000c1a7:	83 c4 10             	add    esp,0x10
c000c1aa:	83 c4 0c             	add    esp,0xc
c000c1ad:	c3                   	ret    

c000c1ae <PhysicalDisk::eject()>:
c000c1ae:	83 c8 ff             	or     eax,0xffffffff
c000c1b1:	c3                   	ret    

c000c1b2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c1b2:	83 ec 0c             	sub    esp,0xc
c000c1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b9:	83 ec 08             	sub    esp,0x8
c000c1bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1c0:	50                   	push   eax
c000c1c1:	e8 b6 fd ff ff       	call   c000bf7c <Device::Device(char const*)>
c000c1c6:	83 c4 10             	add    esp,0x10
c000c1c9:	ba f4 04 02 c0       	mov    edx,0xc00204f4
c000c1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1d2:	89 10                	mov    DWORD PTR [eax],edx
c000c1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1d8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1e3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1ee:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c200:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c20a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c214:	90                   	nop
c000c215:	83 c4 0c             	add    esp,0xc
c000c218:	c3                   	ret    
c000c219:	90                   	nop

c000c21a <PhysicalDisk::startCache()>:
c000c21a:	56                   	push   esi
c000c21b:	53                   	push   ebx
c000c21c:	83 ec 10             	sub    esp,0x10
c000c21f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c223:	6a 44                	push   0x44
c000c225:	e8 a1 b8 ff ff       	call   c0007acb <malloc>
c000c22a:	89 c6                	mov    esi,eax
c000c22c:	58                   	pop    eax
c000c22d:	5a                   	pop    edx
c000c22e:	53                   	push   ebx
c000c22f:	56                   	push   esi
c000c230:	e8 83 17 00 00       	call   c000d9b8 <VCache::VCache(PhysicalDisk*)>
c000c235:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c23b:	83 c4 14             	add    esp,0x14
c000c23e:	5b                   	pop    ebx
c000c23f:	5e                   	pop    esi
c000c240:	c3                   	ret    
c000c241:	90                   	nop

c000c242 <PhysicalDisk::~PhysicalDisk()>:
c000c242:	83 ec 0c             	sub    esp,0xc
c000c245:	ba f4 04 02 c0       	mov    edx,0xc00204f4
c000c24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c24e:	89 10                	mov    DWORD PTR [eax],edx
c000c250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c254:	83 ec 0c             	sub    esp,0xc
c000c257:	50                   	push   eax
c000c258:	e8 89 fa ff ff       	call   c000bce6 <Device::~Device()>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	90                   	nop
c000c261:	83 c4 0c             	add    esp,0xc
c000c264:	c3                   	ret    
c000c265:	90                   	nop

c000c266 <PhysicalDisk::~PhysicalDisk()>:
c000c266:	83 ec 0c             	sub    esp,0xc
c000c269:	83 ec 0c             	sub    esp,0xc
c000c26c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c270:	e8 cd ff ff ff       	call   c000c242 <PhysicalDisk::~PhysicalDisk()>
c000c275:	83 c4 10             	add    esp,0x10
c000c278:	83 ec 08             	sub    esp,0x8
c000c27b:	68 6c 01 00 00       	push   0x16c
c000c280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c284:	e8 fc e5 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000c289:	83 c4 10             	add    esp,0x10
c000c28c:	83 c4 0c             	add    esp,0xc
c000c28f:	c3                   	ret    

c000c290 <int_handler>:
c000c290:	55                   	push   ebp
c000c291:	57                   	push   edi
c000c292:	56                   	push   esi
c000c293:	53                   	push   ebx
c000c294:	83 ec 0c             	sub    esp,0xc
c000c297:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c29e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c2a2:	74 0b                	je     c000c2af <int_handler+0x1f>
c000c2a4:	fa                   	cli    
c000c2a5:	f4                   	hlt    
c000c2a6:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2ad:	75 f5                	jne    c000c2a4 <int_handler+0x14>
c000c2af:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c2b2:	8d 46 e0             	lea    eax,[esi-0x20]
c000c2b5:	83 f8 17             	cmp    eax,0x17
c000c2b8:	76 40                	jbe    c000c2fa <int_handler+0x6a>
c000c2ba:	c1 e6 04             	shl    esi,0x4
c000c2bd:	31 db                	xor    ebx,ebx
c000c2bf:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c2c5:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c2cb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c2cf:	85 c0                	test   eax,eax
c000c2d1:	74 13                	je     c000c2e6 <int_handler+0x56>
c000c2d3:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c2d7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c2da:	74 2c                	je     c000c308 <int_handler+0x78>
c000c2dc:	83 ec 08             	sub    esp,0x8
c000c2df:	52                   	push   edx
c000c2e0:	57                   	push   edi
c000c2e1:	ff d0                	call   eax
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	83 c3 01             	add    ebx,0x1
c000c2e9:	83 fb 04             	cmp    ebx,0x4
c000c2ec:	75 dd                	jne    c000c2cb <int_handler+0x3b>
c000c2ee:	83 c4 0c             	add    esp,0xc
c000c2f1:	31 c0                	xor    eax,eax
c000c2f3:	5b                   	pop    ebx
c000c2f4:	31 d2                	xor    edx,edx
c000c2f6:	5e                   	pop    esi
c000c2f7:	5f                   	pop    edi
c000c2f8:	5d                   	pop    ebp
c000c2f9:	c3                   	ret    
c000c2fa:	83 ec 0c             	sub    esp,0xc
c000c2fd:	50                   	push   eax
c000c2fe:	e8 81 af 00 00       	call   c0017284 <HalEndOfInterrupt(int)>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	eb b2                	jmp    c000c2ba <int_handler+0x2a>
c000c308:	83 ec 08             	sub    esp,0x8
c000c30b:	52                   	push   edx
c000c30c:	57                   	push   edi
c000c30d:	ff d0                	call   eax
c000c30f:	83 c4 10             	add    esp,0x10
c000c312:	83 c4 0c             	add    esp,0xc
c000c315:	5b                   	pop    ebx
c000c316:	5e                   	pop    esi
c000c317:	5f                   	pop    edi
c000c318:	5d                   	pop    ebp
c000c319:	c3                   	ret    

c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c31a:	56                   	push   esi
c000c31b:	31 c0                	xor    eax,eax
c000c31d:	53                   	push   ebx
c000c31e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c322:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c326:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c32a:	89 ca                	mov    edx,ecx
c000c32c:	c1 e2 04             	shl    edx,0x4
c000c32f:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c337:	74 17                	je     c000c350 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c339:	83 c0 01             	add    eax,0x1
c000c33c:	83 f8 04             	cmp    eax,0x4
c000c33f:	75 ee                	jne    c000c32f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c341:	c7 44 24 0c 24 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020524
c000c349:	5b                   	pop    ebx
c000c34a:	5e                   	pop    esi
c000c34b:	e9 fd 44 00 00       	jmp    c001084d <KePanic(char const*)>
c000c350:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c353:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c35a:	5b                   	pop    ebx
c000c35b:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c362:	5e                   	pop    esi
c000c363:	c3                   	ret    

c000c364 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c364:	55                   	push   ebp
c000c365:	57                   	push   edi
c000c366:	56                   	push   esi
c000c367:	53                   	push   ebx
c000c368:	83 ec 0c             	sub    esp,0xc
c000c36b:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c371:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c375:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c379:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c380:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c383:	74 57                	je     c000c3dc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c385:	84 c0                	test   al,al
c000c387:	89 c7                	mov    edi,eax
c000c389:	74 1d                	je     c000c3a8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c38b:	83 fe 0f             	cmp    esi,0xf
c000c38e:	0f 8f d9 00 00 00    	jg     c000c46d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c394:	0f b6 b6 a0 1f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde060]
c000c39b:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c3a3:	d1 ef                	shr    edi,1
c000c3a5:	83 e7 01             	and    edi,0x1
c000c3a8:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3ad:	83 ec 08             	sub    esp,0x8
c000c3b0:	31 db                	xor    ebx,ebx
c000c3b2:	50                   	push   eax
c000c3b3:	68 31 05 02 c0       	push   0xc0020531
c000c3b8:	e8 c6 e5 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000c3bd:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3c2:	83 c4 10             	add    esp,0x10
c000c3c5:	85 c0                	test   eax,eax
c000c3c7:	7f 59                	jg     c000c422 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c3c9:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c3cc:	83 ec 0c             	sub    esp,0xc
c000c3cf:	68 48 05 02 c0       	push   0xc0020548
c000c3d4:	e8 74 44 00 00       	call   c001084d <KePanic(char const*)>
c000c3d9:	83 c4 10             	add    esp,0x10
c000c3dc:	89 e8                	mov    eax,ebp
c000c3de:	31 d2                	xor    edx,edx
c000c3e0:	c1 e0 04             	shl    eax,0x4
c000c3e3:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c3ea:	85 c9                	test   ecx,ecx
c000c3ec:	0f 84 92 00 00 00    	je     c000c484 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c3f2:	83 c2 01             	add    edx,0x1
c000c3f5:	83 fa 04             	cmp    edx,0x4
c000c3f8:	75 e9                	jne    c000c3e3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c3fa:	83 ec 0c             	sub    esp,0xc
c000c3fd:	68 9c 05 02 c0       	push   0xc002059c
c000c402:	e8 46 44 00 00       	call   c001084d <KePanic(char const*)>
c000c407:	83 c4 10             	add    esp,0x10
c000c40a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c40f:	83 c4 0c             	add    esp,0xc
c000c412:	5b                   	pop    ebx
c000c413:	5e                   	pop    esi
c000c414:	5f                   	pop    edi
c000c415:	5d                   	pop    ebp
c000c416:	c3                   	ret    
c000c417:	83 c3 01             	add    ebx,0x1
c000c41a:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c420:	7e a7                	jle    c000c3c9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c422:	8b 2c 9d 80 8b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd7480]
c000c429:	83 ec 08             	sub    esp,0x8
c000c42c:	56                   	push   esi
c000c42d:	55                   	push   ebp
c000c42e:	e8 c5 15 01 00       	call   c001d9f8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c433:	83 c4 10             	add    esp,0x10
c000c436:	84 c0                	test   al,al
c000c438:	74 dd                	je     c000c417 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c43a:	89 f8                	mov    eax,edi
c000c43c:	83 ec 04             	sub    esp,0x4
c000c43f:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c446:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c449:	0f b6 f8             	movzx  edi,al
c000c44c:	57                   	push   edi
c000c44d:	89 e8                	mov    eax,ebp
c000c44f:	6a 00                	push   0x0
c000c451:	0f b6 c0             	movzx  eax,al
c000c454:	50                   	push   eax
c000c455:	89 f0                	mov    eax,esi
c000c457:	6a 00                	push   0x0
c000c459:	0f b6 c0             	movzx  eax,al
c000c45c:	6a 00                	push   0x0
c000c45e:	50                   	push   eax
c000c45f:	53                   	push   ebx
c000c460:	e8 ff 16 01 00       	call   c001db64 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c465:	83 c4 20             	add    esp,0x20
c000c468:	e9 6f ff ff ff       	jmp    c000c3dc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c46d:	83 ec 0c             	sub    esp,0xc
c000c470:	31 ff                	xor    edi,edi
c000c472:	68 64 05 02 c0       	push   0xc0020564
c000c477:	e8 d1 43 00 00       	call   c001084d <KePanic(char const*)>
c000c47c:	83 c4 10             	add    esp,0x10
c000c47f:	e9 24 ff ff ff       	jmp    c000c3a8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c484:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c487:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c48b:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c492:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c496:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c49d:	83 c4 0c             	add    esp,0xc
c000c4a0:	89 f0                	mov    eax,esi
c000c4a2:	5b                   	pop    ebx
c000c4a3:	5e                   	pop    esi
c000c4a4:	5f                   	pop    edi
c000c4a5:	5d                   	pop    ebp
c000c4a6:	c3                   	ret    

c000c4a7 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4ab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4af:	c1 e0 04             	shl    eax,0x4
c000c4b2:	8d 50 10             	lea    edx,[eax+0x10]
c000c4b5:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c4bb:	74 08                	je     c000c4c5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c4bd:	83 c0 04             	add    eax,0x4
c000c4c0:	39 d0                	cmp    eax,edx
c000c4c2:	75 f1                	jne    c000c4b5 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c4c4:	c3                   	ret    
c000c4c5:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4cf:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4d9:	eb e2                	jmp    c000c4bd <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c4db <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c4db:	56                   	push   esi
c000c4dc:	53                   	push   ebx
c000c4dd:	83 ec 04             	sub    esp,0x4
c000c4e0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c4e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c4ed:	74 0e                	je     c000c4fd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c4ef:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c4f4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c4fb:	75 34                	jne    c000c531 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000c4fd:	8d 43 20             	lea    eax,[ebx+0x20]
c000c500:	c1 e0 04             	shl    eax,0x4
c000c503:	8d 50 10             	lea    edx,[eax+0x10]
c000c506:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c50c:	74 0d                	je     c000c51b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c50e:	83 c0 04             	add    eax,0x4
c000c511:	39 d0                	cmp    eax,edx
c000c513:	75 f1                	jne    c000c506 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c515:	83 c4 04             	add    esp,0x4
c000c518:	5b                   	pop    ebx
c000c519:	5e                   	pop    esi
c000c51a:	c3                   	ret    
c000c51b:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c525:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c52f:	eb dd                	jmp    c000c50e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c531:	83 fb 0f             	cmp    ebx,0xf
c000c534:	7f 09                	jg     c000c53f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000c536:	0f b6 9b a0 1f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde060]
c000c53d:	eb be                	jmp    c000c4fd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c53f:	83 ec 0c             	sub    esp,0xc
c000c542:	68 55 05 02 c0       	push   0xc0020555
c000c547:	e8 01 43 00 00       	call   c001084d <KePanic(char const*)>
c000c54c:	83 c4 10             	add    esp,0x10
c000c54f:	eb ac                	jmp    c000c4fd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c551 <setupINTS()>:
c000c551:	31 c0                	xor    eax,eax
c000c553:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c55d:	83 c0 10             	add    eax,0x10
c000c560:	c7 80 b0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb050],0x0
c000c56a:	c7 80 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda04c],0x0
c000c574:	c7 80 b4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb04c],0x0
c000c57e:	c7 80 b8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda048],0x0
c000c588:	c7 80 b8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb048],0x0
c000c592:	c7 80 bc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda044],0x0
c000c59c:	c7 80 bc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb044],0x0
c000c5a6:	3d 00 10 00 00       	cmp    eax,0x1000
c000c5ab:	75 a6                	jne    c000c553 <setupINTS()+0x2>
c000c5ad:	c3                   	ret    

c000c5ae <convertLegacyIRQNumber(int)>:
c000c5ae:	83 ec 0c             	sub    esp,0xc
c000c5b1:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5bb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5c2:	74 0c                	je     c000c5d0 <convertLegacyIRQNumber(int)+0x22>
c000c5c4:	83 f8 0f             	cmp    eax,0xf
c000c5c7:	7f 0b                	jg     c000c5d4 <convertLegacyIRQNumber(int)+0x26>
c000c5c9:	0f b6 80 a0 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde060]
c000c5d0:	83 c4 0c             	add    esp,0xc
c000c5d3:	c3                   	ret    
c000c5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5d8:	83 ec 0c             	sub    esp,0xc
c000c5db:	68 64 05 02 c0       	push   0xc0020564
c000c5e0:	e8 68 42 00 00       	call   c001084d <KePanic(char const*)>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5ec:	83 c4 0c             	add    esp,0xc
c000c5ef:	c3                   	ret    

c000c5f0 <startGUI(void*)>:
c000c5f0:	55                   	push   ebp
c000c5f1:	89 e5                	mov    ebp,esp
c000c5f3:	53                   	push   ebx
c000c5f4:	83 ec 04             	sub    esp,0x4
c000c5f7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5fc:	83 e8 01             	sub    eax,0x1
c000c5ff:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c604:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c609:	85 c0                	test   eax,eax
c000c60b:	75 01                	jne    c000c60e <startGUI(void*)+0x1e>
c000c60d:	fb                   	sti    
c000c60e:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c614:	83 ec 08             	sub    esp,0x8
c000c617:	6a 01                	push   0x1
c000c619:	68 c1 05 02 c0       	push   0xc00205c1
c000c61e:	e8 b9 7f 00 00       	call   c00145dc <Thr::loadDLL(char const*, bool)>
c000c623:	83 c4 10             	add    esp,0x10
c000c626:	83 ec 08             	sub    esp,0x8
c000c629:	53                   	push   ebx
c000c62a:	50                   	push   eax
c000c62b:	e8 ec 81 00 00       	call   c001481c <Thr::executeDLL(unsigned long, void*)>
c000c630:	83 c4 10             	add    esp,0x10
c000c633:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c639:	83 ec 08             	sub    esp,0x8
c000c63c:	6a 01                	push   0x1
c000c63e:	68 db 05 02 c0       	push   0xc00205db
c000c643:	e8 94 7f 00 00       	call   c00145dc <Thr::loadDLL(char const*, bool)>
c000c648:	83 c4 10             	add    esp,0x10
c000c64b:	83 ec 08             	sub    esp,0x8
c000c64e:	53                   	push   ebx
c000c64f:	50                   	push   eax
c000c650:	e8 c7 81 00 00       	call   c001481c <Thr::executeDLL(unsigned long, void*)>
c000c655:	83 c4 10             	add    esp,0x10
c000c658:	90                   	nop
c000c659:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c65c:	c9                   	leave  
c000c65d:	c3                   	ret    

c000c65e <startGUIVESA(void*)>:
c000c65e:	55                   	push   ebp
c000c65f:	89 e5                	mov    ebp,esp
c000c661:	53                   	push   ebx
c000c662:	83 ec 04             	sub    esp,0x4
c000c665:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c66a:	83 e8 01             	sub    eax,0x1
c000c66d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c672:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c677:	85 c0                	test   eax,eax
c000c679:	75 01                	jne    c000c67c <startGUIVESA(void*)+0x1e>
c000c67b:	fb                   	sti    
c000c67c:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c682:	83 ec 08             	sub    esp,0x8
c000c685:	6a 01                	push   0x1
c000c687:	68 f9 05 02 c0       	push   0xc00205f9
c000c68c:	e8 4b 7f 00 00       	call   c00145dc <Thr::loadDLL(char const*, bool)>
c000c691:	83 c4 10             	add    esp,0x10
c000c694:	83 ec 08             	sub    esp,0x8
c000c697:	53                   	push   ebx
c000c698:	50                   	push   eax
c000c699:	e8 7e 81 00 00       	call   c001481c <Thr::executeDLL(unsigned long, void*)>
c000c69e:	83 c4 10             	add    esp,0x10
c000c6a1:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6a7:	83 ec 08             	sub    esp,0x8
c000c6aa:	6a 01                	push   0x1
c000c6ac:	68 db 05 02 c0       	push   0xc00205db
c000c6b1:	e8 26 7f 00 00       	call   c00145dc <Thr::loadDLL(char const*, bool)>
c000c6b6:	83 c4 10             	add    esp,0x10
c000c6b9:	83 ec 08             	sub    esp,0x8
c000c6bc:	53                   	push   ebx
c000c6bd:	50                   	push   eax
c000c6be:	e8 59 81 00 00       	call   c001481c <Thr::executeDLL(unsigned long, void*)>
c000c6c3:	83 c4 10             	add    esp,0x10
c000c6c6:	90                   	nop
c000c6c7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c6ca:	c9                   	leave  
c000c6cb:	c3                   	ret    

c000c6cc <sendKeyToTerminal(unsigned char)>:
c000c6cc:	55                   	push   ebp
c000c6cd:	89 e5                	mov    ebp,esp
c000c6cf:	83 ec 28             	sub    esp,0x28
c000c6d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c6d8:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c6dd:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c6e1:	83 ec 08             	sub    esp,0x8
c000c6e4:	52                   	push   edx
c000c6e5:	50                   	push   eax
c000c6e6:	e8 bb c6 ff ff       	call   c0008da6 <VgaText::receiveKey(unsigned char)>
c000c6eb:	83 c4 10             	add    esp,0x10
c000c6ee:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6f2:	83 f8 0a             	cmp    eax,0xa
c000c6f5:	74 16                	je     c000c70d <sendKeyToTerminal(unsigned char)+0x41>
c000c6f7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6fb:	83 f8 03             	cmp    eax,0x3
c000c6fe:	74 0d                	je     c000c70d <sendKeyToTerminal(unsigned char)+0x41>
c000c700:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c704:	83 f8 1c             	cmp    eax,0x1c
c000c707:	0f 85 97 00 00 00    	jne    c000c7a4 <sendKeyToTerminal(unsigned char)+0xd8>
c000c70d:	fa                   	cli    
c000c70e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c713:	83 c0 01             	add    eax,0x1
c000c716:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c71b:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c720:	83 c0 01             	add    eax,0x1
c000c723:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c728:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c72d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c730:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c73a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c73e:	74 1f                	je     c000c75f <sendKeyToTerminal(unsigned char)+0x93>
c000c740:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c743:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c746:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c749:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c74c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c74f:	83 ec 0c             	sub    esp,0xc
c000c752:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c755:	e8 e6 8d 00 00       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c000c75a:	83 c4 10             	add    esp,0x10
c000c75d:	eb db                	jmp    c000c73a <sendKeyToTerminal(unsigned char)+0x6e>
c000c75f:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c764:	83 e8 01             	sub    eax,0x1
c000c767:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c76c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c771:	85 c0                	test   eax,eax
c000c773:	75 18                	jne    c000c78d <sendKeyToTerminal(unsigned char)+0xc1>
c000c775:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c77a:	85 c0                	test   eax,eax
c000c77c:	74 0f                	je     c000c78d <sendKeyToTerminal(unsigned char)+0xc1>
c000c77e:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c788:	e8 bb 88 00 00       	call   c0015048 <schedule()>
c000c78d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c792:	83 e8 01             	sub    eax,0x1
c000c795:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c79a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c79f:	85 c0                	test   eax,eax
c000c7a1:	75 01                	jne    c000c7a4 <sendKeyToTerminal(unsigned char)+0xd8>
c000c7a3:	fb                   	sti    
c000c7a4:	90                   	nop
c000c7a5:	c9                   	leave  
c000c7a6:	c3                   	ret    

c000c7a7 <sendKeyboardToken(KeyboardToken)>:
c000c7a7:	55                   	push   ebp
c000c7a8:	89 e5                	mov    ebp,esp
c000c7aa:	83 ec 18             	sub    esp,0x18
c000c7ad:	e8 eb 40 00 00       	call   c001089d <Krnl::userIOReceived()>
c000c7b2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c7b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7b8:	0f b7 c0             	movzx  eax,ax
c000c7bb:	83 f2 01             	xor    edx,0x1
c000c7be:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c7c4:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c7c9:	85 c0                	test   eax,eax
c000c7cb:	74 24                	je     c000c7f1 <sendKeyboardToken(KeyboardToken)+0x4a>
c000c7cd:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000c7d3:	83 ec 04             	sub    esp,0x4
c000c7d6:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c7db:	83 ec 08             	sub    esp,0x8
c000c7de:	89 e0                	mov    eax,esp
c000c7e0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000c7e3:	89 08                	mov    DWORD PTR [eax],ecx
c000c7e5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000c7e8:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000c7ec:	ff d2                	call   edx
c000c7ee:	83 c4 10             	add    esp,0x10
c000c7f1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c7f5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c7f8:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7fd:	0f b6 d2             	movzx  edx,dl
c000c800:	0f b6 c0             	movzx  eax,al
c000c803:	39 c2                	cmp    edx,eax
c000c805:	74 1c                	je     c000c823 <sendKeyboardToken(KeyboardToken)+0x7c>
c000c807:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c80a:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c80f:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c814:	0f b6 c0             	movzx  eax,al
c000c817:	83 ec 0c             	sub    esp,0xc
c000c81a:	50                   	push   eax
c000c81b:	e8 e2 bc ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000c820:	83 c4 10             	add    esp,0x10
c000c823:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c826:	0f b6 c0             	movzx  eax,al
c000c829:	85 c0                	test   eax,eax
c000c82b:	0f 84 da 00 00 00    	je     c000c90b <sendKeyboardToken(KeyboardToken)+0x164>
c000c831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c834:	0f b7 c0             	movzx  eax,ax
c000c837:	3d 18 03 00 00       	cmp    eax,0x318
c000c83c:	75 06                	jne    c000c844 <sendKeyboardToken(KeyboardToken)+0x9d>
c000c83e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c847:	0f b7 c0             	movzx  eax,ax
c000c84a:	3d 19 03 00 00       	cmp    eax,0x319
c000c84f:	75 06                	jne    c000c857 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c851:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c85a:	0f b7 c0             	movzx  eax,ax
c000c85d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c862:	75 06                	jne    c000c86a <sendKeyboardToken(KeyboardToken)+0xc3>
c000c864:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c86a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c86d:	0f b7 c0             	movzx  eax,ax
c000c870:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c875:	75 06                	jne    c000c87d <sendKeyboardToken(KeyboardToken)+0xd6>
c000c877:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c87d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c880:	0f b7 c0             	movzx  eax,ax
c000c883:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c888:	75 06                	jne    c000c890 <sendKeyboardToken(KeyboardToken)+0xe9>
c000c88a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c893:	0f b7 c0             	movzx  eax,ax
c000c896:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c89b:	75 06                	jne    c000c8a3 <sendKeyboardToken(KeyboardToken)+0xfc>
c000c89d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c8a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8a6:	0f b7 c0             	movzx  eax,ax
c000c8a9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c8ae:	75 06                	jne    c000c8b6 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c8b0:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c8b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b9:	0f b7 c0             	movzx  eax,ax
c000c8bc:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c8c1:	75 06                	jne    c000c8c9 <sendKeyboardToken(KeyboardToken)+0x122>
c000c8c3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c8c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8cc:	0f b7 c0             	movzx  eax,ax
c000c8cf:	3d 20 03 00 00       	cmp    eax,0x320
c000c8d4:	75 06                	jne    c000c8dc <sendKeyboardToken(KeyboardToken)+0x135>
c000c8d6:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c8dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8df:	0f b7 c0             	movzx  eax,ax
c000c8e2:	3d 21 03 00 00       	cmp    eax,0x321
c000c8e7:	75 06                	jne    c000c8ef <sendKeyboardToken(KeyboardToken)+0x148>
c000c8e9:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c8ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8f2:	0f b7 c0             	movzx  eax,ax
c000c8f5:	3d 22 03 00 00       	cmp    eax,0x322
c000c8fa:	0f 85 f1 00 00 00    	jne    c000c9f1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c900:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c906:	e9 e6 00 00 00       	jmp    c000c9f1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c90b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c90e:	0f b7 c0             	movzx  eax,ax
c000c911:	3d 18 03 00 00       	cmp    eax,0x318
c000c916:	75 0a                	jne    c000c922 <sendKeyboardToken(KeyboardToken)+0x17b>
c000c918:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c91e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c925:	0f b7 c0             	movzx  eax,ax
c000c928:	3d 19 03 00 00       	cmp    eax,0x319
c000c92d:	75 0a                	jne    c000c939 <sendKeyboardToken(KeyboardToken)+0x192>
c000c92f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c935:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c93c:	0f b7 c0             	movzx  eax,ax
c000c93f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c944:	75 0a                	jne    c000c950 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c946:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c94c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c953:	0f b7 c0             	movzx  eax,ax
c000c956:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c95b:	75 0a                	jne    c000c967 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c95d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c963:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	0f b7 c0             	movzx  eax,ax
c000c96d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c972:	75 0a                	jne    c000c97e <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c974:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c97a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c97e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c981:	0f b7 c0             	movzx  eax,ax
c000c984:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c989:	75 0a                	jne    c000c995 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c98b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c991:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c998:	0f b7 c0             	movzx  eax,ax
c000c99b:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c9a0:	75 0a                	jne    c000c9ac <sendKeyboardToken(KeyboardToken)+0x205>
c000c9a2:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c9a8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9af:	0f b7 c0             	movzx  eax,ax
c000c9b2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c9b7:	75 0a                	jne    c000c9c3 <sendKeyboardToken(KeyboardToken)+0x21c>
c000c9b9:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c9bf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9c6:	0f b7 c0             	movzx  eax,ax
c000c9c9:	3d 20 03 00 00       	cmp    eax,0x320
c000c9ce:	75 0a                	jne    c000c9da <sendKeyboardToken(KeyboardToken)+0x233>
c000c9d0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c9d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9dd:	0f b7 c0             	movzx  eax,ax
c000c9e0:	3d 21 03 00 00       	cmp    eax,0x321
c000c9e5:	75 0a                	jne    c000c9f1 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c9e7:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c9ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9f4:	0f b7 c0             	movzx  eax,ax
c000c9f7:	3d 00 02 00 00       	cmp    eax,0x200
c000c9fc:	75 2f                	jne    c000ca2d <sendKeyboardToken(KeyboardToken)+0x286>
c000c9fe:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca03:	83 f0 01             	xor    eax,0x1
c000ca06:	0f b6 c0             	movzx  eax,al
c000ca09:	85 c0                	test   eax,eax
c000ca0b:	74 20                	je     c000ca2d <sendKeyboardToken(KeyboardToken)+0x286>
c000ca0d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca12:	6a 01                	push   0x1
c000ca14:	6a 00                	push   0x0
c000ca16:	68 f0 c5 00 c0       	push   0xc000c5f0
c000ca1b:	50                   	push   eax
c000ca1c:	e8 db 83 00 00       	call   c0014dfc <Process::createThread(void (*)(void*), void*, int)>
c000ca21:	83 c4 10             	add    esp,0x10
c000ca24:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca2b:	eb 3a                	jmp    c000ca67 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca30:	0f b7 c0             	movzx  eax,ax
c000ca33:	3d 01 02 00 00       	cmp    eax,0x201
c000ca38:	75 2d                	jne    c000ca67 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca3a:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca3f:	83 f0 01             	xor    eax,0x1
c000ca42:	0f b6 c0             	movzx  eax,al
c000ca45:	85 c0                	test   eax,eax
c000ca47:	74 1e                	je     c000ca67 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca49:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca4e:	6a 01                	push   0x1
c000ca50:	6a 00                	push   0x0
c000ca52:	68 5e c6 00 c0       	push   0xc000c65e
c000ca57:	50                   	push   eax
c000ca58:	e8 9f 83 00 00       	call   c0014dfc <Process::createThread(void (*)(void*), void*, int)>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca6a:	0f b7 c0             	movzx  eax,ax
c000ca6d:	3d 25 03 00 00       	cmp    eax,0x325
c000ca72:	75 06                	jne    c000ca7a <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ca74:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca7d:	0f b7 c0             	movzx  eax,ax
c000ca80:	3d 24 03 00 00       	cmp    eax,0x324
c000ca85:	75 06                	jne    c000ca8d <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ca87:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ca8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca90:	0f b7 c0             	movzx  eax,ax
c000ca93:	3d 23 03 00 00       	cmp    eax,0x323
c000ca98:	75 06                	jne    c000caa0 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000ca9a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000caa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa3:	0f b7 c0             	movzx  eax,ax
c000caa6:	3d 26 03 00 00       	cmp    eax,0x326
c000caab:	75 06                	jne    c000cab3 <sendKeyboardToken(KeyboardToken)+0x30c>
c000caad:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab6:	0f b7 c0             	movzx  eax,ax
c000cab9:	3d 27 03 00 00       	cmp    eax,0x327
c000cabe:	75 06                	jne    c000cac6 <sendKeyboardToken(KeyboardToken)+0x31f>
c000cac0:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac9:	0f b7 c0             	movzx  eax,ax
c000cacc:	3d 22 03 00 00       	cmp    eax,0x322
c000cad1:	75 06                	jne    c000cad9 <sendKeyboardToken(KeyboardToken)+0x332>
c000cad3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cad9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cadd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cae0:	83 f0 01             	xor    eax,0x1
c000cae3:	0f b6 c0             	movzx  eax,al
c000cae6:	85 c0                	test   eax,eax
c000cae8:	74 7c                	je     c000cb66 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000caea:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000caef:	0f b6 c0             	movzx  eax,al
c000caf2:	85 c0                	test   eax,eax
c000caf4:	74 43                	je     c000cb39 <sendKeyboardToken(KeyboardToken)+0x392>
c000caf6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cafa:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cafe:	85 c0                	test   eax,eax
c000cb00:	74 2b                	je     c000cb2d <sendKeyboardToken(KeyboardToken)+0x386>
c000cb02:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cb08:	89 d0                	mov    eax,edx
c000cb0a:	c1 e0 02             	shl    eax,0x2
c000cb0d:	01 d0                	add    eax,edx
c000cb0f:	d1 e0                	shl    eax,1
c000cb11:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb19:	0f b7 c0             	movzx  eax,ax
c000cb1c:	8d 50 d0             	lea    edx,[eax-0x30]
c000cb1f:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb24:	01 d0                	add    eax,edx
c000cb26:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb2b:	eb 71                	jmp    c000cb9e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb2d:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb37:	eb 65                	jmp    c000cb9e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb39:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb3e:	85 c0                	test   eax,eax
c000cb40:	74 18                	je     c000cb5a <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cb42:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb47:	0f b6 c0             	movzx  eax,al
c000cb4a:	83 ec 0c             	sub    esp,0xc
c000cb4d:	50                   	push   eax
c000cb4e:	e8 79 fb ff ff       	call   c000c6cc <sendKeyToTerminal(unsigned char)>
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb5a:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb64:	eb 38                	jmp    c000cb9e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb69:	0f b7 c0             	movzx  eax,ax
c000cb6c:	3d 01 01 00 00       	cmp    eax,0x101
c000cb71:	75 2b                	jne    c000cb9e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb73:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb78:	85 c0                	test   eax,eax
c000cb7a:	74 18                	je     c000cb94 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cb7c:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb81:	0f b6 c0             	movzx  eax,al
c000cb84:	83 ec 0c             	sub    esp,0xc
c000cb87:	50                   	push   eax
c000cb88:	e8 3f fb ff ff       	call   c000c6cc <sendKeyToTerminal(unsigned char)>
c000cb8d:	83 c4 10             	add    esp,0x10
c000cb90:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb94:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb9e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cba1:	83 f0 01             	xor    eax,0x1
c000cba4:	0f b6 c0             	movzx  eax,al
c000cba7:	85 c0                	test   eax,eax
c000cba9:	74 5a                	je     c000cc05 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbab:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbae:	83 f0 01             	xor    eax,0x1
c000cbb1:	0f b6 c0             	movzx  eax,al
c000cbb4:	85 c0                	test   eax,eax
c000cbb6:	74 4d                	je     c000cc05 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbb8:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbbd:	83 f0 01             	xor    eax,0x1
c000cbc0:	0f b6 c0             	movzx  eax,al
c000cbc3:	85 c0                	test   eax,eax
c000cbc5:	74 3e                	je     c000cc05 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbca:	0f b7 c0             	movzx  eax,ax
c000cbcd:	83 f8 1f             	cmp    eax,0x1f
c000cbd0:	76 0b                	jbe    c000cbdd <sendKeyboardToken(KeyboardToken)+0x436>
c000cbd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd5:	0f b7 c0             	movzx  eax,ax
c000cbd8:	83 f8 7e             	cmp    eax,0x7e
c000cbdb:	76 16                	jbe    c000cbf3 <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbe0:	0f b7 c0             	movzx  eax,ax
c000cbe3:	83 f8 0a             	cmp    eax,0xa
c000cbe6:	74 0b                	je     c000cbf3 <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbeb:	0f b7 c0             	movzx  eax,ax
c000cbee:	83 f8 08             	cmp    eax,0x8
c000cbf1:	75 12                	jne    c000cc05 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf6:	0f b6 c0             	movzx  eax,al
c000cbf9:	83 ec 0c             	sub    esp,0xc
c000cbfc:	50                   	push   eax
c000cbfd:	e8 ca fa ff ff       	call   c000c6cc <sendKeyToTerminal(unsigned char)>
c000cc02:	83 c4 10             	add    esp,0x10
c000cc05:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cc08:	83 f0 01             	xor    eax,0x1
c000cc0b:	0f b6 c0             	movzx  eax,al
c000cc0e:	85 c0                	test   eax,eax
c000cc10:	74 5d                	je     c000cc6f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc12:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc15:	83 f0 01             	xor    eax,0x1
c000cc18:	0f b6 c0             	movzx  eax,al
c000cc1b:	85 c0                	test   eax,eax
c000cc1d:	74 50                	je     c000cc6f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc1f:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cc24:	0f b6 c0             	movzx  eax,al
c000cc27:	85 c0                	test   eax,eax
c000cc29:	74 44                	je     c000cc6f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc2e:	0f b7 c0             	movzx  eax,ax
c000cc31:	83 f8 3f             	cmp    eax,0x3f
c000cc34:	76 39                	jbe    c000cc6f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc39:	0f b7 c0             	movzx  eax,ax
c000cc3c:	83 f8 7f             	cmp    eax,0x7f
c000cc3f:	77 2e                	ja     c000cc6f <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc44:	88 c2                	mov    dl,al
c000cc46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc49:	0f b7 c0             	movzx  eax,ax
c000cc4c:	83 f8 5f             	cmp    eax,0x5f
c000cc4f:	76 04                	jbe    c000cc55 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc51:	b0 20                	mov    al,0x20
c000cc53:	eb 02                	jmp    c000cc57 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc55:	b0 00                	mov    al,0x0
c000cc57:	89 d1                	mov    ecx,edx
c000cc59:	29 c1                	sub    ecx,eax
c000cc5b:	89 c8                	mov    eax,ecx
c000cc5d:	83 e8 40             	sub    eax,0x40
c000cc60:	0f b6 c0             	movzx  eax,al
c000cc63:	83 ec 0c             	sub    esp,0xc
c000cc66:	50                   	push   eax
c000cc67:	e8 60 fa ff ff       	call   c000c6cc <sendKeyToTerminal(unsigned char)>
c000cc6c:	83 c4 10             	add    esp,0x10
c000cc6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc72:	0f b7 c0             	movzx  eax,ax
c000cc75:	3d 00 03 00 00       	cmp    eax,0x300
c000cc7a:	75 12                	jne    c000cc8e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc7c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc7f:	83 f0 01             	xor    eax,0x1
c000cc82:	0f b6 c0             	movzx  eax,al
c000cc85:	85 c0                	test   eax,eax
c000cc87:	74 05                	je     c000cc8e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc89:	e8 75 b8 ff ff       	call   c0008503 <doTerminalCycle()>
c000cc8e:	90                   	nop
c000cc8f:	c9                   	leave  
c000cc90:	c3                   	ret    

c000cc91 <clearInternalKeybuffer(VgaText*)>:
c000cc91:	55                   	push   ebp
c000cc92:	89 e5                	mov    ebp,esp
c000cc94:	83 ec 08             	sub    esp,0x8
c000cc97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc9a:	05 02 01 00 00       	add    eax,0x102
c000cc9f:	83 ec 0c             	sub    esp,0xc
c000cca2:	50                   	push   eax
c000cca3:	e8 d8 38 ff ff       	call   c0000580 <strlen>
c000cca8:	83 c4 10             	add    esp,0x10
c000ccab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ccae:	81 c2 02 01 00 00    	add    edx,0x102
c000ccb4:	83 ec 04             	sub    esp,0x4
c000ccb7:	50                   	push   eax
c000ccb8:	6a 00                	push   0x0
c000ccba:	52                   	push   edx
c000ccbb:	e8 30 38 ff ff       	call   c00004f0 <memset>
c000ccc0:	83 c4 10             	add    esp,0x10
c000ccc3:	90                   	nop
c000ccc4:	c9                   	leave  
c000ccc5:	c3                   	ret    

c000ccc6 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ccc6:	55                   	push   ebp
c000ccc7:	89 e5                	mov    ebp,esp
c000ccc9:	83 ec 18             	sub    esp,0x18
c000cccc:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000ccd1:	85 c0                	test   eax,eax
c000ccd3:	74 2a                	je     c000ccff <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ccd5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ccdb:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000cce1:	83 ec 04             	sub    esp,0x4
c000cce4:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cce9:	83 ec 08             	sub    esp,0x8
c000ccec:	89 e0                	mov    eax,esp
c000ccee:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000ccf1:	89 08                	mov    DWORD PTR [eax],ecx
c000ccf3:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000ccf6:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000ccfa:	ff d2                	call   edx
c000ccfc:	83 c4 10             	add    esp,0x10
c000ccff:	fb                   	sti    
c000cd00:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cd07:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cd0b:	0f 84 0d 01 00 00    	je     c000ce1e <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cd11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd14:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd1a:	0f be c0             	movsx  eax,al
c000cd1d:	85 c0                	test   eax,eax
c000cd1f:	75 2c                	jne    c000cd4d <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cd21:	fa                   	cli    
c000cd22:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd27:	83 c0 01             	add    eax,0x1
c000cd2a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd2f:	e8 14 83 00 00       	call   c0015048 <schedule()>
c000cd34:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd39:	83 e8 01             	sub    eax,0x1
c000cd3c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd41:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd46:	85 c0                	test   eax,eax
c000cd48:	75 c7                	jne    c000cd11 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd4a:	fb                   	sti    
c000cd4b:	eb c4                	jmp    c000cd11 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd50:	8d 50 01             	lea    edx,[eax+0x1]
c000cd53:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd56:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd59:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd5f:	88 10                	mov    BYTE PTR [eax],dl
c000cd61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd64:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd6a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd6d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd71:	83 f8 03             	cmp    eax,0x3
c000cd74:	75 1e                	jne    c000cd94 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cd76:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd7d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd80:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd86:	83 ec 08             	sub    esp,0x8
c000cd89:	6a 02                	push   0x2
c000cd8b:	50                   	push   eax
c000cd8c:	e8 56 3f 00 00       	call   c0010ce7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd91:	83 c4 10             	add    esp,0x10
c000cd94:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd98:	83 f8 1c             	cmp    eax,0x1c
c000cd9b:	75 1e                	jne    c000cdbb <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cd9d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cda2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cda4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cda7:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cdad:	83 ec 08             	sub    esp,0x8
c000cdb0:	6a 09                	push   0x9
c000cdb2:	50                   	push   eax
c000cdb3:	e8 2f 3f 00 00       	call   c0010ce7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdb8:	83 c4 10             	add    esp,0x10
c000cdbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdbe:	05 02 01 00 00       	add    eax,0x102
c000cdc3:	83 ec 0c             	sub    esp,0xc
c000cdc6:	50                   	push   eax
c000cdc7:	e8 b4 37 ff ff       	call   c0000580 <strlen>
c000cdcc:	83 c4 10             	add    esp,0x10
c000cdcf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdd2:	81 c2 02 01 00 00    	add    edx,0x102
c000cdd8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cddb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdde:	81 c2 02 01 00 00    	add    edx,0x102
c000cde4:	83 ec 04             	sub    esp,0x4
c000cde7:	50                   	push   eax
c000cde8:	51                   	push   ecx
c000cde9:	52                   	push   edx
c000cdea:	e8 e1 35 ff ff       	call   c00003d0 <memmove>
c000cdef:	83 c4 10             	add    esp,0x10
c000cdf2:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000cdf6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000cdfa:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdfe:	83 f8 0a             	cmp    eax,0xa
c000ce01:	74 16                	je     c000ce19 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce03:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce07:	83 f8 03             	cmp    eax,0x3
c000ce0a:	74 0d                	je     c000ce19 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce0c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce10:	83 f8 1c             	cmp    eax,0x1c
c000ce13:	0f 85 ee fe ff ff    	jne    c000cd07 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ce19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce1c:	eb 03                	jmp    c000ce21 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000ce1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce21:	c9                   	leave  
c000ce22:	c3                   	ret    
c000ce23:	90                   	nop

c000ce24 <Keyboard::Keyboard(char const*)>:
c000ce24:	83 ec 0c             	sub    esp,0xc
c000ce27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2b:	83 ec 08             	sub    esp,0x8
c000ce2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce32:	50                   	push   eax
c000ce33:	e8 44 f1 ff ff       	call   c000bf7c <Device::Device(char const*)>
c000ce38:	83 c4 10             	add    esp,0x10
c000ce3b:	ba 1c 06 02 c0       	mov    edx,0xc002061c
c000ce40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce44:	89 10                	mov    DWORD PTR [eax],edx
c000ce46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce54:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce5b:	90                   	nop
c000ce5c:	83 c4 0c             	add    esp,0xc
c000ce5f:	c3                   	ret    

c000ce60 <Keyboard::~Keyboard()>:
c000ce60:	83 ec 0c             	sub    esp,0xc
c000ce63:	ba 1c 06 02 c0       	mov    edx,0xc002061c
c000ce68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce6c:	89 10                	mov    DWORD PTR [eax],edx
c000ce6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce72:	83 ec 0c             	sub    esp,0xc
c000ce75:	50                   	push   eax
c000ce76:	e8 6b ee ff ff       	call   c000bce6 <Device::~Device()>
c000ce7b:	83 c4 10             	add    esp,0x10
c000ce7e:	90                   	nop
c000ce7f:	83 c4 0c             	add    esp,0xc
c000ce82:	c3                   	ret    
c000ce83:	90                   	nop

c000ce84 <Keyboard::~Keyboard()>:
c000ce84:	83 ec 0c             	sub    esp,0xc
c000ce87:	83 ec 0c             	sub    esp,0xc
c000ce8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce8e:	e8 cd ff ff ff       	call   c000ce60 <Keyboard::~Keyboard()>
c000ce93:	83 c4 10             	add    esp,0x10
c000ce96:	83 ec 08             	sub    esp,0x8
c000ce99:	68 5c 01 00 00       	push   0x15c
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	e8 de d9 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000cea7:	83 c4 10             	add    esp,0x10
c000ceaa:	83 c4 0c             	add    esp,0xc
c000cead:	c3                   	ret    

c000ceae <LogicalDisk::close(int, int, void*)>:
c000ceae:	83 c8 ff             	or     eax,0xffffffff
c000ceb1:	c3                   	ret    

c000ceb2 <LogicalDisk::~LogicalDisk()>:
c000ceb2:	83 ec 0c             	sub    esp,0xc
c000ceb5:	ba 94 06 02 c0       	mov    edx,0xc0020694
c000ceba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cebe:	89 10                	mov    DWORD PTR [eax],edx
c000cec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cec4:	83 ec 0c             	sub    esp,0xc
c000cec7:	50                   	push   eax
c000cec8:	e8 19 ee ff ff       	call   c000bce6 <Device::~Device()>
c000cecd:	83 c4 10             	add    esp,0x10
c000ced0:	90                   	nop
c000ced1:	83 c4 0c             	add    esp,0xc
c000ced4:	c3                   	ret    
c000ced5:	90                   	nop

c000ced6 <LogicalDisk::~LogicalDisk()>:
c000ced6:	83 ec 0c             	sub    esp,0xc
c000ced9:	83 ec 0c             	sub    esp,0xc
c000cedc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee0:	e8 cd ff ff ff       	call   c000ceb2 <LogicalDisk::~LogicalDisk()>
c000cee5:	83 c4 10             	add    esp,0x10
c000cee8:	83 ec 08             	sub    esp,0x8
c000ceeb:	68 78 01 00 00       	push   0x178
c000cef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cef4:	e8 8c d9 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000cef9:	83 c4 10             	add    esp,0x10
c000cefc:	83 c4 0c             	add    esp,0xc
c000ceff:	c3                   	ret    

c000cf00 <LogicalDisk::open(int, int, void*)>:
c000cf00:	83 ec 18             	sub    esp,0x18
c000cf03:	68 48 06 02 c0       	push   0xc0020648
c000cf08:	e8 40 39 00 00       	call   c001084d <KePanic(char const*)>
c000cf0d:	83 c8 ff             	or     eax,0xffffffff
c000cf10:	83 c4 1c             	add    esp,0x1c
c000cf13:	c3                   	ret    

c000cf14 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cf14:	53                   	push   ebx
c000cf15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cf19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf21:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cf27:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cf2d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf33:	77 10                	ja     c000cf45 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf35:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf3b:	89 d3                	mov    ebx,edx
c000cf3d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf43:	72 05                	jb     c000cf4a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf45:	83 c8 ff             	or     eax,0xffffffff
c000cf48:	89 c2                	mov    edx,eax
c000cf4a:	5b                   	pop    ebx
c000cf4b:	c3                   	ret    

c000cf4c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf4c:	56                   	push   esi
c000cf4d:	83 c8 ff             	or     eax,0xffffffff
c000cf50:	53                   	push   ebx
c000cf51:	89 c2                	mov    edx,eax
c000cf53:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf57:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf5b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf5f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf65:	77 27                	ja     c000cf8e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf67:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf6d:	89 d8                	mov    eax,ebx
c000cf6f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf75:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf7a:	89 c2                	mov    edx,eax
c000cf7c:	73 10                	jae    c000cf8e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf7e:	89 c8                	mov    eax,ecx
c000cf80:	89 da                	mov    edx,ebx
c000cf82:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cf88:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cf8e:	5b                   	pop    ebx
c000cf8f:	5e                   	pop    esi
c000cf90:	c3                   	ret    
c000cf91:	90                   	nop

c000cf92 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf92:	83 ec 1c             	sub    esp,0x1c
c000cf95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cfa5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cfa9:	89 04 24             	mov    DWORD PTR [esp],eax
c000cfac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfb8:	83 ec 08             	sub    esp,0x8
c000cfbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfbf:	50                   	push   eax
c000cfc0:	e8 b7 ef ff ff       	call   c000bf7c <Device::Device(char const*)>
c000cfc5:	83 c4 10             	add    esp,0x10
c000cfc8:	ba 94 06 02 c0       	mov    edx,0xc0020694
c000cfcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfd1:	89 10                	mov    DWORD PTR [eax],edx
c000cfd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfd7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfe2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cfe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfed:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cff8:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d002:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d00a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d00e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d014:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d01a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d01e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d021:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d025:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d02b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d035:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d039:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d03f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d043:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d04d:	90                   	nop
c000d04e:	83 c4 1c             	add    esp,0x1c
c000d051:	c3                   	ret    

c000d052 <LogicalDisk::assignDriveLetter()>:
c000d052:	55                   	push   ebp
c000d053:	57                   	push   edi
c000d054:	56                   	push   esi
c000d055:	53                   	push   ebx
c000d056:	83 ec 14             	sub    esp,0x14
c000d059:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d05d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d063:	b0 41                	mov    al,0x41
c000d065:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d06b:	84 d2                	test   dl,dl
c000d06d:	75 02                	jne    c000d071 <LogicalDisk::assignDriveLetter()+0x1f>
c000d06f:	b0 43                	mov    al,0x43
c000d071:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d077:	0f b6 ca             	movzx  ecx,dl
c000d07a:	0f be e8             	movsx  ebp,al
c000d07d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d081:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d085:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d08b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d08f:	3c 43                	cmp    al,0x43
c000d091:	75 10                	jne    c000d0a3 <LogicalDisk::assignDriveLetter()+0x51>
c000d093:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d09a:	75 5a                	jne    c000d0f6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d09c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d0a1:	75 53                	jne    c000d0f6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0a3:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d0a6:	ba 01 00 00 00       	mov    edx,0x1
c000d0ab:	89 34 24             	mov    DWORD PTR [esp],esi
c000d0ae:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d0b1:	d3 e2                	shl    edx,cl
c000d0b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0b7:	89 d7                	mov    edi,edx
c000d0b9:	89 d6                	mov    esi,edx
c000d0bb:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d0bf:	c1 ff 1f             	sar    edi,0x1f
c000d0c2:	21 f9                	and    ecx,edi
c000d0c4:	09 d1                	or     ecx,edx
c000d0c6:	75 2e                	jne    c000d0f6 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0cc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d0d0:	09 f2                	or     edx,esi
c000d0d2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d0d5:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d0db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0df:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d0e5:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d0ec:	09 fa                	or     edx,edi
c000d0ee:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d0f4:	eb 0d                	jmp    c000d103 <LogicalDisk::assignDriveLetter()+0xb1>
c000d0f6:	8d 50 01             	lea    edx,[eax+0x1]
c000d0f9:	45                   	inc    ebp
c000d0fa:	80 fa 5b             	cmp    dl,0x5b
c000d0fd:	88 d0                	mov    al,dl
c000d0ff:	75 8e                	jne    c000d08f <LogicalDisk::assignDriveLetter()+0x3d>
c000d101:	31 c0                	xor    eax,eax
c000d103:	83 c4 14             	add    esp,0x14
c000d106:	5b                   	pop    ebx
c000d107:	5e                   	pop    esi
c000d108:	5f                   	pop    edi
c000d109:	5d                   	pop    ebp
c000d10a:	c3                   	ret    
c000d10b:	90                   	nop

c000d10c <LogicalDisk::mount()>:
c000d10c:	56                   	push   esi
c000d10d:	53                   	push   ebx
c000d10e:	53                   	push   ebx
c000d10f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d113:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d119:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d123:	85 db                	test   ebx,ebx
c000d125:	74 27                	je     c000d14e <LogicalDisk::mount()+0x42>
c000d127:	51                   	push   ecx
c000d128:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d12f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d131:	83 e8 41             	sub    eax,0x41
c000d134:	50                   	push   eax
c000d135:	56                   	push   esi
c000d136:	53                   	push   ebx
c000d137:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d13a:	83 c4 10             	add    esp,0x10
c000d13d:	84 c0                	test   al,al
c000d13f:	74 08                	je     c000d149 <LogicalDisk::mount()+0x3d>
c000d141:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d147:	eb 07                	jmp    c000d150 <LogicalDisk::mount()+0x44>
c000d149:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d14c:	eb d5                	jmp    c000d123 <LogicalDisk::mount()+0x17>
c000d14e:	31 c0                	xor    eax,eax
c000d150:	5a                   	pop    edx
c000d151:	5b                   	pop    ebx
c000d152:	5e                   	pop    esi
c000d153:	c3                   	ret    

c000d154 <LogicalDisk::unmount()>:
c000d154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d158:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d162:	c3                   	ret    
c000d163:	90                   	nop

c000d164 <LogicalDisk::eject()>:
c000d164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d168:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d16e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d170:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d174:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d177:	90                   	nop

c000d178 <LogicalDisk::unassignDriveLetter()>:
c000d178:	57                   	push   edi
c000d179:	56                   	push   esi
c000d17a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d17e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d185:	85 c9                	test   ecx,ecx
c000d187:	75 0f                	jne    c000d198 <LogicalDisk::unassignDriveLetter()+0x20>
c000d189:	c7 44 24 0c 6c 06 02 c0 	mov    DWORD PTR [esp+0xc],0xc002066c
c000d191:	5e                   	pop    esi
c000d192:	5f                   	pop    edi
c000d193:	e9 b5 36 00 00       	jmp    c001084d <KePanic(char const*)>
c000d198:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d19f:	83 e9 41             	sub    ecx,0x41
c000d1a2:	b8 01 00 00 00       	mov    eax,0x1
c000d1a7:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d1b2:	d3 e0                	shl    eax,cl
c000d1b4:	89 c7                	mov    edi,eax
c000d1b6:	f7 d0                	not    eax
c000d1b8:	c1 ff 1f             	sar    edi,0x1f
c000d1bb:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d1c1:	89 fe                	mov    esi,edi
c000d1c3:	f7 d6                	not    esi
c000d1c5:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d1cb:	5e                   	pop    esi
c000d1cc:	5f                   	pop    edi
c000d1cd:	c3                   	ret    

c000d1ce <LogicalDisk::read(unsigned long long, int, void*)>:
c000d1ce:	57                   	push   edi
c000d1cf:	56                   	push   esi
c000d1d0:	53                   	push   ebx
c000d1d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1e1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1e7:	77 41                	ja     c000d22a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d1e9:	99                   	cdq    
c000d1ea:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d1f0:	01 c8                	add    eax,ecx
c000d1f2:	11 da                	adc    edx,ebx
c000d1f4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d1fa:	19 d7                	sbb    edi,edx
c000d1fc:	72 33                	jb     c000d231 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d1fe:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d204:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d20a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d20e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d212:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d218:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d21e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d222:	5b                   	pop    ebx
c000d223:	5e                   	pop    esi
c000d224:	5f                   	pop    edi
c000d225:	e9 d4 0a 00 00       	jmp    c000dcfe <VCache::read(unsigned long long, int, void*)>
c000d22a:	b8 05 00 00 00       	mov    eax,0x5
c000d22f:	eb 05                	jmp    c000d236 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d231:	b8 07 00 00 00       	mov    eax,0x7
c000d236:	5b                   	pop    ebx
c000d237:	5e                   	pop    esi
c000d238:	5f                   	pop    edi
c000d239:	c3                   	ret    

c000d23a <LogicalDisk::write(unsigned long long, int, void*)>:
c000d23a:	57                   	push   edi
c000d23b:	56                   	push   esi
c000d23c:	53                   	push   ebx
c000d23d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d241:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d245:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d249:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d24d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d253:	77 41                	ja     c000d296 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d255:	99                   	cdq    
c000d256:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d25c:	01 c8                	add    eax,ecx
c000d25e:	11 da                	adc    edx,ebx
c000d260:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d266:	19 d7                	sbb    edi,edx
c000d268:	72 33                	jb     c000d29d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d26a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d270:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d276:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d27a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d27e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d284:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d28a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d28e:	5b                   	pop    ebx
c000d28f:	5e                   	pop    esi
c000d290:	5f                   	pop    edi
c000d291:	e9 6e 09 00 00       	jmp    c000dc04 <VCache::write(unsigned long long, int, void*)>
c000d296:	b8 05 00 00 00       	mov    eax,0x5
c000d29b:	eb 05                	jmp    c000d2a2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d29d:	b8 07 00 00 00       	mov    eax,0x7
c000d2a2:	5b                   	pop    ebx
c000d2a3:	5e                   	pop    esi
c000d2a4:	5f                   	pop    edi
c000d2a5:	c3                   	ret    
c000d2a6:	66 90                	xchg   ax,ax

c000d2a8 <Mouse::Mouse(char const*)>:
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2af:	83 ec 08             	sub    esp,0x8
c000d2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b6:	50                   	push   eax
c000d2b7:	e8 c0 ec ff ff       	call   c000bf7c <Device::Device(char const*)>
c000d2bc:	83 c4 10             	add    esp,0x10
c000d2bf:	ba c0 06 02 c0       	mov    edx,0xc00206c0
c000d2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c8:	89 10                	mov    DWORD PTR [eax],edx
c000d2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ce:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d2d8:	90                   	nop
c000d2d9:	83 c4 0c             	add    esp,0xc
c000d2dc:	c3                   	ret    
c000d2dd:	90                   	nop
c000d2de:	66 90                	xchg   ax,ax

c000d2e0 <Mouse::~Mouse()>:
c000d2e0:	83 ec 0c             	sub    esp,0xc
c000d2e3:	ba c0 06 02 c0       	mov    edx,0xc00206c0
c000d2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ec:	89 10                	mov    DWORD PTR [eax],edx
c000d2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f2:	83 ec 0c             	sub    esp,0xc
c000d2f5:	50                   	push   eax
c000d2f6:	e8 eb e9 ff ff       	call   c000bce6 <Device::~Device()>
c000d2fb:	83 c4 10             	add    esp,0x10
c000d2fe:	90                   	nop
c000d2ff:	83 c4 0c             	add    esp,0xc
c000d302:	c3                   	ret    
c000d303:	90                   	nop

c000d304 <Mouse::~Mouse()>:
c000d304:	83 ec 0c             	sub    esp,0xc
c000d307:	83 ec 0c             	sub    esp,0xc
c000d30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d30e:	e8 cd ff ff ff       	call   c000d2e0 <Mouse::~Mouse()>
c000d313:	83 c4 10             	add    esp,0x10
c000d316:	83 ec 08             	sub    esp,0x8
c000d319:	68 58 01 00 00       	push   0x158
c000d31e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d322:	e8 5e d5 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000d327:	83 c4 10             	add    esp,0x10
c000d32a:	83 c4 0c             	add    esp,0xc
c000d32d:	c3                   	ret    

c000d32e <NIC::getMAC()>:
c000d32e:	31 c0                	xor    eax,eax
c000d330:	31 d2                	xor    edx,edx
c000d332:	c3                   	ret    
c000d333:	90                   	nop

c000d334 <NIC::write(int, unsigned char*, int*)>:
c000d334:	b8 01 00 00 00       	mov    eax,0x1
c000d339:	c3                   	ret    

c000d33a <NIC::NIC(char const*)>:
c000d33a:	83 ec 0c             	sub    esp,0xc
c000d33d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d341:	83 ec 08             	sub    esp,0x8
c000d344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d348:	50                   	push   eax
c000d349:	e8 2e ec ff ff       	call   c000bf7c <Device::Device(char const*)>
c000d34e:	83 c4 10             	add    esp,0x10
c000d351:	ba ec 06 02 c0       	mov    edx,0xc00206ec
c000d356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35a:	89 10                	mov    DWORD PTR [eax],edx
c000d35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d360:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d36a:	90                   	nop
c000d36b:	83 c4 0c             	add    esp,0xc
c000d36e:	c3                   	ret    
c000d36f:	90                   	nop

c000d370 <NIC::~NIC()>:
c000d370:	83 ec 0c             	sub    esp,0xc
c000d373:	ba ec 06 02 c0       	mov    edx,0xc00206ec
c000d378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d37c:	89 10                	mov    DWORD PTR [eax],edx
c000d37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d382:	83 ec 0c             	sub    esp,0xc
c000d385:	50                   	push   eax
c000d386:	e8 5b e9 ff ff       	call   c000bce6 <Device::~Device()>
c000d38b:	83 c4 10             	add    esp,0x10
c000d38e:	90                   	nop
c000d38f:	83 c4 0c             	add    esp,0xc
c000d392:	c3                   	ret    
c000d393:	90                   	nop

c000d394 <NIC::~NIC()>:
c000d394:	83 ec 0c             	sub    esp,0xc
c000d397:	83 ec 0c             	sub    esp,0xc
c000d39a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39e:	e8 cd ff ff ff       	call   c000d370 <NIC::~NIC()>
c000d3a3:	83 c4 10             	add    esp,0x10
c000d3a6:	83 ec 08             	sub    esp,0x8
c000d3a9:	68 58 01 00 00       	push   0x158
c000d3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b2:	e8 ce d4 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000d3b7:	83 c4 10             	add    esp,0x10
c000d3ba:	83 c4 0c             	add    esp,0xc
c000d3bd:	c3                   	ret    

c000d3be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d3be:	55                   	push   ebp
c000d3bf:	57                   	push   edi
c000d3c0:	56                   	push   esi
c000d3c1:	53                   	push   ebx
c000d3c2:	81 ec 28 01 00 00    	sub    esp,0x128
c000d3c8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d3cf:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d3d6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d3dd:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d3e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3e8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3ec:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3f3:	e8 80 ec ff ff       	call   c000c078 <Device::getName()>
c000d3f8:	5a                   	pop    edx
c000d3f9:	59                   	pop    ecx
c000d3fa:	50                   	push   eax
c000d3fb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d3ff:	55                   	push   ebp
c000d400:	e8 4b 32 ff ff       	call   c0000650 <strcpy>
c000d405:	5b                   	pop    ebx
c000d406:	58                   	pop    eax
c000d407:	68 18 07 02 c0       	push   0xc0020718
c000d40c:	55                   	push   ebp
c000d40d:	e8 5e 34 ff ff       	call   c0000870 <strcat>
c000d412:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d419:	e8 ad a6 ff ff       	call   c0007acb <malloc>
c000d41e:	83 c4 0c             	add    esp,0xc
c000d421:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d425:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d429:	89 c3                	mov    ebx,eax
c000d42b:	57                   	push   edi
c000d42c:	56                   	push   esi
c000d42d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d434:	55                   	push   ebp
c000d435:	50                   	push   eax
c000d436:	e8 57 fb ff ff       	call   c000cf92 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d43b:	83 c4 14             	add    esp,0x14
c000d43e:	53                   	push   ebx
c000d43f:	e8 0e fc ff ff       	call   c000d052 <LogicalDisk::assignDriveLetter()>
c000d444:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d447:	e8 c0 fc ff ff       	call   c000d10c <LogicalDisk::mount()>
c000d44c:	58                   	pop    eax
c000d44d:	5a                   	pop    edx
c000d44e:	53                   	push   ebx
c000d44f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d456:	e8 89 e9 ff ff       	call   c000bde4 <Device::addChild(Device*)>
c000d45b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d461:	5b                   	pop    ebx
c000d462:	5e                   	pop    esi
c000d463:	5f                   	pop    edi
c000d464:	5d                   	pop    ebp
c000d465:	c3                   	ret    

c000d466 <createPartitionsForDisk(PhysicalDisk*)>:
c000d466:	55                   	push   ebp
c000d467:	57                   	push   edi
c000d468:	56                   	push   esi
c000d469:	53                   	push   ebx
c000d46a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d470:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d477:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d47d:	3d 00 02 00 00       	cmp    eax,0x200
c000d482:	74 27                	je     c000d4ab <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d484:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d48a:	83 ec 10             	sub    esp,0x10
c000d48d:	99                   	cdq    
c000d48e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d494:	52                   	push   edx
c000d495:	50                   	push   eax
c000d496:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d49a:	c1 e6 0a             	shl    esi,0xa
c000d49d:	89 fd                	mov    ebp,edi
c000d49f:	55                   	push   ebp
c000d4a0:	56                   	push   esi
c000d4a1:	e8 7a 11 01 00       	call   c001e620 <__udivdi3>
c000d4a6:	e9 b9 00 00 00       	jmp    c000d564 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4ab:	83 ec 0c             	sub    esp,0xc
c000d4ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4b0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d4b4:	56                   	push   esi
c000d4b5:	6a 01                	push   0x1
c000d4b7:	6a 00                	push   0x0
c000d4b9:	6a 00                	push   0x0
c000d4bb:	53                   	push   ebx
c000d4bc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d4bf:	83 c4 20             	add    esp,0x20
c000d4c2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d4ca:	75 0a                	jne    c000d4d6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d4cc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d4d4:	74 2c                	je     c000d502 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d4d6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4dc:	83 ec 10             	sub    esp,0x10
c000d4df:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4e5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4eb:	89 f7                	mov    edi,esi
c000d4ed:	c1 ff 1f             	sar    edi,0x1f
c000d4f0:	57                   	push   edi
c000d4f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d4f5:	56                   	push   esi
c000d4f6:	c1 e0 0a             	shl    eax,0xa
c000d4f9:	52                   	push   edx
c000d4fa:	50                   	push   eax
c000d4fb:	e8 20 11 01 00       	call   c001e620 <__udivdi3>
c000d500:	eb 62                	jmp    c000d564 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d502:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d509:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d510:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d517:	89 cf                	mov    edi,ecx
c000d519:	83 e2 7f             	and    edx,0x7f
c000d51c:	83 e7 7f             	and    edi,0x7f
c000d51f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d522:	83 e0 7f             	and    eax,0x7f
c000d525:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d528:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d52f:	83 e0 7f             	and    eax,0x7f
c000d532:	01 d0                	add    eax,edx
c000d534:	84 c0                	test   al,al
c000d536:	89 c5                	mov    ebp,eax
c000d538:	74 41                	je     c000d57b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d53a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d540:	83 ec 10             	sub    esp,0x10
c000d543:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d549:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d54f:	89 f7                	mov    edi,esi
c000d551:	c1 ff 1f             	sar    edi,0x1f
c000d554:	57                   	push   edi
c000d555:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d559:	56                   	push   esi
c000d55a:	c1 e0 0a             	shl    eax,0xa
c000d55d:	52                   	push   edx
c000d55e:	50                   	push   eax
c000d55f:	e8 bc 10 01 00       	call   c001e620 <__udivdi3>
c000d564:	83 c4 14             	add    esp,0x14
c000d567:	52                   	push   edx
c000d568:	50                   	push   eax
c000d569:	6a 00                	push   0x0
c000d56b:	6a 00                	push   0x0
c000d56d:	53                   	push   ebx
c000d56e:	e8 4b fe ff ff       	call   c000d3be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d573:	83 c4 20             	add    esp,0x20
c000d576:	e9 73 01 00 00       	jmp    c000d6ee <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d57b:	89 f0                	mov    eax,esi
c000d57d:	31 c9                	xor    ecx,ecx
c000d57f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d586:	75 02                	jne    c000d58a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d588:	89 cd                	mov    ebp,ecx
c000d58a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d592:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d599:	83 c0 10             	add    eax,0x10
c000d59c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d5a4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000d5ab:	c1 e2 08             	shl    edx,0x8
c000d5ae:	c1 e6 10             	shl    esi,0x10
c000d5b1:	09 f2                	or     edx,esi
c000d5b3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d5ba:	09 f2                	or     edx,esi
c000d5bc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d5c3:	c1 e6 18             	shl    esi,0x18
c000d5c6:	09 f2                	or     edx,esi
c000d5c8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d5cf:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d5d3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d5da:	c1 e6 10             	shl    esi,0x10
c000d5dd:	c1 e2 08             	shl    edx,0x8
c000d5e0:	09 f2                	or     edx,esi
c000d5e2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d5e9:	09 f2                	or     edx,esi
c000d5eb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d5f2:	c1 e6 18             	shl    esi,0x18
c000d5f5:	09 f2                	or     edx,esi
c000d5f7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d5fb:	41                   	inc    ecx
c000d5fc:	83 f9 04             	cmp    ecx,0x4
c000d5ff:	0f 85 7a ff ff ff    	jne    c000d57f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d609:	83 f0 01             	xor    eax,0x1
c000d60c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d610:	75 4f                	jne    c000d661 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d612:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d616:	83 f0 01             	xor    eax,0x1
c000d619:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d61d:	75 42                	jne    c000d661 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d61f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d625:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d62d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d633:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d63b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d641:	89 f7                	mov    edi,esi
c000d643:	c1 ff 1f             	sar    edi,0x1f
c000d646:	57                   	push   edi
c000d647:	56                   	push   esi
c000d648:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d64c:	52                   	push   edx
c000d64d:	c1 e0 0a             	shl    eax,0xa
c000d650:	50                   	push   eax
c000d651:	e8 ca 0f 01 00       	call   c001e620 <__udivdi3>
c000d656:	83 c4 10             	add    esp,0x10
c000d659:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d65d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d661:	89 e8                	mov    eax,ebp
c000d663:	0f b6 e8             	movzx  ebp,al
c000d666:	85 ed                	test   ebp,ebp
c000d668:	74 50                	je     c000d6ba <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d66a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d66e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d672:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d676:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d67a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d67e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d682:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d686:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d68a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d68e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d692:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d69a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d69e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6a2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d6a6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6aa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d6ae:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d6b2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d6b6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d6ba:	31 ed                	xor    ebp,ebp
c000d6bc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6c0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6c4:	89 f8                	mov    eax,edi
c000d6c6:	09 f0                	or     eax,esi
c000d6c8:	74 1e                	je     c000d6e8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6ca:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d6ce:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6d2:	89 d1                	mov    ecx,edx
c000d6d4:	09 c1                	or     ecx,eax
c000d6d6:	74 10                	je     c000d6e8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6d8:	83 ec 0c             	sub    esp,0xc
c000d6db:	57                   	push   edi
c000d6dc:	56                   	push   esi
c000d6dd:	52                   	push   edx
c000d6de:	50                   	push   eax
c000d6df:	53                   	push   ebx
c000d6e0:	e8 d9 fc ff ff       	call   c000d3be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6e5:	83 c4 20             	add    esp,0x20
c000d6e8:	45                   	inc    ebp
c000d6e9:	83 fd 04             	cmp    ebp,0x4
c000d6ec:	75 ce                	jne    c000d6bc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d6ee:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d6f4:	5b                   	pop    ebx
c000d6f5:	5e                   	pop    esi
c000d6f6:	5f                   	pop    edi
c000d6f7:	5d                   	pop    ebp
c000d6f8:	c3                   	ret    
c000d6f9:	66 90                	xchg   ax,ax
c000d6fb:	90                   	nop

c000d6fc <Serial::Serial(char const*)>:
c000d6fc:	83 ec 0c             	sub    esp,0xc
c000d6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d703:	83 ec 08             	sub    esp,0x8
c000d706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70a:	50                   	push   eax
c000d70b:	e8 6c e8 ff ff       	call   c000bf7c <Device::Device(char const*)>
c000d710:	83 c4 10             	add    esp,0x10
c000d713:	ba 2c 07 02 c0       	mov    edx,0xc002072c
c000d718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71c:	89 10                	mov    DWORD PTR [eax],edx
c000d71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d722:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d72c:	90                   	nop
c000d72d:	83 c4 0c             	add    esp,0xc
c000d730:	c3                   	ret    
c000d731:	90                   	nop
c000d732:	66 90                	xchg   ax,ax

c000d734 <Serial::~Serial()>:
c000d734:	83 ec 0c             	sub    esp,0xc
c000d737:	ba 2c 07 02 c0       	mov    edx,0xc002072c
c000d73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d740:	89 10                	mov    DWORD PTR [eax],edx
c000d742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d746:	83 ec 0c             	sub    esp,0xc
c000d749:	50                   	push   eax
c000d74a:	e8 97 e5 ff ff       	call   c000bce6 <Device::~Device()>
c000d74f:	83 c4 10             	add    esp,0x10
c000d752:	90                   	nop
c000d753:	83 c4 0c             	add    esp,0xc
c000d756:	c3                   	ret    
c000d757:	90                   	nop

c000d758 <Serial::~Serial()>:
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	83 ec 0c             	sub    esp,0xc
c000d75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d762:	e8 cd ff ff ff       	call   c000d734 <Serial::~Serial()>
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	83 ec 08             	sub    esp,0x8
c000d76d:	68 58 01 00 00       	push   0x158
c000d772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d776:	e8 0a d1 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000d77b:	83 c4 10             	add    esp,0x10
c000d77e:	83 c4 0c             	add    esp,0xc
c000d781:	c3                   	ret    
c000d782:	66 90                	xchg   ax,ax

c000d784 <Timer::Timer(char const*)>:
c000d784:	83 ec 0c             	sub    esp,0xc
c000d787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78b:	83 ec 08             	sub    esp,0x8
c000d78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d792:	50                   	push   eax
c000d793:	e8 e4 e7 ff ff       	call   c000bf7c <Device::Device(char const*)>
c000d798:	83 c4 10             	add    esp,0x10
c000d79b:	ba 70 07 02 c0       	mov    edx,0xc0020770
c000d7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a4:	89 10                	mov    DWORD PTR [eax],edx
c000d7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7aa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d7b4:	90                   	nop
c000d7b5:	83 c4 0c             	add    esp,0xc
c000d7b8:	c3                   	ret    
c000d7b9:	90                   	nop
c000d7ba:	66 90                	xchg   ax,ax

c000d7bc <Timer::~Timer()>:
c000d7bc:	83 ec 0c             	sub    esp,0xc
c000d7bf:	ba 70 07 02 c0       	mov    edx,0xc0020770
c000d7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c8:	89 10                	mov    DWORD PTR [eax],edx
c000d7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ce:	83 ec 0c             	sub    esp,0xc
c000d7d1:	50                   	push   eax
c000d7d2:	e8 0f e5 ff ff       	call   c000bce6 <Device::~Device()>
c000d7d7:	83 c4 10             	add    esp,0x10
c000d7da:	90                   	nop
c000d7db:	83 c4 0c             	add    esp,0xc
c000d7de:	c3                   	ret    
c000d7df:	90                   	nop

c000d7e0 <Timer::~Timer()>:
c000d7e0:	83 ec 0c             	sub    esp,0xc
c000d7e3:	83 ec 0c             	sub    esp,0xc
c000d7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ea:	e8 cd ff ff ff       	call   c000d7bc <Timer::~Timer()>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	83 ec 08             	sub    esp,0x8
c000d7f5:	68 5c 01 00 00       	push   0x15c
c000d7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7fe:	e8 82 d0 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000d803:	83 c4 10             	add    esp,0x10
c000d806:	83 c4 0c             	add    esp,0xc
c000d809:	c3                   	ret    

c000d80a <Timer::read()>:
c000d80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d80e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d814:	c3                   	ret    

c000d815 <setupTimer(int)>:
c000d815:	53                   	push   ebx
c000d816:	83 ec 14             	sub    esp,0x14
c000d819:	68 5c 01 00 00       	push   0x15c
c000d81e:	e8 a8 a2 ff ff       	call   c0007acb <malloc>
c000d823:	89 04 24             	mov    DWORD PTR [esp],eax
c000d826:	89 c3                	mov    ebx,eax
c000d828:	e8 53 06 01 00       	call   c001de80 <PIT::PIT()>
c000d82d:	58                   	pop    eax
c000d82e:	5a                   	pop    edx
c000d82f:	53                   	push   ebx
c000d830:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d836:	e8 a9 e5 ff ff       	call   c000bde4 <Device::addChild(Device*)>
c000d83b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d83d:	6a 00                	push   0x0
c000d83f:	6a 00                	push   0x0
c000d841:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d845:	53                   	push   ebx
c000d846:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d849:	83 c4 28             	add    esp,0x28
c000d84c:	89 d8                	mov    eax,ebx
c000d84e:	5b                   	pop    ebx
c000d84f:	c3                   	ret    

c000d850 <timerHandler(unsigned int)>:
c000d850:	56                   	push   esi
c000d851:	53                   	push   ebx
c000d852:	51                   	push   ecx
c000d853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d857:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d85d:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d864:	0f 84 4a 01 00 00    	je     c000d9b4 <timerHandler(unsigned int)+0x164>
c000d86a:	fa                   	cli    
c000d86b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d871:	83 ec 0c             	sub    esp,0xc
c000d874:	68 78 81 02 c0       	push   0xc0028178
c000d879:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d87f:	e8 6c 13 01 00       	call   c001ebf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d884:	83 c4 10             	add    esp,0x10
c000d887:	84 c0                	test   al,al
c000d889:	0f 85 a1 00 00 00    	jne    c000d930 <timerHandler(unsigned int)+0xe0>
c000d88f:	83 ec 0c             	sub    esp,0xc
c000d892:	68 78 81 02 c0       	push   0xc0028178
c000d897:	e8 70 13 01 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 c6                	mov    esi,eax
c000d8a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d8a4:	83 ec 0c             	sub    esp,0xc
c000d8a7:	68 78 81 02 c0       	push   0xc0028178
c000d8ac:	e8 5b 13 01 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8b1:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d8b8:	89 c3                	mov    ebx,eax
c000d8ba:	e8 55 13 01 00       	call   c001ec14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d8bf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d8c2:	83 c4 10             	add    esp,0x10
c000d8c5:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d8cb:	77 23                	ja     c000d8f0 <timerHandler(unsigned int)+0xa0>
c000d8cd:	83 ec 0c             	sub    esp,0xc
c000d8d0:	53                   	push   ebx
c000d8d1:	e8 6a 7c 00 00       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	39 de                	cmp    esi,ebx
c000d8db:	75 27                	jne    c000d904 <timerHandler(unsigned int)+0xb4>
c000d8dd:	83 ec 0c             	sub    esp,0xc
c000d8e0:	68 78 81 02 c0       	push   0xc0028178
c000d8e5:	e8 22 13 01 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8ea:	89 c6                	mov    esi,eax
c000d8ec:	eb 12                	jmp    c000d900 <timerHandler(unsigned int)+0xb0>
c000d8ee:	66 90                	xchg   ax,ax
c000d8f0:	52                   	push   edx
c000d8f1:	52                   	push   edx
c000d8f2:	53                   	push   ebx
c000d8f3:	68 78 81 02 c0       	push   0xc0028178
c000d8f8:	e8 d3 13 01 00       	call   c001ecd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d8fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d900:	83 c4 10             	add    esp,0x10
c000d903:	90                   	nop
c000d904:	83 ec 0c             	sub    esp,0xc
c000d907:	68 78 81 02 c0       	push   0xc0028178
c000d90c:	e8 df 12 01 00       	call   c001ebf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d911:	83 c4 10             	add    esp,0x10
c000d914:	84 c0                	test   al,al
c000d916:	75 18                	jne    c000d930 <timerHandler(unsigned int)+0xe0>
c000d918:	83 ec 0c             	sub    esp,0xc
c000d91b:	68 78 81 02 c0       	push   0xc0028178
c000d920:	e8 e7 12 01 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d925:	83 c4 10             	add    esp,0x10
c000d928:	39 f0                	cmp    eax,esi
c000d92a:	0f 85 74 ff ff ff    	jne    c000d8a4 <timerHandler(unsigned int)+0x54>
c000d930:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d935:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d939:	74 41                	je     c000d97c <timerHandler(unsigned int)+0x12c>
c000d93b:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d942:	74 38                	je     c000d97c <timerHandler(unsigned int)+0x12c>
c000d944:	fa                   	cli    
c000d945:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d94b:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d950:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d956:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d959:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d95f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d962:	72 08                	jb     c000d96c <timerHandler(unsigned int)+0x11c>
c000d964:	e8 df 76 00 00       	call   c0015048 <schedule()>
c000d969:	8d 76 00             	lea    esi,[esi+0x0]
c000d96c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d971:	48                   	dec    eax
c000d972:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d977:	75 03                	jne    c000d97c <timerHandler(unsigned int)+0x12c>
c000d979:	fb                   	sti    
c000d97a:	66 90                	xchg   ax,ax
c000d97c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d981:	48                   	dec    eax
c000d982:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d987:	75 1b                	jne    c000d9a4 <timerHandler(unsigned int)+0x154>
c000d989:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d990:	74 12                	je     c000d9a4 <timerHandler(unsigned int)+0x154>
c000d992:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d99c:	e8 a7 76 00 00       	call   c0015048 <schedule()>
c000d9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d9a4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9a9:	48                   	dec    eax
c000d9aa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9af:	75 03                	jne    c000d9b4 <timerHandler(unsigned int)+0x164>
c000d9b1:	fb                   	sti    
c000d9b2:	66 90                	xchg   ax,ax
c000d9b4:	58                   	pop    eax
c000d9b5:	5b                   	pop    ebx
c000d9b6:	5e                   	pop    esi
c000d9b7:	c3                   	ret    

c000d9b8 <VCache::VCache(PhysicalDisk*)>:
c000d9b8:	53                   	push   ebx
c000d9b9:	83 ec 18             	sub    esp,0x18
c000d9bc:	ba a0 07 02 c0       	mov    edx,0xc00207a0
c000d9c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c5:	89 10                	mov    DWORD PTR [eax],edx
c000d9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d9d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d9dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d9e8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d9ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d9fa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da05:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da10:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da18:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da1f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da2a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da32:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da42:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da49:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da51:	83 ec 0c             	sub    esp,0xc
c000da54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da58:	e8 6e a0 ff ff       	call   c0007acb <malloc>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	89 c3                	mov    ebx,eax
c000da62:	83 ec 0c             	sub    esp,0xc
c000da65:	53                   	push   ebx
c000da66:	e8 7d 73 00 00       	call   c0014de8 <Mutex::Mutex()>
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da72:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da79:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da7d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da84:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da8f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da99:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000da9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000daa0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000daa6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000daac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dab0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dab3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daba:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dabe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dac2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dac8:	05 00 02 00 00       	add    eax,0x200
c000dacd:	c1 e0 03             	shl    eax,0x3
c000dad0:	83 ec 0c             	sub    esp,0xc
c000dad3:	50                   	push   eax
c000dad4:	e8 f2 9f ff ff       	call   c0007acb <malloc>
c000dad9:	83 c4 10             	add    esp,0x10
c000dadc:	89 c2                	mov    edx,eax
c000dade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000daf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000daf8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dafc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db02:	89 d0                	mov    eax,edx
c000db04:	c1 e0 02             	shl    eax,0x2
c000db07:	01 d0                	add    eax,edx
c000db09:	c1 e0 04             	shl    eax,0x4
c000db0c:	83 ec 0c             	sub    esp,0xc
c000db0f:	50                   	push   eax
c000db10:	e8 b6 9f ff ff       	call   c0007acb <malloc>
c000db15:	83 c4 10             	add    esp,0x10
c000db18:	89 c2                	mov    edx,eax
c000db1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db1e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db21:	90                   	nop
c000db22:	83 c4 18             	add    esp,0x18
c000db25:	5b                   	pop    ebx
c000db26:	c3                   	ret    
c000db27:	90                   	nop

c000db28 <VCache::invalidateReadBuffer()>:
c000db28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db2c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db32:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db36:	c3                   	ret    
c000db37:	90                   	nop

c000db38 <VCache::writeWriteBuffer()>:
c000db38:	53                   	push   ebx
c000db39:	83 ec 08             	sub    esp,0x8
c000db3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db40:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db44:	74 1e                	je     c000db64 <VCache::writeWriteBuffer()+0x2c>
c000db46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db49:	83 ec 0c             	sub    esp,0xc
c000db4c:	8b 10                	mov    edx,DWORD PTR [eax]
c000db4e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db51:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db54:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db57:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db5a:	50                   	push   eax
c000db5b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db5e:	83 c4 20             	add    esp,0x20
c000db61:	8d 76 00             	lea    esi,[esi+0x0]
c000db64:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db6b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db72:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db76:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db7d:	83 c4 08             	add    esp,0x8
c000db80:	5b                   	pop    ebx
c000db81:	c3                   	ret    
c000db82:	66 90                	xchg   ax,ax

c000db84 <VCache::~VCache()>:
c000db84:	83 ec 0c             	sub    esp,0xc
c000db87:	ba a0 07 02 c0       	mov    edx,0xc00207a0
c000db8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db90:	89 10                	mov    DWORD PTR [eax],edx
c000db92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db96:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000db99:	0f b6 c0             	movzx  eax,al
c000db9c:	85 c0                	test   eax,eax
c000db9e:	74 10                	je     c000dbb0 <VCache::~VCache()+0x2c>
c000dba0:	83 ec 0c             	sub    esp,0xc
c000dba3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dba7:	e8 8c ff ff ff       	call   c000db38 <VCache::writeWriteBuffer()>
c000dbac:	83 c4 10             	add    esp,0x10
c000dbaf:	90                   	nop
c000dbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dbb7:	83 ec 0c             	sub    esp,0xc
c000dbba:	50                   	push   eax
c000dbbb:	e8 1b 9f ff ff       	call   c0007adb <free>
c000dbc0:	83 c4 10             	add    esp,0x10
c000dbc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dbca:	83 ec 0c             	sub    esp,0xc
c000dbcd:	50                   	push   eax
c000dbce:	e8 08 9f ff ff       	call   c0007adb <free>
c000dbd3:	83 c4 10             	add    esp,0x10
c000dbd6:	90                   	nop
c000dbd7:	83 c4 0c             	add    esp,0xc
c000dbda:	c3                   	ret    
c000dbdb:	90                   	nop

c000dbdc <VCache::~VCache()>:
c000dbdc:	83 ec 0c             	sub    esp,0xc
c000dbdf:	83 ec 0c             	sub    esp,0xc
c000dbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe6:	e8 99 ff ff ff       	call   c000db84 <VCache::~VCache()>
c000dbeb:	83 c4 10             	add    esp,0x10
c000dbee:	83 ec 08             	sub    esp,0x8
c000dbf1:	6a 44                	push   0x44
c000dbf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf7:	e8 89 cc ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000dbfc:	83 c4 10             	add    esp,0x10
c000dbff:	83 c4 0c             	add    esp,0xc
c000dc02:	c3                   	ret    
c000dc03:	90                   	nop

c000dc04 <VCache::write(unsigned long long, int, void*)>:
c000dc04:	55                   	push   ebp
c000dc05:	57                   	push   edi
c000dc06:	56                   	push   esi
c000dc07:	53                   	push   ebx
c000dc08:	83 ec 1c             	sub    esp,0x1c
c000dc0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc13:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dc17:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc1b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc23:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dc27:	74 0f                	je     c000dc38 <VCache::write(unsigned long long, int, void*)+0x34>
c000dc29:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc2d:	53                   	push   ebx
c000dc2e:	e8 f5 fe ff ff       	call   c000db28 <VCache::invalidateReadBuffer()>
c000dc33:	58                   	pop    eax
c000dc34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc38:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc3c:	74 66                	je     c000dca4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dc3e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc45:	99                   	cdq    
c000dc46:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc49:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc4c:	89 c6                	mov    esi,eax
c000dc4e:	31 ce                	xor    esi,ecx
c000dc50:	89 d0                	mov    eax,edx
c000dc52:	31 e8                	xor    eax,ebp
c000dc54:	09 c6                	or     esi,eax
c000dc56:	75 38                	jne    c000dc90 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc58:	83 ff 01             	cmp    edi,0x1
c000dc5b:	75 33                	jne    c000dc90 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc5d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc60:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dc64:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc68:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc6e:	0f af f9             	imul   edi,ecx
c000dc71:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dc74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc76:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc79:	40                   	inc    eax
c000dc7a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc7d:	83 f8 50             	cmp    eax,0x50
c000dc80:	75 72                	jne    c000dcf4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc82:	83 ec 0c             	sub    esp,0xc
c000dc85:	53                   	push   ebx
c000dc86:	e8 ad fe ff ff       	call   c000db38 <VCache::writeWriteBuffer()>
c000dc8b:	83 c4 10             	add    esp,0x10
c000dc8e:	eb 64                	jmp    c000dcf4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc90:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc94:	83 ec 0c             	sub    esp,0xc
c000dc97:	53                   	push   ebx
c000dc98:	e8 9b fe ff ff       	call   c000db38 <VCache::writeWriteBuffer()>
c000dc9d:	83 c4 10             	add    esp,0x10
c000dca0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dca4:	83 ff 4f             	cmp    edi,0x4f
c000dca7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dcaa:	7f 20                	jg     c000dccc <VCache::write(unsigned long long, int, void*)+0xc8>
c000dcac:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dcaf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dcb3:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000dcb6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dcb9:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dcbc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dcc0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcc8:	eb 2a                	jmp    c000dcf4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcca:	66 90                	xchg   ax,ax
c000dccc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dcd0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcd2:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dcd6:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dcda:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dcde:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000dce2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dce6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dce9:	83 c4 1c             	add    esp,0x1c
c000dcec:	5b                   	pop    ebx
c000dced:	5e                   	pop    esi
c000dcee:	5f                   	pop    edi
c000dcef:	5d                   	pop    ebp
c000dcf0:	ff e0                	jmp    eax
c000dcf2:	66 90                	xchg   ax,ax
c000dcf4:	83 c4 1c             	add    esp,0x1c
c000dcf7:	31 c0                	xor    eax,eax
c000dcf9:	5b                   	pop    ebx
c000dcfa:	5e                   	pop    esi
c000dcfb:	5f                   	pop    edi
c000dcfc:	5d                   	pop    ebp
c000dcfd:	c3                   	ret    

c000dcfe <VCache::read(unsigned long long, int, void*)>:
c000dcfe:	55                   	push   ebp
c000dcff:	57                   	push   edi
c000dd00:	56                   	push   esi
c000dd01:	53                   	push   ebx
c000dd02:	83 ec 1c             	sub    esp,0x1c
c000dd05:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dd09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd0d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dd11:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd15:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dd19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd1d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd21:	74 0d                	je     c000dd30 <VCache::read(unsigned long long, int, void*)+0x32>
c000dd23:	83 ec 0c             	sub    esp,0xc
c000dd26:	57                   	push   edi
c000dd27:	e8 0c fe ff ff       	call   c000db38 <VCache::writeWriteBuffer()>
c000dd2c:	83 c4 10             	add    esp,0x10
c000dd2f:	90                   	nop
c000dd30:	83 fd 01             	cmp    ebp,0x1
c000dd33:	0f 85 93 00 00 00    	jne    c000ddcc <VCache::read(unsigned long long, int, void*)+0xce>
c000dd39:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd3c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd43:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd46:	0f 85 80 00 00 00    	jne    c000ddcc <VCache::read(unsigned long long, int, void*)+0xce>
c000dd4c:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dd4f:	89 cd                	mov    ebp,ecx
c000dd51:	f7 dd                	neg    ebp
c000dd53:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dd57:	89 e8                	mov    eax,ebp
c000dd59:	21 dd                	and    ebp,ebx
c000dd5b:	c1 f8 1f             	sar    eax,0x1f
c000dd5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd62:	89 e8                	mov    eax,ebp
c000dd64:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dd68:	21 f5                	and    ebp,esi
c000dd6a:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd6e:	89 ea                	mov    edx,ebp
c000dd70:	74 2e                	je     c000dda0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd72:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000dd75:	75 29                	jne    c000dda0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd77:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd7a:	75 24                	jne    c000dda0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd7c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd7f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd85:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dd88:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd8b:	21 f3                	and    ebx,esi
c000dd8d:	0f af d9             	imul   ebx,ecx
c000dd90:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dd93:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dd97:	89 de                	mov    esi,ebx
c000dd99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd9b:	31 c0                	xor    eax,eax
c000dd9d:	eb 61                	jmp    c000de00 <VCache::read(unsigned long long, int, void*)+0x102>
c000dd9f:	90                   	nop
c000dda0:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dda4:	83 ec 0c             	sub    esp,0xc
c000dda7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000ddaa:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ddae:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000ddb1:	8b 36                	mov    esi,DWORD PTR [esi]
c000ddb3:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000ddb6:	51                   	push   ecx
c000ddb7:	52                   	push   edx
c000ddb8:	50                   	push   eax
c000ddb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbd:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000ddc0:	83 c4 20             	add    esp,0x20
c000ddc3:	85 c0                	test   eax,eax
c000ddc5:	75 39                	jne    c000de00 <VCache::read(unsigned long long, int, void*)+0x102>
c000ddc7:	eb b3                	jmp    c000dd7c <VCache::read(unsigned long long, int, void*)+0x7e>
c000ddc9:	8d 76 00             	lea    esi,[esi+0x0]
c000ddcc:	83 ec 0c             	sub    esp,0xc
c000ddcf:	57                   	push   edi
c000ddd0:	e8 53 fd ff ff       	call   c000db28 <VCache::invalidateReadBuffer()>
c000ddd5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dddc:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddde:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000dde2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000dde6:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ddea:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ddee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddf2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ddf5:	83 c4 2c             	add    esp,0x2c
c000ddf8:	5b                   	pop    ebx
c000ddf9:	5e                   	pop    esi
c000ddfa:	5f                   	pop    edi
c000ddfb:	5d                   	pop    ebp
c000ddfc:	ff e0                	jmp    eax
c000ddfe:	66 90                	xchg   ax,ax
c000de00:	83 c4 1c             	add    esp,0x1c
c000de03:	5b                   	pop    ebx
c000de04:	5e                   	pop    esi
c000de05:	5f                   	pop    edi
c000de06:	5d                   	pop    ebp
c000de07:	c3                   	ret    

c000de08 <Video::putrect(int, int, int, int, unsigned int)>:
c000de08:	55                   	push   ebp
c000de09:	57                   	push   edi
c000de0a:	56                   	push   esi
c000de0b:	53                   	push   ebx
c000de0c:	83 ec 1c             	sub    esp,0x1c
c000de0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de17:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de1b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de27:	01 df                	add    edi,ebx
c000de29:	39 fb                	cmp    ebx,edi
c000de2b:	7d 1f                	jge    c000de4c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de2d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de31:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de35:	7d 12                	jge    c000de49 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de37:	8b 16                	mov    edx,DWORD PTR [esi]
c000de39:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de3d:	53                   	push   ebx
c000de3e:	55                   	push   ebp
c000de3f:	45                   	inc    ebp
c000de40:	56                   	push   esi
c000de41:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de44:	83 c4 10             	add    esp,0x10
c000de47:	eb e8                	jmp    c000de31 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de49:	43                   	inc    ebx
c000de4a:	eb dd                	jmp    c000de29 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de4c:	83 c4 1c             	add    esp,0x1c
c000de4f:	5b                   	pop    ebx
c000de50:	5e                   	pop    esi
c000de51:	5f                   	pop    edi
c000de52:	5d                   	pop    ebp
c000de53:	c3                   	ret    

c000de54 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de54:	55                   	push   ebp
c000de55:	57                   	push   edi
c000de56:	31 ff                	xor    edi,edi
c000de58:	56                   	push   esi
c000de59:	53                   	push   ebx
c000de5a:	83 ec 1c             	sub    esp,0x1c
c000de5d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de61:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de65:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de6c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de79:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de7d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de80:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de84:	01 f9                	add    ecx,edi
c000de86:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de8a:	7d 2f                	jge    c000debb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de8c:	31 f6                	xor    esi,esi
c000de8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de92:	01 f2                	add    edx,esi
c000de94:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de98:	7d 1a                	jge    c000deb4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de9a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de9d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000dea0:	46                   	inc    esi
c000dea1:	51                   	push   ecx
c000dea2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dea6:	52                   	push   edx
c000dea7:	55                   	push   ebp
c000dea8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000deab:	83 c4 10             	add    esp,0x10
c000deae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000deb2:	eb da                	jmp    c000de8e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000deb4:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000deb8:	47                   	inc    edi
c000deb9:	eb c5                	jmp    c000de80 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000debb:	83 c4 1c             	add    esp,0x1c
c000debe:	5b                   	pop    ebx
c000debf:	5e                   	pop    esi
c000dec0:	5f                   	pop    edi
c000dec1:	5d                   	pop    ebp
c000dec2:	c3                   	ret    
c000dec3:	90                   	nop

c000dec4 <Video::blit(unsigned int*, int, int, int, int)>:
c000dec4:	55                   	push   ebp
c000dec5:	ba 00 00 00 00       	mov    edx,0x0
c000deca:	57                   	push   edi
c000decb:	56                   	push   esi
c000decc:	53                   	push   ebx
c000decd:	83 ec 1c             	sub    esp,0x1c
c000ded0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ded4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ded8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dedc:	85 c0                	test   eax,eax
c000dede:	0f 49 d0             	cmovns edx,eax
c000dee1:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000dee8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000deec:	89 eb                	mov    ebx,ebp
c000deee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000def2:	01 ea                	add    edx,ebp
c000def4:	39 da                	cmp    edx,ebx
c000def6:	7e 54                	jle    c000df4c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000def8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000defe:	7c 4c                	jl     c000df4c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000df00:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df04:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000df08:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df0c:	01 c1                	add    ecx,eax
c000df0e:	39 f9                	cmp    ecx,edi
c000df10:	7e 2f                	jle    c000df41 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000df12:	83 c2 04             	add    edx,0x4
c000df15:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df1b:	7c 21                	jl     c000df3e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000df1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df21:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df23:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000df26:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000df2a:	55                   	push   ebp
c000df2b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df2f:	56                   	push   esi
c000df30:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df3e:	47                   	inc    edi
c000df3f:	eb c7                	jmp    c000df08 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000df41:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000df45:	43                   	inc    ebx
c000df46:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000df4a:	eb a2                	jmp    c000deee <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000df4c:	83 c4 1c             	add    esp,0x1c
c000df4f:	5b                   	pop    ebx
c000df50:	5e                   	pop    esi
c000df51:	5f                   	pop    edi
c000df52:	5d                   	pop    ebp
c000df53:	c3                   	ret    

c000df54 <Video::clearScreen(unsigned int)>:
c000df54:	57                   	push   edi
c000df55:	56                   	push   esi
c000df56:	53                   	push   ebx
c000df57:	31 db                	xor    ebx,ebx
c000df59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df5d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df63:	7e 1f                	jle    c000df84 <Video::clearScreen(unsigned int)+0x30>
c000df65:	31 ff                	xor    edi,edi
c000df67:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df6d:	7e 12                	jle    c000df81 <Video::clearScreen(unsigned int)+0x2d>
c000df6f:	8b 06                	mov    eax,DWORD PTR [esi]
c000df71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df75:	53                   	push   ebx
c000df76:	57                   	push   edi
c000df77:	47                   	inc    edi
c000df78:	56                   	push   esi
c000df79:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df7c:	83 c4 10             	add    esp,0x10
c000df7f:	eb e6                	jmp    c000df67 <Video::clearScreen(unsigned int)+0x13>
c000df81:	43                   	inc    ebx
c000df82:	eb d9                	jmp    c000df5d <Video::clearScreen(unsigned int)+0x9>
c000df84:	5b                   	pop    ebx
c000df85:	5e                   	pop    esi
c000df86:	5f                   	pop    edi
c000df87:	c3                   	ret    

c000df88 <Video::putpixel(int, int, unsigned int)>:
c000df88:	c7 44 24 04 a8 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc00207a8
c000df90:	e9 b8 28 00 00       	jmp    c001084d <KePanic(char const*)>
c000df95:	90                   	nop

c000df96 <Video::readPixelApprox(int, int)>:
c000df96:	83 ec 18             	sub    esp,0x18
c000df99:	68 c9 07 02 c0       	push   0xc00207c9
c000df9e:	e8 aa 28 00 00       	call   c001084d <KePanic(char const*)>
c000dfa3:	31 c0                	xor    eax,eax
c000dfa5:	83 c4 1c             	add    esp,0x1c
c000dfa8:	c3                   	ret    
c000dfa9:	90                   	nop

c000dfaa <Video::Video(char const*)>:
c000dfaa:	83 ec 0c             	sub    esp,0xc
c000dfad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb1:	83 ec 08             	sub    esp,0x8
c000dfb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb8:	50                   	push   eax
c000dfb9:	e8 be df ff ff       	call   c000bf7c <Device::Device(char const*)>
c000dfbe:	83 c4 10             	add    esp,0x10
c000dfc1:	ba 44 08 02 c0       	mov    edx,0xc0020844
c000dfc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfca:	89 10                	mov    DWORD PTR [eax],edx
c000dfcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dfda:	90                   	nop
c000dfdb:	83 c4 0c             	add    esp,0xc
c000dfde:	c3                   	ret    
c000dfdf:	90                   	nop

c000dfe0 <Video::~Video()>:
c000dfe0:	83 ec 0c             	sub    esp,0xc
c000dfe3:	ba 44 08 02 c0       	mov    edx,0xc0020844
c000dfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfec:	89 10                	mov    DWORD PTR [eax],edx
c000dfee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 eb dc ff ff       	call   c000bce6 <Device::~Device()>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	90                   	nop
c000dfff:	83 c4 0c             	add    esp,0xc
c000e002:	c3                   	ret    
c000e003:	90                   	nop

c000e004 <Video::~Video()>:
c000e004:	83 ec 0c             	sub    esp,0xc
c000e007:	83 ec 0c             	sub    esp,0xc
c000e00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00e:	e8 cd ff ff ff       	call   c000dfe0 <Video::~Video()>
c000e013:	83 c4 10             	add    esp,0x10
c000e016:	83 ec 08             	sub    esp,0x8
c000e019:	68 64 01 00 00       	push   0x164
c000e01e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e022:	e8 5e c8 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c000e027:	83 c4 10             	add    esp,0x10
c000e02a:	83 c4 0c             	add    esp,0xc
c000e02d:	c3                   	ret    

c000e02e <Video::isMonochrome()>:
c000e02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e032:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e038:	c3                   	ret    
c000e039:	90                   	nop

c000e03a <Video::getWidth()>:
c000e03a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e03e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e044:	c3                   	ret    
c000e045:	90                   	nop

c000e046 <Video::getHeight()>:
c000e046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e04a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e050:	c3                   	ret    
c000e051:	90                   	nop

c000e052 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e052:	55                   	push   ebp
c000e053:	57                   	push   edi
c000e054:	56                   	push   esi
c000e055:	53                   	push   ebx
c000e056:	83 ec 2c             	sub    esp,0x2c
c000e059:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e05d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e061:	83 f8 01             	cmp    eax,0x1
c000e064:	19 c9                	sbb    ecx,ecx
c000e066:	31 db                	xor    ebx,ebx
c000e068:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e06c:	89 ce                	mov    esi,ecx
c000e06e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e076:	f7 d6                	not    esi
c000e078:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e07e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e082:	01 d8                	add    eax,ebx
c000e084:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e088:	57                   	push   edi
c000e089:	e8 b8 ff ff ff       	call   c000e046 <Video::getHeight()>
c000e08e:	59                   	pop    ecx
c000e08f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e093:	7e 70                	jle    c000e105 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e095:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e099:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e09d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e0a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e0a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0a8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e0af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0b3:	89 e8                	mov    eax,ebp
c000e0b5:	83 c0 20             	add    eax,0x20
c000e0b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0bc:	57                   	push   edi
c000e0bd:	e8 78 ff ff ff       	call   c000e03a <Video::getWidth()>
c000e0c2:	5a                   	pop    edx
c000e0c3:	39 c5                	cmp    ebp,eax
c000e0c5:	7d 34                	jge    c000e0fb <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e0c7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0cc:	74 05                	je     c000e0d3 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e0ce:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0d0:	56                   	push   esi
c000e0d1:	eb 0d                	jmp    c000e0e0 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e0d3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0d8:	74 12                	je     c000e0ec <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e0da:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0e4:	55                   	push   ebp
c000e0e5:	57                   	push   edi
c000e0e6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0e9:	83 c4 10             	add    esp,0x10
c000e0ec:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0f0:	45                   	inc    ebp
c000e0f1:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0f5:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e0f9:	75 c1                	jne    c000e0bc <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e0fb:	43                   	inc    ebx
c000e0fc:	83 fb 20             	cmp    ebx,0x20
c000e0ff:	0f 85 79 ff ff ff    	jne    c000e07e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e105:	83 c4 2c             	add    esp,0x2c
c000e108:	5b                   	pop    ebx
c000e109:	5e                   	pop    esi
c000e10a:	5f                   	pop    edi
c000e10b:	5d                   	pop    ebp
c000e10c:	c3                   	ret    
c000e10d:	90                   	nop

c000e10e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e10e:	55                   	push   ebp
c000e10f:	57                   	push   edi
c000e110:	56                   	push   esi
c000e111:	53                   	push   ebx
c000e112:	83 ec 28             	sub    esp,0x28
c000e115:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e119:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e11d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e121:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e125:	c1 e7 08             	shl    edi,0x8
c000e128:	01 c7                	add    edi,eax
c000e12a:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e12e:	c1 e6 08             	shl    esi,0x8
c000e131:	01 f0                	add    eax,esi
c000e133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e137:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e13b:	0f af c7             	imul   eax,edi
c000e13e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e145:	50                   	push   eax
c000e146:	e8 80 99 ff ff       	call   c0007acb <malloc>
c000e14b:	83 c4 10             	add    esp,0x10
c000e14e:	85 c0                	test   eax,eax
c000e150:	89 c5                	mov    ebp,eax
c000e152:	75 10                	jne    c000e164 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e154:	83 ec 0c             	sub    esp,0xc
c000e157:	68 f4 07 02 c0       	push   0xc00207f4
c000e15c:	e8 ec 26 00 00       	call   c001084d <KePanic(char const*)>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e168:	ba 12 00 00 00       	mov    edx,0x12
c000e16d:	85 c0                	test   eax,eax
c000e16f:	74 11                	je     c000e182 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e171:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e175:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e179:	c1 fa 03             	sar    edx,0x3
c000e17c:	0f af d1             	imul   edx,ecx
c000e17f:	83 c2 12             	add    edx,0x12
c000e182:	85 ff                	test   edi,edi
c000e184:	74 06                	je     c000e18c <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e186:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e18a:	75 12                	jne    c000e19e <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e18c:	83 ec 0c             	sub    esp,0xc
c000e18f:	68 04 08 02 c0       	push   0xc0020804
c000e194:	e8 ea c7 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000e199:	e9 b8 00 00 00       	jmp    c000e256 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e19e:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e1a2:	83 f9 02             	cmp    ecx,0x2
c000e1a5:	0f 85 96 00 00 00    	jne    c000e241 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e1ab:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e1b0:	75 0e                	jne    c000e1c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1b2:	85 c0                	test   eax,eax
c000e1b4:	75 0a                	jne    c000e1c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1b9:	83 e8 18             	sub    eax,0x18
c000e1bc:	a8 f7                	test   al,0xf7
c000e1be:	74 0a                	je     c000e1ca <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e1c0:	83 ec 0c             	sub    esp,0xc
c000e1c3:	68 19 08 02 c0       	push   0xc0020819
c000e1c8:	eb 7f                	jmp    c000e249 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e1ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1d2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1da:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e1de:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1e2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1ea:	75 0c                	jne    c000e1f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e1ec:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000e1f1:	c1 e1 18             	shl    ecx,0x18
c000e1f4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e1f8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e1fd:	46                   	inc    esi
c000e1fe:	89 c8                	mov    eax,ecx
c000e200:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e205:	c1 e0 10             	shl    eax,0x10
c000e208:	c1 e1 08             	shl    ecx,0x8
c000e20b:	09 c1                	or     ecx,eax
c000e20d:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e211:	09 c1                	or     ecx,eax
c000e213:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e217:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000e21b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e21f:	c1 f8 03             	sar    eax,0x3
c000e222:	01 c2                	add    edx,eax
c000e224:	89 f0                	mov    eax,esi
c000e226:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e22a:	39 c7                	cmp    edi,eax
c000e22c:	7f b0                	jg     c000e1de <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e22e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e232:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e236:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e239:	7e 22                	jle    c000e25d <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e23b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000e23f:	eb 99                	jmp    c000e1da <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e241:	50                   	push   eax
c000e242:	50                   	push   eax
c000e243:	51                   	push   ecx
c000e244:	68 27 08 02 c0       	push   0xc0020827
c000e249:	e8 35 c7 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000e24e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e251:	e8 85 98 ff ff       	call   c0007adb <free>
c000e256:	83 c4 10             	add    esp,0x10
c000e259:	31 ed                	xor    ebp,ebp
c000e25b:	eb 0f                	jmp    c000e26c <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e25d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e261:	89 38                	mov    DWORD PTR [eax],edi
c000e263:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e267:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000e26a:	89 38                	mov    DWORD PTR [eax],edi
c000e26c:	83 c4 1c             	add    esp,0x1c
c000e26f:	89 e8                	mov    eax,ebp
c000e271:	5b                   	pop    ebx
c000e272:	5e                   	pop    esi
c000e273:	5f                   	pop    edi
c000e274:	5d                   	pop    ebp
c000e275:	c3                   	ret    

c000e276 <Video::putTGA(int, int, unsigned char*, int)>:
c000e276:	55                   	push   ebp
c000e277:	57                   	push   edi
c000e278:	56                   	push   esi
c000e279:	53                   	push   ebx
c000e27a:	83 ec 28             	sub    esp,0x28
c000e27d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e281:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e285:	50                   	push   eax
c000e286:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e28a:	50                   	push   eax
c000e28b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e28f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e293:	57                   	push   edi
c000e294:	e8 75 fe ff ff       	call   c000e10e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e299:	83 c4 20             	add    esp,0x20
c000e29c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e2a0:	85 c0                	test   eax,eax
c000e2a2:	74 35                	je     c000e2d9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2a4:	89 c6                	mov    esi,eax
c000e2a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2aa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2ae:	39 d8                	cmp    eax,ebx
c000e2b0:	7e 27                	jle    c000e2d9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2b2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2b6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e2ba:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e2be:	39 e9                	cmp    ecx,ebp
c000e2c0:	7e 14                	jle    c000e2d6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2c2:	83 c6 04             	add    esi,0x4
c000e2c5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e2c7:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e2ca:	53                   	push   ebx
c000e2cb:	55                   	push   ebp
c000e2cc:	45                   	inc    ebp
c000e2cd:	57                   	push   edi
c000e2ce:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e2d1:	83 c4 10             	add    esp,0x10
c000e2d4:	eb e0                	jmp    c000e2b6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2d6:	43                   	inc    ebx
c000e2d7:	eb cd                	jmp    c000e2a6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2d9:	83 c4 1c             	add    esp,0x1c
c000e2dc:	5b                   	pop    ebx
c000e2dd:	5e                   	pop    esi
c000e2de:	5f                   	pop    edi
c000e2df:	5d                   	pop    ebp
c000e2e0:	c3                   	ret    
c000e2e1:	66 90                	xchg   ax,ax
c000e2e3:	90                   	nop

c000e2e4 <ACPI::close(int, int, void*)>:
c000e2e4:	83 ec 1c             	sub    esp,0x1c
c000e2e7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e2ef:	74 0b                	je     c000e2fc <ACPI::close(int, int, void*)+0x18>
c000e2f1:	b8 00 00 00 00       	mov    eax,0x0
c000e2f6:	e9 99 00 00 00       	jmp    c000e394 <ACPI::close(int, int, void*)+0xb0>
c000e2fb:	90                   	nop
c000e2fc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e301:	75 29                	jne    c000e32c <ACPI::close(int, int, void*)+0x48>
c000e303:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e308:	85 c0                	test   eax,eax
c000e30a:	74 08                	je     c000e314 <ACPI::close(int, int, void*)+0x30>
c000e30c:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e311:	ff d0                	call   eax
c000e313:	90                   	nop
c000e314:	83 ec 0c             	sub    esp,0xc
c000e317:	68 88 08 02 c0       	push   0xc0020888
c000e31c:	e8 2c 25 00 00       	call   c001084d <KePanic(char const*)>
c000e321:	83 c4 10             	add    esp,0x10
c000e324:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e329:	eb 69                	jmp    c000e394 <ACPI::close(int, int, void*)+0xb0>
c000e32b:	90                   	nop
c000e32c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e331:	75 59                	jne    c000e38c <ACPI::close(int, int, void*)+0xa8>
c000e333:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e338:	85 c0                	test   eax,eax
c000e33a:	74 08                	je     c000e344 <ACPI::close(int, int, void*)+0x60>
c000e33c:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e341:	ff d0                	call   eax
c000e343:	90                   	nop
c000e344:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e349:	8d 76 00             	lea    esi,[esi+0x0]
c000e34c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e351:	83 e0 02             	and    eax,0x2
c000e354:	74 1e                	je     c000e374 <ACPI::close(int, int, void*)+0x90>
c000e356:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e35d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e361:	89 c2                	mov    edx,eax
c000e363:	ec                   	in     al,dx
c000e364:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e368:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e36c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e370:	eb da                	jmp    c000e34c <ACPI::close(int, int, void*)+0x68>
c000e372:	66 90                	xchg   ax,ax
c000e374:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e37b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e380:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e384:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e388:	ee                   	out    dx,al
c000e389:	8d 76 00             	lea    esi,[esi+0x0]
c000e38c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e391:	8d 76 00             	lea    esi,[esi+0x0]
c000e394:	83 c4 1c             	add    esp,0x1c
c000e397:	c3                   	ret    

c000e398 <findRSDP()>:
c000e398:	83 ec 1c             	sub    esp,0x1c
c000e39b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3a0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3a6:	83 e0 04             	and    eax,0x4
c000e3a9:	0f b6 c0             	movzx  eax,al
c000e3ac:	85 c0                	test   eax,eax
c000e3ae:	75 08                	jne    c000e3b8 <findRSDP()+0x20>
c000e3b0:	b8 00 00 00 00       	mov    eax,0x0
c000e3b5:	eb 75                	jmp    c000e42c <findRSDP()+0x94>
c000e3b7:	90                   	nop
c000e3b8:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e3bd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3c2:	7f 1c                	jg     c000e3e0 <findRSDP()+0x48>
c000e3c4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3c9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3cf:	83 e2 fb             	and    edx,0xfffffffb
c000e3d2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3d8:	b8 00 00 00 00       	mov    eax,0x0
c000e3dd:	eb 4d                	jmp    c000e42c <findRSDP()+0x94>
c000e3df:	90                   	nop
c000e3e0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e3e8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e3f0:	77 32                	ja     c000e424 <findRSDP()+0x8c>
c000e3f2:	83 ec 04             	sub    esp,0x4
c000e3f5:	6a 08                	push   0x8
c000e3f7:	68 23 09 02 c0       	push   0xc0020923
c000e3fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e400:	e8 7b 1f ff ff       	call   c0000380 <memcmp>
c000e405:	83 c4 10             	add    esp,0x10
c000e408:	85 c0                	test   eax,eax
c000e40a:	0f 94 c0             	sete   al
c000e40d:	0f b6 c0             	movzx  eax,al
c000e410:	85 c0                	test   eax,eax
c000e412:	74 08                	je     c000e41c <findRSDP()+0x84>
c000e414:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e418:	eb 12                	jmp    c000e42c <findRSDP()+0x94>
c000e41a:	66 90                	xchg   ax,ax
c000e41c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e421:	eb c5                	jmp    c000e3e8 <findRSDP()+0x50>
c000e423:	90                   	nop
c000e424:	b8 00 00 00 00       	mov    eax,0x0
c000e429:	8d 76 00             	lea    esi,[esi+0x0]
c000e42c:	83 c4 1c             	add    esp,0x1c
c000e42f:	c3                   	ret    

c000e430 <loadACPITables(unsigned char*)>:
c000e430:	57                   	push   edi
c000e431:	56                   	push   esi
c000e432:	53                   	push   ebx
c000e433:	83 ec 60             	sub    esp,0x60
c000e436:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e43b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e441:	83 e0 04             	and    eax,0x4
c000e444:	0f b6 c0             	movzx  eax,al
c000e447:	85 c0                	test   eax,eax
c000e449:	0f 84 41 02 00 00    	je     c000e690 <loadACPITables(unsigned char*)+0x260>
c000e44f:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e454:	0f b6 c0             	movzx  eax,al
c000e457:	85 c0                	test   eax,eax
c000e459:	74 79                	je     c000e4d4 <loadACPITables(unsigned char*)+0xa4>
c000e45b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e45f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e463:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e467:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e46a:	83 e8 24             	sub    eax,0x24
c000e46d:	c1 e8 03             	shr    eax,0x3
c000e470:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e474:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e47c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e480:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e484:	0f 8d ba 00 00 00    	jge    c000e544 <loadACPITables(unsigned char*)+0x114>
c000e48a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e48e:	83 c0 24             	add    eax,0x24
c000e491:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e495:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e499:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e49d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4a1:	c1 e0 03             	shl    eax,0x3
c000e4a4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e4a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e4ac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4af:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4b1:	89 c1                	mov    ecx,eax
c000e4b3:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4b8:	8d 50 01             	lea    edx,[eax+0x1]
c000e4bb:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4c1:	89 ca                	mov    edx,ecx
c000e4c3:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4ca:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e4cf:	eb ab                	jmp    c000e47c <loadACPITables(unsigned char*)+0x4c>
c000e4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4d4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4d8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4e3:	83 e8 24             	sub    eax,0x24
c000e4e6:	c1 e8 02             	shr    eax,0x2
c000e4e9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4ed:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4f8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4fc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e500:	7d 42                	jge    c000e544 <loadACPITables(unsigned char*)+0x114>
c000e502:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e506:	83 c0 24             	add    eax,0x24
c000e509:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e50d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e511:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e515:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e519:	c1 e0 02             	shl    eax,0x2
c000e51c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e520:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e524:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e526:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e52b:	8d 50 01             	lea    edx,[eax+0x1]
c000e52e:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e534:	89 ca                	mov    edx,ecx
c000e536:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e53d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e542:	eb b4                	jmp    c000e4f8 <loadACPITables(unsigned char*)+0xc8>
c000e544:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e54c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e551:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e555:	0f 8d 39 01 00 00    	jge    c000e694 <loadACPITables(unsigned char*)+0x264>
c000e55b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e55f:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e566:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e56a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e56e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e572:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e576:	25 ff 0f 00 00       	and    eax,0xfff
c000e57b:	89 c6                	mov    esi,eax
c000e57d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e583:	83 ec 0c             	sub    esp,0xc
c000e586:	6a 01                	push   0x1
c000e588:	e8 78 b0 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e58d:	83 c4 10             	add    esp,0x10
c000e590:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e594:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e59a:	83 ec 0c             	sub    esp,0xc
c000e59d:	6a 01                	push   0x1
c000e59f:	6a 01                	push   0x1
c000e5a1:	50                   	push   eax
c000e5a2:	52                   	push   edx
c000e5a3:	53                   	push   ebx
c000e5a4:	e8 55 ba ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5a9:	83 c4 20             	add    esp,0x20
c000e5ac:	09 f0                	or     eax,esi
c000e5ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5b2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5b6:	c1 e0 03             	shl    eax,0x3
c000e5b9:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e5be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5ca:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5e6:	89 c6                	mov    esi,eax
c000e5e8:	89 d7                	mov    edi,edx
c000e5ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5ec:	89 c8                	mov    eax,ecx
c000e5ee:	89 fa                	mov    edx,edi
c000e5f0:	89 f3                	mov    ebx,esi
c000e5f2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e5f6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e5fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e602:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e605:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e60d:	05 00 10 00 00       	add    eax,0x1000
c000e612:	c1 e8 0c             	shr    eax,0xc
c000e615:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e619:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e61d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e621:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e625:	25 ff 0f 00 00       	and    eax,0xfff
c000e62a:	89 c6                	mov    esi,eax
c000e62c:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e632:	83 ec 0c             	sub    esp,0xc
c000e635:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e639:	e8 c7 af ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e63e:	83 c4 10             	add    esp,0x10
c000e641:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e645:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e64b:	83 ec 0c             	sub    esp,0xc
c000e64e:	6a 01                	push   0x1
c000e650:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e654:	50                   	push   eax
c000e655:	52                   	push   edx
c000e656:	53                   	push   ebx
c000e657:	e8 a2 b9 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e65c:	83 c4 20             	add    esp,0x20
c000e65f:	09 f0                	or     eax,esi
c000e661:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e669:	83 ec 0c             	sub    esp,0xc
c000e66c:	50                   	push   eax
c000e66d:	e8 a5 b2 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c000e672:	83 c4 10             	add    esp,0x10
c000e675:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e679:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e67d:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e684:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e689:	e9 be fe ff ff       	jmp    c000e54c <loadACPITables(unsigned char*)+0x11c>
c000e68e:	66 90                	xchg   ax,ax
c000e690:	90                   	nop
c000e691:	8d 76 00             	lea    esi,[esi+0x0]
c000e694:	83 c4 60             	add    esp,0x60
c000e697:	5b                   	pop    ebx
c000e698:	5e                   	pop    esi
c000e699:	5f                   	pop    edi
c000e69a:	c3                   	ret    
c000e69b:	90                   	nop

c000e69c <findRSDT(unsigned char*)>:
c000e69c:	57                   	push   edi
c000e69d:	56                   	push   esi
c000e69e:	53                   	push   ebx
c000e69f:	83 ec 50             	sub    esp,0x50
c000e6a2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e6a7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6ad:	83 e0 04             	and    eax,0x4
c000e6b0:	0f b6 c0             	movzx  eax,al
c000e6b3:	85 c0                	test   eax,eax
c000e6b5:	75 0d                	jne    c000e6c4 <findRSDT(unsigned char*)+0x28>
c000e6b7:	b8 00 00 00 00       	mov    eax,0x0
c000e6bc:	e9 2b 01 00 00       	jmp    c000e7ec <findRSDT(unsigned char*)+0x150>
c000e6c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e6c4:	89 e0                	mov    eax,esp
c000e6c6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6ca:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6d2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6e6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6ea:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e6ee:	89 c6                	mov    esi,eax
c000e6f0:	89 d7                	mov    edi,edx
c000e6f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6f4:	89 c8                	mov    eax,ecx
c000e6f6:	89 fa                	mov    edx,edi
c000e6f8:	89 f3                	mov    ebx,esi
c000e6fa:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e6fe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e702:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e706:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e70a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e70e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e716:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e71a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e71e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e726:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e72a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e72e:	25 ff 0f 00 00       	and    eax,0xfff
c000e733:	89 c6                	mov    esi,eax
c000e735:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e73b:	83 ec 0c             	sub    esp,0xc
c000e73e:	6a 02                	push   0x2
c000e740:	e8 c0 ae ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e745:	83 c4 10             	add    esp,0x10
c000e748:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e74c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e752:	83 ec 0c             	sub    esp,0xc
c000e755:	6a 01                	push   0x1
c000e757:	6a 02                	push   0x2
c000e759:	50                   	push   eax
c000e75a:	52                   	push   edx
c000e75b:	53                   	push   ebx
c000e75c:	e8 9d b8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e761:	83 c4 20             	add    esp,0x20
c000e764:	09 f0                	or     eax,esi
c000e766:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e76a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e76e:	25 ff 0f 00 00       	and    eax,0xfff
c000e773:	89 c6                	mov    esi,eax
c000e775:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e77b:	83 ec 0c             	sub    esp,0xc
c000e77e:	6a 02                	push   0x2
c000e780:	e8 80 ae ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e785:	83 c4 10             	add    esp,0x10
c000e788:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e78c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e792:	83 ec 0c             	sub    esp,0xc
c000e795:	6a 01                	push   0x1
c000e797:	6a 02                	push   0x2
c000e799:	50                   	push   eax
c000e79a:	52                   	push   edx
c000e79b:	53                   	push   ebx
c000e79c:	e8 5d b8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7a1:	83 c4 20             	add    esp,0x20
c000e7a4:	09 f0                	or     eax,esi
c000e7a6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e7aa:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7af:	85 c0                	test   eax,eax
c000e7b1:	75 11                	jne    c000e7c4 <findRSDT(unsigned char*)+0x128>
c000e7b3:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e7ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7c2:	eb 24                	jmp    c000e7e8 <findRSDT(unsigned char*)+0x14c>
c000e7c4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7c9:	83 f8 02             	cmp    eax,0x2
c000e7cc:	75 12                	jne    c000e7e0 <findRSDT(unsigned char*)+0x144>
c000e7ce:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e7d5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7d9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7dd:	eb 09                	jmp    c000e7e8 <findRSDT(unsigned char*)+0x14c>
c000e7df:	90                   	nop
c000e7e0:	b8 00 00 00 00       	mov    eax,0x0
c000e7e5:	eb 05                	jmp    c000e7ec <findRSDT(unsigned char*)+0x150>
c000e7e7:	90                   	nop
c000e7e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e7ec:	83 c4 50             	add    esp,0x50
c000e7ef:	5b                   	pop    ebx
c000e7f0:	5e                   	pop    esi
c000e7f1:	5f                   	pop    edi
c000e7f2:	c3                   	ret    
c000e7f3:	90                   	nop

c000e7f4 <findDataTable(unsigned char*, char*)>:
c000e7f4:	83 ec 1c             	sub    esp,0x1c
c000e7f7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7fc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e802:	83 e0 04             	and    eax,0x4
c000e805:	0f b6 c0             	movzx  eax,al
c000e808:	85 c0                	test   eax,eax
c000e80a:	75 08                	jne    c000e814 <findDataTable(unsigned char*, char*)+0x20>
c000e80c:	b8 00 00 00 00       	mov    eax,0x0
c000e811:	eb 5d                	jmp    c000e870 <findDataTable(unsigned char*, char*)+0x7c>
c000e813:	90                   	nop
c000e814:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e81c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e821:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e825:	7d 41                	jge    c000e868 <findDataTable(unsigned char*, char*)+0x74>
c000e827:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e82b:	c1 e0 03             	shl    eax,0x3
c000e82e:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e833:	83 ec 04             	sub    esp,0x4
c000e836:	6a 04                	push   0x4
c000e838:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e83c:	50                   	push   eax
c000e83d:	e8 3e 1b ff ff       	call   c0000380 <memcmp>
c000e842:	83 c4 10             	add    esp,0x10
c000e845:	85 c0                	test   eax,eax
c000e847:	0f 94 c0             	sete   al
c000e84a:	0f b6 c0             	movzx  eax,al
c000e84d:	85 c0                	test   eax,eax
c000e84f:	74 0f                	je     c000e860 <findDataTable(unsigned char*, char*)+0x6c>
c000e851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e855:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e85c:	eb 12                	jmp    c000e870 <findDataTable(unsigned char*, char*)+0x7c>
c000e85e:	66 90                	xchg   ax,ax
c000e860:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e865:	eb b5                	jmp    c000e81c <findDataTable(unsigned char*, char*)+0x28>
c000e867:	90                   	nop
c000e868:	b8 00 00 00 00       	mov    eax,0x0
c000e86d:	8d 76 00             	lea    esi,[esi+0x0]
c000e870:	83 c4 1c             	add    esp,0x1c
c000e873:	c3                   	ret    

c000e874 <scanMADT()>:
c000e874:	53                   	push   ebx
c000e875:	83 ec 38             	sub    esp,0x38
c000e878:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e87d:	25 00 04 00 00       	and    eax,0x400
c000e882:	74 14                	je     c000e898 <scanMADT()+0x24>
c000e884:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e889:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e88f:	83 e2 fb             	and    edx,0xfffffffb
c000e892:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e898:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e89d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8a3:	83 e0 04             	and    eax,0x4
c000e8a6:	0f b6 c0             	movzx  eax,al
c000e8a9:	85 c0                	test   eax,eax
c000e8ab:	0f 84 6b 04 00 00    	je     c000ed1c <scanMADT()+0x4a8>
c000e8b1:	e8 e2 fa ff ff       	call   c000e398 <findRSDP()>
c000e8b6:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e8bb:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8c0:	85 c0                	test   eax,eax
c000e8c2:	75 1c                	jne    c000e8e0 <scanMADT()+0x6c>
c000e8c4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8c9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8cf:	83 e2 fb             	and    edx,0xfffffffb
c000e8d2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8d8:	e9 47 04 00 00       	jmp    c000ed24 <scanMADT()+0x4b0>
c000e8dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e8e0:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8e5:	83 ec 0c             	sub    esp,0xc
c000e8e8:	50                   	push   eax
c000e8e9:	e8 ae fd ff ff       	call   c000e69c <findRSDT(unsigned char*)>
c000e8ee:	83 c4 10             	add    esp,0x10
c000e8f1:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e8f6:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8fb:	85 c0                	test   eax,eax
c000e8fd:	75 19                	jne    c000e918 <scanMADT()+0xa4>
c000e8ff:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e904:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e90a:	83 e2 fb             	and    edx,0xfffffffb
c000e90d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e913:	e9 0c 04 00 00       	jmp    c000ed24 <scanMADT()+0x4b0>
c000e918:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e91d:	83 ec 0c             	sub    esp,0xc
c000e920:	50                   	push   eax
c000e921:	e8 0a fb ff ff       	call   c000e430 <loadACPITables(unsigned char*)>
c000e926:	83 c4 10             	add    esp,0x10
c000e929:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e92e:	83 ec 08             	sub    esp,0x8
c000e931:	68 2c 09 02 c0       	push   0xc002092c
c000e936:	50                   	push   eax
c000e937:	e8 b8 fe ff ff       	call   c000e7f4 <findDataTable(unsigned char*, char*)>
c000e93c:	83 c4 10             	add    esp,0x10
c000e93f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e943:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e948:	75 1a                	jne    c000e964 <scanMADT()+0xf0>
c000e94a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e94f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e955:	83 e2 fe             	and    edx,0xfffffffe
c000e958:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e95e:	e9 c1 03 00 00       	jmp    c000ed24 <scanMADT()+0x4b0>
c000e963:	90                   	nop
c000e964:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e96c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e970:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e973:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e977:	0f 87 a7 03 00 00    	ja     c000ed24 <scanMADT()+0x4b0>
c000e97d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e985:	0f 87 99 03 00 00    	ja     c000ed24 <scanMADT()+0x4b0>
c000e98b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e98f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e993:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e997:	8d 50 01             	lea    edx,[eax+0x1]
c000e99a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e99e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9a2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9a6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e9aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ae:	8d 50 01             	lea    edx,[eax+0x1]
c000e9b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9bd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e9c1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e9c6:	83 f8 02             	cmp    eax,0x2
c000e9c9:	0f 86 51 03 00 00    	jbe    c000ed20 <scanMADT()+0x4ac>
c000e9cf:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9d4:	85 c0                	test   eax,eax
c000e9d6:	75 58                	jne    c000ea30 <scanMADT()+0x1bc>
c000e9d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9dc:	8d 50 01             	lea    edx,[eax+0x1]
c000e9df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9e3:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9e9:	0f b6 d2             	movzx  edx,dl
c000e9ec:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9f0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9f4:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e9fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9fe:	8d 50 01             	lea    edx,[eax+0x1]
c000ea01:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea05:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ea0b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ea0e:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000ea14:	0f b6 d2             	movzx  edx,dl
c000ea17:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea1b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea1f:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ea25:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea2a:	e9 d9 02 00 00       	jmp    c000ed08 <scanMADT()+0x494>
c000ea2f:	90                   	nop
c000ea30:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ea35:	83 f8 01             	cmp    eax,0x1
c000ea38:	0f 85 1a 01 00 00    	jne    c000eb58 <scanMADT()+0x2e4>
c000ea3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea42:	8d 50 01             	lea    edx,[eax+0x1]
c000ea45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea49:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ea4f:	0f b6 d2             	movzx  edx,dl
c000ea52:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea56:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea5a:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea60:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea6d:	01 d0                	add    eax,edx
c000ea6f:	83 c0 2c             	add    eax,0x2c
c000ea72:	8a 00                	mov    al,BYTE PTR [eax]
c000ea74:	0f b6 d0             	movzx  edx,al
c000ea77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea7b:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea82:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea86:	0f b6 c0             	movzx  eax,al
c000ea89:	c1 e0 08             	shl    eax,0x8
c000ea8c:	89 d1                	mov    ecx,edx
c000ea8e:	09 c1                	or     ecx,eax
c000ea90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea94:	8d 50 02             	lea    edx,[eax+0x2]
c000ea97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea9b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea9f:	0f b6 c0             	movzx  eax,al
c000eaa2:	c1 e0 10             	shl    eax,0x10
c000eaa5:	09 c1                	or     ecx,eax
c000eaa7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaab:	8d 50 03             	lea    edx,[eax+0x3]
c000eaae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eab2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eab6:	0f b6 c0             	movzx  eax,al
c000eab9:	c1 e0 18             	shl    eax,0x18
c000eabc:	09 c1                	or     ecx,eax
c000eabe:	89 ca                	mov    edx,ecx
c000eac0:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eac5:	0f b6 c0             	movzx  eax,al
c000eac8:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000eacf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ead4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ead8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eadc:	01 d0                	add    eax,edx
c000eade:	83 c0 2c             	add    eax,0x2c
c000eae1:	8a 00                	mov    al,BYTE PTR [eax]
c000eae3:	0f b6 d0             	movzx  edx,al
c000eae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaea:	8d 48 01             	lea    ecx,[eax+0x1]
c000eaed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaf1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eaf5:	0f b6 c0             	movzx  eax,al
c000eaf8:	c1 e0 08             	shl    eax,0x8
c000eafb:	89 d1                	mov    ecx,edx
c000eafd:	09 c1                	or     ecx,eax
c000eaff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb03:	8d 50 02             	lea    edx,[eax+0x2]
c000eb06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb0a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb0e:	0f b6 c0             	movzx  eax,al
c000eb11:	c1 e0 10             	shl    eax,0x10
c000eb14:	09 c1                	or     ecx,eax
c000eb16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb1a:	8d 50 03             	lea    edx,[eax+0x3]
c000eb1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb21:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb25:	0f b6 c0             	movzx  eax,al
c000eb28:	c1 e0 18             	shl    eax,0x18
c000eb2b:	09 c1                	or     ecx,eax
c000eb2d:	89 ca                	mov    edx,ecx
c000eb2f:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb34:	0f b6 c0             	movzx  eax,al
c000eb37:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb3e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb43:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb48:	83 c0 01             	add    eax,0x1
c000eb4b:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb50:	e9 b3 01 00 00       	jmp    c000ed08 <scanMADT()+0x494>
c000eb55:	8d 76 00             	lea    esi,[esi+0x0]
c000eb58:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb5d:	83 f8 02             	cmp    eax,0x2
c000eb60:	0f 85 ea 00 00 00    	jne    c000ec50 <scanMADT()+0x3dc>
c000eb66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb6a:	8d 50 01             	lea    edx,[eax+0x1]
c000eb6d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb75:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb79:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb81:	8d 50 01             	lea    edx,[eax+0x1]
c000eb84:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb88:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb8c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb90:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb9c:	01 d0                	add    eax,edx
c000eb9e:	83 c0 2c             	add    eax,0x2c
c000eba1:	8a 00                	mov    al,BYTE PTR [eax]
c000eba3:	0f b6 d0             	movzx  edx,al
c000eba6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebaa:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebb1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebb5:	0f b6 c0             	movzx  eax,al
c000ebb8:	c1 e0 08             	shl    eax,0x8
c000ebbb:	89 d1                	mov    ecx,edx
c000ebbd:	09 c1                	or     ecx,eax
c000ebbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc3:	8d 50 02             	lea    edx,[eax+0x2]
c000ebc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebce:	0f b6 c0             	movzx  eax,al
c000ebd1:	c1 e0 10             	shl    eax,0x10
c000ebd4:	09 c1                	or     ecx,eax
c000ebd6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebda:	8d 50 03             	lea    edx,[eax+0x3]
c000ebdd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebe1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebe5:	0f b6 c0             	movzx  eax,al
c000ebe8:	c1 e0 18             	shl    eax,0x18
c000ebeb:	09 c8                	or     eax,ecx
c000ebed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebf1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ebf6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebfa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebfe:	01 d0                	add    eax,edx
c000ec00:	83 c0 2c             	add    eax,0x2c
c000ec03:	8a 00                	mov    al,BYTE PTR [eax]
c000ec05:	0f b6 d0             	movzx  edx,al
c000ec08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec0c:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec13:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec17:	0f b6 c0             	movzx  eax,al
c000ec1a:	c1 e0 08             	shl    eax,0x8
c000ec1d:	09 d0                	or     eax,edx
c000ec1f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec24:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec29:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec32:	88 90 a0 1f 02 c0    	mov    BYTE PTR [eax-0x3ffde060],dl
c000ec38:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec3d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000ec42:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000ec4a:	e9 b9 00 00 00       	jmp    c000ed08 <scanMADT()+0x494>
c000ec4f:	90                   	nop
c000ec50:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec55:	83 f8 04             	cmp    eax,0x4
c000ec58:	0f 85 9a 00 00 00    	jne    c000ecf8 <scanMADT()+0x484>
c000ec5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec62:	8d 50 01             	lea    edx,[eax+0x1]
c000ec65:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec6d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec71:	0f b6 c0             	movzx  eax,al
c000ec74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec80:	01 d0                	add    eax,edx
c000ec82:	83 c0 2c             	add    eax,0x2c
c000ec85:	8a 00                	mov    al,BYTE PTR [eax]
c000ec87:	0f b6 d0             	movzx  edx,al
c000ec8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec8e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec95:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec99:	0f b6 c0             	movzx  eax,al
c000ec9c:	c1 e0 08             	shl    eax,0x8
c000ec9f:	09 d0                	or     eax,edx
c000eca1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eca5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ecaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecae:	8d 50 01             	lea    edx,[eax+0x1]
c000ecb1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecb9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ecbd:	0f b6 c0             	movzx  eax,al
c000ecc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecc8:	c1 e0 08             	shl    eax,0x8
c000eccb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000eccf:	89 c1                	mov    ecx,eax
c000ecd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecd5:	c1 e0 18             	shl    eax,0x18
c000ecd8:	89 c3                	mov    ebx,eax
c000ecda:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ecdf:	8d 50 01             	lea    edx,[eax+0x1]
c000ece2:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ece8:	09 d9                	or     ecx,ebx
c000ecea:	89 ca                	mov    edx,ecx
c000ecec:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ecf3:	eb 13                	jmp    c000ed08 <scanMADT()+0x494>
c000ecf5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ecfd:	83 f8 05             	cmp    eax,0x5
c000ed00:	75 06                	jne    c000ed08 <scanMADT()+0x494>
c000ed02:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ed07:	90                   	nop
c000ed08:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ed0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed11:	01 d0                	add    eax,edx
c000ed13:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed17:	e9 50 fc ff ff       	jmp    c000e96c <scanMADT()+0xf8>
c000ed1c:	90                   	nop
c000ed1d:	eb 05                	jmp    c000ed24 <scanMADT()+0x4b0>
c000ed1f:	90                   	nop
c000ed20:	90                   	nop
c000ed21:	8d 76 00             	lea    esi,[esi+0x0]
c000ed24:	83 c4 38             	add    esp,0x38
c000ed27:	5b                   	pop    ebx
c000ed28:	c3                   	ret    
c000ed29:	90                   	nop
c000ed2a:	66 90                	xchg   ax,ax

c000ed2c <ACPI::ACPI()>:
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed33:	83 ec 08             	sub    esp,0x8
c000ed36:	68 31 09 02 c0       	push   0xc0020931
c000ed3b:	50                   	push   eax
c000ed3c:	e8 3b d2 ff ff       	call   c000bf7c <Device::Device(char const*)>
c000ed41:	83 c4 10             	add    esp,0x10
c000ed44:	ba a0 0a 02 c0       	mov    edx,0xc0020aa0
c000ed49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed4d:	89 10                	mov    DWORD PTR [eax],edx
c000ed4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed53:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed5e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed6c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed76:	e8 f9 fa ff ff       	call   c000e874 <scanMADT()>
c000ed7b:	90                   	nop
c000ed7c:	83 c4 0c             	add    esp,0xc
c000ed7f:	c3                   	ret    

c000ed80 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed80:	83 ec 2c             	sub    esp,0x2c
c000ed83:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ed87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed8b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000ed8f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ed93:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed98:	88 c8                	mov    al,cl
c000ed9a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed9e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eda3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000edab:	90                   	nop
c000edac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edb0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edb6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000edba:	0f 8d b0 00 00 00    	jge    c000ee70 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000edc0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edc4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edc8:	83 c2 2a             	add    edx,0x2a
c000edcb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000edcf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000edd4:	0f b7 c0             	movzx  eax,ax
c000edd7:	39 c2                	cmp    edx,eax
c000edd9:	0f 85 85 00 00 00    	jne    c000ee64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000eddf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ede3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ede7:	83 c2 2a             	add    edx,0x2a
c000edea:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000edee:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000edf3:	0f b6 c0             	movzx  eax,al
c000edf6:	39 c2                	cmp    edx,eax
c000edf8:	75 6a                	jne    c000ee64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edfa:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000edff:	85 c0                	test   eax,eax
c000ee01:	74 3d                	je     c000ee40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000ee03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee0b:	83 c2 2a             	add    edx,0x2a
c000ee0e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee19:	39 c2                	cmp    edx,eax
c000ee1b:	74 13                	je     c000ee30 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000ee1d:	83 ec 0c             	sub    esp,0xc
c000ee20:	68 ac 08 02 c0       	push   0xc00208ac
c000ee25:	e8 23 1a 00 00       	call   c001084d <KePanic(char const*)>
c000ee2a:	83 c4 10             	add    esp,0x10
c000ee2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee30:	83 ec 0c             	sub    esp,0xc
c000ee33:	68 36 09 02 c0       	push   0xc0020936
c000ee38:	e8 10 1a 00 00       	call   c001084d <KePanic(char const*)>
c000ee3d:	83 c4 10             	add    esp,0x10
c000ee40:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee4c:	83 c2 2a             	add    edx,0x2a
c000ee4f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee53:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee55:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee58:	89 01                	mov    DWORD PTR [ecx],eax
c000ee5a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee5d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee62:	66 90                	xchg   ax,ax
c000ee64:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee69:	e9 3e ff ff ff       	jmp    c000edac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee6e:	66 90                	xchg   ax,ax
c000ee70:	90                   	nop
c000ee71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee75:	83 c4 2c             	add    esp,0x2c
c000ee78:	c2 04 00             	ret    0x4
c000ee7b:	90                   	nop

c000ee7c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee7c:	83 ec 1c             	sub    esp,0x1c
c000ee7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee83:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee87:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee8b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee90:	88 c8                	mov    al,cl
c000ee92:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee96:	88 d0                	mov    al,dl
c000ee98:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeaa:	83 c2 2a             	add    edx,0x2a
c000eead:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000eeb1:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000eeb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eec6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eeca:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000eecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eed9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eedd:	83 c0 01             	add    eax,0x1
c000eee0:	88 c1                	mov    cl,al
c000eee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee6:	83 c2 2a             	add    edx,0x2a
c000eee9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eeed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eef7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eefb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eefe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef02:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ef06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef0a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef10:	8d 50 01             	lea    edx,[eax+0x1]
c000ef13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef17:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef21:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef27:	3d 00 02 00 00       	cmp    eax,0x200
c000ef2c:	75 12                	jne    c000ef40 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ef2e:	83 ec 0c             	sub    esp,0xc
c000ef31:	68 45 09 02 c0       	push   0xc0020945
c000ef36:	e8 12 19 00 00       	call   c001084d <KePanic(char const*)>
c000ef3b:	83 c4 10             	add    esp,0x10
c000ef3e:	66 90                	xchg   ax,ax
c000ef40:	90                   	nop
c000ef41:	83 c4 1c             	add    esp,0x1c
c000ef44:	c3                   	ret    
c000ef45:	90                   	nop
c000ef46:	66 90                	xchg   ax,ax

c000ef48 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef48:	b8 00 00 00 00       	mov    eax,0x0
c000ef4d:	c3                   	ret    
c000ef4e:	66 90                	xchg   ax,ax

c000ef50 <ACPI::detectPCI()>:
c000ef50:	53                   	push   ebx
c000ef51:	83 ec 28             	sub    esp,0x28
c000ef54:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef59:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef5e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef63:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef69:	83 e0 04             	and    eax,0x4
c000ef6c:	0f b6 c0             	movzx  eax,al
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 2d                	je     c000efa0 <ACPI::detectPCI()+0x50>
c000ef73:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef78:	83 ec 08             	sub    esp,0x8
c000ef7b:	68 62 09 02 c0       	push   0xc0020962
c000ef80:	50                   	push   eax
c000ef81:	e8 6e f8 ff ff       	call   c000e7f4 <findDataTable(unsigned char*, char*)>
c000ef86:	83 c4 10             	add    esp,0x10
c000ef89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef8d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef92:	74 0c                	je     c000efa0 <ACPI::detectPCI()+0x50>
c000ef94:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef99:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef9e:	66 90                	xchg   ax,ax
c000efa0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000efa8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efac:	8a 00                	mov    al,BYTE PTR [eax]
c000efae:	0f b6 c0             	movzx  eax,al
c000efb1:	83 f8 01             	cmp    eax,0x1
c000efb4:	75 0e                	jne    c000efc4 <ACPI::detectPCI()+0x74>
c000efb6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efbb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efc0:	eb 2e                	jmp    c000eff0 <ACPI::detectPCI()+0xa0>
c000efc2:	66 90                	xchg   ax,ax
c000efc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efc8:	8a 00                	mov    al,BYTE PTR [eax]
c000efca:	0f b6 c0             	movzx  eax,al
c000efcd:	83 f8 02             	cmp    eax,0x2
c000efd0:	75 1e                	jne    c000eff0 <ACPI::detectPCI()+0xa0>
c000efd2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efd7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000efdc:	85 c0                	test   eax,eax
c000efde:	74 10                	je     c000eff0 <ACPI::detectPCI()+0xa0>
c000efe0:	83 ec 0c             	sub    esp,0xc
c000efe3:	68 dc 08 02 c0       	push   0xc00208dc
c000efe8:	e8 60 18 00 00       	call   c001084d <KePanic(char const*)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eff4:	83 f0 01             	xor    eax,0x1
c000eff7:	0f b6 c0             	movzx  eax,al
c000effa:	85 c0                	test   eax,eax
c000effc:	74 46                	je     c000f044 <ACPI::detectPCI()+0xf4>
c000effe:	e8 2d 11 ff ff       	call   c0000130 <manualPCIProbe>
c000f003:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f007:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f00c:	75 0e                	jne    c000f01c <ACPI::detectPCI()+0xcc>
c000f00e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f013:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f018:	eb 2a                	jmp    c000f044 <ACPI::detectPCI()+0xf4>
c000f01a:	66 90                	xchg   ax,ax
c000f01c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f021:	75 21                	jne    c000f044 <ACPI::detectPCI()+0xf4>
c000f023:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f028:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f02d:	85 c0                	test   eax,eax
c000f02f:	74 13                	je     c000f044 <ACPI::detectPCI()+0xf4>
c000f031:	83 ec 0c             	sub    esp,0xc
c000f034:	68 dc 08 02 c0       	push   0xc00208dc
c000f039:	e8 0f 18 00 00       	call   c001084d <KePanic(char const*)>
c000f03e:	83 c4 10             	add    esp,0x10
c000f041:	8d 76 00             	lea    esi,[esi+0x0]
c000f044:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f049:	85 c0                	test   eax,eax
c000f04b:	0f 84 87 00 00 00    	je     c000f0d8 <ACPI::detectPCI()+0x188>
c000f051:	83 ec 0c             	sub    esp,0xc
c000f054:	68 67 09 02 c0       	push   0xc0020967
c000f059:	e8 72 11 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c000f05e:	83 c4 10             	add    esp,0x10
c000f061:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f069:	83 ec 0c             	sub    esp,0xc
c000f06c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f070:	e8 56 8a ff ff       	call   c0007acb <malloc>
c000f075:	83 c4 10             	add    esp,0x10
c000f078:	89 c3                	mov    ebx,eax
c000f07a:	83 ec 0c             	sub    esp,0xc
c000f07d:	53                   	push   ebx
c000f07e:	e8 c7 af 00 00       	call   c001a04a <PCI::PCI()>
c000f083:	83 c4 10             	add    esp,0x10
c000f086:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f08e:	83 ec 08             	sub    esp,0x8
c000f091:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f095:	50                   	push   eax
c000f096:	e8 49 cd ff ff       	call   c000bde4 <Device::addChild(Device*)>
c000f09b:	83 c4 10             	add    esp,0x10
c000f09e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0a4:	83 c0 08             	add    eax,0x8
c000f0a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0a9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f0ae:	85 d2                	test   edx,edx
c000f0b0:	74 0a                	je     c000f0bc <ACPI::detectPCI()+0x16c>
c000f0b2:	ba 01 00 00 00       	mov    edx,0x1
c000f0b7:	eb 0b                	jmp    c000f0c4 <ACPI::detectPCI()+0x174>
c000f0b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0bc:	ba 02 00 00 00       	mov    edx,0x2
c000f0c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c4:	6a 00                	push   0x0
c000f0c6:	6a 00                	push   0x0
c000f0c8:	52                   	push   edx
c000f0c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0cd:	ff d0                	call   eax
c000f0cf:	83 c4 10             	add    esp,0x10
c000f0d2:	e9 91 00 00 00       	jmp    c000f168 <ACPI::detectPCI()+0x218>
c000f0d7:	90                   	nop
c000f0d8:	83 ec 0c             	sub    esp,0xc
c000f0db:	68 7f 09 02 c0       	push   0xc002097f
c000f0e0:	e8 eb 10 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c000f0e5:	83 c4 10             	add    esp,0x10
c000f0e8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0ef:	83 ec 0c             	sub    esp,0xc
c000f0f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f0f6:	e8 d0 89 ff ff       	call   c0007acb <malloc>
c000f0fb:	83 c4 10             	add    esp,0x10
c000f0fe:	89 c3                	mov    ebx,eax
c000f100:	83 ec 0c             	sub    esp,0xc
c000f103:	53                   	push   ebx
c000f104:	e8 e9 ba 00 00       	call   c001abf2 <IDE::IDE()>
c000f109:	83 c4 10             	add    esp,0x10
c000f10c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f110:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f114:	83 ec 08             	sub    esp,0x8
c000f117:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f11b:	50                   	push   eax
c000f11c:	e8 c3 cc ff ff       	call   c000bde4 <Device::addChild(Device*)>
c000f121:	83 c4 10             	add    esp,0x10
c000f124:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f128:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f132:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f136:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f13f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f143:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f14c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f150:	8b 00                	mov    eax,DWORD PTR [eax]
c000f152:	83 c0 08             	add    eax,0x8
c000f155:	8b 00                	mov    eax,DWORD PTR [eax]
c000f157:	6a 00                	push   0x0
c000f159:	6a 00                	push   0x0
c000f15b:	6a 00                	push   0x0
c000f15d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f161:	ff d0                	call   eax
c000f163:	83 c4 10             	add    esp,0x10
c000f166:	66 90                	xchg   ax,ax
c000f168:	90                   	nop
c000f169:	83 c4 28             	add    esp,0x28
c000f16c:	5b                   	pop    ebx
c000f16d:	c3                   	ret    
c000f16e:	66 90                	xchg   ax,ax

c000f170 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f170:	83 ec 1c             	sub    esp,0x1c
c000f173:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f177:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f17a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f17e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f183:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f188:	83 ec 08             	sub    esp,0x8
c000f18b:	52                   	push   edx
c000f18c:	50                   	push   eax
c000f18d:	e8 00 80 ff ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c000f192:	83 c4 10             	add    esp,0x10
c000f195:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f199:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f19e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f1a3:	83 ec 04             	sub    esp,0x4
c000f1a6:	6a 01                	push   0x1
c000f1a8:	52                   	push   edx
c000f1a9:	50                   	push   eax
c000f1aa:	e8 fb 80 ff ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c000f1af:	83 c4 10             	add    esp,0x10
c000f1b2:	90                   	nop
c000f1b3:	83 c4 1c             	add    esp,0x1c
c000f1b6:	c3                   	ret    
c000f1b7:	90                   	nop

c000f1b8 <ACPI::sleep()>:
c000f1b8:	83 ec 0c             	sub    esp,0xc
c000f1bb:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1c0:	85 c0                	test   eax,eax
c000f1c2:	74 08                	je     c000f1cc <ACPI::sleep()+0x14>
c000f1c4:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1c9:	ff d0                	call   eax
c000f1cb:	90                   	nop
c000f1cc:	90                   	nop
c000f1cd:	83 c4 0c             	add    esp,0xc
c000f1d0:	c3                   	ret    
c000f1d1:	90                   	nop
c000f1d2:	66 90                	xchg   ax,ax

c000f1d4 <ACPI::open(int, int, void*)>:
c000f1d4:	55                   	push   ebp
c000f1d5:	89 e5                	mov    ebp,esp
c000f1d7:	53                   	push   ebx
c000f1d8:	81 ec 74 01 00 00    	sub    esp,0x174
c000f1de:	83 ec 0c             	sub    esp,0xc
c000f1e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f1e4:	e8 67 fd ff ff       	call   c000ef50 <ACPI::detectPCI()>
c000f1e9:	83 c4 10             	add    esp,0x10
c000f1ec:	83 ec 0c             	sub    esp,0xc
c000f1ef:	68 04 09 02 c0       	push   0xc0020904
c000f1f4:	e8 d7 0f 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c000f1f9:	83 c4 10             	add    esp,0x10
c000f1fc:	b8 4c 05 00 00       	mov    eax,0x54c
c000f201:	8a 00                	mov    al,BYTE PTR [eax]
c000f203:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000f206:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f20a:	83 f8 01             	cmp    eax,0x1
c000f20d:	75 15                	jne    c000f224 <ACPI::open(int, int, void*)+0x50>
c000f20f:	83 ec 0c             	sub    esp,0xc
c000f212:	68 94 09 02 c0       	push   0xc0020994
c000f217:	e8 3e 49 00 00       	call   c0013b5a <Thr::loadKernelSymbolTable(char const*)>
c000f21c:	83 c4 10             	add    esp,0x10
c000f21f:	eb 33                	jmp    c000f254 <ACPI::open(int, int, void*)+0x80>
c000f221:	8d 76 00             	lea    esi,[esi+0x0]
c000f224:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f228:	3d bb 00 00 00       	cmp    eax,0xbb
c000f22d:	75 15                	jne    c000f244 <ACPI::open(int, int, void*)+0x70>
c000f22f:	83 ec 0c             	sub    esp,0xc
c000f232:	68 b2 09 02 c0       	push   0xc00209b2
c000f237:	e8 1e 49 00 00       	call   c0013b5a <Thr::loadKernelSymbolTable(char const*)>
c000f23c:	83 c4 10             	add    esp,0x10
c000f23f:	eb 13                	jmp    c000f254 <ACPI::open(int, int, void*)+0x80>
c000f241:	8d 76 00             	lea    esi,[esi+0x0]
c000f244:	83 ec 0c             	sub    esp,0xc
c000f247:	68 d0 09 02 c0       	push   0xc00209d0
c000f24c:	e8 fc 15 00 00       	call   c001084d <KePanic(char const*)>
c000f251:	83 c4 10             	add    esp,0x10
c000f254:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f258:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000f25f:	83 ec 0c             	sub    esp,0xc
c000f262:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000f265:	e8 61 88 ff ff       	call   c0007acb <malloc>
c000f26a:	83 c4 10             	add    esp,0x10
c000f26d:	89 c3                	mov    ebx,eax
c000f26f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f274:	83 ec 04             	sub    esp,0x4
c000f277:	50                   	push   eax
c000f278:	68 ea 09 02 c0       	push   0xc00209ea
c000f27d:	53                   	push   ebx
c000f27e:	e8 a9 bc ff ff       	call   c000af2c <File::File(char const*, Process*)>
c000f283:	83 c4 10             	add    esp,0x10
c000f286:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f289:	83 ec 08             	sub    esp,0x8
c000f28c:	6a 01                	push   0x1
c000f28e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f291:	e8 52 bd ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c000f296:	83 c4 10             	add    esp,0x10
c000f299:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f29c:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000f2a0:	75 12                	jne    c000f2b4 <ACPI::open(int, int, void*)+0xe0>
c000f2a2:	83 ec 0c             	sub    esp,0xc
c000f2a5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f2a8:	e8 99 bd ff ff       	call   c000b046 <File::close()>
c000f2ad:	83 c4 10             	add    esp,0x10
c000f2b0:	eb 06                	jmp    c000f2b8 <ACPI::open(int, int, void*)+0xe4>
c000f2b2:	66 90                	xchg   ax,ax
c000f2b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f2b8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000f2bc:	74 16                	je     c000f2d4 <ACPI::open(int, int, void*)+0x100>
c000f2be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2c3:	83 c0 08             	add    eax,0x8
c000f2c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2c8:	83 ec 0c             	sub    esp,0xc
c000f2cb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f2ce:	ff d0                	call   eax
c000f2d0:	83 c4 10             	add    esp,0x10
c000f2d3:	90                   	nop
c000f2d4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000f2d7:	83 f0 01             	xor    eax,0x1
c000f2da:	0f b6 c0             	movzx  eax,al
c000f2dd:	85 c0                	test   eax,eax
c000f2df:	74 3b                	je     c000f31c <ACPI::open(int, int, void*)+0x148>
c000f2e1:	83 ec 0c             	sub    esp,0xc
c000f2e4:	68 08 0a 02 c0       	push   0xc0020a08
c000f2e9:	e8 e2 0e 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c000f2ee:	83 c4 10             	add    esp,0x10
c000f2f1:	83 ec 04             	sub    esp,0x4
c000f2f4:	6a 0c                	push   0xc
c000f2f6:	68 23 0a 02 c0       	push   0xc0020a23
c000f2fb:	68 34 0a 02 c0       	push   0xc0020a34
c000f300:	e8 fd 3b 00 00       	call   c0012f02 <Reg::readIntWithDefault(char*, char*, int)>
c000f305:	83 c4 10             	add    esp,0x10
c000f308:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f30b:	83 ec 0c             	sub    esp,0xc
c000f30e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f311:	e8 14 a5 ff ff       	call   c000982a <Virt::setupPageSwapping(int)>
c000f316:	83 c4 10             	add    esp,0x10
c000f319:	8d 76 00             	lea    esi,[esi+0x0]
c000f31c:	83 ec 0c             	sub    esp,0xc
c000f31f:	68 15 fa 01 c0       	push   0xc001fa15
c000f324:	e8 a7 0e 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c000f329:	83 c4 10             	add    esp,0x10
c000f32c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f32f:	83 ec 08             	sub    esp,0x8
c000f332:	6a 13                	push   0x13
c000f334:	50                   	push   eax
c000f335:	e8 c2 cd ff ff       	call   c000c0fc <getDevicesOfType(DeviceType)>
c000f33a:	83 c4 0c             	add    esp,0xc
c000f33d:	8d 76 00             	lea    esi,[esi+0x0]
c000f340:	83 ec 0c             	sub    esp,0xc
c000f343:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f346:	50                   	push   eax
c000f347:	e8 b4 fa 00 00       	call   c001ee00 <LinkedList<Device>::isEmpty()>
c000f34c:	83 c4 10             	add    esp,0x10
c000f34f:	83 f0 01             	xor    eax,0x1
c000f352:	0f b6 c0             	movzx  eax,al
c000f355:	85 c0                	test   eax,eax
c000f357:	0f 84 1f 01 00 00    	je     c000f47c <ACPI::open(int, int, void*)+0x2a8>
c000f35d:	83 ec 0c             	sub    esp,0xc
c000f360:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f363:	50                   	push   eax
c000f364:	e8 b3 fa 00 00       	call   c001ee1c <LinkedList<Device>::getFirstElement()>
c000f369:	83 c4 10             	add    esp,0x10
c000f36c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000f36f:	83 ec 0c             	sub    esp,0xc
c000f372:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f375:	50                   	push   eax
c000f376:	e8 a9 fa 00 00       	call   c001ee24 <LinkedList<Device>::removeFirst()>
c000f37b:	83 c4 10             	add    esp,0x10
c000f37e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000f381:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f384:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000f387:	b8 24 00 00 00       	mov    eax,0x24
c000f38c:	83 e0 fc             	and    eax,0xfffffffc
c000f38f:	89 c3                	mov    ebx,eax
c000f391:	b8 00 00 00 00       	mov    eax,0x0
c000f396:	66 90                	xchg   ax,ax
c000f398:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f39f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000f3a6:	83 c0 04             	add    eax,0x4
c000f3a9:	39 d8                	cmp    eax,ebx
c000f3ab:	72 eb                	jb     c000f398 <ACPI::open(int, int, void*)+0x1c4>
c000f3ad:	83 ec 08             	sub    esp,0x8
c000f3b0:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000f3b6:	50                   	push   eax
c000f3b7:	83 ec 24             	sub    esp,0x24
c000f3ba:	89 e1                	mov    ecx,esp
c000f3bc:	b8 24 00 00 00       	mov    eax,0x24
c000f3c1:	83 e0 fc             	and    eax,0xfffffffc
c000f3c4:	89 c3                	mov    ebx,eax
c000f3c6:	b8 00 00 00 00       	mov    eax,0x0
c000f3cb:	90                   	nop
c000f3cc:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000f3d3:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000f3d6:	83 c0 04             	add    eax,0x4
c000f3d9:	39 d8                	cmp    eax,ebx
c000f3db:	72 ef                	jb     c000f3cc <ACPI::open(int, int, void*)+0x1f8>
c000f3dd:	e8 50 b1 00 00       	call   c001a532 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f3e2:	83 c4 30             	add    esp,0x30
c000f3e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000f3e8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000f3ec:	0f 84 4e ff ff ff    	je     c000f340 <ACPI::open(int, int, void*)+0x16c>
c000f3f2:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000f3f9:	83 ec 0c             	sub    esp,0xc
c000f3fc:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000f3ff:	e8 c7 86 ff ff       	call   c0007acb <malloc>
c000f404:	83 c4 10             	add    esp,0x10
c000f407:	89 c3                	mov    ebx,eax
c000f409:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f40e:	83 ec 04             	sub    esp,0x4
c000f411:	50                   	push   eax
c000f412:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f415:	53                   	push   ebx
c000f416:	e8 11 bb ff ff       	call   c000af2c <File::File(char const*, Process*)>
c000f41b:	83 c4 10             	add    esp,0x10
c000f41e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000f421:	83 ec 0c             	sub    esp,0xc
c000f424:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f427:	e8 2a be ff ff       	call   c000b256 <File::exists()>
c000f42c:	83 c4 10             	add    esp,0x10
c000f42f:	0f b6 c0             	movzx  eax,al
c000f432:	85 c0                	test   eax,eax
c000f434:	74 22                	je     c000f458 <ACPI::open(int, int, void*)+0x284>
c000f436:	83 ec 08             	sub    esp,0x8
c000f439:	6a 01                	push   0x1
c000f43b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f43e:	e8 99 51 00 00       	call   c00145dc <Thr::loadDLL(char const*, bool)>
c000f443:	83 c4 10             	add    esp,0x10
c000f446:	83 ec 08             	sub    esp,0x8
c000f449:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f44c:	50                   	push   eax
c000f44d:	e8 ca 53 00 00       	call   c001481c <Thr::executeDLL(unsigned long, void*)>
c000f452:	83 c4 10             	add    esp,0x10
c000f455:	8d 76 00             	lea    esi,[esi+0x0]
c000f458:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000f45c:	0f 84 de fe ff ff    	je     c000f340 <ACPI::open(int, int, void*)+0x16c>
c000f462:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f465:	8b 00                	mov    eax,DWORD PTR [eax]
c000f467:	83 c0 08             	add    eax,0x8
c000f46a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f46c:	83 ec 0c             	sub    esp,0xc
c000f46f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f472:	ff d0                	call   eax
c000f474:	83 c4 10             	add    esp,0x10
c000f477:	e9 c4 fe ff ff       	jmp    c000f340 <ACPI::open(int, int, void*)+0x16c>
c000f47c:	83 ec 0c             	sub    esp,0xc
c000f47f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f482:	50                   	push   eax
c000f483:	e8 74 f9 00 00       	call   c001edfc <LinkedList<Device>::~LinkedList()>
c000f488:	83 c4 10             	add    esp,0x10
c000f48b:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f491:	83 ec 08             	sub    esp,0x8
c000f494:	6a 01                	push   0x1
c000f496:	68 3b 0a 02 c0       	push   0xc0020a3b
c000f49b:	e8 3c 51 00 00       	call   c00145dc <Thr::loadDLL(char const*, bool)>
c000f4a0:	83 c4 10             	add    esp,0x10
c000f4a3:	83 ec 08             	sub    esp,0x8
c000f4a6:	53                   	push   ebx
c000f4a7:	50                   	push   eax
c000f4a8:	e8 6f 53 00 00       	call   c001481c <Thr::executeDLL(unsigned long, void*)>
c000f4ad:	83 c4 10             	add    esp,0x10
c000f4b0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f4b5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4bb:	83 e0 04             	and    eax,0x4
c000f4be:	0f b6 c0             	movzx  eax,al
c000f4c1:	85 c0                	test   eax,eax
c000f4c3:	0f 84 e3 00 00 00    	je     c000f5ac <ACPI::open(int, int, void*)+0x3d8>
c000f4c9:	83 ec 0c             	sub    esp,0xc
c000f4cc:	68 58 0a 02 c0       	push   0xc0020a58
c000f4d1:	e8 fa 0c 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c000f4d6:	83 c4 10             	add    esp,0x10
c000f4d9:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000f4e0:	83 ec 0c             	sub    esp,0xc
c000f4e3:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000f4e6:	e8 e0 85 ff ff       	call   c0007acb <malloc>
c000f4eb:	83 c4 10             	add    esp,0x10
c000f4ee:	89 c3                	mov    ebx,eax
c000f4f0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f4f5:	83 ec 04             	sub    esp,0x4
c000f4f8:	50                   	push   eax
c000f4f9:	68 75 0a 02 c0       	push   0xc0020a75
c000f4fe:	53                   	push   ebx
c000f4ff:	e8 28 ba ff ff       	call   c000af2c <File::File(char const*, Process*)>
c000f504:	83 c4 10             	add    esp,0x10
c000f507:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000f50a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f50e:	74 1c                	je     c000f52c <ACPI::open(int, int, void*)+0x358>
c000f510:	83 ec 0c             	sub    esp,0xc
c000f513:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f516:	e8 3b bd ff ff       	call   c000b256 <File::exists()>
c000f51b:	83 c4 10             	add    esp,0x10
c000f51e:	0f b6 c0             	movzx  eax,al
c000f521:	85 c0                	test   eax,eax
c000f523:	74 07                	je     c000f52c <ACPI::open(int, int, void*)+0x358>
c000f525:	b0 01                	mov    al,0x1
c000f527:	eb 07                	jmp    c000f530 <ACPI::open(int, int, void*)+0x35c>
c000f529:	8d 76 00             	lea    esi,[esi+0x0]
c000f52c:	b0 00                	mov    al,0x0
c000f52e:	66 90                	xchg   ax,ax
c000f530:	0f b6 c0             	movzx  eax,al
c000f533:	85 c0                	test   eax,eax
c000f535:	74 21                	je     c000f558 <ACPI::open(int, int, void*)+0x384>
c000f537:	83 ec 08             	sub    esp,0x8
c000f53a:	6a 01                	push   0x1
c000f53c:	68 75 0a 02 c0       	push   0xc0020a75
c000f541:	e8 96 50 00 00       	call   c00145dc <Thr::loadDLL(char const*, bool)>
c000f546:	83 c4 10             	add    esp,0x10
c000f549:	83 ec 08             	sub    esp,0x8
c000f54c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f54f:	50                   	push   eax
c000f550:	e8 c7 52 00 00       	call   c001481c <Thr::executeDLL(unsigned long, void*)>
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f55c:	74 1e                	je     c000f57c <ACPI::open(int, int, void*)+0x3a8>
c000f55e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f562:	74 18                	je     c000f57c <ACPI::open(int, int, void*)+0x3a8>
c000f564:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000f567:	8b 00                	mov    eax,DWORD PTR [eax]
c000f569:	83 c0 08             	add    eax,0x8
c000f56c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56e:	83 ec 0c             	sub    esp,0xc
c000f571:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f574:	ff d0                	call   eax
c000f576:	83 c4 10             	add    esp,0x10
c000f579:	8d 76 00             	lea    esi,[esi+0x0]
c000f57c:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f581:	83 ec 08             	sub    esp,0x8
c000f584:	68 92 0a 02 c0       	push   0xc0020a92
c000f589:	50                   	push   eax
c000f58a:	e8 65 f2 ff ff       	call   c000e7f4 <findDataTable(unsigned char*, char*)>
c000f58f:	83 c4 10             	add    esp,0x10
c000f592:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f595:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000f599:	74 11                	je     c000f5ac <ACPI::open(int, int, void*)+0x3d8>
c000f59b:	83 ec 08             	sub    esp,0x8
c000f59e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000f5a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f5a4:	e8 c7 fb ff ff       	call   c000f170 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f5a9:	83 c4 10             	add    esp,0x10
c000f5ac:	b8 00 00 00 00       	mov    eax,0x0
c000f5b1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f5b4:	c9                   	leave  
c000f5b5:	c3                   	ret    

c000f5b6 <CPU::close(int, int, void*)>:
c000f5b6:	31 c0                	xor    eax,eax
c000f5b8:	c3                   	ret    
c000f5b9:	90                   	nop

c000f5ba <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5ba:	60                   	pusha  
c000f5bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5c7:	9c                   	pushf  
c000f5c8:	fa                   	cli    
c000f5c9:	0f 09                	wbinvd 
c000f5cb:	0f 30                	wrmsr  
c000f5cd:	9d                   	popf   
c000f5ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5d2:	89 02                	mov    DWORD PTR [edx],eax
c000f5d4:	61                   	popa   
c000f5d5:	c3                   	ret    

c000f5d6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5d6:	60                   	pusha  
c000f5d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5db:	9c                   	pushf  
c000f5dc:	fa                   	cli    
c000f5dd:	0f 09                	wbinvd 
c000f5df:	31 c0                	xor    eax,eax
c000f5e1:	31 d2                	xor    edx,edx
c000f5e3:	0f 32                	rdmsr  
c000f5e5:	9d                   	popf   
c000f5e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5ea:	89 02                	mov    DWORD PTR [edx],eax
c000f5ec:	61                   	popa   
c000f5ed:	c3                   	ret    

c000f5ee <CPU::AMD_K6_writeback(int, int, int)>:
c000f5ee:	56                   	push   esi
c000f5ef:	53                   	push   ebx
c000f5f0:	83 ec 10             	sub    esp,0x10
c000f5f3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f5f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5fc:	75 5d                	jne    c000f65b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5fe:	83 f8 08             	cmp    eax,0x8
c000f601:	75 09                	jne    c000f60c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f603:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f608:	7e 13                	jle    c000f61d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f60a:	eb 30                	jmp    c000f63c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f60c:	83 f8 06             	cmp    eax,0x6
c000f60f:	7c 4a                	jl     c000f65b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f611:	83 f8 07             	cmp    eax,0x7
c000f614:	7e 07                	jle    c000f61d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f616:	83 f8 09             	cmp    eax,0x9
c000f619:	74 21                	je     c000f63c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f61b:	eb 3e                	jmp    c000f65b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f61d:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f623:	89 e6                	mov    esi,esp
c000f625:	56                   	push   esi
c000f626:	68 82 00 00 c0       	push   0xc0000082
c000f62b:	e8 a6 ff ff ff       	call   c000f5d6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f630:	c1 eb 15             	shr    ebx,0x15
c000f633:	56                   	push   esi
c000f634:	83 e3 7e             	and    ebx,0x7e
c000f637:	6a 00                	push   0x0
c000f639:	53                   	push   ebx
c000f63a:	eb 12                	jmp    c000f64e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f63c:	89 e3                	mov    ebx,esp
c000f63e:	53                   	push   ebx
c000f63f:	68 82 00 00 c0       	push   0xc0000082
c000f644:	e8 8d ff ff ff       	call   c000f5d6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f649:	53                   	push   ebx
c000f64a:	6a 00                	push   0x0
c000f64c:	6a 00                	push   0x0
c000f64e:	68 82 00 00 c0       	push   0xc0000082
c000f653:	e8 62 ff ff ff       	call   c000f5ba <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f658:	83 c4 18             	add    esp,0x18
c000f65b:	83 c4 10             	add    esp,0x10
c000f65e:	5b                   	pop    ebx
c000f65f:	5e                   	pop    esi
c000f660:	c3                   	ret    
c000f661:	90                   	nop

c000f662 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f662:	55                   	push   ebp
c000f663:	57                   	push   edi
c000f664:	56                   	push   esi
c000f665:	53                   	push   ebx
c000f666:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f66a:	39 05 b0 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fb0,eax
c000f670:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f674:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f678:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f67c:	75 23                	jne    c000f6a1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f67e:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f683:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f687:	89 06                	mov    DWORD PTR [esi],eax
c000f689:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f68e:	89 07                	mov    DWORD PTR [edi],eax
c000f690:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f695:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f698:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f69d:	89 02                	mov    DWORD PTR [edx],eax
c000f69f:	eb 3f                	jmp    c000f6e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f6a1:	31 c9                	xor    ecx,ecx
c000f6a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6a7:	0f a2                	cpuid  
c000f6a9:	89 06                	mov    DWORD PTR [esi],eax
c000f6ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6af:	89 1f                	mov    DWORD PTR [edi],ebx
c000f6b1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6b4:	89 10                	mov    DWORD PTR [eax],edx
c000f6b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6ba:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c000f6bf:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6c1:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f6c6:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6c8:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f6cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6d0:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f6d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6db:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f6e0:	5b                   	pop    ebx
c000f6e1:	5e                   	pop    esi
c000f6e2:	5f                   	pop    edi
c000f6e3:	5d                   	pop    ebp
c000f6e4:	c3                   	ret    
c000f6e5:	90                   	nop

c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>:
c000f6e6:	83 ec 10             	sub    esp,0x10
c000f6e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6ed:	50                   	push   eax
c000f6ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6f2:	50                   	push   eax
c000f6f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6f7:	50                   	push   eax
c000f6f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6fc:	50                   	push   eax
c000f6fd:	6a 01                	push   0x1
c000f6ff:	e8 5e ff ff ff       	call   c000f662 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f704:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f708:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f70c:	0f 95 c0             	setne  al
c000f70f:	83 c4 24             	add    esp,0x24
c000f712:	c3                   	ret    
c000f713:	90                   	nop

c000f714 <CPU::cpuidCheckECX(unsigned int)>:
c000f714:	83 ec 10             	sub    esp,0x10
c000f717:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f71b:	50                   	push   eax
c000f71c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f720:	50                   	push   eax
c000f721:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f725:	50                   	push   eax
c000f726:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f72a:	50                   	push   eax
c000f72b:	6a 01                	push   0x1
c000f72d:	e8 30 ff ff ff       	call   c000f662 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f732:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f736:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f73a:	0f 95 c0             	setne  al
c000f73d:	83 c4 24             	add    esp,0x24
c000f740:	c3                   	ret    
c000f741:	90                   	nop

c000f742 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f742:	83 ec 10             	sub    esp,0x10
c000f745:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f749:	50                   	push   eax
c000f74a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f74e:	50                   	push   eax
c000f74f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f753:	50                   	push   eax
c000f754:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f758:	50                   	push   eax
c000f759:	6a 07                	push   0x7
c000f75b:	e8 02 ff ff ff       	call   c000f662 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f760:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f764:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f768:	0f 95 c0             	setne  al
c000f76b:	83 c4 24             	add    esp,0x24
c000f76e:	c3                   	ret    
c000f76f:	90                   	nop

c000f770 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f770:	83 ec 10             	sub    esp,0x10
c000f773:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f777:	50                   	push   eax
c000f778:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f77c:	50                   	push   eax
c000f77d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f781:	50                   	push   eax
c000f782:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f786:	50                   	push   eax
c000f787:	6a 07                	push   0x7
c000f789:	e8 d4 fe ff ff       	call   c000f662 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f78e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f792:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f796:	0f 95 c0             	setne  al
c000f799:	83 c4 24             	add    esp,0x24
c000f79c:	c3                   	ret    
c000f79d:	90                   	nop

c000f79e <CPU::CPU()>:
c000f79e:	83 ec 0c             	sub    esp,0xc
c000f7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a5:	83 ec 08             	sub    esp,0x8
c000f7a8:	68 b5 0b 02 c0       	push   0xc0020bb5
c000f7ad:	50                   	push   eax
c000f7ae:	e8 c9 c7 ff ff       	call   c000bf7c <Device::Device(char const*)>
c000f7b3:	83 c4 10             	add    esp,0x10
c000f7b6:	ba 3c 0c 02 c0       	mov    edx,0xc0020c3c
c000f7bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7bf:	89 10                	mov    DWORD PTR [eax],edx
c000f7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7c5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7d3:	05 78 01 00 00       	add    eax,0x178
c000f7d8:	83 ec 0c             	sub    esp,0xc
c000f7db:	50                   	push   eax
c000f7dc:	e8 93 7b ff ff       	call   c0007374 <GDT::GDT()>
c000f7e1:	83 c4 10             	add    esp,0x10
c000f7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7e8:	05 7c 09 00 00       	add    eax,0x97c
c000f7ed:	83 ec 0c             	sub    esp,0xc
c000f7f0:	50                   	push   eax
c000f7f1:	e8 ce 7d ff ff       	call   c00075c4 <IDT::IDT()>
c000f7f6:	83 c4 10             	add    esp,0x10
c000f7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7fd:	05 7c 11 00 00       	add    eax,0x117c
c000f802:	83 ec 0c             	sub    esp,0xc
c000f805:	50                   	push   eax
c000f806:	e8 31 97 ff ff       	call   c0008f3c <TSS::TSS()>
c000f80b:	83 c4 10             	add    esp,0x10
c000f80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f812:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f81d:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f827:	90                   	nop
c000f828:	83 c4 0c             	add    esp,0xc
c000f82b:	c3                   	ret    

c000f82c <CPU::displayFeatures()>:
c000f82c:	c3                   	ret    
c000f82d:	90                   	nop

c000f82e <CPU::detectFeatures()>:
c000f82e:	55                   	push   ebp
c000f82f:	57                   	push   edi
c000f830:	56                   	push   esi
c000f831:	53                   	push   ebx
c000f832:	83 ec 30             	sub    esp,0x30
c000f835:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f839:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f843:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f849:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f850:	6a 0d                	push   0xd
c000f852:	6a 00                	push   0x0
c000f854:	55                   	push   ebp
c000f855:	e8 96 0c ff ff       	call   c00004f0 <memset>
c000f85a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f85f:	83 c4 10             	add    esp,0x10
c000f862:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f869:	0f 84 db 05 00 00    	je     c000fe4a <CPU::detectFeatures()+0x61c>
c000f86f:	83 ec 0c             	sub    esp,0xc
c000f872:	89 ef                	mov    edi,ebp
c000f874:	6a 10                	push   0x10
c000f876:	e8 6b fe ff ff       	call   c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>
c000f87b:	83 e0 01             	and    eax,0x1
c000f87e:	8d 14 00             	lea    edx,[eax+eax*1]
c000f881:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f887:	83 e0 fd             	and    eax,0xfffffffd
c000f88a:	09 d0                	or     eax,edx
c000f88c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f892:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f899:	e8 48 fe ff ff       	call   c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>
c000f89e:	83 e0 01             	and    eax,0x1
c000f8a1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f8a8:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8ae:	83 e0 fb             	and    eax,0xfffffffb
c000f8b1:	09 d0                	or     eax,edx
c000f8b3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8b9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8c0:	e8 21 fe ff ff       	call   c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>
c000f8c5:	83 e0 01             	and    eax,0x1
c000f8c8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8cf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8d5:	83 e0 f7             	and    eax,0xfffffff7
c000f8d8:	09 d0                	or     eax,edx
c000f8da:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8e0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f8e7:	e8 fa fd ff ff       	call   c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>
c000f8ec:	83 e0 01             	and    eax,0x1
c000f8ef:	c1 e0 04             	shl    eax,0x4
c000f8f2:	89 c2                	mov    edx,eax
c000f8f4:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8fa:	83 e0 ef             	and    eax,0xffffffef
c000f8fd:	09 d0                	or     eax,edx
c000f8ff:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f905:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f90c:	e8 d5 fd ff ff       	call   c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>
c000f911:	83 e0 01             	and    eax,0x1
c000f914:	c1 e0 05             	shl    eax,0x5
c000f917:	89 c2                	mov    edx,eax
c000f919:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f91f:	83 e0 df             	and    eax,0xffffffdf
c000f922:	09 d0                	or     eax,edx
c000f924:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f92a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f931:	e8 b0 fd ff ff       	call   c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>
c000f936:	83 e0 01             	and    eax,0x1
c000f939:	8d 14 00             	lea    edx,[eax+eax*1]
c000f93c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f942:	83 e0 fd             	and    eax,0xfffffffd
c000f945:	09 d0                	or     eax,edx
c000f947:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f94d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f954:	e8 8d fd ff ff       	call   c000f6e6 <CPU::cpuidCheckEDX(unsigned int)>
c000f959:	83 e0 01             	and    eax,0x1
c000f95c:	c1 e0 06             	shl    eax,0x6
c000f95f:	89 c2                	mov    edx,eax
c000f961:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f967:	83 e0 bf             	and    eax,0xffffffbf
c000f96a:	09 d0                	or     eax,edx
c000f96c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f972:	58                   	pop    eax
c000f973:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f977:	50                   	push   eax
c000f978:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f97c:	50                   	push   eax
c000f97d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f981:	56                   	push   esi
c000f982:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f986:	50                   	push   eax
c000f987:	6a 00                	push   0x0
c000f989:	e8 d4 fc ff ff       	call   c000f662 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f98e:	b8 04 00 00 00       	mov    eax,0x4
c000f993:	89 c1                	mov    ecx,eax
c000f995:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f997:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f99d:	89 c1                	mov    ecx,eax
c000f99f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f9a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9a5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f9ab:	89 c1                	mov    ecx,eax
c000f9ad:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f9b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9b3:	83 c4 18             	add    esp,0x18
c000f9b6:	68 c4 0a 02 c0       	push   0xc0020ac4
c000f9bb:	55                   	push   ebp
c000f9bc:	e8 bf 0d ff ff       	call   c0000780 <strcmp>
c000f9c1:	83 c4 10             	add    esp,0x10
c000f9c4:	85 c0                	test   eax,eax
c000f9c6:	75 0f                	jne    c000f9d7 <CPU::detectFeatures()+0x1a9>
c000f9c8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9d2:	e9 22 02 00 00       	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000f9d7:	50                   	push   eax
c000f9d8:	50                   	push   eax
c000f9d9:	68 d1 0a 02 c0       	push   0xc0020ad1
c000f9de:	55                   	push   ebp
c000f9df:	e8 9c 0d ff ff       	call   c0000780 <strcmp>
c000f9e4:	83 c4 10             	add    esp,0x10
c000f9e7:	85 c0                	test   eax,eax
c000f9e9:	74 dd                	je     c000f9c8 <CPU::detectFeatures()+0x19a>
c000f9eb:	50                   	push   eax
c000f9ec:	50                   	push   eax
c000f9ed:	68 de 0a 02 c0       	push   0xc0020ade
c000f9f2:	55                   	push   ebp
c000f9f3:	e8 88 0d ff ff       	call   c0000780 <strcmp>
c000f9f8:	83 c4 10             	add    esp,0x10
c000f9fb:	85 c0                	test   eax,eax
c000f9fd:	74 2a                	je     c000fa29 <CPU::detectFeatures()+0x1fb>
c000f9ff:	50                   	push   eax
c000fa00:	50                   	push   eax
c000fa01:	68 eb 0a 02 c0       	push   0xc0020aeb
c000fa06:	55                   	push   ebp
c000fa07:	e8 74 0d ff ff       	call   c0000780 <strcmp>
c000fa0c:	83 c4 10             	add    esp,0x10
c000fa0f:	85 c0                	test   eax,eax
c000fa11:	74 16                	je     c000fa29 <CPU::detectFeatures()+0x1fb>
c000fa13:	50                   	push   eax
c000fa14:	50                   	push   eax
c000fa15:	68 f8 0a 02 c0       	push   0xc0020af8
c000fa1a:	55                   	push   ebp
c000fa1b:	e8 60 0d ff ff       	call   c0000780 <strcmp>
c000fa20:	83 c4 10             	add    esp,0x10
c000fa23:	85 c0                	test   eax,eax
c000fa25:	74 48                	je     c000fa6f <CPU::detectFeatures()+0x241>
c000fa27:	eb 0f                	jmp    c000fa38 <CPU::detectFeatures()+0x20a>
c000fa29:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa33:	e9 c1 01 00 00       	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000fa38:	50                   	push   eax
c000fa39:	50                   	push   eax
c000fa3a:	68 05 0b 02 c0       	push   0xc0020b05
c000fa3f:	55                   	push   ebp
c000fa40:	e8 3b 0d ff ff       	call   c0000780 <strcmp>
c000fa45:	83 c4 10             	add    esp,0x10
c000fa48:	85 c0                	test   eax,eax
c000fa4a:	74 23                	je     c000fa6f <CPU::detectFeatures()+0x241>
c000fa4c:	57                   	push   edi
c000fa4d:	57                   	push   edi
c000fa4e:	68 12 0b 02 c0       	push   0xc0020b12
c000fa53:	55                   	push   ebp
c000fa54:	e8 27 0d ff ff       	call   c0000780 <strcmp>
c000fa59:	83 c4 10             	add    esp,0x10
c000fa5c:	85 c0                	test   eax,eax
c000fa5e:	75 1e                	jne    c000fa7e <CPU::detectFeatures()+0x250>
c000fa60:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa6a:	e9 8a 01 00 00       	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000fa6f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa79:	e9 7b 01 00 00       	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000fa7e:	56                   	push   esi
c000fa7f:	56                   	push   esi
c000fa80:	68 1f 0b 02 c0       	push   0xc0020b1f
c000fa85:	55                   	push   ebp
c000fa86:	e8 f5 0c ff ff       	call   c0000780 <strcmp>
c000fa8b:	83 c4 10             	add    esp,0x10
c000fa8e:	85 c0                	test   eax,eax
c000fa90:	75 0f                	jne    c000faa1 <CPU::detectFeatures()+0x273>
c000fa92:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fa9c:	e9 58 01 00 00       	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000faa1:	51                   	push   ecx
c000faa2:	51                   	push   ecx
c000faa3:	68 de 0a 02 c0       	push   0xc0020ade
c000faa8:	55                   	push   ebp
c000faa9:	e8 d2 0c ff ff       	call   c0000780 <strcmp>
c000faae:	83 c4 10             	add    esp,0x10
c000fab1:	85 c0                	test   eax,eax
c000fab3:	75 0f                	jne    c000fac4 <CPU::detectFeatures()+0x296>
c000fab5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fabf:	e9 35 01 00 00       	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000fac4:	52                   	push   edx
c000fac5:	52                   	push   edx
c000fac6:	68 2c 0b 02 c0       	push   0xc0020b2c
c000facb:	55                   	push   ebp
c000facc:	e8 af 0c ff ff       	call   c0000780 <strcmp>
c000fad1:	83 c4 10             	add    esp,0x10
c000fad4:	85 c0                	test   eax,eax
c000fad6:	75 0f                	jne    c000fae7 <CPU::detectFeatures()+0x2b9>
c000fad8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fae2:	e9 12 01 00 00       	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000fae7:	50                   	push   eax
c000fae8:	50                   	push   eax
c000fae9:	68 39 0b 02 c0       	push   0xc0020b39
c000faee:	55                   	push   ebp
c000faef:	e8 8c 0c ff ff       	call   c0000780 <strcmp>
c000faf4:	83 c4 10             	add    esp,0x10
c000faf7:	85 c0                	test   eax,eax
c000faf9:	75 0f                	jne    c000fb0a <CPU::detectFeatures()+0x2dc>
c000fafb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb05:	e9 ef 00 00 00       	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000fb0a:	50                   	push   eax
c000fb0b:	50                   	push   eax
c000fb0c:	68 46 0b 02 c0       	push   0xc0020b46
c000fb11:	55                   	push   ebp
c000fb12:	e8 69 0c ff ff       	call   c0000780 <strcmp>
c000fb17:	83 c4 10             	add    esp,0x10
c000fb1a:	85 c0                	test   eax,eax
c000fb1c:	75 0f                	jne    c000fb2d <CPU::detectFeatures()+0x2ff>
c000fb1e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb28:	e9 cc 00 00 00       	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000fb2d:	50                   	push   eax
c000fb2e:	50                   	push   eax
c000fb2f:	68 53 0b 02 c0       	push   0xc0020b53
c000fb34:	55                   	push   ebp
c000fb35:	e8 46 0c ff ff       	call   c0000780 <strcmp>
c000fb3a:	83 c4 10             	add    esp,0x10
c000fb3d:	85 c0                	test   eax,eax
c000fb3f:	75 0f                	jne    c000fb50 <CPU::detectFeatures()+0x322>
c000fb41:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb4b:	e9 a9 00 00 00       	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000fb50:	50                   	push   eax
c000fb51:	50                   	push   eax
c000fb52:	68 60 0b 02 c0       	push   0xc0020b60
c000fb57:	55                   	push   ebp
c000fb58:	e8 23 0c ff ff       	call   c0000780 <strcmp>
c000fb5d:	83 c4 10             	add    esp,0x10
c000fb60:	85 c0                	test   eax,eax
c000fb62:	75 0f                	jne    c000fb73 <CPU::detectFeatures()+0x345>
c000fb64:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb6e:	e9 86 00 00 00       	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000fb73:	50                   	push   eax
c000fb74:	50                   	push   eax
c000fb75:	68 6d 0b 02 c0       	push   0xc0020b6d
c000fb7a:	55                   	push   ebp
c000fb7b:	e8 00 0c ff ff       	call   c0000780 <strcmp>
c000fb80:	83 c4 10             	add    esp,0x10
c000fb83:	85 c0                	test   eax,eax
c000fb85:	75 0c                	jne    c000fb93 <CPU::detectFeatures()+0x365>
c000fb87:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fb91:	eb 66                	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000fb93:	50                   	push   eax
c000fb94:	50                   	push   eax
c000fb95:	68 7a 0b 02 c0       	push   0xc0020b7a
c000fb9a:	55                   	push   ebp
c000fb9b:	e8 e0 0b ff ff       	call   c0000780 <strcmp>
c000fba0:	83 c4 10             	add    esp,0x10
c000fba3:	85 c0                	test   eax,eax
c000fba5:	75 0c                	jne    c000fbb3 <CPU::detectFeatures()+0x385>
c000fba7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fbb1:	eb 46                	jmp    c000fbf9 <CPU::detectFeatures()+0x3cb>
c000fbb3:	57                   	push   edi
c000fbb4:	57                   	push   edi
c000fbb5:	68 87 0b 02 c0       	push   0xc0020b87
c000fbba:	55                   	push   ebp
c000fbbb:	e8 c0 0b ff ff       	call   c0000780 <strcmp>
c000fbc0:	83 c4 10             	add    esp,0x10
c000fbc3:	85 c0                	test   eax,eax
c000fbc5:	74 e0                	je     c000fba7 <CPU::detectFeatures()+0x379>
c000fbc7:	56                   	push   esi
c000fbc8:	56                   	push   esi
c000fbc9:	68 94 0b 02 c0       	push   0xc0020b94
c000fbce:	55                   	push   ebp
c000fbcf:	e8 ac 0b ff ff       	call   c0000780 <strcmp>
c000fbd4:	83 c4 10             	add    esp,0x10
c000fbd7:	85 c0                	test   eax,eax
c000fbd9:	74 cc                	je     c000fba7 <CPU::detectFeatures()+0x379>
c000fbdb:	51                   	push   ecx
c000fbdc:	51                   	push   ecx
c000fbdd:	68 a1 0b 02 c0       	push   0xc0020ba1
c000fbe2:	55                   	push   ebp
c000fbe3:	e8 98 0b ff ff       	call   c0000780 <strcmp>
c000fbe8:	83 c4 10             	add    esp,0x10
c000fbeb:	85 c0                	test   eax,eax
c000fbed:	74 b8                	je     c000fba7 <CPU::detectFeatures()+0x379>
c000fbef:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fbf9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fbfe:	0f 86 be 00 00 00    	jbe    c000fcc2 <CPU::detectFeatures()+0x494>
c000fc04:	83 ec 0c             	sub    esp,0xc
c000fc07:	68 80 00 00 00       	push   0x80
c000fc0c:	e8 31 fb ff ff       	call   c000f742 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc11:	83 e0 01             	and    eax,0x1
c000fc14:	c1 e0 06             	shl    eax,0x6
c000fc17:	89 c2                	mov    edx,eax
c000fc19:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc1f:	83 e0 bf             	and    eax,0xffffffbf
c000fc22:	09 d0                	or     eax,edx
c000fc24:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc2a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc31:	e8 0c fb ff ff       	call   c000f742 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc36:	83 e0 01             	and    eax,0x1
c000fc39:	c1 e0 04             	shl    eax,0x4
c000fc3c:	89 c2                	mov    edx,eax
c000fc3e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc44:	83 e0 ef             	and    eax,0xffffffef
c000fc47:	09 d0                	or     eax,edx
c000fc49:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc4f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc56:	e8 e7 fa ff ff       	call   c000f742 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc5b:	89 c2                	mov    edx,eax
c000fc5d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc63:	c1 e2 07             	shl    edx,0x7
c000fc66:	83 e0 7f             	and    eax,0x7f
c000fc69:	09 d0                	or     eax,edx
c000fc6b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc71:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc78:	e8 f3 fa ff ff       	call   c000f770 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc7d:	83 e0 01             	and    eax,0x1
c000fc80:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fc87:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc8d:	83 e0 f7             	and    eax,0xfffffff7
c000fc90:	09 d0                	or     eax,edx
c000fc92:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc98:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fc9f:	e8 cc fa ff ff       	call   c000f770 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fca4:	83 c4 10             	add    esp,0x10
c000fca7:	83 e0 01             	and    eax,0x1
c000fcaa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fcb1:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fcb7:	83 e0 fb             	and    eax,0xfffffffb
c000fcba:	09 d0                	or     eax,edx
c000fcbc:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fcc2:	83 ec 0c             	sub    esp,0xc
c000fcc5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcc9:	50                   	push   eax
c000fcca:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcce:	50                   	push   eax
c000fccf:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fcd3:	57                   	push   edi
c000fcd4:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcd8:	56                   	push   esi
c000fcd9:	6a 01                	push   0x1
c000fcdb:	e8 82 f9 ff ff       	call   c000f662 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fce0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fce4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fcea:	89 c1                	mov    ecx,eax
c000fcec:	83 e1 0f             	and    ecx,0xf
c000fcef:	83 e2 f0             	and    edx,0xfffffff0
c000fcf2:	09 ca                	or     edx,ecx
c000fcf4:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fcfa:	89 c2                	mov    edx,eax
c000fcfc:	c1 ea 04             	shr    edx,0x4
c000fcff:	83 e2 0f             	and    edx,0xf
c000fd02:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fd06:	89 d1                	mov    ecx,edx
c000fd08:	83 c4 20             	add    esp,0x20
c000fd0b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fd11:	c1 e1 06             	shl    ecx,0x6
c000fd14:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fd1a:	09 ca                	or     edx,ecx
c000fd1c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fd23:	89 c2                	mov    edx,eax
c000fd25:	c1 ea 08             	shr    edx,0x8
c000fd28:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fd2e:	83 e2 0f             	and    edx,0xf
c000fd31:	89 d5                	mov    ebp,edx
c000fd33:	83 e5 03             	and    ebp,0x3
c000fd36:	c1 e5 06             	shl    ebp,0x6
c000fd39:	83 e1 3f             	and    ecx,0x3f
c000fd3c:	09 e9                	or     ecx,ebp
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fd46:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fd4c:	c1 ed 02             	shr    ebp,0x2
c000fd4f:	83 e1 c0             	and    ecx,0xffffffc0
c000fd52:	09 e9                	or     ecx,ebp
c000fd54:	89 c5                	mov    ebp,eax
c000fd56:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fd5c:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fd62:	c1 ed 08             	shr    ebp,0x8
c000fd65:	83 e5 30             	and    ebp,0x30
c000fd68:	83 e1 cf             	and    ecx,0xffffffcf
c000fd6b:	09 e9                	or     ecx,ebp
c000fd6d:	83 fa 06             	cmp    edx,0x6
c000fd70:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fd76:	74 05                	je     c000fd7d <CPU::detectFeatures()+0x54f>
c000fd78:	83 fa 0f             	cmp    edx,0xf
c000fd7b:	75 64                	jne    c000fde1 <CPU::detectFeatures()+0x5b3>
c000fd7d:	89 c1                	mov    ecx,eax
c000fd7f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fd85:	c1 e9 10             	shr    ecx,0x10
c000fd88:	c1 e1 04             	shl    ecx,0x4
c000fd8b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fd8f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fd95:	0f b6 c9             	movzx  ecx,cl
c000fd98:	c1 e1 06             	shl    ecx,0x6
c000fd9b:	09 e9                	or     ecx,ebp
c000fd9d:	83 fa 0f             	cmp    edx,0xf
c000fda0:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fda7:	75 38                	jne    c000fde1 <CPU::detectFeatures()+0x5b3>
c000fda9:	c1 e8 14             	shr    eax,0x14
c000fdac:	83 c0 0f             	add    eax,0xf
c000fdaf:	0f b6 c0             	movzx  eax,al
c000fdb2:	89 c2                	mov    edx,eax
c000fdb4:	c1 e8 02             	shr    eax,0x2
c000fdb7:	83 e2 03             	and    edx,0x3
c000fdba:	89 d1                	mov    ecx,edx
c000fdbc:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fdc2:	c1 e1 06             	shl    ecx,0x6
c000fdc5:	83 e2 3f             	and    edx,0x3f
c000fdc8:	09 ca                	or     edx,ecx
c000fdca:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdd0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fdd6:	83 e2 c0             	and    edx,0xffffffc0
c000fdd9:	09 d0                	or     eax,edx
c000fddb:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fde1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fde7:	83 ec 0c             	sub    esp,0xc
c000fdea:	83 c8 07             	or     eax,0x7
c000fded:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fdf3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fdf7:	50                   	push   eax
c000fdf8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fdfc:	55                   	push   ebp
c000fdfd:	57                   	push   edi
c000fdfe:	56                   	push   esi
c000fdff:	68 00 00 00 80       	push   0x80000000
c000fe04:	e8 59 f8 ff ff       	call   c000f662 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe09:	83 c4 20             	add    esp,0x20
c000fe0c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe14:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fe18:	76 1e                	jbe    c000fe38 <CPU::detectFeatures()+0x60a>
c000fe1a:	83 ec 0c             	sub    esp,0xc
c000fe1d:	50                   	push   eax
c000fe1e:	55                   	push   ebp
c000fe1f:	57                   	push   edi
c000fe20:	56                   	push   esi
c000fe21:	68 01 00 00 80       	push   0x80000001
c000fe26:	e8 37 f8 ff ff       	call   c000f662 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe2b:	83 c4 20             	add    esp,0x20
c000fe2e:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe38:	52                   	push   edx
c000fe39:	52                   	push   edx
c000fe3a:	68 ad 0b 02 c0       	push   0xc0020bad
c000fe3f:	53                   	push   ebx
c000fe40:	e8 29 c1 ff ff       	call   c000bf6e <Device::setName(char const*)>
c000fe45:	83 c4 10             	add    esp,0x10
c000fe48:	eb 69                	jmp    c000feb3 <CPU::detectFeatures()+0x685>
c000fe4a:	50                   	push   eax
c000fe4b:	50                   	push   eax
c000fe4c:	68 12 0b 02 c0       	push   0xc0020b12
c000fe51:	55                   	push   ebp
c000fe52:	e8 f9 07 ff ff       	call   c0000650 <strcpy>
c000fe57:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe61:	e8 5d 03 ff ff       	call   c00001c3 <is486>
c000fe66:	83 c4 10             	add    esp,0x10
c000fe69:	85 c0                	test   eax,eax
c000fe6b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe71:	74 1f                	je     c000fe92 <CPU::detectFeatures()+0x664>
c000fe73:	83 c8 07             	or     eax,0x7
c000fe76:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe7c:	0f 20 c0             	mov    eax,cr0
c000fe7f:	83 e0 14             	and    eax,0x14
c000fe82:	83 f8 04             	cmp    eax,0x4
c000fe85:	75 10                	jne    c000fe97 <CPU::detectFeatures()+0x669>
c000fe87:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe8d:	83 e0 fd             	and    eax,0xfffffffd
c000fe90:	eb 1b                	jmp    c000fead <CPU::detectFeatures()+0x67f>
c000fe92:	83 e0 f8             	and    eax,0xfffffff8
c000fe95:	eb df                	jmp    c000fe76 <CPU::detectFeatures()+0x648>
c000fe97:	e8 02 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe9c:	83 e0 01             	and    eax,0x1
c000fe9f:	8d 14 00             	lea    edx,[eax+eax*1]
c000fea2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fea8:	83 e0 fd             	and    eax,0xfffffffd
c000feab:	09 d0                	or     eax,edx
c000fead:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000feb3:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000feba:	74 17                	je     c000fed3 <CPU::detectFeatures()+0x6a5>
c000febc:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000fec2:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000fec8:	83 c8 10             	or     eax,0x10
c000fecb:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000fed1:	eb 20                	jmp    c000fef3 <CPU::detectFeatures()+0x6c5>
c000fed3:	e8 c6 02 ff ff       	call   c000019e <hasLegacyFPU>
c000fed8:	83 e0 01             	and    eax,0x1
c000fedb:	8d 14 00             	lea    edx,[eax+eax*1]
c000fede:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fee4:	83 e0 fd             	and    eax,0xfffffffd
c000fee7:	09 d0                	or     eax,edx
c000fee9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000feef:	a8 02                	test   al,0x2
c000fef1:	75 c9                	jne    c000febc <CPU::detectFeatures()+0x68e>
c000fef3:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fefa:	83 c4 2c             	add    esp,0x2c
c000fefd:	5b                   	pop    ebx
c000fefe:	5e                   	pop    esi
c000feff:	5f                   	pop    edi
c000ff00:	5d                   	pop    ebp
c000ff01:	c3                   	ret    

c000ff02 <CPU::setupSMEP()>:
c000ff02:	0f 20 e0             	mov    eax,cr4
c000ff05:	0d 00 00 10 00       	or     eax,0x100000
c000ff0a:	0f 22 e0             	mov    cr4,eax
c000ff0d:	c3                   	ret    

c000ff0e <CPU::setupUMIP()>:
c000ff0e:	0f 20 e0             	mov    eax,cr4
c000ff11:	80 cc 08             	or     ah,0x8
c000ff14:	0f 22 e0             	mov    cr4,eax
c000ff17:	c3                   	ret    

c000ff18 <CPU::setupTSC()>:
c000ff18:	0f 20 e0             	mov    eax,cr4
c000ff1b:	83 c8 04             	or     eax,0x4
c000ff1e:	0f 22 e0             	mov    cr4,eax
c000ff21:	c3                   	ret    

c000ff22 <CPU::setupLargePages()>:
c000ff22:	0f 20 e0             	mov    eax,cr4
c000ff25:	83 c8 10             	or     eax,0x10
c000ff28:	0f 22 e0             	mov    cr4,eax
c000ff2b:	c3                   	ret    

c000ff2c <CPU::setupPAT()>:
c000ff2c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ff31:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff38:	74 2c                	je     c000ff66 <CPU::setupPAT()+0x3a>
c000ff3a:	53                   	push   ebx
c000ff3b:	83 ec 10             	sub    esp,0x10
c000ff3e:	68 77 02 00 00       	push   0x277
c000ff43:	50                   	push   eax
c000ff44:	e8 91 71 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c000ff49:	83 e2 f8             	and    edx,0xfffffff8
c000ff4c:	83 ca 01             	or     edx,0x1
c000ff4f:	52                   	push   edx
c000ff50:	50                   	push   eax
c000ff51:	68 77 02 00 00       	push   0x277
c000ff56:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000ff5c:	e8 a5 71 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff61:	83 c4 28             	add    esp,0x28
c000ff64:	5b                   	pop    ebx
c000ff65:	c3                   	ret    
c000ff66:	c3                   	ret    
c000ff67:	90                   	nop

c000ff68 <CPU::setupMTRR()>:
c000ff68:	c3                   	ret    
c000ff69:	90                   	nop

c000ff6a <CPU::setupGlobalPages()>:
c000ff6a:	0f 20 e0             	mov    eax,cr4
c000ff6d:	0c 80                	or     al,0x80
c000ff6f:	0f 22 e0             	mov    cr4,eax
c000ff72:	c3                   	ret    
c000ff73:	90                   	nop

c000ff74 <CPU::allowUsermodeDataAccess()>:
c000ff74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff78:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff7f:	74 03                	je     c000ff84 <CPU::allowUsermodeDataAccess()+0x10>
c000ff81:	0f 01 cb             	stac   
c000ff84:	c3                   	ret    
c000ff85:	90                   	nop

c000ff86 <CPU::prohibitUsermodeDataAccess()>:
c000ff86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff8a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff91:	74 03                	je     c000ff96 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff93:	0f 01 ca             	clac   
c000ff96:	c3                   	ret    
c000ff97:	90                   	nop

c000ff98 <CPU::setupSMAP()>:
c000ff98:	0f 20 e0             	mov    eax,cr4
c000ff9b:	0d 00 00 20 00       	or     eax,0x200000
c000ffa0:	0f 22 e0             	mov    cr4,eax
c000ffa3:	eb e1                	jmp    c000ff86 <CPU::prohibitUsermodeDataAccess()>
c000ffa5:	90                   	nop

c000ffa6 <CPU::setupFeatures()>:
c000ffa6:	53                   	push   ebx
c000ffa7:	83 ec 08             	sub    esp,0x8
c000ffaa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffae:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ffb5:	74 18                	je     c000ffcf <CPU::setupFeatures()+0x29>
c000ffb7:	83 ec 0c             	sub    esp,0xc
c000ffba:	68 b9 0b 02 c0       	push   0xc0020bb9
c000ffbf:	e8 bf a9 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000ffc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffc7:	e8 42 ff ff ff       	call   c000ff0e <CPU::setupUMIP()>
c000ffcc:	83 c4 10             	add    esp,0x10
c000ffcf:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ffd6:	74 18                	je     c000fff0 <CPU::setupFeatures()+0x4a>
c000ffd8:	83 ec 0c             	sub    esp,0xc
c000ffdb:	68 c3 0b 02 c0       	push   0xc0020bc3
c000ffe0:	e8 9e a9 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c000ffe5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffe8:	e8 2b ff ff ff       	call   c000ff18 <CPU::setupTSC()>
c000ffed:	83 c4 10             	add    esp,0x10
c000fff0:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fff7:	74 18                	je     c0010011 <CPU::setupFeatures()+0x6b>
c000fff9:	83 ec 0c             	sub    esp,0xc
c000fffc:	68 cc 0b 02 c0       	push   0xc0020bcc
c0010001:	e8 7d a9 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0010006:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010009:	e8 14 ff ff ff       	call   c000ff22 <CPU::setupLargePages()>
c001000e:	83 c4 10             	add    esp,0x10
c0010011:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010018:	74 18                	je     c0010032 <CPU::setupFeatures()+0x8c>
c001001a:	83 ec 0c             	sub    esp,0xc
c001001d:	68 d5 0b 02 c0       	push   0xc0020bd5
c0010022:	e8 5c a9 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0010027:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001002a:	e8 3b ff ff ff       	call   c000ff6a <CPU::setupGlobalPages()>
c001002f:	83 c4 10             	add    esp,0x10
c0010032:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010039:	74 18                	je     c0010053 <CPU::setupFeatures()+0xad>
c001003b:	83 ec 0c             	sub    esp,0xc
c001003e:	68 e7 0b 02 c0       	push   0xc0020be7
c0010043:	e8 3b a9 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0010048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001004b:	e8 dc fe ff ff       	call   c000ff2c <CPU::setupPAT()>
c0010050:	83 c4 10             	add    esp,0x10
c0010053:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001005a:	74 11                	je     c001006d <CPU::setupFeatures()+0xc7>
c001005c:	c7 44 24 10 f0 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bf0
c0010064:	83 c4 08             	add    esp,0x8
c0010067:	5b                   	pop    ebx
c0010068:	e9 16 a9 ff ff       	jmp    c000a983 <Dbg::kprintf(char const*, ...)>
c001006d:	83 c4 08             	add    esp,0x8
c0010070:	5b                   	pop    ebx
c0010071:	c3                   	ret    

c0010072 <CPU::open(int, int, void*)>:
c0010072:	57                   	push   edi
c0010073:	56                   	push   esi
c0010074:	53                   	push   ebx
c0010075:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010079:	83 ec 0c             	sub    esp,0xc
c001007c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010080:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010086:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001008c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0010092:	50                   	push   eax
c0010093:	e8 3e 73 ff ff       	call   c00073d6 <GDT::setup()>
c0010098:	83 c4 0c             	add    esp,0xc
c001009b:	6a 00                	push   0x0
c001009d:	68 ef be ad de       	push   0xdeadbeef
c00100a2:	57                   	push   edi
c00100a3:	e8 d8 8e ff ff       	call   c0008f80 <TSS::setup(unsigned long, unsigned long)>
c00100a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100ab:	e8 b0 8e ff ff       	call   c0008f60 <TSS::flush()>
c00100b0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00100b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00100b9:	e8 7c 75 ff ff       	call   c000763a <IDT::setup()>
c00100be:	b8 00 04 00 00       	mov    eax,0x400
c00100c3:	0f 23 f8             	mov    db7,eax
c00100c6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100d0:	e8 01 7d ff ff       	call   c0007dd6 <Phys::allocatePage()>
c00100d5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100db:	89 30                	mov    DWORD PTR [eax],esi
c00100dd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100e3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00100e6:	58                   	pop    eax
c00100e7:	5a                   	pop    edx
c00100e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00100ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100f2:	e8 e9 9e ff ff       	call   c0009fe0 <VAS::setCPUSpecific(unsigned long)>
c00100f7:	c7 04 24 fa 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bfa
c00100fe:	e8 cd 00 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c0010103:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010106:	e8 23 f7 ff ff       	call   c000f82e <CPU::detectFeatures()>
c001010b:	c7 04 24 1d 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c1d
c0010112:	e8 b9 00 00 00       	call   c00101d0 <KeSetBootMessage(char const*)>
c0010117:	e8 75 6f 00 00       	call   c0017091 <HalInitialise()>
c001011c:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c0010121:	83 e0 10             	and    eax,0x10
c0010124:	83 f8 01             	cmp    eax,0x1
c0010127:	19 c0                	sbb    eax,eax
c0010129:	83 e0 46             	and    eax,0x46
c001012c:	83 c0 1e             	add    eax,0x1e
c001012f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010132:	e8 de d6 ff ff       	call   c000d815 <setupTimer(int)>
c0010137:	83 c4 10             	add    esp,0x10
c001013a:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010141:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010147:	74 0c                	je     c0010155 <CPU::open(int, int, void*)+0xe3>
c0010149:	83 ec 0c             	sub    esp,0xc
c001014c:	53                   	push   ebx
c001014d:	e8 54 fe ff ff       	call   c000ffa6 <CPU::setupFeatures()>
c0010152:	83 c4 10             	add    esp,0x10
c0010155:	5b                   	pop    ebx
c0010156:	31 c0                	xor    eax,eax
c0010158:	5e                   	pop    esi
c0010159:	5f                   	pop    edi
c001015a:	c3                   	ret    

c001015b <KeDisplaySplashScreen()>:
c001015b:	55                   	push   ebp
c001015c:	bd 05 00 00 00       	mov    ebp,0x5
c0010161:	57                   	push   edi
c0010162:	bf c0 1f 02 c0       	mov    edi,0xc0021fc0
c0010167:	56                   	push   esi
c0010168:	be 0a 00 00 00       	mov    esi,0xa
c001016d:	53                   	push   ebx
c001016e:	31 db                	xor    ebx,ebx
c0010170:	83 ec 0c             	sub    esp,0xc
c0010173:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0010176:	85 d2                	test   edx,edx
c0010178:	89 d0                	mov    eax,edx
c001017a:	74 4c                	je     c00101c8 <KeDisplaySplashScreen()+0x6d>
c001017c:	80 bb f6 1f 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde00a],0xdb
c0010183:	75 13                	jne    c0010198 <KeDisplaySplashScreen()+0x3d>
c0010185:	0f b6 8b f5 1f 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffde00b]
c001018c:	83 e1 fe             	and    ecx,0xfffffffe
c001018f:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010195:	75 01                	jne    c0010198 <KeDisplaySplashScreen()+0x3d>
c0010197:	46                   	inc    esi
c0010198:	83 fa 0d             	cmp    edx,0xd
c001019b:	74 28                	je     c00101c5 <KeDisplaySplashScreen()+0x6a>
c001019d:	83 fa 0a             	cmp    edx,0xa
c00101a0:	75 0a                	jne    c00101ac <KeDisplaySplashScreen()+0x51>
c00101a2:	45                   	inc    ebp
c00101a3:	be 0a 00 00 00       	mov    esi,0xa
c00101a8:	31 db                	xor    ebx,ebx
c00101aa:	eb 19                	jmp    c00101c5 <KeDisplaySplashScreen()+0x6a>
c00101ac:	83 ec 0c             	sub    esp,0xc
c00101af:	0f be c0             	movsx  eax,al
c00101b2:	55                   	push   ebp
c00101b3:	8d 14 33             	lea    edx,[ebx+esi*1]
c00101b6:	43                   	inc    ebx
c00101b7:	52                   	push   edx
c00101b8:	6a 00                	push   0x0
c00101ba:	6a 0e                	push   0xe
c00101bc:	50                   	push   eax
c00101bd:	e8 4a 7b 00 00       	call   c0017d0c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00101c2:	83 c4 20             	add    esp,0x20
c00101c5:	47                   	inc    edi
c00101c6:	eb ab                	jmp    c0010173 <KeDisplaySplashScreen()+0x18>
c00101c8:	83 c4 0c             	add    esp,0xc
c00101cb:	5b                   	pop    ebx
c00101cc:	5e                   	pop    esi
c00101cd:	5f                   	pop    edi
c00101ce:	5d                   	pop    ebp
c00101cf:	c3                   	ret    

c00101d0 <KeSetBootMessage(char const*)>:
c00101d0:	57                   	push   edi
c00101d1:	56                   	push   esi
c00101d2:	53                   	push   ebx
c00101d3:	81 ec a4 00 00 00    	sub    esp,0xa4
c00101d9:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00101e0:	68 9e 00 00 00       	push   0x9e
c00101e5:	6a 00                	push   0x0
c00101e7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00101eb:	56                   	push   esi
c00101ec:	e8 ff 02 ff ff       	call   c00004f0 <memset>
c00101f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101f4:	e8 87 03 ff ff       	call   c0000580 <strlen>
c00101f9:	ba 50 00 00 00       	mov    edx,0x50
c00101fe:	83 c4 10             	add    esp,0x10
c0010201:	31 c9                	xor    ecx,ecx
c0010203:	29 c2                	sub    edx,eax
c0010205:	83 e2 fe             	and    edx,0xfffffffe
c0010208:	01 f2                	add    edx,esi
c001020a:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001020f:	84 c0                	test   al,al
c0010211:	74 0a                	je     c001021d <KeSetBootMessage(char const*)+0x4d>
c0010213:	80 cc 0f             	or     ah,0xf
c0010216:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001021a:	41                   	inc    ecx
c001021b:	eb ed                	jmp    c001020a <KeSetBootMessage(char const*)+0x3a>
c001021d:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010222:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010227:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010229:	81 c4 a0 00 00 00    	add    esp,0xa0
c001022f:	5b                   	pop    ebx
c0010230:	5e                   	pop    esi
c0010231:	5f                   	pop    edi
c0010232:	c3                   	ret    
c0010233:	90                   	nop

c0010234 <EnvVarContainer::getEnv(char const*)>:
c0010234:	57                   	push   edi
c0010235:	56                   	push   esi
c0010236:	53                   	push   ebx
c0010237:	31 db                	xor    ebx,ebx
c0010239:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001023d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001023f:	7e 2b                	jle    c001026c <EnvVarContainer::getEnv(char const*)+0x38>
c0010241:	50                   	push   eax
c0010242:	50                   	push   eax
c0010243:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010246:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001024d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010250:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010254:	e8 27 05 ff ff       	call   c0000780 <strcmp>
c0010259:	83 c4 10             	add    esp,0x10
c001025c:	85 c0                	test   eax,eax
c001025e:	75 09                	jne    c0010269 <EnvVarContainer::getEnv(char const*)+0x35>
c0010260:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010263:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010267:	eb 05                	jmp    c001026e <EnvVarContainer::getEnv(char const*)+0x3a>
c0010269:	43                   	inc    ebx
c001026a:	eb d1                	jmp    c001023d <EnvVarContainer::getEnv(char const*)+0x9>
c001026c:	31 c0                	xor    eax,eax
c001026e:	5b                   	pop    ebx
c001026f:	5e                   	pop    esi
c0010270:	5f                   	pop    edi
c0010271:	c3                   	ret    

c0010272 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010272:	55                   	push   ebp
c0010273:	57                   	push   edi
c0010274:	56                   	push   esi
c0010275:	53                   	push   ebx
c0010276:	83 ec 28             	sub    esp,0x28
c0010279:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001027d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010281:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010285:	56                   	push   esi
c0010286:	e8 f5 02 ff ff       	call   c0000580 <strlen>
c001028b:	40                   	inc    eax
c001028c:	89 04 24             	mov    DWORD PTR [esp],eax
c001028f:	e8 37 78 ff ff       	call   c0007acb <malloc>
c0010294:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001029b:	e8 e0 02 ff ff       	call   c0000580 <strlen>
c00102a0:	40                   	inc    eax
c00102a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00102a4:	e8 22 78 ff ff       	call   c0007acb <malloc>
c00102a9:	89 34 24             	mov    DWORD PTR [esp],esi
c00102ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00102b0:	e8 cb 02 ff ff       	call   c0000580 <strlen>
c00102b5:	83 c4 0c             	add    esp,0xc
c00102b8:	40                   	inc    eax
c00102b9:	50                   	push   eax
c00102ba:	6a 00                	push   0x0
c00102bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00102c0:	e8 2b 02 ff ff       	call   c00004f0 <memset>
c00102c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00102c8:	e8 b3 02 ff ff       	call   c0000580 <strlen>
c00102cd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00102d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00102d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102d9:	89 de                	mov    esi,ebx
c00102db:	e8 a0 02 ff ff       	call   c0000580 <strlen>
c00102e0:	83 c4 0c             	add    esp,0xc
c00102e3:	40                   	inc    eax
c00102e4:	50                   	push   eax
c00102e5:	6a 00                	push   0x0
c00102e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102eb:	e8 00 02 ff ff       	call   c00004f0 <memset>
c00102f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102f3:	e8 88 02 ff ff       	call   c0000580 <strlen>
c00102f8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102fc:	8d 48 01             	lea    ecx,[eax+0x1]
c00102ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010301:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010304:	40                   	inc    eax
c0010305:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010308:	c1 e0 03             	shl    eax,0x3
c001030b:	5a                   	pop    edx
c001030c:	59                   	pop    ecx
c001030d:	50                   	push   eax
c001030e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010311:	e8 a1 77 ff ff       	call   c0007ab7 <realloc>
c0010316:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010319:	8d 74 24 18          	lea    esi,[esp+0x18]
c001031d:	b9 08 00 00 00       	mov    ecx,0x8
c0010322:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010325:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010329:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001032b:	83 c4 2c             	add    esp,0x2c
c001032e:	5b                   	pop    ebx
c001032f:	5e                   	pop    esi
c0010330:	5f                   	pop    edi
c0010331:	5d                   	pop    ebp
c0010332:	c3                   	ret    
c0010333:	90                   	nop

c0010334 <EnvVarContainer::deleteEnv(char const*)>:
c0010334:	c3                   	ret    
c0010335:	90                   	nop

c0010336 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010336:	55                   	push   ebp
c0010337:	57                   	push   edi
c0010338:	56                   	push   esi
c0010339:	53                   	push   ebx
c001033a:	81 ec 38 01 00 00    	sub    esp,0x138
c0010340:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010347:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001034e:	68 14 01 00 00       	push   0x114
c0010353:	e8 73 77 ff ff       	call   c0007acb <malloc>
c0010358:	83 c4 0c             	add    esp,0xc
c001035b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001035e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010365:	89 c3                	mov    ebx,eax
c0010367:	50                   	push   eax
c0010368:	e8 bf ab ff ff       	call   c000af2c <File::File(char const*, Process*)>
c001036d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010370:	e8 e1 ae ff ff       	call   c000b256 <File::exists()>
c0010375:	83 c4 10             	add    esp,0x10
c0010378:	84 c0                	test   al,al
c001037a:	75 31                	jne    c00103ad <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001037c:	50                   	push   eax
c001037d:	50                   	push   eax
c001037e:	6a 12                	push   0x12
c0010380:	53                   	push   ebx
c0010381:	e8 62 ac ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c0010386:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010388:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001038b:	89 34 24             	mov    DWORD PTR [esp],esi
c001038e:	e8 ed 01 ff ff       	call   c0000580 <strlen>
c0010393:	5a                   	pop    edx
c0010394:	31 d2                	xor    edx,edx
c0010396:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001039a:	51                   	push   ecx
c001039b:	56                   	push   esi
c001039c:	52                   	push   edx
c001039d:	50                   	push   eax
c001039e:	53                   	push   ebx
c001039f:	ff d7                	call   edi
c00103a1:	83 c4 14             	add    esp,0x14
c00103a4:	53                   	push   ebx
c00103a5:	e8 9c ac ff ff       	call   c000b046 <File::close()>
c00103aa:	83 c4 10             	add    esp,0x10
c00103ad:	56                   	push   esi
c00103ae:	31 f6                	xor    esi,esi
c00103b0:	68 00 01 00 00       	push   0x100
c00103b5:	6a 00                	push   0x0
c00103b7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00103bb:	50                   	push   eax
c00103bc:	e8 2f 01 ff ff       	call   c00004f0 <memset>
c00103c1:	5f                   	pop    edi
c00103c2:	58                   	pop    eax
c00103c3:	6a 01                	push   0x1
c00103c5:	53                   	push   ebx
c00103c6:	e8 1d ac ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c00103cb:	83 c4 10             	add    esp,0x10
c00103ce:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103d6:	83 ec 0c             	sub    esp,0xc
c00103d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103db:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103df:	51                   	push   ecx
c00103e0:	8d 54 24 23          	lea    edx,[esp+0x23]
c00103e4:	52                   	push   edx
c00103e5:	6a 00                	push   0x0
c00103e7:	6a 01                	push   0x1
c00103e9:	53                   	push   ebx
c00103ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00103ed:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c00103f2:	83 c4 20             	add    esp,0x20
c00103f5:	83 fa 0d             	cmp    edx,0xd
c00103f8:	89 d0                	mov    eax,edx
c00103fa:	0f 84 0a 01 00 00    	je     c001050a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010400:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010405:	0f 84 f0 00 00 00    	je     c00104fb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001040b:	83 fa 0a             	cmp    edx,0xa
c001040e:	74 13                	je     c0010423 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010410:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010415:	74 0c                	je     c0010423 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010417:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001041d:	0f 8e d8 00 00 00    	jle    c00104fb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0010423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010427:	83 ec 0c             	sub    esp,0xc
c001042a:	8d 78 01             	lea    edi,[eax+0x1]
c001042d:	57                   	push   edi
c001042e:	e8 98 76 ff ff       	call   c0007acb <malloc>
c0010433:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010437:	8d 56 04             	lea    edx,[esi+0x4]
c001043a:	89 14 24             	mov    DWORD PTR [esp],edx
c001043d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010441:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010445:	e8 81 76 ff ff       	call   c0007acb <malloc>
c001044a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001044e:	83 c4 0c             	add    esp,0xc
c0010451:	57                   	push   edi
c0010452:	6a 00                	push   0x0
c0010454:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010458:	e8 93 00 ff ff       	call   c00004f0 <memset>
c001045d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010461:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010465:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010469:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001046b:	83 c4 0c             	add    esp,0xc
c001046e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010472:	52                   	push   edx
c0010473:	6a 00                	push   0x0
c0010475:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010479:	e8 72 00 ff ff       	call   c00004f0 <memset>
c001047e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010482:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010486:	89 34 24             	mov    DWORD PTR [esp],esi
c0010489:	e8 f2 00 ff ff       	call   c0000580 <strlen>
c001048e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010492:	89 c1                	mov    ecx,eax
c0010494:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010496:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010499:	83 c4 10             	add    esp,0x10
c001049c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001049f:	40                   	inc    eax
c00104a0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00104a3:	85 d2                	test   edx,edx
c00104a5:	75 0c                	jne    c00104b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c00104a7:	83 ec 0c             	sub    esp,0xc
c00104aa:	6a 08                	push   0x8
c00104ac:	e8 1a 76 ff ff       	call   c0007acb <malloc>
c00104b1:	eb 0c                	jmp    c00104bf <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c00104b3:	51                   	push   ecx
c00104b4:	51                   	push   ecx
c00104b5:	c1 e0 03             	shl    eax,0x3
c00104b8:	50                   	push   eax
c00104b9:	52                   	push   edx
c00104ba:	e8 f8 75 ff ff       	call   c0007ab7 <realloc>
c00104bf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00104c2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00104c5:	83 c4 10             	add    esp,0x10
c00104c8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00104cb:	8d 74 24 18          	lea    esi,[esp+0x18]
c00104cf:	b9 08 00 00 00       	mov    ecx,0x8
c00104d4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00104d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104da:	50                   	push   eax
c00104db:	31 f6                	xor    esi,esi
c00104dd:	68 00 01 00 00       	push   0x100
c00104e2:	6a 00                	push   0x0
c00104e4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00104e8:	50                   	push   eax
c00104e9:	e8 02 00 ff ff       	call   c00004f0 <memset>
c00104ee:	83 c4 10             	add    esp,0x10
c00104f1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00104f9:	eb 0f                	jmp    c001050a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104fb:	3c 3d                	cmp    al,0x3d
c00104fd:	74 07                	je     c0010506 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00104ff:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010503:	46                   	inc    esi
c0010504:	eb 04                	jmp    c001050a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010506:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001050a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001050f:	0f 85 c1 fe ff ff    	jne    c00103d6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010515:	81 c4 2c 01 00 00    	add    esp,0x12c
c001051b:	5b                   	pop    ebx
c001051c:	5e                   	pop    esi
c001051d:	5f                   	pop    edi
c001051e:	5d                   	pop    ebp
c001051f:	c3                   	ret    

c0010520 <EnvVarContainer::__loadSystem()>:
c0010520:	83 ec 10             	sub    esp,0x10
c0010523:	68 20 21 02 c0       	push   0xc0022120
c0010528:	68 60 0c 02 c0       	push   0xc0020c60
c001052d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010531:	e8 00 fe ff ff       	call   c0010336 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010536:	83 c4 1c             	add    esp,0x1c
c0010539:	c3                   	ret    

c001053a <EnvVarContainer::__loadUser()>:
c001053a:	c3                   	ret    
c001053b:	90                   	nop

c001053c <EnvVarContainer::EnvVarContainer(Process*)>:
c001053c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010540:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001054a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001054e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010555:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001055c:	90                   	nop
c001055d:	c3                   	ret    

c001055e <EnvVarContainer::~EnvVarContainer()>:
c001055e:	83 ec 0c             	sub    esp,0xc
c0010561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010565:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010568:	85 c0                	test   eax,eax
c001056a:	74 1d                	je     c0010589 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001056c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010570:	8b 00                	mov    eax,DWORD PTR [eax]
c0010572:	85 c0                	test   eax,eax
c0010574:	74 13                	je     c0010589 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001057d:	83 ec 0c             	sub    esp,0xc
c0010580:	50                   	push   eax
c0010581:	e8 55 75 ff ff       	call   c0007adb <free>
c0010586:	83 c4 10             	add    esp,0x10
c0010589:	90                   	nop
c001058a:	83 c4 0c             	add    esp,0xc
c001058d:	c3                   	ret    

c001058e <Krnl::getEnv(Process*, char const*)>:
c001058e:	53                   	push   ebx
c001058f:	83 ec 08             	sub    esp,0x8
c0010592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010596:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c001059c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00105a0:	74 04                	je     c00105a6 <Krnl::getEnv(Process*, char const*)+0x18>
c00105a2:	85 c0                	test   eax,eax
c00105a4:	75 0b                	jne    c00105b1 <Krnl::getEnv(Process*, char const*)+0x23>
c00105a6:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00105ab:	85 c0                	test   eax,eax
c00105ad:	75 19                	jne    c00105c8 <Krnl::getEnv(Process*, char const*)+0x3a>
c00105af:	eb 27                	jmp    c00105d8 <Krnl::getEnv(Process*, char const*)+0x4a>
c00105b1:	52                   	push   edx
c00105b2:	52                   	push   edx
c00105b3:	53                   	push   ebx
c00105b4:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00105ba:	e8 75 fc ff ff       	call   c0010234 <EnvVarContainer::getEnv(char const*)>
c00105bf:	83 c4 10             	add    esp,0x10
c00105c2:	85 c0                	test   eax,eax
c00105c4:	75 28                	jne    c00105ee <Krnl::getEnv(Process*, char const*)+0x60>
c00105c6:	eb de                	jmp    c00105a6 <Krnl::getEnv(Process*, char const*)+0x18>
c00105c8:	52                   	push   edx
c00105c9:	52                   	push   edx
c00105ca:	53                   	push   ebx
c00105cb:	50                   	push   eax
c00105cc:	e8 63 fc ff ff       	call   c0010234 <EnvVarContainer::getEnv(char const*)>
c00105d1:	83 c4 10             	add    esp,0x10
c00105d4:	85 c0                	test   eax,eax
c00105d6:	75 16                	jne    c00105ee <Krnl::getEnv(Process*, char const*)+0x60>
c00105d8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105dc:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00105e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105e5:	83 c4 08             	add    esp,0x8
c00105e8:	5b                   	pop    ebx
c00105e9:	e9 46 fc ff ff       	jmp    c0010234 <EnvVarContainer::getEnv(char const*)>
c00105ee:	83 c4 08             	add    esp,0x8
c00105f1:	5b                   	pop    ebx
c00105f2:	c3                   	ret    

c00105f3 <Krnl::setEnvSystem(char const*, char const*)>:
c00105f3:	83 ec 10             	sub    esp,0x10
c00105f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105fe:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c0010604:	e8 69 fc ff ff       	call   c0010272 <EnvVarContainer::setEnv(char const*, char const*)>
c0010609:	83 c4 1c             	add    esp,0x1c
c001060c:	c3                   	ret    

c001060d <Krnl::setEnvUser(char const*, char const*)>:
c001060d:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010612:	85 c0                	test   eax,eax
c0010614:	74 15                	je     c001062b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010616:	83 ec 10             	sub    esp,0x10
c0010619:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001061d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010621:	50                   	push   eax
c0010622:	e8 4b fc ff ff       	call   c0010272 <EnvVarContainer::setEnv(char const*, char const*)>
c0010627:	83 c4 1c             	add    esp,0x1c
c001062a:	c3                   	ret    
c001062b:	c3                   	ret    

c001062c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001062c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010630:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010636:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001063a:	e9 33 fc ff ff       	jmp    c0010272 <EnvVarContainer::setEnv(char const*, char const*)>

c001063f <Krnl::deleteEnvSystem(char const*)>:
c001063f:	c3                   	ret    

c0010640 <Krnl::deleteEnvUser(char const*)>:
c0010640:	c3                   	ret    

c0010641 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010641:	c3                   	ret    

c0010642 <Krnl::newProcessEnv(Process*)>:
c0010642:	83 ec 28             	sub    esp,0x28
c0010645:	6a 0c                	push   0xc
c0010647:	e8 7f 74 ff ff       	call   c0007acb <malloc>
c001064c:	5a                   	pop    edx
c001064d:	59                   	pop    ecx
c001064e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010652:	50                   	push   eax
c0010653:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010657:	e8 e0 fe ff ff       	call   c001053c <EnvVarContainer::EnvVarContainer(Process*)>
c001065c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010660:	83 c4 2c             	add    esp,0x2c
c0010663:	c3                   	ret    

c0010664 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010664:	57                   	push   edi
c0010665:	56                   	push   esi
c0010666:	53                   	push   ebx
c0010667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066b:	83 ec 0c             	sub    esp,0xc
c001066e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010674:	6a 0c                	push   0xc
c0010676:	e8 50 74 ff ff       	call   c0007acb <malloc>
c001067b:	89 c3                	mov    ebx,eax
c001067d:	58                   	pop    eax
c001067e:	5a                   	pop    edx
c001067f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010683:	53                   	push   ebx
c0010684:	e8 b3 fe ff ff       	call   c001053c <EnvVarContainer::EnvVarContainer(Process*)>
c0010689:	8b 07                	mov    eax,DWORD PTR [edi]
c001068b:	89 03                	mov    DWORD PTR [ebx],eax
c001068d:	c1 e0 03             	shl    eax,0x3
c0010690:	89 04 24             	mov    DWORD PTR [esp],eax
c0010693:	e8 33 74 ff ff       	call   c0007acb <malloc>
c0010698:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001069b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001069d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00106a0:	89 c7                	mov    edi,eax
c00106a2:	c1 e1 03             	shl    ecx,0x3
c00106a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106a7:	83 c4 10             	add    esp,0x10
c00106aa:	89 d8                	mov    eax,ebx
c00106ac:	5b                   	pop    ebx
c00106ad:	5e                   	pop    esi
c00106ae:	5f                   	pop    edi
c00106af:	c3                   	ret    

c00106b0 <Krnl::loadSystemEnv()>:
c00106b0:	53                   	push   ebx
c00106b1:	83 ec 14             	sub    esp,0x14
c00106b4:	6a 0c                	push   0xc
c00106b6:	e8 10 74 ff ff       	call   c0007acb <malloc>
c00106bb:	89 c3                	mov    ebx,eax
c00106bd:	58                   	pop    eax
c00106be:	5a                   	pop    edx
c00106bf:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106c5:	53                   	push   ebx
c00106c6:	e8 71 fe ff ff       	call   c001053c <EnvVarContainer::EnvVarContainer(Process*)>
c00106cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106ce:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00106d4:	e8 47 fe ff ff       	call   c0010520 <EnvVarContainer::__loadSystem()>
c00106d9:	83 c4 18             	add    esp,0x18
c00106dc:	5b                   	pop    ebx
c00106dd:	c3                   	ret    

c00106de <Krnl::loadUserEnv()>:
c00106de:	53                   	push   ebx
c00106df:	83 ec 14             	sub    esp,0x14
c00106e2:	6a 0c                	push   0xc
c00106e4:	e8 e2 73 ff ff       	call   c0007acb <malloc>
c00106e9:	89 c3                	mov    ebx,eax
c00106eb:	58                   	pop    eax
c00106ec:	5a                   	pop    edx
c00106ed:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106f3:	53                   	push   ebx
c00106f4:	e8 43 fe ff ff       	call   c001053c <EnvVarContainer::EnvVarContainer(Process*)>
c00106f9:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00106ff:	83 c4 18             	add    esp,0x18
c0010702:	5b                   	pop    ebx
c0010703:	c3                   	ret    

c0010704 <Krnl::flushEnv()>:
c0010704:	c3                   	ret    

c0010705 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010705:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010709:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c001070f:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010715:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c001071a:	8b 00                	mov    eax,DWORD PTR [eax]
c001071c:	03 01                	add    eax,DWORD PTR [ecx]
c001071e:	85 d2                	test   edx,edx
c0010720:	74 02                	je     c0010724 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010722:	03 02                	add    eax,DWORD PTR [edx]
c0010724:	c3                   	ret    

c0010725 <Krnl::getProcessEnvPair(Process*, int)>:
c0010725:	57                   	push   edi
c0010726:	56                   	push   esi
c0010727:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c001072d:	53                   	push   ebx
c001072e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010732:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010736:	85 f6                	test   esi,esi
c0010738:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001073c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010742:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010744:	75 16                	jne    c001075c <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010746:	39 c2                	cmp    edx,eax
c0010748:	7c 16                	jl     c0010760 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001074a:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010750:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010752:	01 c6                	add    esi,eax
c0010754:	39 d6                	cmp    esi,edx
c0010756:	7e 3c                	jle    c0010794 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010758:	29 c2                	sub    edx,eax
c001075a:	eb 04                	jmp    c0010760 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001075c:	39 c2                	cmp    edx,eax
c001075e:	7d 05                	jge    c0010765 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010760:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010763:	eb 20                	jmp    c0010785 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010765:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010767:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001076a:	39 d1                	cmp    ecx,edx
c001076c:	7e 04                	jle    c0010772 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001076e:	29 c2                	sub    edx,eax
c0010770:	eb 10                	jmp    c0010782 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010772:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010778:	03 0e                	add    ecx,DWORD PTR [esi]
c001077a:	39 d1                	cmp    ecx,edx
c001077c:	7e 16                	jle    c0010794 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001077e:	29 c2                	sub    edx,eax
c0010780:	29 fa                	sub    edx,edi
c0010782:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010785:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010788:	8b 02                	mov    eax,DWORD PTR [edx]
c001078a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001078d:	89 03                	mov    DWORD PTR [ebx],eax
c001078f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010792:	eb 1d                	jmp    c00107b1 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010794:	83 ec 0c             	sub    esp,0xc
c0010797:	68 82 0c 02 c0       	push   0xc0020c82
c001079c:	e8 ac 00 00 00       	call   c001084d <KePanic(char const*)>
c00107a1:	83 c4 10             	add    esp,0x10
c00107a4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00107aa:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00107b1:	89 d8                	mov    eax,ebx
c00107b3:	5b                   	pop    ebx
c00107b4:	5e                   	pop    esi
c00107b5:	5f                   	pop    edi
c00107b6:	c2 04 00             	ret    0x4

c00107b9 <CPU::current()>:
c00107b9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00107be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00107c4:	c3                   	ret    

c00107c5 <operator new(unsigned long)>:
c00107c5:	e9 01 73 ff ff       	jmp    c0007acb <malloc>

c00107ca <operator delete(void*)>:
c00107ca:	e9 1c 73 ff ff       	jmp    c0007aeb <rfree>

c00107cf <disableIRQs()>:
c00107cf:	fa                   	cli    
c00107d0:	c3                   	ret    

c00107d1 <enableIRQs()>:
c00107d1:	fb                   	sti    
c00107d2:	c3                   	ret    

c00107d3 <lockScheduler()>:
c00107d3:	fa                   	cli    
c00107d4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107da:	c3                   	ret    

c00107db <unlockScheduler()>:
c00107db:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107e0:	48                   	dec    eax
c00107e1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107e6:	75 01                	jne    c00107e9 <unlockScheduler()+0xe>
c00107e8:	fb                   	sti    
c00107e9:	c3                   	ret    

c00107ea <lockStuff()>:
c00107ea:	fa                   	cli    
c00107eb:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107f1:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00107f7:	c3                   	ret    

c00107f8 <unlockStuff()>:
c00107f8:	83 ec 0c             	sub    esp,0xc
c00107fb:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0010800:	48                   	dec    eax
c0010801:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0010806:	75 18                	jne    c0010820 <unlockStuff()+0x28>
c0010808:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c001080f:	74 0f                	je     c0010820 <unlockStuff()+0x28>
c0010811:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001081b:	e8 28 48 00 00       	call   c0015048 <schedule()>
c0010820:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010825:	48                   	dec    eax
c0010826:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001082b:	75 01                	jne    c001082e <unlockStuff()+0x36>
c001082d:	fb                   	sti    
c001082e:	83 c4 0c             	add    esp,0xc
c0010831:	c3                   	ret    

c0010832 <Virt::getAKernelVAS()>:
c0010832:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010837:	c3                   	ret    

c0010838 <__not_memcpy>:
c0010838:	57                   	push   edi
c0010839:	56                   	push   esi
c001083a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001083e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010842:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010846:	89 c7                	mov    edi,eax
c0010848:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001084a:	5e                   	pop    esi
c001084b:	5f                   	pop    edi
c001084c:	c3                   	ret    

c001084d <KePanic(char const*)>:
c001084d:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c0010854:	e9 11 67 00 00       	jmp    c0016f6a <HalPanic(char const*)>

c0010859 <Krnl::powerThread(void*)>:
c0010859:	83 ec 0c             	sub    esp,0xc
c001085c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010861:	48                   	dec    eax
c0010862:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010867:	75 01                	jne    c001086a <Krnl::powerThread(void*)+0x11>
c0010869:	fb                   	sti    
c001086a:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010871:	83 ec 0c             	sub    esp,0xc
c0010874:	6a 0a                	push   0xa
c0010876:	e8 fd 4a 00 00       	call   c0015378 <sleep(unsigned int)>
c001087b:	83 c4 10             	add    esp,0x10
c001087e:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c0010885:	eb e3                	jmp    c001086a <Krnl::powerThread(void*)+0x11>

c0010887 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010887:	57                   	push   edi
c0010888:	b9 09 00 00 00       	mov    ecx,0x9
c001088d:	56                   	push   esi
c001088e:	bf 60 79 02 c0       	mov    edi,0xc0027960
c0010893:	fc                   	cld    
c0010894:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010898:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001089a:	5e                   	pop    esi
c001089b:	5f                   	pop    edi
c001089c:	c3                   	ret    

c001089d <Krnl::userIOReceived()>:
c001089d:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00108a7:	c3                   	ret    

c00108a8 <Krnl::handlePowerButton()>:
c00108a8:	83 ec 0c             	sub    esp,0xc
c00108ab:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c00108b0:	83 f8 02             	cmp    eax,0x2
c00108b3:	75 10                	jne    c00108c5 <Krnl::handlePowerButton()+0x1d>
c00108b5:	83 ec 0c             	sub    esp,0xc
c00108b8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108be:	e8 7f 68 ff ff       	call   c0007142 <Computer::shutdown()>
c00108c3:	eb 11                	jmp    c00108d6 <Krnl::handlePowerButton()+0x2e>
c00108c5:	48                   	dec    eax
c00108c6:	75 11                	jne    c00108d9 <Krnl::handlePowerButton()+0x31>
c00108c8:	83 ec 0c             	sub    esp,0xc
c00108cb:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108d1:	e8 9c 68 ff ff       	call   c0007172 <Computer::sleep()>
c00108d6:	83 c4 10             	add    esp,0x10
c00108d9:	83 c4 0c             	add    esp,0xc
c00108dc:	c3                   	ret    

c00108dd <Krnl::handleSleepButton()>:
c00108dd:	83 ec 0c             	sub    esp,0xc
c00108e0:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00108e5:	83 f8 02             	cmp    eax,0x2
c00108e8:	75 10                	jne    c00108fa <Krnl::handleSleepButton()+0x1d>
c00108ea:	83 ec 0c             	sub    esp,0xc
c00108ed:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108f3:	e8 4a 68 ff ff       	call   c0007142 <Computer::shutdown()>
c00108f8:	eb 11                	jmp    c001090b <Krnl::handleSleepButton()+0x2e>
c00108fa:	48                   	dec    eax
c00108fb:	75 11                	jne    c001090e <Krnl::handleSleepButton()+0x31>
c00108fd:	83 ec 0c             	sub    esp,0xc
c0010900:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010906:	e8 67 68 ff ff       	call   c0007172 <Computer::sleep()>
c001090b:	83 c4 10             	add    esp,0x10
c001090e:	83 c4 0c             	add    esp,0xc
c0010911:	c3                   	ret    

c0010912 <Krnl::setupPowerManager()>:
c0010912:	83 ec 0c             	sub    esp,0xc
c0010915:	68 f0 00 00 00       	push   0xf0
c001091a:	6a 00                	push   0x0
c001091c:	68 59 08 01 c0       	push   0xc0010859
c0010921:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010927:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010931:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010938:	e8 bf 44 00 00       	call   c0014dfc <Process::createThread(void (*)(void*), void*, int)>
c001093d:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010947:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010951:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c001095b:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010965:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c001096f:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010979:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c0010983:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c001098d:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010997:	83 c4 1c             	add    esp,0x1c
c001099a:	c3                   	ret    

c001099b <KeRand()>:
c001099b:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c00109a5:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c00109af:	53                   	push   ebx
c00109b0:	01 c1                	add    ecx,eax
c00109b2:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00109b7:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c00109bd:	01 ca                	add    edx,ecx
c00109bf:	05 ef 04 b5 00       	add    eax,0xb504ef
c00109c4:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109c9:	83 d2 00             	adc    edx,0x0
c00109cc:	0f b7 da             	movzx  ebx,dx
c00109cf:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c00109d5:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00109d9:	5b                   	pop    ebx
c00109da:	c3                   	ret    

c00109db <KeSeedRand(unsigned int)>:
c00109db:	53                   	push   ebx
c00109dc:	83 ec 08             	sub    esp,0x8
c00109df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109e3:	e8 99 68 00 00       	call   c0017281 <HalGetRand()>
c00109e8:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c00109f2:	31 d8                	xor    eax,ebx
c00109f4:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109f9:	e8 9d ff ff ff       	call   c001099b <KeRand()>
c00109fe:	83 c4 08             	add    esp,0x8
c0010a01:	5b                   	pop    ebx
c0010a02:	eb 97                	jmp    c001099b <KeRand()>

c0010a04 <KeInitRand()>:
c0010a04:	83 ec 0c             	sub    esp,0xc
c0010a07:	e8 6a 66 00 00       	call   c0017076 <HalQueryPerformanceCounter()>
c0010a0c:	0f 20 da             	mov    edx,cr3
c0010a0f:	0f 22 da             	mov    cr3,edx
c0010a12:	0f 20 da             	mov    edx,cr3
c0010a15:	0f 22 da             	mov    cr3,edx
c0010a18:	0f 20 da             	mov    edx,cr3
c0010a1b:	0f 22 da             	mov    cr3,edx
c0010a1e:	0f 20 da             	mov    edx,cr3
c0010a21:	0f 22 da             	mov    cr3,edx
c0010a24:	83 ec 0c             	sub    esp,0xc
c0010a27:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a2c:	50                   	push   eax
c0010a2d:	e8 a9 ff ff ff       	call   c00109db <KeSeedRand(unsigned int)>
c0010a32:	83 c4 1c             	add    esp,0x1c
c0010a35:	c3                   	ret    
c0010a36:	66 90                	xchg   ax,ax

c0010a38 <KeResolveCompatibilitySymbol(char*)>:
c0010a38:	83 ec 0c             	sub    esp,0xc
c0010a3b:	83 ec 08             	sub    esp,0x8
c0010a3e:	68 9c 0c 02 c0       	push   0xc0020c9c
c0010a43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a47:	e8 34 fd fe ff       	call   c0000780 <strcmp>
c0010a4c:	83 c4 10             	add    esp,0x10
c0010a4f:	85 c0                	test   eax,eax
c0010a51:	0f 94 c0             	sete   al
c0010a54:	0f b6 c0             	movzx  eax,al
c0010a57:	85 c0                	test   eax,eax
c0010a59:	74 0d                	je     c0010a68 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a5b:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010a60:	e9 8b 01 00 00       	jmp    c0010bf0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a65:	8d 76 00             	lea    esi,[esi+0x0]
c0010a68:	83 ec 08             	sub    esp,0x8
c0010a6b:	68 a5 0c 02 c0       	push   0xc0020ca5
c0010a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a74:	e8 07 fd fe ff       	call   c0000780 <strcmp>
c0010a79:	83 c4 10             	add    esp,0x10
c0010a7c:	85 c0                	test   eax,eax
c0010a7e:	0f 94 c0             	sete   al
c0010a81:	0f b6 c0             	movzx  eax,al
c0010a84:	85 c0                	test   eax,eax
c0010a86:	74 0c                	je     c0010a94 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010a88:	b8 20 e6 01 c0       	mov    eax,0xc001e620
c0010a8d:	e9 5e 01 00 00       	jmp    c0010bf0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a92:	66 90                	xchg   ax,ax
c0010a94:	83 ec 08             	sub    esp,0x8
c0010a97:	68 af 0c 02 c0       	push   0xc0020caf
c0010a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aa0:	e8 db fc fe ff       	call   c0000780 <strcmp>
c0010aa5:	83 c4 10             	add    esp,0x10
c0010aa8:	85 c0                	test   eax,eax
c0010aaa:	0f 94 c0             	sete   al
c0010aad:	0f b6 c0             	movzx  eax,al
c0010ab0:	85 c0                	test   eax,eax
c0010ab2:	74 0c                	je     c0010ac0 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010ab4:	b8 54 e3 01 c0       	mov    eax,0xc001e354
c0010ab9:	e9 32 01 00 00       	jmp    c0010bf0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010abe:	66 90                	xchg   ax,ax
c0010ac0:	83 ec 08             	sub    esp,0x8
c0010ac3:	68 b8 0c 02 c0       	push   0xc0020cb8
c0010ac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010acc:	e8 af fc fe ff       	call   c0000780 <strcmp>
c0010ad1:	83 c4 10             	add    esp,0x10
c0010ad4:	85 c0                	test   eax,eax
c0010ad6:	0f 94 c0             	sete   al
c0010ad9:	0f b6 c0             	movzx  eax,al
c0010adc:	85 c0                	test   eax,eax
c0010ade:	74 0c                	je     c0010aec <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010ae0:	b8 4d 08 01 c0       	mov    eax,0xc001084d
c0010ae5:	e9 06 01 00 00       	jmp    c0010bf0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aea:	66 90                	xchg   ax,ax
c0010aec:	83 ec 08             	sub    esp,0x8
c0010aef:	68 cb 0c 02 c0       	push   0xc0020ccb
c0010af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af8:	e8 83 fc fe ff       	call   c0000780 <strcmp>
c0010afd:	83 c4 10             	add    esp,0x10
c0010b00:	85 c0                	test   eax,eax
c0010b02:	0f 94 c0             	sete   al
c0010b05:	0f b6 c0             	movzx  eax,al
c0010b08:	85 c0                	test   eax,eax
c0010b0a:	74 0c                	je     c0010b18 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010b0c:	b8 d0 01 01 c0       	mov    eax,0xc00101d0
c0010b11:	e9 da 00 00 00       	jmp    c0010bf0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b16:	66 90                	xchg   ax,ax
c0010b18:	83 ec 08             	sub    esp,0x8
c0010b1b:	68 e8 0c 02 c0       	push   0xc0020ce8
c0010b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b24:	e8 57 fc fe ff       	call   c0000780 <strcmp>
c0010b29:	83 c4 10             	add    esp,0x10
c0010b2c:	85 c0                	test   eax,eax
c0010b2e:	0f 94 c0             	sete   al
c0010b31:	0f b6 c0             	movzx  eax,al
c0010b34:	85 c0                	test   eax,eax
c0010b36:	74 0c                	je     c0010b44 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b38:	b8 20 e7 01 c0       	mov    eax,0xc001e720
c0010b3d:	e9 ae 00 00 00       	jmp    c0010bf0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b42:	66 90                	xchg   ax,ax
c0010b44:	83 ec 08             	sub    esp,0x8
c0010b47:	68 f2 0c 02 c0       	push   0xc0020cf2
c0010b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b50:	e8 2b fc fe ff       	call   c0000780 <strcmp>
c0010b55:	83 c4 10             	add    esp,0x10
c0010b58:	85 c0                	test   eax,eax
c0010b5a:	0f 94 c0             	sete   al
c0010b5d:	0f b6 c0             	movzx  eax,al
c0010b60:	85 c0                	test   eax,eax
c0010b62:	74 0c                	je     c0010b70 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b64:	b8 a0 e4 01 c0       	mov    eax,0xc001e4a0
c0010b69:	e9 82 00 00 00       	jmp    c0010bf0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b6e:	66 90                	xchg   ax,ax
c0010b70:	83 ec 08             	sub    esp,0x8
c0010b73:	68 fb 0c 02 c0       	push   0xc0020cfb
c0010b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b7c:	e8 ff fb fe ff       	call   c0000780 <strcmp>
c0010b81:	83 c4 10             	add    esp,0x10
c0010b84:	85 c0                	test   eax,eax
c0010b86:	0f 94 c0             	sete   al
c0010b89:	0f b6 c0             	movzx  eax,al
c0010b8c:	85 c0                	test   eax,eax
c0010b8e:	74 08                	je     c0010b98 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010b90:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b95:	eb 59                	jmp    c0010bf0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b97:	90                   	nop
c0010b98:	83 ec 08             	sub    esp,0x8
c0010b9b:	68 13 0d 02 c0       	push   0xc0020d13
c0010ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba4:	e8 d7 fb fe ff       	call   c0000780 <strcmp>
c0010ba9:	83 c4 10             	add    esp,0x10
c0010bac:	85 c0                	test   eax,eax
c0010bae:	0f 94 c0             	sete   al
c0010bb1:	0f b6 c0             	movzx  eax,al
c0010bb4:	85 c0                	test   eax,eax
c0010bb6:	74 08                	je     c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010bb8:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010bbd:	eb 31                	jmp    c0010bf0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bbf:	90                   	nop
c0010bc0:	83 ec 08             	sub    esp,0x8
c0010bc3:	68 20 0d 02 c0       	push   0xc0020d20
c0010bc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bcc:	e8 af fb fe ff       	call   c0000780 <strcmp>
c0010bd1:	83 c4 10             	add    esp,0x10
c0010bd4:	85 c0                	test   eax,eax
c0010bd6:	0f 94 c0             	sete   al
c0010bd9:	0f b6 c0             	movzx  eax,al
c0010bdc:	85 c0                	test   eax,eax
c0010bde:	74 08                	je     c0010be8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010be0:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010be5:	eb 09                	jmp    c0010bf0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010be7:	90                   	nop
c0010be8:	b8 00 00 00 00       	mov    eax,0x0
c0010bed:	8d 76 00             	lea    esi,[esi+0x0]
c0010bf0:	83 c4 0c             	add    esp,0xc
c0010bf3:	c3                   	ret    

c0010bf4 <KiSigKill(int)>:
c0010bf4:	83 ec 0c             	sub    esp,0xc
c0010bf7:	6a 00                	push   0x0
c0010bf9:	6a 00                	push   0x0
c0010bfb:	6a ff                	push   0xffffffff
c0010bfd:	6a 01                	push   0x1
c0010bff:	e8 4e 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c04:	83 c4 1c             	add    esp,0x1c
c0010c07:	c3                   	ret    

c0010c08 <KiDefaultSignalHandlerIgnore(int)>:
c0010c08:	c3                   	ret    

c0010c09 <KiDefaultSignalHandlerPause(int)>:
c0010c09:	57                   	push   edi
c0010c0a:	b9 07 00 00 00       	mov    ecx,0x7
c0010c0f:	56                   	push   esi
c0010c10:	be 69 0d 02 c0       	mov    esi,0xc0020d69
c0010c15:	83 ec 24             	sub    esp,0x24
c0010c18:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010c1c:	fc                   	cld    
c0010c1d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010c23:	50                   	push   eax
c0010c24:	6a 00                	push   0x0
c0010c26:	6a 00                	push   0x0
c0010c28:	6a 27                	push   0x27
c0010c2a:	e8 23 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c2f:	83 c4 34             	add    esp,0x34
c0010c32:	5e                   	pop    esi
c0010c33:	5f                   	pop    edi
c0010c34:	c3                   	ret    

c0010c35 <KiDefaultSignalHandlerResume(int)>:
c0010c35:	57                   	push   edi
c0010c36:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010c3b:	56                   	push   esi
c0010c3c:	be 85 0d 02 c0       	mov    esi,0xc0020d85
c0010c41:	83 ec 24             	sub    esp,0x24
c0010c44:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010c48:	fc                   	cld    
c0010c49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c4b:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010c4f:	50                   	push   eax
c0010c50:	6a 00                	push   0x0
c0010c52:	6a 00                	push   0x0
c0010c54:	6a 27                	push   0x27
c0010c56:	e8 f7 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c5b:	83 c4 34             	add    esp,0x34
c0010c5e:	5e                   	pop    esi
c0010c5f:	5f                   	pop    edi
c0010c60:	c3                   	ret    

c0010c61 <KeDeinitSignals(SigHandlerBlock*)>:
c0010c61:	e9 75 6e ff ff       	jmp    c0007adb <free>

c0010c66 <KeInitSignals()>:
c0010c66:	53                   	push   ebx
c0010c67:	83 ec 14             	sub    esp,0x14
c0010c6a:	68 c8 00 00 00       	push   0xc8
c0010c6f:	e8 57 6e ff ff       	call   c0007acb <malloc>
c0010c74:	83 c4 0c             	add    esp,0xc
c0010c77:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010c81:	89 c3                	mov    ebx,eax
c0010c83:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010c8d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010c93:	6a 20                	push   0x20
c0010c95:	6a 00                	push   0x0
c0010c97:	50                   	push   eax
c0010c98:	e8 53 f8 fe ff       	call   c00004f0 <memset>
c0010c9d:	83 c4 0c             	add    esp,0xc
c0010ca0:	6a 44                	push   0x44
c0010ca2:	6a 00                	push   0x0
c0010ca4:	53                   	push   ebx
c0010ca5:	e8 46 f8 fe ff       	call   c00004f0 <memset>
c0010caa:	83 c4 18             	add    esp,0x18
c0010cad:	89 d8                	mov    eax,ebx
c0010caf:	5b                   	pop    ebx
c0010cb0:	c3                   	ret    

c0010cb1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010cb1:	53                   	push   ebx
c0010cb2:	b8 01 00 00 00       	mov    eax,0x1
c0010cb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010cbb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cbf:	83 f9 10             	cmp    ecx,0x10
c0010cc2:	7f 21                	jg     c0010ce5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc8:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010ccb:	89 03                	mov    DWORD PTR [ebx],eax
c0010ccd:	b8 01 00 00 00       	mov    eax,0x1
c0010cd2:	d3 e0                	shl    eax,cl
c0010cd4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010cd8:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010cdb:	31 c0                	xor    eax,eax
c0010cdd:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010ce5:	5b                   	pop    ebx
c0010ce6:	c3                   	ret    

c0010ce7 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010ce7:	55                   	push   ebp
c0010ce8:	57                   	push   edi
c0010ce9:	bf 08 00 00 00       	mov    edi,0x8
c0010cee:	56                   	push   esi
c0010cef:	53                   	push   ebx
c0010cf0:	83 ec 18             	sub    esp,0x18
c0010cf3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cf7:	68 a2 0d 02 c0       	push   0xc0020da2
c0010cfc:	e8 82 9c ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0010d01:	83 c4 10             	add    esp,0x10
c0010d04:	31 c9                	xor    ecx,ecx
c0010d06:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010d0d:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010d13:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010d17:	99                   	cdq    
c0010d18:	f7 ff                	idiv   edi
c0010d1a:	8d 42 24             	lea    eax,[edx+0x24]
c0010d1d:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010d21:	85 f6                	test   esi,esi
c0010d23:	75 1a                	jne    c0010d3f <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010d25:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010d29:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010d2d:	50                   	push   eax
c0010d2e:	50                   	push   eax
c0010d2f:	52                   	push   edx
c0010d30:	68 b3 0d 02 c0       	push   0xc0020db3
c0010d35:	e8 49 9c ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0010d3a:	83 c4 10             	add    esp,0x10
c0010d3d:	eb 1b                	jmp    c0010d5a <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010d3f:	41                   	inc    ecx
c0010d40:	83 f9 08             	cmp    ecx,0x8
c0010d43:	75 ce                	jne    c0010d13 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010d45:	83 ec 0c             	sub    esp,0xc
c0010d48:	be 01 00 00 00       	mov    esi,0x1
c0010d4d:	68 d4 0d 02 c0       	push   0xc0020dd4
c0010d52:	e8 2c 9c ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0010d57:	83 c4 10             	add    esp,0x10
c0010d5a:	83 c4 0c             	add    esp,0xc
c0010d5d:	89 f0                	mov    eax,esi
c0010d5f:	5b                   	pop    ebx
c0010d60:	5e                   	pop    esi
c0010d61:	5f                   	pop    edi
c0010d62:	5d                   	pop    ebp
c0010d63:	c3                   	ret    

c0010d64 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d64:	55                   	push   ebp
c0010d65:	57                   	push   edi
c0010d66:	56                   	push   esi
c0010d67:	53                   	push   ebx
c0010d68:	51                   	push   ecx
c0010d69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d6d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d74:	0f 84 af 00 00 00    	je     c0010e29 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d7a:	31 c9                	xor    ecx,ecx
c0010d7c:	bf 08 00 00 00       	mov    edi,0x8
c0010d81:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010d87:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010d8a:	99                   	cdq    
c0010d8b:	f7 ff                	idiv   edi
c0010d8d:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010d94:	85 ed                	test   ebp,ebp
c0010d96:	0f 84 9e 00 00 00    	je     c0010e3a <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010d9c:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010da2:	89 e9                	mov    ecx,ebp
c0010da4:	bf 01 00 00 00       	mov    edi,0x1
c0010da9:	d3 e7                	shl    edi,cl
c0010dab:	31 c9                	xor    ecx,ecx
c0010dad:	89 04 24             	mov    DWORD PTR [esp],eax
c0010db0:	b8 01 00 00 00       	mov    eax,0x1
c0010db5:	d3 e0                	shl    eax,cl
c0010db7:	85 04 24             	test   DWORD PTR [esp],eax
c0010dba:	74 06                	je     c0010dc2 <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010dbc:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010dc0:	75 67                	jne    c0010e29 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010dc2:	41                   	inc    ecx
c0010dc3:	83 f9 11             	cmp    ecx,0x11
c0010dc6:	75 e8                	jne    c0010db0 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010dc8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010dcb:	46                   	inc    esi
c0010dcc:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010dd2:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010ddd:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010de4:	09 f8                	or     eax,edi
c0010de6:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010dec:	31 c0                	xor    eax,eax
c0010dee:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010df6:	74 09                	je     c0010e01 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010df8:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010dff:	eb 06                	jmp    c0010e07 <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010e01:	40                   	inc    eax
c0010e02:	83 f8 08             	cmp    eax,0x8
c0010e05:	75 e7                	jne    c0010dee <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010e07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010e0b:	83 fd 09             	cmp    ebp,0x9
c0010e0e:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010e11:	89 2a                	mov    DWORD PTR [edx],ebp
c0010e13:	75 07                	jne    c0010e1c <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010e15:	b8 f4 0b 01 c0       	mov    eax,0xc0010bf4
c0010e1a:	eb 31                	jmp    c0010e4d <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e1c:	83 f8 01             	cmp    eax,0x1
c0010e1f:	75 0c                	jne    c0010e2d <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010e21:	f7 d7                	not    edi
c0010e23:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010e29:	31 c0                	xor    eax,eax
c0010e2b:	eb 20                	jmp    c0010e4d <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e2d:	85 c0                	test   eax,eax
c0010e2f:	75 1c                	jne    c0010e4d <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e31:	8b 04 ad 80 21 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdde80]
c0010e38:	eb 13                	jmp    c0010e4d <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e3a:	41                   	inc    ecx
c0010e3b:	46                   	inc    esi
c0010e3c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e42:	83 f9 08             	cmp    ecx,0x8
c0010e45:	0f 85 36 ff ff ff    	jne    c0010d81 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010e4b:	eb dc                	jmp    c0010e29 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e4d:	5a                   	pop    edx
c0010e4e:	5b                   	pop    ebx
c0010e4f:	5e                   	pop    esi
c0010e50:	5f                   	pop    edi
c0010e51:	5d                   	pop    ebp
c0010e52:	c3                   	ret    

c0010e53 <KiCheckSignalZ>:
c0010e53:	83 ec 10             	sub    esp,0x10
c0010e56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010e5a:	50                   	push   eax
c0010e5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e60:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e63:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e69:	e8 f6 fe ff ff       	call   c0010d64 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e6e:	5a                   	pop    edx
c0010e6f:	31 d2                	xor    edx,edx
c0010e71:	59                   	pop    ecx
c0010e72:	85 c0                	test   eax,eax
c0010e74:	74 19                	je     c0010e8f <KiCheckSignalZ+0x3c>
c0010e76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010e7c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010e7f:	89 02                	mov    DWORD PTR [edx],eax
c0010e81:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e8c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010e8f:	89 d0                	mov    eax,edx
c0010e91:	83 c4 10             	add    esp,0x10
c0010e94:	c3                   	ret    

c0010e95 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010e95:	56                   	push   esi
c0010e96:	53                   	push   ebx
c0010e97:	bb 01 00 00 00       	mov    ebx,0x1
c0010e9c:	52                   	push   edx
c0010e9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010ea1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ea5:	d3 e3                	shl    ebx,cl
c0010ea7:	83 f9 10             	cmp    ecx,0x10
c0010eaa:	7f 08                	jg     c0010eb4 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010eac:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010eb2:	75 10                	jne    c0010ec4 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010eb4:	83 ec 0c             	sub    esp,0xc
c0010eb7:	68 e5 0d 02 c0       	push   0xc0020de5
c0010ebc:	e8 8c f9 ff ff       	call   c001084d <KePanic(char const*)>
c0010ec1:	83 c4 10             	add    esp,0x10
c0010ec4:	f7 d3                	not    ebx
c0010ec6:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010ecc:	58                   	pop    eax
c0010ecd:	5b                   	pop    ebx
c0010ece:	5e                   	pop    esi
c0010ecf:	c3                   	ret    

c0010ed0 <KiFinishSignalZ>:
c0010ed0:	53                   	push   ebx
c0010ed1:	83 ec 10             	sub    esp,0x10
c0010ed4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ed8:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010edb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ee0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ee3:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010ee9:	e8 a7 ff ff ff       	call   c0010e95 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010eee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010ef4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010efb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010f02:	83 c4 18             	add    esp,0x18
c0010f05:	5b                   	pop    ebx
c0010f06:	c3                   	ret    

c0010f07 <SysSeekDir(regs*)>:
c0010f07:	31 c0                	xor    eax,eax
c0010f09:	31 d2                	xor    edx,edx
c0010f0b:	c3                   	ret    

c0010f0c <SysTellDir(regs*)>:
c0010f0c:	31 c0                	xor    eax,eax
c0010f0e:	31 d2                	xor    edx,edx
c0010f10:	c3                   	ret    

c0010f11 <SysVerify(regs*)>:
c0010f11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f15:	31 d2                	xor    edx,edx
c0010f17:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f1a:	c3                   	ret    

c0010f1b <SysGetArgc(regs*)>:
c0010f1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f23:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010f29:	89 c2                	mov    edx,eax
c0010f2b:	c1 fa 1f             	sar    edx,0x1f
c0010f2e:	c3                   	ret    

c0010f2f <SysTTYName(regs*)>:
c0010f2f:	b8 01 00 00 00       	mov    eax,0x1
c0010f34:	31 d2                	xor    edx,edx
c0010f36:	c3                   	ret    

c0010f37 <SysFormatDisk(regs*)>:
c0010f37:	56                   	push   esi
c0010f38:	53                   	push   ebx
c0010f39:	83 ec 04             	sub    esp,0x4
c0010f3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f40:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010f46:	eb 2a                	jmp    c0010f72 <SysFormatDisk(regs*)+0x3b>
c0010f48:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010f4b:	83 ec 0c             	sub    esp,0xc
c0010f4e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010f51:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f53:	51                   	push   ecx
c0010f54:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010f57:	51                   	push   ecx
c0010f58:	50                   	push   eax
c0010f59:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010f60:	50                   	push   eax
c0010f61:	53                   	push   ebx
c0010f62:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010f65:	83 c4 20             	add    esp,0x20
c0010f68:	83 f8 08             	cmp    eax,0x8
c0010f6b:	89 c1                	mov    ecx,eax
c0010f6d:	75 14                	jne    c0010f83 <SysFormatDisk(regs*)+0x4c>
c0010f6f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010f72:	85 db                	test   ebx,ebx
c0010f74:	75 d2                	jne    c0010f48 <SysFormatDisk(regs*)+0x11>
c0010f76:	b8 03 00 00 00       	mov    eax,0x3
c0010f7b:	31 d2                	xor    edx,edx
c0010f7d:	83 c4 04             	add    esp,0x4
c0010f80:	5b                   	pop    ebx
c0010f81:	5e                   	pop    esi
c0010f82:	c3                   	ret    
c0010f83:	85 c0                	test   eax,eax
c0010f85:	74 13                	je     c0010f9a <SysFormatDisk(regs*)+0x63>
c0010f87:	31 d2                	xor    edx,edx
c0010f89:	83 f9 09             	cmp    ecx,0x9
c0010f8c:	b8 01 00 00 00       	mov    eax,0x1
c0010f91:	74 ea                	je     c0010f7d <SysFormatDisk(regs*)+0x46>
c0010f93:	b8 02 00 00 00       	mov    eax,0x2
c0010f98:	eb e1                	jmp    c0010f7b <SysFormatDisk(regs*)+0x44>
c0010f9a:	31 c0                	xor    eax,eax
c0010f9c:	eb dd                	jmp    c0010f7b <SysFormatDisk(regs*)+0x44>

c0010f9e <SysSetDiskVolumeLabel(regs*)>:
c0010f9e:	56                   	push   esi
c0010f9f:	53                   	push   ebx
c0010fa0:	83 ec 04             	sub    esp,0x4
c0010fa3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fa7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010faa:	83 f8 19             	cmp    eax,0x19
c0010fad:	77 33                	ja     c0010fe2 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010faf:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010fb6:	85 c9                	test   ecx,ecx
c0010fb8:	74 28                	je     c0010fe2 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fba:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010fbd:	85 db                	test   ebx,ebx
c0010fbf:	74 21                	je     c0010fe2 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fc1:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010fc7:	85 d2                	test   edx,edx
c0010fc9:	74 17                	je     c0010fe2 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fcb:	8b 32                	mov    esi,DWORD PTR [edx]
c0010fcd:	53                   	push   ebx
c0010fce:	50                   	push   eax
c0010fcf:	51                   	push   ecx
c0010fd0:	52                   	push   edx
c0010fd1:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010fd4:	83 c4 10             	add    esp,0x10
c0010fd7:	83 c4 04             	add    esp,0x4
c0010fda:	5b                   	pop    ebx
c0010fdb:	5e                   	pop    esi
c0010fdc:	89 c2                	mov    edx,eax
c0010fde:	c1 fa 1f             	sar    edx,0x1f
c0010fe1:	c3                   	ret    
c0010fe2:	83 c4 04             	add    esp,0x4
c0010fe5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010fea:	5b                   	pop    ebx
c0010feb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ff0:	5e                   	pop    esi
c0010ff1:	c3                   	ret    

c0010ff2 <SysGetDiskVolumeLabel(regs*)>:
c0010ff2:	57                   	push   edi
c0010ff3:	56                   	push   esi
c0010ff4:	53                   	push   ebx
c0010ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010ffc:	83 fa 19             	cmp    edx,0x19
c0010fff:	77 3c                	ja     c001103d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011001:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0011008:	85 c9                	test   ecx,ecx
c001100a:	74 31                	je     c001103d <SysGetDiskVolumeLabel(regs*)+0x4b>
c001100c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001100f:	85 db                	test   ebx,ebx
c0011011:	74 2a                	je     c001103d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011013:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011016:	85 f6                	test   esi,esi
c0011018:	74 23                	je     c001103d <SysGetDiskVolumeLabel(regs*)+0x4b>
c001101a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011020:	85 c0                	test   eax,eax
c0011022:	74 19                	je     c001103d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	8b 38                	mov    edi,DWORD PTR [eax]
c0011029:	56                   	push   esi
c001102a:	53                   	push   ebx
c001102b:	52                   	push   edx
c001102c:	51                   	push   ecx
c001102d:	50                   	push   eax
c001102e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011031:	83 c4 20             	add    esp,0x20
c0011034:	5b                   	pop    ebx
c0011035:	5e                   	pop    esi
c0011036:	89 c2                	mov    edx,eax
c0011038:	c1 fa 1f             	sar    edx,0x1f
c001103b:	5f                   	pop    edi
c001103c:	c3                   	ret    
c001103d:	5b                   	pop    ebx
c001103e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011043:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011048:	5e                   	pop    esi
c0011049:	5f                   	pop    edi
c001104a:	c3                   	ret    

c001104b <SysShutdown(regs*)>:
c001104b:	57                   	push   edi
c001104c:	56                   	push   esi
c001104d:	83 ec 04             	sub    esp,0x4
c0011050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011054:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011057:	85 c0                	test   eax,eax
c0011059:	74 1e                	je     c0011079 <SysShutdown(regs*)+0x2e>
c001105b:	83 f8 01             	cmp    eax,0x1
c001105e:	74 5f                	je     c00110bf <SysShutdown(regs*)+0x74>
c0011060:	83 f8 02             	cmp    eax,0x2
c0011063:	be ff ff ff ff       	mov    esi,0xffffffff
c0011068:	bf ff ff ff ff       	mov    edi,0xffffffff
c001106d:	74 32                	je     c00110a1 <SysShutdown(regs*)+0x56>
c001106f:	83 c4 04             	add    esp,0x4
c0011072:	89 f0                	mov    eax,esi
c0011074:	5e                   	pop    esi
c0011075:	89 fa                	mov    edx,edi
c0011077:	5f                   	pop    edi
c0011078:	c3                   	ret    
c0011079:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001107e:	be ff ff ff ff       	mov    esi,0xffffffff
c0011083:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011088:	8b 10                	mov    edx,DWORD PTR [eax]
c001108a:	6a 00                	push   0x0
c001108c:	6a 00                	push   0x0
c001108e:	6a 00                	push   0x0
c0011090:	50                   	push   eax
c0011091:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011094:	83 c4 10             	add    esp,0x10
c0011097:	89 f0                	mov    eax,esi
c0011099:	83 c4 04             	add    esp,0x4
c001109c:	89 fa                	mov    edx,edi
c001109e:	5e                   	pop    esi
c001109f:	5f                   	pop    edi
c00110a0:	c3                   	ret    
c00110a1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00110a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00110a8:	6a 00                	push   0x0
c00110aa:	6a 00                	push   0x0
c00110ac:	6a 01                	push   0x1
c00110ae:	50                   	push   eax
c00110af:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00110b2:	83 c4 10             	add    esp,0x10
c00110b5:	89 f0                	mov    eax,esi
c00110b7:	83 c4 04             	add    esp,0x4
c00110ba:	89 fa                	mov    edx,edi
c00110bc:	5e                   	pop    esi
c00110bd:	5f                   	pop    edi
c00110be:	c3                   	ret    
c00110bf:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00110c4:	85 c0                	test   eax,eax
c00110c6:	74 02                	je     c00110ca <SysShutdown(regs*)+0x7f>
c00110c8:	ff d0                	call   eax
c00110ca:	31 f6                	xor    esi,esi
c00110cc:	83 c4 04             	add    esp,0x4
c00110cf:	89 f0                	mov    eax,esi
c00110d1:	31 ff                	xor    edi,edi
c00110d3:	5e                   	pop    esi
c00110d4:	89 fa                	mov    edx,edi
c00110d6:	5f                   	pop    edi
c00110d7:	c3                   	ret    

c00110d8 <SysRealpath(regs*)>:
c00110d8:	53                   	push   ebx
c00110d9:	83 ec 08             	sub    esp,0x8
c00110dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e0:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00110e3:	85 c9                	test   ecx,ecx
c00110e5:	74 37                	je     c001111e <SysRealpath(regs*)+0x46>
c00110e7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110ea:	31 d2                	xor    edx,edx
c00110ec:	b8 01 00 00 00       	mov    eax,0x1
c00110f1:	85 db                	test   ebx,ebx
c00110f3:	75 05                	jne    c00110fa <SysRealpath(regs*)+0x22>
c00110f5:	83 c4 08             	add    esp,0x8
c00110f8:	5b                   	pop    ebx
c00110f9:	c3                   	ret    
c00110fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110ff:	83 ec 04             	sub    esp,0x4
c0011102:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011105:	05 0c 01 00 00       	add    eax,0x10c
c001110a:	50                   	push   eax
c001110b:	51                   	push   ecx
c001110c:	53                   	push   ebx
c001110d:	e8 3e 9c ff ff       	call   c000ad50 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	31 c0                	xor    eax,eax
c0011117:	31 d2                	xor    edx,edx
c0011119:	83 c4 08             	add    esp,0x8
c001111c:	5b                   	pop    ebx
c001111d:	c3                   	ret    
c001111e:	b8 01 00 00 00       	mov    eax,0x1
c0011123:	31 d2                	xor    edx,edx
c0011125:	eb f2                	jmp    c0011119 <SysRealpath(regs*)+0x41>

c0011127 <SysReadDir(regs*)>:
c0011127:	53                   	push   ebx
c0011128:	83 ec 18             	sub    esp,0x18
c001112b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001112f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011132:	83 f8 02             	cmp    eax,0x2
c0011135:	76 4f                	jbe    c0011186 <SysReadDir(regs*)+0x5f>
c0011137:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001113e:	77 52                	ja     c0011192 <SysReadDir(regs*)+0x6b>
c0011140:	83 ec 0c             	sub    esp,0xc
c0011143:	50                   	push   eax
c0011144:	e8 62 83 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011149:	83 c4 10             	add    esp,0x10
c001114c:	85 c0                	test   eax,eax
c001114e:	74 42                	je     c0011192 <SysReadDir(regs*)+0x6b>
c0011150:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011158:	83 ec 0c             	sub    esp,0xc
c001115b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001115f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011161:	51                   	push   ecx
c0011162:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011165:	51                   	push   ecx
c0011166:	6a 00                	push   0x0
c0011168:	68 10 01 00 00       	push   0x110
c001116d:	50                   	push   eax
c001116e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011171:	83 c4 20             	add    esp,0x20
c0011174:	85 c0                	test   eax,eax
c0011176:	89 c1                	mov    ecx,eax
c0011178:	74 27                	je     c00111a1 <SysReadDir(regs*)+0x7a>
c001117a:	31 d2                	xor    edx,edx
c001117c:	83 f9 07             	cmp    ecx,0x7
c001117f:	b8 02 00 00 00       	mov    eax,0x2
c0011184:	75 16                	jne    c001119c <SysReadDir(regs*)+0x75>
c0011186:	b8 01 00 00 00       	mov    eax,0x1
c001118b:	31 d2                	xor    edx,edx
c001118d:	83 c4 18             	add    esp,0x18
c0011190:	5b                   	pop    ebx
c0011191:	c3                   	ret    
c0011192:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011197:	ba ff ff ff ff       	mov    edx,0xffffffff
c001119c:	83 c4 18             	add    esp,0x18
c001119f:	5b                   	pop    ebx
c00111a0:	c3                   	ret    
c00111a1:	31 c0                	xor    eax,eax
c00111a3:	31 d2                	xor    edx,edx
c00111a5:	eb e6                	jmp    c001118d <SysReadDir(regs*)+0x66>

c00111a7 <SysIsATTY(regs*)>:
c00111a7:	83 ec 0c             	sub    esp,0xc
c00111aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00111b1:	83 f8 02             	cmp    eax,0x2
c00111b4:	76 07                	jbe    c00111bd <SysIsATTY(regs*)+0x16>
c00111b6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111bb:	75 26                	jne    c00111e3 <SysIsATTY(regs*)+0x3c>
c00111bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00111cb:	85 c0                	test   eax,eax
c00111cd:	74 24                	je     c00111f3 <SysIsATTY(regs*)+0x4c>
c00111cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00111d1:	83 ec 0c             	sub    esp,0xc
c00111d4:	50                   	push   eax
c00111d5:	ff 12                	call   DWORD PTR [edx]
c00111d7:	83 c4 10             	add    esp,0x10
c00111da:	31 d2                	xor    edx,edx
c00111dc:	83 c4 0c             	add    esp,0xc
c00111df:	0f b6 c0             	movzx  eax,al
c00111e2:	c3                   	ret    
c00111e3:	83 ec 0c             	sub    esp,0xc
c00111e6:	50                   	push   eax
c00111e7:	e8 bf 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00111ec:	83 c4 10             	add    esp,0x10
c00111ef:	85 c0                	test   eax,eax
c00111f1:	75 dc                	jne    c00111cf <SysIsATTY(regs*)+0x28>
c00111f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111fd:	83 c4 0c             	add    esp,0xc
c0011200:	c3                   	ret    

c0011201 <SysSeek(regs*)>:
c0011201:	56                   	push   esi
c0011202:	53                   	push   ebx
c0011203:	83 ec 04             	sub    esp,0x4
c0011206:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001120a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001120d:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011210:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011216:	77 33                	ja     c001124b <SysSeek(regs*)+0x4a>
c0011218:	83 ec 0c             	sub    esp,0xc
c001121b:	51                   	push   ecx
c001121c:	e8 8a 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011221:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011224:	83 c4 0c             	add    esp,0xc
c0011227:	31 db                	xor    ebx,ebx
c0011229:	53                   	push   ebx
c001122a:	51                   	push   ecx
c001122b:	50                   	push   eax
c001122c:	e8 75 9e ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0011231:	83 c4 10             	add    esp,0x10
c0011234:	85 c0                	test   eax,eax
c0011236:	0f 95 c0             	setne  al
c0011239:	31 d2                	xor    edx,edx
c001123b:	0f b6 c0             	movzx  eax,al
c001123e:	f7 d8                	neg    eax
c0011240:	83 d2 00             	adc    edx,0x0
c0011243:	83 c4 04             	add    esp,0x4
c0011246:	5b                   	pop    ebx
c0011247:	f7 da                	neg    edx
c0011249:	5e                   	pop    esi
c001124a:	c3                   	ret    
c001124b:	83 c4 04             	add    esp,0x4
c001124e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011253:	5b                   	pop    ebx
c0011254:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011259:	5e                   	pop    esi
c001125a:	c3                   	ret    

c001125b <SysTell(regs*)>:
c001125b:	53                   	push   ebx
c001125c:	83 ec 08             	sub    esp,0x8
c001125f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011263:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011266:	83 f8 02             	cmp    eax,0x2
c0011269:	76 4e                	jbe    c00112b9 <SysTell(regs*)+0x5e>
c001126b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011270:	76 19                	jbe    c001128b <SysTell(regs*)+0x30>
c0011272:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011275:	31 d2                	xor    edx,edx
c0011277:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001127d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011284:	83 c4 08             	add    esp,0x8
c0011287:	31 c0                	xor    eax,eax
c0011289:	5b                   	pop    ebx
c001128a:	c3                   	ret    
c001128b:	83 ec 0c             	sub    esp,0xc
c001128e:	50                   	push   eax
c001128f:	e8 17 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011294:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011297:	5a                   	pop    edx
c0011298:	59                   	pop    ecx
c0011299:	53                   	push   ebx
c001129a:	50                   	push   eax
c001129b:	e8 5c 9e ff ff       	call   c000b0fc <File::tell(unsigned long long*)>
c00112a0:	83 c4 10             	add    esp,0x10
c00112a3:	85 c0                	test   eax,eax
c00112a5:	0f 95 c0             	setne  al
c00112a8:	31 d2                	xor    edx,edx
c00112aa:	0f b6 c0             	movzx  eax,al
c00112ad:	f7 d8                	neg    eax
c00112af:	83 d2 00             	adc    edx,0x0
c00112b2:	83 c4 08             	add    esp,0x8
c00112b5:	5b                   	pop    ebx
c00112b6:	f7 da                	neg    edx
c00112b8:	c3                   	ret    
c00112b9:	83 c4 08             	add    esp,0x8
c00112bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112c1:	5b                   	pop    ebx
c00112c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112c7:	c3                   	ret    

c00112c8 <SysSize(regs*)>:
c00112c8:	53                   	push   ebx
c00112c9:	83 ec 18             	sub    esp,0x18
c00112cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112d3:	83 f8 02             	cmp    eax,0x2
c00112d6:	76 54                	jbe    c001132c <SysSize(regs*)+0x64>
c00112d8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112dd:	76 19                	jbe    c00112f8 <SysSize(regs*)+0x30>
c00112df:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112e2:	31 d2                	xor    edx,edx
c00112e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112f1:	83 c4 18             	add    esp,0x18
c00112f4:	31 c0                	xor    eax,eax
c00112f6:	5b                   	pop    ebx
c00112f7:	c3                   	ret    
c00112f8:	83 ec 0c             	sub    esp,0xc
c00112fb:	50                   	push   eax
c00112fc:	e8 aa 81 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011301:	83 c4 0c             	add    esp,0xc
c0011304:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011308:	52                   	push   edx
c0011309:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001130c:	52                   	push   edx
c001130d:	50                   	push   eax
c001130e:	e8 81 9f ff ff       	call   c000b294 <File::stat(unsigned long long*, bool*)>
c0011313:	83 c4 10             	add    esp,0x10
c0011316:	85 c0                	test   eax,eax
c0011318:	0f 95 c0             	setne  al
c001131b:	31 d2                	xor    edx,edx
c001131d:	0f b6 c0             	movzx  eax,al
c0011320:	f7 d8                	neg    eax
c0011322:	83 d2 00             	adc    edx,0x0
c0011325:	83 c4 18             	add    esp,0x18
c0011328:	5b                   	pop    ebx
c0011329:	f7 da                	neg    edx
c001132b:	c3                   	ret    
c001132c:	83 c4 18             	add    esp,0x18
c001132f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011334:	5b                   	pop    ebx
c0011335:	ba ff ff ff ff       	mov    edx,0xffffffff
c001133a:	c3                   	ret    

c001133b <SysSizeFromFilename(regs*)>:
c001133b:	57                   	push   edi
c001133c:	56                   	push   esi
c001133d:	53                   	push   ebx
c001133e:	83 ec 10             	sub    esp,0x10
c0011341:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011345:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011348:	83 fb 02             	cmp    ebx,0x2
c001134b:	0f 86 83 00 00 00    	jbe    c00113d4 <SysSizeFromFilename(regs*)+0x99>
c0011351:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011357:	76 1b                	jbe    c0011374 <SysSizeFromFilename(regs*)+0x39>
c0011359:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001135c:	31 d2                	xor    edx,edx
c001135e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011364:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001136b:	83 c4 10             	add    esp,0x10
c001136e:	31 c0                	xor    eax,eax
c0011370:	5b                   	pop    ebx
c0011371:	5e                   	pop    esi
c0011372:	5f                   	pop    edi
c0011373:	c3                   	ret    
c0011374:	83 ec 0c             	sub    esp,0xc
c0011377:	68 14 01 00 00       	push   0x114
c001137c:	e8 4a 67 ff ff       	call   c0007acb <malloc>
c0011381:	83 c4 0c             	add    esp,0xc
c0011384:	89 c7                	mov    edi,eax
c0011386:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001138b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001138e:	50                   	push   eax
c001138f:	53                   	push   ebx
c0011390:	57                   	push   edi
c0011391:	e8 96 9b ff ff       	call   c000af2c <File::File(char const*, Process*)>
c0011396:	83 c4 0c             	add    esp,0xc
c0011399:	8d 44 24 13          	lea    eax,[esp+0x13]
c001139d:	50                   	push   eax
c001139e:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00113a1:	52                   	push   edx
c00113a2:	57                   	push   edi
c00113a3:	e8 ec 9e ff ff       	call   c000b294 <File::stat(unsigned long long*, bool*)>
c00113a8:	83 c4 10             	add    esp,0x10
c00113ab:	85 ff                	test   edi,edi
c00113ad:	89 c3                	mov    ebx,eax
c00113af:	74 0c                	je     c00113bd <SysSizeFromFilename(regs*)+0x82>
c00113b1:	8b 07                	mov    eax,DWORD PTR [edi]
c00113b3:	83 ec 0c             	sub    esp,0xc
c00113b6:	57                   	push   edi
c00113b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113ba:	83 c4 10             	add    esp,0x10
c00113bd:	31 c0                	xor    eax,eax
c00113bf:	85 db                	test   ebx,ebx
c00113c1:	0f 95 c0             	setne  al
c00113c4:	31 d2                	xor    edx,edx
c00113c6:	f7 d8                	neg    eax
c00113c8:	83 d2 00             	adc    edx,0x0
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	5b                   	pop    ebx
c00113cf:	f7 da                	neg    edx
c00113d1:	5e                   	pop    esi
c00113d2:	5f                   	pop    edi
c00113d3:	c3                   	ret    
c00113d4:	83 c4 10             	add    esp,0x10
c00113d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113dc:	5b                   	pop    ebx
c00113dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113e2:	5e                   	pop    esi
c00113e3:	5f                   	pop    edi
c00113e4:	c3                   	ret    

c00113e5 <SysClose(regs*)>:
c00113e5:	53                   	push   ebx
c00113e6:	83 ec 08             	sub    esp,0x8
c00113e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113f0:	83 f8 02             	cmp    eax,0x2
c00113f3:	76 41                	jbe    c0011436 <SysClose(regs*)+0x51>
c00113f5:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00113fb:	83 fa 01             	cmp    edx,0x1
c00113fe:	76 2d                	jbe    c001142d <SysClose(regs*)+0x48>
c0011400:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011405:	77 2f                	ja     c0011436 <SysClose(regs*)+0x51>
c0011407:	83 ec 0c             	sub    esp,0xc
c001140a:	50                   	push   eax
c001140b:	e8 9b 80 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011410:	89 04 24             	mov    DWORD PTR [esp],eax
c0011413:	89 c3                	mov    ebx,eax
c0011415:	e8 2c 9c ff ff       	call   c000b046 <File::close()>
c001141a:	83 c4 10             	add    esp,0x10
c001141d:	85 db                	test   ebx,ebx
c001141f:	74 0c                	je     c001142d <SysClose(regs*)+0x48>
c0011421:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011423:	83 ec 0c             	sub    esp,0xc
c0011426:	53                   	push   ebx
c0011427:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001142a:	83 c4 10             	add    esp,0x10
c001142d:	83 c4 08             	add    esp,0x8
c0011430:	31 c0                	xor    eax,eax
c0011432:	5b                   	pop    ebx
c0011433:	31 d2                	xor    edx,edx
c0011435:	c3                   	ret    
c0011436:	83 c4 08             	add    esp,0x8
c0011439:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001143e:	5b                   	pop    ebx
c001143f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011444:	c3                   	ret    

c0011445 <SysOpenDir(regs*)>:
c0011445:	56                   	push   esi
c0011446:	53                   	push   ebx
c0011447:	83 ec 04             	sub    esp,0x4
c001144a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001144e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011451:	85 c9                	test   ecx,ecx
c0011453:	74 5d                	je     c00114b2 <SysOpenDir(regs*)+0x6d>
c0011455:	83 ec 0c             	sub    esp,0xc
c0011458:	68 14 01 00 00       	push   0x114
c001145d:	e8 69 66 ff ff       	call   c0007acb <malloc>
c0011462:	83 c4 0c             	add    esp,0xc
c0011465:	89 c6                	mov    esi,eax
c0011467:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001146c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001146f:	50                   	push   eax
c0011470:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011473:	52                   	push   edx
c0011474:	56                   	push   esi
c0011475:	e8 d8 9f ff ff       	call   c000b452 <Directory::Directory(char const*, Process*)>
c001147a:	83 c4 10             	add    esp,0x10
c001147d:	85 f6                	test   esi,esi
c001147f:	74 31                	je     c00114b2 <SysOpenDir(regs*)+0x6d>
c0011481:	83 ec 0c             	sub    esp,0xc
c0011484:	56                   	push   esi
c0011485:	e8 84 a0 ff ff       	call   c000b50e <Directory::open()>
c001148a:	83 c4 10             	add    esp,0x10
c001148d:	85 c0                	test   eax,eax
c001148f:	75 21                	jne    c00114b2 <SysOpenDir(regs*)+0x6d>
c0011491:	83 ec 0c             	sub    esp,0xc
c0011494:	56                   	push   esi
c0011495:	e8 14 7d ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c001149a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001149d:	83 c4 10             	add    esp,0x10
c00114a0:	89 02                	mov    DWORD PTR [edx],eax
c00114a2:	c1 f8 1f             	sar    eax,0x1f
c00114a5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114a8:	83 c4 04             	add    esp,0x4
c00114ab:	31 c0                	xor    eax,eax
c00114ad:	5b                   	pop    ebx
c00114ae:	31 d2                	xor    edx,edx
c00114b0:	5e                   	pop    esi
c00114b1:	c3                   	ret    
c00114b2:	83 c4 04             	add    esp,0x4
c00114b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114ba:	5b                   	pop    ebx
c00114bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114c0:	5e                   	pop    esi
c00114c1:	c3                   	ret    

c00114c2 <SysMakeDir(regs*)>:
c00114c2:	56                   	push   esi
c00114c3:	53                   	push   ebx
c00114c4:	83 ec 10             	sub    esp,0x10
c00114c7:	68 14 01 00 00       	push   0x114
c00114cc:	e8 fa 65 ff ff       	call   c0007acb <malloc>
c00114d1:	83 c4 0c             	add    esp,0xc
c00114d4:	89 c3                	mov    ebx,eax
c00114d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114de:	50                   	push   eax
c00114df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114e3:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00114e6:	52                   	push   edx
c00114e7:	53                   	push   ebx
c00114e8:	e8 65 9f ff ff       	call   c000b452 <Directory::Directory(char const*, Process*)>
c00114ed:	83 c4 10             	add    esp,0x10
c00114f0:	85 db                	test   ebx,ebx
c00114f2:	74 2c                	je     c0011520 <SysMakeDir(regs*)+0x5e>
c00114f4:	83 ec 0c             	sub    esp,0xc
c00114f7:	53                   	push   ebx
c00114f8:	e8 f1 a1 ff ff       	call   c000b6ee <Directory::create()>
c00114fd:	89 c6                	mov    esi,eax
c00114ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011501:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011504:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011507:	83 c4 10             	add    esp,0x10
c001150a:	31 c0                	xor    eax,eax
c001150c:	85 f6                	test   esi,esi
c001150e:	0f 95 c0             	setne  al
c0011511:	31 d2                	xor    edx,edx
c0011513:	f7 d8                	neg    eax
c0011515:	83 d2 00             	adc    edx,0x0
c0011518:	83 c4 04             	add    esp,0x4
c001151b:	5b                   	pop    ebx
c001151c:	f7 da                	neg    edx
c001151e:	5e                   	pop    esi
c001151f:	c3                   	ret    
c0011520:	83 c4 04             	add    esp,0x4
c0011523:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011528:	5b                   	pop    ebx
c0011529:	ba ff ff ff ff       	mov    edx,0xffffffff
c001152e:	5e                   	pop    esi
c001152f:	c3                   	ret    

c0011530 <SysCloseDir(regs*)>:
c0011530:	53                   	push   ebx
c0011531:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011536:	83 ec 08             	sub    esp,0x8
c0011539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001153d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011540:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011545:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011548:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001154e:	77 2a                	ja     c001157a <SysCloseDir(regs*)+0x4a>
c0011550:	83 ec 0c             	sub    esp,0xc
c0011553:	51                   	push   ecx
c0011554:	e8 52 7f ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011559:	89 04 24             	mov    DWORD PTR [esp],eax
c001155c:	89 c3                	mov    ebx,eax
c001155e:	e8 07 a0 ff ff       	call   c000b56a <Directory::close()>
c0011563:	83 c4 10             	add    esp,0x10
c0011566:	85 db                	test   ebx,ebx
c0011568:	74 0c                	je     c0011576 <SysCloseDir(regs*)+0x46>
c001156a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001156c:	83 ec 0c             	sub    esp,0xc
c001156f:	53                   	push   ebx
c0011570:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011573:	83 c4 10             	add    esp,0x10
c0011576:	31 c0                	xor    eax,eax
c0011578:	31 d2                	xor    edx,edx
c001157a:	83 c4 08             	add    esp,0x8
c001157d:	5b                   	pop    ebx
c001157e:	c3                   	ret    

c001157f <SysWait(regs*)>:
c001157f:	83 ec 10             	sub    esp,0x10
c0011582:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011586:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011589:	52                   	push   edx
c001158a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001158d:	51                   	push   ecx
c001158e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011591:	50                   	push   eax
c0011592:	e8 e9 3c 00 00       	call   c0015280 <waitTask(int, int*, int)>
c0011597:	83 c4 1c             	add    esp,0x1c
c001159a:	89 c2                	mov    edx,eax
c001159c:	c1 fa 1f             	sar    edx,0x1f
c001159f:	c3                   	ret    

c00115a0 <SysNotImpl(regs*)>:
c00115a0:	83 ec 18             	sub    esp,0x18
c00115a3:	68 f6 0d 02 c0       	push   0xc0020df6
c00115a8:	e8 a0 f2 ff ff       	call   c001084d <KePanic(char const*)>
c00115ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115b7:	83 c4 1c             	add    esp,0x1c
c00115ba:	c3                   	ret    

c00115bb <SysPanic(regs*)>:
c00115bb:	83 ec 18             	sub    esp,0x18
c00115be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115c2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00115c5:	50                   	push   eax
c00115c6:	e8 82 f2 ff ff       	call   c001084d <KePanic(char const*)>
c00115cb:	b8 01 00 00 00       	mov    eax,0x1
c00115d0:	31 d2                	xor    edx,edx
c00115d2:	83 c4 1c             	add    esp,0x1c
c00115d5:	c3                   	ret    

c00115d6 <SysRmdir(regs*)>:
c00115d6:	56                   	push   esi
c00115d7:	53                   	push   ebx
c00115d8:	83 ec 10             	sub    esp,0x10
c00115db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115df:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115e2:	68 14 01 00 00       	push   0x114
c00115e7:	e8 df 64 ff ff       	call   c0007acb <malloc>
c00115ec:	83 c4 0c             	add    esp,0xc
c00115ef:	89 c3                	mov    ebx,eax
c00115f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115f9:	50                   	push   eax
c00115fa:	56                   	push   esi
c00115fb:	53                   	push   ebx
c00115fc:	e8 2b 99 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c0011601:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011604:	e8 57 9b ff ff       	call   c000b160 <File::unlink()>
c0011609:	83 c4 10             	add    esp,0x10
c001160c:	85 db                	test   ebx,ebx
c001160e:	89 c6                	mov    esi,eax
c0011610:	74 0c                	je     c001161e <SysRmdir(regs*)+0x48>
c0011612:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011614:	83 ec 0c             	sub    esp,0xc
c0011617:	53                   	push   ebx
c0011618:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001161b:	83 c4 10             	add    esp,0x10
c001161e:	31 c0                	xor    eax,eax
c0011620:	85 f6                	test   esi,esi
c0011622:	0f 95 c0             	setne  al
c0011625:	31 d2                	xor    edx,edx
c0011627:	f7 d8                	neg    eax
c0011629:	83 d2 00             	adc    edx,0x0
c001162c:	83 c4 04             	add    esp,0x4
c001162f:	5b                   	pop    ebx
c0011630:	f7 da                	neg    edx
c0011632:	5e                   	pop    esi
c0011633:	c3                   	ret    

c0011634 <SysUnlink(regs*)>:
c0011634:	56                   	push   esi
c0011635:	53                   	push   ebx
c0011636:	83 ec 10             	sub    esp,0x10
c0011639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001163d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011640:	68 14 01 00 00       	push   0x114
c0011645:	e8 81 64 ff ff       	call   c0007acb <malloc>
c001164a:	83 c4 0c             	add    esp,0xc
c001164d:	89 c3                	mov    ebx,eax
c001164f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011654:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011657:	50                   	push   eax
c0011658:	56                   	push   esi
c0011659:	53                   	push   ebx
c001165a:	e8 cd 98 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c001165f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011662:	e8 f9 9a ff ff       	call   c000b160 <File::unlink()>
c0011667:	83 c4 10             	add    esp,0x10
c001166a:	85 db                	test   ebx,ebx
c001166c:	89 c6                	mov    esi,eax
c001166e:	74 0c                	je     c001167c <SysUnlink(regs*)+0x48>
c0011670:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011672:	83 ec 0c             	sub    esp,0xc
c0011675:	53                   	push   ebx
c0011676:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011679:	83 c4 10             	add    esp,0x10
c001167c:	31 c0                	xor    eax,eax
c001167e:	85 f6                	test   esi,esi
c0011680:	0f 95 c0             	setne  al
c0011683:	31 d2                	xor    edx,edx
c0011685:	f7 d8                	neg    eax
c0011687:	83 d2 00             	adc    edx,0x0
c001168a:	83 c4 04             	add    esp,0x4
c001168d:	5b                   	pop    ebx
c001168e:	f7 da                	neg    edx
c0011690:	5e                   	pop    esi
c0011691:	c3                   	ret    

c0011692 <SysGetArgv(regs*)>:
c0011692:	83 ec 0c             	sub    esp,0xc
c0011695:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011699:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001169c:	85 c0                	test   eax,eax
c001169e:	78 2c                	js     c00116cc <SysGetArgv(regs*)+0x3a>
c00116a0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00116a6:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00116a9:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00116af:	7d 1b                	jge    c00116cc <SysGetArgv(regs*)+0x3a>
c00116b1:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00116b8:	85 c0                	test   eax,eax
c00116ba:	74 18                	je     c00116d4 <SysGetArgv(regs*)+0x42>
c00116bc:	83 ec 08             	sub    esp,0x8
c00116bf:	50                   	push   eax
c00116c0:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00116c3:	50                   	push   eax
c00116c4:	e8 87 ef fe ff       	call   c0000650 <strcpy>
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	31 c0                	xor    eax,eax
c00116ce:	31 d2                	xor    edx,edx
c00116d0:	83 c4 0c             	add    esp,0xc
c00116d3:	c3                   	ret    
c00116d4:	b8 01 00 00 00       	mov    eax,0x1
c00116d9:	31 d2                	xor    edx,edx
c00116db:	83 c4 0c             	add    esp,0xc
c00116de:	c3                   	ret    

c00116df <SysUSleep(regs*)>:
c00116df:	83 ec 1c             	sub    esp,0x1c
c00116e2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00116e6:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00116e9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00116ec:	6a 00                	push   0x0
c00116ee:	6a 64                	push   0x64
c00116f0:	52                   	push   edx
c00116f1:	50                   	push   eax
c00116f2:	e8 29 cf 00 00       	call   c001e620 <__udivdi3>
c00116f7:	83 c4 14             	add    esp,0x14
c00116fa:	50                   	push   eax
c00116fb:	e8 64 3c 00 00       	call   c0015364 <milliTenthSleep(unsigned int)>
c0011700:	31 c0                	xor    eax,eax
c0011702:	31 d2                	xor    edx,edx
c0011704:	83 c4 1c             	add    esp,0x1c
c0011707:	c3                   	ret    

c0011708 <SysSpawn(regs*)>:
c0011708:	56                   	push   esi
c0011709:	53                   	push   ebx
c001170a:	83 ec 04             	sub    esp,0x4
c001170d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011711:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011714:	85 f6                	test   esi,esi
c0011716:	75 0a                	jne    c0011722 <SysSpawn(regs*)+0x1a>
c0011718:	83 c4 04             	add    esp,0x4
c001171b:	31 c0                	xor    eax,eax
c001171d:	5b                   	pop    ebx
c001171e:	31 d2                	xor    edx,edx
c0011720:	5e                   	pop    esi
c0011721:	c3                   	ret    
c0011722:	83 ec 0c             	sub    esp,0xc
c0011725:	68 24 07 00 00       	push   0x724
c001172a:	e8 9c 63 ff ff       	call   c0007acb <malloc>
c001172f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011732:	83 c4 10             	add    esp,0x10
c0011735:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011738:	89 c6                	mov    esi,eax
c001173a:	31 c0                	xor    eax,eax
c001173c:	85 c9                	test   ecx,ecx
c001173e:	75 08                	jne    c0011748 <SysSpawn(regs*)+0x40>
c0011740:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011745:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011748:	52                   	push   edx
c0011749:	50                   	push   eax
c001174a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001174d:	50                   	push   eax
c001174e:	56                   	push   esi
c001174f:	e8 78 32 00 00       	call   c00149cc <Process::Process(char const*, Process*, char**)>
c0011754:	83 c4 10             	add    esp,0x10
c0011757:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001175e:	75 b8                	jne    c0011718 <SysSpawn(regs*)+0x10>
c0011760:	83 ec 0c             	sub    esp,0xc
c0011763:	56                   	push   esi
c0011764:	e8 9b 37 00 00       	call   c0014f04 <Process::createUserThread()>
c0011769:	8b 06                	mov    eax,DWORD PTR [esi]
c001176b:	83 c4 10             	add    esp,0x10
c001176e:	83 c4 04             	add    esp,0x4
c0011771:	5b                   	pop    ebx
c0011772:	89 c2                	mov    edx,eax
c0011774:	c1 fa 1f             	sar    edx,0x1f
c0011777:	5e                   	pop    esi
c0011778:	c3                   	ret    

c0011779 <SysGetEnv(regs*)>:
c0011779:	57                   	push   edi
c001177a:	56                   	push   esi
c001177b:	53                   	push   ebx
c001177c:	83 ec 1c             	sub    esp,0x1c
c001177f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011784:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011788:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001178b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001178e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011791:	51                   	push   ecx
c0011792:	e8 6e ef ff ff       	call   c0010705 <Krnl::getProcessTotalEnvCount(Process*)>
c0011797:	83 c4 10             	add    esp,0x10
c001179a:	39 c7                	cmp    edi,eax
c001179c:	7c 12                	jl     c00117b0 <SysGetEnv(regs*)+0x37>
c001179e:	31 c0                	xor    eax,eax
c00117a0:	31 d2                	xor    edx,edx
c00117a2:	85 f6                	test   esi,esi
c00117a4:	74 03                	je     c00117a9 <SysGetEnv(regs*)+0x30>
c00117a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	5b                   	pop    ebx
c00117ad:	5e                   	pop    esi
c00117ae:	5f                   	pop    edi
c00117af:	c3                   	ret    
c00117b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00117b4:	83 ec 04             	sub    esp,0x4
c00117b7:	57                   	push   edi
c00117b8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00117be:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00117c1:	57                   	push   edi
c00117c2:	50                   	push   eax
c00117c3:	e8 5d ef ff ff       	call   c0010725 <Krnl::getProcessEnvPair(Process*, int)>
c00117c8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00117cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117d3:	83 c4 0c             	add    esp,0xc
c00117d6:	85 d2                	test   edx,edx
c00117d8:	75 23                	jne    c00117fd <SysGetEnv(regs*)+0x84>
c00117da:	83 ec 0c             	sub    esp,0xc
c00117dd:	50                   	push   eax
c00117de:	e8 9d ed fe ff       	call   c0000580 <strlen>
c00117e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00117e6:	89 c3                	mov    ebx,eax
c00117e8:	e8 93 ed fe ff       	call   c0000580 <strlen>
c00117ed:	83 c4 10             	add    esp,0x10
c00117f0:	31 d2                	xor    edx,edx
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00117f9:	5b                   	pop    ebx
c00117fa:	5e                   	pop    esi
c00117fb:	5f                   	pop    edi
c00117fc:	c3                   	ret    
c00117fd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011800:	83 ec 08             	sub    esp,0x8
c0011803:	50                   	push   eax
c0011804:	56                   	push   esi
c0011805:	e8 46 ee fe ff       	call   c0000650 <strcpy>
c001180a:	58                   	pop    eax
c001180b:	5a                   	pop    edx
c001180c:	68 10 0e 02 c0       	push   0xc0020e10
c0011811:	56                   	push   esi
c0011812:	e8 59 f0 fe ff       	call   c0000870 <strcat>
c0011817:	59                   	pop    ecx
c0011818:	5b                   	pop    ebx
c0011819:	57                   	push   edi
c001181a:	56                   	push   esi
c001181b:	e8 50 f0 fe ff       	call   c0000870 <strcat>
c0011820:	83 c4 10             	add    esp,0x10
c0011823:	31 c0                	xor    eax,eax
c0011825:	83 c4 10             	add    esp,0x10
c0011828:	31 d2                	xor    edx,edx
c001182a:	5b                   	pop    ebx
c001182b:	5e                   	pop    esi
c001182c:	5f                   	pop    edi
c001182d:	c3                   	ret    

c001182e <SysSetFatAttrib(regs*)>:
c001182e:	57                   	push   edi
c001182f:	56                   	push   esi
c0011830:	53                   	push   ebx
c0011831:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011835:	83 ec 0c             	sub    esp,0xc
c0011838:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001183b:	68 14 01 00 00       	push   0x114
c0011840:	e8 86 62 ff ff       	call   c0007acb <malloc>
c0011845:	83 c4 0c             	add    esp,0xc
c0011848:	89 c3                	mov    ebx,eax
c001184a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001184f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011852:	50                   	push   eax
c0011853:	57                   	push   edi
c0011854:	53                   	push   ebx
c0011855:	e8 d2 96 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c001185a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001185d:	83 c4 0c             	add    esp,0xc
c0011860:	0f b6 d4             	movzx  edx,ah
c0011863:	0f b6 c0             	movzx  eax,al
c0011866:	52                   	push   edx
c0011867:	50                   	push   eax
c0011868:	53                   	push   ebx
c0011869:	e8 8c 99 ff ff       	call   c000b1fa <File::chfatattr(unsigned char, unsigned char)>
c001186e:	83 c4 10             	add    esp,0x10
c0011871:	85 db                	test   ebx,ebx
c0011873:	89 c6                	mov    esi,eax
c0011875:	74 0c                	je     c0011883 <SysSetFatAttrib(regs*)+0x55>
c0011877:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011879:	83 ec 0c             	sub    esp,0xc
c001187c:	53                   	push   ebx
c001187d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011880:	83 c4 10             	add    esp,0x10
c0011883:	5b                   	pop    ebx
c0011884:	31 c0                	xor    eax,eax
c0011886:	85 f6                	test   esi,esi
c0011888:	0f 95 c0             	setne  al
c001188b:	31 d2                	xor    edx,edx
c001188d:	5e                   	pop    esi
c001188e:	f7 d8                	neg    eax
c0011890:	83 d2 00             	adc    edx,0x0
c0011893:	f7 da                	neg    edx
c0011895:	5f                   	pop    edi
c0011896:	c3                   	ret    

c0011897 <SysPipe(regs*)>:
c0011897:	57                   	push   edi
c0011898:	56                   	push   esi
c0011899:	53                   	push   ebx
c001189a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001189e:	83 ec 0c             	sub    esp,0xc
c00118a1:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00118a4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00118a7:	6a 20                	push   0x20
c00118a9:	e8 1d 62 ff ff       	call   c0007acb <malloc>
c00118ae:	89 c3                	mov    ebx,eax
c00118b0:	58                   	pop    eax
c00118b1:	5a                   	pop    edx
c00118b2:	68 00 50 00 00       	push   0x5000
c00118b7:	53                   	push   ebx
c00118b8:	e8 6b 6b ff ff       	call   c0008428 <Pipe::Pipe(int)>
c00118bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118c0:	e8 e9 78 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c00118c5:	89 07                	mov    DWORD PTR [edi],eax
c00118c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118ca:	e8 df 78 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c00118cf:	83 c4 10             	add    esp,0x10
c00118d2:	31 d2                	xor    edx,edx
c00118d4:	89 06                	mov    DWORD PTR [esi],eax
c00118d6:	31 c0                	xor    eax,eax
c00118d8:	5b                   	pop    ebx
c00118d9:	5e                   	pop    esi
c00118da:	5f                   	pop    edi
c00118db:	c3                   	ret    

c00118dc <SysGetUnixTime(regs*)>:
c00118dc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00118e1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00118e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118eb:	e9 42 a0 ff ff       	jmp    c000b932 <Clock::timeInSecondsLocal()>

c00118f0 <string_ends_with(char const*, char const*)>:
c00118f0:	57                   	push   edi
c00118f1:	56                   	push   esi
c00118f2:	53                   	push   ebx
c00118f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118f7:	83 ec 0c             	sub    esp,0xc
c00118fa:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00118fe:	53                   	push   ebx
c00118ff:	e8 7c ec fe ff       	call   c0000580 <strlen>
c0011904:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011907:	89 c6                	mov    esi,eax
c0011909:	e8 72 ec fe ff       	call   c0000580 <strlen>
c001190e:	83 c4 10             	add    esp,0x10
c0011911:	31 d2                	xor    edx,edx
c0011913:	39 c6                	cmp    esi,eax
c0011915:	7d 06                	jge    c001191d <string_ends_with(char const*, char const*)+0x2d>
c0011917:	5b                   	pop    ebx
c0011918:	89 d0                	mov    eax,edx
c001191a:	5e                   	pop    esi
c001191b:	5f                   	pop    edi
c001191c:	c3                   	ret    
c001191d:	83 ec 08             	sub    esp,0x8
c0011920:	29 c6                	sub    esi,eax
c0011922:	57                   	push   edi
c0011923:	01 f3                	add    ebx,esi
c0011925:	53                   	push   ebx
c0011926:	e8 55 ee fe ff       	call   c0000780 <strcmp>
c001192b:	83 c4 10             	add    esp,0x10
c001192e:	31 d2                	xor    edx,edx
c0011930:	5b                   	pop    ebx
c0011931:	5e                   	pop    esi
c0011932:	85 c0                	test   eax,eax
c0011934:	5f                   	pop    edi
c0011935:	0f 94 c2             	sete   dl
c0011938:	89 d0                	mov    eax,edx
c001193a:	c3                   	ret    

c001193b <SysOpen(regs*)>:
c001193b:	56                   	push   esi
c001193c:	53                   	push   ebx
c001193d:	81 ec 04 01 00 00    	sub    esp,0x104
c0011943:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001194a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001194d:	85 c0                	test   eax,eax
c001194f:	0f 84 c5 01 00 00    	je     c0011b1a <SysOpen(regs*)+0x1df>
c0011955:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011958:	85 c0                	test   eax,eax
c001195a:	0f 84 ba 01 00 00    	je     c0011b1a <SysOpen(regs*)+0x1df>
c0011960:	83 ec 04             	sub    esp,0x4
c0011963:	68 12 0e 02 c0       	push   0xc0020e12
c0011968:	50                   	push   eax
c0011969:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001196d:	56                   	push   esi
c001196e:	e8 dd 93 ff ff       	call   c000ad50 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011973:	89 34 24             	mov    DWORD PTR [esp],esi
c0011976:	e8 05 ec fe ff       	call   c0000580 <strlen>
c001197b:	83 c4 10             	add    esp,0x10
c001197e:	83 e8 01             	sub    eax,0x1
c0011981:	74 29                	je     c00119ac <SysOpen(regs*)+0x71>
c0011983:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011987:	83 fa 2e             	cmp    edx,0x2e
c001198a:	74 1c                	je     c00119a8 <SysOpen(regs*)+0x6d>
c001198c:	83 fa 3a             	cmp    edx,0x3a
c001198f:	74 17                	je     c00119a8 <SysOpen(regs*)+0x6d>
c0011991:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011995:	83 e8 01             	sub    eax,0x1
c0011998:	74 12                	je     c00119ac <SysOpen(regs*)+0x71>
c001199a:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001199e:	83 fa 3a             	cmp    edx,0x3a
c00119a1:	74 05                	je     c00119a8 <SysOpen(regs*)+0x6d>
c00119a3:	83 fa 2e             	cmp    edx,0x2e
c00119a6:	75 e9                	jne    c0011991 <SysOpen(regs*)+0x56>
c00119a8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00119ac:	83 ec 08             	sub    esp,0x8
c00119af:	68 16 0e 02 c0       	push   0xc0020e16
c00119b4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119b7:	50                   	push   eax
c00119b8:	e8 33 ff ff ff       	call   c00118f0 <string_ends_with(char const*, char const*)>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	85 c0                	test   eax,eax
c00119c2:	74 1d                	je     c00119e1 <SysOpen(regs*)+0xa6>
c00119c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00119c7:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00119cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119d4:	81 c4 04 01 00 00    	add    esp,0x104
c00119da:	31 c0                	xor    eax,eax
c00119dc:	5b                   	pop    ebx
c00119dd:	31 d2                	xor    edx,edx
c00119df:	5e                   	pop    esi
c00119e0:	c3                   	ret    
c00119e1:	83 ec 08             	sub    esp,0x8
c00119e4:	68 1b 0e 02 c0       	push   0xc0020e1b
c00119e9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119ec:	50                   	push   eax
c00119ed:	e8 fe fe ff ff       	call   c00118f0 <string_ends_with(char const*, char const*)>
c00119f2:	83 c4 10             	add    esp,0x10
c00119f5:	85 c0                	test   eax,eax
c00119f7:	75 cb                	jne    c00119c4 <SysOpen(regs*)+0x89>
c00119f9:	83 ec 08             	sub    esp,0x8
c00119fc:	68 17 0e 02 c0       	push   0xc0020e17
c0011a01:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a04:	50                   	push   eax
c0011a05:	e8 76 ed fe ff       	call   c0000780 <strcmp>
c0011a0a:	83 c4 10             	add    esp,0x10
c0011a0d:	85 c0                	test   eax,eax
c0011a0f:	74 b3                	je     c00119c4 <SysOpen(regs*)+0x89>
c0011a11:	83 ec 08             	sub    esp,0x8
c0011a14:	68 16 0e 02 c0       	push   0xc0020e16
c0011a19:	56                   	push   esi
c0011a1a:	e8 d1 fe ff ff       	call   c00118f0 <string_ends_with(char const*, char const*)>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	85 c0                	test   eax,eax
c0011a24:	75 9e                	jne    c00119c4 <SysOpen(regs*)+0x89>
c0011a26:	83 ec 08             	sub    esp,0x8
c0011a29:	68 20 0e 02 c0       	push   0xc0020e20
c0011a2e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a31:	50                   	push   eax
c0011a32:	e8 b9 fe ff ff       	call   c00118f0 <string_ends_with(char const*, char const*)>
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	85 c0                	test   eax,eax
c0011a3c:	0f 85 eb 00 00 00    	jne    c0011b2d <SysOpen(regs*)+0x1f2>
c0011a42:	83 ec 08             	sub    esp,0x8
c0011a45:	68 25 0e 02 c0       	push   0xc0020e25
c0011a4a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a4d:	50                   	push   eax
c0011a4e:	e8 9d fe ff ff       	call   c00118f0 <string_ends_with(char const*, char const*)>
c0011a53:	83 c4 10             	add    esp,0x10
c0011a56:	85 c0                	test   eax,eax
c0011a58:	0f 85 cf 00 00 00    	jne    c0011b2d <SysOpen(regs*)+0x1f2>
c0011a5e:	83 ec 08             	sub    esp,0x8
c0011a61:	68 21 0e 02 c0       	push   0xc0020e21
c0011a66:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a69:	51                   	push   ecx
c0011a6a:	e8 11 ed fe ff       	call   c0000780 <strcmp>
c0011a6f:	83 c4 10             	add    esp,0x10
c0011a72:	85 c0                	test   eax,eax
c0011a74:	0f 84 b3 00 00 00    	je     c0011b2d <SysOpen(regs*)+0x1f2>
c0011a7a:	83 ec 08             	sub    esp,0x8
c0011a7d:	68 20 0e 02 c0       	push   0xc0020e20
c0011a82:	56                   	push   esi
c0011a83:	e8 68 fe ff ff       	call   c00118f0 <string_ends_with(char const*, char const*)>
c0011a88:	83 c4 10             	add    esp,0x10
c0011a8b:	85 c0                	test   eax,eax
c0011a8d:	0f 85 9a 00 00 00    	jne    c0011b2d <SysOpen(regs*)+0x1f2>
c0011a93:	83 ec 0c             	sub    esp,0xc
c0011a96:	68 14 01 00 00       	push   0x114
c0011a9b:	e8 2b 60 ff ff       	call   c0007acb <malloc>
c0011aa0:	83 c4 0c             	add    esp,0xc
c0011aa3:	89 c6                	mov    esi,eax
c0011aa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aaa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aad:	50                   	push   eax
c0011aae:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ab1:	52                   	push   edx
c0011ab2:	56                   	push   esi
c0011ab3:	e8 74 94 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c0011ab8:	83 c4 10             	add    esp,0x10
c0011abb:	85 f6                	test   esi,esi
c0011abd:	74 5b                	je     c0011b1a <SysOpen(regs*)+0x1df>
c0011abf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ac2:	0f b6 c2             	movzx  eax,dl
c0011ac5:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011ac8:	89 d0                	mov    eax,edx
c0011aca:	83 e0 01             	and    eax,0x1
c0011acd:	f6 c2 02             	test   dl,0x2
c0011ad0:	74 03                	je     c0011ad5 <SysOpen(regs*)+0x19a>
c0011ad2:	83 c8 02             	or     eax,0x2
c0011ad5:	f6 c2 04             	test   dl,0x4
c0011ad8:	74 03                	je     c0011add <SysOpen(regs*)+0x1a2>
c0011ada:	83 c8 04             	or     eax,0x4
c0011add:	f6 c2 08             	test   dl,0x8
c0011ae0:	74 03                	je     c0011ae5 <SysOpen(regs*)+0x1aa>
c0011ae2:	83 c8 0a             	or     eax,0xa
c0011ae5:	80 e2 10             	and    dl,0x10
c0011ae8:	74 03                	je     c0011aed <SysOpen(regs*)+0x1b2>
c0011aea:	83 c8 12             	or     eax,0x12
c0011aed:	83 ec 08             	sub    esp,0x8
c0011af0:	50                   	push   eax
c0011af1:	56                   	push   esi
c0011af2:	e8 f1 94 ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	85 c0                	test   eax,eax
c0011afc:	75 1c                	jne    c0011b1a <SysOpen(regs*)+0x1df>
c0011afe:	83 ec 0c             	sub    esp,0xc
c0011b01:	56                   	push   esi
c0011b02:	e8 a7 76 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c0011b07:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	89 02                	mov    DWORD PTR [edx],eax
c0011b0f:	c1 f8 1f             	sar    eax,0x1f
c0011b12:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b15:	e9 ba fe ff ff       	jmp    c00119d4 <SysOpen(regs*)+0x99>
c0011b1a:	81 c4 04 01 00 00    	add    esp,0x104
c0011b20:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b25:	5b                   	pop    ebx
c0011b26:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b2b:	5e                   	pop    esi
c0011b2c:	c3                   	ret    
c0011b2d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b30:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011b36:	e9 92 fe ff ff       	jmp    c00119cd <SysOpen(regs*)+0x92>

c0011b3b <KeSystemCall(regs*, void*)>:
c0011b3b:	53                   	push   ebx
c0011b3c:	83 ec 08             	sub    esp,0x8
c0011b3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b43:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011b46:	83 f8 3b             	cmp    eax,0x3b
c0011b49:	77 16                	ja     c0011b61 <KeSystemCall(regs*, void*)+0x26>
c0011b4b:	8b 14 85 e0 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdde20]
c0011b52:	85 d2                	test   edx,edx
c0011b54:	74 0b                	je     c0011b61 <KeSystemCall(regs*, void*)+0x26>
c0011b56:	83 ec 0c             	sub    esp,0xc
c0011b59:	53                   	push   ebx
c0011b5a:	ff d2                	call   edx
c0011b5c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011b5f:	eb 0d                	jmp    c0011b6e <KeSystemCall(regs*, void*)+0x33>
c0011b61:	52                   	push   edx
c0011b62:	52                   	push   edx
c0011b63:	50                   	push   eax
c0011b64:	68 2a 0e 02 c0       	push   0xc0020e2a
c0011b69:	e8 15 8e ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0011b6e:	83 c4 10             	add    esp,0x10
c0011b71:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b76:	83 c4 08             	add    esp,0x8
c0011b79:	31 d2                	xor    edx,edx
c0011b7b:	5b                   	pop    ebx
c0011b7c:	c3                   	ret    
c0011b7d:	66 90                	xchg   ax,ax
c0011b7f:	90                   	nop

c0011b80 <KeSwitchEndian16(unsigned short)>:
c0011b80:	83 ec 04             	sub    esp,0x4
c0011b83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b87:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011b8b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b8f:	c1 f8 08             	sar    eax,0x8
c0011b92:	89 c2                	mov    edx,eax
c0011b94:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b98:	c1 e0 08             	shl    eax,0x8
c0011b9b:	09 d0                	or     eax,edx
c0011b9d:	83 c4 04             	add    esp,0x4
c0011ba0:	c3                   	ret    
c0011ba1:	8d 76 00             	lea    esi,[esi+0x0]

c0011ba4 <KeSwitchEndian32(unsigned int)>:
c0011ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ba8:	c1 e8 18             	shr    eax,0x18
c0011bab:	89 c2                	mov    edx,eax
c0011bad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb1:	c1 e0 08             	shl    eax,0x8
c0011bb4:	25 00 00 ff 00       	and    eax,0xff0000
c0011bb9:	09 c2                	or     edx,eax
c0011bbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bbf:	c1 e8 08             	shr    eax,0x8
c0011bc2:	25 00 ff 00 00       	and    eax,0xff00
c0011bc7:	09 c2                	or     edx,eax
c0011bc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bcd:	c1 e0 18             	shl    eax,0x18
c0011bd0:	09 d0                	or     eax,edx
c0011bd2:	c3                   	ret    
c0011bd3:	90                   	nop

c0011bd4 <EthernetCRC32(unsigned char*, int)>:
c0011bd4:	83 ec 10             	sub    esp,0x10
c0011bd7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011bdc:	75 0a                	jne    c0011be8 <EthernetCRC32(unsigned char*, int)+0x14>
c0011bde:	b8 00 00 00 00       	mov    eax,0x0
c0011be3:	e9 8c 00 00 00       	jmp    c0011c74 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011be8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011bed:	7f 09                	jg     c0011bf8 <EthernetCRC32(unsigned char*, int)+0x24>
c0011bef:	b8 00 00 00 00       	mov    eax,0x0
c0011bf4:	eb 7e                	jmp    c0011c74 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bf6:	66 90                	xchg   ax,ax
c0011bf8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011c00:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011c08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c0c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011c10:	7d 5a                	jge    c0011c6c <EthernetCRC32(unsigned char*, int)+0x98>
c0011c12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c1a:	01 d0                	add    eax,edx
c0011c1c:	8a 00                	mov    al,BYTE PTR [eax]
c0011c1e:	0f b6 c0             	movzx  eax,al
c0011c21:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011c25:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c30:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011c35:	7f 2d                	jg     c0011c64 <EthernetCRC32(unsigned char*, int)+0x90>
c0011c37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c3b:	83 e0 01             	and    eax,0x1
c0011c3e:	74 10                	je     c0011c50 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c44:	d1 e8                	shr    eax,1
c0011c46:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011c4b:	eb 0b                	jmp    c0011c58 <EthernetCRC32(unsigned char*, int)+0x84>
c0011c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c54:	d1 e8                	shr    eax,1
c0011c56:	66 90                	xchg   ax,ax
c0011c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c5c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011c61:	eb cd                	jmp    c0011c30 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011c63:	90                   	nop
c0011c64:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011c69:	eb 9d                	jmp    c0011c08 <EthernetCRC32(unsigned char*, int)+0x34>
c0011c6b:	90                   	nop
c0011c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c70:	f7 d0                	not    eax
c0011c72:	66 90                	xchg   ax,ax
c0011c74:	83 c4 10             	add    esp,0x10
c0011c77:	c3                   	ret    

c0011c78 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011c78:	83 ec 2c             	sub    esp,0x2c
c0011c7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c7f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011c84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c93:	0f b7 c0             	movzx  eax,ax
c0011c96:	3d 06 08 00 00       	cmp    eax,0x806
c0011c9b:	75 13                	jne    c0011cb0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011c9d:	83 ec 0c             	sub    esp,0xc
c0011ca0:	68 3e 0e 02 c0       	push   0xc0020e3e
c0011ca5:	e8 d9 8c ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0011caa:	83 c4 10             	add    esp,0x10
c0011cad:	eb 25                	jmp    c0011cd4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011caf:	90                   	nop
c0011cb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cb7:	0f b7 c0             	movzx  eax,ax
c0011cba:	3d 00 08 00 00       	cmp    eax,0x800
c0011cbf:	75 13                	jne    c0011cd4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011cc1:	83 ec 0c             	sub    esp,0xc
c0011cc4:	68 54 0e 02 c0       	push   0xc0020e54
c0011cc9:	e8 b5 8c ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0011cce:	83 c4 10             	add    esp,0x10
c0011cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0011cd4:	90                   	nop
c0011cd5:	83 c4 2c             	add    esp,0x2c
c0011cd8:	c3                   	ret    

c0011cd9 <CmOpen(char const*)>:
c0011cd9:	57                   	push   edi
c0011cda:	56                   	push   esi
c0011cdb:	53                   	push   ebx
c0011cdc:	83 ec 1c             	sub    esp,0x1c
c0011cdf:	6a 30                	push   0x30
c0011ce1:	e8 e5 5d ff ff       	call   c0007acb <malloc>
c0011ce6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011ced:	89 c3                	mov    ebx,eax
c0011cef:	e8 d7 5d ff ff       	call   c0007acb <malloc>
c0011cf4:	83 c4 0c             	add    esp,0xc
c0011cf7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011cfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011d01:	89 c6                	mov    esi,eax
c0011d03:	50                   	push   eax
c0011d04:	e8 23 92 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c0011d09:	83 c4 0c             	add    esp,0xc
c0011d0c:	89 33                	mov    DWORD PTR [ebx],esi
c0011d0e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011d12:	50                   	push   eax
c0011d13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011d17:	50                   	push   eax
c0011d18:	56                   	push   esi
c0011d19:	e8 76 95 ff ff       	call   c000b294 <File::stat(unsigned long long*, bool*)>
c0011d1e:	5a                   	pop    edx
c0011d1f:	59                   	pop    ecx
c0011d20:	6a 01                	push   0x1
c0011d22:	ff 33                	push   DWORD PTR [ebx]
c0011d24:	e8 bf 92 ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c0011d29:	5e                   	pop    esi
c0011d2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d2e:	e8 98 5d ff ff       	call   c0007acb <malloc>
c0011d33:	5a                   	pop    edx
c0011d34:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011d38:	89 c7                	mov    edi,eax
c0011d3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d3e:	56                   	push   esi
c0011d3f:	57                   	push   edi
c0011d40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d44:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d48:	50                   	push   eax
c0011d49:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d4c:	83 c4 14             	add    esp,0x14
c0011d4f:	ff 33                	push   DWORD PTR [ebx]
c0011d51:	e8 f0 92 ff ff       	call   c000b046 <File::close()>
c0011d56:	59                   	pop    ecx
c0011d57:	58                   	pop    eax
c0011d58:	6a 13                	push   0x13
c0011d5a:	ff 33                	push   DWORD PTR [ebx]
c0011d5c:	e8 87 92 ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c0011d61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d63:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d65:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d68:	57                   	push   edi
c0011d69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d71:	50                   	push   eax
c0011d72:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011d75:	83 c4 14             	add    esp,0x14
c0011d78:	57                   	push   edi
c0011d79:	e8 5d 5d ff ff       	call   c0007adb <free>
c0011d7e:	83 c4 10             	add    esp,0x10
c0011d81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011d84:	75 10                	jne    c0011d96 <CmOpen(char const*)+0xbd>
c0011d86:	83 ec 0c             	sub    esp,0xc
c0011d89:	68 69 0e 02 c0       	push   0xc0020e69
c0011d8e:	e8 ba ea ff ff       	call   c001084d <KePanic(char const*)>
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	50                   	push   eax
c0011d97:	6a 00                	push   0x0
c0011d99:	6a 00                	push   0x0
c0011d9b:	ff 33                	push   DWORD PTR [ebx]
c0011d9d:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011da0:	e8 01 93 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0011da5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011da7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011da9:	89 34 24             	mov    DWORD PTR [esp],esi
c0011dac:	57                   	push   edi
c0011dad:	6a 00                	push   0x0
c0011daf:	6a 2b                	push   0x2b
c0011db1:	50                   	push   eax
c0011db2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011db5:	83 c4 1c             	add    esp,0x1c
c0011db8:	6a 00                	push   0x0
c0011dba:	6a 00                	push   0x0
c0011dbc:	ff 33                	push   DWORD PTR [ebx]
c0011dbe:	e8 e3 92 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0011dc3:	83 c4 0c             	add    esp,0xc
c0011dc6:	6a 08                	push   0x8
c0011dc8:	68 7a 0e 02 c0       	push   0xc0020e7a
c0011dcd:	57                   	push   edi
c0011dce:	e8 ad e5 fe ff       	call   c0000380 <memcmp>
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	85 c0                	test   eax,eax
c0011dd8:	74 10                	je     c0011dea <CmOpen(char const*)+0x111>
c0011dda:	83 ec 0c             	sub    esp,0xc
c0011ddd:	68 83 0e 02 c0       	push   0xc0020e83
c0011de2:	e8 66 ea ff ff       	call   c001084d <KePanic(char const*)>
c0011de7:	83 c4 10             	add    esp,0x10
c0011dea:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011dee:	83 c4 10             	add    esp,0x10
c0011df1:	89 d8                	mov    eax,ebx
c0011df3:	5b                   	pop    ebx
c0011df4:	5e                   	pop    esi
c0011df5:	5f                   	pop    edi
c0011df6:	c3                   	ret    

c0011df7 <CmClose(Reghive_Tag*)>:
c0011df7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dfb:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011dff:	74 0b                	je     c0011e0c <CmClose(Reghive_Tag*)+0x15>
c0011e01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e07:	e9 3a 92 ff ff       	jmp    c000b046 <File::close()>
c0011e0c:	c3                   	ret    

c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011e0d:	53                   	push   ebx
c0011e0e:	83 ec 18             	sub    esp,0x18
c0011e11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e15:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011e19:	74 29                	je     c0011e44 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011e1b:	50                   	push   eax
c0011e1c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011e21:	99                   	cdq    
c0011e22:	52                   	push   edx
c0011e23:	50                   	push   eax
c0011e24:	ff 33                	push   DWORD PTR [ebx]
c0011e26:	e8 7b 92 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0011e2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e2d:	5a                   	pop    edx
c0011e2e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e32:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e34:	51                   	push   ecx
c0011e35:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e39:	6a 00                	push   0x0
c0011e3b:	6a 2b                	push   0x2b
c0011e3d:	50                   	push   eax
c0011e3e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e41:	83 c4 20             	add    esp,0x20
c0011e44:	83 c4 18             	add    esp,0x18
c0011e47:	5b                   	pop    ebx
c0011e48:	c3                   	ret    

c0011e49 <CmGetString(Reghive_Tag*, int, char*)>:
c0011e49:	55                   	push   ebp
c0011e4a:	57                   	push   edi
c0011e4b:	56                   	push   esi
c0011e4c:	53                   	push   ebx
c0011e4d:	31 db                	xor    ebx,ebx
c0011e4f:	83 ec 70             	sub    esp,0x70
c0011e52:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011e56:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011e5d:	50                   	push   eax
c0011e5e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011e65:	55                   	push   ebp
c0011e66:	e8 a2 ff ff ff       	call   c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e6b:	83 c4 10             	add    esp,0x10
c0011e6e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011e73:	c1 e0 08             	shl    eax,0x8
c0011e76:	89 c2                	mov    edx,eax
c0011e78:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011e7d:	09 d0                	or     eax,edx
c0011e7f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011e84:	c1 e0 08             	shl    eax,0x8
c0011e87:	09 d0                	or     eax,edx
c0011e89:	74 25                	je     c0011eb0 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011e8b:	52                   	push   edx
c0011e8c:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011e90:	52                   	push   edx
c0011e91:	6b fb 0d             	imul   edi,ebx,0xd
c0011e94:	50                   	push   eax
c0011e95:	55                   	push   ebp
c0011e96:	e8 72 ff ff ff       	call   c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e9b:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011e9f:	b9 27 00 00 00       	mov    ecx,0x27
c0011ea4:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011eab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ead:	83 c4 10             	add    esp,0x10
c0011eb0:	83 c3 03             	add    ebx,0x3
c0011eb3:	83 fb 15             	cmp    ebx,0x15
c0011eb6:	75 b6                	jne    c0011e6e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011eb8:	83 c4 6c             	add    esp,0x6c
c0011ebb:	5b                   	pop    ebx
c0011ebc:	5e                   	pop    esi
c0011ebd:	5f                   	pop    edi
c0011ebe:	5d                   	pop    ebp
c0011ebf:	c3                   	ret    

c0011ec0 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011ec0:	83 ec 40             	sub    esp,0x40
c0011ec3:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011ec7:	50                   	push   eax
c0011ec8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ecc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ed0:	e8 38 ff ff ff       	call   c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ed5:	83 c4 10             	add    esp,0x10
c0011ed8:	83 c8 ff             	or     eax,0xffffffff
c0011edb:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011ee0:	75 19                	jne    c0011efb <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011ee2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ee7:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011eec:	c1 e0 08             	shl    eax,0x8
c0011eef:	09 c2                	or     edx,eax
c0011ef1:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011ef6:	c1 e0 10             	shl    eax,0x10
c0011ef9:	09 d0                	or     eax,edx
c0011efb:	83 c4 3c             	add    esp,0x3c
c0011efe:	c3                   	ret    

c0011eff <CmGetNext(Reghive_Tag*, int)>:
c0011eff:	83 ec 40             	sub    esp,0x40
c0011f02:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f06:	50                   	push   eax
c0011f07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f0f:	e8 f9 fe ff ff       	call   c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f14:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011f19:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011f1e:	c1 e0 08             	shl    eax,0x8
c0011f21:	09 c2                	or     edx,eax
c0011f23:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011f28:	83 c4 4c             	add    esp,0x4c
c0011f2b:	c1 e0 10             	shl    eax,0x10
c0011f2e:	09 d0                	or     eax,edx
c0011f30:	c3                   	ret    

c0011f31 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011f31:	53                   	push   ebx
c0011f32:	83 ec 18             	sub    esp,0x18
c0011f35:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f39:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f3d:	74 29                	je     c0011f68 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011f3f:	50                   	push   eax
c0011f40:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011f45:	99                   	cdq    
c0011f46:	52                   	push   edx
c0011f47:	50                   	push   eax
c0011f48:	ff 33                	push   DWORD PTR [ebx]
c0011f4a:	e8 57 91 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0011f4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f51:	5a                   	pop    edx
c0011f52:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f56:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f58:	51                   	push   ecx
c0011f59:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f5d:	6a 00                	push   0x0
c0011f5f:	6a 2b                	push   0x2b
c0011f61:	50                   	push   eax
c0011f62:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f65:	83 c4 20             	add    esp,0x20
c0011f68:	83 c4 18             	add    esp,0x18
c0011f6b:	5b                   	pop    ebx
c0011f6c:	c3                   	ret    

c0011f6d <CmFreeExtent(Reghive_Tag*, int)>:
c0011f6d:	53                   	push   ebx
c0011f6e:	83 ec 3c             	sub    esp,0x3c
c0011f71:	6a 2b                	push   0x2b
c0011f73:	6a 00                	push   0x0
c0011f75:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f79:	53                   	push   ebx
c0011f7a:	e8 71 e5 fe ff       	call   c00004f0 <memset>
c0011f7f:	83 c4 0c             	add    esp,0xc
c0011f82:	53                   	push   ebx
c0011f83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f8b:	e8 a1 ff ff ff       	call   c0011f31 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f90:	83 c4 48             	add    esp,0x48
c0011f93:	5b                   	pop    ebx
c0011f94:	c3                   	ret    

c0011f95 <CmUpdateHeader(Reghive_Tag*)>:
c0011f95:	83 ec 0c             	sub    esp,0xc
c0011f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f9c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011fa0:	74 10                	je     c0011fb2 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011fa2:	52                   	push   edx
c0011fa3:	8d 50 05             	lea    edx,[eax+0x5]
c0011fa6:	52                   	push   edx
c0011fa7:	6a 00                	push   0x0
c0011fa9:	50                   	push   eax
c0011faa:	e8 82 ff ff ff       	call   c0011f31 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011faf:	83 c4 10             	add    esp,0x10
c0011fb2:	83 c4 0c             	add    esp,0xc
c0011fb5:	c3                   	ret    

c0011fb6 <CmExpand(Reghive_Tag*, int)>:
c0011fb6:	55                   	push   ebp
c0011fb7:	57                   	push   edi
c0011fb8:	83 cf ff             	or     edi,0xffffffff
c0011fbb:	56                   	push   esi
c0011fbc:	53                   	push   ebx
c0011fbd:	83 ec 3c             	sub    esp,0x3c
c0011fc0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0011fc4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0011fc8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011fcc:	74 59                	je     c0012027 <CmExpand(Reghive_Tag*, int)+0x71>
c0011fce:	50                   	push   eax
c0011fcf:	31 d2                	xor    edx,edx
c0011fd1:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011fd5:	31 ff                	xor    edi,edi
c0011fd7:	52                   	push   edx
c0011fd8:	50                   	push   eax
c0011fd9:	ff 33                	push   DWORD PTR [ebx]
c0011fdb:	e8 c6 90 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0011fe0:	83 c4 0c             	add    esp,0xc
c0011fe3:	6a 2b                	push   0x2b
c0011fe5:	6a 00                	push   0x0
c0011fe7:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0011feb:	55                   	push   ebp
c0011fec:	e8 ff e4 fe ff       	call   c00004f0 <memset>
c0011ff1:	83 c4 10             	add    esp,0x10
c0011ff4:	39 f7                	cmp    edi,esi
c0011ff6:	7d 1b                	jge    c0012013 <CmExpand(Reghive_Tag*, int)+0x5d>
c0011ff8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ffa:	83 ec 0c             	sub    esp,0xc
c0011ffd:	47                   	inc    edi
c0011ffe:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012002:	8b 10                	mov    edx,DWORD PTR [eax]
c0012004:	51                   	push   ecx
c0012005:	55                   	push   ebp
c0012006:	6a 00                	push   0x0
c0012008:	6a 2b                	push   0x2b
c001200a:	50                   	push   eax
c001200b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001200e:	83 c4 20             	add    esp,0x20
c0012011:	eb e1                	jmp    c0011ff4 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012013:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	01 fe                	add    esi,edi
c001201b:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c001201e:	53                   	push   ebx
c001201f:	e8 71 ff ff ff       	call   c0011f95 <CmUpdateHeader(Reghive_Tag*)>
c0012024:	83 c4 10             	add    esp,0x10
c0012027:	83 c4 3c             	add    esp,0x3c
c001202a:	89 f8                	mov    eax,edi
c001202c:	5b                   	pop    ebx
c001202d:	5e                   	pop    esi
c001202e:	5f                   	pop    edi
c001202f:	5d                   	pop    ebp
c0012030:	c3                   	ret    

c0012031 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012031:	55                   	push   ebp
c0012032:	57                   	push   edi
c0012033:	56                   	push   esi
c0012034:	53                   	push   ebx
c0012035:	83 cb ff             	or     ebx,0xffffffff
c0012038:	83 ec 1c             	sub    esp,0x1c
c001203b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001203f:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012043:	74 68                	je     c00120ad <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012045:	51                   	push   ecx
c0012046:	be 2b 00 00 00       	mov    esi,0x2b
c001204b:	6a 00                	push   0x0
c001204d:	31 ff                	xor    edi,edi
c001204f:	6a 00                	push   0x0
c0012051:	31 db                	xor    ebx,ebx
c0012053:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012056:	e8 4b 90 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c001205b:	83 c4 10             	add    esp,0x10
c001205e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012061:	76 3b                	jbe    c001209e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012063:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012066:	83 ec 0c             	sub    esp,0xc
c0012069:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001206d:	8b 10                	mov    edx,DWORD PTR [eax]
c001206f:	51                   	push   ecx
c0012070:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012074:	51                   	push   ecx
c0012075:	6a 00                	push   0x0
c0012077:	6a 01                	push   0x1
c0012079:	50                   	push   eax
c001207a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001207d:	83 c4 20             	add    esp,0x20
c0012080:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012085:	74 26                	je     c00120ad <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012087:	52                   	push   edx
c0012088:	43                   	inc    ebx
c0012089:	57                   	push   edi
c001208a:	56                   	push   esi
c001208b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001208e:	e8 13 90 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0012093:	83 c6 2b             	add    esi,0x2b
c0012096:	83 d7 00             	adc    edi,0x0
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	eb c0                	jmp    c001205e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001209e:	50                   	push   eax
c001209f:	50                   	push   eax
c00120a0:	6a 40                	push   0x40
c00120a2:	55                   	push   ebp
c00120a3:	e8 0e ff ff ff       	call   c0011fb6 <CmExpand(Reghive_Tag*, int)>
c00120a8:	83 c4 10             	add    esp,0x10
c00120ab:	89 c3                	mov    ebx,eax
c00120ad:	83 c4 1c             	add    esp,0x1c
c00120b0:	89 d8                	mov    eax,ebx
c00120b2:	5b                   	pop    ebx
c00120b3:	5e                   	pop    esi
c00120b4:	5f                   	pop    edi
c00120b5:	5d                   	pop    ebp
c00120b6:	c3                   	ret    

c00120b7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00120b7:	55                   	push   ebp
c00120b8:	57                   	push   edi
c00120b9:	56                   	push   esi
c00120ba:	53                   	push   ebx
c00120bb:	81 ec 88 00 00 00    	sub    esp,0x88
c00120c1:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00120c8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120cf:	e8 5d ff ff ff       	call   c0012031 <CmFindUnusedExtent(Reghive_Tag*)>
c00120d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120d8:	83 c4 0c             	add    esp,0xc
c00120db:	6a 2b                	push   0x2b
c00120dd:	6a 00                	push   0x0
c00120df:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00120e3:	55                   	push   ebp
c00120e4:	e8 07 e4 fe ff       	call   c00004f0 <memset>
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	85 db                	test   ebx,ebx
c00120ee:	74 12                	je     c0012102 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00120f0:	51                   	push   ecx
c00120f1:	55                   	push   ebp
c00120f2:	53                   	push   ebx
c00120f3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120fa:	e8 0e fd ff ff       	call   c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00120ff:	83 c4 10             	add    esp,0x10
c0012102:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012106:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001210d:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012112:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012114:	85 db                	test   ebx,ebx
c0012116:	74 49                	je     c0012161 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012118:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001211d:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012122:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012126:	c1 e0 08             	shl    eax,0x8
c0012129:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001212f:	09 c8                	or     eax,ecx
c0012131:	74 11                	je     c0012144 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012133:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012137:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001213b:	c1 e8 10             	shr    eax,0x10
c001213e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012142:	eb 0f                	jmp    c0012153 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012144:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012149:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001214e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012153:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012157:	c1 ea 08             	shr    edx,0x8
c001215a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001215f:	eb 0f                	jmp    c0012170 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012161:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012166:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001216b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012170:	52                   	push   edx
c0012171:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012175:	50                   	push   eax
c0012176:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001217a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012181:	e8 ab fd ff ff       	call   c0011f31 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012186:	83 c4 10             	add    esp,0x10
c0012189:	85 db                	test   ebx,ebx
c001218b:	74 12                	je     c001219f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c001218d:	50                   	push   eax
c001218e:	55                   	push   ebp
c001218f:	53                   	push   ebx
c0012190:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012197:	e8 95 fd ff ff       	call   c0011f31 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001219c:	83 c4 10             	add    esp,0x10
c001219f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121a3:	83 c4 7c             	add    esp,0x7c
c00121a6:	5b                   	pop    ebx
c00121a7:	5e                   	pop    esi
c00121a8:	5f                   	pop    edi
c00121a9:	5d                   	pop    ebp
c00121aa:	c3                   	ret    

c00121ab <CmSetString(Reghive_Tag*, int, char const*)>:
c00121ab:	55                   	push   ebp
c00121ac:	57                   	push   edi
c00121ad:	56                   	push   esi
c00121ae:	53                   	push   ebx
c00121af:	bb 27 00 00 00       	mov    ebx,0x27
c00121b4:	81 ec 88 00 00 00    	sub    esp,0x88
c00121ba:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c00121c1:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00121c8:	e8 b3 e3 fe ff       	call   c0000580 <strlen>
c00121cd:	8d 48 26             	lea    ecx,[eax+0x26]
c00121d0:	89 c8                	mov    eax,ecx
c00121d2:	99                   	cdq    
c00121d3:	f7 fb                	idiv   ebx
c00121d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121d9:	83 c4 10             	add    esp,0x10
c00121dc:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00121e2:	7e 10                	jle    c00121f4 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00121e4:	83 ec 0c             	sub    esp,0xc
c00121e7:	68 94 0e 02 c0       	push   0xc0020e94
c00121ec:	e8 5c e6 ff ff       	call   c001084d <KePanic(char const*)>
c00121f1:	83 c4 10             	add    esp,0x10
c00121f4:	53                   	push   ebx
c00121f5:	31 ed                	xor    ebp,ebp
c00121f7:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00121fb:	53                   	push   ebx
c00121fc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012203:	57                   	push   edi
c0012204:	e8 04 fc ff ff       	call   c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012209:	83 c4 10             	add    esp,0x10
c001220c:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012210:	89 f0                	mov    eax,esi
c0012212:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012216:	c1 e0 08             	shl    eax,0x8
c0012219:	09 c6                	or     esi,eax
c001221b:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001221f:	c1 e6 08             	shl    esi,0x8
c0012222:	09 c6                	or     esi,eax
c0012224:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012228:	7e 72                	jle    c001229c <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c001222a:	85 f6                	test   esi,esi
c001222c:	75 25                	jne    c0012253 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001222e:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012233:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012237:	50                   	push   eax
c0012238:	6a 00                	push   0x0
c001223a:	6a 00                	push   0x0
c001223c:	57                   	push   edi
c001223d:	e8 75 fe ff ff       	call   c00120b7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012242:	83 c4 10             	add    esp,0x10
c0012245:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012248:	89 c6                	mov    esi,eax
c001224a:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c001224d:	c1 f8 10             	sar    eax,0x10
c0012250:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012253:	51                   	push   ecx
c0012254:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012258:	52                   	push   edx
c0012259:	56                   	push   esi
c001225a:	57                   	push   edi
c001225b:	e8 ad fb ff ff       	call   c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012260:	83 c4 0c             	add    esp,0xc
c0012263:	6a 27                	push   0x27
c0012265:	6a 00                	push   0x0
c0012267:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001226b:	51                   	push   ecx
c001226c:	e8 7f e2 fe ff       	call   c00004f0 <memset>
c0012271:	6b c5 27             	imul   eax,ebp,0x27
c0012274:	83 c4 0c             	add    esp,0xc
c0012277:	6a 27                	push   0x27
c0012279:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012280:	50                   	push   eax
c0012281:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012285:	51                   	push   ecx
c0012286:	e8 05 e4 fe ff       	call   c0000690 <strncpy>
c001228b:	83 c4 0c             	add    esp,0xc
c001228e:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012292:	52                   	push   edx
c0012293:	56                   	push   esi
c0012294:	57                   	push   edi
c0012295:	e8 97 fc ff ff       	call   c0011f31 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001229a:	eb 19                	jmp    c00122b5 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c001229c:	85 f6                	test   esi,esi
c001229e:	74 18                	je     c00122b8 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c00122a0:	52                   	push   edx
c00122a1:	52                   	push   edx
c00122a2:	56                   	push   esi
c00122a3:	57                   	push   edi
c00122a4:	e8 c4 fc ff ff       	call   c0011f6d <CmFreeExtent(Reghive_Tag*, int)>
c00122a9:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00122ad:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00122b1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00122b5:	83 c4 10             	add    esp,0x10
c00122b8:	45                   	inc    ebp
c00122b9:	83 c3 03             	add    ebx,0x3
c00122bc:	83 fd 07             	cmp    ebp,0x7
c00122bf:	0f 85 47 ff ff ff    	jne    c001220c <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00122c5:	50                   	push   eax
c00122c6:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00122ca:	50                   	push   eax
c00122cb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122d2:	57                   	push   edi
c00122d3:	e8 59 fc ff ff       	call   c0011f31 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122d8:	81 c4 8c 00 00 00    	add    esp,0x8c
c00122de:	5b                   	pop    ebx
c00122df:	5e                   	pop    esi
c00122e0:	5f                   	pop    edi
c00122e1:	5d                   	pop    ebp
c00122e2:	c3                   	ret    

c00122e3 <CmGetMatch(char*, char*, bool, bool*)>:
c00122e3:	56                   	push   esi
c00122e4:	53                   	push   ebx
c00122e5:	50                   	push   eax
c00122e6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00122eb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00122ef:	74 25                	je     c0012316 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00122f1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00122f4:	31 db                	xor    ebx,ebx
c00122f6:	50                   	push   eax
c00122f7:	50                   	push   eax
c00122f8:	8d 04 9d e0 22 02 c0 	lea    eax,[ebx*4-0x3ffddd20]
c00122ff:	50                   	push   eax
c0012300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012304:	e8 77 e4 fe ff       	call   c0000780 <strcmp>
c0012309:	83 c4 10             	add    esp,0x10
c001230c:	85 c0                	test   eax,eax
c001230e:	74 2e                	je     c001233e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012310:	43                   	inc    ebx
c0012311:	83 fb 3f             	cmp    ebx,0x3f
c0012314:	75 e0                	jne    c00122f6 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012316:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012319:	31 db                	xor    ebx,ebx
c001231b:	51                   	push   ecx
c001231c:	51                   	push   ecx
c001231d:	8d 04 9d e0 22 02 c0 	lea    eax,[ebx*4-0x3ffddd20]
c0012324:	50                   	push   eax
c0012325:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012329:	e8 52 e4 fe ff       	call   c0000780 <strcmp>
c001232e:	83 c4 10             	add    esp,0x10
c0012331:	85 c0                	test   eax,eax
c0012333:	74 09                	je     c001233e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012335:	43                   	inc    ebx
c0012336:	83 fb 3f             	cmp    ebx,0x3f
c0012339:	75 e0                	jne    c001231b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001233b:	83 cb ff             	or     ebx,0xffffffff
c001233e:	5a                   	pop    edx
c001233f:	89 d8                	mov    eax,ebx
c0012341:	5b                   	pop    ebx
c0012342:	5e                   	pop    esi
c0012343:	c3                   	ret    

c0012344 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012344:	55                   	push   ebp
c0012345:	31 c0                	xor    eax,eax
c0012347:	57                   	push   edi
c0012348:	56                   	push   esi
c0012349:	53                   	push   ebx
c001234a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001234e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012352:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012356:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001235a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001235c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001235f:	83 fd 1f             	cmp    ebp,0x1f
c0012362:	7f 0b                	jg     c001236f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012364:	0f b6 c2             	movzx  eax,dl
c0012367:	d3 e0                	shl    eax,cl
c0012369:	09 07                	or     DWORD PTR [edi],eax
c001236b:	b0 01                	mov    al,0x1
c001236d:	01 33                	add    DWORD PTR [ebx],esi
c001236f:	5b                   	pop    ebx
c0012370:	5e                   	pop    esi
c0012371:	5f                   	pop    edi
c0012372:	5d                   	pop    ebp
c0012373:	c3                   	ret    

c0012374 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012374:	57                   	push   edi
c0012375:	56                   	push   esi
c0012376:	53                   	push   ebx
c0012377:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001237b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001237f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012383:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012387:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012389:	7c 17                	jl     c00123a2 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001238b:	8b 17                	mov    edx,DWORD PTR [edi]
c001238d:	b8 01 00 00 00       	mov    eax,0x1
c0012392:	d3 e0                	shl    eax,cl
c0012394:	48                   	dec    eax
c0012395:	21 d0                	and    eax,edx
c0012397:	d3 ea                	shr    edx,cl
c0012399:	89 17                	mov    DWORD PTR [edi],edx
c001239b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001239d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00123a0:	eb 05                	jmp    c00123a7 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00123a2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123a5:	31 c0                	xor    eax,eax
c00123a7:	5b                   	pop    ebx
c00123a8:	5e                   	pop    esi
c00123a9:	5f                   	pop    edi
c00123aa:	c3                   	ret    

c00123ab <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00123ab:	83 ec 40             	sub    esp,0x40
c00123ae:	8d 44 24 09          	lea    eax,[esp+0x9]
c00123b2:	50                   	push   eax
c00123b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123bb:	e8 4d fa ff ff       	call   c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123c0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00123c4:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00123c8:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00123cc:	89 10                	mov    DWORD PTR [eax],edx
c00123ce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00123d1:	83 c4 4c             	add    esp,0x4c
c00123d4:	c3                   	ret    

c00123d5 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00123d5:	55                   	push   ebp
c00123d6:	57                   	push   edi
c00123d7:	56                   	push   esi
c00123d8:	53                   	push   ebx
c00123d9:	83 ec 40             	sub    esp,0x40
c00123dc:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00123e0:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00123e4:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00123e8:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00123ec:	53                   	push   ebx
c00123ed:	56                   	push   esi
c00123ee:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123f2:	e8 16 fa ff ff       	call   c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123f7:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00123fb:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00123ff:	83 c4 0c             	add    esp,0xc
c0012402:	53                   	push   ebx
c0012403:	56                   	push   esi
c0012404:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012408:	e8 24 fb ff ff       	call   c0011f31 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001240d:	83 c4 4c             	add    esp,0x4c
c0012410:	5b                   	pop    ebx
c0012411:	5e                   	pop    esi
c0012412:	5f                   	pop    edi
c0012413:	5d                   	pop    ebp
c0012414:	c3                   	ret    

c0012415 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012415:	55                   	push   ebp
c0012416:	57                   	push   edi
c0012417:	56                   	push   esi
c0012418:	31 f6                	xor    esi,esi
c001241a:	53                   	push   ebx
c001241b:	31 db                	xor    ebx,ebx
c001241d:	83 ec 40             	sub    esp,0x40
c0012420:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012428:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012430:	6a 12                	push   0x12
c0012432:	68 ee 00 00 00       	push   0xee
c0012437:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001243b:	e8 b0 e0 fe ff       	call   c00004f0 <memset>
c0012440:	83 c4 10             	add    esp,0x10
c0012443:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012447:	6a 08                	push   0x8
c0012449:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001244d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012451:	50                   	push   eax
c0012452:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012456:	55                   	push   ebp
c0012457:	57                   	push   edi
c0012458:	e8 e7 fe ff ff       	call   c0012344 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001245d:	83 c4 10             	add    esp,0x10
c0012460:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012464:	50                   	push   eax
c0012465:	6a 06                	push   0x6
c0012467:	55                   	push   ebp
c0012468:	57                   	push   edi
c0012469:	e8 06 ff ff ff       	call   c0012374 <CmGetShift(unsigned int*, int*, int, bool*)>
c001246e:	83 c4 10             	add    esp,0x10
c0012471:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012476:	74 07                	je     c001247f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012478:	46                   	inc    esi
c0012479:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001247d:	eb e1                	jmp    c0012460 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001247f:	43                   	inc    ebx
c0012480:	83 fb 12             	cmp    ebx,0x12
c0012483:	75 c2                	jne    c0012447 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012485:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012489:	31 f6                	xor    esi,esi
c001248b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001248e:	50                   	push   eax
c001248f:	50                   	push   eax
c0012490:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012495:	46                   	inc    esi
c0012496:	8d 04 85 e0 22 02 c0 	lea    eax,[eax*4-0x3ffddd20]
c001249d:	50                   	push   eax
c001249e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00124a2:	e8 c9 e3 fe ff       	call   c0000870 <strcat>
c00124a7:	83 c4 10             	add    esp,0x10
c00124aa:	83 fe 18             	cmp    esi,0x18
c00124ad:	75 df                	jne    c001248e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00124af:	83 c4 3c             	add    esp,0x3c
c00124b2:	31 c0                	xor    eax,eax
c00124b4:	5b                   	pop    ebx
c00124b5:	5e                   	pop    esi
c00124b6:	5f                   	pop    edi
c00124b7:	5d                   	pop    ebp
c00124b8:	c3                   	ret    

c00124b9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00124b9:	83 ec 40             	sub    esp,0x40
c00124bc:	8d 44 24 09          	lea    eax,[esp+0x9]
c00124c0:	50                   	push   eax
c00124c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124c9:	e8 3f f9 ff ff       	call   c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124ce:	58                   	pop    eax
c00124cf:	5a                   	pop    edx
c00124d0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00124d4:	8d 44 24 15          	lea    eax,[esp+0x15]
c00124d8:	50                   	push   eax
c00124d9:	e8 37 ff ff ff       	call   c0012415 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00124de:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00124e3:	83 c4 4c             	add    esp,0x4c
c00124e6:	c3                   	ret    

c00124e7 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00124e7:	55                   	push   ebp
c00124e8:	57                   	push   edi
c00124e9:	56                   	push   esi
c00124ea:	53                   	push   ebx
c00124eb:	31 db                	xor    ebx,ebx
c00124ed:	83 ec 70             	sub    esp,0x70
c00124f0:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00124f7:	6a 30                	push   0x30
c00124f9:	6a 00                	push   0x0
c00124fb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00124ff:	56                   	push   esi
c0012500:	e8 eb df fe ff       	call   c00004f0 <memset>
c0012505:	83 c4 10             	add    esp,0x10
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	57                   	push   edi
c001250c:	e8 6f e0 fe ff       	call   c0000580 <strlen>
c0012511:	83 c4 10             	add    esp,0x10
c0012514:	39 d8                	cmp    eax,ebx
c0012516:	76 16                	jbe    c001252e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012518:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001251c:	83 ec 0c             	sub    esp,0xc
c001251f:	50                   	push   eax
c0012520:	e8 3b e4 fe ff       	call   c0000960 <toupper>
c0012525:	83 c4 10             	add    esp,0x10
c0012528:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001252b:	43                   	inc    ebx
c001252c:	eb da                	jmp    c0012508 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001252e:	52                   	push   edx
c001252f:	31 db                	xor    ebx,ebx
c0012531:	6a 18                	push   0x18
c0012533:	31 ff                	xor    edi,edi
c0012535:	6a 3f                	push   0x3f
c0012537:	8d 44 24 24          	lea    eax,[esp+0x24]
c001253b:	50                   	push   eax
c001253c:	e8 af df fe ff       	call   c00004f0 <memset>
c0012541:	83 c4 10             	add    esp,0x10
c0012544:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012548:	8d 74 24 10          	lea    esi,[esp+0x10]
c001254c:	84 c0                	test   al,al
c001254e:	0f 84 af 00 00 00    	je     c0012603 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012554:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012558:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001255b:	83 ec 0c             	sub    esp,0xc
c001255e:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012563:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012567:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001256b:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0012570:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012574:	56                   	push   esi
c0012575:	e8 06 e0 fe ff       	call   c0000580 <strlen>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	85 c0                	test   eax,eax
c001257f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012583:	74 0b                	je     c0012590 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012585:	50                   	push   eax
c0012586:	6a 01                	push   0x1
c0012588:	56                   	push   esi
c0012589:	8d 44 24 20          	lea    eax,[esp+0x20]
c001258d:	50                   	push   eax
c001258e:	eb 0a                	jmp    c001259a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012590:	50                   	push   eax
c0012591:	6a 00                	push   0x0
c0012593:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012597:	50                   	push   eax
c0012598:	6a 00                	push   0x0
c001259a:	e8 44 fd ff ff       	call   c00122e3 <CmGetMatch(char*, char*, bool, bool*)>
c001259f:	83 c4 10             	add    esp,0x10
c00125a2:	83 f8 ff             	cmp    eax,0xffffffff
c00125a5:	75 1a                	jne    c00125c1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00125a7:	83 ec 0c             	sub    esp,0xc
c00125aa:	68 a9 0e 02 c0       	push   0xc0020ea9
c00125af:	e8 99 e2 ff ff       	call   c001084d <KePanic(char const*)>
c00125b4:	83 c4 10             	add    esp,0x10
c00125b7:	b8 02 00 00 00       	mov    eax,0x2
c00125bc:	e9 bb 00 00 00       	jmp    c001267c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125c1:	83 ff 18             	cmp    edi,0x18
c00125c4:	75 1a                	jne    c00125e0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00125c6:	83 ec 0c             	sub    esp,0xc
c00125c9:	68 be 0e 02 c0       	push   0xc0020ebe
c00125ce:	e8 7a e2 ff ff       	call   c001084d <KePanic(char const*)>
c00125d3:	83 c4 10             	add    esp,0x10
c00125d6:	b8 01 00 00 00       	mov    eax,0x1
c00125db:	e9 9c 00 00 00       	jmp    c001267c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125e0:	47                   	inc    edi
c00125e1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00125e6:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00125ea:	0f 45 dd             	cmovne ebx,ebp
c00125ed:	83 ec 0c             	sub    esp,0xc
c00125f0:	56                   	push   esi
c00125f1:	e8 8a df fe ff       	call   c0000580 <strlen>
c00125f6:	83 c4 10             	add    esp,0x10
c00125f9:	85 c0                	test   eax,eax
c00125fb:	74 06                	je     c0012603 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00125fd:	43                   	inc    ebx
c00125fe:	e9 41 ff ff ff       	jmp    c0012544 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012603:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001260b:	31 db                	xor    ebx,ebx
c001260d:	31 ff                	xor    edi,edi
c001260f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012617:	50                   	push   eax
c0012618:	6a 12                	push   0x12
c001261a:	68 ee 00 00 00       	push   0xee
c001261f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012626:	e8 c5 de fe ff       	call   c00004f0 <memset>
c001262b:	83 c4 10             	add    esp,0x10
c001262e:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012632:	83 fb 17             	cmp    ebx,0x17
c0012635:	7e 26                	jle    c001265d <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012637:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001263b:	50                   	push   eax
c001263c:	6a 08                	push   0x8
c001263e:	55                   	push   ebp
c001263f:	56                   	push   esi
c0012640:	e8 2f fd ff ff       	call   c0012374 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012645:	83 c4 10             	add    esp,0x10
c0012648:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001264d:	74 26                	je     c0012675 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001264f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012656:	4b                   	dec    ebx
c0012657:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001265a:	47                   	inc    edi
c001265b:	eb 1c                	jmp    c0012679 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001265d:	6a 06                	push   0x6
c001265f:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012664:	50                   	push   eax
c0012665:	55                   	push   ebp
c0012666:	56                   	push   esi
c0012667:	e8 d8 fc ff ff       	call   c0012344 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001266c:	83 c4 10             	add    esp,0x10
c001266f:	84 c0                	test   al,al
c0012671:	75 06                	jne    c0012679 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012673:	eb c2                	jmp    c0012637 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012675:	31 c0                	xor    eax,eax
c0012677:	eb 03                	jmp    c001267c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012679:	43                   	inc    ebx
c001267a:	eb b2                	jmp    c001262e <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c001267c:	83 c4 6c             	add    esp,0x6c
c001267f:	5b                   	pop    ebx
c0012680:	5e                   	pop    esi
c0012681:	5f                   	pop    edi
c0012682:	5d                   	pop    ebp
c0012683:	c3                   	ret    

c0012684 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012684:	53                   	push   ebx
c0012685:	83 ec 3c             	sub    esp,0x3c
c0012688:	6a 2b                	push   0x2b
c001268a:	6a 00                	push   0x0
c001268c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012690:	53                   	push   ebx
c0012691:	e8 5a de fe ff       	call   c00004f0 <memset>
c0012696:	58                   	pop    eax
c0012697:	5a                   	pop    edx
c0012698:	8d 44 24 11          	lea    eax,[esp+0x11]
c001269c:	50                   	push   eax
c001269d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00126a1:	e8 41 fe ff ff       	call   c00124e7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126a6:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00126ab:	83 c4 0c             	add    esp,0xc
c00126ae:	6a 15                	push   0x15
c00126b0:	6a 00                	push   0x0
c00126b2:	8d 44 24 27          	lea    eax,[esp+0x27]
c00126b6:	50                   	push   eax
c00126b7:	e8 34 de fe ff       	call   c00004f0 <memset>
c00126bc:	53                   	push   ebx
c00126bd:	6a 00                	push   0x0
c00126bf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126c7:	e8 eb f9 ff ff       	call   c00120b7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00126cc:	83 c4 58             	add    esp,0x58
c00126cf:	5b                   	pop    ebx
c00126d0:	c3                   	ret    

c00126d1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00126d1:	56                   	push   esi
c00126d2:	53                   	push   ebx
c00126d3:	83 ec 48             	sub    esp,0x48
c00126d6:	6a 12                	push   0x12
c00126d8:	68 ff 00 00 00       	push   0xff
c00126dd:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00126e1:	56                   	push   esi
c00126e2:	e8 09 de fe ff       	call   c00004f0 <memset>
c00126e7:	5a                   	pop    edx
c00126e8:	59                   	pop    ecx
c00126e9:	56                   	push   esi
c00126ea:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00126ee:	e8 f4 fd ff ff       	call   c00124e7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126f3:	83 c4 10             	add    esp,0x10
c00126f6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00126fa:	85 db                	test   ebx,ebx
c00126fc:	74 42                	je     c0012740 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00126fe:	50                   	push   eax
c00126ff:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012703:	50                   	push   eax
c0012704:	53                   	push   ebx
c0012705:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012709:	e8 ff f6 ff ff       	call   c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001270e:	83 c4 0c             	add    esp,0xc
c0012711:	6a 12                	push   0x12
c0012713:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012717:	50                   	push   eax
c0012718:	56                   	push   esi
c0012719:	e8 62 dc fe ff       	call   c0000380 <memcmp>
c001271e:	83 c4 10             	add    esp,0x10
c0012721:	85 c0                	test   eax,eax
c0012723:	74 1e                	je     c0012743 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012725:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001272a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001272f:	c1 e3 08             	shl    ebx,0x8
c0012732:	09 d8                	or     eax,ebx
c0012734:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012739:	c1 e3 10             	shl    ebx,0x10
c001273c:	09 c3                	or     ebx,eax
c001273e:	eb ba                	jmp    c00126fa <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012740:	83 cb ff             	or     ebx,0xffffffff
c0012743:	83 c4 44             	add    esp,0x44
c0012746:	89 d8                	mov    eax,ebx
c0012748:	5b                   	pop    ebx
c0012749:	5e                   	pop    esi
c001274a:	c3                   	ret    

c001274b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001274b:	57                   	push   edi
c001274c:	56                   	push   esi
c001274d:	53                   	push   ebx
c001274e:	83 ec 34             	sub    esp,0x34
c0012751:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012755:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012759:	6a 2b                	push   0x2b
c001275b:	6a 00                	push   0x0
c001275d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012761:	53                   	push   ebx
c0012762:	e8 89 dd fe ff       	call   c00004f0 <memset>
c0012767:	58                   	pop    eax
c0012768:	5a                   	pop    edx
c0012769:	8d 44 24 11          	lea    eax,[esp+0x11]
c001276d:	50                   	push   eax
c001276e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012772:	e8 70 fd ff ff       	call   c00124e7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012777:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c001277b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001277f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012783:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012787:	53                   	push   ebx
c0012788:	6a 00                	push   0x0
c001278a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001278e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012792:	e8 20 f9 ff ff       	call   c00120b7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012797:	83 c4 50             	add    esp,0x50
c001279a:	5b                   	pop    ebx
c001279b:	5e                   	pop    esi
c001279c:	5f                   	pop    edi
c001279d:	c3                   	ret    

c001279e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001279e:	55                   	push   ebp
c001279f:	57                   	push   edi
c00127a0:	56                   	push   esi
c00127a1:	53                   	push   ebx
c00127a2:	83 ec 40             	sub    esp,0x40
c00127a5:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00127a9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00127ad:	6a 2b                	push   0x2b
c00127af:	6a 00                	push   0x0
c00127b1:	8d 74 24 11          	lea    esi,[esp+0x11]
c00127b5:	56                   	push   esi
c00127b6:	e8 35 dd fe ff       	call   c00004f0 <memset>
c00127bb:	5f                   	pop    edi
c00127bc:	89 ef                	mov    edi,ebp
c00127be:	58                   	pop    eax
c00127bf:	8d 44 24 11          	lea    eax,[esp+0x11]
c00127c3:	50                   	push   eax
c00127c4:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127c8:	e8 1a fd ff ff       	call   c00124e7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127cd:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00127d2:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00127d7:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00127dc:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00127e1:	83 c4 10             	add    esp,0x10
c00127e4:	85 ed                	test   ebp,ebp
c00127e6:	74 14                	je     c00127fc <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127e8:	51                   	push   ecx
c00127e9:	51                   	push   ecx
c00127ea:	57                   	push   edi
c00127eb:	53                   	push   ebx
c00127ec:	e8 0e f7 ff ff       	call   c0011eff <CmGetNext(Reghive_Tag*, int)>
c00127f1:	83 c4 10             	add    esp,0x10
c00127f4:	85 c0                	test   eax,eax
c00127f6:	74 04                	je     c00127fc <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127f8:	89 c7                	mov    edi,eax
c00127fa:	eb e8                	jmp    c00127e4 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00127fc:	56                   	push   esi
c00127fd:	6a 00                	push   0x0
c00127ff:	57                   	push   edi
c0012800:	53                   	push   ebx
c0012801:	e8 b1 f8 ff ff       	call   c00120b7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012806:	83 c4 0c             	add    esp,0xc
c0012809:	56                   	push   esi
c001280a:	50                   	push   eax
c001280b:	89 c7                	mov    edi,eax
c001280d:	53                   	push   ebx
c001280e:	e8 fa f5 ff ff       	call   c0011e0d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012813:	58                   	pop    eax
c0012814:	5a                   	pop    edx
c0012815:	6a 6c                	push   0x6c
c0012817:	6a 00                	push   0x0
c0012819:	6a 00                	push   0x0
c001281b:	68 cf 0e 02 c0       	push   0xc0020ecf
c0012820:	57                   	push   edi
c0012821:	53                   	push   ebx
c0012822:	e8 24 ff ff ff       	call   c001274b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012827:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001282b:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001282f:	c1 e8 10             	shr    eax,0x10
c0012832:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012836:	83 c4 1c             	add    esp,0x1c
c0012839:	56                   	push   esi
c001283a:	57                   	push   edi
c001283b:	53                   	push   ebx
c001283c:	e8 f0 f6 ff ff       	call   c0011f31 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012841:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012846:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001284b:	c1 e0 08             	shl    eax,0x8
c001284e:	09 c2                	or     edx,eax
c0012850:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012855:	83 c4 4c             	add    esp,0x4c
c0012858:	5b                   	pop    ebx
c0012859:	5e                   	pop    esi
c001285a:	c1 e0 10             	shl    eax,0x10
c001285d:	09 d0                	or     eax,edx
c001285f:	5f                   	pop    edi
c0012860:	5d                   	pop    ebp
c0012861:	c3                   	ret    

c0012862 <zStrtok(char*, char const*)>:
c0012862:	55                   	push   ebp
c0012863:	57                   	push   edi
c0012864:	56                   	push   esi
c0012865:	53                   	push   ebx
c0012866:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001286a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001286e:	85 db                	test   ebx,ebx
c0012870:	74 2f                	je     c00128a1 <zStrtok(char*, char const*)+0x3f>
c0012872:	85 c0                	test   eax,eax
c0012874:	75 09                	jne    c001287f <zStrtok(char*, char const*)+0x1d>
c0012876:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c001287b:	85 c0                	test   eax,eax
c001287d:	74 50                	je     c00128cf <zStrtok(char*, char const*)+0x6d>
c001287f:	31 c9                	xor    ecx,ecx
c0012881:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012885:	74 03                	je     c001288a <zStrtok(char*, char const*)+0x28>
c0012887:	41                   	inc    ecx
c0012888:	eb f7                	jmp    c0012881 <zStrtok(char*, char const*)+0x1f>
c001288a:	31 d2                	xor    edx,edx
c001288c:	39 ca                	cmp    edx,ecx
c001288e:	74 15                	je     c00128a5 <zStrtok(char*, char const*)+0x43>
c0012890:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012894:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012897:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001289a:	39 ee                	cmp    esi,ebp
c001289c:	74 13                	je     c00128b1 <zStrtok(char*, char const*)+0x4f>
c001289e:	42                   	inc    edx
c001289f:	eb eb                	jmp    c001288c <zStrtok(char*, char const*)+0x2a>
c00128a1:	31 c0                	xor    eax,eax
c00128a3:	eb 2a                	jmp    c00128cf <zStrtok(char*, char const*)+0x6d>
c00128a5:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c00128af:	eb 1e                	jmp    c00128cf <zStrtok(char*, char const*)+0x6d>
c00128b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00128b4:	39 ce                	cmp    esi,ecx
c00128b6:	75 0a                	jne    c00128c2 <zStrtok(char*, char const*)+0x60>
c00128b8:	40                   	inc    eax
c00128b9:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c00128be:	89 d8                	mov    eax,ebx
c00128c0:	eb 0d                	jmp    c00128cf <zStrtok(char*, char const*)+0x6d>
c00128c2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00128c5:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00128c9:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c00128cf:	5b                   	pop    ebx
c00128d0:	5e                   	pop    esi
c00128d1:	5f                   	pop    edi
c00128d2:	5d                   	pop    ebp
c00128d3:	c3                   	ret    

c00128d4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00128d4:	57                   	push   edi
c00128d5:	56                   	push   esi
c00128d6:	53                   	push   ebx
c00128d7:	81 ec 08 01 00 00    	sub    esp,0x108
c00128dd:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00128e4:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00128eb:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00128ef:	53                   	push   ebx
c00128f0:	e8 5b dd fe ff       	call   c0000650 <strcpy>
c00128f5:	59                   	pop    ecx
c00128f6:	5e                   	pop    esi
c00128f7:	68 33 12 02 c0       	push   0xc0021233
c00128fc:	53                   	push   ebx
c00128fd:	bb 01 00 00 00       	mov    ebx,0x1
c0012902:	e8 5b ff ff ff       	call   c0012862 <zStrtok(char*, char const*)>
c0012907:	83 c4 10             	add    esp,0x10
c001290a:	85 c0                	test   eax,eax
c001290c:	74 3b                	je     c0012949 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001290e:	52                   	push   edx
c001290f:	50                   	push   eax
c0012910:	6a 01                	push   0x1
c0012912:	57                   	push   edi
c0012913:	e8 b9 fd ff ff       	call   c00126d1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012918:	59                   	pop    ecx
c0012919:	5e                   	pop    esi
c001291a:	89 c3                	mov    ebx,eax
c001291c:	68 33 12 02 c0       	push   0xc0021233
c0012921:	6a 00                	push   0x0
c0012923:	e8 3a ff ff ff       	call   c0012862 <zStrtok(char*, char const*)>
c0012928:	83 c4 10             	add    esp,0x10
c001292b:	85 c0                	test   eax,eax
c001292d:	89 c6                	mov    esi,eax
c001292f:	74 18                	je     c0012949 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012931:	52                   	push   edx
c0012932:	52                   	push   edx
c0012933:	53                   	push   ebx
c0012934:	57                   	push   edi
c0012935:	e8 86 f5 ff ff       	call   c0011ec0 <CmEnterDirectory(Reghive_Tag*, int)>
c001293a:	83 c4 10             	add    esp,0x10
c001293d:	83 f8 ff             	cmp    eax,0xffffffff
c0012940:	89 c3                	mov    ebx,eax
c0012942:	74 05                	je     c0012949 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012944:	50                   	push   eax
c0012945:	56                   	push   esi
c0012946:	53                   	push   ebx
c0012947:	eb c9                	jmp    c0012912 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012949:	81 c4 00 01 00 00    	add    esp,0x100
c001294f:	89 d8                	mov    eax,ebx
c0012951:	5b                   	pop    ebx
c0012952:	5e                   	pop    esi
c0012953:	5f                   	pop    edi
c0012954:	c3                   	ret    

c0012955 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012955:	55                   	push   ebp
c0012956:	57                   	push   edi
c0012957:	56                   	push   esi
c0012958:	53                   	push   ebx
c0012959:	83 ec 5c             	sub    esp,0x5c
c001295c:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012960:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012964:	85 db                	test   ebx,ebx
c0012966:	0f 8e 84 00 00 00    	jle    c00129f0 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001296c:	57                   	push   edi
c001296d:	31 ed                	xor    ebp,ebp
c001296f:	6a 32                	push   0x32
c0012971:	6a 00                	push   0x0
c0012973:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012977:	57                   	push   edi
c0012978:	e8 73 db fe ff       	call   c00004f0 <memset>
c001297d:	83 c4 0c             	add    esp,0xc
c0012980:	57                   	push   edi
c0012981:	53                   	push   ebx
c0012982:	56                   	push   esi
c0012983:	e8 31 fb ff ff       	call   c00124b9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012988:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001298c:	83 c4 10             	add    esp,0x10
c001298f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012993:	7d 13                	jge    c00129a8 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012995:	83 ec 0c             	sub    esp,0xc
c0012998:	45                   	inc    ebp
c0012999:	68 a4 15 02 c0       	push   0xc00215a4
c001299e:	e8 e0 7f ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00129a3:	83 c4 10             	add    esp,0x10
c00129a6:	eb e7                	jmp    c001298f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00129a8:	51                   	push   ecx
c00129a9:	57                   	push   edi
c00129aa:	53                   	push   ebx
c00129ab:	68 d5 0e 02 c0       	push   0xc0020ed5
c00129b0:	e8 ce 7f ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00129b5:	83 c4 10             	add    esp,0x10
c00129b8:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00129bd:	75 1e                	jne    c00129dd <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00129bf:	52                   	push   edx
c00129c0:	52                   	push   edx
c00129c1:	53                   	push   ebx
c00129c2:	56                   	push   esi
c00129c3:	e8 f8 f4 ff ff       	call   c0011ec0 <CmEnterDirectory(Reghive_Tag*, int)>
c00129c8:	83 c4 0c             	add    esp,0xc
c00129cb:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00129cf:	8d 51 04             	lea    edx,[ecx+0x4]
c00129d2:	52                   	push   edx
c00129d3:	50                   	push   eax
c00129d4:	56                   	push   esi
c00129d5:	e8 7b ff ff ff       	call   c0012955 <CmDisplayTree(Reghive_Tag*, int, int)>
c00129da:	83 c4 10             	add    esp,0x10
c00129dd:	50                   	push   eax
c00129de:	50                   	push   eax
c00129df:	53                   	push   ebx
c00129e0:	56                   	push   esi
c00129e1:	e8 19 f5 ff ff       	call   c0011eff <CmGetNext(Reghive_Tag*, int)>
c00129e6:	83 c4 10             	add    esp,0x10
c00129e9:	89 c3                	mov    ebx,eax
c00129eb:	e9 74 ff ff ff       	jmp    c0012964 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00129f0:	83 c4 5c             	add    esp,0x5c
c00129f3:	5b                   	pop    ebx
c00129f4:	5e                   	pop    esi
c00129f5:	5f                   	pop    edi
c00129f6:	5d                   	pop    ebp
c00129f7:	c3                   	ret    

c00129f8 <CmSplitFinalSlashInPlace(char*)>:
c00129f8:	53                   	push   ebx
c00129f9:	83 ec 14             	sub    esp,0x14
c00129fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012a00:	53                   	push   ebx
c0012a01:	e8 7a db fe ff       	call   c0000580 <strlen>
c0012a06:	83 c4 10             	add    esp,0x10
c0012a09:	48                   	dec    eax
c0012a0a:	85 c0                	test   eax,eax
c0012a0c:	74 15                	je     c0012a23 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012a0e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a12:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012a15:	75 09                	jne    c0012a20 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012a17:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012a1a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012a1e:	eb 05                	jmp    c0012a25 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012a20:	48                   	dec    eax
c0012a21:	eb e7                	jmp    c0012a0a <CmSplitFinalSlashInPlace(char*)+0x12>
c0012a23:	31 c0                	xor    eax,eax
c0012a25:	83 c4 08             	add    esp,0x8
c0012a28:	5b                   	pop    ebx
c0012a29:	c3                   	ret    

c0012a2a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012a2a:	55                   	push   ebp
c0012a2b:	57                   	push   edi
c0012a2c:	56                   	push   esi
c0012a2d:	53                   	push   ebx
c0012a2e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012a34:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012a3b:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0012a3e:	8d 43 01             	lea    eax,[ebx+0x1]
c0012a41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a45:	89 f0                	mov    eax,esi
c0012a47:	3c 40                	cmp    al,0x40
c0012a49:	75 1b                	jne    c0012a66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0012a4b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012a4e:	85 c0                	test   eax,eax
c0012a50:	74 08                	je     c0012a5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012a52:	83 f8 3a             	cmp    eax,0x3a
c0012a55:	74 03                	je     c0012a5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012a57:	43                   	inc    ebx
c0012a58:	eb f1                	jmp    c0012a4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0012a5a:	85 c0                	test   eax,eax
c0012a5c:	0f 84 45 01 00 00    	je     c0012ba7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a62:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012a65:	43                   	inc    ebx
c0012a66:	50                   	push   eax
c0012a67:	6a 40                	push   0x40
c0012a69:	6a 00                	push   0x0
c0012a6b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a6f:	50                   	push   eax
c0012a70:	e8 7b da fe ff       	call   c00004f0 <memset>
c0012a75:	89 f1                	mov    ecx,esi
c0012a77:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a7e:	31 c0                	xor    eax,eax
c0012a80:	83 c4 10             	add    esp,0x10
c0012a83:	0f be f1             	movsx  esi,cl
c0012a86:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012a89:	85 d2                	test   edx,edx
c0012a8b:	89 d1                	mov    ecx,edx
c0012a8d:	0f 84 14 01 00 00    	je     c0012ba7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a93:	3d c7 00 00 00       	cmp    eax,0xc7
c0012a98:	0f 8f 09 01 00 00    	jg     c0012ba7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a9e:	83 fa 0a             	cmp    edx,0xa
c0012aa1:	0f 85 f1 00 00 00    	jne    c0012b98 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0012aa7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012aac:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012ab1:	89 c8                	mov    eax,ecx
c0012ab3:	a8 df                	test   al,0xdf
c0012ab5:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012aba:	83 f9 23             	cmp    ecx,0x23
c0012abd:	0f 94 c2             	sete   dl
c0012ac0:	89 d5                	mov    ebp,edx
c0012ac2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ac6:	09 ea                	or     edx,ebp
c0012ac8:	80 e2 01             	and    dl,0x1
c0012acb:	75 47                	jne    c0012b14 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012acd:	83 e8 09             	sub    eax,0x9
c0012ad0:	3c 01                	cmp    al,0x1
c0012ad2:	76 40                	jbe    c0012b14 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012ad4:	83 f9 5b             	cmp    ecx,0x5b
c0012ad7:	75 42                	jne    c0012b1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012ad9:	83 fe 40             	cmp    esi,0x40
c0012adc:	75 36                	jne    c0012b14 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012ade:	83 ec 0c             	sub    esp,0xc
c0012ae1:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012ae5:	55                   	push   ebp
c0012ae6:	e8 95 da fe ff       	call   c0000580 <strlen>
c0012aeb:	83 c4 10             	add    esp,0x10
c0012aee:	83 f8 3f             	cmp    eax,0x3f
c0012af1:	0f 87 b0 00 00 00    	ja     c0012ba7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012af7:	50                   	push   eax
c0012af8:	50                   	push   eax
c0012af9:	55                   	push   ebp
c0012afa:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012afe:	55                   	push   ebp
c0012aff:	e8 4c db fe ff       	call   c0000650 <strcpy>
c0012b04:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b07:	e8 74 da fe ff       	call   c0000580 <strlen>
c0012b0c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012b11:	83 c4 10             	add    esp,0x10
c0012b14:	31 d2                	xor    edx,edx
c0012b16:	e9 84 00 00 00       	jmp    c0012b9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0012b1b:	83 fe 40             	cmp    esi,0x40
c0012b1e:	74 06                	je     c0012b26 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0012b20:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b24:	eb 19                	jmp    c0012b3f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012b26:	51                   	push   ecx
c0012b27:	51                   	push   ecx
c0012b28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012b2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b30:	50                   	push   eax
c0012b31:	e8 4a dc fe ff       	call   c0000780 <strcmp>
c0012b36:	83 c4 10             	add    esp,0x10
c0012b39:	85 c0                	test   eax,eax
c0012b3b:	75 d7                	jne    c0012b14 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012b3d:	eb e1                	jmp    c0012b20 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0012b3f:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012b42:	85 c9                	test   ecx,ecx
c0012b44:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012b49:	83 f9 3d             	cmp    ecx,0x3d
c0012b4c:	0f 94 c0             	sete   al
c0012b4f:	89 c5                	mov    ebp,eax
c0012b51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b55:	09 e8                	or     eax,ebp
c0012b57:	a8 01                	test   al,0x1
c0012b59:	89 c5                	mov    ebp,eax
c0012b5b:	75 03                	jne    c0012b60 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0012b5d:	42                   	inc    edx
c0012b5e:	eb df                	jmp    c0012b3f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012b60:	85 c9                	test   ecx,ecx
c0012b62:	74 43                	je     c0012ba7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012b64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b68:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012b6b:	52                   	push   edx
c0012b6c:	52                   	push   edx
c0012b6d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b71:	50                   	push   eax
c0012b72:	53                   	push   ebx
c0012b73:	e8 08 dc fe ff       	call   c0000780 <strcmp>
c0012b78:	83 c4 10             	add    esp,0x10
c0012b7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b7f:	85 c0                	test   eax,eax
c0012b81:	75 91                	jne    c0012b14 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012b83:	50                   	push   eax
c0012b84:	42                   	inc    edx
c0012b85:	50                   	push   eax
c0012b86:	52                   	push   edx
c0012b87:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012b8e:	e8 bd da fe ff       	call   c0000650 <strcpy>
c0012b93:	83 c4 10             	add    esp,0x10
c0012b96:	eb 11                	jmp    c0012ba9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012b98:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012b9c:	8d 50 01             	lea    edx,[eax+0x1]
c0012b9f:	47                   	inc    edi
c0012ba0:	89 d0                	mov    eax,edx
c0012ba2:	e9 df fe ff ff       	jmp    c0012a86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0012ba7:	31 ed                	xor    ebp,ebp
c0012ba9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012baf:	89 e8                	mov    eax,ebp
c0012bb1:	5b                   	pop    ebx
c0012bb2:	5e                   	pop    esi
c0012bb3:	5f                   	pop    edi
c0012bb4:	5d                   	pop    ebp
c0012bb5:	c3                   	ret    

c0012bb6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012bb6:	57                   	push   edi
c0012bb7:	56                   	push   esi
c0012bb8:	53                   	push   ebx
c0012bb9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012bbf:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012bc6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012bcd:	53                   	push   ebx
c0012bce:	e8 ad d9 fe ff       	call   c0000580 <strlen>
c0012bd3:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bd6:	89 c7                	mov    edi,eax
c0012bd8:	e8 a3 d9 fe ff       	call   c0000580 <strlen>
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012be4:	3d ff 00 00 00       	cmp    eax,0xff
c0012be9:	0f 87 d3 00 00 00    	ja     c0012cc2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012bef:	57                   	push   edi
c0012bf0:	57                   	push   edi
c0012bf1:	56                   	push   esi
c0012bf2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012bf6:	56                   	push   esi
c0012bf7:	e8 54 da fe ff       	call   c0000650 <strcpy>
c0012bfc:	58                   	pop    eax
c0012bfd:	5a                   	pop    edx
c0012bfe:	68 33 12 02 c0       	push   0xc0021233
c0012c03:	56                   	push   esi
c0012c04:	e8 67 dc fe ff       	call   c0000870 <strcat>
c0012c09:	59                   	pop    ecx
c0012c0a:	5f                   	pop    edi
c0012c0b:	53                   	push   ebx
c0012c0c:	56                   	push   esi
c0012c0d:	e8 5e dc fe ff       	call   c0000870 <strcat>
c0012c12:	58                   	pop    eax
c0012c13:	5a                   	pop    edx
c0012c14:	68 df 0e 02 c0       	push   0xc0020edf
c0012c19:	56                   	push   esi
c0012c1a:	e8 51 dc fe ff       	call   c0000870 <strcat>
c0012c1f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c26:	e8 a0 4e ff ff       	call   c0007acb <malloc>
c0012c2b:	83 c4 0c             	add    esp,0xc
c0012c2e:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012c34:	56                   	push   esi
c0012c35:	50                   	push   eax
c0012c36:	89 c3                	mov    ebx,eax
c0012c38:	e8 ef 82 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c0012c3d:	83 c4 10             	add    esp,0x10
c0012c40:	85 db                	test   ebx,ebx
c0012c42:	74 7e                	je     c0012cc2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c44:	51                   	push   ecx
c0012c45:	51                   	push   ecx
c0012c46:	6a 01                	push   0x1
c0012c48:	53                   	push   ebx
c0012c49:	e8 9a 83 ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c0012c4e:	83 c4 10             	add    esp,0x10
c0012c51:	85 c0                	test   eax,eax
c0012c53:	74 08                	je     c0012c5d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012c55:	83 ec 0c             	sub    esp,0xc
c0012c58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c5a:	53                   	push   ebx
c0012c5b:	eb 5f                	jmp    c0012cbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012c5d:	52                   	push   edx
c0012c5e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012c62:	50                   	push   eax
c0012c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c67:	50                   	push   eax
c0012c68:	53                   	push   ebx
c0012c69:	e8 26 86 ff ff       	call   c000b294 <File::stat(unsigned long long*, bool*)>
c0012c6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c72:	83 c4 10             	add    esp,0x10
c0012c75:	89 c1                	mov    ecx,eax
c0012c77:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012c7b:	74 31                	je     c0012cae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c7d:	83 ec 0c             	sub    esp,0xc
c0012c80:	50                   	push   eax
c0012c81:	e8 45 4e ff ff       	call   c0007acb <malloc>
c0012c86:	89 c6                	mov    esi,eax
c0012c88:	58                   	pop    eax
c0012c89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c8b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012c8f:	52                   	push   edx
c0012c90:	56                   	push   esi
c0012c91:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c95:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c99:	53                   	push   ebx
c0012c9a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c9d:	83 c4 20             	add    esp,0x20
c0012ca0:	85 c0                	test   eax,eax
c0012ca2:	75 0a                	jne    c0012cae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012ca4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ca8:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012cac:	74 18                	je     c0012cc6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012cae:	83 ec 0c             	sub    esp,0xc
c0012cb1:	53                   	push   ebx
c0012cb2:	e8 8f 83 ff ff       	call   c000b046 <File::close()>
c0012cb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cbc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cbf:	83 c4 10             	add    esp,0x10
c0012cc2:	31 c0                	xor    eax,eax
c0012cc4:	eb 3b                	jmp    c0012d01 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012cc6:	83 ec 0c             	sub    esp,0xc
c0012cc9:	53                   	push   ebx
c0012cca:	e8 77 83 ff ff       	call   c000b046 <File::close()>
c0012ccf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cd4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cd7:	83 c4 0c             	add    esp,0xc
c0012cda:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012ce1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012ce8:	56                   	push   esi
c0012ce9:	e8 3c fd ff ff       	call   c0012a2a <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012cee:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cf1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012cf5:	e8 e1 4d ff ff       	call   c0007adb <free>
c0012cfa:	83 c4 10             	add    esp,0x10
c0012cfd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012d01:	81 c4 20 01 00 00    	add    esp,0x120
c0012d07:	5b                   	pop    ebx
c0012d08:	5e                   	pop    esi
c0012d09:	5f                   	pop    edi
c0012d0a:	c3                   	ret    

c0012d0b <Reg::getLine(char*, char*, char*)>:
c0012d0b:	57                   	push   edi
c0012d0c:	56                   	push   esi
c0012d0d:	53                   	push   ebx
c0012d0e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012d12:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d1a:	57                   	push   edi
c0012d1b:	56                   	push   esi
c0012d1c:	53                   	push   ebx
c0012d1d:	68 e4 0e 02 c0       	push   0xc0020ee4
c0012d22:	e8 8f fe ff ff       	call   c0012bb6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d27:	83 c4 10             	add    esp,0x10
c0012d2a:	84 c0                	test   al,al
c0012d2c:	75 10                	jne    c0012d3e <Reg::getLine(char*, char*, char*)+0x33>
c0012d2e:	57                   	push   edi
c0012d2f:	56                   	push   esi
c0012d30:	53                   	push   ebx
c0012d31:	68 09 0f 02 c0       	push   0xc0020f09
c0012d36:	e8 7b fe ff ff       	call   c0012bb6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d3b:	83 c4 10             	add    esp,0x10
c0012d3e:	5b                   	pop    ebx
c0012d3f:	5e                   	pop    esi
c0012d40:	5f                   	pop    edi
c0012d41:	c3                   	ret    

c0012d42 <Reg::readInt(char*, char*, int*)>:
c0012d42:	55                   	push   ebp
c0012d43:	57                   	push   edi
c0012d44:	56                   	push   esi
c0012d45:	53                   	push   ebx
c0012d46:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012d4c:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012d50:	55                   	push   ebp
c0012d51:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d58:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d5f:	e8 a7 ff ff ff       	call   c0012d0b <Reg::getLine(char*, char*, char*)>
c0012d64:	83 c4 10             	add    esp,0x10
c0012d67:	84 c0                	test   al,al
c0012d69:	0f 84 b6 00 00 00    	je     c0012e25 <Reg::readInt(char*, char*, int*)+0xe3>
c0012d6f:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012d74:	83 fa 2b             	cmp    edx,0x2b
c0012d77:	74 0c                	je     c0012d85 <Reg::readInt(char*, char*, int*)+0x43>
c0012d79:	83 fa 2d             	cmp    edx,0x2d
c0012d7c:	75 0e                	jne    c0012d8c <Reg::readInt(char*, char*, int*)+0x4a>
c0012d7e:	ba 01 00 00 00       	mov    edx,0x1
c0012d83:	eb 0b                	jmp    c0012d90 <Reg::readInt(char*, char*, int*)+0x4e>
c0012d85:	ba 01 00 00 00       	mov    edx,0x1
c0012d8a:	eb 02                	jmp    c0012d8e <Reg::readInt(char*, char*, int*)+0x4c>
c0012d8c:	31 d2                	xor    edx,edx
c0012d8e:	31 c0                	xor    eax,eax
c0012d90:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012d95:	be 0a 00 00 00       	mov    esi,0xa
c0012d9a:	75 21                	jne    c0012dbd <Reg::readInt(char*, char*, int*)+0x7b>
c0012d9c:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012da1:	83 f9 78             	cmp    ecx,0x78
c0012da4:	75 0a                	jne    c0012db0 <Reg::readInt(char*, char*, int*)+0x6e>
c0012da6:	83 c2 02             	add    edx,0x2
c0012da9:	be 10 00 00 00       	mov    esi,0x10
c0012dae:	eb 0d                	jmp    c0012dbd <Reg::readInt(char*, char*, int*)+0x7b>
c0012db0:	83 f9 62             	cmp    ecx,0x62
c0012db3:	75 08                	jne    c0012dbd <Reg::readInt(char*, char*, int*)+0x7b>
c0012db5:	83 c2 02             	add    edx,0x2
c0012db8:	be 02 00 00 00       	mov    esi,0x2
c0012dbd:	01 d5                	add    ebp,edx
c0012dbf:	31 d2                	xor    edx,edx
c0012dc1:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012dc5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012dc9:	85 c9                	test   ecx,ecx
c0012dcb:	0f 94 c3             	sete   bl
c0012dce:	83 f9 0d             	cmp    ecx,0xd
c0012dd1:	89 df                	mov    edi,ebx
c0012dd3:	0f 94 c3             	sete   bl
c0012dd6:	09 df                	or     edi,ebx
c0012dd8:	89 fb                	mov    ebx,edi
c0012dda:	83 e7 01             	and    edi,0x1
c0012ddd:	75 35                	jne    c0012e14 <Reg::readInt(char*, char*, int*)+0xd2>
c0012ddf:	0f af d6             	imul   edx,esi
c0012de2:	83 fe 10             	cmp    esi,0x10
c0012de5:	75 26                	jne    c0012e0d <Reg::readInt(char*, char*, int*)+0xcb>
c0012de7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012deb:	83 ef 41             	sub    edi,0x41
c0012dee:	89 fb                	mov    ebx,edi
c0012df0:	80 fb 05             	cmp    bl,0x5
c0012df3:	77 06                	ja     c0012dfb <Reg::readInt(char*, char*, int*)+0xb9>
c0012df5:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012df9:	eb 16                	jmp    c0012e11 <Reg::readInt(char*, char*, int*)+0xcf>
c0012dfb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012dff:	83 eb 61             	sub    ebx,0x61
c0012e02:	80 fb 05             	cmp    bl,0x5
c0012e05:	77 06                	ja     c0012e0d <Reg::readInt(char*, char*, int*)+0xcb>
c0012e07:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012e0b:	eb 04                	jmp    c0012e11 <Reg::readInt(char*, char*, int*)+0xcf>
c0012e0d:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012e11:	45                   	inc    ebp
c0012e12:	eb ad                	jmp    c0012dc1 <Reg::readInt(char*, char*, int*)+0x7f>
c0012e14:	84 c0                	test   al,al
c0012e16:	74 02                	je     c0012e1a <Reg::readInt(char*, char*, int*)+0xd8>
c0012e18:	f7 da                	neg    edx
c0012e1a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012e21:	89 10                	mov    DWORD PTR [eax],edx
c0012e23:	88 d8                	mov    al,bl
c0012e25:	81 c4 ec 00 00 00    	add    esp,0xec
c0012e2b:	5b                   	pop    ebx
c0012e2c:	5e                   	pop    esi
c0012e2d:	5f                   	pop    edi
c0012e2e:	5d                   	pop    ebp
c0012e2f:	c3                   	ret    

c0012e30 <Reg::readString(char*, char*, char*, int)>:
c0012e30:	57                   	push   edi
c0012e31:	56                   	push   esi
c0012e32:	53                   	push   ebx
c0012e33:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012e39:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012e3d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012e44:	57                   	push   edi
c0012e45:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e4c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e53:	e8 b3 fe ff ff       	call   c0012d0b <Reg::getLine(char*, char*, char*)>
c0012e58:	83 c4 10             	add    esp,0x10
c0012e5b:	84 c0                	test   al,al
c0012e5d:	89 c6                	mov    esi,eax
c0012e5f:	74 44                	je     c0012ea5 <Reg::readString(char*, char*, char*, int)+0x75>
c0012e61:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012e68:	31 c0                	xor    eax,eax
c0012e6a:	4a                   	dec    edx
c0012e6b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012e6e:	84 c9                	test   cl,cl
c0012e70:	74 0f                	je     c0012e81 <Reg::readString(char*, char*, char*, int)+0x51>
c0012e72:	39 c2                	cmp    edx,eax
c0012e74:	7e 0b                	jle    c0012e81 <Reg::readString(char*, char*, char*, int)+0x51>
c0012e76:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012e79:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012e7e:	40                   	inc    eax
c0012e7f:	eb ea                	jmp    c0012e6b <Reg::readString(char*, char*, char*, int)+0x3b>
c0012e81:	83 ec 0c             	sub    esp,0xc
c0012e84:	53                   	push   ebx
c0012e85:	e8 f6 d6 fe ff       	call   c0000580 <strlen>
c0012e8a:	83 c4 10             	add    esp,0x10
c0012e8d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012e92:	75 11                	jne    c0012ea5 <Reg::readString(char*, char*, char*, int)+0x75>
c0012e94:	83 ec 0c             	sub    esp,0xc
c0012e97:	53                   	push   ebx
c0012e98:	e8 e3 d6 fe ff       	call   c0000580 <strlen>
c0012e9d:	83 c4 10             	add    esp,0x10
c0012ea0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012ea5:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012eab:	89 f0                	mov    eax,esi
c0012ead:	5b                   	pop    ebx
c0012eae:	5e                   	pop    esi
c0012eaf:	5f                   	pop    edi
c0012eb0:	c3                   	ret    

c0012eb1 <Reg::readBool(char*, char*, bool*)>:
c0012eb1:	83 ec 20             	sub    esp,0x20
c0012eb4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012eb8:	50                   	push   eax
c0012eb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ebd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ec1:	e8 7c fe ff ff       	call   c0012d42 <Reg::readInt(char*, char*, int*)>
c0012ec6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012eca:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012ecf:	0f 95 02             	setne  BYTE PTR [edx]
c0012ed2:	83 c4 2c             	add    esp,0x2c
c0012ed5:	c3                   	ret    

c0012ed6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012ed6:	53                   	push   ebx
c0012ed7:	83 ec 1c             	sub    esp,0x1c
c0012eda:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012ede:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012ee2:	50                   	push   eax
c0012ee3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ee7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012eeb:	e8 c1 ff ff ff       	call   c0012eb1 <Reg::readBool(char*, char*, bool*)>
c0012ef0:	83 c4 10             	add    esp,0x10
c0012ef3:	84 c0                	test   al,al
c0012ef5:	74 04                	je     c0012efb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012ef7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012efb:	83 c4 18             	add    esp,0x18
c0012efe:	88 d8                	mov    al,bl
c0012f00:	5b                   	pop    ebx
c0012f01:	c3                   	ret    

c0012f02 <Reg::readIntWithDefault(char*, char*, int)>:
c0012f02:	53                   	push   ebx
c0012f03:	83 ec 1c             	sub    esp,0x1c
c0012f06:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f0a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012f0e:	50                   	push   eax
c0012f0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f17:	e8 26 fe ff ff       	call   c0012d42 <Reg::readInt(char*, char*, int*)>
c0012f1c:	83 c4 10             	add    esp,0x10
c0012f1f:	84 c0                	test   al,al
c0012f21:	74 04                	je     c0012f27 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012f23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f27:	83 c4 18             	add    esp,0x18
c0012f2a:	89 d8                	mov    eax,ebx
c0012f2c:	5b                   	pop    ebx
c0012f2d:	c3                   	ret    

c0012f2e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012f2e:	57                   	push   edi
c0012f2f:	56                   	push   esi
c0012f30:	53                   	push   ebx
c0012f31:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f35:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012f39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f3d:	56                   	push   esi
c0012f3e:	57                   	push   edi
c0012f3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f47:	e8 e4 fe ff ff       	call   c0012e30 <Reg::readString(char*, char*, char*, int)>
c0012f4c:	83 c4 10             	add    esp,0x10
c0012f4f:	84 c0                	test   al,al
c0012f51:	75 16                	jne    c0012f69 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012f53:	50                   	push   eax
c0012f54:	56                   	push   esi
c0012f55:	6a 00                	push   0x0
c0012f57:	57                   	push   edi
c0012f58:	e8 93 d5 fe ff       	call   c00004f0 <memset>
c0012f5d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012f60:	89 de                	mov    esi,ebx
c0012f62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f64:	83 c4 10             	add    esp,0x10
c0012f67:	89 df                	mov    edi,ebx
c0012f69:	5b                   	pop    ebx
c0012f6a:	89 f8                	mov    eax,edi
c0012f6c:	5e                   	pop    esi
c0012f6d:	5f                   	pop    edi
c0012f6e:	c3                   	ret    

c0012f6f <SysEject(regs*)>:
c0012f6f:	83 ec 0c             	sub    esp,0xc
c0012f72:	83 ca ff             	or     edx,0xffffffff
c0012f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f79:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012f7c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f81:	83 e9 41             	sub    ecx,0x41
c0012f84:	83 f9 19             	cmp    ecx,0x19
c0012f87:	77 18                	ja     c0012fa1 <SysEject(regs*)+0x32>
c0012f89:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012f90:	85 c9                	test   ecx,ecx
c0012f92:	74 0d                	je     c0012fa1 <SysEject(regs*)+0x32>
c0012f94:	83 ec 0c             	sub    esp,0xc
c0012f97:	51                   	push   ecx
c0012f98:	e8 c7 a1 ff ff       	call   c000d164 <LogicalDisk::eject()>
c0012f9d:	83 c4 10             	add    esp,0x10
c0012fa0:	99                   	cdq    
c0012fa1:	83 c4 0c             	add    esp,0xc
c0012fa4:	c3                   	ret    

c0012fa5 <SysExit(regs*)>:
c0012fa5:	83 ec 18             	sub    esp,0x18
c0012fa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fac:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012faf:	e8 14 2a 00 00       	call   c00159c8 <terminateTask(int)>
c0012fb4:	83 c8 ff             	or     eax,0xffffffff
c0012fb7:	83 c4 1c             	add    esp,0x1c
c0012fba:	89 c2                	mov    edx,eax
c0012fbc:	c3                   	ret    

c0012fbd <SysGetCwd(regs*)>:
c0012fbd:	83 ec 10             	sub    esp,0x10
c0012fc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fc4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012fc7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012fca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fcf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012fd2:	e8 25 7d ff ff       	call   c000acfc <Fs::getcwd(Process*, char*, int)>
c0012fd7:	83 c4 1c             	add    esp,0x1c
c0012fda:	99                   	cdq    
c0012fdb:	c3                   	ret    

c0012fdc <SysGetPID(regs*)>:
c0012fdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fe1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fe4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012fe6:	99                   	cdq    
c0012fe7:	c3                   	ret    

c0012fe8 <SysGetRAMData(regs*)>:
c0012fe8:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0012ff2:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0012ff8:	99                   	cdq    
c0012ff9:	f7 f9                	idiv   ecx
c0012ffb:	c1 e0 18             	shl    eax,0x18
c0012ffe:	09 c8                	or     eax,ecx
c0013000:	99                   	cdq    
c0013001:	c3                   	ret    

c0013002 <SysGetVGAPtr(regs*)>:
c0013002:	55                   	push   ebp
c0013003:	57                   	push   edi
c0013004:	56                   	push   esi
c0013005:	53                   	push   ebx
c0013006:	83 ec 18             	sub    esp,0x18
c0013009:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001300d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013010:	e8 7f 24 00 00       	call   c0015494 <Thr::processFromPID(int)>
c0013015:	83 c4 10             	add    esp,0x10
c0013018:	89 c1                	mov    ecx,eax
c001301a:	b8 01 00 00 00       	mov    eax,0x1
c001301f:	85 c9                	test   ecx,ecx
c0013021:	74 57                	je     c001307a <SysGetVGAPtr(regs*)+0x78>
c0013023:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013027:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001302d:	74 0c                	je     c001303b <SysGetVGAPtr(regs*)+0x39>
c001302f:	83 ec 0c             	sub    esp,0xc
c0013032:	55                   	push   ebp
c0013033:	e8 21 57 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013038:	83 c4 10             	add    esp,0x10
c001303b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001303e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013043:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013046:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013048:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001304b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001304e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013054:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013057:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001305a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013060:	50                   	push   eax
c0013061:	50                   	push   eax
c0013062:	68 24 0f 02 c0       	push   0xc0020f24
c0013067:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001306a:	05 a8 0f 00 00       	add    eax,0xfa8
c001306f:	50                   	push   eax
c0013070:	e8 db d5 fe ff       	call   c0000650 <strcpy>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	31 c0                	xor    eax,eax
c001307a:	83 c4 0c             	add    esp,0xc
c001307d:	31 d2                	xor    edx,edx
c001307f:	5b                   	pop    ebx
c0013080:	5e                   	pop    esi
c0013081:	5f                   	pop    edi
c0013082:	5d                   	pop    ebp
c0013083:	c3                   	ret    

c0013084 <SysKill(regs*)>:
c0013084:	53                   	push   ebx
c0013085:	83 ec 08             	sub    esp,0x8
c0013088:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001308c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013090:	75 16                	jne    c00130a8 <SysKill(regs*)+0x24>
c0013092:	83 ec 0c             	sub    esp,0xc
c0013095:	68 2e 0f 02 c0       	push   0xc0020f2e
c001309a:	e8 ae d7 ff ff       	call   c001084d <KePanic(char const*)>
c001309f:	83 c4 10             	add    esp,0x10
c00130a2:	e9 89 00 00 00       	jmp    c0013130 <SysKill(regs*)+0xac>
c00130a7:	90                   	nop
c00130a8:	83 ec 0c             	sub    esp,0xc
c00130ab:	68 84 81 02 c0       	push   0xc0028184
c00130b0:	e8 57 bb 00 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130b5:	8d 76 00             	lea    esi,[esi+0x0]
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	85 c0                	test   eax,eax
c00130bd:	74 19                	je     c00130d8 <SysKill(regs*)+0x54>
c00130bf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130c2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130c5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130c7:	74 33                	je     c00130fc <SysKill(regs*)+0x78>
c00130c9:	52                   	push   edx
c00130ca:	52                   	push   edx
c00130cb:	50                   	push   eax
c00130cc:	68 84 81 02 c0       	push   0xc0028184
c00130d1:	e8 56 be 00 00       	call   c001ef2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130d6:	eb e0                	jmp    c00130b8 <SysKill(regs*)+0x34>
c00130d8:	83 ec 0c             	sub    esp,0xc
c00130db:	68 78 81 02 c0       	push   0xc0028178
c00130e0:	e8 27 bb 00 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130e5:	8d 76 00             	lea    esi,[esi+0x0]
c00130e8:	83 c4 10             	add    esp,0x10
c00130eb:	85 c0                	test   eax,eax
c00130ed:	74 41                	je     c0013130 <SysKill(regs*)+0xac>
c00130ef:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130f2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130f5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130f7:	75 27                	jne    c0013120 <SysKill(regs*)+0x9c>
c00130f9:	8d 76 00             	lea    esi,[esi+0x0]
c00130fc:	51                   	push   ecx
c00130fd:	51                   	push   ecx
c00130fe:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013101:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013106:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013109:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001310f:	e8 d3 db ff ff       	call   c0010ce7 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013114:	83 c4 10             	add    esp,0x10
c0013117:	31 c0                	xor    eax,eax
c0013119:	31 d2                	xor    edx,edx
c001311b:	eb 1b                	jmp    c0013138 <SysKill(regs*)+0xb4>
c001311d:	8d 76 00             	lea    esi,[esi+0x0]
c0013120:	52                   	push   edx
c0013121:	52                   	push   edx
c0013122:	50                   	push   eax
c0013123:	68 78 81 02 c0       	push   0xc0028178
c0013128:	e8 ff bd 00 00       	call   c001ef2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001312d:	eb b9                	jmp    c00130e8 <SysKill(regs*)+0x64>
c001312f:	90                   	nop
c0013130:	83 c8 ff             	or     eax,0xffffffff
c0013133:	89 c2                	mov    edx,eax
c0013135:	8d 76 00             	lea    esi,[esi+0x0]
c0013138:	83 c4 08             	add    esp,0x8
c001313b:	5b                   	pop    ebx
c001313c:	c3                   	ret    

c001313d <SysLoadDLL(regs*)>:
c001313d:	56                   	push   esi
c001313e:	31 d2                	xor    edx,edx
c0013140:	53                   	push   ebx
c0013141:	b8 01 00 00 00       	mov    eax,0x1
c0013146:	51                   	push   ecx
c0013147:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001314b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001314f:	0f 84 8c 00 00 00    	je     c00131e1 <SysLoadDLL(regs*)+0xa4>
c0013155:	83 ec 0c             	sub    esp,0xc
c0013158:	68 14 01 00 00       	push   0x114
c001315d:	e8 69 49 ff ff       	call   c0007acb <malloc>
c0013162:	83 c4 0c             	add    esp,0xc
c0013165:	89 c3                	mov    ebx,eax
c0013167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001316c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001316f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013172:	53                   	push   ebx
c0013173:	e8 b4 7d ff ff       	call   c000af2c <File::File(char const*, Process*)>
c0013178:	83 c4 10             	add    esp,0x10
c001317b:	31 d2                	xor    edx,edx
c001317d:	85 db                	test   ebx,ebx
c001317f:	b8 02 00 00 00       	mov    eax,0x2
c0013184:	74 5b                	je     c00131e1 <SysLoadDLL(regs*)+0xa4>
c0013186:	83 ec 0c             	sub    esp,0xc
c0013189:	53                   	push   ebx
c001318a:	e8 c7 80 ff ff       	call   c000b256 <File::exists()>
c001318f:	83 c4 10             	add    esp,0x10
c0013192:	84 c0                	test   al,al
c0013194:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013196:	75 11                	jne    c00131a9 <SysLoadDLL(regs*)+0x6c>
c0013198:	83 ec 0c             	sub    esp,0xc
c001319b:	53                   	push   ebx
c001319c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001319f:	83 c4 10             	add    esp,0x10
c00131a2:	b8 03 00 00 00       	mov    eax,0x3
c00131a7:	eb 36                	jmp    c00131df <SysLoadDLL(regs*)+0xa2>
c00131a9:	83 ec 0c             	sub    esp,0xc
c00131ac:	53                   	push   ebx
c00131ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131b0:	58                   	pop    eax
c00131b1:	5a                   	pop    edx
c00131b2:	6a 00                	push   0x0
c00131b4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00131b7:	e8 20 14 00 00       	call   c00145dc <Thr::loadDLL(char const*, bool)>
c00131bc:	83 c4 10             	add    esp,0x10
c00131bf:	31 d2                	xor    edx,edx
c00131c1:	89 c1                	mov    ecx,eax
c00131c3:	b8 04 00 00 00       	mov    eax,0x4
c00131c8:	85 c9                	test   ecx,ecx
c00131ca:	74 15                	je     c00131e1 <SysLoadDLL(regs*)+0xa4>
c00131cc:	53                   	push   ebx
c00131cd:	53                   	push   ebx
c00131ce:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00131d4:	51                   	push   ecx
c00131d5:	e8 42 16 00 00       	call   c001481c <Thr::executeDLL(unsigned long, void*)>
c00131da:	83 c4 10             	add    esp,0x10
c00131dd:	31 c0                	xor    eax,eax
c00131df:	31 d2                	xor    edx,edx
c00131e1:	59                   	pop    ecx
c00131e2:	5b                   	pop    ebx
c00131e3:	5e                   	pop    esi
c00131e4:	c3                   	ret    

c00131e5 <SysRead(regs*)>:
c00131e5:	57                   	push   edi
c00131e6:	56                   	push   esi
c00131e7:	53                   	push   ebx
c00131e8:	83 ec 10             	sub    esp,0x10
c00131eb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00131ef:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131f2:	83 f8 02             	cmp    eax,0x2
c00131f5:	77 10                	ja     c0013207 <SysRead(regs*)+0x22>
c00131f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131ff:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013205:	eb 0e                	jmp    c0013215 <SysRead(regs*)+0x30>
c0013207:	83 ec 0c             	sub    esp,0xc
c001320a:	50                   	push   eax
c001320b:	e8 9b 62 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0013210:	83 c4 10             	add    esp,0x10
c0013213:	89 c1                	mov    ecx,eax
c0013215:	83 c8 ff             	or     eax,0xffffffff
c0013218:	85 c9                	test   ecx,ecx
c001321a:	89 c2                	mov    edx,eax
c001321c:	74 28                	je     c0013246 <SysRead(regs*)+0x61>
c001321e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013226:	83 ec 0c             	sub    esp,0xc
c0013229:	31 ff                	xor    edi,edi
c001322b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001322f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013231:	52                   	push   edx
c0013232:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013235:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013238:	57                   	push   edi
c0013239:	56                   	push   esi
c001323a:	51                   	push   ecx
c001323b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001323e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013242:	83 c4 20             	add    esp,0x20
c0013245:	99                   	cdq    
c0013246:	83 c4 10             	add    esp,0x10
c0013249:	5b                   	pop    ebx
c001324a:	5e                   	pop    esi
c001324b:	5f                   	pop    edi
c001324c:	c3                   	ret    

c001324d <SysRegisterSignal(regs*)>:
c001324d:	83 ec 18             	sub    esp,0x18
c0013250:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013254:	6a 00                	push   0x0
c0013256:	6a 00                	push   0x0
c0013258:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001325b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001325e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013263:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013266:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001326c:	e8 40 da ff ff       	call   c0010cb1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013271:	83 c4 2c             	add    esp,0x2c
c0013274:	99                   	cdq    
c0013275:	c3                   	ret    

c0013276 <SysRegistryGetTypeFromPath(regs*)>:
c0013276:	57                   	push   edi
c0013277:	56                   	push   esi
c0013278:	53                   	push   ebx
c0013279:	81 ec 38 01 00 00    	sub    esp,0x138
c001327f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013286:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013289:	68 4f 0f 02 c0       	push   0xc0020f4f
c001328e:	e8 f0 76 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0013293:	5a                   	pop    edx
c0013294:	59                   	pop    ecx
c0013295:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013298:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001329b:	e8 34 f6 ff ff       	call   c00128d4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00132a0:	5f                   	pop    edi
c00132a1:	5a                   	pop    edx
c00132a2:	89 c6                	mov    esi,eax
c00132a4:	50                   	push   eax
c00132a5:	68 6f 0f 02 c0       	push   0xc0020f6f
c00132aa:	e8 d4 76 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00132af:	83 c4 10             	add    esp,0x10
c00132b2:	85 f6                	test   esi,esi
c00132b4:	74 28                	je     c00132de <SysRegistryGetTypeFromPath(regs*)+0x68>
c00132b6:	50                   	push   eax
c00132b7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00132bb:	57                   	push   edi
c00132bc:	56                   	push   esi
c00132bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132c0:	e8 f4 f1 ff ff       	call   c00124b9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00132c5:	83 c4 0c             	add    esp,0xc
c00132c8:	57                   	push   edi
c00132c9:	50                   	push   eax
c00132ca:	89 c3                	mov    ebx,eax
c00132cc:	68 77 0f 02 c0       	push   0xc0020f77
c00132d1:	e8 ad 76 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00132d6:	89 d8                	mov    eax,ebx
c00132d8:	83 c4 10             	add    esp,0x10
c00132db:	99                   	cdq    
c00132dc:	eb 05                	jmp    c00132e3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00132de:	83 c8 ff             	or     eax,0xffffffff
c00132e1:	89 c2                	mov    edx,eax
c00132e3:	81 c4 30 01 00 00    	add    esp,0x130
c00132e9:	5b                   	pop    ebx
c00132ea:	5e                   	pop    esi
c00132eb:	5f                   	pop    edi
c00132ec:	c3                   	ret    

c00132ed <SysRegistryReadExtent(regs*)>:
c00132ed:	83 ec 1c             	sub    esp,0x1c
c00132f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00132f4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00132f7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00132fa:	85 c0                	test   eax,eax
c00132fc:	79 1f                	jns    c001331d <SysRegistryReadExtent(regs*)+0x30>
c00132fe:	52                   	push   edx
c00132ff:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013304:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013308:	52                   	push   edx
c0013309:	50                   	push   eax
c001330a:	51                   	push   ecx
c001330b:	e8 9b f0 ff ff       	call   c00123ab <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013310:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013314:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013318:	83 c4 10             	add    esp,0x10
c001331b:	eb 14                	jmp    c0013331 <SysRegistryReadExtent(regs*)+0x44>
c001331d:	83 ec 04             	sub    esp,0x4
c0013320:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013323:	50                   	push   eax
c0013324:	51                   	push   ecx
c0013325:	e8 1f eb ff ff       	call   c0011e49 <CmGetString(Reghive_Tag*, int, char*)>
c001332a:	83 c4 10             	add    esp,0x10
c001332d:	31 c0                	xor    eax,eax
c001332f:	31 d2                	xor    edx,edx
c0013331:	83 c4 1c             	add    esp,0x1c
c0013334:	c3                   	ret    

c0013335 <SysRegistryPathToExtentLookup(regs*)>:
c0013335:	53                   	push   ebx
c0013336:	83 ec 10             	sub    esp,0x10
c0013339:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001333d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013340:	68 8d 0f 02 c0       	push   0xc0020f8d
c0013345:	e8 39 76 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001334a:	58                   	pop    eax
c001334b:	5a                   	pop    edx
c001334c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001334f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013352:	e8 7d f5 ff ff       	call   c00128d4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013357:	83 c4 18             	add    esp,0x18
c001335a:	5b                   	pop    ebx
c001335b:	99                   	cdq    
c001335c:	c3                   	ret    

c001335d <SysRegistryEnterDirectory(regs*)>:
c001335d:	53                   	push   ebx
c001335e:	83 ec 10             	sub    esp,0x10
c0013361:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013365:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013368:	68 b0 0f 02 c0       	push   0xc0020fb0
c001336d:	e8 11 76 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0013372:	58                   	pop    eax
c0013373:	5a                   	pop    edx
c0013374:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013377:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001337a:	e8 41 eb ff ff       	call   c0011ec0 <CmEnterDirectory(Reghive_Tag*, int)>
c001337f:	83 c4 18             	add    esp,0x18
c0013382:	5b                   	pop    ebx
c0013383:	99                   	cdq    
c0013384:	c3                   	ret    

c0013385 <SysRegistryGetNext(regs*)>:
c0013385:	53                   	push   ebx
c0013386:	83 ec 10             	sub    esp,0x10
c0013389:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001338d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013390:	68 ce 0f 02 c0       	push   0xc0020fce
c0013395:	e8 e9 75 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001339a:	58                   	pop    eax
c001339b:	5a                   	pop    edx
c001339c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001339f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133a2:	e8 58 eb ff ff       	call   c0011eff <CmGetNext(Reghive_Tag*, int)>
c00133a7:	83 c4 18             	add    esp,0x18
c00133aa:	5b                   	pop    ebx
c00133ab:	99                   	cdq    
c00133ac:	c3                   	ret    

c00133ad <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00133ad:	57                   	push   edi
c00133ae:	56                   	push   esi
c00133af:	53                   	push   ebx
c00133b0:	81 ec 34 01 00 00    	sub    esp,0x134
c00133b6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00133bd:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00133c1:	57                   	push   edi
c00133c2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00133c5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00133c8:	e8 ec f0 ff ff       	call   c00124b9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133cd:	89 c3                	mov    ebx,eax
c00133cf:	58                   	pop    eax
c00133d0:	5a                   	pop    edx
c00133d1:	57                   	push   edi
c00133d2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00133d5:	e8 76 d2 fe ff       	call   c0000650 <strcpy>
c00133da:	81 c4 40 01 00 00    	add    esp,0x140
c00133e0:	89 d8                	mov    eax,ebx
c00133e2:	5b                   	pop    ebx
c00133e3:	99                   	cdq    
c00133e4:	5e                   	pop    esi
c00133e5:	5f                   	pop    edi
c00133e6:	c3                   	ret    

c00133e7 <SysRegistryOpen(regs*)>:
c00133e7:	83 ec 18             	sub    esp,0x18
c00133ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133ee:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00133f1:	e8 e3 e8 ff ff       	call   c0011cd9 <CmOpen(char const*)>
c00133f6:	83 c4 1c             	add    esp,0x1c
c00133f9:	99                   	cdq    
c00133fa:	c3                   	ret    

c00133fb <SysRegistryClose(regs*)>:
c00133fb:	83 ec 18             	sub    esp,0x18
c00133fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013402:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013405:	e8 ed e9 ff ff       	call   c0011df7 <CmClose(Reghive_Tag*)>
c001340a:	31 c0                	xor    eax,eax
c001340c:	31 d2                	xor    edx,edx
c001340e:	83 c4 1c             	add    esp,0x1c
c0013411:	c3                   	ret    

c0013412 <SysSbrk(regs*)>:
c0013412:	56                   	push   esi
c0013413:	53                   	push   ebx
c0013414:	50                   	push   eax
c0013415:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001341a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001341e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013421:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013424:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001342a:	85 db                	test   ebx,ebx
c001342c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001342f:	74 02                	je     c0013433 <SysSbrk(regs*)+0x21>
c0013431:	79 06                	jns    c0013439 <SysSbrk(regs*)+0x27>
c0013433:	89 f0                	mov    eax,esi
c0013435:	31 d2                	xor    edx,edx
c0013437:	eb 2a                	jmp    c0013463 <SysSbrk(regs*)+0x51>
c0013439:	83 c8 ff             	or     eax,0xffffffff
c001343c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013442:	89 c2                	mov    edx,eax
c0013444:	77 1d                	ja     c0013463 <SysSbrk(regs*)+0x51>
c0013446:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001344c:	50                   	push   eax
c001344d:	68 07 0c 00 00       	push   0xc07
c0013452:	c1 ea 0c             	shr    edx,0xc
c0013455:	52                   	push   edx
c0013456:	51                   	push   ecx
c0013457:	e8 94 69 ff ff       	call   c0009df0 <VAS::allocatePages(int, int)>
c001345c:	89 f0                	mov    eax,esi
c001345e:	31 d2                	xor    edx,edx
c0013460:	83 c4 10             	add    esp,0x10
c0013463:	59                   	pop    ecx
c0013464:	5b                   	pop    ebx
c0013465:	5e                   	pop    esi
c0013466:	c3                   	ret    

c0013467 <SysSetCwd(regs*)>:
c0013467:	83 ec 14             	sub    esp,0x14
c001346a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001346e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013471:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013476:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013479:	e8 77 7e ff ff       	call   c000b2f5 <Fs::setcwd(Process*, char*)>
c001347e:	83 c4 1c             	add    esp,0x1c
c0013481:	99                   	cdq    
c0013482:	c3                   	ret    

c0013483 <SysSetTime(regs*)>:
c0013483:	55                   	push   ebp
c0013484:	31 c9                	xor    ecx,ecx
c0013486:	57                   	push   edi
c0013487:	bd 0c 00 00 00       	mov    ebp,0xc
c001348c:	56                   	push   esi
c001348d:	53                   	push   ebx
c001348e:	31 db                	xor    ebx,ebx
c0013490:	83 ec 10             	sub    esp,0x10
c0013493:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013497:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001349a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001349d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00134a0:	89 c2                	mov    edx,eax
c00134a2:	c1 e8 05             	shr    eax,0x5
c00134a5:	83 e2 1f             	and    edx,0x1f
c00134a8:	42                   	inc    edx
c00134a9:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00134af:	c1 e7 10             	shl    edi,0x10
c00134b2:	88 d1                	mov    cl,dl
c00134b4:	31 d2                	xor    edx,edx
c00134b6:	f7 f5                	div    ebp
c00134b8:	89 dd                	mov    ebp,ebx
c00134ba:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00134c0:	88 d5                	mov    ch,dl
c00134c2:	31 d2                	xor    edx,edx
c00134c4:	0f b7 c1             	movzx  eax,cx
c00134c7:	09 f8                	or     eax,edi
c00134c9:	bf 3c 00 00 00       	mov    edi,0x3c
c00134ce:	89 c1                	mov    ecx,eax
c00134d0:	89 f0                	mov    eax,esi
c00134d2:	f7 f7                	div    edi
c00134d4:	c1 e2 10             	shl    edx,0x10
c00134d7:	09 d5                	or     ebp,edx
c00134d9:	31 d2                	xor    edx,edx
c00134db:	f7 f7                	div    edi
c00134dd:	89 eb                	mov    ebx,ebp
c00134df:	bf 10 0e 00 00       	mov    edi,0xe10
c00134e4:	89 f0                	mov    eax,esi
c00134e6:	88 d7                	mov    bh,dl
c00134e8:	31 d2                	xor    edx,edx
c00134ea:	f7 f7                	div    edi
c00134ec:	bf 18 00 00 00       	mov    edi,0x18
c00134f1:	31 d2                	xor    edx,edx
c00134f3:	f7 f7                	div    edi
c00134f5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00134fa:	88 d3                	mov    bl,dl
c00134fc:	53                   	push   ebx
c00134fd:	51                   	push   ecx
c00134fe:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013504:	e8 ef 85 ff ff       	call   c000baf8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013509:	83 c4 1c             	add    esp,0x1c
c001350c:	31 d2                	xor    edx,edx
c001350e:	5b                   	pop    ebx
c001350f:	5e                   	pop    esi
c0013510:	83 f0 01             	xor    eax,0x1
c0013513:	5f                   	pop    edi
c0013514:	0f b6 c0             	movzx  eax,al
c0013517:	5d                   	pop    ebp
c0013518:	c3                   	ret    

c0013519 <SysTimezone(regs*)>:
c0013519:	53                   	push   ebx
c001351a:	83 ec 08             	sub    esp,0x8
c001351d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013521:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013525:	75 17                	jne    c001353e <SysTimezone(regs*)+0x25>
c0013527:	83 ec 0c             	sub    esp,0xc
c001352a:	68 e5 0f 02 c0       	push   0xc0020fe5
c001352f:	e8 4f 74 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0013534:	83 c8 ff             	or     eax,0xffffffff
c0013537:	83 c4 10             	add    esp,0x10
c001353a:	89 c2                	mov    edx,eax
c001353c:	eb 20                	jmp    c001355e <SysTimezone(regs*)+0x45>
c001353e:	83 ec 0c             	sub    esp,0xc
c0013541:	68 fa 0f 02 c0       	push   0xc0020ffa
c0013546:	e8 38 74 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001354b:	58                   	pop    eax
c001354c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001354f:	e8 08 83 ff ff       	call   c000b85c <User::loadClockSettings(int)>
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	b8 01 00 00 00       	mov    eax,0x1
c001355c:	31 d2                	xor    edx,edx
c001355e:	83 c4 08             	add    esp,0x8
c0013561:	5b                   	pop    ebx
c0013562:	c3                   	ret    

c0013563 <SysWrite(regs*)>:
c0013563:	57                   	push   edi
c0013564:	56                   	push   esi
c0013565:	53                   	push   ebx
c0013566:	83 ec 10             	sub    esp,0x10
c0013569:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001356d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013570:	83 f8 02             	cmp    eax,0x2
c0013573:	77 10                	ja     c0013585 <SysWrite(regs*)+0x22>
c0013575:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001357a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001357d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013583:	eb 0e                	jmp    c0013593 <SysWrite(regs*)+0x30>
c0013585:	83 ec 0c             	sub    esp,0xc
c0013588:	50                   	push   eax
c0013589:	e8 1d 5f ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c001358e:	83 c4 10             	add    esp,0x10
c0013591:	89 c1                	mov    ecx,eax
c0013593:	83 c8 ff             	or     eax,0xffffffff
c0013596:	85 c9                	test   ecx,ecx
c0013598:	89 c2                	mov    edx,eax
c001359a:	74 28                	je     c00135c4 <SysWrite(regs*)+0x61>
c001359c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00135a4:	83 ec 0c             	sub    esp,0xc
c00135a7:	31 ff                	xor    edi,edi
c00135a9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00135ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135af:	52                   	push   edx
c00135b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135b3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00135b6:	57                   	push   edi
c00135b7:	56                   	push   esi
c00135b8:	51                   	push   ecx
c00135b9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135c0:	83 c4 20             	add    esp,0x20
c00135c3:	99                   	cdq    
c00135c4:	83 c4 10             	add    esp,0x10
c00135c7:	5b                   	pop    ebx
c00135c8:	5e                   	pop    esi
c00135c9:	5f                   	pop    edi
c00135ca:	c3                   	ret    

c00135cb <SysWsbe(regs*)>:
c00135cb:	57                   	push   edi
c00135cc:	b9 0b 00 00 00       	mov    ecx,0xb
c00135d1:	56                   	push   esi
c00135d2:	be 39 10 02 c0       	mov    esi,0xc0021039
c00135d7:	53                   	push   ebx
c00135d8:	83 ec 30             	sub    esp,0x30
c00135db:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00135df:	fc                   	cld    
c00135e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00135e2:	83 ec 0c             	sub    esp,0xc
c00135e5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00135e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135f1:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00135f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00135f9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00135fc:	57                   	push   edi
c00135fd:	e8 7e cf fe ff       	call   c0000580 <strlen>
c0013602:	5a                   	pop    edx
c0013603:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013607:	52                   	push   edx
c0013608:	31 d2                	xor    edx,edx
c001360a:	57                   	push   edi
c001360b:	52                   	push   edx
c001360c:	50                   	push   eax
c001360d:	56                   	push   esi
c001360e:	ff d3                	call   ebx
c0013610:	83 c4 14             	add    esp,0x14
c0013613:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013617:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001361a:	e8 a9 23 00 00       	call   c00159c8 <terminateTask(int)>
c001361f:	83 c4 40             	add    esp,0x40
c0013622:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013627:	5b                   	pop    ebx
c0013628:	31 d2                	xor    edx,edx
c001362a:	5e                   	pop    esi
c001362b:	5f                   	pop    edi
c001362c:	c3                   	ret    

c001362d <SysYield(regs*)>:
c001362d:	83 ec 0c             	sub    esp,0xc
c0013630:	fa                   	cli    
c0013631:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013637:	e8 0c 1a 00 00       	call   c0015048 <schedule()>
c001363c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013641:	48                   	dec    eax
c0013642:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013647:	75 01                	jne    c001364a <SysYield(regs*)+0x1d>
c0013649:	fb                   	sti    
c001364a:	31 c0                	xor    eax,eax
c001364c:	31 d2                	xor    edx,edx
c001364e:	83 c4 0c             	add    esp,0xc
c0013651:	c3                   	ret    

c0013652 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013652:	55                   	push   ebp
c0013653:	57                   	push   edi
c0013654:	56                   	push   esi
c0013655:	53                   	push   ebx
c0013656:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001365c:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013667:	74 3b                	je     c00136a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013669:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013671:	74 31                	je     c00136a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013673:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001367b:	75 27                	jne    c00136a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001367d:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013684:	05 00 10 00 00       	add    eax,0x1000
c0013689:	89 c2                	mov    edx,eax
c001368b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013690:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013697:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001369d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00136a4:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00136ab:	83 ec 0c             	sub    esp,0xc
c00136ae:	6a 01                	push   0x1
c00136b0:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00136b6:	e8 4a 5f ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c00136bb:	83 c4 10             	add    esp,0x10
c00136be:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00136c4:	89 c3                	mov    ebx,eax
c00136c6:	0f 86 26 01 00 00    	jbe    c00137f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00136cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00136d4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00136db:	c1 ee 0c             	shr    esi,0xc
c00136de:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00136e2:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00136e9:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00136f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00136f4:	29 ef                	sub    edi,ebp
c00136f6:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00136fa:	0f 83 f9 00 00 00    	jae    c00137f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013700:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013706:	b8 00 10 00 00       	mov    eax,0x1000
c001370b:	0f 47 f8             	cmova  edi,eax
c001370e:	83 ec 0c             	sub    esp,0xc
c0013711:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013718:	31 d2                	xor    edx,edx
c001371a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001371c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013720:	50                   	push   eax
c0013721:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013725:	56                   	push   esi
c0013726:	52                   	push   edx
c0013727:	57                   	push   edi
c0013728:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001372f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013732:	83 c4 20             	add    esp,0x20
c0013735:	85 c0                	test   eax,eax
c0013737:	75 06                	jne    c001373f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013739:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001373d:	74 13                	je     c0013752 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001373f:	83 ec 0c             	sub    esp,0xc
c0013742:	53                   	push   ebx
c0013743:	e8 cf 61 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0013748:	83 c4 10             	add    esp,0x10
c001374b:	31 c0                	xor    eax,eax
c001374d:	e9 7c 01 00 00       	jmp    c00138ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013752:	fa                   	cli    
c0013753:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013759:	e8 78 46 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c001375e:	6a 07                	push   0x7
c0013760:	53                   	push   ebx
c0013761:	50                   	push   eax
c0013762:	89 c7                	mov    edi,eax
c0013764:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013769:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001376c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013772:	e8 6d 65 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013777:	83 c4 0c             	add    esp,0xc
c001377a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013781:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013787:	6a 00                	push   0x0
c0013789:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001378e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013791:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013797:	e8 ae 63 ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c001379c:	58                   	pop    eax
c001379d:	5a                   	pop    edx
c001379e:	68 07 0c 00 00       	push   0xc07
c00137a3:	55                   	push   ebp
c00137a4:	57                   	push   edi
c00137a5:	89 df                	mov    edi,ebx
c00137a7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00137ae:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137b4:	6a 00                	push   0x0
c00137b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137be:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137c4:	e8 fd 68 ff ff       	call   c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00137c9:	b9 00 10 00 00       	mov    ecx,0x1000
c00137ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137d0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00137d5:	83 c4 20             	add    esp,0x20
c00137d8:	48                   	dec    eax
c00137d9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00137de:	85 c0                	test   eax,eax
c00137e0:	75 01                	jne    c00137e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00137e2:	fb                   	sti    
c00137e3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00137e7:	81 c5 00 10 00 00    	add    ebp,0x1000
c00137ed:	e9 f0 fe ff ff       	jmp    c00136e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00137f2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00137f9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013800:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013806:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001380c:	0f 86 ae 00 00 00    	jbe    c00138c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013812:	fa                   	cli    
c0013813:	51                   	push   ecx
c0013814:	31 ff                	xor    edi,edi
c0013816:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001381d:	c1 ee 0c             	shr    esi,0xc
c0013820:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013826:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001382c:	6a 00                	push   0x0
c001382e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013833:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013836:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001383c:	e8 09 63 ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c0013841:	83 c4 10             	add    esp,0x10
c0013844:	e8 8d 45 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0013849:	47                   	inc    edi
c001384a:	6a 07                	push   0x7
c001384c:	53                   	push   ebx
c001384d:	50                   	push   eax
c001384e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013852:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013858:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001385b:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013861:	e8 7e 64 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013866:	58                   	pop    eax
c0013867:	5a                   	pop    edx
c0013868:	68 07 0c 00 00       	push   0xc07
c001386d:	55                   	push   ebp
c001386e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013878:	50                   	push   eax
c0013879:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013880:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013886:	6a 00                	push   0x0
c0013888:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001388d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013890:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013896:	e8 2b 68 ff ff       	call   c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001389b:	83 c4 1c             	add    esp,0x1c
c001389e:	68 00 10 00 00       	push   0x1000
c00138a3:	6a 00                	push   0x0
c00138a5:	53                   	push   ebx
c00138a6:	e8 45 cc fe ff       	call   c00004f0 <memset>
c00138ab:	83 c4 10             	add    esp,0x10
c00138ae:	39 fe                	cmp    esi,edi
c00138b0:	77 92                	ja     c0013844 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00138b2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00138b7:	48                   	dec    eax
c00138b8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00138bd:	75 01                	jne    c00138c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00138bf:	fb                   	sti    
c00138c0:	83 ec 0c             	sub    esp,0xc
c00138c3:	53                   	push   ebx
c00138c4:	e8 4e 60 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c00138c9:	83 c4 10             	add    esp,0x10
c00138cc:	b0 01                	mov    al,0x1
c00138ce:	81 c4 2c 10 00 00    	add    esp,0x102c
c00138d4:	5b                   	pop    ebx
c00138d5:	5e                   	pop    esi
c00138d6:	5f                   	pop    edi
c00138d7:	5d                   	pop    ebp
c00138d8:	c3                   	ret    

c00138d9 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00138d9:	55                   	push   ebp
c00138da:	57                   	push   edi
c00138db:	56                   	push   esi
c00138dc:	53                   	push   ebx
c00138dd:	83 ec 48             	sub    esp,0x48
c00138e0:	68 14 01 00 00       	push   0x114
c00138e5:	e8 e1 41 ff ff       	call   c0007acb <malloc>
c00138ea:	83 c4 0c             	add    esp,0xc
c00138ed:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00138f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00138f5:	89 c7                	mov    edi,eax
c00138f7:	50                   	push   eax
c00138f8:	e8 2f 76 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c00138fd:	58                   	pop    eax
c00138fe:	5a                   	pop    edx
c00138ff:	6a 01                	push   0x1
c0013901:	57                   	push   edi
c0013902:	e8 e1 76 ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c0013907:	83 c4 10             	add    esp,0x10
c001390a:	85 c0                	test   eax,eax
c001390c:	0f 85 4c 01 00 00    	jne    c0013a5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013912:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001391a:	83 ec 0c             	sub    esp,0xc
c001391d:	6a 34                	push   0x34
c001391f:	e8 a7 41 ff ff       	call   c0007acb <malloc>
c0013924:	89 c3                	mov    ebx,eax
c0013926:	58                   	pop    eax
c0013927:	8b 07                	mov    eax,DWORD PTR [edi]
c0013929:	8d 74 24 38          	lea    esi,[esp+0x38]
c001392d:	56                   	push   esi
c001392e:	53                   	push   ebx
c001392f:	6a 00                	push   0x0
c0013931:	6a 34                	push   0x34
c0013933:	57                   	push   edi
c0013934:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013937:	83 c4 20             	add    esp,0x20
c001393a:	85 c0                	test   eax,eax
c001393c:	0f 85 1c 01 00 00    	jne    c0013a5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013942:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013948:	0f 85 10 01 00 00    	jne    c0013a5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001394e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013951:	85 c0                	test   eax,eax
c0013953:	0f 84 05 01 00 00    	je     c0013a5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013959:	31 d2                	xor    edx,edx
c001395b:	55                   	push   ebp
c001395c:	52                   	push   edx
c001395d:	50                   	push   eax
c001395e:	57                   	push   edi
c001395f:	e8 42 77 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0013964:	83 c4 10             	add    esp,0x10
c0013967:	85 c0                	test   eax,eax
c0013969:	0f 85 ef 00 00 00    	jne    c0013a5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001396f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013972:	83 ec 0c             	sub    esp,0xc
c0013975:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013979:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001397d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013981:	0f af c2             	imul   eax,edx
c0013984:	50                   	push   eax
c0013985:	e8 41 41 ff ff       	call   c0007acb <malloc>
c001398a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001398c:	89 34 24             	mov    DWORD PTR [esp],esi
c001398f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013993:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013997:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001399b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001399f:	0f af c2             	imul   eax,edx
c00139a2:	99                   	cdq    
c00139a3:	52                   	push   edx
c00139a4:	50                   	push   eax
c00139a5:	57                   	push   edi
c00139a6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00139ac:	83 c4 20             	add    esp,0x20
c00139af:	85 c0                	test   eax,eax
c00139b1:	0f 84 a7 00 00 00    	je     c0013a5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00139b7:	31 d2                	xor    edx,edx
c00139b9:	51                   	push   ecx
c00139ba:	52                   	push   edx
c00139bb:	50                   	push   eax
c00139bc:	57                   	push   edi
c00139bd:	e8 e4 76 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c00139c2:	83 c4 10             	add    esp,0x10
c00139c5:	85 c0                	test   eax,eax
c00139c7:	0f 85 91 00 00 00    	jne    c0013a5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00139cd:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139d1:	83 ec 0c             	sub    esp,0xc
c00139d4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139d8:	0f af c2             	imul   eax,edx
c00139db:	50                   	push   eax
c00139dc:	e8 ea 40 ff ff       	call   c0007acb <malloc>
c00139e1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00139e3:	89 34 24             	mov    DWORD PTR [esp],esi
c00139e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139ee:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139f2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139f6:	0f af c2             	imul   eax,edx
c00139f9:	99                   	cdq    
c00139fa:	52                   	push   edx
c00139fb:	50                   	push   eax
c00139fc:	57                   	push   edi
c00139fd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a00:	83 c4 20             	add    esp,0x20
c0013a03:	31 c9                	xor    ecx,ecx
c0013a05:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013a0d:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013a11:	0f b7 e9             	movzx  ebp,cx
c0013a14:	0f 83 86 00 00 00    	jae    c0013aa0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013a1a:	c1 e5 05             	shl    ebp,0x5
c0013a1d:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013a21:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013a25:	75 73                	jne    c0013a9a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013a27:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013a2e:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013a31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a35:	52                   	push   edx
c0013a36:	31 d2                	xor    edx,edx
c0013a38:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013a3b:	52                   	push   edx
c0013a3c:	50                   	push   eax
c0013a3d:	57                   	push   edi
c0013a3e:	e8 63 76 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0013a43:	83 c4 10             	add    esp,0x10
c0013a46:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a4a:	85 c0                	test   eax,eax
c0013a4c:	74 17                	je     c0013a65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013a4e:	83 ec 0c             	sub    esp,0xc
c0013a51:	68 65 10 02 c0       	push   0xc0021065
c0013a56:	e8 28 6f ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0013a5b:	83 c4 10             	add    esp,0x10
c0013a5e:	31 c0                	xor    eax,eax
c0013a60:	e9 8b 00 00 00       	jmp    c0013af0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013a65:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a69:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013a6c:	83 ec 0c             	sub    esp,0xc
c0013a6f:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013a72:	50                   	push   eax
c0013a73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a77:	56                   	push   esi
c0013a78:	57                   	push   edi
c0013a79:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013a7d:	e8 d0 fb ff ff       	call   c0013652 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013a82:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013a86:	83 c4 20             	add    esp,0x20
c0013a89:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013a8d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a91:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013a96:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013a9a:	41                   	inc    ecx
c0013a9b:	e9 6d ff ff ff       	jmp    c0013a0d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013aa0:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013aa4:	83 ec 0c             	sub    esp,0xc
c0013aa7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013aab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013aaf:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013ab5:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013abb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ac0:	05 00 10 00 00       	add    eax,0x1000
c0013ac5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013acc:	e8 0a 40 ff ff       	call   c0007adb <free>
c0013ad1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ad4:	e8 02 40 ff ff       	call   c0007adb <free>
c0013ad9:	58                   	pop    eax
c0013ada:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ade:	e8 f8 3f ff ff       	call   c0007adb <free>
c0013ae3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ae6:	e8 5b 75 ff ff       	call   c000b046 <File::close()>
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	b0 01                	mov    al,0x1
c0013af0:	83 c4 3c             	add    esp,0x3c
c0013af3:	5b                   	pop    ebx
c0013af4:	5e                   	pop    esi
c0013af5:	5f                   	pop    edi
c0013af6:	5d                   	pop    ebp
c0013af7:	c3                   	ret    

c0013af8 <Thr::runtimeReferenceHelper()>:
c0013af8:	83 ec 18             	sub    esp,0x18
c0013afb:	68 6d 10 02 c0       	push   0xc002106d
c0013b00:	e8 7e 6e ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0013b05:	fa                   	cli    
c0013b06:	83 c4 10             	add    esp,0x10
c0013b09:	eb fe                	jmp    c0013b09 <Thr::runtimeReferenceHelper()+0x11>

c0013b0b <Thr::getAddressOfKernelSymbol(char const*)>:
c0013b0b:	57                   	push   edi
c0013b0c:	56                   	push   esi
c0013b0d:	53                   	push   ebx
c0013b0e:	31 db                	xor    ebx,ebx
c0013b10:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013b16:	7e 3c                	jle    c0013b54 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013b18:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013b1f:	31 ff                	xor    edi,edi
c0013b21:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013b28:	7e 27                	jle    c0013b51 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013b2a:	50                   	push   eax
c0013b2b:	50                   	push   eax
c0013b2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b30:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b32:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013b39:	50                   	push   eax
c0013b3a:	e8 41 cc fe ff       	call   c0000780 <strcmp>
c0013b3f:	83 c4 10             	add    esp,0x10
c0013b42:	85 c0                	test   eax,eax
c0013b44:	75 05                	jne    c0013b4b <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013b46:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b49:	eb 0b                	jmp    c0013b56 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013b4b:	83 c6 10             	add    esi,0x10
c0013b4e:	47                   	inc    edi
c0013b4f:	eb d0                	jmp    c0013b21 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013b51:	43                   	inc    ebx
c0013b52:	eb bc                	jmp    c0013b10 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013b54:	31 c0                	xor    eax,eax
c0013b56:	5b                   	pop    ebx
c0013b57:	5e                   	pop    esi
c0013b58:	5f                   	pop    edi
c0013b59:	c3                   	ret    

c0013b5a <Thr::loadKernelSymbolTable(char const*)>:
c0013b5a:	55                   	push   ebp
c0013b5b:	57                   	push   edi
c0013b5c:	56                   	push   esi
c0013b5d:	53                   	push   ebx
c0013b5e:	83 ec 68             	sub    esp,0x68
c0013b61:	68 14 01 00 00       	push   0x114
c0013b66:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013b6c:	e8 5a 3f ff ff       	call   c0007acb <malloc>
c0013b71:	83 c4 0c             	add    esp,0xc
c0013b74:	56                   	push   esi
c0013b75:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013b79:	89 c3                	mov    ebx,eax
c0013b7b:	50                   	push   eax
c0013b7c:	e8 ab 73 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c0013b81:	5e                   	pop    esi
c0013b82:	5f                   	pop    edi
c0013b83:	6a 01                	push   0x1
c0013b85:	53                   	push   ebx
c0013b86:	e8 5d 74 ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c0013b8b:	83 c4 10             	add    esp,0x10
c0013b8e:	85 c0                	test   eax,eax
c0013b90:	74 0a                	je     c0013b9c <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013b92:	83 ec 0c             	sub    esp,0xc
c0013b95:	68 8f 10 02 c0       	push   0xc002108f
c0013b9a:	eb 34                	jmp    c0013bd0 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013b9c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013ba4:	83 ec 0c             	sub    esp,0xc
c0013ba7:	6a 34                	push   0x34
c0013ba9:	e8 1d 3f ff ff       	call   c0007acb <malloc>
c0013bae:	59                   	pop    ecx
c0013baf:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013bb3:	89 c7                	mov    edi,eax
c0013bb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb7:	56                   	push   esi
c0013bb8:	57                   	push   edi
c0013bb9:	6a 00                	push   0x0
c0013bbb:	6a 34                	push   0x34
c0013bbd:	53                   	push   ebx
c0013bbe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bc1:	83 c4 20             	add    esp,0x20
c0013bc4:	85 c0                	test   eax,eax
c0013bc6:	74 17                	je     c0013bdf <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013bc8:	83 ec 0c             	sub    esp,0xc
c0013bcb:	68 a6 10 02 c0       	push   0xc00210a6
c0013bd0:	e8 78 cc ff ff       	call   c001084d <KePanic(char const*)>
c0013bd5:	83 c4 10             	add    esp,0x10
c0013bd8:	31 c0                	xor    eax,eax
c0013bda:	e9 31 02 00 00       	jmp    c0013e10 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013bdf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013be5:	75 e1                	jne    c0013bc8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013be7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013bea:	85 c0                	test   eax,eax
c0013bec:	74 da                	je     c0013bc8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bee:	52                   	push   edx
c0013bef:	31 d2                	xor    edx,edx
c0013bf1:	52                   	push   edx
c0013bf2:	50                   	push   eax
c0013bf3:	53                   	push   ebx
c0013bf4:	e8 ad 74 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0013bf9:	83 c4 10             	add    esp,0x10
c0013bfc:	85 c0                	test   eax,eax
c0013bfe:	75 c8                	jne    c0013bc8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c00:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c04:	83 ec 0c             	sub    esp,0xc
c0013c07:	31 ed                	xor    ebp,ebp
c0013c09:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c0d:	0f af c2             	imul   eax,edx
c0013c10:	50                   	push   eax
c0013c11:	e8 b5 3e ff ff       	call   c0007acb <malloc>
c0013c16:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013c18:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c23:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c27:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c2b:	0f af c2             	imul   eax,edx
c0013c2e:	99                   	cdq    
c0013c2f:	52                   	push   edx
c0013c30:	50                   	push   eax
c0013c31:	53                   	push   ebx
c0013c32:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c35:	83 c4 20             	add    esp,0x20
c0013c38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c40:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013c48:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013c50:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c58:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013c5c:	0f b7 f5             	movzx  esi,bp
c0013c5f:	0f 83 a7 00 00 00    	jae    c0013d0c <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013c65:	6b f6 28             	imul   esi,esi,0x28
c0013c68:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013c6c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c73:	50                   	push   eax
c0013c74:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013c78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c7c:	8b 16                	mov    edx,DWORD PTR [esi]
c0013c7e:	6b c0 28             	imul   eax,eax,0x28
c0013c81:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013c85:	89 d0                	mov    eax,edx
c0013c87:	31 d2                	xor    edx,edx
c0013c89:	52                   	push   edx
c0013c8a:	50                   	push   eax
c0013c8b:	53                   	push   ebx
c0013c8c:	e8 15 74 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0013c91:	83 c4 0c             	add    esp,0xc
c0013c94:	6a 20                	push   0x20
c0013c96:	6a 00                	push   0x0
c0013c98:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c9c:	52                   	push   edx
c0013c9d:	e8 4e c8 fe ff       	call   c00004f0 <memset>
c0013ca2:	58                   	pop    eax
c0013ca3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ca5:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013ca9:	51                   	push   ecx
c0013caa:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013cae:	52                   	push   edx
c0013caf:	6a 00                	push   0x0
c0013cb1:	6a 1f                	push   0x1f
c0013cb3:	53                   	push   ebx
c0013cb4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cb7:	83 c4 18             	add    esp,0x18
c0013cba:	68 bd 10 02 c0       	push   0xc00210bd
c0013cbf:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013cc3:	52                   	push   edx
c0013cc4:	e8 b7 ca fe ff       	call   c0000780 <strcmp>
c0013cc9:	83 c4 10             	add    esp,0x10
c0013ccc:	85 c0                	test   eax,eax
c0013cce:	75 0f                	jne    c0013cdf <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013cd0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013cd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cdf:	50                   	push   eax
c0013ce0:	50                   	push   eax
c0013ce1:	68 c5 10 02 c0       	push   0xc00210c5
c0013ce6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013cea:	50                   	push   eax
c0013ceb:	e8 90 ca fe ff       	call   c0000780 <strcmp>
c0013cf0:	83 c4 10             	add    esp,0x10
c0013cf3:	85 c0                	test   eax,eax
c0013cf5:	75 0f                	jne    c0013d06 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013cf7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013cfa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013cfe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d06:	45                   	inc    ebp
c0013d07:	e9 4c ff ff ff       	jmp    c0013c58 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013d0c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013d11:	75 10                	jne    c0013d23 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013d13:	83 ec 0c             	sub    esp,0xc
c0013d16:	68 cd 10 02 c0       	push   0xc00210cd
c0013d1b:	e8 2d cb ff ff       	call   c001084d <KePanic(char const*)>
c0013d20:	83 c4 10             	add    esp,0x10
c0013d23:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013d28:	75 10                	jne    c0013d3a <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013d2a:	83 ec 0c             	sub    esp,0xc
c0013d2d:	68 cd 10 02 c0       	push   0xc00210cd
c0013d32:	e8 16 cb ff ff       	call   c001084d <KePanic(char const*)>
c0013d37:	83 c4 10             	add    esp,0x10
c0013d3a:	50                   	push   eax
c0013d3b:	31 d2                	xor    edx,edx
c0013d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d41:	52                   	push   edx
c0013d42:	50                   	push   eax
c0013d43:	53                   	push   ebx
c0013d44:	e8 5d 73 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0013d49:	5a                   	pop    edx
c0013d4a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d4e:	e8 78 3d ff ff       	call   c0007acb <malloc>
c0013d53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d57:	31 c9                	xor    ecx,ecx
c0013d59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d5f:	5e                   	pop    esi
c0013d60:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013d64:	55                   	push   ebp
c0013d65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d69:	51                   	push   ecx
c0013d6a:	52                   	push   edx
c0013d6b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d6f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013d73:	53                   	push   ebx
c0013d74:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d77:	83 c4 14             	add    esp,0x14
c0013d7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d7e:	e8 48 3d ff ff       	call   c0007acb <malloc>
c0013d83:	89 c6                	mov    esi,eax
c0013d85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d87:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d8a:	56                   	push   esi
c0013d8b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013d8f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d93:	51                   	push   ecx
c0013d94:	52                   	push   edx
c0013d95:	53                   	push   ebx
c0013d96:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d9d:	83 c4 1c             	add    esp,0x1c
c0013da0:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013da6:	c1 e8 04             	shr    eax,0x4
c0013da9:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013db0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013db4:	31 d2                	xor    edx,edx
c0013db6:	52                   	push   edx
c0013db7:	50                   	push   eax
c0013db8:	53                   	push   ebx
c0013db9:	e8 e8 72 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0013dbe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013dc0:	31 d2                	xor    edx,edx
c0013dc2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013dc5:	56                   	push   esi
c0013dc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013dca:	52                   	push   edx
c0013dcb:	50                   	push   eax
c0013dcc:	53                   	push   ebx
c0013dcd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013dd0:	83 c4 14             	add    esp,0x14
c0013dd3:	53                   	push   ebx
c0013dd4:	e8 6d 72 ff ff       	call   c000b046 <File::close()>
c0013dd9:	5d                   	pop    ebp
c0013dda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013dde:	e8 f8 3c ff ff       	call   c0007adb <free>
c0013de3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013de6:	e8 f0 3c ff ff       	call   c0007adb <free>
c0013deb:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013df0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013df4:	83 c4 10             	add    esp,0x10
c0013df7:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013dfe:	8d 50 01             	lea    edx,[eax+0x1]
c0013e01:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013e08:	b0 01                	mov    al,0x1
c0013e0a:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013e10:	83 c4 5c             	add    esp,0x5c
c0013e13:	5b                   	pop    ebx
c0013e14:	5e                   	pop    esi
c0013e15:	5f                   	pop    edi
c0013e16:	5d                   	pop    ebp
c0013e17:	c3                   	ret    

c0013e18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013e18:	55                   	push   ebp
c0013e19:	57                   	push   edi
c0013e1a:	56                   	push   esi
c0013e1b:	53                   	push   ebx
c0013e1c:	81 ec 68 03 00 00    	sub    esp,0x368
c0013e22:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013e29:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013e2f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0013e33:	68 14 01 00 00       	push   0x114
c0013e38:	e8 8e 3c ff ff       	call   c0007acb <malloc>
c0013e3d:	83 c4 0c             	add    esp,0xc
c0013e40:	56                   	push   esi
c0013e41:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013e48:	50                   	push   eax
c0013e49:	89 c3                	mov    ebx,eax
c0013e4b:	e8 dc 70 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c0013e50:	5f                   	pop    edi
c0013e51:	5d                   	pop    ebp
c0013e52:	6a 01                	push   0x1
c0013e54:	53                   	push   ebx
c0013e55:	e8 8e 71 ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c0013e5a:	83 c4 10             	add    esp,0x10
c0013e5d:	85 c0                	test   eax,eax
c0013e5f:	0f 85 b3 06 00 00    	jne    c0014518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e65:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013e6d:	83 ec 0c             	sub    esp,0xc
c0013e70:	6a 34                	push   0x34
c0013e72:	e8 54 3c ff ff       	call   c0007acb <malloc>
c0013e77:	5e                   	pop    esi
c0013e78:	8d 74 24 54          	lea    esi,[esp+0x54]
c0013e7c:	89 c5                	mov    ebp,eax
c0013e7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e80:	56                   	push   esi
c0013e81:	55                   	push   ebp
c0013e82:	6a 00                	push   0x0
c0013e84:	6a 34                	push   0x34
c0013e86:	53                   	push   ebx
c0013e87:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e8a:	83 c4 20             	add    esp,0x20
c0013e8d:	85 c0                	test   eax,eax
c0013e8f:	0f 85 83 06 00 00    	jne    c0014518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e95:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0013e9c:	0f 85 76 06 00 00    	jne    c0014518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013ea2:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013ea5:	85 c0                	test   eax,eax
c0013ea7:	0f 84 6b 06 00 00    	je     c0014518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013ead:	31 d2                	xor    edx,edx
c0013eaf:	51                   	push   ecx
c0013eb0:	52                   	push   edx
c0013eb1:	50                   	push   eax
c0013eb2:	53                   	push   ebx
c0013eb3:	e8 ee 71 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0013eb8:	83 c4 10             	add    esp,0x10
c0013ebb:	85 c0                	test   eax,eax
c0013ebd:	0f 85 55 06 00 00    	jne    c0014518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013ec3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0013ec6:	83 ec 0c             	sub    esp,0xc
c0013ec9:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013ecd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013ed1:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013ed5:	0f af c2             	imul   eax,edx
c0013ed8:	50                   	push   eax
c0013ed9:	e8 ed 3b ff ff       	call   c0007acb <malloc>
c0013ede:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013ee0:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ee3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013eeb:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013eef:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013ef3:	0f af c2             	imul   eax,edx
c0013ef6:	99                   	cdq    
c0013ef7:	52                   	push   edx
c0013ef8:	50                   	push   eax
c0013ef9:	53                   	push   ebx
c0013efa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013efd:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0013f00:	83 c4 20             	add    esp,0x20
c0013f03:	85 c0                	test   eax,eax
c0013f05:	0f 84 0d 06 00 00    	je     c0014518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013f0b:	52                   	push   edx
c0013f0c:	31 d2                	xor    edx,edx
c0013f0e:	52                   	push   edx
c0013f0f:	50                   	push   eax
c0013f10:	53                   	push   ebx
c0013f11:	e8 90 71 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0013f16:	83 c4 10             	add    esp,0x10
c0013f19:	85 c0                	test   eax,eax
c0013f1b:	0f 85 f7 05 00 00    	jne    c0014518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013f21:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f25:	83 ec 0c             	sub    esp,0xc
c0013f28:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f2c:	0f af c2             	imul   eax,edx
c0013f2f:	50                   	push   eax
c0013f30:	e8 96 3b ff ff       	call   c0007acb <malloc>
c0013f35:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f37:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f42:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f46:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f4a:	0f af c2             	imul   eax,edx
c0013f4d:	99                   	cdq    
c0013f4e:	52                   	push   edx
c0013f4f:	50                   	push   eax
c0013f50:	53                   	push   ebx
c0013f51:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f54:	83 c4 20             	add    esp,0x20
c0013f57:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0013f5d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013f60:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0013f64:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0013f68:	73 78                	jae    c0013fe2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0013f6a:	c1 e7 05             	shl    edi,0x5
c0013f6d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0013f71:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013f74:	75 63                	jne    c0013fd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0013f76:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013f79:	31 d2                	xor    edx,edx
c0013f7b:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0013f7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f82:	50                   	push   eax
c0013f83:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013f86:	52                   	push   edx
c0013f87:	50                   	push   eax
c0013f88:	53                   	push   ebx
c0013f89:	e8 18 71 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0013f8e:	83 c4 10             	add    esp,0x10
c0013f91:	85 c0                	test   eax,eax
c0013f93:	0f 85 7f 05 00 00    	jne    c0014518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013f99:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013fa0:	83 ec 0c             	sub    esp,0xc
c0013fa3:	31 d2                	xor    edx,edx
c0013fa5:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013fa9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013fab:	01 c6                	add    esi,eax
c0013fad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013fb4:	50                   	push   eax
c0013fb5:	56                   	push   esi
c0013fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fba:	52                   	push   edx
c0013fbb:	50                   	push   eax
c0013fbc:	53                   	push   ebx
c0013fbd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fc0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013fc3:	83 c4 1c             	add    esp,0x1c
c0013fc6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013fc9:	50                   	push   eax
c0013fca:	6a 00                	push   0x0
c0013fcc:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013fd0:	56                   	push   esi
c0013fd1:	e8 1a c5 fe ff       	call   c00004f0 <memset>
c0013fd6:	83 c4 10             	add    esp,0x10
c0013fd9:	66 ff 04 24          	inc    WORD PTR [esp]
c0013fdd:	e9 7b ff ff ff       	jmp    c0013f5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0013fe2:	50                   	push   eax
c0013fe3:	68 00 01 00 00       	push   0x100
c0013fe8:	6a 00                	push   0x0
c0013fea:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013fee:	50                   	push   eax
c0013fef:	e8 fc c4 fe ff       	call   c00004f0 <memset>
c0013ff4:	83 c4 0c             	add    esp,0xc
c0013ff7:	68 00 01 00 00       	push   0x100
c0013ffc:	6a 00                	push   0x0
c0013ffe:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014005:	50                   	push   eax
c0014006:	e8 e5 c4 fe ff       	call   c00004f0 <memset>
c001400b:	83 c4 10             	add    esp,0x10
c001400e:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014015:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001401c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014024:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001402c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014034:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001403c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014040:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014044:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014049:	0f 83 16 01 00 00    	jae    c0014165 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001404f:	6b ff 28             	imul   edi,edi,0x28
c0014052:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014056:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014059:	51                   	push   ecx
c001405a:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001405e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014062:	8b 07                	mov    eax,DWORD PTR [edi]
c0014064:	6b d2 28             	imul   edx,edx,0x28
c0014067:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001406b:	31 d2                	xor    edx,edx
c001406d:	52                   	push   edx
c001406e:	50                   	push   eax
c001406f:	53                   	push   ebx
c0014070:	e8 31 70 ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0014075:	83 c4 0c             	add    esp,0xc
c0014078:	6a 20                	push   0x20
c001407a:	6a 00                	push   0x0
c001407c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014083:	51                   	push   ecx
c0014084:	e8 67 c4 fe ff       	call   c00004f0 <memset>
c0014089:	58                   	pop    eax
c001408a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001408c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014090:	52                   	push   edx
c0014091:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014098:	51                   	push   ecx
c0014099:	6a 00                	push   0x0
c001409b:	6a 1f                	push   0x1f
c001409d:	53                   	push   ebx
c001409e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140a1:	83 c4 1c             	add    esp,0x1c
c00140a4:	6a 09                	push   0x9
c00140a6:	68 e7 10 02 c0       	push   0xc00210e7
c00140ab:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00140b2:	51                   	push   ecx
c00140b3:	e8 c8 c2 fe ff       	call   c0000380 <memcmp>
c00140b8:	83 c4 10             	add    esp,0x10
c00140bb:	85 c0                	test   eax,eax
c00140bd:	75 1a                	jne    c00140d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00140bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00140c2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00140c5:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00140c9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140cc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00140d3:	89 d0                	mov    eax,edx
c00140d5:	40                   	inc    eax
c00140d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00140d9:	52                   	push   edx
c00140da:	6a 09                	push   0x9
c00140dc:	68 f1 10 02 c0       	push   0xc00210f1
c00140e1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140e8:	50                   	push   eax
c00140e9:	e8 92 c2 fe ff       	call   c0000380 <memcmp>
c00140ee:	83 c4 10             	add    esp,0x10
c00140f1:	85 c0                	test   eax,eax
c00140f3:	75 1a                	jne    c001410f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00140f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00140f8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00140fb:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00140ff:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014102:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014109:	89 d0                	mov    eax,edx
c001410b:	40                   	inc    eax
c001410c:	89 04 24             	mov    DWORD PTR [esp],eax
c001410f:	50                   	push   eax
c0014110:	50                   	push   eax
c0014111:	68 bd 10 02 c0       	push   0xc00210bd
c0014116:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001411d:	50                   	push   eax
c001411e:	e8 5d c6 fe ff       	call   c0000780 <strcmp>
c0014123:	83 c4 10             	add    esp,0x10
c0014126:	85 c0                	test   eax,eax
c0014128:	75 0b                	jne    c0014135 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c001412a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001412e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014131:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014135:	50                   	push   eax
c0014136:	50                   	push   eax
c0014137:	68 c5 10 02 c0       	push   0xc00210c5
c001413c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014143:	50                   	push   eax
c0014144:	e8 37 c6 fe ff       	call   c0000780 <strcmp>
c0014149:	83 c4 10             	add    esp,0x10
c001414c:	85 c0                	test   eax,eax
c001414e:	75 0b                	jne    c001415b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014150:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014154:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014157:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001415b:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014160:	e9 d7 fe ff ff       	jmp    c001403c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014165:	50                   	push   eax
c0014166:	31 d2                	xor    edx,edx
c0014168:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001416c:	52                   	push   edx
c001416d:	50                   	push   eax
c001416e:	53                   	push   ebx
c001416f:	e8 32 6f ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0014174:	58                   	pop    eax
c0014175:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014179:	e8 4d 39 ff ff       	call   c0007acb <malloc>
c001417e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014180:	31 d2                	xor    edx,edx
c0014182:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014186:	58                   	pop    eax
c0014187:	8d 74 24 54          	lea    esi,[esp+0x54]
c001418b:	56                   	push   esi
c001418c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014194:	52                   	push   edx
c0014195:	50                   	push   eax
c0014196:	53                   	push   ebx
c0014197:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001419a:	83 c4 14             	add    esp,0x14
c001419d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141a1:	e8 25 39 ff ff       	call   c0007acb <malloc>
c00141a6:	31 d2                	xor    edx,edx
c00141a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00141ac:	83 c4 0c             	add    esp,0xc
c00141af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141b3:	52                   	push   edx
c00141b4:	50                   	push   eax
c00141b5:	53                   	push   ebx
c00141b6:	e8 eb 6e ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c00141bb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141bd:	31 d2                	xor    edx,edx
c00141bf:	89 34 24             	mov    DWORD PTR [esp],esi
c00141c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00141c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141ca:	52                   	push   edx
c00141cb:	50                   	push   eax
c00141cc:	53                   	push   ebx
c00141cd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141d0:	83 c4 20             	add    esp,0x20
c00141d3:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00141d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141e4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141e8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00141eb:	0f 84 2b 03 00 00    	je     c001451c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00141f1:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00141f8:	31 d2                	xor    edx,edx
c00141fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141fe:	c1 e8 03             	shr    eax,0x3
c0014201:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014205:	51                   	push   ecx
c0014206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001420a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001420e:	52                   	push   edx
c001420f:	50                   	push   eax
c0014210:	53                   	push   ebx
c0014211:	e8 90 6e ff ff       	call   c000b0a6 <File::seek(unsigned long long)>
c0014216:	5e                   	pop    esi
c0014217:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001421b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014222:	e8 a4 38 ff ff       	call   c0007acb <malloc>
c0014227:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014229:	31 d2                	xor    edx,edx
c001422b:	89 c7                	mov    edi,eax
c001422d:	58                   	pop    eax
c001422e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014232:	50                   	push   eax
c0014233:	57                   	push   edi
c0014234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014238:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001423f:	52                   	push   edx
c0014240:	50                   	push   eax
c0014241:	53                   	push   ebx
c0014242:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014245:	83 c4 20             	add    esp,0x20
c0014248:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014250:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014254:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014258:	0f 8d a5 02 00 00    	jge    c0014503 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c001425e:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014263:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014267:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c001426a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001426e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014272:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001427a:	c1 e8 08             	shr    eax,0x8
c001427d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014281:	89 c2                	mov    edx,eax
c0014283:	c1 e2 04             	shl    edx,0x4
c0014286:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c001428a:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c001428d:	85 f6                	test   esi,esi
c001428f:	0f 85 cf 00 00 00    	jne    c0014364 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014295:	83 ec 0c             	sub    esp,0xc
c0014298:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c001429c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142a0:	03 02                	add    eax,DWORD PTR [edx]
c00142a2:	50                   	push   eax
c00142a3:	e8 63 f8 ff ff       	call   c0013b0b <Thr::getAddressOfKernelSymbol(char const*)>
c00142a8:	83 c4 10             	add    esp,0x10
c00142ab:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00142af:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00142b4:	85 c0                	test   eax,eax
c00142b6:	89 c6                	mov    esi,eax
c00142b8:	0f 85 a6 00 00 00    	jne    c0014364 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00142be:	83 ec 0c             	sub    esp,0xc
c00142c1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00142c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142c9:	03 02                	add    eax,DWORD PTR [edx]
c00142cb:	50                   	push   eax
c00142cc:	e8 67 c7 ff ff       	call   c0010a38 <KeResolveCompatibilitySymbol(char*)>
c00142d1:	83 c4 10             	add    esp,0x10
c00142d4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00142d8:	85 c0                	test   eax,eax
c00142da:	89 c6                	mov    esi,eax
c00142dc:	0f 85 82 00 00 00    	jne    c0014364 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00142e2:	50                   	push   eax
c00142e3:	50                   	push   eax
c00142e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142e8:	03 02                	add    eax,DWORD PTR [edx]
c00142ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00142ee:	50                   	push   eax
c00142ef:	68 fb 10 02 c0       	push   0xc00210fb
c00142f4:	e8 8a 66 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00142f9:	58                   	pop    eax
c00142fa:	5a                   	pop    edx
c00142fb:	68 15 11 02 c0       	push   0xc0021115
c0014300:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014307:	51                   	push   ecx
c0014308:	e8 43 c3 fe ff       	call   c0000650 <strcpy>
c001430d:	59                   	pop    ecx
c001430e:	58                   	pop    eax
c001430f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014313:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014317:	03 02                	add    eax,DWORD PTR [edx]
c0014319:	50                   	push   eax
c001431a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014321:	51                   	push   ecx
c0014322:	e8 49 c5 fe ff       	call   c0000870 <strcat>
c0014327:	58                   	pop    eax
c0014328:	5a                   	pop    edx
c0014329:	68 ab 11 02 c0       	push   0xc00211ab
c001432e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014335:	51                   	push   ecx
c0014336:	e8 35 c5 fe ff       	call   c0000870 <strcat>
c001433b:	83 c4 10             	add    esp,0x10
c001433e:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014343:	0f 84 77 01 00 00    	je     c00144c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014349:	83 ec 0c             	sub    esp,0xc
c001434c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014353:	51                   	push   ecx
c0014354:	e8 f4 c4 ff ff       	call   c001084d <KePanic(char const*)>
c0014359:	83 c4 10             	add    esp,0x10
c001435c:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014360:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014364:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014369:	83 f8 01             	cmp    eax,0x1
c001436c:	0f 85 9b 00 00 00    	jne    c001440d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014372:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014376:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001437d:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0014381:	01 c8                	add    eax,ecx
c0014383:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001438b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001438f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014391:	0f 94 c2             	sete   dl
c0014394:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c001439c:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c00143a1:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c00143a5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143aa:	0f b6 d2             	movzx  edx,dl
c00143ad:	74 41                	je     c00143f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00143af:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00143b2:	85 d2                	test   edx,edx
c00143b4:	75 15                	jne    c00143cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00143b6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00143ba:	66 83 f8 0c          	cmp    ax,0xc
c00143be:	76 05                	jbe    c00143c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00143c0:	b8 0c 00 00 00       	mov    eax,0xc
c00143c5:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00143c9:	76 37                	jbe    c0014402 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00143cb:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00143d0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00143d4:	0f 84 e6 00 00 00    	je     c00144c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00143da:	83 ec 0c             	sub    esp,0xc
c00143dd:	68 2c 11 02 c0       	push   0xc002112c
c00143e2:	e8 66 c4 ff ff       	call   c001084d <KePanic(char const*)>
c00143e7:	83 c4 10             	add    esp,0x10
c00143ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00143ee:	eb 12                	jmp    c0014402 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00143f0:	01 c1                	add    ecx,eax
c00143f2:	85 d2                	test   edx,edx
c00143f4:	75 0c                	jne    c0014402 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00143f6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00143fa:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00143fe:	77 02                	ja     c0014402 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014400:	01 f1                	add    ecx,esi
c0014402:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014406:	89 08                	mov    DWORD PTR [eax],ecx
c0014408:	e9 ed 00 00 00       	jmp    c00144fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001440d:	83 f8 02             	cmp    eax,0x2
c0014410:	0f 85 81 00 00 00    	jne    c0014497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014416:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001441d:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014421:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014425:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001442d:	74 21                	je     c0014450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001442f:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014437:	74 17                	je     c0014450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014439:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c001443d:	ba 0a 00 00 00       	mov    edx,0xa
c0014442:	83 f9 0e             	cmp    ecx,0xe
c0014445:	77 03                	ja     c001444a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014447:	8d 51 fc             	lea    edx,[ecx-0x4]
c001444a:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c001444e:	76 1f                	jbe    c001446f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014450:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014455:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014459:	74 65                	je     c00144c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001445b:	83 ec 0c             	sub    esp,0xc
c001445e:	68 48 11 02 c0       	push   0xc0021148
c0014463:	e8 e5 c3 ff ff       	call   c001084d <KePanic(char const*)>
c0014468:	83 c4 10             	add    esp,0x10
c001446b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001446f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014474:	8b 10                	mov    edx,DWORD PTR [eax]
c0014476:	74 15                	je     c001448d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014478:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001447c:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014483:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014487:	01 d1                	add    ecx,edx
c0014489:	01 ce                	add    esi,ecx
c001448b:	eb 06                	jmp    c0014493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c001448d:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014491:	01 d6                	add    esi,edx
c0014493:	89 30                	mov    DWORD PTR [eax],esi
c0014495:	eb 63                	jmp    c00144fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014497:	56                   	push   esi
c0014498:	56                   	push   esi
c0014499:	50                   	push   eax
c001449a:	68 64 11 02 c0       	push   0xc0021164
c001449f:	e8 df 64 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00144a4:	83 c4 10             	add    esp,0x10
c00144a7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00144ac:	74 12                	je     c00144c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00144ae:	83 ec 0c             	sub    esp,0xc
c00144b1:	68 6f 11 02 c0       	push   0xc002116f
c00144b6:	e8 92 c3 ff ff       	call   c001084d <KePanic(char const*)>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	eb 3a                	jmp    c00144fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00144c0:	83 ec 0c             	sub    esp,0xc
c00144c3:	53                   	push   ebx
c00144c4:	e8 7d 6b ff ff       	call   c000b046 <File::close()>
c00144c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144d1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144d4:	e8 02 36 ff ff       	call   c0007adb <free>
c00144d9:	59                   	pop    ecx
c00144da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00144de:	e8 f8 35 ff ff       	call   c0007adb <free>
c00144e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144e6:	e8 f0 35 ff ff       	call   c0007adb <free>
c00144eb:	5b                   	pop    ebx
c00144ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144f0:	e8 e6 35 ff ff       	call   c0007adb <free>
c00144f5:	83 c4 10             	add    esp,0x10
c00144f8:	eb 1e                	jmp    c0014518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00144fa:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00144fe:	e9 4d fd ff ff       	jmp    c0014250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014503:	83 ec 0c             	sub    esp,0xc
c0014506:	57                   	push   edi
c0014507:	e8 cf 35 ff ff       	call   c0007adb <free>
c001450c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014510:	83 c4 10             	add    esp,0x10
c0014513:	e9 cc fc ff ff       	jmp    c00141e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014518:	31 c0                	xor    eax,eax
c001451a:	eb 32                	jmp    c001454e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c001451c:	83 ec 0c             	sub    esp,0xc
c001451f:	53                   	push   ebx
c0014520:	e8 21 6b ff ff       	call   c000b046 <File::close()>
c0014525:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014527:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001452a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001452d:	58                   	pop    eax
c001452e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014532:	e8 a4 35 ff ff       	call   c0007adb <free>
c0014537:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001453a:	e8 9c 35 ff ff       	call   c0007adb <free>
c001453f:	5a                   	pop    edx
c0014540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014544:	e8 92 35 ff ff       	call   c0007adb <free>
c0014549:	83 c4 10             	add    esp,0x10
c001454c:	b0 01                	mov    al,0x1
c001454e:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014554:	5b                   	pop    ebx
c0014555:	5e                   	pop    esi
c0014556:	5f                   	pop    edi
c0014557:	5d                   	pop    ebp
c0014558:	c3                   	ret    

c0014559 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014559:	56                   	push   esi
c001455a:	31 d2                	xor    edx,edx
c001455c:	53                   	push   ebx
c001455d:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014563:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014567:	39 d3                	cmp    ebx,edx
c0014569:	7e 1b                	jle    c0014586 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001456b:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014572:	39 c8                	cmp    eax,ecx
c0014574:	77 0d                	ja     c0014583 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014576:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c001457d:	01 c6                	add    esi,eax
c001457f:	39 ce                	cmp    esi,ecx
c0014581:	77 05                	ja     c0014588 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014583:	42                   	inc    edx
c0014584:	eb e1                	jmp    c0014567 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014586:	31 c0                	xor    eax,eax
c0014588:	5b                   	pop    ebx
c0014589:	5e                   	pop    esi
c001458a:	c3                   	ret    

c001458b <Thr::getDriverNameFromAddress(unsigned long)>:
c001458b:	53                   	push   ebx
c001458c:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014592:	31 c0                	xor    eax,eax
c0014594:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014598:	39 c3                	cmp    ebx,eax
c001459a:	7e 22                	jle    c00145be <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001459c:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c00145a3:	39 ca                	cmp    edx,ecx
c00145a5:	77 14                	ja     c00145bb <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00145a7:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c00145ae:	39 ca                	cmp    edx,ecx
c00145b0:	76 09                	jbe    c00145bb <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00145b2:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c00145b9:	eb 05                	jmp    c00145c0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00145bb:	40                   	inc    eax
c00145bc:	eb da                	jmp    c0014598 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00145be:	31 c0                	xor    eax,eax
c00145c0:	5b                   	pop    ebx
c00145c1:	c3                   	ret    

c00145c2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00145c2:	53                   	push   ebx
c00145c3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00145c7:	53                   	push   ebx
c00145c8:	e8 8c ff ff ff       	call   c0014559 <Thr::getDriverBaseFromAddress(unsigned long)>
c00145cd:	5a                   	pop    edx
c00145ce:	31 d2                	xor    edx,edx
c00145d0:	85 c0                	test   eax,eax
c00145d2:	74 04                	je     c00145d8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00145d4:	89 da                	mov    edx,ebx
c00145d6:	29 c2                	sub    edx,eax
c00145d8:	5b                   	pop    ebx
c00145d9:	89 d0                	mov    eax,edx
c00145db:	c3                   	ret    

c00145dc <Thr::loadDLL(char const*, bool)>:
c00145dc:	55                   	push   ebp
c00145dd:	57                   	push   edi
c00145de:	56                   	push   esi
c00145df:	53                   	push   ebx
c00145e0:	81 ec 34 01 00 00    	sub    esp,0x134
c00145e6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00145ed:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00145f4:	56                   	push   esi
c00145f5:	68 87 11 02 c0       	push   0xc0021187
c00145fa:	e8 84 63 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00145ff:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014606:	e8 c0 34 ff ff       	call   c0007acb <malloc>
c001460b:	83 c4 0c             	add    esp,0xc
c001460e:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014614:	56                   	push   esi
c0014615:	50                   	push   eax
c0014616:	89 c3                	mov    ebx,eax
c0014618:	e8 0f 69 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	85 db                	test   ebx,ebx
c0014622:	75 3c                	jne    c0014660 <Thr::loadDLL(char const*, bool)+0x84>
c0014624:	89 e8                	mov    eax,ebp
c0014626:	84 c0                	test   al,al
c0014628:	0f 84 e1 01 00 00    	je     c001480f <Thr::loadDLL(char const*, bool)+0x233>
c001462e:	50                   	push   eax
c001462f:	50                   	push   eax
c0014630:	68 98 11 02 c0       	push   0xc0021198
c0014635:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014639:	57                   	push   edi
c001463a:	e8 11 c0 fe ff       	call   c0000650 <strcpy>
c001463f:	58                   	pop    eax
c0014640:	5a                   	pop    edx
c0014641:	56                   	push   esi
c0014642:	57                   	push   edi
c0014643:	e8 28 c2 fe ff       	call   c0000870 <strcat>
c0014648:	59                   	pop    ecx
c0014649:	58                   	pop    eax
c001464a:	68 ab 11 02 c0       	push   0xc00211ab
c001464f:	57                   	push   edi
c0014650:	e8 1b c2 fe ff       	call   c0000870 <strcat>
c0014655:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014658:	e8 f0 c1 ff ff       	call   c001084d <KePanic(char const*)>
c001465d:	83 c4 10             	add    esp,0x10
c0014660:	50                   	push   eax
c0014661:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014665:	50                   	push   eax
c0014666:	8d 44 24 20          	lea    eax,[esp+0x20]
c001466a:	50                   	push   eax
c001466b:	53                   	push   ebx
c001466c:	e8 23 6c ff ff       	call   c000b294 <File::stat(unsigned long long*, bool*)>
c0014671:	83 c4 10             	add    esp,0x10
c0014674:	85 db                	test   ebx,ebx
c0014676:	74 0c                	je     c0014684 <Thr::loadDLL(char const*, bool)+0xa8>
c0014678:	8b 03                	mov    eax,DWORD PTR [ebx]
c001467a:	83 ec 0c             	sub    esp,0xc
c001467d:	53                   	push   ebx
c001467e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014681:	83 c4 10             	add    esp,0x10
c0014684:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014689:	75 0a                	jne    c0014695 <Thr::loadDLL(char const*, bool)+0xb9>
c001468b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001468f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014693:	75 3e                	jne    c00146d3 <Thr::loadDLL(char const*, bool)+0xf7>
c0014695:	89 e8                	mov    eax,ebp
c0014697:	31 db                	xor    ebx,ebx
c0014699:	84 c0                	test   al,al
c001469b:	0f 84 6e 01 00 00    	je     c001480f <Thr::loadDLL(char const*, bool)+0x233>
c00146a1:	50                   	push   eax
c00146a2:	50                   	push   eax
c00146a3:	68 98 11 02 c0       	push   0xc0021198
c00146a8:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00146ac:	53                   	push   ebx
c00146ad:	e8 9e bf fe ff       	call   c0000650 <strcpy>
c00146b2:	58                   	pop    eax
c00146b3:	5a                   	pop    edx
c00146b4:	56                   	push   esi
c00146b5:	53                   	push   ebx
c00146b6:	e8 b5 c1 fe ff       	call   c0000870 <strcat>
c00146bb:	59                   	pop    ecx
c00146bc:	5f                   	pop    edi
c00146bd:	68 ab 11 02 c0       	push   0xc00211ab
c00146c2:	53                   	push   ebx
c00146c3:	e8 a8 c1 fe ff       	call   c0000870 <strcat>
c00146c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146cb:	e8 7d c1 ff ff       	call   c001084d <KePanic(char const*)>
c00146d0:	83 c4 10             	add    esp,0x10
c00146d3:	53                   	push   ebx
c00146d4:	6a 03                	push   0x3
c00146d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146da:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146de:	05 ff 0f 00 00       	add    eax,0xfff
c00146e3:	83 d2 00             	adc    edx,0x0
c00146e6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00146ea:	50                   	push   eax
c00146eb:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00146f1:	e8 fa 56 ff ff       	call   c0009df0 <VAS::allocatePages(int, int)>
c00146f6:	89 c3                	mov    ebx,eax
c00146f8:	58                   	pop    eax
c00146f9:	5a                   	pop    edx
c00146fa:	53                   	push   ebx
c00146fb:	68 b2 fc 01 c0       	push   0xc001fcb2
c0014700:	e8 7e 62 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0014705:	89 34 24             	mov    DWORD PTR [esp],esi
c0014708:	e8 73 be fe ff       	call   c0000580 <strlen>
c001470d:	8b 3d a0 79 02 c0    	mov    edi,DWORD PTR ds:0xc00279a0
c0014713:	40                   	inc    eax
c0014714:	89 04 24             	mov    DWORD PTR [esp],eax
c0014717:	e8 af 33 ff ff       	call   c0007acb <malloc>
c001471c:	59                   	pop    ecx
c001471d:	89 04 bd c0 7d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8240],eax
c0014724:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014729:	5f                   	pop    edi
c001472a:	56                   	push   esi
c001472b:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c0014732:	e8 19 bf fe ff       	call   c0000650 <strcpy>
c0014737:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c001473c:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c0014743:	8d 50 01             	lea    edx,[eax+0x1]
c0014746:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c001474c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014750:	83 c4 0c             	add    esp,0xc
c0014753:	6a 01                	push   0x1
c0014755:	53                   	push   ebx
c0014756:	56                   	push   esi
c0014757:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c001475e:	e8 b5 f6 ff ff       	call   c0013e18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014763:	83 c4 10             	add    esp,0x10
c0014766:	89 c7                	mov    edi,eax
c0014768:	89 f8                	mov    eax,edi
c001476a:	83 f0 01             	xor    eax,0x1
c001476d:	84 c0                	test   al,al
c001476f:	74 18                	je     c0014789 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014771:	89 e8                	mov    eax,ebp
c0014773:	84 c0                	test   al,al
c0014775:	74 12                	je     c0014789 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014777:	83 ec 0c             	sub    esp,0xc
c001477a:	68 ad 11 02 c0       	push   0xc00211ad
c001477f:	e8 c9 c0 ff ff       	call   c001084d <KePanic(char const*)>
c0014784:	83 c4 10             	add    esp,0x10
c0014787:	eb 06                	jmp    c001478f <Thr::loadDLL(char const*, bool)+0x1b3>
c0014789:	89 f8                	mov    eax,edi
c001478b:	84 c0                	test   al,al
c001478d:	75 10                	jne    c001479f <Thr::loadDLL(char const*, bool)+0x1c3>
c001478f:	83 ec 0c             	sub    esp,0xc
c0014792:	68 cc 11 02 c0       	push   0xc00211cc
c0014797:	e8 b1 c0 ff ff       	call   c001084d <KePanic(char const*)>
c001479c:	83 c4 10             	add    esp,0x10
c001479f:	31 f6                	xor    esi,esi
c00147a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00147a9:	05 ff 0f 00 00       	add    eax,0xfff
c00147ae:	83 d2 00             	adc    edx,0x0
c00147b1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00147b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147b9:	c1 ea 0c             	shr    edx,0xc
c00147bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00147c0:	ba 00 00 00 00       	mov    edx,0x0
c00147c5:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00147c9:	89 d0                	mov    eax,edx
c00147cb:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00147cf:	73 32                	jae    c0014803 <Thr::loadDLL(char const*, bool)+0x227>
c00147d1:	50                   	push   eax
c00147d2:	50                   	push   eax
c00147d3:	89 f0                	mov    eax,esi
c00147d5:	c1 e0 0c             	shl    eax,0xc
c00147d8:	01 d8                	add    eax,ebx
c00147da:	50                   	push   eax
c00147db:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00147e1:	e8 12 51 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c00147e6:	83 c4 10             	add    esp,0x10
c00147e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00147eb:	a8 60                	test   al,0x60
c00147ed:	75 11                	jne    c0014800 <Thr::loadDLL(char const*, bool)+0x224>
c00147ef:	83 ec 0c             	sub    esp,0xc
c00147f2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147f7:	50                   	push   eax
c00147f8:	e8 70 35 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c00147fd:	83 c4 10             	add    esp,0x10
c0014800:	46                   	inc    esi
c0014801:	eb 9e                	jmp    c00147a1 <Thr::loadDLL(char const*, bool)+0x1c5>
c0014803:	89 f8                	mov    eax,edi
c0014805:	84 c0                	test   al,al
c0014807:	b8 00 00 00 00       	mov    eax,0x0
c001480c:	0f 44 d8             	cmove  ebx,eax
c001480f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014815:	89 d8                	mov    eax,ebx
c0014817:	5b                   	pop    ebx
c0014818:	5e                   	pop    esi
c0014819:	5f                   	pop    edi
c001481a:	5d                   	pop    ebp
c001481b:	c3                   	ret    

c001481c <Thr::executeDLL(unsigned long, void*)>:
c001481c:	56                   	push   esi
c001481d:	53                   	push   ebx
c001481e:	52                   	push   edx
c001481f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014823:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014827:	85 db                	test   ebx,ebx
c0014829:	75 10                	jne    c001483b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001482b:	83 ec 0c             	sub    esp,0xc
c001482e:	68 e8 11 02 c0       	push   0xc00211e8
c0014833:	e8 15 c0 ff ff       	call   c001084d <KePanic(char const*)>
c0014838:	83 c4 10             	add    esp,0x10
c001483b:	50                   	push   eax
c001483c:	50                   	push   eax
c001483d:	53                   	push   ebx
c001483e:	68 12 12 02 c0       	push   0xc0021212
c0014843:	e8 3b 61 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0014848:	89 d8                	mov    eax,ebx
c001484a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001484e:	83 c4 14             	add    esp,0x14
c0014851:	5b                   	pop    ebx
c0014852:	5e                   	pop    esi
c0014853:	ff e0                	jmp    eax
c0014855:	66 90                	xchg   ax,ax
c0014857:	90                   	nop

c0014858 <userModeEntryPoint(void*)>:
c0014858:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001485d:	83 e8 01             	sub    eax,0x1
c0014860:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0014865:	75 01                	jne    c0014868 <userModeEntryPoint(void*)+0x10>
c0014867:	fb                   	sti    
c0014868:	fb                   	sti    
c0014869:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001486e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014871:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014877:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001487b:	e9 bf b9 fe ff       	jmp    c000023f <goToUsermode>

c0014880 <changeTSS>:
c0014880:	83 ec 14             	sub    esp,0x14
c0014883:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014888:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001488b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014890:	c1 e2 15             	shl    edx,0x15
c0014893:	29 d0                	sub    eax,edx
c0014895:	50                   	push   eax
c0014896:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001489b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00148a1:	05 7c 11 00 00       	add    eax,0x117c
c00148a6:	50                   	push   eax
c00148a7:	e8 a0 46 ff ff       	call   c0008f4c <TSS::setESP(unsigned long)>
c00148ac:	83 c4 1c             	add    esp,0x1c
c00148af:	c3                   	ret    

c00148b0 <switchToThread(ThreadControlBlock*)>:
c00148b0:	57                   	push   edi
c00148b1:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00148b7:	56                   	push   esi
c00148b8:	53                   	push   ebx
c00148b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148bd:	85 c9                	test   ecx,ecx
c00148bf:	0f 85 8b 00 00 00    	jne    c0014950 <switchToThread(ThreadControlBlock*)+0xa0>
c00148c5:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00148c9:	81 fa ff 00 00 00    	cmp    edx,0xff
c00148cf:	74 7b                	je     c001494c <switchToThread(ThreadControlBlock*)+0x9c>
c00148d1:	b8 00 04 00 00       	mov    eax,0x400
c00148d6:	29 d0                	sub    eax,edx
c00148d8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00148db:	d1 f8                	sar    eax,1
c00148dd:	01 d0                	add    eax,edx
c00148df:	90                   	nop
c00148e0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00148e3:	e8 8e 27 00 00       	call   c0017076 <HalQueryPerformanceCounter()>
c00148e8:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c00148ed:	89 c6                	mov    esi,eax
c00148ef:	89 d7                	mov    edi,edx
c00148f1:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c00148f7:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c00148fc:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014902:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014908:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c001490e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014914:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c001491a:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014920:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014923:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014926:	01 c6                	add    esi,eax
c0014928:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001492b:	11 d7                	adc    edi,edx
c001492d:	83 ec 0c             	sub    esp,0xc
c0014930:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014933:	53                   	push   ebx
c0014934:	e8 3e b9 fe ff       	call   c0000277 <switchToThreadASM>
c0014939:	0f 20 c0             	mov    eax,cr0
c001493c:	83 c8 08             	or     eax,0x8
c001493f:	0f 22 c0             	mov    cr0,eax
c0014942:	83 c4 10             	add    esp,0x10
c0014945:	5b                   	pop    ebx
c0014946:	5e                   	pop    esi
c0014947:	5f                   	pop    edi
c0014948:	c3                   	ret    
c0014949:	8d 76 00             	lea    esi,[esi+0x0]
c001494c:	31 c0                	xor    eax,eax
c001494e:	eb 90                	jmp    c00148e0 <switchToThread(ThreadControlBlock*)+0x30>
c0014950:	5b                   	pop    ebx
c0014951:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c001495b:	5e                   	pop    esi
c001495c:	5f                   	pop    edi
c001495d:	c3                   	ret    
c001495e:	66 90                	xchg   ax,ax

c0014960 <Process::addArgs(char**)>:
c0014960:	57                   	push   edi
c0014961:	56                   	push   esi
c0014962:	53                   	push   ebx
c0014963:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014967:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001496b:	85 f6                	test   esi,esi
c001496d:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014977:	74 4f                	je     c00149c8 <Process::addArgs(char**)+0x68>
c0014979:	8b 06                	mov    eax,DWORD PTR [esi]
c001497b:	85 c0                	test   eax,eax
c001497d:	74 49                	je     c00149c8 <Process::addArgs(char**)+0x68>
c001497f:	31 db                	xor    ebx,ebx
c0014981:	8d 76 00             	lea    esi,[esi+0x0]
c0014984:	83 ec 0c             	sub    esp,0xc
c0014987:	50                   	push   eax
c0014988:	e8 f3 bb fe ff       	call   c0000580 <strlen>
c001498d:	83 c0 01             	add    eax,0x1
c0014990:	89 04 24             	mov    DWORD PTR [esp],eax
c0014993:	e8 33 31 ff ff       	call   c0007acb <malloc>
c0014998:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c001499f:	5a                   	pop    edx
c00149a0:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00149a3:	83 c3 01             	add    ebx,0x1
c00149a6:	59                   	pop    ecx
c00149a7:	52                   	push   edx
c00149a8:	50                   	push   eax
c00149a9:	e8 a2 bc fe ff       	call   c0000650 <strcpy>
c00149ae:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00149b4:	83 c4 10             	add    esp,0x10
c00149b7:	83 c1 01             	add    ecx,0x1
c00149ba:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00149c0:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00149c3:	85 c0                	test   eax,eax
c00149c5:	75 bd                	jne    c0014984 <Process::addArgs(char**)+0x24>
c00149c7:	90                   	nop
c00149c8:	5b                   	pop    ebx
c00149c9:	5e                   	pop    esi
c00149ca:	5f                   	pop    edi
c00149cb:	c3                   	ret    

c00149cc <Process::Process(char const*, Process*, char**)>:
c00149cc:	56                   	push   esi
c00149cd:	53                   	push   ebx
c00149ce:	83 ec 14             	sub    esp,0x14
c00149d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149d5:	05 0c 02 00 00       	add    eax,0x20c
c00149da:	bb 07 00 00 00       	mov    ebx,0x7
c00149df:	89 c6                	mov    esi,eax
c00149e1:	8d 76 00             	lea    esi,[esi+0x0]
c00149e4:	85 db                	test   ebx,ebx
c00149e6:	78 14                	js     c00149fc <Process::Process(char const*, Process*, char**)+0x30>
c00149e8:	83 ec 0c             	sub    esp,0xc
c00149eb:	56                   	push   esi
c00149ec:	e8 47 a5 00 00       	call   c001ef38 <ThreadControlBlock::ThreadControlBlock()>
c00149f1:	83 c4 10             	add    esp,0x10
c00149f4:	83 c6 5f             	add    esi,0x5f
c00149f7:	83 eb 01             	sub    ebx,0x1
c00149fa:	eb e8                	jmp    c00149e4 <Process::Process(char const*, Process*, char**)+0x18>
c00149fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a00:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014a07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a0b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014a12:	83 ec 0c             	sub    esp,0xc
c0014a15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a19:	e8 24 bc ff ff       	call   c0010642 <Krnl::newProcessEnv(Process*)>
c0014a1e:	83 c4 10             	add    esp,0x10
c0014a21:	89 c2                	mov    edx,eax
c0014a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a27:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014a2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a31:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014a3a:	a1 e0 23 02 c0       	mov    eax,ds:0xc00223e0
c0014a3f:	8d 50 01             	lea    edx,[eax+0x1]
c0014a42:	89 15 e0 23 02 c0    	mov    DWORD PTR ds:0xc00223e0,edx
c0014a48:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a4c:	89 02                	mov    DWORD PTR [edx],eax
c0014a4e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014a56:	83 ec 0c             	sub    esp,0xc
c0014a59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a5d:	e8 69 30 ff ff       	call   c0007acb <malloc>
c0014a62:	83 c4 10             	add    esp,0x10
c0014a65:	89 c3                	mov    ebx,eax
c0014a67:	83 ec 08             	sub    esp,0x8
c0014a6a:	6a 00                	push   0x0
c0014a6c:	53                   	push   ebx
c0014a6d:	e8 44 57 ff ff       	call   c000a1b6 <VAS::VAS(bool)>
c0014a72:	83 c4 10             	add    esp,0x10
c0014a75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a79:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a83:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014a8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a91:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a95:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014a9b:	e8 c6 c1 ff ff       	call   c0010c66 <KeInitSignals()>
c0014aa0:	89 c2                	mov    edx,eax
c0014aa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ab0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ab6:	85 c0                	test   eax,eax
c0014ab8:	74 42                	je     c0014afc <Process::Process(char const*, Process*, char**)+0x130>
c0014aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014abe:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ac4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014aca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ace:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ade:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014ae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ae8:	05 0c 01 00 00       	add    eax,0x10c
c0014aed:	83 ec 08             	sub    esp,0x8
c0014af0:	52                   	push   edx
c0014af1:	50                   	push   eax
c0014af2:	e8 59 bb fe ff       	call   c0000650 <strcpy>
c0014af7:	83 c4 10             	add    esp,0x10
c0014afa:	eb 64                	jmp    c0014b60 <Process::Process(char const*, Process*, char**)+0x194>
c0014afc:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014b04:	83 ec 0c             	sub    esp,0xc
c0014b07:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b0b:	e8 bb 2f ff ff       	call   c0007acb <malloc>
c0014b10:	83 c4 10             	add    esp,0x10
c0014b13:	89 c3                	mov    ebx,eax
c0014b15:	83 ec 08             	sub    esp,0x8
c0014b18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b1c:	53                   	push   ebx
c0014b1d:	e8 34 41 ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0014b22:	83 c4 10             	add    esp,0x10
c0014b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b29:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014b2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b39:	83 ec 0c             	sub    esp,0xc
c0014b3c:	50                   	push   eax
c0014b3d:	e8 c2 39 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0014b42:	83 c4 10             	add    esp,0x10
c0014b45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b49:	05 0c 01 00 00       	add    eax,0x10c
c0014b4e:	83 ec 08             	sub    esp,0x8
c0014b51:	68 31 12 02 c0       	push   0xc0021231
c0014b56:	50                   	push   eax
c0014b57:	e8 f4 ba fe ff       	call   c0000650 <strcpy>
c0014b5c:	83 c4 10             	add    esp,0x10
c0014b5f:	90                   	nop
c0014b60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b64:	83 c0 0c             	add    eax,0xc
c0014b67:	83 ec 08             	sub    esp,0x8
c0014b6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b6e:	50                   	push   eax
c0014b6f:	e8 dc ba fe ff       	call   c0000650 <strcpy>
c0014b74:	83 c4 10             	add    esp,0x10
c0014b77:	83 ec 08             	sub    esp,0x8
c0014b7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014b7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b82:	e8 d9 fd ff ff       	call   c0014960 <Process::addArgs(char**)>
c0014b87:	83 c4 10             	add    esp,0x10
c0014b8a:	83 ec 08             	sub    esp,0x8
c0014b8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b95:	e8 3f ed ff ff       	call   c00138d9 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014b9a:	83 c4 10             	add    esp,0x10
c0014b9d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014ba1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014ba5:	83 f0 01             	xor    eax,0x1
c0014ba8:	88 c2                	mov    dl,al
c0014baa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bae:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014bb4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014bb9:	83 ec 04             	sub    esp,0x4
c0014bbc:	50                   	push   eax
c0014bbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bc1:	68 88 12 02 c0       	push   0xc0021288
c0014bc6:	e8 b8 5d ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0014bcb:	83 c4 10             	add    esp,0x10
c0014bce:	90                   	nop
c0014bcf:	83 c4 14             	add    esp,0x14
c0014bd2:	5b                   	pop    ebx
c0014bd3:	5e                   	pop    esi
c0014bd4:	c3                   	ret    
c0014bd5:	90                   	nop
c0014bd6:	66 90                	xchg   ax,ax

c0014bd8 <Process::Process(bool, char const*, Process*, char**)>:
c0014bd8:	56                   	push   esi
c0014bd9:	53                   	push   ebx
c0014bda:	83 ec 24             	sub    esp,0x24
c0014bdd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014be1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014be5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014be9:	05 0c 02 00 00       	add    eax,0x20c
c0014bee:	bb 07 00 00 00       	mov    ebx,0x7
c0014bf3:	89 c6                	mov    esi,eax
c0014bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0014bf8:	85 db                	test   ebx,ebx
c0014bfa:	78 14                	js     c0014c10 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014bfc:	83 ec 0c             	sub    esp,0xc
c0014bff:	56                   	push   esi
c0014c00:	e8 33 a3 00 00       	call   c001ef38 <ThreadControlBlock::ThreadControlBlock()>
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	83 c6 5f             	add    esi,0x5f
c0014c0b:	83 eb 01             	sub    ebx,0x1
c0014c0e:	eb e8                	jmp    c0014bf8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014c10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c14:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014c1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c1f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014c26:	83 ec 0c             	sub    esp,0xc
c0014c29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014c2d:	e8 10 ba ff ff       	call   c0010642 <Krnl::newProcessEnv(Process*)>
c0014c32:	83 c4 10             	add    esp,0x10
c0014c35:	89 c2                	mov    edx,eax
c0014c37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c3b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014c41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c45:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014c4e:	a1 e0 23 02 c0       	mov    eax,ds:0xc00223e0
c0014c53:	8d 50 01             	lea    edx,[eax+0x1]
c0014c56:	89 15 e0 23 02 c0    	mov    DWORD PTR ds:0xc00223e0,edx
c0014c5c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014c60:	89 02                	mov    DWORD PTR [edx],eax
c0014c62:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014c6a:	83 ec 0c             	sub    esp,0xc
c0014c6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c71:	e8 55 2e ff ff       	call   c0007acb <malloc>
c0014c76:	83 c4 10             	add    esp,0x10
c0014c79:	89 c3                	mov    ebx,eax
c0014c7b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014c80:	83 ec 08             	sub    esp,0x8
c0014c83:	50                   	push   eax
c0014c84:	53                   	push   ebx
c0014c85:	e8 2c 55 ff ff       	call   c000a1b6 <VAS::VAS(bool)>
c0014c8a:	83 c4 10             	add    esp,0x10
c0014c8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c91:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014c97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c9b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014ca5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ca9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014cad:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014cb3:	e8 ae bf ff ff       	call   c0010c66 <KeInitSignals()>
c0014cb8:	89 c2                	mov    edx,eax
c0014cba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cbe:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014cc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cce:	85 c0                	test   eax,eax
c0014cd0:	74 42                	je     c0014d14 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014cd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cd6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cdc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014ce2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014cec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cf0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cf6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014cfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d00:	05 0c 01 00 00       	add    eax,0x10c
c0014d05:	83 ec 08             	sub    esp,0x8
c0014d08:	52                   	push   edx
c0014d09:	50                   	push   eax
c0014d0a:	e8 41 b9 fe ff       	call   c0000650 <strcpy>
c0014d0f:	83 c4 10             	add    esp,0x10
c0014d12:	eb 64                	jmp    c0014d78 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014d14:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014d1c:	83 ec 0c             	sub    esp,0xc
c0014d1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d23:	e8 a3 2d ff ff       	call   c0007acb <malloc>
c0014d28:	83 c4 10             	add    esp,0x10
c0014d2b:	89 c3                	mov    ebx,eax
c0014d2d:	83 ec 08             	sub    esp,0x8
c0014d30:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d34:	53                   	push   ebx
c0014d35:	e8 1c 3f ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0014d3a:	83 c4 10             	add    esp,0x10
c0014d3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d41:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014d47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d4b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d51:	83 ec 0c             	sub    esp,0xc
c0014d54:	50                   	push   eax
c0014d55:	e8 aa 37 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0014d5a:	83 c4 10             	add    esp,0x10
c0014d5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d61:	05 0c 01 00 00       	add    eax,0x10c
c0014d66:	83 ec 08             	sub    esp,0x8
c0014d69:	68 31 12 02 c0       	push   0xc0021231
c0014d6e:	50                   	push   eax
c0014d6f:	e8 dc b8 fe ff       	call   c0000650 <strcpy>
c0014d74:	83 c4 10             	add    esp,0x10
c0014d77:	90                   	nop
c0014d78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d7c:	83 c0 0c             	add    eax,0xc
c0014d7f:	83 ec 08             	sub    esp,0x8
c0014d82:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d86:	50                   	push   eax
c0014d87:	e8 c4 b8 fe ff       	call   c0000650 <strcpy>
c0014d8c:	83 c4 10             	add    esp,0x10
c0014d8f:	83 ec 08             	sub    esp,0x8
c0014d92:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014d96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d9a:	e8 c1 fb ff ff       	call   c0014960 <Process::addArgs(char**)>
c0014d9f:	83 c4 10             	add    esp,0x10
c0014da2:	90                   	nop
c0014da3:	83 c4 24             	add    esp,0x24
c0014da6:	5b                   	pop    ebx
c0014da7:	5e                   	pop    esi
c0014da8:	c3                   	ret    
c0014da9:	8d 76 00             	lea    esi,[esi+0x0]

c0014dac <taskStartupFunction>:
c0014dac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014db1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014db4:	c3                   	ret    
c0014db5:	90                   	nop
c0014db6:	66 90                	xchg   ax,ax

c0014db8 <Semaphore::Semaphore(int)>:
c0014db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014dc0:	89 10                	mov    DWORD PTR [eax],edx
c0014dc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dc6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ddc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014de3:	90                   	nop
c0014de4:	c3                   	ret    
c0014de5:	90                   	nop
c0014de6:	66 90                	xchg   ax,ax

c0014de8 <Mutex::Mutex()>:
c0014de8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dec:	6a 01                	push   0x1
c0014dee:	50                   	push   eax
c0014def:	e8 c4 ff ff ff       	call   c0014db8 <Semaphore::Semaphore(int)>
c0014df4:	83 c4 08             	add    esp,0x8
c0014df7:	90                   	nop
c0014df8:	c3                   	ret    
c0014df9:	90                   	nop
c0014dfa:	66 90                	xchg   ax,ax

c0014dfc <Process::createThread(void (*)(void*), void*, int)>:
c0014dfc:	57                   	push   edi
c0014dfd:	31 c9                	xor    ecx,ecx
c0014dff:	56                   	push   esi
c0014e00:	53                   	push   ebx
c0014e01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e05:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014e0c:	89 f2                	mov    edx,esi
c0014e0e:	66 90                	xchg   ax,ax
c0014e10:	0f b7 c2             	movzx  eax,dx
c0014e13:	80 e2 01             	and    dl,0x1
c0014e16:	74 14                	je     c0014e2c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014e18:	d1 f8                	sar    eax,1
c0014e1a:	83 c1 01             	add    ecx,0x1
c0014e1d:	83 f9 10             	cmp    ecx,0x10
c0014e20:	89 c2                	mov    edx,eax
c0014e22:	75 ec                	jne    c0014e10 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014e24:	31 db                	xor    ebx,ebx
c0014e26:	89 d8                	mov    eax,ebx
c0014e28:	5b                   	pop    ebx
c0014e29:	5e                   	pop    esi
c0014e2a:	5f                   	pop    edi
c0014e2b:	c3                   	ret    
c0014e2c:	b8 01 00 00 00       	mov    eax,0x1
c0014e31:	d3 e0                	shl    eax,cl
c0014e33:	09 c6                	or     esi,eax
c0014e35:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014e3c:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014e3f:	c1 e0 05             	shl    eax,0x5
c0014e42:	29 c8                	sub    eax,ecx
c0014e44:	01 d8                	add    eax,ebx
c0014e46:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014e4d:	75 0d                	jne    c0014e5c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014e4f:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014e59:	8d 76 00             	lea    esi,[esi+0x0]
c0014e5c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014e62:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014e65:	83 ec 0c             	sub    esp,0xc
c0014e68:	c1 e6 05             	shl    esi,0x5
c0014e6b:	29 ce                	sub    esi,ecx
c0014e6d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014e70:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014e73:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014e79:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014e7f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014e85:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014e8c:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014e92:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e96:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014e9c:	89 ca                	mov    edx,ecx
c0014e9e:	f7 da                	neg    edx
c0014ea0:	c1 e2 15             	shl    edx,0x15
c0014ea3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014ea9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014eaf:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0014eb3:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014ebd:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014ec3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ec7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014ecd:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014ed7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014ee1:	68 00 01 00 00       	push   0x100
c0014ee6:	e8 e0 2b ff ff       	call   c0007acb <malloc>
c0014eeb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014eee:	58                   	pop    eax
c0014eef:	5a                   	pop    edx
c0014ef0:	53                   	push   ebx
c0014ef1:	68 84 81 02 c0       	push   0xc0028184
c0014ef6:	e8 d5 9d 00 00       	call   c001ecd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014efb:	83 c4 10             	add    esp,0x10
c0014efe:	89 d8                	mov    eax,ebx
c0014f00:	5b                   	pop    ebx
c0014f01:	5e                   	pop    esi
c0014f02:	5f                   	pop    edi
c0014f03:	c3                   	ret    

c0014f04 <Process::createUserThread()>:
c0014f04:	83 ec 0c             	sub    esp,0xc
c0014f07:	68 80 00 00 00       	push   0x80
c0014f0c:	6a 00                	push   0x0
c0014f0e:	68 58 48 01 c0       	push   0xc0014858
c0014f13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f17:	50                   	push   eax
c0014f18:	e8 df fe ff ff       	call   c0014dfc <Process::createThread(void (*)(void*), void*, int)>
c0014f1d:	83 c4 1c             	add    esp,0x1c
c0014f20:	c3                   	ret    
c0014f21:	8d 76 00             	lea    esi,[esi+0x0]

c0014f24 <setupMultitasking(void (*)())>:
c0014f24:	56                   	push   esi
c0014f25:	53                   	push   ebx
c0014f26:	83 ec 04             	sub    esp,0x4
c0014f29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f2d:	eb 11                	jmp    c0014f40 <setupMultitasking(void (*)())+0x1c>
c0014f2f:	90                   	nop
c0014f30:	83 ec 0c             	sub    esp,0xc
c0014f33:	68 84 81 02 c0       	push   0xc0028184
c0014f38:	e8 d7 9c 00 00       	call   c001ec14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f3d:	83 c4 10             	add    esp,0x10
c0014f40:	83 ec 0c             	sub    esp,0xc
c0014f43:	68 84 81 02 c0       	push   0xc0028184
c0014f48:	e8 a3 9c 00 00       	call   c001ebf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014f4d:	83 c4 10             	add    esp,0x10
c0014f50:	84 c0                	test   al,al
c0014f52:	74 dc                	je     c0014f30 <setupMultitasking(void (*)())+0xc>
c0014f54:	83 ec 0c             	sub    esp,0xc
c0014f57:	68 24 07 00 00       	push   0x724
c0014f5c:	e8 6a 2b ff ff       	call   c0007acb <malloc>
c0014f61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014f68:	6a 00                	push   0x0
c0014f6a:	68 35 12 02 c0       	push   0xc0021235
c0014f6f:	6a 01                	push   0x1
c0014f71:	50                   	push   eax
c0014f72:	89 c3                	mov    ebx,eax
c0014f74:	e8 5f fc ff ff       	call   c0014bd8 <Process::Process(bool, char const*, Process*, char**)>
c0014f79:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014f7f:	83 c4 14             	add    esp,0x14
c0014f82:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014f88:	50                   	push   eax
c0014f89:	e8 cb 37 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0014f8e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014f95:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014f9f:	83 c8 01             	or     eax,0x1
c0014fa2:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014fa9:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014faf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fb2:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014fbc:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014fc2:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014fcc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014fd2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014fdc:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014fe6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014fec:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014ff2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014ffc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015006:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c001500d:	e8 b9 2a ff ff       	call   c0007acb <malloc>
c0015012:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015018:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001501e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015024:	5a                   	pop    edx
c0015025:	59                   	pop    ecx
c0015026:	68 31 12 02 c0       	push   0xc0021231
c001502b:	50                   	push   eax
c001502c:	e8 1f b6 fe ff       	call   c0000650 <strcpy>
c0015031:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015038:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001503c:	83 c4 14             	add    esp,0x14
c001503f:	5b                   	pop    ebx
c0015040:	5e                   	pop    esi
c0015041:	e9 23 b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015046:	66 90                	xchg   ax,ax

c0015048 <schedule()>:
c0015048:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c001504e:	85 d2                	test   edx,edx
c0015050:	74 0e                	je     c0015060 <schedule()+0x18>
c0015052:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c001505c:	c3                   	ret    
c001505d:	8d 76 00             	lea    esi,[esi+0x0]
c0015060:	53                   	push   ebx
c0015061:	83 ec 14             	sub    esp,0x14
c0015064:	68 84 81 02 c0       	push   0xc0028184
c0015069:	e8 82 9b 00 00       	call   c001ebf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001506e:	83 c4 10             	add    esp,0x10
c0015071:	84 c0                	test   al,al
c0015073:	75 3f                	jne    c00150b4 <schedule()+0x6c>
c0015075:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001507a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001507d:	83 fa 01             	cmp    edx,0x1
c0015080:	74 3a                	je     c00150bc <schedule()+0x74>
c0015082:	66 90                	xchg   ax,ax
c0015084:	83 ec 0c             	sub    esp,0xc
c0015087:	68 84 81 02 c0       	push   0xc0028184
c001508c:	e8 7b 9b 00 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015091:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015098:	89 c3                	mov    ebx,eax
c001509a:	e8 75 9b 00 00       	call   c001ec14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001509f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00150a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150a9:	e8 02 f8 ff ff       	call   c00148b0 <switchToThread(ThreadControlBlock*)>
c00150ae:	83 c4 10             	add    esp,0x10
c00150b1:	8d 76 00             	lea    esi,[esi+0x0]
c00150b4:	83 c4 08             	add    esp,0x8
c00150b7:	5b                   	pop    ebx
c00150b8:	c3                   	ret    
c00150b9:	8d 76 00             	lea    esi,[esi+0x0]
c00150bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00150c3:	83 ec 08             	sub    esp,0x8
c00150c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150cb:	50                   	push   eax
c00150cc:	68 84 81 02 c0       	push   0xc0028184
c00150d1:	e8 fa 9b 00 00       	call   c001ecd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150d6:	83 c4 10             	add    esp,0x10
c00150d9:	eb a9                	jmp    c0015084 <schedule()+0x3c>
c00150db:	90                   	nop

c00150dc <Semaphore::tryAcquire()>:
c00150dc:	53                   	push   ebx
c00150dd:	83 ec 08             	sub    esp,0x8
c00150e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00150e4:	fa                   	cli    
c00150e5:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00150eb:	8d 42 01             	lea    eax,[edx+0x1]
c00150ee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00150f3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00150f8:	8d 58 01             	lea    ebx,[eax+0x1]
c00150fb:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015101:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015104:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015106:	7c 2c                	jl     c0015134 <Semaphore::tryAcquire()+0x58>
c0015108:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001510d:	85 c0                	test   eax,eax
c001510f:	75 0b                	jne    c001511c <Semaphore::tryAcquire()+0x40>
c0015111:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015116:	85 c0                	test   eax,eax
c0015118:	75 5a                	jne    c0015174 <Semaphore::tryAcquire()+0x98>
c001511a:	66 90                	xchg   ax,ax
c001511c:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015122:	31 c0                	xor    eax,eax
c0015124:	85 d2                	test   edx,edx
c0015126:	75 04                	jne    c001512c <Semaphore::tryAcquire()+0x50>
c0015128:	fb                   	sti    
c0015129:	8d 76 00             	lea    esi,[esi+0x0]
c001512c:	83 c4 08             	add    esp,0x8
c001512f:	5b                   	pop    ebx
c0015130:	c3                   	ret    
c0015131:	8d 76 00             	lea    esi,[esi+0x0]
c0015134:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015139:	83 c3 01             	add    ebx,0x1
c001513c:	85 c0                	test   eax,eax
c001513e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015141:	75 21                	jne    c0015164 <Semaphore::tryAcquire()+0x88>
c0015143:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015149:	85 c9                	test   ecx,ecx
c001514b:	74 17                	je     c0015164 <Semaphore::tryAcquire()+0x88>
c001514d:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015157:	e8 ec fe ff ff       	call   c0015048 <schedule()>
c001515c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015161:	8d 50 ff             	lea    edx,[eax-0x1]
c0015164:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001516a:	85 d2                	test   edx,edx
c001516c:	b0 01                	mov    al,0x1
c001516e:	75 bc                	jne    c001512c <Semaphore::tryAcquire()+0x50>
c0015170:	eb b6                	jmp    c0015128 <Semaphore::tryAcquire()+0x4c>
c0015172:	66 90                	xchg   ax,ax
c0015174:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001517e:	e8 c5 fe ff ff       	call   c0015048 <schedule()>
c0015183:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015188:	8d 50 ff             	lea    edx,[eax-0x1]
c001518b:	31 c0                	xor    eax,eax
c001518d:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015193:	85 d2                	test   edx,edx
c0015195:	75 95                	jne    c001512c <Semaphore::tryAcquire()+0x50>
c0015197:	eb 8f                	jmp    c0015128 <Semaphore::tryAcquire()+0x4c>
c0015199:	90                   	nop
c001519a:	66 90                	xchg   ax,ax

c001519c <Semaphore::assertLocked(char const*)>:
c001519c:	83 ec 0c             	sub    esp,0xc
c001519f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151a3:	fa                   	cli    
c00151a4:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00151aa:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151af:	83 c1 01             	add    ecx,0x1
c00151b2:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00151b8:	8d 48 01             	lea    ecx,[eax+0x1]
c00151bb:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00151c1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00151c3:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00151c6:	7c 28                	jl     c00151f0 <Semaphore::assertLocked(char const*)+0x54>
c00151c8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00151cd:	85 c0                	test   eax,eax
c00151cf:	75 0b                	jne    c00151dc <Semaphore::assertLocked(char const*)+0x40>
c00151d1:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00151d6:	85 c0                	test   eax,eax
c00151d8:	75 32                	jne    c001520c <Semaphore::assertLocked(char const*)+0x70>
c00151da:	66 90                	xchg   ax,ax
c00151dc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151e1:	83 e8 01             	sub    eax,0x1
c00151e4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151e9:	75 01                	jne    c00151ec <Semaphore::assertLocked(char const*)+0x50>
c00151eb:	fb                   	sti    
c00151ec:	83 c4 0c             	add    esp,0xc
c00151ef:	c3                   	ret    
c00151f0:	83 ec 0c             	sub    esp,0xc
c00151f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151f7:	52                   	push   edx
c00151f8:	e8 50 b6 ff ff       	call   c001084d <KePanic(char const*)>
c00151fd:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015202:	83 c4 10             	add    esp,0x10
c0015205:	83 e8 01             	sub    eax,0x1
c0015208:	eb be                	jmp    c00151c8 <Semaphore::assertLocked(char const*)+0x2c>
c001520a:	66 90                	xchg   ax,ax
c001520c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015216:	e8 2d fe ff ff       	call   c0015048 <schedule()>
c001521b:	eb bf                	jmp    c00151dc <Semaphore::assertLocked(char const*)+0x40>
c001521d:	8d 76 00             	lea    esi,[esi+0x0]

c0015220 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015220:	83 ec 0c             	sub    esp,0xc
c0015223:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015228:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001522c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001522f:	e8 14 fe ff ff       	call   c0015048 <schedule()>
c0015234:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015239:	83 e8 01             	sub    eax,0x1
c001523c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015241:	75 01                	jne    c0015244 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015243:	fb                   	sti    
c0015244:	83 c4 0c             	add    esp,0xc
c0015247:	c3                   	ret    

c0015248 <blockTask(TaskState)>:
c0015248:	83 ec 0c             	sub    esp,0xc
c001524b:	fa                   	cli    
c001524c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015251:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015255:	83 c0 01             	add    eax,0x1
c0015258:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001525d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015262:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015265:	e8 de fd ff ff       	call   c0015048 <schedule()>
c001526a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001526f:	83 e8 01             	sub    eax,0x1
c0015272:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015277:	75 03                	jne    c001527c <blockTask(TaskState)+0x34>
c0015279:	fb                   	sti    
c001527a:	66 90                	xchg   ax,ax
c001527c:	83 c4 0c             	add    esp,0xc
c001527f:	c3                   	ret    

c0015280 <waitTask(int, int*, int)>:
c0015280:	83 ec 18             	sub    esp,0x18
c0015283:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015288:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001528c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001528f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015298:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001529b:	6a 07                	push   0x7
c001529d:	e8 a6 ff ff ff       	call   c0015248 <blockTask(TaskState)>
c00152a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a7:	83 c4 10             	add    esp,0x10
c00152aa:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00152ad:	85 d2                	test   edx,edx
c00152af:	74 0b                	je     c00152bc <waitTask(int, int*, int)+0x3c>
c00152b1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00152b4:	89 02                	mov    DWORD PTR [edx],eax
c00152b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152bb:	90                   	nop
c00152bc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00152bf:	83 c4 0c             	add    esp,0xc
c00152c2:	c3                   	ret    
c00152c3:	90                   	nop

c00152c4 <milliTenthSleepUntil(unsigned int)>:
c00152c4:	83 ec 0c             	sub    esp,0xc
c00152c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152cb:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00152d1:	76 05                	jbe    c00152d8 <milliTenthSleepUntil(unsigned int)+0x14>
c00152d3:	90                   	nop
c00152d4:	83 c4 0c             	add    esp,0xc
c00152d7:	c3                   	ret    
c00152d8:	fa                   	cli    
c00152d9:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00152df:	83 ec 08             	sub    esp,0x8
c00152e2:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00152e8:	83 c2 01             	add    edx,0x1
c00152eb:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00152f1:	83 c1 01             	add    ecx,0x1
c00152f4:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00152fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015300:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015303:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015308:	50                   	push   eax
c0015309:	68 78 81 02 c0       	push   0xc0028178
c001530e:	e8 bd 99 00 00       	call   c001ecd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015313:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001531a:	e8 29 ff ff ff       	call   c0015248 <blockTask(TaskState)>
c001531f:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015324:	83 c4 10             	add    esp,0x10
c0015327:	83 e8 01             	sub    eax,0x1
c001532a:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001532f:	85 c0                	test   eax,eax
c0015331:	75 09                	jne    c001533c <milliTenthSleepUntil(unsigned int)+0x78>
c0015333:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015338:	85 c0                	test   eax,eax
c001533a:	75 14                	jne    c0015350 <milliTenthSleepUntil(unsigned int)+0x8c>
c001533c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015341:	83 e8 01             	sub    eax,0x1
c0015344:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015349:	75 89                	jne    c00152d4 <milliTenthSleepUntil(unsigned int)+0x10>
c001534b:	fb                   	sti    
c001534c:	83 c4 0c             	add    esp,0xc
c001534f:	c3                   	ret    
c0015350:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001535a:	e8 e9 fc ff ff       	call   c0015048 <schedule()>
c001535f:	eb db                	jmp    c001533c <milliTenthSleepUntil(unsigned int)+0x78>
c0015361:	8d 76 00             	lea    esi,[esi+0x0]

c0015364 <milliTenthSleep(unsigned int)>:
c0015364:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015368:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c001536d:	01 c2                	add    edx,eax
c001536f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015373:	e9 4c ff ff ff       	jmp    c00152c4 <milliTenthSleepUntil(unsigned int)>

c0015378 <sleep(unsigned int)>:
c0015378:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015380:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015384:	eb de                	jmp    c0015364 <milliTenthSleep(unsigned int)>
c0015386:	66 90                	xchg   ax,ax

c0015388 <Semaphore::acquire()>:
c0015388:	83 ec 0c             	sub    esp,0xc
c001538b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001538f:	fa                   	cli    
c0015390:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015395:	83 c0 01             	add    eax,0x1
c0015398:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001539d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153a2:	8d 48 01             	lea    ecx,[eax+0x1]
c00153a5:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00153ab:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00153ae:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00153b0:	7d 2e                	jge    c00153e0 <Semaphore::acquire()+0x58>
c00153b2:	83 c1 01             	add    ecx,0x1
c00153b5:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00153b8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153bd:	85 c0                	test   eax,eax
c00153bf:	75 0b                	jne    c00153cc <Semaphore::acquire()+0x44>
c00153c1:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153c6:	85 c0                	test   eax,eax
c00153c8:	75 66                	jne    c0015430 <Semaphore::acquire()+0xa8>
c00153ca:	66 90                	xchg   ax,ax
c00153cc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153d1:	83 e8 01             	sub    eax,0x1
c00153d4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153d9:	75 01                	jne    c00153dc <Semaphore::acquire()+0x54>
c00153db:	fb                   	sti    
c00153dc:	83 c4 0c             	add    esp,0xc
c00153df:	c3                   	ret    
c00153e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153e5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00153ec:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00153ef:	85 c9                	test   ecx,ecx
c00153f1:	74 51                	je     c0015444 <Semaphore::acquire()+0xbc>
c00153f3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00153f6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00153fc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00153ff:	90                   	nop
c0015400:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015405:	83 ec 0c             	sub    esp,0xc
c0015408:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001540b:	68 b4 12 02 c0       	push   0xc00212b4
c0015410:	e8 6e 55 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0015415:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001541c:	e8 27 fe ff ff       	call   c0015248 <blockTask(TaskState)>
c0015421:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015426:	83 c4 10             	add    esp,0x10
c0015429:	83 e8 01             	sub    eax,0x1
c001542c:	eb 8a                	jmp    c00153b8 <Semaphore::acquire()+0x30>
c001542e:	66 90                	xchg   ax,ax
c0015430:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001543a:	e8 09 fc ff ff       	call   c0015048 <schedule()>
c001543f:	eb 8b                	jmp    c00153cc <Semaphore::acquire()+0x44>
c0015441:	8d 76 00             	lea    esi,[esi+0x0]
c0015444:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015449:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001544c:	eb b2                	jmp    c0015400 <Semaphore::acquire()+0x78>
c001544e:	66 90                	xchg   ax,ax

c0015450 <taskReturned>:
c0015450:	83 ec 18             	sub    esp,0x18
c0015453:	68 d4 12 02 c0       	push   0xc00212d4
c0015458:	e8 f0 b3 ff ff       	call   c001084d <KePanic(char const*)>
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	83 ec 0c             	sub    esp,0xc
c0015463:	6a 02                	push   0x2
c0015465:	e8 de fd ff ff       	call   c0015248 <blockTask(TaskState)>
c001546a:	fa                   	cli    
c001546b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015470:	83 c0 01             	add    eax,0x1
c0015473:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015478:	e8 cb fb ff ff       	call   c0015048 <schedule()>
c001547d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015482:	83 c4 10             	add    esp,0x10
c0015485:	83 e8 01             	sub    eax,0x1
c0015488:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001548d:	85 c0                	test   eax,eax
c001548f:	75 cf                	jne    c0015460 <taskReturned+0x10>
c0015491:	fb                   	sti    
c0015492:	eb cc                	jmp    c0015460 <taskReturned+0x10>

c0015494 <Thr::processFromPID(int)>:
c0015494:	57                   	push   edi
c0015495:	56                   	push   esi
c0015496:	53                   	push   ebx
c0015497:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001549b:	fa                   	cli    
c001549c:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00154a2:	83 ec 0c             	sub    esp,0xc
c00154a5:	68 84 81 02 c0       	push   0xc0028184
c00154aa:	83 c1 01             	add    ecx,0x1
c00154ad:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00154b3:	e8 54 97 00 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154b8:	83 c4 10             	add    esp,0x10
c00154bb:	89 c7                	mov    edi,eax
c00154bd:	eb 15                	jmp    c00154d4 <Thr::processFromPID(int)+0x40>
c00154bf:	90                   	nop
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	68 84 81 02 c0       	push   0xc0028184
c00154c8:	e8 3f 97 00 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154cd:	83 c4 10             	add    esp,0x10
c00154d0:	39 f8                	cmp    eax,edi
c00154d2:	74 50                	je     c0015524 <Thr::processFromPID(int)+0x90>
c00154d4:	83 ec 0c             	sub    esp,0xc
c00154d7:	68 84 81 02 c0       	push   0xc0028184
c00154dc:	e8 2b 97 00 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154e1:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00154e8:	89 c3                	mov    ebx,eax
c00154ea:	e8 25 97 00 00       	call   c001ec14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00154ef:	58                   	pop    eax
c00154f0:	5a                   	pop    edx
c00154f1:	53                   	push   ebx
c00154f2:	68 84 81 02 c0       	push   0xc0028184
c00154f7:	e8 d4 97 00 00       	call   c001ecd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00154fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	39 30                	cmp    DWORD PTR [eax],esi
c0015504:	75 ba                	jne    c00154c0 <Thr::processFromPID(int)+0x2c>
c0015506:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001550b:	83 e8 01             	sub    eax,0x1
c001550e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015513:	74 0b                	je     c0015520 <Thr::processFromPID(int)+0x8c>
c0015515:	8d 76 00             	lea    esi,[esi+0x0]
c0015518:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001551b:	90                   	nop
c001551c:	5b                   	pop    ebx
c001551d:	5e                   	pop    esi
c001551e:	5f                   	pop    edi
c001551f:	c3                   	ret    
c0015520:	fb                   	sti    
c0015521:	eb f5                	jmp    c0015518 <Thr::processFromPID(int)+0x84>
c0015523:	90                   	nop
c0015524:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015529:	8d 50 ff             	lea    edx,[eax-0x1]
c001552c:	31 c0                	xor    eax,eax
c001552e:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015534:	85 d2                	test   edx,edx
c0015536:	75 e4                	jne    c001551c <Thr::processFromPID(int)+0x88>
c0015538:	fb                   	sti    
c0015539:	5b                   	pop    ebx
c001553a:	5e                   	pop    esi
c001553b:	5f                   	pop    edi
c001553c:	c3                   	ret    
c001553d:	8d 76 00             	lea    esi,[esi+0x0]

c0015540 <unblockTask(ThreadControlBlock*)>:
c0015540:	53                   	push   ebx
c0015541:	83 ec 08             	sub    esp,0x8
c0015544:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015548:	fa                   	cli    
c0015549:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001554e:	83 c0 01             	add    eax,0x1
c0015551:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015556:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015559:	85 c0                	test   eax,eax
c001555b:	74 67                	je     c00155c4 <unblockTask(ThreadControlBlock*)+0x84>
c001555d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015560:	83 f8 01             	cmp    eax,0x1
c0015563:	74 37                	je     c001559c <unblockTask(ThreadControlBlock*)+0x5c>
c0015565:	83 ec 0c             	sub    esp,0xc
c0015568:	68 84 81 02 c0       	push   0xc0028184
c001556d:	e8 9a 96 00 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015572:	83 c4 10             	add    esp,0x10
c0015575:	85 c0                	test   eax,eax
c0015577:	75 1b                	jne    c0015594 <unblockTask(ThreadControlBlock*)+0x54>
c0015579:	eb 5d                	jmp    c00155d8 <unblockTask(ThreadControlBlock*)+0x98>
c001557b:	90                   	nop
c001557c:	83 ec 08             	sub    esp,0x8
c001557f:	50                   	push   eax
c0015580:	68 84 81 02 c0       	push   0xc0028184
c0015585:	e8 a2 99 00 00       	call   c001ef2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001558a:	83 c4 10             	add    esp,0x10
c001558d:	85 c0                	test   eax,eax
c001558f:	74 47                	je     c00155d8 <unblockTask(ThreadControlBlock*)+0x98>
c0015591:	8d 76 00             	lea    esi,[esi+0x0]
c0015594:	39 c3                	cmp    ebx,eax
c0015596:	75 e4                	jne    c001557c <unblockTask(ThreadControlBlock*)+0x3c>
c0015598:	eb 12                	jmp    c00155ac <unblockTask(ThreadControlBlock*)+0x6c>
c001559a:	66 90                	xchg   ax,ax
c001559c:	83 ec 0c             	sub    esp,0xc
c001559f:	68 53 12 02 c0       	push   0xc0021253
c00155a4:	e8 da 53 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155b1:	83 e8 01             	sub    eax,0x1
c00155b4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155b9:	75 01                	jne    c00155bc <unblockTask(ThreadControlBlock*)+0x7c>
c00155bb:	fb                   	sti    
c00155bc:	83 c4 08             	add    esp,0x8
c00155bf:	5b                   	pop    ebx
c00155c0:	c3                   	ret    
c00155c1:	8d 76 00             	lea    esi,[esi+0x0]
c00155c4:	83 ec 0c             	sub    esp,0xc
c00155c7:	68 3c 12 02 c0       	push   0xc002123c
c00155cc:	e8 b2 53 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00155d1:	83 c4 10             	add    esp,0x10
c00155d4:	eb d6                	jmp    c00155ac <unblockTask(ThreadControlBlock*)+0x6c>
c00155d6:	66 90                	xchg   ax,ax
c00155d8:	83 ec 08             	sub    esp,0x8
c00155db:	53                   	push   ebx
c00155dc:	68 84 81 02 c0       	push   0xc0028184
c00155e1:	e8 ea 96 00 00       	call   c001ecd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155e6:	83 c4 10             	add    esp,0x10
c00155e9:	eb c1                	jmp    c00155ac <unblockTask(ThreadControlBlock*)+0x6c>
c00155eb:	90                   	nop

c00155ec <cleanupTerminatedTask(ThreadControlBlock*)>:
c00155ec:	55                   	push   ebp
c00155ed:	57                   	push   edi
c00155ee:	56                   	push   esi
c00155ef:	53                   	push   ebx
c00155f0:	83 ec 1c             	sub    esp,0x1c
c00155f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00155f7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155fa:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015600:	85 ed                	test   ebp,ebp
c0015602:	7e 28                	jle    c001562c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015604:	31 f6                	xor    esi,esi
c0015606:	66 90                	xchg   ax,ax
c0015608:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001560f:	83 ec 0c             	sub    esp,0xc
c0015612:	83 c6 01             	add    esi,0x1
c0015615:	57                   	push   edi
c0015616:	e8 c0 24 ff ff       	call   c0007adb <free>
c001561b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001561e:	83 c4 10             	add    esp,0x10
c0015621:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015627:	7f df                	jg     c0015608 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015629:	8d 76 00             	lea    esi,[esi+0x0]
c001562c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015636:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001563b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001563e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015641:	d3 c0                	rol    eax,cl
c0015643:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001564a:	21 c8                	and    eax,ecx
c001564c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015653:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015656:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001565e:	89 f7                	mov    edi,esi
c0015660:	0f 85 72 01 00 00    	jne    c00157d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015666:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001566c:	85 ed                	test   ebp,ebp
c001566e:	74 1c                	je     c001568c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015670:	83 ec 0c             	sub    esp,0xc
c0015673:	55                   	push   ebp
c0015674:	e8 e5 ae ff ff       	call   c001055e <EnvVarContainer::~EnvVarContainer()>
c0015679:	59                   	pop    ecx
c001567a:	5e                   	pop    esi
c001567b:	6a 0c                	push   0xc
c001567d:	55                   	push   ebp
c001567e:	e8 02 52 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c0015683:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015686:	83 c4 10             	add    esp,0x10
c0015689:	89 f7                	mov    edi,esi
c001568b:	90                   	nop
c001568c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015692:	85 c0                	test   eax,eax
c0015694:	0f 84 b2 00 00 00    	je     c001574c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001569a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001569d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00156a1:	31 c9                	xor    ecx,ecx
c00156a3:	eb 17                	jmp    c00156bc <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00156a5:	8d 76 00             	lea    esi,[esi+0x0]
c00156a8:	83 c1 01             	add    ecx,0x1
c00156ab:	83 f9 10             	cmp    ecx,0x10
c00156ae:	0f 84 98 00 00 00    	je     c001574c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00156b4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156ba:	66 90                	xchg   ax,ax
c00156bc:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00156c3:	d3 fa                	sar    edx,cl
c00156c5:	80 e2 01             	and    dl,0x1
c00156c8:	74 de                	je     c00156a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156ca:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00156cd:	c1 e2 05             	shl    edx,0x5
c00156d0:	29 ca                	sub    edx,ecx
c00156d2:	01 d0                	add    eax,edx
c00156d4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00156da:	83 fd 07             	cmp    ebp,0x7
c00156dd:	75 c9                	jne    c00156a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156df:	05 40 02 00 00       	add    eax,0x240
c00156e4:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00156e7:	83 fd ff             	cmp    ebp,0xffffffff
c00156ea:	0f 8c f0 00 00 00    	jl     c00157e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00156f0:	0f 84 ae 01 00 00    	je     c00158a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00156f6:	85 ed                	test   ebp,ebp
c00156f8:	0f 84 92 01 00 00    	je     c0015890 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00156fe:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015700:	75 a6                	jne    c00156a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015702:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015706:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001570c:	01 d0                	add    eax,edx
c001570e:	66 90                	xchg   ax,ax
c0015710:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015714:	83 ec 0c             	sub    esp,0xc
c0015717:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001571d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015720:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015726:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001572d:	50                   	push   eax
c001572e:	e8 0d fe ff ff       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c0015733:	83 c4 10             	add    esp,0x10
c0015736:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015739:	89 f7                	mov    edi,esi
c001573b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001573f:	83 c1 01             	add    ecx,0x1
c0015742:	83 f9 10             	cmp    ecx,0x10
c0015745:	0f 85 69 ff ff ff    	jne    c00156b4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001574b:	90                   	nop
c001574c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015752:	85 c0                	test   eax,eax
c0015754:	74 62                	je     c00157b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015756:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001575c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015762:	74 54                	je     c00157b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015764:	83 ec 0c             	sub    esp,0xc
c0015767:	68 84 81 02 c0       	push   0xc0028184
c001576c:	e8 9b 94 00 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015771:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015778:	89 c7                	mov    edi,eax
c001577a:	e8 71 94 00 00       	call   c001ebf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001577f:	83 c4 10             	add    esp,0x10
c0015782:	84 c0                	test   al,al
c0015784:	0f 84 ce 00 00 00    	je     c0015858 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001578a:	66 90                	xchg   ax,ax
c001578c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001578f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015795:	85 d2                	test   edx,edx
c0015797:	74 0f                	je     c00157a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015799:	8b 02                	mov    eax,DWORD PTR [edx]
c001579b:	83 ec 0c             	sub    esp,0xc
c001579e:	52                   	push   edx
c001579f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157a2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157a5:	83 c4 10             	add    esp,0x10
c00157a8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00157b2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00157b5:	8d 76 00             	lea    esi,[esi+0x0]
c00157b8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00157be:	85 db                	test   ebx,ebx
c00157c0:	74 16                	je     c00157d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00157c2:	83 ec 0c             	sub    esp,0xc
c00157c5:	53                   	push   ebx
c00157c6:	e8 ab 43 ff ff       	call   c0009b76 <VAS::~VAS()>
c00157cb:	58                   	pop    eax
c00157cc:	5a                   	pop    edx
c00157cd:	6a 14                	push   0x14
c00157cf:	53                   	push   ebx
c00157d0:	e8 b0 50 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c00157d5:	83 c4 10             	add    esp,0x10
c00157d8:	83 c4 1c             	add    esp,0x1c
c00157db:	5b                   	pop    ebx
c00157dc:	5e                   	pop    esi
c00157dd:	5f                   	pop    edi
c00157de:	5d                   	pop    ebp
c00157df:	c3                   	ret    
c00157e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00157e4:	83 ec 0c             	sub    esp,0xc
c00157e7:	68 08 13 02 c0       	push   0xc0021308
c00157ec:	e8 5c b0 ff ff       	call   c001084d <KePanic(char const*)>
c00157f1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157f4:	83 c4 10             	add    esp,0x10
c00157f7:	89 f7                	mov    edi,esi
c00157f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00157fd:	e9 a6 fe ff ff       	jmp    c00156a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015802:	66 90                	xchg   ax,ax
c0015804:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001580a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015810:	75 1e                	jne    c0015830 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015812:	83 ec 0c             	sub    esp,0xc
c0015815:	68 70 13 02 c0       	push   0xc0021370
c001581a:	e8 64 51 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001581f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015826:	e8 1d fa ff ff       	call   c0015248 <blockTask(TaskState)>
c001582b:	83 c4 10             	add    esp,0x10
c001582e:	66 90                	xchg   ax,ax
c0015830:	83 ec 08             	sub    esp,0x8
c0015833:	56                   	push   esi
c0015834:	68 84 81 02 c0       	push   0xc0028184
c0015839:	e8 92 94 00 00       	call   c001ecd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001583e:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015845:	e8 c2 93 00 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001584a:	83 c4 10             	add    esp,0x10
c001584d:	39 f8                	cmp    eax,edi
c001584f:	0f 84 37 ff ff ff    	je     c001578c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015855:	8d 76 00             	lea    esi,[esi+0x0]
c0015858:	83 ec 0c             	sub    esp,0xc
c001585b:	68 84 81 02 c0       	push   0xc0028184
c0015860:	e8 a7 93 00 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015865:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001586c:	89 c6                	mov    esi,eax
c001586e:	e8 a1 93 00 00       	call   c001ec14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015873:	83 c4 10             	add    esp,0x10
c0015876:	39 f3                	cmp    ebx,esi
c0015878:	74 b6                	je     c0015830 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001587a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001587d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015880:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015886:	75 a8                	jne    c0015830 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015888:	e9 77 ff ff ff       	jmp    c0015804 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c001588d:	8d 76 00             	lea    esi,[esi+0x0]
c0015890:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015894:	83 ec 0c             	sub    esp,0xc
c0015897:	68 3c 13 02 c0       	push   0xc002133c
c001589c:	e9 4b ff ff ff       	jmp    c00157ec <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00158a1:	8d 76 00             	lea    esi,[esi+0x0]
c00158a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00158a8:	8b 36                	mov    esi,DWORD PTR [esi]
c00158aa:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00158ad:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158b0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00158b6:	01 d7                	add    edi,edx
c00158b8:	89 f8                	mov    eax,edi
c00158ba:	e9 51 fe ff ff       	jmp    c0015710 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00158bf:	90                   	nop

c00158c0 <cleanerTaskFunction(void*)>:
c00158c0:	53                   	push   ebx
c00158c1:	83 ec 08             	sub    esp,0x8
c00158c4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158c9:	83 e8 01             	sub    eax,0x1
c00158cc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158d1:	75 01                	jne    c00158d4 <cleanerTaskFunction(void*)+0x14>
c00158d3:	fb                   	sti    
c00158d4:	fa                   	cli    
c00158d5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158da:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c00158e1:	8d 50 01             	lea    edx,[eax+0x1]
c00158e4:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00158ea:	0f 84 c4 00 00 00    	je     c00159b4 <cleanerTaskFunction(void*)+0xf4>
c00158f0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158f5:	85 c0                	test   eax,eax
c00158f7:	75 03                	jne    c00158fc <cleanerTaskFunction(void*)+0x3c>
c00158f9:	fb                   	sti    
c00158fa:	66 90                	xchg   ax,ax
c00158fc:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c0015903:	fa                   	cli    
c0015904:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001590a:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015910:	83 c2 01             	add    edx,0x1
c0015913:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015919:	83 c1 01             	add    ecx,0x1
c001591c:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015922:	fa                   	cli    
c0015923:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c0015929:	83 c3 01             	add    ebx,0x1
c001592c:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c0015932:	eb 28                	jmp    c001595c <cleanerTaskFunction(void*)+0x9c>
c0015934:	83 ec 0c             	sub    esp,0xc
c0015937:	68 6c 81 02 c0       	push   0xc002816c
c001593c:	e8 cb 92 00 00       	call   c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015941:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015948:	89 c3                	mov    ebx,eax
c001594a:	e8 c5 92 00 00       	call   c001ec14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001594f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015952:	e8 95 fc ff ff       	call   c00155ec <cleanupTerminatedTask(ThreadControlBlock*)>
c0015957:	83 c4 10             	add    esp,0x10
c001595a:	66 90                	xchg   ax,ax
c001595c:	83 ec 0c             	sub    esp,0xc
c001595f:	68 6c 81 02 c0       	push   0xc002816c
c0015964:	e8 87 92 00 00       	call   c001ebf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015969:	83 c4 10             	add    esp,0x10
c001596c:	84 c0                	test   al,al
c001596e:	74 c4                	je     c0015934 <cleanerTaskFunction(void*)+0x74>
c0015970:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015975:	83 e8 01             	sub    eax,0x1
c0015978:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001597d:	75 01                	jne    c0015980 <cleanerTaskFunction(void*)+0xc0>
c001597f:	fb                   	sti    
c0015980:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015985:	83 e8 01             	sub    eax,0x1
c0015988:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001598d:	0f 85 31 ff ff ff    	jne    c00158c4 <cleanerTaskFunction(void*)+0x4>
c0015993:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015998:	85 c0                	test   eax,eax
c001599a:	0f 84 24 ff ff ff    	je     c00158c4 <cleanerTaskFunction(void*)+0x4>
c00159a0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00159aa:	e8 99 f6 ff ff       	call   c0015048 <schedule()>
c00159af:	e9 10 ff ff ff       	jmp    c00158c4 <cleanerTaskFunction(void*)+0x4>
c00159b4:	83 ec 0c             	sub    esp,0xc
c00159b7:	6a 02                	push   0x2
c00159b9:	e8 62 f8 ff ff       	call   c0015220 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00159be:	83 c4 10             	add    esp,0x10
c00159c1:	e9 36 ff ff ff       	jmp    c00158fc <cleanerTaskFunction(void*)+0x3c>
c00159c6:	66 90                	xchg   ax,ax

c00159c8 <terminateTask(int)>:
c00159c8:	83 ec 14             	sub    esp,0x14
c00159cb:	fa                   	cli    
c00159cc:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00159d2:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00159d8:	83 c2 01             	add    edx,0x1
c00159db:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00159e1:	83 c1 01             	add    ecx,0x1
c00159e4:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00159ea:	fa                   	cli    
c00159eb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00159f4:	83 c0 01             	add    eax,0x1
c00159f7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a01:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015a04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a09:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015a0c:	50                   	push   eax
c0015a0d:	68 6c 81 02 c0       	push   0xc002816c
c0015a12:	e8 b9 92 00 00       	call   c001ecd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a1c:	83 c4 10             	add    esp,0x10
c0015a1f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015a26:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015a2b:	85 c0                	test   eax,eax
c0015a2d:	74 65                	je     c0015a94 <terminateTask(int)+0xcc>
c0015a2f:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015a36:	83 ec 0c             	sub    esp,0xc
c0015a39:	50                   	push   eax
c0015a3a:	e8 01 fb ff ff       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c0015a3f:	83 c4 10             	add    esp,0x10
c0015a42:	66 90                	xchg   ax,ax
c0015a44:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a49:	83 e8 01             	sub    eax,0x1
c0015a4c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a51:	75 01                	jne    c0015a54 <terminateTask(int)+0x8c>
c0015a53:	fb                   	sti    
c0015a54:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a59:	83 e8 01             	sub    eax,0x1
c0015a5c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a61:	75 09                	jne    c0015a6c <terminateTask(int)+0xa4>
c0015a63:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015a6a:	75 3c                	jne    c0015aa8 <terminateTask(int)+0xe0>
c0015a6c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a71:	83 e8 01             	sub    eax,0x1
c0015a74:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a79:	75 01                	jne    c0015a7c <terminateTask(int)+0xb4>
c0015a7b:	fb                   	sti    
c0015a7c:	fa                   	cli    
c0015a7d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a82:	83 c0 01             	add    eax,0x1
c0015a85:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a8a:	66 90                	xchg   ax,ax
c0015a8c:	e8 b7 f5 ff ff       	call   c0015048 <schedule()>
c0015a91:	eb d9                	jmp    c0015a6c <terminateTask(int)+0xa4>
c0015a93:	90                   	nop
c0015a94:	83 ec 0c             	sub    esp,0xc
c0015a97:	68 6a 12 02 c0       	push   0xc002126a
c0015a9c:	e8 e2 4e ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0015aa1:	83 c4 10             	add    esp,0x10
c0015aa4:	eb 9e                	jmp    c0015a44 <terminateTask(int)+0x7c>
c0015aa6:	66 90                	xchg   ax,ax
c0015aa8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015ab2:	eb d8                	jmp    c0015a8c <terminateTask(int)+0xc4>

c0015ab4 <Thr::terminateFromIRQ(int)>:
c0015ab4:	83 ec 18             	sub    esp,0x18
c0015ab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015abb:	50                   	push   eax
c0015abc:	e8 07 ff ff ff       	call   c00159c8 <terminateTask(int)>
c0015ac1:	90                   	nop
c0015ac2:	66 90                	xchg   ax,ax

c0015ac4 <Semaphore::release()>:
c0015ac4:	83 ec 0c             	sub    esp,0xc
c0015ac7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015acb:	fa                   	cli    
c0015acc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ad1:	83 c0 01             	add    eax,0x1
c0015ad4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ad9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015ade:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ae1:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015ae7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015aea:	85 c9                	test   ecx,ecx
c0015aec:	74 42                	je     c0015b30 <Semaphore::release()+0x6c>
c0015aee:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015af1:	83 ec 0c             	sub    esp,0xc
c0015af4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015af7:	51                   	push   ecx
c0015af8:	e8 43 fa ff ff       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c0015afd:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b02:	83 c4 10             	add    esp,0x10
c0015b05:	83 e8 01             	sub    eax,0x1
c0015b08:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015b0d:	85 c0                	test   eax,eax
c0015b0f:	75 0b                	jne    c0015b1c <Semaphore::release()+0x58>
c0015b11:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015b16:	85 c0                	test   eax,eax
c0015b18:	75 22                	jne    c0015b3c <Semaphore::release()+0x78>
c0015b1a:	66 90                	xchg   ax,ax
c0015b1c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b21:	83 e8 01             	sub    eax,0x1
c0015b24:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b29:	75 01                	jne    c0015b2c <Semaphore::release()+0x68>
c0015b2b:	fb                   	sti    
c0015b2c:	83 c4 0c             	add    esp,0xc
c0015b2f:	c3                   	ret    
c0015b30:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015b33:	83 e9 01             	sub    ecx,0x1
c0015b36:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015b39:	eb cd                	jmp    c0015b08 <Semaphore::release()+0x44>
c0015b3b:	90                   	nop
c0015b3c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b46:	e8 fd f4 ff ff       	call   c0015048 <schedule()>
c0015b4b:	eb cf                	jmp    c0015b1c <Semaphore::release()+0x58>
c0015b4d:	8d 76 00             	lea    esi,[esi+0x0]

c0015b50 <__static_initialization_and_destruction_0(int, int)>:
c0015b50:	83 ec 0c             	sub    esp,0xc
c0015b53:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015b58:	0f 85 8e 00 00 00    	jne    c0015bec <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b5e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015b66:	0f 85 80 00 00 00    	jne    c0015bec <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b6c:	83 ec 0c             	sub    esp,0xc
c0015b6f:	68 84 81 02 c0       	push   0xc0028184
c0015b74:	e8 0b 94 00 00       	call   c001ef84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b79:	83 c4 10             	add    esp,0x10
c0015b7c:	83 ec 04             	sub    esp,0x4
c0015b7f:	68 04 1f 02 c0       	push   0xc0021f04
c0015b84:	68 84 81 02 c0       	push   0xc0028184
c0015b89:	68 34 ef 01 c0       	push   0xc001ef34
c0015b8e:	e8 a2 4c ff ff       	call   c000a835 <__cxa_atexit>
c0015b93:	83 c4 10             	add    esp,0x10
c0015b96:	83 ec 0c             	sub    esp,0xc
c0015b99:	68 78 81 02 c0       	push   0xc0028178
c0015b9e:	e8 e1 93 00 00       	call   c001ef84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ba3:	83 c4 10             	add    esp,0x10
c0015ba6:	83 ec 04             	sub    esp,0x4
c0015ba9:	68 04 1f 02 c0       	push   0xc0021f04
c0015bae:	68 78 81 02 c0       	push   0xc0028178
c0015bb3:	68 34 ef 01 c0       	push   0xc001ef34
c0015bb8:	e8 78 4c ff ff       	call   c000a835 <__cxa_atexit>
c0015bbd:	83 c4 10             	add    esp,0x10
c0015bc0:	83 ec 0c             	sub    esp,0xc
c0015bc3:	68 6c 81 02 c0       	push   0xc002816c
c0015bc8:	e8 b7 93 00 00       	call   c001ef84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015bcd:	83 c4 10             	add    esp,0x10
c0015bd0:	83 ec 04             	sub    esp,0x4
c0015bd3:	68 04 1f 02 c0       	push   0xc0021f04
c0015bd8:	68 6c 81 02 c0       	push   0xc002816c
c0015bdd:	68 34 ef 01 c0       	push   0xc001ef34
c0015be2:	e8 4e 4c ff ff       	call   c000a835 <__cxa_atexit>
c0015be7:	83 c4 10             	add    esp,0x10
c0015bea:	66 90                	xchg   ax,ax
c0015bec:	90                   	nop
c0015bed:	83 c4 0c             	add    esp,0xc
c0015bf0:	c3                   	ret    
c0015bf1:	8d 76 00             	lea    esi,[esi+0x0]

c0015bf4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015bf4:	83 ec 0c             	sub    esp,0xc
c0015bf7:	83 ec 08             	sub    esp,0x8
c0015bfa:	68 ff ff 00 00       	push   0xffff
c0015bff:	6a 01                	push   0x1
c0015c01:	e8 4a ff ff ff       	call   c0015b50 <__static_initialization_and_destruction_0(int, int)>
c0015c06:	83 c4 10             	add    esp,0x10
c0015c09:	83 c4 0c             	add    esp,0xc
c0015c0c:	c3                   	ret    

c0015c0d <Vm::inbv(unsigned short)>:
c0015c0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c11:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c16:	75 06                	jne    c0015c1e <Vm::inbv(unsigned short)+0x11>
c0015c18:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015c1d:	c3                   	ret    
c0015c1e:	ec                   	in     al,dx
c0015c1f:	c3                   	ret    

c0015c20 <Vm::outbv(unsigned short, unsigned char)>:
c0015c20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c28:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c2d:	75 25                	jne    c0015c54 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015c2f:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c35:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015c3b:	8d 51 01             	lea    edx,[ecx+0x1]
c0015c3e:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015c44:	83 fa 20             	cmp    edx,0x20
c0015c47:	75 0c                	jne    c0015c55 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015c49:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015c53:	c3                   	ret    
c0015c54:	ee                   	out    dx,al
c0015c55:	c3                   	ret    

c0015c56 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015c56:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c5b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c60:	c1 e0 04             	shl    eax,0x4
c0015c63:	01 d0                	add    eax,edx
c0015c65:	c3                   	ret    

c0015c66 <Vm::getSegment(unsigned int)>:
c0015c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c6a:	c1 e8 10             	shr    eax,0x10
c0015c6d:	c3                   	ret    

c0015c6e <Vm::getOffset(unsigned int)>:
c0015c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c72:	c3                   	ret    

c0015c73 <Vm::mainloop2()>:
c0015c73:	83 ec 18             	sub    esp,0x18
c0015c76:	fa                   	cli    
c0015c77:	6a 02                	push   0x2
c0015c79:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c7f:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015c86:	e8 95 f5 ff ff       	call   c0015220 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c90:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c94:	52                   	push   edx
c0015c95:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c99:	52                   	push   edx
c0015c9a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015c9e:	52                   	push   edx
c0015c9f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015ca3:	50                   	push   eax
c0015ca4:	e8 66 a5 fe ff       	call   c000020f <goToVM86>
c0015ca9:	83 c4 2c             	add    esp,0x2c
c0015cac:	c3                   	ret    

c0015cad <Vm::mainVm8086Loop(void*)>:
c0015cad:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cb2:	48                   	dec    eax
c0015cb3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cb8:	75 01                	jne    c0015cbb <Vm::mainVm8086Loop(void*)+0xe>
c0015cba:	fb                   	sti    
c0015cbb:	eb b6                	jmp    c0015c73 <Vm::mainloop2()>

c0015cbd <Vm::mainloop3(unsigned long)>:
c0015cbd:	83 ec 18             	sub    esp,0x18
c0015cc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cc4:	fa                   	cli    
c0015cc5:	6a 02                	push   0x2
c0015cc7:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015ccd:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015cd4:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015cd9:	e8 42 f5 ff ff       	call   c0015220 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015cde:	83 c4 1c             	add    esp,0x1c
c0015ce1:	eb 90                	jmp    c0015c73 <Vm::mainloop2()>

c0015ce3 <Vm::initialise8086()>:
c0015ce3:	83 ec 0c             	sub    esp,0xc
c0015ce6:	68 80 00 00 00       	push   0x80
c0015ceb:	6a 00                	push   0x0
c0015ced:	68 ad 5c 01 c0       	push   0xc0015cad
c0015cf2:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015cf8:	e8 ff f0 ff ff       	call   c0014dfc <Process::createThread(void (*)(void*), void*, int)>
c0015cfd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015d04:	68 00 01 00 00       	push   0x100
c0015d09:	6a 00                	push   0x0
c0015d0b:	6a 00                	push   0x0
c0015d0d:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015d12:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015d17:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d1d:	e8 dc 42 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015d22:	83 c4 2c             	add    esp,0x2c
c0015d25:	c3                   	ret    

c0015d26 <Vm::finish8086()>:
c0015d26:	53                   	push   ebx
c0015d27:	83 ec 08             	sub    esp,0x8
c0015d2a:	fa                   	cli    
c0015d2b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d31:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015d38:	75 15                	jne    c0015d4f <Vm::finish8086()+0x29>
c0015d3a:	e8 09 f3 ff ff       	call   c0015048 <schedule()>
c0015d3f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d44:	48                   	dec    eax
c0015d45:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d4a:	75 de                	jne    c0015d2a <Vm::finish8086()+0x4>
c0015d4c:	fb                   	sti    
c0015d4d:	eb db                	jmp    c0015d2a <Vm::finish8086()+0x4>
c0015d4f:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015d56:	83 ec 0c             	sub    esp,0xc
c0015d59:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015d5f:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d65:	e8 d6 f7 ff ff       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c0015d6a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d6f:	83 c4 10             	add    esp,0x10
c0015d72:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d75:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d7b:	85 d2                	test   edx,edx
c0015d7d:	75 01                	jne    c0015d80 <Vm::finish8086()+0x5a>
c0015d7f:	fb                   	sti    
c0015d80:	83 c4 08             	add    esp,0x8
c0015d83:	89 d8                	mov    eax,ebx
c0015d85:	5b                   	pop    ebx
c0015d86:	c3                   	ret    

c0015d87 <Vm::getOutput8086(unsigned char*)>:
c0015d87:	57                   	push   edi
c0015d88:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015d8e:	56                   	push   esi
c0015d8f:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d9a:	5e                   	pop    esi
c0015d9b:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015da0:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015daa:	5f                   	pop    edi
c0015dab:	c3                   	ret    

c0015dac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015dac:	55                   	push   ebp
c0015dad:	57                   	push   edi
c0015dae:	56                   	push   esi
c0015daf:	53                   	push   ebx
c0015db0:	83 ec 0c             	sub    esp,0xc
c0015db3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015db7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015dbb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015dbf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015dc3:	fa                   	cli    
c0015dc4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015dca:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015dd1:	75 15                	jne    c0015de8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015dd3:	e8 70 f2 ff ff       	call   c0015048 <schedule()>
c0015dd8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ddd:	48                   	dec    eax
c0015dde:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015de3:	75 de                	jne    c0015dc3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015de5:	fb                   	sti    
c0015de6:	eb db                	jmp    c0015dc3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015de8:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015df2:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015df7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015dfb:	0f b7 ff             	movzx  edi,di
c0015dfe:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015e02:	0f b7 f6             	movzx  esi,si
c0015e05:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015e09:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015e0d:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e11:	50                   	push   eax
c0015e12:	6a 20                	push   0x20
c0015e14:	6a 00                	push   0x0
c0015e16:	68 e0 81 02 c0       	push   0xc00281e0
c0015e1b:	e8 d0 a6 fe ff       	call   c00004f0 <memset>
c0015e20:	5a                   	pop    edx
c0015e21:	59                   	pop    ecx
c0015e22:	57                   	push   edi
c0015e23:	56                   	push   esi
c0015e24:	e8 2d fe ff ff       	call   c0015c56 <Vm::realToLinear(unsigned short, unsigned short)>
c0015e29:	83 c4 10             	add    esp,0x10
c0015e2c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015e30:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015e34:	89 c7                	mov    edi,eax
c0015e36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e38:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e3f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e44:	48                   	dec    eax
c0015e45:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e4a:	75 01                	jne    c0015e4d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015e4c:	fb                   	sti    
c0015e4d:	83 ec 0c             	sub    esp,0xc
c0015e50:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e56:	e8 e5 f6 ff ff       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c0015e5b:	83 c4 1c             	add    esp,0x1c
c0015e5e:	b0 01                	mov    al,0x1
c0015e60:	5b                   	pop    ebx
c0015e61:	5e                   	pop    esi
c0015e62:	5f                   	pop    edi
c0015e63:	5d                   	pop    ebp
c0015e64:	c3                   	ret    

c0015e65 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e65:	55                   	push   ebp
c0015e66:	57                   	push   edi
c0015e67:	56                   	push   esi
c0015e68:	53                   	push   ebx
c0015e69:	83 ec 2c             	sub    esp,0x2c
c0015e6c:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015e70:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015e74:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015e78:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015e7c:	fa                   	cli    
c0015e7d:	8a 1d c5 81 02 c0    	mov    bl,BYTE PTR ds:0xc00281c5
c0015e83:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e89:	84 db                	test   bl,bl
c0015e8b:	75 1d                	jne    c0015eaa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x45>
c0015e8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015e91:	e8 b2 f1 ff ff       	call   c0015048 <schedule()>
c0015e96:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e9f:	48                   	dec    eax
c0015ea0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ea5:	75 d5                	jne    c0015e7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015ea7:	fb                   	sti    
c0015ea8:	eb d2                	jmp    c0015e7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015eaa:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015eb4:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015eb9:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015ebd:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0015ec1:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015ec5:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015ec9:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015ecd:	50                   	push   eax
c0015ece:	6a 20                	push   0x20
c0015ed0:	6a 00                	push   0x0
c0015ed2:	68 e0 81 02 c0       	push   0xc00281e0
c0015ed7:	e8 14 a6 fe ff       	call   c00004f0 <memset>
c0015edc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015ee3:	e8 e3 1b ff ff       	call   c0007acb <malloc>
c0015ee8:	83 c4 0c             	add    esp,0xc
c0015eeb:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015ef1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ef5:	89 c5                	mov    ebp,eax
c0015ef7:	50                   	push   eax
c0015ef8:	e8 2f 50 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c0015efd:	83 c4 10             	add    esp,0x10
c0015f00:	85 ed                	test   ebp,ebp
c0015f02:	75 0a                	jne    c0015f0e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0015f04:	83 ec 0c             	sub    esp,0xc
c0015f07:	68 98 13 02 c0       	push   0xc0021398
c0015f0c:	eb 2b                	jmp    c0015f39 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0015f0e:	50                   	push   eax
c0015f0f:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015f13:	50                   	push   eax
c0015f14:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f18:	50                   	push   eax
c0015f19:	55                   	push   ebp
c0015f1a:	e8 75 53 ff ff       	call   c000b294 <File::stat(unsigned long long*, bool*)>
c0015f1f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015f23:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f27:	83 c4 10             	add    esp,0x10
c0015f2a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015f2f:	74 27                	je     c0015f58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf3>
c0015f31:	83 ec 0c             	sub    esp,0xc
c0015f34:	68 ac 13 02 c0       	push   0xc00213ac
c0015f39:	e8 0f a9 ff ff       	call   c001084d <KePanic(char const*)>
c0015f3e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f43:	83 c4 10             	add    esp,0x10
c0015f46:	48                   	dec    eax
c0015f47:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f4c:	85 c0                	test   eax,eax
c0015f4e:	75 01                	jne    c0015f51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015f50:	fb                   	sti    
c0015f51:	31 db                	xor    ebx,ebx
c0015f53:	e9 90 00 00 00       	jmp    c0015fe8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015f58:	51                   	push   ecx
c0015f59:	51                   	push   ecx
c0015f5a:	6a 01                	push   0x1
c0015f5c:	55                   	push   ebp
c0015f5d:	e8 86 50 ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c0015f62:	83 c4 10             	add    esp,0x10
c0015f65:	85 c0                	test   eax,eax
c0015f67:	74 26                	je     c0015f8f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12a>
c0015f69:	83 ec 0c             	sub    esp,0xc
c0015f6c:	68 c5 13 02 c0       	push   0xc00213c5
c0015f71:	e8 d7 a8 ff ff       	call   c001084d <KePanic(char const*)>
c0015f76:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f7b:	83 c4 10             	add    esp,0x10
c0015f7e:	48                   	dec    eax
c0015f7f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f84:	85 c0                	test   eax,eax
c0015f86:	75 c9                	jne    c0015f51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015f88:	fb                   	sti    
c0015f89:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0015f8d:	eb 59                	jmp    c0015fe8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015f8f:	50                   	push   eax
c0015f90:	0f b7 ff             	movzx  edi,di
c0015f93:	50                   	push   eax
c0015f94:	0f b7 f6             	movzx  esi,si
c0015f97:	57                   	push   edi
c0015f98:	56                   	push   esi
c0015f99:	e8 b8 fc ff ff       	call   c0015c56 <Vm::realToLinear(unsigned short, unsigned short)>
c0015f9e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015fa1:	5a                   	pop    edx
c0015fa2:	8d 74 24 20          	lea    esi,[esp+0x20]
c0015fa6:	56                   	push   esi
c0015fa7:	50                   	push   eax
c0015fa8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fb0:	55                   	push   ebp
c0015fb1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fb4:	83 c4 14             	add    esp,0x14
c0015fb7:	55                   	push   ebp
c0015fb8:	e8 89 50 ff ff       	call   c000b046 <File::close()>
c0015fbd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fc2:	83 c4 10             	add    esp,0x10
c0015fc5:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015fcc:	48                   	dec    eax
c0015fcd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fd2:	85 c0                	test   eax,eax
c0015fd4:	75 01                	jne    c0015fd7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x172>
c0015fd6:	fb                   	sti    
c0015fd7:	83 ec 0c             	sub    esp,0xc
c0015fda:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015fe0:	e8 5b f5 ff ff       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c0015fe5:	83 c4 10             	add    esp,0x10
c0015fe8:	83 c4 2c             	add    esp,0x2c
c0015feb:	88 d8                	mov    al,bl
c0015fed:	5b                   	pop    ebx
c0015fee:	5e                   	pop    esi
c0015fef:	5f                   	pop    edi
c0015ff0:	5d                   	pop    ebp
c0015ff1:	c3                   	ret    

c0015ff2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015ff2:	57                   	push   edi
c0015ff3:	56                   	push   esi
c0015ff4:	53                   	push   ebx
c0015ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ff9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ffd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016001:	83 e8 06             	sub    eax,0x6
c0016004:	0f b7 c0             	movzx  eax,ax
c0016007:	50                   	push   eax
c0016008:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001600d:	50                   	push   eax
c001600e:	e8 43 fc ff ff       	call   c0015c56 <Vm::realToLinear(unsigned short, unsigned short)>
c0016013:	5a                   	pop    edx
c0016014:	5e                   	pop    esi
c0016015:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0016018:	8d 56 fa             	lea    edx,[esi-0x6]
c001601b:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c001601e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016024:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0016027:	8d 56 02             	lea    edx,[esi+0x2]
c001602a:	66 89 10             	mov    WORD PTR [eax],dx
c001602d:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0016030:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016034:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0016037:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001603b:	89 d6                	mov    esi,edx
c001603d:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0016043:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c0016049:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001604d:	74 05                	je     c0016054 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c001604f:	80 ce 02             	or     dh,0x2
c0016052:	89 d6                	mov    esi,edx
c0016054:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0016058:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001605d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016061:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016069:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001606c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0016074:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0016077:	5b                   	pop    ebx
c0016078:	5e                   	pop    esi
c0016079:	5f                   	pop    edi
c001607a:	c3                   	ret    

c001607b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001607b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016080:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016085:	c1 e0 04             	shl    eax,0x4
c0016088:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001608b:	c3                   	ret    

c001608c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001608c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016091:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016096:	c1 e0 04             	shl    eax,0x4
c0016099:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001609d:	c3                   	ret    

c001609e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001609e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160a3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160a8:	c1 e0 04             	shl    eax,0x4
c00160ab:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00160ae:	c3                   	ret    

c00160af <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00160af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160b4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160b9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00160bd:	c1 e0 04             	shl    eax,0x4
c00160c0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00160c3:	c3                   	ret    

c00160c4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00160c4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160c9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160d2:	c1 e0 04             	shl    eax,0x4
c00160d5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00160d9:	c3                   	ret    

c00160da <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00160da:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160df:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160e8:	c1 e0 04             	shl    eax,0x4
c00160eb:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00160ee:	c3                   	ret    

c00160ef <Vm::faultHandler(regs*)>:
c00160ef:	55                   	push   ebp
c00160f0:	57                   	push   edi
c00160f1:	56                   	push   esi
c00160f2:	53                   	push   ebx
c00160f3:	83 ec 2c             	sub    esp,0x2c
c00160f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00160fa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160fd:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016101:	0f b7 f8             	movzx  edi,ax
c0016104:	0f b7 c0             	movzx  eax,ax
c0016107:	52                   	push   edx
c0016108:	50                   	push   eax
c0016109:	e8 48 fb ff ff       	call   c0015c56 <Vm::realToLinear(unsigned short, unsigned short)>
c001610e:	5a                   	pop    edx
c001610f:	59                   	pop    ecx
c0016110:	89 c1                	mov    ecx,eax
c0016112:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016115:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016119:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001611e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016122:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016125:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016129:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001612e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016132:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016136:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001613a:	e8 17 fb ff ff       	call   c0015c56 <Vm::realToLinear(unsigned short, unsigned short)>
c001613f:	5e                   	pop    esi
c0016140:	be 06 00 00 00       	mov    esi,0x6
c0016145:	5d                   	pop    ebp
c0016146:	31 ed                	xor    ebp,ebp
c0016148:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001614d:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016150:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016156:	0f 84 54 02 00 00    	je     c00163b0 <Vm::faultHandler(regs*)+0x2c1>
c001615c:	0f 87 94 00 00 00    	ja     c00161f6 <Vm::faultHandler(regs*)+0x107>
c0016162:	83 fa 66             	cmp    edx,0x66
c0016165:	0f 84 c2 01 00 00    	je     c001632d <Vm::faultHandler(regs*)+0x23e>
c001616b:	77 47                	ja     c00161b4 <Vm::faultHandler(regs*)+0xc5>
c001616d:	83 fa 36             	cmp    edx,0x36
c0016170:	0f 84 aa 01 00 00    	je     c0016320 <Vm::faultHandler(regs*)+0x231>
c0016176:	77 1a                	ja     c0016192 <Vm::faultHandler(regs*)+0xa3>
c0016178:	83 fa 26             	cmp    edx,0x26
c001617b:	0f 84 78 01 00 00    	je     c00162f9 <Vm::faultHandler(regs*)+0x20a>
c0016181:	83 fa 2e             	cmp    edx,0x2e
c0016184:	0f 85 07 06 00 00    	jne    c0016791 <Vm::faultHandler(regs*)+0x6a2>
c001618a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001618d:	31 f6                	xor    esi,esi
c001618f:	41                   	inc    ecx
c0016190:	eb bb                	jmp    c001614d <Vm::faultHandler(regs*)+0x5e>
c0016192:	83 fa 64             	cmp    edx,0x64
c0016195:	0f 84 6b 01 00 00    	je     c0016306 <Vm::faultHandler(regs*)+0x217>
c001619b:	0f 87 72 01 00 00    	ja     c0016313 <Vm::faultHandler(regs*)+0x224>
c00161a1:	83 fa 3e             	cmp    edx,0x3e
c00161a4:	0f 85 e7 05 00 00    	jne    c0016791 <Vm::faultHandler(regs*)+0x6a2>
c00161aa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161ad:	be 01 00 00 00       	mov    esi,0x1
c00161b2:	eb db                	jmp    c001618f <Vm::faultHandler(regs*)+0xa0>
c00161b4:	83 fa 6d             	cmp    edx,0x6d
c00161b7:	0f 84 14 03 00 00    	je     c00164d1 <Vm::faultHandler(regs*)+0x3e2>
c00161bd:	77 17                	ja     c00161d6 <Vm::faultHandler(regs*)+0xe7>
c00161bf:	83 fa 67             	cmp    edx,0x67
c00161c2:	0f 84 72 01 00 00    	je     c001633a <Vm::faultHandler(regs*)+0x24b>
c00161c8:	83 fa 6c             	cmp    edx,0x6c
c00161cb:	0f 84 91 02 00 00    	je     c0016462 <Vm::faultHandler(regs*)+0x373>
c00161d1:	e9 bb 05 00 00       	jmp    c0016791 <Vm::faultHandler(regs*)+0x6a2>
c00161d6:	83 fa 6f             	cmp    edx,0x6f
c00161d9:	0f 84 20 04 00 00    	je     c00165ff <Vm::faultHandler(regs*)+0x510>
c00161df:	0f 82 82 03 00 00    	jb     c0016567 <Vm::faultHandler(regs*)+0x478>
c00161e5:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00161eb:	0f 84 56 01 00 00    	je     c0016347 <Vm::faultHandler(regs*)+0x258>
c00161f1:	e9 9b 05 00 00       	jmp    c0016791 <Vm::faultHandler(regs*)+0x6a2>
c00161f6:	81 fa ec 00 00 00    	cmp    edx,0xec
c00161fc:	0f 84 37 05 00 00    	je     c0016739 <Vm::faultHandler(regs*)+0x64a>
c0016202:	0f 87 89 00 00 00    	ja     c0016291 <Vm::faultHandler(regs*)+0x1a2>
c0016208:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001620e:	0f 84 b6 04 00 00    	je     c00166ca <Vm::faultHandler(regs*)+0x5db>
c0016214:	77 58                	ja     c001626e <Vm::faultHandler(regs*)+0x17f>
c0016216:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001621c:	0f 84 ee 01 00 00    	je     c0016410 <Vm::faultHandler(regs*)+0x321>
c0016222:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016228:	0f 85 63 05 00 00    	jne    c0016791 <Vm::faultHandler(regs*)+0x6a2>
c001622e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016231:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016234:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0016238:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001623b:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001623f:	81 ca 00 02 02 00    	or     edx,0x20200
c0016245:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016248:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c001624c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016252:	c1 e8 09             	shr    eax,0x9
c0016255:	83 e0 01             	and    eax,0x1
c0016258:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001625b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001625e:	83 c0 06             	add    eax,0x6
c0016261:	25 ff ff 00 00       	and    eax,0xffff
c0016266:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016269:	e9 1f 05 00 00       	jmp    c001678d <Vm::faultHandler(regs*)+0x69e>
c001626e:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016274:	0f 84 95 04 00 00    	je     c001670f <Vm::faultHandler(regs*)+0x620>
c001627a:	0f 82 66 04 00 00    	jb     c00166e6 <Vm::faultHandler(regs*)+0x5f7>
c0016280:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016286:	0f 84 9a 04 00 00    	je     c0016726 <Vm::faultHandler(regs*)+0x637>
c001628c:	e9 00 05 00 00       	jmp    c0016791 <Vm::faultHandler(regs*)+0x6a2>
c0016291:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016297:	0f 84 dd 04 00 00    	je     c001677a <Vm::faultHandler(regs*)+0x68b>
c001629d:	77 2e                	ja     c00162cd <Vm::faultHandler(regs*)+0x1de>
c001629f:	81 fa ed 00 00 00    	cmp    edx,0xed
c00162a5:	0f 84 aa 04 00 00    	je     c0016755 <Vm::faultHandler(regs*)+0x666>
c00162ab:	81 fa ee 00 00 00    	cmp    edx,0xee
c00162b1:	0f 85 da 04 00 00    	jne    c0016791 <Vm::faultHandler(regs*)+0x6a2>
c00162b7:	50                   	push   eax
c00162b8:	50                   	push   eax
c00162b9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00162bd:	50                   	push   eax
c00162be:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00162c2:	50                   	push   eax
c00162c3:	e8 58 f9 ff ff       	call   c0015c20 <Vm::outbv(unsigned short, unsigned char)>
c00162c8:	e9 a5 04 00 00       	jmp    c0016772 <Vm::faultHandler(regs*)+0x683>
c00162cd:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00162d3:	0f 84 6d 01 00 00    	je     c0016446 <Vm::faultHandler(regs*)+0x357>
c00162d9:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00162df:	0f 84 6f 01 00 00    	je     c0016454 <Vm::faultHandler(regs*)+0x365>
c00162e5:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00162eb:	0f 85 a0 04 00 00    	jne    c0016791 <Vm::faultHandler(regs*)+0x6a2>
c00162f1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162f4:	e9 96 fe ff ff       	jmp    c001618f <Vm::faultHandler(regs*)+0xa0>
c00162f9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162fc:	be 02 00 00 00       	mov    esi,0x2
c0016301:	e9 89 fe ff ff       	jmp    c001618f <Vm::faultHandler(regs*)+0xa0>
c0016306:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016309:	be 03 00 00 00       	mov    esi,0x3
c001630e:	e9 7c fe ff ff       	jmp    c001618f <Vm::faultHandler(regs*)+0xa0>
c0016313:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016316:	be 04 00 00 00       	mov    esi,0x4
c001631b:	e9 6f fe ff ff       	jmp    c001618f <Vm::faultHandler(regs*)+0xa0>
c0016320:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016323:	be 05 00 00 00       	mov    esi,0x5
c0016328:	e9 62 fe ff ff       	jmp    c001618f <Vm::faultHandler(regs*)+0xa0>
c001632d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016330:	bd 01 00 00 00       	mov    ebp,0x1
c0016335:	e9 55 fe ff ff       	jmp    c001618f <Vm::faultHandler(regs*)+0xa0>
c001633a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001633d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016342:	e9 48 fe ff ff       	jmp    c001618f <Vm::faultHandler(regs*)+0xa0>
c0016347:	83 e5 01             	and    ebp,0x1
c001634a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001634d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016351:	74 30                	je     c0016383 <Vm::faultHandler(regs*)+0x294>
c0016353:	83 e9 04             	sub    ecx,0x4
c0016356:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001635c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016362:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016365:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016368:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001636e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016372:	0f 84 12 04 00 00    	je     c001678a <Vm::faultHandler(regs*)+0x69b>
c0016378:	80 ce 02             	or     dh,0x2
c001637b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001637e:	e9 07 04 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x69b>
c0016383:	83 e9 02             	sub    ecx,0x2
c0016386:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001638c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001638f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016393:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016399:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001639d:	74 05                	je     c00163a4 <Vm::faultHandler(regs*)+0x2b5>
c001639f:	80 ce 02             	or     dh,0x2
c00163a2:	eb 03                	jmp    c00163a7 <Vm::faultHandler(regs*)+0x2b8>
c00163a4:	80 e6 fd             	and    dh,0xfd
c00163a7:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00163ab:	e9 da 03 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x69b>
c00163b0:	83 e5 01             	and    ebp,0x1
c00163b3:	74 2a                	je     c00163df <Vm::faultHandler(regs*)+0x2f0>
c00163b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00163b7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00163bd:	81 ca 00 02 02 00    	or     edx,0x20200
c00163c3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00163c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163ce:	c1 e8 09             	shr    eax,0x9
c00163d1:	83 e0 01             	and    eax,0x1
c00163d4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163d7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00163da:	83 c0 04             	add    eax,0x4
c00163dd:	eb 24                	jmp    c0016403 <Vm::faultHandler(regs*)+0x314>
c00163df:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00163e2:	81 ca 00 02 02 00    	or     edx,0x20200
c00163e8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163eb:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00163ee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163f4:	c1 e8 09             	shr    eax,0x9
c00163f7:	83 e0 01             	and    eax,0x1
c00163fa:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163fd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016400:	83 c0 02             	add    eax,0x2
c0016403:	25 ff ff 00 00       	and    eax,0xffff
c0016408:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001640b:	e9 7a 03 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x69b>
c0016410:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016414:	3d ee 00 00 00       	cmp    eax,0xee
c0016419:	75 10                	jne    c001642b <Vm::faultHandler(regs*)+0x33c>
c001641b:	83 ec 0c             	sub    esp,0xc
c001641e:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016421:	e8 97 f8 ff ff       	call   c0015cbd <Vm::mainloop3(unsigned long)>
c0016426:	e9 4a 03 00 00       	jmp    c0016775 <Vm::faultHandler(regs*)+0x686>
c001642b:	83 ec 0c             	sub    esp,0xc
c001642e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016432:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016436:	51                   	push   ecx
c0016437:	50                   	push   eax
c0016438:	53                   	push   ebx
c0016439:	e8 b4 fb ff ff       	call   c0015ff2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001643e:	83 c4 20             	add    esp,0x20
c0016441:	e9 47 03 00 00       	jmp    c001678d <Vm::faultHandler(regs*)+0x69e>
c0016446:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001644b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001644f:	e9 36 03 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x69b>
c0016454:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016459:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001645d:	e9 28 03 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x69b>
c0016462:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016467:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001646a:	74 2b                	je     c0016497 <Vm::faultHandler(regs*)+0x3a8>
c001646c:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016473:	76 22                	jbe    c0016497 <Vm::faultHandler(regs*)+0x3a8>
c0016475:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016479:	50                   	push   eax
c001647a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001647e:	50                   	push   eax
c001647f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016483:	50                   	push   eax
c0016484:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016488:	50                   	push   eax
c0016489:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001648d:	50                   	push   eax
c001648e:	6a 6c                	push   0x6c
c0016490:	6a 6c                	push   0x6c
c0016492:	e9 c0 01 00 00       	jmp    c0016657 <Vm::faultHandler(regs*)+0x568>
c0016497:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001649b:	83 ec 0c             	sub    esp,0xc
c001649e:	0f b7 f6             	movzx  esi,si
c00164a1:	50                   	push   eax
c00164a2:	e8 66 f7 ff ff       	call   c0015c0d <Vm::inbv(unsigned short)>
c00164a7:	83 c4 0c             	add    esp,0xc
c00164aa:	0f b6 c0             	movzx  eax,al
c00164ad:	50                   	push   eax
c00164ae:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00164b2:	50                   	push   eax
c00164b3:	56                   	push   esi
c00164b4:	e8 f6 fb ff ff       	call   c00160af <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00164b9:	83 c4 10             	add    esp,0x10
c00164bc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164bf:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164c3:	74 03                	je     c00164c8 <Vm::faultHandler(regs*)+0x3d9>
c00164c5:	48                   	dec    eax
c00164c6:	eb 01                	jmp    c00164c9 <Vm::faultHandler(regs*)+0x3da>
c00164c8:	40                   	inc    eax
c00164c9:	0f b7 c0             	movzx  eax,ax
c00164cc:	e9 8e 00 00 00       	jmp    c001655f <Vm::faultHandler(regs*)+0x470>
c00164d1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00164d6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00164d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164dc:	74 29                	je     c0016507 <Vm::faultHandler(regs*)+0x418>
c00164de:	3d ff ff 00 00       	cmp    eax,0xffff
c00164e3:	76 22                	jbe    c0016507 <Vm::faultHandler(regs*)+0x418>
c00164e5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00164e9:	50                   	push   eax
c00164ea:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00164ee:	50                   	push   eax
c00164ef:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00164f3:	50                   	push   eax
c00164f4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00164f8:	50                   	push   eax
c00164f9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164fd:	50                   	push   eax
c00164fe:	6a 6d                	push   0x6d
c0016500:	6a 6d                	push   0x6d
c0016502:	e9 50 01 00 00       	jmp    c0016657 <Vm::faultHandler(regs*)+0x568>
c0016507:	83 e5 01             	and    ebp,0x1
c001650a:	0f b7 c8             	movzx  ecx,ax
c001650d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016510:	0f b7 f6             	movzx  esi,si
c0016513:	74 1e                	je     c0016533 <Vm::faultHandler(regs*)+0x444>
c0016515:	ed                   	in     eax,dx
c0016516:	55                   	push   ebp
c0016517:	50                   	push   eax
c0016518:	51                   	push   ecx
c0016519:	56                   	push   esi
c001651a:	e8 bb fb ff ff       	call   c00160da <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001651f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016522:	83 c4 10             	add    esp,0x10
c0016525:	8d 50 04             	lea    edx,[eax+0x4]
c0016528:	83 e8 04             	sub    eax,0x4
c001652b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016531:	eb 20                	jmp    c0016553 <Vm::faultHandler(regs*)+0x464>
c0016533:	66 ed                	in     ax,dx
c0016535:	57                   	push   edi
c0016536:	0f b7 c0             	movzx  eax,ax
c0016539:	50                   	push   eax
c001653a:	51                   	push   ecx
c001653b:	56                   	push   esi
c001653c:	e8 83 fb ff ff       	call   c00160c4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016541:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016544:	83 c4 10             	add    esp,0x10
c0016547:	8d 50 02             	lea    edx,[eax+0x2]
c001654a:	83 e8 02             	sub    eax,0x2
c001654d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016553:	25 ff ff 00 00       	and    eax,0xffff
c0016558:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001655c:	0f 44 c2             	cmove  eax,edx
c001655f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016562:	e9 23 02 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x69b>
c0016567:	8d 46 ff             	lea    eax,[esi-0x1]
c001656a:	0f b6 f0             	movzx  esi,al
c001656d:	83 fe 05             	cmp    esi,0x5
c0016570:	77 23                	ja     c0016595 <Vm::faultHandler(regs*)+0x4a6>
c0016572:	ff 24 b5 38 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdebc8]
c0016579:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001657e:	eb 15                	jmp    c0016595 <Vm::faultHandler(regs*)+0x4a6>
c0016580:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016584:	eb 0f                	jmp    c0016595 <Vm::faultHandler(regs*)+0x4a6>
c0016586:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001658a:	eb 09                	jmp    c0016595 <Vm::faultHandler(regs*)+0x4a6>
c001658c:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016590:	eb 03                	jmp    c0016595 <Vm::faultHandler(regs*)+0x4a6>
c0016592:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016595:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001659a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001659d:	74 29                	je     c00165c8 <Vm::faultHandler(regs*)+0x4d9>
c001659f:	3d ff ff 00 00       	cmp    eax,0xffff
c00165a4:	76 22                	jbe    c00165c8 <Vm::faultHandler(regs*)+0x4d9>
c00165a6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00165aa:	50                   	push   eax
c00165ab:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00165af:	50                   	push   eax
c00165b0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165b4:	50                   	push   eax
c00165b5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165b9:	50                   	push   eax
c00165ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165be:	50                   	push   eax
c00165bf:	6a 6e                	push   0x6e
c00165c1:	6a 6e                	push   0x6e
c00165c3:	e9 8f 00 00 00       	jmp    c0016657 <Vm::faultHandler(regs*)+0x568>
c00165c8:	52                   	push   edx
c00165c9:	0f b7 c0             	movzx  eax,ax
c00165cc:	52                   	push   edx
c00165cd:	50                   	push   eax
c00165ce:	57                   	push   edi
c00165cf:	e8 a7 fa ff ff       	call   c001607b <Vm::readByteFromReal(unsigned short, unsigned short)>
c00165d4:	59                   	pop    ecx
c00165d5:	5e                   	pop    esi
c00165d6:	0f b6 c0             	movzx  eax,al
c00165d9:	50                   	push   eax
c00165da:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00165de:	50                   	push   eax
c00165df:	e8 3c f6 ff ff       	call   c0015c20 <Vm::outbv(unsigned short, unsigned char)>
c00165e4:	83 c4 10             	add    esp,0x10
c00165e7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00165ea:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165ee:	74 03                	je     c00165f3 <Vm::faultHandler(regs*)+0x504>
c00165f0:	48                   	dec    eax
c00165f1:	eb 01                	jmp    c00165f4 <Vm::faultHandler(regs*)+0x505>
c00165f3:	40                   	inc    eax
c00165f4:	0f b7 c0             	movzx  eax,ax
c00165f7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00165fa:	e9 8b 01 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x69b>
c00165ff:	8d 46 ff             	lea    eax,[esi-0x1]
c0016602:	0f b6 f0             	movzx  esi,al
c0016605:	83 fe 05             	cmp    esi,0x5
c0016608:	77 1e                	ja     c0016628 <Vm::faultHandler(regs*)+0x539>
c001660a:	ff 24 b5 50 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdebb0]
c0016611:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016615:	eb 11                	jmp    c0016628 <Vm::faultHandler(regs*)+0x539>
c0016617:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001661a:	eb 0c                	jmp    c0016628 <Vm::faultHandler(regs*)+0x539>
c001661c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001661f:	eb 07                	jmp    c0016628 <Vm::faultHandler(regs*)+0x539>
c0016621:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016624:	eb 02                	jmp    c0016628 <Vm::faultHandler(regs*)+0x539>
c0016626:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016628:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001662d:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016630:	74 37                	je     c0016669 <Vm::faultHandler(regs*)+0x57a>
c0016632:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016638:	76 2f                	jbe    c0016669 <Vm::faultHandler(regs*)+0x57a>
c001663a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001663e:	50                   	push   eax
c001663f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016643:	50                   	push   eax
c0016644:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016648:	50                   	push   eax
c0016649:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001664d:	50                   	push   eax
c001664e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016652:	50                   	push   eax
c0016653:	6a 6f                	push   0x6f
c0016655:	6a 6f                	push   0x6f
c0016657:	68 de 13 02 c0       	push   0xc00213de
c001665c:	e8 22 43 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0016661:	83 c4 20             	add    esp,0x20
c0016664:	e9 86 01 00 00       	jmp    c00167ef <Vm::faultHandler(regs*)+0x700>
c0016669:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001666c:	0f b7 d7             	movzx  edx,di
c001666f:	0f b7 c6             	movzx  eax,si
c0016672:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016675:	81 e1 00 04 00 00    	and    ecx,0x400
c001667b:	83 e5 01             	and    ebp,0x1
c001667e:	74 1c                	je     c001669c <Vm::faultHandler(regs*)+0x5ad>
c0016680:	55                   	push   ebp
c0016681:	55                   	push   ebp
c0016682:	50                   	push   eax
c0016683:	52                   	push   edx
c0016684:	e8 15 fa ff ff       	call   c001609e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016689:	83 c4 10             	add    esp,0x10
c001668c:	89 fa                	mov    edx,edi
c001668e:	ef                   	out    dx,eax
c001668f:	8d 46 04             	lea    eax,[esi+0x4]
c0016692:	83 ee 04             	sub    esi,0x4
c0016695:	25 ff ff 00 00       	and    eax,0xffff
c001669a:	eb 1b                	jmp    c00166b7 <Vm::faultHandler(regs*)+0x5c8>
c001669c:	55                   	push   ebp
c001669d:	55                   	push   ebp
c001669e:	50                   	push   eax
c001669f:	52                   	push   edx
c00166a0:	e8 e7 f9 ff ff       	call   c001608c <Vm::readWordFromReal(unsigned short, unsigned short)>
c00166a5:	83 c4 10             	add    esp,0x10
c00166a8:	89 fa                	mov    edx,edi
c00166aa:	66 ef                	out    dx,ax
c00166ac:	8d 46 02             	lea    eax,[esi+0x2]
c00166af:	83 ee 02             	sub    esi,0x2
c00166b2:	25 ff ff 00 00       	and    eax,0xffff
c00166b7:	81 e6 ff ff 00 00    	and    esi,0xffff
c00166bd:	85 c9                	test   ecx,ecx
c00166bf:	0f 44 f0             	cmove  esi,eax
c00166c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00166c5:	e9 c0 00 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x69b>
c00166ca:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166d1:	83 ec 0c             	sub    esp,0xc
c00166d4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166d8:	50                   	push   eax
c00166d9:	e8 2f f5 ff ff       	call   c0015c0d <Vm::inbv(unsigned short)>
c00166de:	0f b6 c0             	movzx  eax,al
c00166e1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00166e4:	eb 3a                	jmp    c0016720 <Vm::faultHandler(regs*)+0x631>
c00166e6:	83 e5 01             	and    ebp,0x1
c00166e9:	74 07                	je     c00166f2 <Vm::faultHandler(regs*)+0x603>
c00166eb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166ef:	ed                   	in     eax,dx
c00166f0:	eb 14                	jmp    c0016706 <Vm::faultHandler(regs*)+0x617>
c00166f2:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00166f5:	66 31 f6             	xor    si,si
c00166f8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00166fb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166ff:	66 ed                	in     ax,dx
c0016701:	0f b7 c0             	movzx  eax,ax
c0016704:	09 f0                	or     eax,esi
c0016706:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016709:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001670d:	eb 7e                	jmp    c001678d <Vm::faultHandler(regs*)+0x69e>
c001670f:	52                   	push   edx
c0016710:	52                   	push   edx
c0016711:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016715:	50                   	push   eax
c0016716:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001671a:	50                   	push   eax
c001671b:	e8 00 f5 ff ff       	call   c0015c20 <Vm::outbv(unsigned short, unsigned char)>
c0016720:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016724:	eb 4f                	jmp    c0016775 <Vm::faultHandler(regs*)+0x686>
c0016726:	83 e5 01             	and    ebp,0x1
c0016729:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001672c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016730:	74 03                	je     c0016735 <Vm::faultHandler(regs*)+0x646>
c0016732:	ef                   	out    dx,eax
c0016733:	eb d4                	jmp    c0016709 <Vm::faultHandler(regs*)+0x61a>
c0016735:	66 ef                	out    dx,ax
c0016737:	eb d0                	jmp    c0016709 <Vm::faultHandler(regs*)+0x61a>
c0016739:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001673d:	83 ec 0c             	sub    esp,0xc
c0016740:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016747:	50                   	push   eax
c0016748:	e8 c0 f4 ff ff       	call   c0015c0d <Vm::inbv(unsigned short)>
c001674d:	0f b6 c0             	movzx  eax,al
c0016750:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016753:	eb 1d                	jmp    c0016772 <Vm::faultHandler(regs*)+0x683>
c0016755:	83 e5 01             	and    ebp,0x1
c0016758:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001675b:	74 03                	je     c0016760 <Vm::faultHandler(regs*)+0x671>
c001675d:	ed                   	in     eax,dx
c001675e:	eb 0d                	jmp    c001676d <Vm::faultHandler(regs*)+0x67e>
c0016760:	66 ed                	in     ax,dx
c0016762:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016765:	0f b7 c0             	movzx  eax,ax
c0016768:	66 31 d2             	xor    dx,dx
c001676b:	09 d0                	or     eax,edx
c001676d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016770:	eb 18                	jmp    c001678a <Vm::faultHandler(regs*)+0x69b>
c0016772:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016775:	83 c4 10             	add    esp,0x10
c0016778:	eb 13                	jmp    c001678d <Vm::faultHandler(regs*)+0x69e>
c001677a:	83 e5 01             	and    ebp,0x1
c001677d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016780:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016783:	74 03                	je     c0016788 <Vm::faultHandler(regs*)+0x699>
c0016785:	ef                   	out    dx,eax
c0016786:	eb 02                	jmp    c001678a <Vm::faultHandler(regs*)+0x69b>
c0016788:	66 ef                	out    dx,ax
c001678a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001678d:	b0 01                	mov    al,0x1
c001678f:	eb 60                	jmp    c00167f1 <Vm::faultHandler(regs*)+0x702>
c0016791:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016795:	50                   	push   eax
c0016796:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001679a:	50                   	push   eax
c001679b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001679f:	50                   	push   eax
c00167a0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00167a4:	50                   	push   eax
c00167a5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167a9:	50                   	push   eax
c00167aa:	52                   	push   edx
c00167ab:	52                   	push   edx
c00167ac:	68 0b 14 02 c0       	push   0xc002140b
c00167b1:	e8 cd 41 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00167b6:	83 c4 20             	add    esp,0x20
c00167b9:	83 ec 0c             	sub    esp,0xc
c00167bc:	6a 60                	push   0x60
c00167be:	e8 4a f4 ff ff       	call   c0015c0d <Vm::inbv(unsigned short)>
c00167c3:	83 c4 10             	add    esp,0x10
c00167c6:	0f b6 d0             	movzx  edx,al
c00167c9:	83 fa 1c             	cmp    edx,0x1c
c00167cc:	74 05                	je     c00167d3 <Vm::faultHandler(regs*)+0x6e4>
c00167ce:	83 fa 5a             	cmp    edx,0x5a
c00167d1:	75 e6                	jne    c00167b9 <Vm::faultHandler(regs*)+0x6ca>
c00167d3:	0f b6 c0             	movzx  eax,al
c00167d6:	83 f8 1c             	cmp    eax,0x1c
c00167d9:	74 05                	je     c00167e0 <Vm::faultHandler(regs*)+0x6f1>
c00167db:	83 f8 5a             	cmp    eax,0x5a
c00167de:	75 0f                	jne    c00167ef <Vm::faultHandler(regs*)+0x700>
c00167e0:	83 ec 0c             	sub    esp,0xc
c00167e3:	6a 60                	push   0x60
c00167e5:	e8 23 f4 ff ff       	call   c0015c0d <Vm::inbv(unsigned short)>
c00167ea:	83 c4 10             	add    esp,0x10
c00167ed:	eb e4                	jmp    c00167d3 <Vm::faultHandler(regs*)+0x6e4>
c00167ef:	31 c0                	xor    eax,eax
c00167f1:	83 c4 2c             	add    esp,0x2c
c00167f4:	5b                   	pop    ebx
c00167f5:	5e                   	pop    esi
c00167f6:	5f                   	pop    edi
c00167f7:	5d                   	pop    ebp
c00167f8:	c3                   	ret    

c00167f9 <noCopro(unsigned long)>:
c00167f9:	c3                   	ret    

c00167fa <nmiHandler(regs*, void*)>:
c00167fa:	83 ec 0c             	sub    esp,0xc
c00167fd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016802:	83 ec 0c             	sub    esp,0xc
c0016805:	50                   	push   eax
c0016806:	e8 c3 0a ff ff       	call   c00072ce <Computer::handleNMI()>
c001680b:	83 c4 10             	add    esp,0x10
c001680e:	90                   	nop
c001680f:	83 c4 0c             	add    esp,0xc
c0016812:	c3                   	ret    

c0016813 <doubleFault(regs*, void*)>:
c0016813:	55                   	push   ebp
c0016814:	89 e5                	mov    ebp,esp
c0016816:	83 ec 08             	sub    esp,0x8
c0016819:	83 ec 0c             	sub    esp,0xc
c001681c:	68 68 14 02 c0       	push   0xc0021468
c0016821:	e8 27 a0 ff ff       	call   c001084d <KePanic(char const*)>
c0016826:	83 c4 10             	add    esp,0x10
c0016829:	90                   	nop
c001682a:	c9                   	leave  
c001682b:	c3                   	ret    

c001682c <displayDebugInfo(regs*)>:
c001682c:	83 ec 1c             	sub    esp,0x1c
c001682f:	0f 20 c0             	mov    eax,cr0
c0016832:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016836:	0f 20 d0             	mov    eax,cr2
c0016839:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001683d:	0f 20 d8             	mov    eax,cr3
c0016840:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016844:	0f 20 e0             	mov    eax,cr4
c0016847:	89 04 24             	mov    DWORD PTR [esp],eax
c001684a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016851:	83 ec 08             	sub    esp,0x8
c0016854:	50                   	push   eax
c0016855:	68 84 14 02 c0       	push   0xc0021484
c001685a:	e8 24 41 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001685f:	83 c4 10             	add    esp,0x10
c0016862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016866:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016869:	83 ec 08             	sub    esp,0x8
c001686c:	50                   	push   eax
c001686d:	68 75 14 02 c0       	push   0xc0021475
c0016872:	e8 0c 41 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0016877:	83 c4 10             	add    esp,0x10
c001687a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016881:	83 ec 08             	sub    esp,0x8
c0016884:	50                   	push   eax
c0016885:	68 80 14 02 c0       	push   0xc0021480
c001688a:	e8 f4 40 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001688f:	83 c4 10             	add    esp,0x10
c0016892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016896:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016899:	83 ec 08             	sub    esp,0x8
c001689c:	50                   	push   eax
c001689d:	68 8f 14 02 c0       	push   0xc002148f
c00168a2:	e8 dc 40 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00168a7:	83 c4 10             	add    esp,0x10
c00168aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ae:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00168b1:	83 ec 08             	sub    esp,0x8
c00168b4:	50                   	push   eax
c00168b5:	68 9a 14 02 c0       	push   0xc002149a
c00168ba:	e8 c4 40 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00168bf:	83 c4 10             	add    esp,0x10
c00168c2:	83 ec 08             	sub    esp,0x8
c00168c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168c9:	68 a5 14 02 c0       	push   0xc00214a5
c00168ce:	e8 b0 40 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00168d3:	83 c4 10             	add    esp,0x10
c00168d6:	83 ec 08             	sub    esp,0x8
c00168d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00168dd:	68 b0 14 02 c0       	push   0xc00214b0
c00168e2:	e8 9c 40 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00168e7:	83 c4 10             	add    esp,0x10
c00168ea:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168f5:	83 ec 0c             	sub    esp,0xc
c00168f8:	50                   	push   eax
c00168f9:	e8 5b 1e ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00168fe:	83 c4 10             	add    esp,0x10
c0016901:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016906:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001690c:	83 ec 08             	sub    esp,0x8
c001690f:	68 bb 14 02 c0       	push   0xc00214bb
c0016914:	50                   	push   eax
c0016915:	e8 7c 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001691a:	83 c4 10             	add    esp,0x10
c001691d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016922:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016928:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001692c:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001692f:	83 ec 08             	sub    esp,0x8
c0016932:	52                   	push   edx
c0016933:	50                   	push   eax
c0016934:	e8 17 21 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016939:	83 c4 10             	add    esp,0x10
c001693c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016941:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016947:	83 ec 08             	sub    esp,0x8
c001694a:	68 c9 14 02 c0       	push   0xc00214c9
c001694f:	50                   	push   eax
c0016950:	e8 41 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016955:	83 c4 10             	add    esp,0x10
c0016958:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001695d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016963:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016968:	8b 12                	mov    edx,DWORD PTR [edx]
c001696a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001696d:	83 c2 0c             	add    edx,0xc
c0016970:	83 ec 08             	sub    esp,0x8
c0016973:	52                   	push   edx
c0016974:	50                   	push   eax
c0016975:	e8 1c 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001697a:	83 c4 10             	add    esp,0x10
c001697d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016982:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016988:	83 ec 08             	sub    esp,0x8
c001698b:	68 d2 14 02 c0       	push   0xc00214d2
c0016990:	50                   	push   eax
c0016991:	e8 00 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016996:	83 c4 10             	add    esp,0x10
c0016999:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001699e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169a8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00169ab:	83 ec 08             	sub    esp,0x8
c00169ae:	52                   	push   edx
c00169af:	50                   	push   eax
c00169b0:	e8 9b 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c00169b5:	83 c4 10             	add    esp,0x10
c00169b8:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169c3:	83 ec 08             	sub    esp,0x8
c00169c6:	68 da 14 02 c0       	push   0xc00214da
c00169cb:	50                   	push   eax
c00169cc:	e8 c5 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00169d1:	83 c4 10             	add    esp,0x10
c00169d4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169e3:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00169e6:	83 ec 08             	sub    esp,0x8
c00169e9:	52                   	push   edx
c00169ea:	50                   	push   eax
c00169eb:	e8 60 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c00169f0:	83 c4 10             	add    esp,0x10
c00169f3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169fe:	83 ec 08             	sub    esp,0x8
c0016a01:	68 e2 14 02 c0       	push   0xc00214e2
c0016a06:	50                   	push   eax
c0016a07:	e8 8a 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a0c:	83 c4 10             	add    esp,0x10
c0016a0f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a1a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a1e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016a21:	83 ec 08             	sub    esp,0x8
c0016a24:	52                   	push   edx
c0016a25:	50                   	push   eax
c0016a26:	e8 25 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a2b:	83 c4 10             	add    esp,0x10
c0016a2e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a39:	83 ec 08             	sub    esp,0x8
c0016a3c:	68 ea 14 02 c0       	push   0xc00214ea
c0016a41:	50                   	push   eax
c0016a42:	e8 4f 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a55:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a59:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016a5c:	83 ec 08             	sub    esp,0x8
c0016a5f:	52                   	push   edx
c0016a60:	50                   	push   eax
c0016a61:	e8 ea 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a66:	83 c4 10             	add    esp,0x10
c0016a69:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a74:	83 ec 08             	sub    esp,0x8
c0016a77:	68 f2 14 02 c0       	push   0xc00214f2
c0016a7c:	50                   	push   eax
c0016a7d:	e8 14 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a82:	83 c4 10             	add    esp,0x10
c0016a85:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a90:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a94:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016a97:	83 ec 08             	sub    esp,0x8
c0016a9a:	52                   	push   edx
c0016a9b:	50                   	push   eax
c0016a9c:	e8 af 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016aa1:	83 c4 10             	add    esp,0x10
c0016aa4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aa9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aaf:	83 ec 08             	sub    esp,0x8
c0016ab2:	68 fa 14 02 c0       	push   0xc00214fa
c0016ab7:	50                   	push   eax
c0016ab8:	e8 d9 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016abd:	83 c4 10             	add    esp,0x10
c0016ac0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ac5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016acb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016acf:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016ad2:	83 ec 08             	sub    esp,0x8
c0016ad5:	52                   	push   edx
c0016ad6:	50                   	push   eax
c0016ad7:	e8 74 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016adc:	83 c4 10             	add    esp,0x10
c0016adf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ae4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aea:	83 ec 08             	sub    esp,0x8
c0016aed:	68 02 15 02 c0       	push   0xc0021502
c0016af2:	50                   	push   eax
c0016af3:	e8 9e 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016af8:	83 c4 10             	add    esp,0x10
c0016afb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b06:	83 ec 08             	sub    esp,0x8
c0016b09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016b0d:	50                   	push   eax
c0016b0e:	e8 3d 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b13:	83 c4 10             	add    esp,0x10
c0016b16:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b21:	83 ec 08             	sub    esp,0x8
c0016b24:	68 0b 15 02 c0       	push   0xc002150b
c0016b29:	50                   	push   eax
c0016b2a:	e8 67 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016b2f:	83 c4 10             	add    esp,0x10
c0016b32:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b3d:	83 ec 08             	sub    esp,0x8
c0016b40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b44:	50                   	push   eax
c0016b45:	e8 06 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b4a:	83 c4 10             	add    esp,0x10
c0016b4d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b58:	83 ec 08             	sub    esp,0x8
c0016b5b:	68 13 15 02 c0       	push   0xc0021513
c0016b60:	50                   	push   eax
c0016b61:	e8 30 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016b66:	83 c4 10             	add    esp,0x10
c0016b69:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b74:	83 ec 08             	sub    esp,0x8
c0016b77:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016b7b:	50                   	push   eax
c0016b7c:	e8 cf 1e ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b81:	83 c4 10             	add    esp,0x10
c0016b84:	fa                   	cli    
c0016b85:	f4                   	hlt    
c0016b86:	eb fe                	jmp    c0016b86 <displayDebugInfo(regs*)+0x35a>

c0016b88 <HalSystemIdle()>:
c0016b88:	56                   	push   esi
c0016b89:	53                   	push   ebx
c0016b8a:	83 ec 14             	sub    esp,0x14
c0016b8d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b98:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016b9e:	83 e0 04             	and    eax,0x4
c0016ba1:	0f b6 c0             	movzx  eax,al
c0016ba4:	85 c0                	test   eax,eax
c0016ba6:	0f 95 c0             	setne  al
c0016ba9:	0f b6 c0             	movzx  eax,al
c0016bac:	85 c0                	test   eax,eax
c0016bae:	74 4c                	je     c0016bfc <HalSystemIdle()+0x74>
c0016bb0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bb5:	83 ec 08             	sub    esp,0x8
c0016bb8:	68 e1 00 00 00       	push   0xe1
c0016bbd:	50                   	push   eax
c0016bbe:	e8 17 05 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bce:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016bd7:	83 e2 02             	and    edx,0x2
c0016bda:	89 d3                	mov    ebx,edx
c0016bdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016be0:	83 e2 00             	and    edx,0x0
c0016be3:	89 d6                	mov    esi,edx
c0016be5:	56                   	push   esi
c0016be6:	53                   	push   ebx
c0016be7:	68 e1 00 00 00       	push   0xe1
c0016bec:	50                   	push   eax
c0016bed:	e8 14 05 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016bf2:	83 c4 10             	add    esp,0x10
c0016bf5:	e8 9a 95 fe ff       	call   c0000194 <doTPAUSE>
c0016bfa:	eb 01                	jmp    c0016bfd <HalSystemIdle()+0x75>
c0016bfc:	f4                   	hlt    
c0016bfd:	90                   	nop
c0016bfe:	83 c4 14             	add    esp,0x14
c0016c01:	5b                   	pop    ebx
c0016c02:	5e                   	pop    esi
c0016c03:	c3                   	ret    

c0016c04 <displayProgramFault(char const*)>:
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	83 ec 0c             	sub    esp,0xc
c0016c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c0e:	e8 70 3d ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c26:	85 c0                	test   eax,eax
c0016c28:	74 21                	je     c0016c4b <displayProgramFault(char const*)+0x47>
c0016c2a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c31:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c3a:	6a 04                	push   0x4
c0016c3c:	6a 0f                	push   0xf
c0016c3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c42:	50                   	push   eax
c0016c43:	e8 c0 1e ff ff       	call   c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016c48:	83 c4 10             	add    esp,0x10
c0016c4b:	90                   	nop
c0016c4c:	83 c4 0c             	add    esp,0xc
c0016c4f:	c3                   	ret    

c0016c50 <gpFault(regs*, void*)>:
c0016c50:	83 ec 1c             	sub    esp,0x1c
c0016c53:	c7 05 14 82 02 c0 ef 60 01 c0 	mov    DWORD PTR ds:0xc0028214,0xc00160ef
c0016c5d:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016c62:	85 c0                	test   eax,eax
c0016c64:	74 1e                	je     c0016c84 <gpFault(regs*, void*)+0x34>
c0016c66:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016c6b:	83 ec 0c             	sub    esp,0xc
c0016c6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c72:	ff d0                	call   eax
c0016c74:	83 c4 10             	add    esp,0x10
c0016c77:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016c7b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016c80:	85 c0                	test   eax,eax
c0016c82:	75 2e                	jne    c0016cb2 <gpFault(regs*, void*)+0x62>
c0016c84:	83 ec 0c             	sub    esp,0xc
c0016c87:	68 1b 15 02 c0       	push   0xc002151b
c0016c8c:	e8 73 ff ff ff       	call   c0016c04 <displayProgramFault(char const*)>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	83 ec 0c             	sub    esp,0xc
c0016c97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c9b:	e8 8c fb ff ff       	call   c001682c <displayDebugInfo(regs*)>
c0016ca0:	83 c4 10             	add    esp,0x10
c0016ca3:	83 ec 0c             	sub    esp,0xc
c0016ca6:	6a 00                	push   0x0
c0016ca8:	e8 07 ee ff ff       	call   c0015ab4 <Thr::terminateFromIRQ(int)>
c0016cad:	83 c4 10             	add    esp,0x10
c0016cb0:	eb 01                	jmp    c0016cb3 <gpFault(regs*, void*)+0x63>
c0016cb2:	90                   	nop
c0016cb3:	83 c4 1c             	add    esp,0x1c
c0016cb6:	c3                   	ret    

c0016cb7 <pgFault(regs*, void*)>:
c0016cb7:	83 ec 1c             	sub    esp,0x1c
c0016cba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cbe:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016cc1:	0f 20 d0             	mov    eax,cr2
c0016cc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ccc:	83 ec 04             	sub    esp,0x4
c0016ccf:	52                   	push   edx
c0016cd0:	50                   	push   eax
c0016cd1:	68 f8 15 02 c0       	push   0xc00215f8
c0016cd6:	e8 a8 3c ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ce5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ce8:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016cee:	0f 20 d2             	mov    edx,cr2
c0016cf1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016cf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cf9:	83 ec 08             	sub    esp,0x8
c0016cfc:	52                   	push   edx
c0016cfd:	50                   	push   eax
c0016cfe:	e8 23 38 ff ff       	call   c000a526 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	0f b6 c0             	movzx  eax,al
c0016d09:	85 c0                	test   eax,eax
c0016d0b:	75 2e                	jne    c0016d3b <pgFault(regs*, void*)+0x84>
c0016d0d:	83 ec 0c             	sub    esp,0xc
c0016d10:	68 34 15 02 c0       	push   0xc0021534
c0016d15:	e8 ea fe ff ff       	call   c0016c04 <displayProgramFault(char const*)>
c0016d1a:	83 c4 10             	add    esp,0x10
c0016d1d:	83 ec 0c             	sub    esp,0xc
c0016d20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d24:	e8 03 fb ff ff       	call   c001682c <displayDebugInfo(regs*)>
c0016d29:	83 c4 10             	add    esp,0x10
c0016d2c:	83 ec 0c             	sub    esp,0xc
c0016d2f:	6a 00                	push   0x0
c0016d31:	e8 7e ed ff ff       	call   c0015ab4 <Thr::terminateFromIRQ(int)>
c0016d36:	83 c4 10             	add    esp,0x10
c0016d39:	eb 01                	jmp    c0016d3c <pgFault(regs*, void*)+0x85>
c0016d3b:	90                   	nop
c0016d3c:	83 c4 1c             	add    esp,0x1c
c0016d3f:	c3                   	ret    

c0016d40 <otherISRHandler(regs*, void*)>:
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	83 ec 0c             	sub    esp,0xc
c0016d46:	68 20 16 02 c0       	push   0xc0021620
c0016d4b:	e8 b4 fe ff ff       	call   c0016c04 <displayProgramFault(char const*)>
c0016d50:	83 c4 10             	add    esp,0x10
c0016d53:	83 ec 0c             	sub    esp,0xc
c0016d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d5a:	e8 cd fa ff ff       	call   c001682c <displayDebugInfo(regs*)>
c0016d5f:	83 c4 10             	add    esp,0x10
c0016d62:	83 ec 0c             	sub    esp,0xc
c0016d65:	6a 00                	push   0x0
c0016d67:	e8 48 ed ff ff       	call   c0015ab4 <Thr::terminateFromIRQ(int)>
c0016d6c:	83 c4 10             	add    esp,0x10
c0016d6f:	90                   	nop
c0016d70:	83 c4 0c             	add    esp,0xc
c0016d73:	c3                   	ret    

c0016d74 <opcodeFault(regs*, void*)>:
c0016d74:	55                   	push   ebp
c0016d75:	89 e5                	mov    ebp,esp
c0016d77:	83 ec 08             	sub    esp,0x8
c0016d7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d7d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d80:	83 ec 08             	sub    esp,0x8
c0016d83:	50                   	push   eax
c0016d84:	68 3f 15 02 c0       	push   0xc002153f
c0016d89:	e8 f5 3b ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0016d8e:	83 c4 10             	add    esp,0x10
c0016d91:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016d96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d9c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016da2:	0f b6 c0             	movzx  eax,al
c0016da5:	85 c0                	test   eax,eax
c0016da7:	74 21                	je     c0016dca <opcodeFault(regs*, void*)+0x56>
c0016da9:	83 ec 0c             	sub    esp,0xc
c0016dac:	68 48 16 02 c0       	push   0xc0021648
c0016db1:	e8 cd 3b ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016dbc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016dbf:	8d 50 19             	lea    edx,[eax+0x19]
c0016dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016dc5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016dc8:	eb 2b                	jmp    c0016df5 <opcodeFault(regs*, void*)+0x81>
c0016dca:	83 ec 0c             	sub    esp,0xc
c0016dcd:	68 4d 15 02 c0       	push   0xc002154d
c0016dd2:	e8 2d fe ff ff       	call   c0016c04 <displayProgramFault(char const*)>
c0016dd7:	83 c4 10             	add    esp,0x10
c0016dda:	83 ec 0c             	sub    esp,0xc
c0016ddd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016de0:	e8 47 fa ff ff       	call   c001682c <displayDebugInfo(regs*)>
c0016de5:	83 c4 10             	add    esp,0x10
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	6a 00                	push   0x0
c0016ded:	e8 c2 ec ff ff       	call   c0015ab4 <Thr::terminateFromIRQ(int)>
c0016df2:	83 c4 10             	add    esp,0x10
c0016df5:	c9                   	leave  
c0016df6:	c3                   	ret    

c0016df7 <i386SaveCoprocessor(void*)>:
c0016df7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dfb:	83 c0 3f             	add    eax,0x3f
c0016dfe:	83 e0 c0             	and    eax,0xffffffc0
c0016e01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e05:	ff 25 10 82 02 c0    	jmp    DWORD PTR ds:0xc0028210

c0016e0b <i386LoadCoprocessor(void*)>:
c0016e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e0f:	83 c0 3f             	add    eax,0x3f
c0016e12:	83 e0 c0             	and    eax,0xffffffc0
c0016e15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e19:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016e1f <x87EmulHandler(regs*, void*)>:
c0016e1f:	53                   	push   ebx
c0016e20:	83 ec 08             	sub    esp,0x8
c0016e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e28:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016e2c:	74 10                	je     c0016e3e <x87EmulHandler(regs*, void*)+0x1f>
c0016e2e:	83 ec 0c             	sub    esp,0xc
c0016e31:	68 5a 15 02 c0       	push   0xc002155a
c0016e36:	e8 12 9a ff ff       	call   c001084d <KePanic(char const*)>
c0016e3b:	83 c4 10             	add    esp,0x10
c0016e3e:	0f 20 c0             	mov    eax,cr0
c0016e41:	a8 08                	test   al,0x8
c0016e43:	74 59                	je     c0016e9e <x87EmulHandler(regs*, void*)+0x7f>
c0016e45:	0f 06                	clts   
c0016e47:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016e4c:	85 c0                	test   eax,eax
c0016e4e:	74 0e                	je     c0016e5e <x87EmulHandler(regs*, void*)+0x3f>
c0016e50:	83 ec 0c             	sub    esp,0xc
c0016e53:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e56:	e8 9c ff ff ff       	call   c0016df7 <i386SaveCoprocessor(void*)>
c0016e5b:	83 c4 10             	add    esp,0x10
c0016e5e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016e64:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016e68:	75 12                	jne    c0016e7c <x87EmulHandler(regs*, void*)+0x5d>
c0016e6a:	83 ec 0c             	sub    esp,0xc
c0016e6d:	68 40 02 00 00       	push   0x240
c0016e72:	e8 54 0c ff ff       	call   c0007acb <malloc>
c0016e77:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016e7a:	eb 10                	jmp    c0016e8c <x87EmulHandler(regs*, void*)+0x6d>
c0016e7c:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016e81:	83 ec 0c             	sub    esp,0xc
c0016e84:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e87:	e8 7f ff ff ff       	call   c0016e0b <i386LoadCoprocessor(void*)>
c0016e8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e91:	83 c4 10             	add    esp,0x10
c0016e94:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c0016e99:	83 c4 08             	add    esp,0x8
c0016e9c:	5b                   	pop    ebx
c0016e9d:	c3                   	ret    
c0016e9e:	83 ec 0c             	sub    esp,0xc
c0016ea1:	68 6e 15 02 c0       	push   0xc002156e
c0016ea6:	e8 d8 3a ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0016eab:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016eb3:	83 c4 18             	add    esp,0x18
c0016eb6:	5b                   	pop    ebx
c0016eb7:	e9 f8 eb ff ff       	jmp    c0015ab4 <Thr::terminateFromIRQ(int)>

c0016ebc <HalInitialiseCoprocessor()>:
c0016ebc:	83 ec 10             	sub    esp,0x10
c0016ebf:	6a 00                	push   0x0
c0016ec1:	68 1f 6e 01 c0       	push   0xc0016e1f
c0016ec6:	6a 07                	push   0x7
c0016ec8:	c7 05 08 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028208,0x0
c0016ed2:	e8 43 54 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ed7:	e8 34 70 00 00       	call   c001df10 <avxDetect>
c0016edc:	83 c4 10             	add    esp,0x10
c0016edf:	85 c0                	test   eax,eax
c0016ee1:	74 1c                	je     c0016eff <HalInitialiseCoprocessor()+0x43>
c0016ee3:	c7 05 10 82 02 c0 3a df 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001df3a
c0016eed:	c7 05 0c 82 02 c0 4b df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001df4b
c0016ef7:	83 c4 0c             	add    esp,0xc
c0016efa:	e9 5d 70 00 00       	jmp    c001df5c <avxInit>
c0016eff:	e8 9c 73 00 00       	call   c001e2a0 <absolutelyNoChanceInHell>
c0016f04:	85 c0                	test   eax,eax
c0016f06:	74 1c                	je     c0016f24 <HalInitialiseCoprocessor()+0x68>
c0016f08:	c7 05 10 82 02 c0 b8 e2 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e2b8
c0016f12:	c7 05 0c 82 02 c0 c0 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e2c0
c0016f1c:	83 c4 0c             	add    esp,0xc
c0016f1f:	e9 a4 73 00 00       	jmp    c001e2c8 <sseInit>
c0016f24:	e8 bd 73 00 00       	call   c001e2e6 <x87Detect>
c0016f29:	85 c0                	test   eax,eax
c0016f2b:	74 1c                	je     c0016f49 <HalInitialiseCoprocessor()+0x8d>
c0016f2d:	c7 05 10 82 02 c0 01 e3 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e301
c0016f37:	c7 05 0c 82 02 c0 08 e3 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e308
c0016f41:	83 c4 0c             	add    esp,0xc
c0016f44:	e9 c6 73 00 00       	jmp    c001e30f <x87Init>
c0016f49:	c7 05 10 82 02 c0 f9 67 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc00167f9
c0016f53:	c7 05 0c 82 02 c0 f9 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc00167f9
c0016f5d:	0f 20 c0             	mov    eax,cr0
c0016f60:	83 c8 04             	or     eax,0x4
c0016f63:	0f 22 c0             	mov    cr0,eax
c0016f66:	83 c4 0c             	add    esp,0xc
c0016f69:	c3                   	ret    

c0016f6a <HalPanic(char const*)>:
c0016f6a:	53                   	push   ebx
c0016f6b:	83 ec 10             	sub    esp,0x10
c0016f6e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016f72:	fa                   	cli    
c0016f73:	53                   	push   ebx
c0016f74:	68 84 15 02 c0       	push   0xc0021584
c0016f79:	e8 05 3a ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0016f7e:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016f83:	83 c4 10             	add    esp,0x10
c0016f86:	85 c0                	test   eax,eax
c0016f88:	74 09                	je     c0016f93 <HalPanic(char const*)+0x29>
c0016f8a:	83 ec 0c             	sub    esp,0xc
c0016f8d:	53                   	push   ebx
c0016f8e:	ff d0                	call   eax
c0016f90:	83 c4 10             	add    esp,0x10
c0016f93:	50                   	push   eax
c0016f94:	6a 01                	push   0x1
c0016f96:	6a 0f                	push   0xf
c0016f98:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f9e:	e8 11 16 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fa3:	5a                   	pop    edx
c0016fa4:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016faa:	e8 f5 17 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0016faf:	59                   	pop    ecx
c0016fb0:	58                   	pop    eax
c0016fb1:	68 64 fd 01 c0       	push   0xc001fd64
c0016fb6:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fbc:	e8 2b 16 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0016fc1:	83 c4 0c             	add    esp,0xc
c0016fc4:	6a 01                	push   0x1
c0016fc6:	6a 0f                	push   0xf
c0016fc8:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fce:	e8 e1 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fd3:	58                   	pop    eax
c0016fd4:	5a                   	pop    edx
c0016fd5:	68 9d 15 02 c0       	push   0xc002159d
c0016fda:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fe0:	e8 b1 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016fe5:	83 c4 0c             	add    esp,0xc
c0016fe8:	6a 0f                	push   0xf
c0016fea:	6a 01                	push   0x1
c0016fec:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ff2:	e8 bd 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016ff7:	59                   	pop    ecx
c0016ff8:	58                   	pop    eax
c0016ff9:	68 a6 15 02 c0       	push   0xc00215a6
c0016ffe:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017004:	e8 8d 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017009:	83 c4 0c             	add    esp,0xc
c001700c:	6a 01                	push   0x1
c001700e:	6a 0f                	push   0xf
c0017010:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017016:	e8 99 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001701b:	58                   	pop    eax
c001701c:	5a                   	pop    edx
c001701d:	68 ea 15 02 c0       	push   0xc00215ea
c0017022:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017028:	e8 69 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001702d:	59                   	pop    ecx
c001702e:	58                   	pop    eax
c001702f:	68 b3 15 02 c0       	push   0xc00215b3
c0017034:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001703a:	e8 57 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001703f:	58                   	pop    eax
c0017040:	5a                   	pop    edx
c0017041:	68 ed 15 02 c0       	push   0xc00215ed
c0017046:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001704c:	e8 45 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017051:	59                   	pop    ecx
c0017052:	58                   	pop    eax
c0017053:	53                   	push   ebx
c0017054:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001705a:	e8 37 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001705f:	58                   	pop    eax
c0017060:	5a                   	pop    edx
c0017061:	68 ea 15 02 c0       	push   0xc00215ea
c0017066:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001706c:	e8 25 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017071:	83 c4 10             	add    esp,0x10
c0017074:	eb fe                	jmp    c0017074 <HalPanic(char const*)+0x10a>

c0017076 <HalQueryPerformanceCounter()>:
c0017076:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001707b:	31 d2                	xor    edx,edx
c001707d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017083:	31 c0                	xor    eax,eax
c0017085:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001708c:	74 02                	je     c0017090 <HalQueryPerformanceCounter()+0x1a>
c001708e:	0f 31                	rdtsc  
c0017090:	c3                   	ret    

c0017091 <HalInitialise()>:
c0017091:	53                   	push   ebx
c0017092:	83 ec 08             	sub    esp,0x8
c0017095:	e8 b7 54 ff ff       	call   c000c551 <setupINTS()>
c001709a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001709f:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c00170a6:	75 0f                	jne    c00170b7 <HalInitialise()+0x26>
c00170a8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00170ae:	83 e2 fe             	and    edx,0xfffffffe
c00170b1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170b7:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c00170be:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00170c4:	83 e2 fe             	and    edx,0xfffffffe
c00170c7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170cd:	e8 9e 02 00 00       	call   c0017370 <picOpen()>
c00170d2:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00170d9:	74 0a                	je     c00170e5 <HalInitialise()+0x54>
c00170db:	e8 e0 01 00 00       	call   c00172c0 <picDisable()>
c00170e0:	e8 97 67 00 00       	call   c001d87c <apicOpen()>
c00170e5:	50                   	push   eax
c00170e6:	bb 0f 00 00 00       	mov    ebx,0xf
c00170eb:	6a 00                	push   0x0
c00170ed:	68 40 6d 01 c0       	push   0xc0016d40
c00170f2:	6a 00                	push   0x0
c00170f4:	e8 21 52 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170f9:	83 c4 0c             	add    esp,0xc
c00170fc:	6a 00                	push   0x0
c00170fe:	68 40 6d 01 c0       	push   0xc0016d40
c0017103:	6a 01                	push   0x1
c0017105:	e8 10 52 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001710a:	83 c4 0c             	add    esp,0xc
c001710d:	6a 00                	push   0x0
c001710f:	68 fa 67 01 c0       	push   0xc00167fa
c0017114:	6a 02                	push   0x2
c0017116:	e8 ff 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001711b:	83 c4 0c             	add    esp,0xc
c001711e:	6a 00                	push   0x0
c0017120:	68 40 6d 01 c0       	push   0xc0016d40
c0017125:	6a 03                	push   0x3
c0017127:	e8 ee 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001712c:	83 c4 0c             	add    esp,0xc
c001712f:	6a 00                	push   0x0
c0017131:	68 40 6d 01 c0       	push   0xc0016d40
c0017136:	6a 04                	push   0x4
c0017138:	e8 dd 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001713d:	83 c4 0c             	add    esp,0xc
c0017140:	6a 00                	push   0x0
c0017142:	68 40 6d 01 c0       	push   0xc0016d40
c0017147:	6a 05                	push   0x5
c0017149:	e8 cc 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001714e:	83 c4 0c             	add    esp,0xc
c0017151:	6a 00                	push   0x0
c0017153:	68 74 6d 01 c0       	push   0xc0016d74
c0017158:	6a 06                	push   0x6
c001715a:	e8 bb 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001715f:	83 c4 0c             	add    esp,0xc
c0017162:	6a 00                	push   0x0
c0017164:	68 13 68 01 c0       	push   0xc0016813
c0017169:	6a 08                	push   0x8
c001716b:	e8 aa 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017170:	83 c4 0c             	add    esp,0xc
c0017173:	6a 00                	push   0x0
c0017175:	68 40 6d 01 c0       	push   0xc0016d40
c001717a:	6a 09                	push   0x9
c001717c:	e8 99 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017181:	83 c4 0c             	add    esp,0xc
c0017184:	6a 00                	push   0x0
c0017186:	68 40 6d 01 c0       	push   0xc0016d40
c001718b:	6a 0a                	push   0xa
c001718d:	e8 88 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017192:	83 c4 0c             	add    esp,0xc
c0017195:	6a 00                	push   0x0
c0017197:	68 40 6d 01 c0       	push   0xc0016d40
c001719c:	6a 0b                	push   0xb
c001719e:	e8 77 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171a3:	83 c4 0c             	add    esp,0xc
c00171a6:	6a 00                	push   0x0
c00171a8:	68 50 6c 01 c0       	push   0xc0016c50
c00171ad:	6a 0d                	push   0xd
c00171af:	e8 66 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171b4:	83 c4 0c             	add    esp,0xc
c00171b7:	6a 00                	push   0x0
c00171b9:	68 b7 6c 01 c0       	push   0xc0016cb7
c00171be:	6a 0e                	push   0xe
c00171c0:	e8 55 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171c5:	83 c4 10             	add    esp,0x10
c00171c8:	50                   	push   eax
c00171c9:	6a 00                	push   0x0
c00171cb:	68 40 6d 01 c0       	push   0xc0016d40
c00171d0:	53                   	push   ebx
c00171d1:	43                   	inc    ebx
c00171d2:	e8 43 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171d7:	83 c4 10             	add    esp,0x10
c00171da:	83 fb 1e             	cmp    ebx,0x1e
c00171dd:	75 e9                	jne    c00171c8 <HalInitialise()+0x137>
c00171df:	50                   	push   eax
c00171e0:	6a 00                	push   0x0
c00171e2:	68 3b 1b 01 c0       	push   0xc0011b3b
c00171e7:	6a 60                	push   0x60
c00171e9:	e8 2c 51 ff ff       	call   c000c31a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171ee:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00171f3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00171fd:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017204:	e8 c2 08 ff ff       	call   c0007acb <malloc>
c0017209:	89 04 24             	mov    DWORD PTR [esp],eax
c001720c:	89 c3                	mov    ebx,eax
c001720e:	e8 35 09 00 00       	call   c0017b48 <RTC::RTC()>
c0017213:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001721d:	5a                   	pop    edx
c001721e:	59                   	pop    ecx
c001721f:	53                   	push   ebx
c0017220:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017226:	e8 b9 4b ff ff       	call   c000bde4 <Device::addChild(Device*)>
c001722b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001722d:	6a 00                	push   0x0
c001722f:	6a 00                	push   0x0
c0017231:	6a 00                	push   0x0
c0017233:	53                   	push   ebx
c0017234:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017237:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001723c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017242:	83 c4 28             	add    esp,0x28
c0017245:	5b                   	pop    ebx
c0017246:	c3                   	ret    

c0017247 <HalMakeBeep(int)>:
c0017247:	53                   	push   ebx
c0017248:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001724c:	85 db                	test   ebx,ebx
c001724e:	75 07                	jne    c0017257 <HalMakeBeep(int)+0x10>
c0017250:	e4 61                	in     al,0x61
c0017252:	83 e0 fc             	and    eax,0xfffffffc
c0017255:	eb 26                	jmp    c001727d <HalMakeBeep(int)+0x36>
c0017257:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001725c:	99                   	cdq    
c001725d:	f7 fb                	idiv   ebx
c001725f:	89 c1                	mov    ecx,eax
c0017261:	b0 b6                	mov    al,0xb6
c0017263:	e6 43                	out    0x43,al
c0017265:	88 c8                	mov    al,cl
c0017267:	e6 42                	out    0x42,al
c0017269:	89 c8                	mov    eax,ecx
c001726b:	c1 e8 08             	shr    eax,0x8
c001726e:	e6 42                	out    0x42,al
c0017270:	e4 61                	in     al,0x61
c0017272:	89 c2                	mov    edx,eax
c0017274:	83 ca 03             	or     edx,0x3
c0017277:	38 d0                	cmp    al,dl
c0017279:	74 04                	je     c001727f <HalMakeBeep(int)+0x38>
c001727b:	88 d0                	mov    al,dl
c001727d:	e6 61                	out    0x61,al
c001727f:	5b                   	pop    ebx
c0017280:	c3                   	ret    

c0017281 <HalGetRand()>:
c0017281:	31 c0                	xor    eax,eax
c0017283:	c3                   	ret    

c0017284 <HalEndOfInterrupt(int)>:
c0017284:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c001728b:	74 23                	je     c00172b0 <HalEndOfInterrupt(int)+0x2c>
c001728d:	83 ec 14             	sub    esp,0x14
c0017290:	6a 1b                	push   0x1b
c0017292:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017298:	e8 3d fe fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001729d:	25 00 f0 ff ff       	and    eax,0xfffff000
c00172a2:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00172ac:	83 c4 1c             	add    esp,0x1c
c00172af:	c3                   	ret    
c00172b0:	e9 3f 02 00 00       	jmp    c00174f4 <picEOI(int)>

c00172b5 <HalRestart()>:
c00172b5:	c3                   	ret    

c00172b6 <HalShutdown()>:
c00172b6:	c3                   	ret    

c00172b7 <HalSleep()>:
c00172b7:	c3                   	ret    

c00172b8 <picIoWait()>:
c00172b8:	eb 00                	jmp    c00172ba <picIoWait()+0x2>
c00172ba:	eb 00                	jmp    c00172bc <picIoWait()+0x4>
c00172bc:	90                   	nop
c00172bd:	c3                   	ret    
c00172be:	66 90                	xchg   ax,ax

c00172c0 <picDisable()>:
c00172c0:	83 ec 10             	sub    esp,0x10
c00172c3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00172ca:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00172cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00172d3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00172d8:	ee                   	out    dx,al
c00172d9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00172e0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00172e5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00172e9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00172ee:	ee                   	out    dx,al
c00172ef:	90                   	nop
c00172f0:	83 c4 10             	add    esp,0x10
c00172f3:	c3                   	ret    

c00172f4 <picGetIRQReg(int)>:
c00172f4:	83 ec 10             	sub    esp,0x10
c00172f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172fb:	0f b6 c0             	movzx  eax,al
c00172fe:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017305:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017309:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001730d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017312:	ee                   	out    dx,al
c0017313:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017317:	0f b6 c0             	movzx  eax,al
c001731a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017321:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017325:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017329:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001732e:	ee                   	out    dx,al
c001732f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017336:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001733b:	89 c2                	mov    edx,eax
c001733d:	ec                   	in     al,dx
c001733e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017342:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017346:	0f b6 c0             	movzx  eax,al
c0017349:	c1 e0 08             	shl    eax,0x8
c001734c:	89 c1                	mov    ecx,eax
c001734e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017355:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001735a:	89 c2                	mov    edx,eax
c001735c:	ec                   	in     al,dx
c001735d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017361:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017365:	0f b6 c0             	movzx  eax,al
c0017368:	09 c8                	or     eax,ecx
c001736a:	83 c4 10             	add    esp,0x10
c001736d:	c3                   	ret    
c001736e:	66 90                	xchg   ax,ax

c0017370 <picOpen()>:
c0017370:	83 ec 50             	sub    esp,0x50
c0017373:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001737a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001737f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017383:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017387:	ee                   	out    dx,al
c0017388:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001738f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017394:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001739c:	ee                   	out    dx,al
c001739d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00173a5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00173ad:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00173b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173b8:	89 c2                	mov    edx,eax
c00173ba:	ec                   	in     al,dx
c00173bb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00173bf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00173c3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00173c7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00173ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173d2:	89 c2                	mov    edx,eax
c00173d4:	ec                   	in     al,dx
c00173d5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00173d9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00173dd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00173e1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00173e8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00173ed:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00173f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00173f5:	ee                   	out    dx,al
c00173f6:	e8 bd fe ff ff       	call   c00172b8 <picIoWait()>
c00173fb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017402:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017407:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001740b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001740f:	ee                   	out    dx,al
c0017410:	e8 a3 fe ff ff       	call   c00172b8 <picIoWait()>
c0017415:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017419:	0f b6 c0             	movzx  eax,al
c001741c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017423:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017427:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001742b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001742f:	ee                   	out    dx,al
c0017430:	e8 83 fe ff ff       	call   c00172b8 <picIoWait()>
c0017435:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017439:	0f b6 c0             	movzx  eax,al
c001743c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017443:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017447:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001744b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001744f:	ee                   	out    dx,al
c0017450:	e8 63 fe ff ff       	call   c00172b8 <picIoWait()>
c0017455:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001745c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017461:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017465:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017469:	ee                   	out    dx,al
c001746a:	e8 49 fe ff ff       	call   c00172b8 <picIoWait()>
c001746f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017476:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001747b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001747f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017483:	ee                   	out    dx,al
c0017484:	e8 2f fe ff ff       	call   c00172b8 <picIoWait()>
c0017489:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017490:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017495:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017499:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001749d:	ee                   	out    dx,al
c001749e:	e8 15 fe ff ff       	call   c00172b8 <picIoWait()>
c00174a3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00174aa:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00174af:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00174b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174b7:	ee                   	out    dx,al
c00174b8:	e8 fb fd ff ff       	call   c00172b8 <picIoWait()>
c00174bd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00174c2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00174c9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00174cd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00174d1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00174d5:	ee                   	out    dx,al
c00174d6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00174db:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00174e2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00174e6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00174ea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00174ee:	ee                   	out    dx,al
c00174ef:	90                   	nop
c00174f0:	83 c4 50             	add    esp,0x50
c00174f3:	c3                   	ret    

c00174f4 <picEOI(int)>:
c00174f4:	83 ec 10             	sub    esp,0x10
c00174f7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00174fc:	75 1e                	jne    c001751c <picEOI(int)+0x28>
c00174fe:	6a 0b                	push   0xb
c0017500:	e8 ef fd ff ff       	call   c00172f4 <picGetIRQReg(int)>
c0017505:	83 c4 04             	add    esp,0x4
c0017508:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001750d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017512:	25 80 00 00 00       	and    eax,0x80
c0017517:	74 73                	je     c001758c <picEOI(int)+0x98>
c0017519:	8d 76 00             	lea    esi,[esi+0x0]
c001751c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017521:	75 31                	jne    c0017554 <picEOI(int)+0x60>
c0017523:	6a 0b                	push   0xb
c0017525:	e8 ca fd ff ff       	call   c00172f4 <picGetIRQReg(int)>
c001752a:	83 c4 04             	add    esp,0x4
c001752d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017532:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017536:	98                   	cwde   
c0017537:	85 c0                	test   eax,eax
c0017539:	78 19                	js     c0017554 <picEOI(int)+0x60>
c001753b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017542:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017547:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001754b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017550:	ee                   	out    dx,al
c0017551:	eb 3d                	jmp    c0017590 <picEOI(int)+0x9c>
c0017553:	90                   	nop
c0017554:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017559:	7e 19                	jle    c0017574 <picEOI(int)+0x80>
c001755b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017562:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017567:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001756b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017570:	ee                   	out    dx,al
c0017571:	8d 76 00             	lea    esi,[esi+0x0]
c0017574:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001757b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0017580:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017584:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017589:	ee                   	out    dx,al
c001758a:	eb 04                	jmp    c0017590 <picEOI(int)+0x9c>
c001758c:	90                   	nop
c001758d:	8d 76 00             	lea    esi,[esi+0x0]
c0017590:	83 c4 10             	add    esp,0x10
c0017593:	c3                   	ret    

c0017594 <RTC::open(int, int, void*)>:
c0017594:	31 c0                	xor    eax,eax
c0017596:	c3                   	ret    
c0017597:	90                   	nop

c0017598 <RTC::close(int, int, void*)>:
c0017598:	31 c0                	xor    eax,eax
c001759a:	c3                   	ret    
c001759b:	90                   	nop

c001759c <RTC::timeInSecondsUTC()>:
c001759c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175a0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00175a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175ac:	c3                   	ret    
c00175ad:	90                   	nop

c00175ae <RTC::timeInDatetimeUTC()>:
c00175ae:	53                   	push   ebx
c00175af:	83 ec 14             	sub    esp,0x14
c00175b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00175ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00175bc:	50                   	push   eax
c00175bd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00175c0:	83 c4 0c             	add    esp,0xc
c00175c3:	52                   	push   edx
c00175c4:	50                   	push   eax
c00175c5:	53                   	push   ebx
c00175c6:	e8 8d 45 ff ff       	call   c000bb58 <secondsToDatetime(unsigned long long)>
c00175cb:	89 d8                	mov    eax,ebx
c00175cd:	83 c4 14             	add    esp,0x14
c00175d0:	5b                   	pop    ebx
c00175d1:	c2 04 00             	ret    0x4

c00175d4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00175d4:	56                   	push   esi
c00175d5:	53                   	push   ebx
c00175d6:	83 ec 14             	sub    esp,0x14
c00175d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175df:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00175e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00175e6:	52                   	push   edx
c00175e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175ef:	50                   	push   eax
c00175f0:	e8 63 45 ff ff       	call   c000bb58 <secondsToDatetime(unsigned long long)>
c00175f5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00175f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017601:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017605:	89 f0                	mov    eax,esi
c0017607:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001760b:	83 c4 20             	add    esp,0x20
c001760e:	5b                   	pop    ebx
c001760f:	5e                   	pop    esi
c0017610:	ff e0                	jmp    eax

c0017612 <RTC::~RTC()>:
c0017612:	83 ec 0c             	sub    esp,0xc
c0017615:	ba 88 16 02 c0       	mov    edx,0xc0021688
c001761a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001761e:	89 10                	mov    DWORD PTR [eax],edx
c0017620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017624:	83 ec 0c             	sub    esp,0xc
c0017627:	50                   	push   eax
c0017628:	e8 b7 42 ff ff       	call   c000b8e4 <Clock::~Clock()>
c001762d:	83 c4 10             	add    esp,0x10
c0017630:	90                   	nop
c0017631:	83 c4 0c             	add    esp,0xc
c0017634:	c3                   	ret    
c0017635:	90                   	nop

c0017636 <RTC::~RTC()>:
c0017636:	83 ec 0c             	sub    esp,0xc
c0017639:	83 ec 0c             	sub    esp,0xc
c001763c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017640:	e8 cd ff ff ff       	call   c0017612 <RTC::~RTC()>
c0017645:	83 c4 10             	add    esp,0x10
c0017648:	83 ec 08             	sub    esp,0x8
c001764b:	68 60 01 00 00       	push   0x160
c0017650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017654:	e8 2c 32 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c0017659:	83 c4 10             	add    esp,0x10
c001765c:	83 c4 0c             	add    esp,0xc
c001765f:	c3                   	ret    

c0017660 <RTC::get_update_in_progress_flag()>:
c0017660:	83 ec 14             	sub    esp,0x14
c0017663:	6a 0a                	push   0xa
c0017665:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001766b:	e8 22 fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017670:	83 c4 1c             	add    esp,0x1c
c0017673:	0f b6 c0             	movzx  eax,al
c0017676:	c1 e8 07             	shr    eax,0x7
c0017679:	c3                   	ret    

c001767a <RTC::completeRTCRefresh()>:
c001767a:	55                   	push   ebp
c001767b:	57                   	push   edi
c001767c:	56                   	push   esi
c001767d:	53                   	push   ebx
c001767e:	83 ec 3c             	sub    esp,0x3c
c0017681:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017687:	83 ec 0c             	sub    esp,0xc
c001768a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001768e:	e8 cd ff ff ff       	call   c0017660 <RTC::get_update_in_progress_flag()>
c0017693:	83 c4 10             	add    esp,0x10
c0017696:	84 c0                	test   al,al
c0017698:	74 0e                	je     c00176a8 <RTC::completeRTCRefresh()+0x2e>
c001769a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00176a0:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00176a6:	73 df                	jae    c0017687 <RTC::completeRTCRefresh()+0xd>
c00176a8:	50                   	push   eax
c00176a9:	50                   	push   eax
c00176aa:	6a 00                	push   0x0
c00176ac:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176b2:	e8 db fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176b7:	89 c7                	mov    edi,eax
c00176b9:	58                   	pop    eax
c00176ba:	5a                   	pop    edx
c00176bb:	6a 02                	push   0x2
c00176bd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176c3:	e8 ca fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176c8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00176cc:	59                   	pop    ecx
c00176cd:	5b                   	pop    ebx
c00176ce:	6a 04                	push   0x4
c00176d0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176d6:	e8 b7 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176db:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00176df:	5e                   	pop    esi
c00176e0:	5d                   	pop    ebp
c00176e1:	6a 07                	push   0x7
c00176e3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176e9:	e8 a4 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176ee:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00176f2:	58                   	pop    eax
c00176f3:	5a                   	pop    edx
c00176f4:	6a 08                	push   0x8
c00176f6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176fc:	e8 91 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017701:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017705:	59                   	pop    ecx
c0017706:	5b                   	pop    ebx
c0017707:	6a 09                	push   0x9
c0017709:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001770f:	e8 7e fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017714:	0f b6 c0             	movzx  eax,al
c0017717:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001771b:	83 c4 10             	add    esp,0x10
c001771e:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017724:	83 ec 0c             	sub    esp,0xc
c0017727:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001772b:	e8 30 ff ff ff       	call   c0017660 <RTC::get_update_in_progress_flag()>
c0017730:	83 c4 10             	add    esp,0x10
c0017733:	84 c0                	test   al,al
c0017735:	74 0e                	je     c0017745 <RTC::completeRTCRefresh()+0xcb>
c0017737:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001773d:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017743:	73 df                	jae    c0017724 <RTC::completeRTCRefresh()+0xaa>
c0017745:	51                   	push   ecx
c0017746:	51                   	push   ecx
c0017747:	6a 00                	push   0x0
c0017749:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001774f:	e8 3e fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017754:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017758:	5b                   	pop    ebx
c0017759:	5e                   	pop    esi
c001775a:	6a 02                	push   0x2
c001775c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017762:	e8 2b fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017767:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001776b:	5d                   	pop    ebp
c001776c:	58                   	pop    eax
c001776d:	6a 04                	push   0x4
c001776f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017775:	e8 18 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001777a:	88 c3                	mov    bl,al
c001777c:	58                   	pop    eax
c001777d:	5a                   	pop    edx
c001777e:	6a 07                	push   0x7
c0017780:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017786:	e8 07 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001778b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001778f:	59                   	pop    ecx
c0017790:	5e                   	pop    esi
c0017791:	6a 08                	push   0x8
c0017793:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017799:	e8 f4 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001779e:	5d                   	pop    ebp
c001779f:	89 c6                	mov    esi,eax
c00177a1:	58                   	pop    eax
c00177a2:	6a 09                	push   0x9
c00177a4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177aa:	e8 e3 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00177af:	89 f9                	mov    ecx,edi
c00177b1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00177b5:	83 c4 10             	add    esp,0x10
c00177b8:	0f b6 e8             	movzx  ebp,al
c00177bb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00177c0:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00177c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177c8:	74 27                	je     c00177f1 <RTC::completeRTCRefresh()+0x177>
c00177ca:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00177ce:	89 f0                	mov    eax,esi
c00177d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00177d4:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00177d8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00177dc:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00177e0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00177e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00177e8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00177ec:	e9 2d ff ff ff       	jmp    c001771e <RTC::completeRTCRefresh()+0xa4>
c00177f1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00177f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00177fa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00177fe:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0017802:	75 c6                	jne    c00177ca <RTC::completeRTCRefresh()+0x150>
c0017804:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017809:	89 f1                	mov    ecx,esi
c001780b:	0f b6 fb             	movzx  edi,bl
c001780e:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0017812:	0f b6 c9             	movzx  ecx,cl
c0017815:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017819:	89 f1                	mov    ecx,esi
c001781b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001781f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017823:	0f 94 c2             	sete   dl
c0017826:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001782a:	0f 94 c0             	sete   al
c001782d:	21 d0                	and    eax,edx
c001782f:	31 d2                	xor    edx,edx
c0017831:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017835:	0f 94 c2             	sete   dl
c0017838:	85 c2                	test   edx,eax
c001783a:	74 8e                	je     c00177ca <RTC::completeRTCRefresh()+0x150>
c001783c:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0017840:	75 88                	jne    c00177ca <RTC::completeRTCRefresh()+0x150>
c0017842:	52                   	push   edx
c0017843:	52                   	push   edx
c0017844:	6a 0b                	push   0xb
c0017846:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001784c:	e8 41 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017851:	83 c4 10             	add    esp,0x10
c0017854:	a8 04                	test   al,0x4
c0017856:	75 7a                	jne    c00178d2 <RTC::completeRTCRefresh()+0x258>
c0017858:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001785c:	c1 ef 04             	shr    edi,0x4
c001785f:	83 e6 0f             	and    esi,0xf
c0017862:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017866:	c1 ed 04             	shr    ebp,0x4
c0017869:	6b ed 0a             	imul   ebp,ebp,0xa
c001786c:	c1 ea 04             	shr    edx,0x4
c001786f:	6b d2 0a             	imul   edx,edx,0xa
c0017872:	83 e1 0f             	and    ecx,0xf
c0017875:	01 d1                	add    ecx,edx
c0017877:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001787b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001787f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017883:	c1 ea 04             	shr    edx,0x4
c0017886:	6b d2 0a             	imul   edx,edx,0xa
c0017889:	83 e1 0f             	and    ecx,0xf
c001788c:	01 d1                	add    ecx,edx
c001788e:	89 fa                	mov    edx,edi
c0017890:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017894:	83 e2 07             	and    edx,0x7
c0017897:	89 d9                	mov    ecx,ebx
c0017899:	6b d2 0a             	imul   edx,edx,0xa
c001789c:	83 e1 0f             	and    ecx,0xf
c001789f:	83 e3 80             	and    ebx,0xffffff80
c00178a2:	01 d1                	add    ecx,edx
c00178a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00178a8:	09 cb                	or     ebx,ecx
c00178aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00178ae:	c1 ea 04             	shr    edx,0x4
c00178b1:	6b d2 0a             	imul   edx,edx,0xa
c00178b4:	83 e1 0f             	and    ecx,0xf
c00178b7:	01 d1                	add    ecx,edx
c00178b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178bd:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00178c1:	c1 ea 04             	shr    edx,0x4
c00178c4:	6b d2 0a             	imul   edx,edx,0xa
c00178c7:	01 d6                	add    esi,edx
c00178c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00178cd:	83 e2 0f             	and    edx,0xf
c00178d0:	01 d5                	add    ebp,edx
c00178d2:	a8 02                	test   al,0x2
c00178d4:	75 15                	jne    c00178eb <RTC::completeRTCRefresh()+0x271>
c00178d6:	f6 c3 80             	test   bl,0x80
c00178d9:	74 10                	je     c00178eb <RTC::completeRTCRefresh()+0x271>
c00178db:	83 e3 7f             	and    ebx,0x7f
c00178de:	b9 18 00 00 00       	mov    ecx,0x18
c00178e3:	8d 43 0c             	lea    eax,[ebx+0xc]
c00178e6:	99                   	cdq    
c00178e7:	f7 f9                	idiv   ecx
c00178e9:	88 d3                	mov    bl,dl
c00178eb:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00178f1:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00178f7:	77 06                	ja     c00178ff <RTC::completeRTCRefresh()+0x285>
c00178f9:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00178ff:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017904:	31 c9                	xor    ecx,ecx
c0017906:	31 d2                	xor    edx,edx
c0017908:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001790c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017910:	89 cd                	mov    ebp,ecx
c0017912:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0017916:	c1 e7 10             	shl    edi,0x10
c0017919:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001791f:	c1 e0 10             	shl    eax,0x10
c0017922:	09 c5                	or     ebp,eax
c0017924:	89 e9                	mov    ecx,ebp
c0017926:	0f b7 c2             	movzx  eax,dx
c0017929:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001792d:	09 f8                	or     eax,edi
c001792f:	89 c2                	mov    edx,eax
c0017931:	50                   	push   eax
c0017932:	50                   	push   eax
c0017933:	88 d9                	mov    cl,bl
c0017935:	51                   	push   ecx
c0017936:	52                   	push   edx
c0017937:	e8 97 40 ff ff       	call   c000b9d3 <datetimeToSeconds(datetime_t)>
c001793c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0017940:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017946:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001794c:	83 c4 4c             	add    esp,0x4c
c001794f:	5b                   	pop    ebx
c0017950:	5e                   	pop    esi
c0017951:	5f                   	pop    edi
c0017952:	5d                   	pop    ebp
c0017953:	c3                   	ret    

c0017954 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017954:	55                   	push   ebp
c0017955:	57                   	push   edi
c0017956:	56                   	push   esi
c0017957:	53                   	push   ebx
c0017958:	83 ec 30             	sub    esp,0x30
c001795b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001795f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017963:	6a 00                	push   0x0
c0017965:	6a 00                	push   0x0
c0017967:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001796d:	e8 38 f9 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017972:	83 c4 0c             	add    esp,0xc
c0017975:	6a 00                	push   0x0
c0017977:	6a 02                	push   0x2
c0017979:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001797f:	e8 26 f9 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017984:	89 f8                	mov    eax,edi
c0017986:	89 f9                	mov    ecx,edi
c0017988:	0f b6 c4             	movzx  eax,ah
c001798b:	31 d2                	xor    edx,edx
c001798d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017991:	c1 e9 10             	shr    ecx,0x10
c0017994:	89 f0                	mov    eax,esi
c0017996:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001799a:	89 f0                	mov    eax,esi
c001799c:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00179a0:	0f b6 c4             	movzx  eax,ah
c00179a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179a7:	89 f0                	mov    eax,esi
c00179a9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00179ad:	c1 e8 10             	shr    eax,0x10
c00179b0:	b9 64 00 00 00       	mov    ecx,0x64
c00179b5:	f7 f1                	div    ecx
c00179b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00179bb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00179bf:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00179c3:	59                   	pop    ecx
c00179c4:	5b                   	pop    ebx
c00179c5:	89 fb                	mov    ebx,edi
c00179c7:	6a 0b                	push   0xb
c00179c9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179cf:	e8 be f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00179d4:	83 c4 10             	add    esp,0x10
c00179d7:	a8 04                	test   al,0x4
c00179d9:	89 c5                	mov    ebp,eax
c00179db:	75 6e                	jne    c0017a4b <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00179dd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00179e1:	31 d2                	xor    edx,edx
c00179e3:	0f b6 c1             	movzx  eax,cl
c00179e6:	b9 0a 00 00 00       	mov    ecx,0xa
c00179eb:	f7 f1                	div    ecx
c00179ed:	c1 e0 04             	shl    eax,0x4
c00179f0:	09 d0                	or     eax,edx
c00179f2:	31 d2                	xor    edx,edx
c00179f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179f8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00179fd:	f7 f1                	div    ecx
c00179ff:	c1 e0 04             	shl    eax,0x4
c0017a02:	09 d0                	or     eax,edx
c0017a04:	31 d2                	xor    edx,edx
c0017a06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a0a:	0f b6 c3             	movzx  eax,bl
c0017a0d:	f7 f1                	div    ecx
c0017a0f:	c1 e0 04             	shl    eax,0x4
c0017a12:	09 d0                	or     eax,edx
c0017a14:	31 d2                	xor    edx,edx
c0017a16:	89 c3                	mov    ebx,eax
c0017a18:	89 f0                	mov    eax,esi
c0017a1a:	0f b6 c0             	movzx  eax,al
c0017a1d:	f7 f1                	div    ecx
c0017a1f:	c1 e0 04             	shl    eax,0x4
c0017a22:	09 d0                	or     eax,edx
c0017a24:	31 d2                	xor    edx,edx
c0017a26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a2a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a2f:	f7 f1                	div    ecx
c0017a31:	c1 e0 04             	shl    eax,0x4
c0017a34:	09 d0                	or     eax,edx
c0017a36:	31 d2                	xor    edx,edx
c0017a38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a40:	f7 f1                	div    ecx
c0017a42:	c1 e0 04             	shl    eax,0x4
c0017a45:	09 d0                	or     eax,edx
c0017a47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a4b:	83 e5 02             	and    ebp,0x2
c0017a4e:	75 1e                	jne    c0017a6e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a50:	0f b6 c3             	movzx  eax,bl
c0017a53:	83 f8 0b             	cmp    eax,0xb
c0017a56:	76 10                	jbe    c0017a68 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017a58:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017a5b:	84 d2                	test   dl,dl
c0017a5d:	88 d3                	mov    bl,dl
c0017a5f:	75 02                	jne    c0017a63 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017a61:	b3 0c                	mov    bl,0xc
c0017a63:	83 cb 80             	or     ebx,0xffffff80
c0017a66:	eb 06                	jmp    c0017a6e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a68:	85 c0                	test   eax,eax
c0017a6a:	75 02                	jne    c0017a6e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a6c:	b3 0c                	mov    bl,0xc
c0017a6e:	50                   	push   eax
c0017a6f:	0f b6 db             	movzx  ebx,bl
c0017a72:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017a77:	52                   	push   edx
c0017a78:	6a 00                	push   0x0
c0017a7a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a80:	e8 25 f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a85:	83 c4 0c             	add    esp,0xc
c0017a88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a8d:	50                   	push   eax
c0017a8e:	6a 02                	push   0x2
c0017a90:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a96:	e8 0f f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a9b:	83 c4 0c             	add    esp,0xc
c0017a9e:	53                   	push   ebx
c0017a9f:	6a 04                	push   0x4
c0017aa1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aa7:	e8 fe f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017aac:	83 c4 0c             	add    esp,0xc
c0017aaf:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017ab4:	52                   	push   edx
c0017ab5:	6a 07                	push   0x7
c0017ab7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017abd:	e8 e8 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ac2:	83 c4 0c             	add    esp,0xc
c0017ac5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017aca:	50                   	push   eax
c0017acb:	6a 08                	push   0x8
c0017acd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ad3:	e8 d2 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ad8:	83 c4 0c             	add    esp,0xc
c0017adb:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017ae0:	55                   	push   ebp
c0017ae1:	6a 09                	push   0x9
c0017ae3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ae9:	e8 bc f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017aee:	5a                   	pop    edx
c0017aef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017af3:	e8 82 fb ff ff       	call   c001767a <RTC::completeRTCRefresh()>
c0017af8:	83 c4 3c             	add    esp,0x3c
c0017afb:	b0 01                	mov    al,0x1
c0017afd:	5b                   	pop    ebx
c0017afe:	5e                   	pop    esi
c0017aff:	5f                   	pop    edi
c0017b00:	5d                   	pop    ebp
c0017b01:	c3                   	ret    

c0017b02 <rtcIRQHandler(regs*, void*)>:
c0017b02:	53                   	push   ebx
c0017b03:	83 ec 10             	sub    esp,0x10
c0017b06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017b0a:	6a 0c                	push   0xc
c0017b0c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b12:	e8 7b f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b17:	83 c4 10             	add    esp,0x10
c0017b1a:	a8 80                	test   al,0x80
c0017b1c:	74 24                	je     c0017b42 <rtcIRQHandler(regs*, void*)+0x40>
c0017b1e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017b25:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017b2c:	66 ff 05 18 82 02 c0 	inc    WORD PTR ds:0xc0028218
c0017b33:	75 0d                	jne    c0017b42 <rtcIRQHandler(regs*, void*)+0x40>
c0017b35:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017b39:	83 c4 08             	add    esp,0x8
c0017b3c:	5b                   	pop    ebx
c0017b3d:	e9 38 fb ff ff       	jmp    c001767a <RTC::completeRTCRefresh()>
c0017b42:	83 c4 08             	add    esp,0x8
c0017b45:	5b                   	pop    ebx
c0017b46:	c3                   	ret    
c0017b47:	90                   	nop

c0017b48 <RTC::RTC()>:
c0017b48:	83 ec 1c             	sub    esp,0x1c
c0017b4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b4f:	83 ec 08             	sub    esp,0x8
c0017b52:	68 6b 16 02 c0       	push   0xc002166b
c0017b57:	50                   	push   eax
c0017b58:	e8 51 3d ff ff       	call   c000b8ae <Clock::Clock(char const*)>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	ba 88 16 02 c0       	mov    edx,0xc0021688
c0017b65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b69:	89 10                	mov    DWORD PTR [eax],edx
c0017b6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b6f:	83 ec 0c             	sub    esp,0xc
c0017b72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b76:	6a 01                	push   0x1
c0017b78:	68 02 7b 01 c0       	push   0xc0017b02
c0017b7d:	6a 08                	push   0x8
c0017b7f:	50                   	push   eax
c0017b80:	e8 0b 42 ff ff       	call   c000bd90 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017b85:	83 c4 20             	add    esp,0x20
c0017b88:	89 c2                	mov    edx,eax
c0017b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b8e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017b94:	fa                   	cli    
c0017b95:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b9a:	83 c0 01             	add    eax,0x1
c0017b9d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017ba2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017ba7:	83 ec 08             	sub    esp,0x8
c0017baa:	6a 0b                	push   0xb
c0017bac:	50                   	push   eax
c0017bad:	e8 e0 f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017bb2:	83 c4 10             	add    esp,0x10
c0017bb5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017bb9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017bbe:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017bc2:	83 ca 10             	or     edx,0x10
c0017bc5:	0f b6 d2             	movzx  edx,dl
c0017bc8:	83 ec 04             	sub    esp,0x4
c0017bcb:	52                   	push   edx
c0017bcc:	6a 0b                	push   0xb
c0017bce:	50                   	push   eax
c0017bcf:	e8 d6 f6 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017bd4:	83 c4 10             	add    esp,0x10
c0017bd7:	83 ec 0c             	sub    esp,0xc
c0017bda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bde:	e8 97 fa ff ff       	call   c001767a <RTC::completeRTCRefresh()>
c0017be3:	83 c4 10             	add    esp,0x10
c0017be6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017beb:	83 e8 01             	sub    eax,0x1
c0017bee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017bf3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bf8:	85 c0                	test   eax,eax
c0017bfa:	75 01                	jne    c0017bfd <RTC::RTC()+0xb5>
c0017bfc:	fb                   	sti    
c0017bfd:	90                   	nop
c0017bfe:	83 c4 1c             	add    esp,0x1c
c0017c01:	c3                   	ret    
c0017c02:	66 90                	xchg   ax,ax

c0017c04 <HalConsoleScroll(int, int)>:
c0017c04:	83 ec 10             	sub    esp,0x10
c0017c07:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017c0f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017c17:	90                   	nop
c0017c18:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c1d:	0f 8f e1 00 00 00    	jg     c0017d04 <HalConsoleScroll(int, int)+0x100>
c0017c23:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017c2b:	90                   	nop
c0017c2c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017c34:	0f 8f be 00 00 00    	jg     c0017cf8 <HalConsoleScroll(int, int)+0xf4>
c0017c3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c3e:	89 d0                	mov    eax,edx
c0017c40:	c1 e0 02             	shl    eax,0x2
c0017c43:	01 d0                	add    eax,edx
c0017c45:	c1 e0 05             	shl    eax,0x5
c0017c48:	89 c2                	mov    edx,eax
c0017c4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c4e:	01 d0                	add    eax,edx
c0017c50:	89 c2                	mov    edx,eax
c0017c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c56:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017c59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c5d:	89 d0                	mov    eax,edx
c0017c5f:	c1 e0 02             	shl    eax,0x2
c0017c62:	01 d0                	add    eax,edx
c0017c64:	c1 e0 05             	shl    eax,0x5
c0017c67:	89 c2                	mov    edx,eax
c0017c69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c6d:	01 d0                	add    eax,edx
c0017c6f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017c75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c79:	01 d0                	add    eax,edx
c0017c7b:	8a 11                	mov    dl,BYTE PTR [ecx]
c0017c7d:	88 10                	mov    BYTE PTR [eax],dl
c0017c7f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c84:	75 66                	jne    c0017cec <HalConsoleScroll(int, int)+0xe8>
c0017c86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c8a:	83 e0 01             	and    eax,0x1
c0017c8d:	74 39                	je     c0017cc8 <HalConsoleScroll(int, int)+0xc4>
c0017c8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c93:	83 e0 0f             	and    eax,0xf
c0017c96:	88 c2                	mov    dl,al
c0017c98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c9c:	c1 e0 04             	shl    eax,0x4
c0017c9f:	09 d0                	or     eax,edx
c0017ca1:	88 c1                	mov    cl,al
c0017ca3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ca7:	89 d0                	mov    eax,edx
c0017ca9:	c1 e0 02             	shl    eax,0x2
c0017cac:	01 d0                	add    eax,edx
c0017cae:	c1 e0 05             	shl    eax,0x5
c0017cb1:	89 c2                	mov    edx,eax
c0017cb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cb7:	01 d0                	add    eax,edx
c0017cb9:	89 c2                	mov    edx,eax
c0017cbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cbf:	01 d0                	add    eax,edx
c0017cc1:	88 ca                	mov    dl,cl
c0017cc3:	88 10                	mov    BYTE PTR [eax],dl
c0017cc5:	eb 25                	jmp    c0017cec <HalConsoleScroll(int, int)+0xe8>
c0017cc7:	90                   	nop
c0017cc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ccc:	89 d0                	mov    eax,edx
c0017cce:	c1 e0 02             	shl    eax,0x2
c0017cd1:	01 d0                	add    eax,edx
c0017cd3:	c1 e0 05             	shl    eax,0x5
c0017cd6:	89 c2                	mov    edx,eax
c0017cd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cdc:	01 d0                	add    eax,edx
c0017cde:	89 c2                	mov    edx,eax
c0017ce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ce4:	01 d0                	add    eax,edx
c0017ce6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0017cec:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017cf1:	e9 36 ff ff ff       	jmp    c0017c2c <HalConsoleScroll(int, int)+0x28>
c0017cf6:	66 90                	xchg   ax,ax
c0017cf8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017cfd:	e9 16 ff ff ff       	jmp    c0017c18 <HalConsoleScroll(int, int)+0x14>
c0017d02:	66 90                	xchg   ax,ax
c0017d04:	90                   	nop
c0017d05:	83 c4 10             	add    esp,0x10
c0017d08:	c3                   	ret    
c0017d09:	8d 76 00             	lea    esi,[esi+0x0]

c0017d0c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017d0c:	83 ec 14             	sub    esp,0x14
c0017d0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d13:	88 04 24             	mov    BYTE PTR [esp],al
c0017d16:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017d19:	0f b6 c0             	movzx  eax,al
c0017d1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d20:	89 d1                	mov    ecx,edx
c0017d22:	83 e1 0f             	and    ecx,0xf
c0017d25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d29:	c1 e2 04             	shl    edx,0x4
c0017d2c:	0f b6 d2             	movzx  edx,dl
c0017d2f:	09 ca                	or     edx,ecx
c0017d31:	c1 e2 08             	shl    edx,0x8
c0017d34:	09 d0                	or     eax,edx
c0017d36:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017d3b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017d43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d47:	89 d0                	mov    eax,edx
c0017d49:	c1 e0 02             	shl    eax,0x2
c0017d4c:	01 d0                	add    eax,edx
c0017d4e:	c1 e0 04             	shl    eax,0x4
c0017d51:	89 c2                	mov    edx,eax
c0017d53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d57:	01 d0                	add    eax,edx
c0017d59:	d1 e0                	shl    eax,1
c0017d5b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017d5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d63:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0017d68:	66 89 10             	mov    WORD PTR [eax],dx
c0017d6b:	90                   	nop
c0017d6c:	83 c4 14             	add    esp,0x14
c0017d6f:	c3                   	ret    

c0017d70 <HalConsoleCursorUpdate(int, int)>:
c0017d70:	83 ec 20             	sub    esp,0x20
c0017d73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d77:	89 c2                	mov    edx,eax
c0017d79:	c1 e2 02             	shl    edx,0x2
c0017d7c:	01 d0                	add    eax,edx
c0017d7e:	c1 e0 04             	shl    eax,0x4
c0017d81:	89 c2                	mov    edx,eax
c0017d83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d87:	01 d0                	add    eax,edx
c0017d89:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017d8e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017d95:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017d9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017da2:	ee                   	out    dx,al
c0017da3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017da8:	0f b6 c0             	movzx  eax,al
c0017dab:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017db2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017db6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017dba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017dbe:	ee                   	out    dx,al
c0017dbf:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017dc6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017dcb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017dcf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dd3:	ee                   	out    dx,al
c0017dd4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017dd9:	c1 e8 08             	shr    eax,0x8
c0017ddc:	0f b6 c0             	movzx  eax,al
c0017ddf:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017de6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017dea:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017dee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017df2:	ee                   	out    dx,al
c0017df3:	90                   	nop
c0017df4:	83 c4 20             	add    esp,0x20
c0017df7:	c3                   	ret    

c0017df8 <FAT::getName()>:
c0017df8:	b8 bc 16 02 c0       	mov    eax,0xc00216bc
c0017dfd:	c3                   	ret    
c0017dfe:	66 90                	xchg   ax,ax

c0017e00 <FAT::tell(void*, unsigned long long*)>:
c0017e00:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e05:	75 09                	jne    c0017e10 <FAT::tell(void*, unsigned long long*)+0x10>
c0017e07:	b8 04 00 00 00       	mov    eax,0x4
c0017e0c:	c3                   	ret    
c0017e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e10:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e15:	75 09                	jne    c0017e20 <FAT::tell(void*, unsigned long long*)+0x20>
c0017e17:	b8 04 00 00 00       	mov    eax,0x4
c0017e1c:	c3                   	ret    
c0017e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017e27:	ba 00 00 00 00       	mov    edx,0x0
c0017e2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e30:	89 01                	mov    DWORD PTR [ecx],eax
c0017e32:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e35:	b8 00 00 00 00       	mov    eax,0x0
c0017e3a:	c3                   	ret    
c0017e3b:	90                   	nop

c0017e3c <FAT::stat(void*, unsigned long long*)>:
c0017e3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e41:	75 09                	jne    c0017e4c <FAT::stat(void*, unsigned long long*)+0x10>
c0017e43:	b8 04 00 00 00       	mov    eax,0x4
c0017e48:	c3                   	ret    
c0017e49:	8d 76 00             	lea    esi,[esi+0x0]
c0017e4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e51:	75 09                	jne    c0017e5c <FAT::stat(void*, unsigned long long*)+0x20>
c0017e53:	b8 04 00 00 00       	mov    eax,0x4
c0017e58:	c3                   	ret    
c0017e59:	8d 76 00             	lea    esi,[esi+0x0]
c0017e5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e63:	ba 00 00 00 00       	mov    edx,0x0
c0017e68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e6c:	89 01                	mov    DWORD PTR [ecx],eax
c0017e6e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e71:	b8 00 00 00 00       	mov    eax,0x0
c0017e76:	c3                   	ret    
c0017e77:	90                   	nop

c0017e78 <FAT::~FAT()>:
c0017e78:	83 ec 0c             	sub    esp,0xc
c0017e7b:	ba 08 17 02 c0       	mov    edx,0xc0021708
c0017e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e84:	89 10                	mov    DWORD PTR [eax],edx
c0017e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e8a:	83 ec 0c             	sub    esp,0xc
c0017e8d:	50                   	push   eax
c0017e8e:	e8 37 2e ff ff       	call   c000acca <Filesystem::~Filesystem()>
c0017e93:	83 c4 10             	add    esp,0x10
c0017e96:	90                   	nop
c0017e97:	83 c4 0c             	add    esp,0xc
c0017e9a:	c3                   	ret    
c0017e9b:	90                   	nop

c0017e9c <FAT::~FAT()>:
c0017e9c:	83 ec 0c             	sub    esp,0xc
c0017e9f:	83 ec 0c             	sub    esp,0xc
c0017ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ea6:	e8 cd ff ff ff       	call   c0017e78 <FAT::~FAT()>
c0017eab:	83 c4 10             	add    esp,0x10
c0017eae:	83 ec 08             	sub    esp,0x8
c0017eb1:	6a 08                	push   0x8
c0017eb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017eb7:	e8 c9 29 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c0017ebc:	83 c4 10             	add    esp,0x10
c0017ebf:	83 c4 0c             	add    esp,0xc
c0017ec2:	c3                   	ret    
c0017ec3:	90                   	nop

c0017ec4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017ec4:	83 ec 1c             	sub    esp,0x1c
c0017ec7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017ece:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017ed3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ed7:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017ede:	83 f8 ff             	cmp    eax,0xffffffff
c0017ee1:	75 35                	jne    c0017f18 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017ee3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017ee7:	88 c2                	mov    dl,al
c0017ee9:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017eee:	01 d0                	add    eax,edx
c0017ef0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017ef4:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017efa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017efe:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017f05:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f0e:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017f15:	eb 19                	jmp    c0017f30 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017f17:	90                   	nop
c0017f18:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f1c:	88 c2                	mov    dl,al
c0017f1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f22:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f29:	01 d0                	add    eax,edx
c0017f2b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f2f:	90                   	nop
c0017f30:	83 ec 04             	sub    esp,0x4
c0017f33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f3b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017f3f:	50                   	push   eax
c0017f40:	e8 ae d0 fe ff       	call   c0004ff3 <f_getlabel>
c0017f45:	83 c4 10             	add    esp,0x10
c0017f48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017f51:	75 09                	jne    c0017f5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017f53:	b8 00 00 00 00       	mov    eax,0x0
c0017f58:	eb 0a                	jmp    c0017f64 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017f5a:	66 90                	xchg   ax,ax
c0017f5c:	b8 01 00 00 00       	mov    eax,0x1
c0017f61:	8d 76 00             	lea    esi,[esi+0x0]
c0017f64:	83 c4 1c             	add    esp,0x1c
c0017f67:	c3                   	ret    

c0017f68 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017f68:	53                   	push   ebx
c0017f69:	83 ec 58             	sub    esp,0x58
c0017f6c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017f74:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017f78:	b9 00 00 00 00       	mov    ecx,0x0
c0017f7d:	b8 3c 00 00 00       	mov    eax,0x3c
c0017f82:	83 e0 f8             	and    eax,0xfffffff8
c0017f85:	89 c3                	mov    ebx,eax
c0017f87:	b8 00 00 00 00       	mov    eax,0x0
c0017f8c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0017f90:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0017f94:	83 c0 08             	add    eax,0x8
c0017f97:	39 d8                	cmp    eax,ebx
c0017f99:	72 f1                	jb     c0017f8c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0017f9b:	01 c2                	add    edx,eax
c0017f9d:	89 0a                	mov    DWORD PTR [edx],ecx
c0017f9f:	83 c2 04             	add    edx,0x4
c0017fa2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fa6:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fad:	83 f8 ff             	cmp    eax,0xffffffff
c0017fb0:	75 36                	jne    c0017fe8 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0017fb2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fb6:	88 c2                	mov    dl,al
c0017fb8:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fbd:	01 d0                	add    eax,edx
c0017fbf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fc3:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017fc9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fcd:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017fd4:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fd9:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017fdd:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017fe4:	eb 1a                	jmp    c0018000 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0017fe6:	66 90                	xchg   ax,ax
c0017fe8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fec:	88 c2                	mov    dl,al
c0017fee:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017ff2:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017ff9:	01 d0                	add    eax,edx
c0017ffb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fff:	90                   	nop
c0018000:	83 ec 08             	sub    esp,0x8
c0018003:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018007:	8d 44 24 18          	lea    eax,[esp+0x18]
c001800b:	50                   	push   eax
c001800c:	e8 5f 88 fe ff       	call   c0000870 <strcat>
c0018011:	83 c4 10             	add    esp,0x10
c0018014:	83 ec 0c             	sub    esp,0xc
c0018017:	8d 44 24 18          	lea    eax,[esp+0x18]
c001801b:	50                   	push   eax
c001801c:	e8 26 d1 fe ff       	call   c0005147 <f_setlabel>
c0018021:	83 c4 10             	add    esp,0x10
c0018024:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018028:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001802d:	75 09                	jne    c0018038 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001802f:	b8 00 00 00 00       	mov    eax,0x0
c0018034:	eb 0a                	jmp    c0018040 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018036:	66 90                	xchg   ax,ax
c0018038:	b8 01 00 00 00       	mov    eax,0x1
c001803d:	8d 76 00             	lea    esi,[esi+0x0]
c0018040:	83 c4 58             	add    esp,0x58
c0018043:	5b                   	pop    ebx
c0018044:	c3                   	ret    
c0018045:	90                   	nop
c0018046:	66 90                	xchg   ax,ax

c0018048 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018048:	83 ec 2c             	sub    esp,0x2c
c001804b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018053:	83 ec 08             	sub    esp,0x8
c0018056:	68 e0 16 02 c0       	push   0xc00216e0
c001805b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001805f:	e8 1c 87 fe ff       	call   c0000780 <strcmp>
c0018064:	83 c4 10             	add    esp,0x10
c0018067:	85 c0                	test   eax,eax
c0018069:	0f 94 c0             	sete   al
c001806c:	0f b6 c0             	movzx  eax,al
c001806f:	85 c0                	test   eax,eax
c0018071:	74 0d                	je     c0018080 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018073:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001807b:	e9 c0 00 00 00       	jmp    c0018140 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018080:	83 ec 08             	sub    esp,0x8
c0018083:	68 d2 16 02 c0       	push   0xc00216d2
c0018088:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001808c:	e8 ef 86 fe ff       	call   c0000780 <strcmp>
c0018091:	83 c4 10             	add    esp,0x10
c0018094:	85 c0                	test   eax,eax
c0018096:	0f 94 c0             	sete   al
c0018099:	0f b6 c0             	movzx  eax,al
c001809c:	85 c0                	test   eax,eax
c001809e:	74 10                	je     c00180b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00180a0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00180a8:	e9 93 00 00 00       	jmp    c0018140 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180ad:	8d 76 00             	lea    esi,[esi+0x0]
c00180b0:	83 ec 08             	sub    esp,0x8
c00180b3:	68 d8 16 02 c0       	push   0xc00216d8
c00180b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180bc:	e8 bf 86 fe ff       	call   c0000780 <strcmp>
c00180c1:	83 c4 10             	add    esp,0x10
c00180c4:	85 c0                	test   eax,eax
c00180c6:	0f 94 c0             	sete   al
c00180c9:	0f b6 c0             	movzx  eax,al
c00180cc:	85 c0                	test   eax,eax
c00180ce:	74 0c                	je     c00180dc <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00180d0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00180d8:	eb 66                	jmp    c0018140 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180da:	66 90                	xchg   ax,ax
c00180dc:	83 ec 08             	sub    esp,0x8
c00180df:	68 1c f4 01 c0       	push   0xc001f41c
c00180e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180e8:	e8 93 86 fe ff       	call   c0000780 <strcmp>
c00180ed:	83 c4 10             	add    esp,0x10
c00180f0:	85 c0                	test   eax,eax
c00180f2:	0f 94 c0             	sete   al
c00180f5:	0f b6 c0             	movzx  eax,al
c00180f8:	85 c0                	test   eax,eax
c00180fa:	74 0c                	je     c0018108 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00180fc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018104:	eb 3a                	jmp    c0018140 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018106:	66 90                	xchg   ax,ax
c0018108:	83 ec 08             	sub    esp,0x8
c001810b:	68 de 16 02 c0       	push   0xc00216de
c0018110:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018114:	e8 67 86 fe ff       	call   c0000780 <strcmp>
c0018119:	83 c4 10             	add    esp,0x10
c001811c:	85 c0                	test   eax,eax
c001811e:	0f 94 c0             	sete   al
c0018121:	0f b6 c0             	movzx  eax,al
c0018124:	85 c0                	test   eax,eax
c0018126:	74 0c                	je     c0018134 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018128:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018130:	eb 0e                	jmp    c0018140 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018132:	66 90                	xchg   ax,ax
c0018134:	b8 08 00 00 00       	mov    eax,0x8
c0018139:	e9 ea 00 00 00       	jmp    c0018228 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001813e:	66 90                	xchg   ax,ax
c0018140:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018147:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001814c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018150:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018157:	83 f8 ff             	cmp    eax,0xffffffff
c001815a:	75 34                	jne    c0018190 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001815c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018160:	88 c2                	mov    dl,al
c0018162:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018167:	01 d0                	add    eax,edx
c0018169:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001816d:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018173:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018177:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001817e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018183:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018187:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001818e:	eb 18                	jmp    c00181a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018190:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018194:	88 c2                	mov    dl,al
c0018196:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001819a:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00181a1:	01 d0                	add    eax,edx
c00181a3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00181a7:	90                   	nop
c00181a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181ac:	88 04 24             	mov    BYTE PTR [esp],al
c00181af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00181b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00181bf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00181c4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00181cc:	83 ec 0c             	sub    esp,0xc
c00181cf:	68 00 20 00 00       	push   0x2000
c00181d4:	e8 f2 f8 fe ff       	call   c0007acb <malloc>
c00181d9:	83 c4 10             	add    esp,0x10
c00181dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00181e0:	68 00 20 00 00       	push   0x2000
c00181e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181e9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181ed:	50                   	push   eax
c00181ee:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00181f2:	50                   	push   eax
c00181f3:	e8 4c d2 fe ff       	call   c0005444 <f_mkfs>
c00181f8:	83 c4 10             	add    esp,0x10
c00181fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018204:	75 0a                	jne    c0018210 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018206:	b8 00 00 00 00       	mov    eax,0x0
c001820b:	eb 1b                	jmp    c0018228 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001820d:	8d 76 00             	lea    esi,[esi+0x0]
c0018210:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018215:	75 09                	jne    c0018220 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018217:	b8 09 00 00 00       	mov    eax,0x9
c001821c:	eb 0a                	jmp    c0018228 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001821e:	66 90                	xchg   ax,ax
c0018220:	b8 01 00 00 00       	mov    eax,0x1
c0018225:	8d 76 00             	lea    esi,[esi+0x0]
c0018228:	83 c4 2c             	add    esp,0x2c
c001822b:	c3                   	ret    

c001822c <FAT::tryMount(LogicalDisk*, int)>:
c001822c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018232:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018237:	83 f8 14             	cmp    eax,0x14
c001823a:	75 18                	jne    c0018254 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001823c:	83 ec 0c             	sub    esp,0xc
c001823f:	68 e4 16 02 c0       	push   0xc00216e4
c0018244:	e8 04 86 ff ff       	call   c001084d <KePanic(char const*)>
c0018249:	83 c4 10             	add    esp,0x10
c001824c:	b0 00                	mov    al,0x0
c001824e:	e9 ed 01 00 00       	jmp    c0018440 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018253:	90                   	nop
c0018254:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001825b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018261:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018267:	3d 00 02 00 00       	cmp    eax,0x200
c001826c:	74 0a                	je     c0018278 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001826e:	b0 00                	mov    al,0x0
c0018270:	e9 cb 01 00 00       	jmp    c0018440 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018275:	8d 76 00             	lea    esi,[esi+0x0]
c0018278:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018280:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018287:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001828e:	83 f8 ff             	cmp    eax,0xffffffff
c0018291:	74 09                	je     c001829c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018293:	b0 01                	mov    al,0x1
c0018295:	e9 a6 01 00 00       	jmp    c0018440 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001829a:	66 90                	xchg   ax,ax
c001829c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00182a6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00182ae:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00182b5:	88 c2                	mov    dl,al
c00182b7:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182bc:	01 d0                	add    eax,edx
c00182be:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00182c5:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00182cb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00182d2:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00182d9:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182de:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00182e5:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00182ec:	83 ec 0c             	sub    esp,0xc
c00182ef:	68 34 02 00 00       	push   0x234
c00182f4:	e8 d2 f7 fe ff       	call   c0007acb <malloc>
c00182f9:	83 c4 10             	add    esp,0x10
c00182fc:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018303:	83 ec 04             	sub    esp,0x4
c0018306:	6a 00                	push   0x0
c0018308:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001830f:	50                   	push   eax
c0018310:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018317:	e8 22 b9 fe ff       	call   c0003c3e <f_mount>
c001831c:	83 c4 10             	add    esp,0x10
c001831f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018326:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001832e:	74 1c                	je     c001834c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018330:	83 ec 0c             	sub    esp,0xc
c0018333:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001833a:	e8 ac f7 fe ff       	call   c0007aeb <rfree>
c001833f:	83 c4 10             	add    esp,0x10
c0018342:	b0 00                	mov    al,0x0
c0018344:	e9 f7 00 00 00       	jmp    c0018440 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018349:	8d 76 00             	lea    esi,[esi+0x0]
c001834c:	83 ec 04             	sub    esp,0x4
c001834f:	68 00 01 00 00       	push   0x100
c0018354:	6a 00                	push   0x0
c0018356:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001835d:	50                   	push   eax
c001835e:	e8 8d 81 fe ff       	call   c00004f0 <memset>
c0018363:	83 c4 10             	add    esp,0x10
c0018366:	83 ec 08             	sub    esp,0x8
c0018369:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018370:	50                   	push   eax
c0018371:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018378:	50                   	push   eax
c0018379:	e8 f2 84 fe ff       	call   c0000870 <strcat>
c001837e:	83 c4 10             	add    esp,0x10
c0018381:	83 ec 08             	sub    esp,0x8
c0018384:	68 f2 16 02 c0       	push   0xc00216f2
c0018389:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018390:	50                   	push   eax
c0018391:	e8 da 84 fe ff       	call   c0000870 <strcat>
c0018396:	83 c4 10             	add    esp,0x10
c0018399:	83 ec 04             	sub    esp,0x4
c001839c:	6a 01                	push   0x1
c001839e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00183a5:	50                   	push   eax
c00183a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183aa:	50                   	push   eax
c00183ab:	e8 f0 b8 fe ff       	call   c0003ca0 <f_open>
c00183b0:	83 c4 10             	add    esp,0x10
c00183b3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00183ba:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00183c1:	85 c0                	test   eax,eax
c00183c3:	74 0b                	je     c00183d0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00183c5:	78 31                	js     c00183f8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00183c7:	83 e8 04             	sub    eax,0x4
c00183ca:	83 f8 01             	cmp    eax,0x1
c00183cd:	77 29                	ja     c00183f8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00183cf:	90                   	nop
c00183d0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00183d8:	83 ec 0c             	sub    esp,0xc
c00183db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183df:	50                   	push   eax
c00183e0:	e8 6b c0 fe ff       	call   c0004450 <f_close>
c00183e5:	83 c4 10             	add    esp,0x10
c00183e8:	90                   	nop
c00183e9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00183f1:	85 c0                	test   eax,eax
c00183f3:	74 43                	je     c0018438 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00183f5:	eb 31                	jmp    c0018428 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00183f7:	90                   	nop
c00183f8:	83 ec 0c             	sub    esp,0xc
c00183fb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018402:	e8 e4 f6 fe ff       	call   c0007aeb <rfree>
c0018407:	83 c4 10             	add    esp,0x10
c001840a:	83 ec 04             	sub    esp,0x4
c001840d:	6a 00                	push   0x0
c001840f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018416:	50                   	push   eax
c0018417:	6a 00                	push   0x0
c0018419:	e8 20 b8 fe ff       	call   c0003c3e <f_mount>
c001841e:	83 c4 10             	add    esp,0x10
c0018421:	b0 00                	mov    al,0x0
c0018423:	eb 1b                	jmp    c0018440 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018425:	8d 76 00             	lea    esi,[esi+0x0]
c0018428:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001842d:	83 c0 01             	add    eax,0x1
c0018430:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c0018435:	8d 76 00             	lea    esi,[esi+0x0]
c0018438:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001843f:	90                   	nop
c0018440:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018446:	c3                   	ret    
c0018447:	90                   	nop

c0018448 <FAT::allocateSwapfile(char const*, int)>:
c0018448:	55                   	push   ebp
c0018449:	57                   	push   edi
c001844a:	56                   	push   esi
c001844b:	53                   	push   ebx
c001844c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018452:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001845d:	83 ec 0c             	sub    esp,0xc
c0018460:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018467:	e8 5f f6 fe ff       	call   c0007acb <malloc>
c001846c:	83 c4 10             	add    esp,0x10
c001846f:	89 c7                	mov    edi,eax
c0018471:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0018476:	83 ec 04             	sub    esp,0x4
c0018479:	50                   	push   eax
c001847a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018481:	57                   	push   edi
c0018482:	e8 a5 2a ff ff       	call   c000af2c <File::File(char const*, Process*)>
c0018487:	83 c4 10             	add    esp,0x10
c001848a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018491:	83 ec 04             	sub    esp,0x4
c0018494:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018498:	50                   	push   eax
c0018499:	8d 44 24 18          	lea    eax,[esp+0x18]
c001849d:	50                   	push   eax
c001849e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184a5:	e8 ea 2d ff ff       	call   c000b294 <File::stat(unsigned long long*, bool*)>
c00184aa:	83 c4 10             	add    esp,0x10
c00184ad:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00184b4:	c1 e0 14             	shl    eax,0x14
c00184b7:	89 c7                	mov    edi,eax
c00184b9:	89 c5                	mov    ebp,eax
c00184bb:	c1 fd 1f             	sar    ebp,0x1f
c00184be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184c6:	89 f9                	mov    ecx,edi
c00184c8:	31 c1                	xor    ecx,eax
c00184ca:	89 cb                	mov    ebx,ecx
c00184cc:	89 e9                	mov    ecx,ebp
c00184ce:	31 d1                	xor    ecx,edx
c00184d0:	89 ce                	mov    esi,ecx
c00184d2:	89 f0                	mov    eax,esi
c00184d4:	09 d8                	or     eax,ebx
c00184d6:	0f 84 9c 00 00 00    	je     c0018578 <FAT::allocateSwapfile(char const*, int)+0x130>
c00184dc:	83 ec 0c             	sub    esp,0xc
c00184df:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184e6:	e8 75 2c ff ff       	call   c000b160 <File::unlink()>
c00184eb:	83 c4 10             	add    esp,0x10
c00184ee:	83 ec 08             	sub    esp,0x8
c00184f1:	6a 12                	push   0x12
c00184f3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184fa:	e8 e9 2a ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c00184ff:	83 c4 10             	add    esp,0x10
c0018502:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018509:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001850f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018516:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001851d:	c1 e0 14             	shl    eax,0x14
c0018520:	83 ec 04             	sub    esp,0x4
c0018523:	6a 01                	push   0x1
c0018525:	50                   	push   eax
c0018526:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001852d:	e8 a5 cd fe ff       	call   c00052d7 <f_expand>
c0018532:	83 c4 10             	add    esp,0x10
c0018535:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001853c:	8b 00                	mov    eax,DWORD PTR [eax]
c001853e:	83 c0 10             	add    eax,0x10
c0018541:	8b 00                	mov    eax,DWORD PTR [eax]
c0018543:	83 ec 0c             	sub    esp,0xc
c0018546:	8d 54 24 24          	lea    edx,[esp+0x24]
c001854a:	52                   	push   edx
c001854b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001854f:	52                   	push   edx
c0018550:	6a 00                	push   0x0
c0018552:	68 00 04 00 00       	push   0x400
c0018557:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001855e:	ff d0                	call   eax
c0018560:	83 c4 20             	add    esp,0x20
c0018563:	83 ec 0c             	sub    esp,0xc
c0018566:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001856d:	e8 d4 2a ff ff       	call   c000b046 <File::close()>
c0018572:	83 c4 10             	add    esp,0x10
c0018575:	8d 76 00             	lea    esi,[esi+0x0]
c0018578:	83 ec 08             	sub    esp,0x8
c001857b:	6a 01                	push   0x1
c001857d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018584:	e8 5f 2a ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c0018589:	83 c4 10             	add    esp,0x10
c001858c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018593:	8b 00                	mov    eax,DWORD PTR [eax]
c0018595:	83 c0 0c             	add    eax,0xc
c0018598:	8b 00                	mov    eax,DWORD PTR [eax]
c001859a:	83 ec 0c             	sub    esp,0xc
c001859d:	8d 54 24 24          	lea    edx,[esp+0x24]
c00185a1:	52                   	push   edx
c00185a2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00185a6:	52                   	push   edx
c00185a7:	6a 00                	push   0x0
c00185a9:	6a 04                	push   0x4
c00185ab:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00185b2:	ff d0                	call   eax
c00185b4:	83 c4 20             	add    esp,0x20
c00185b7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00185be:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00185c4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00185cb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00185d2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00185d5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00185dc:	83 ec 0c             	sub    esp,0xc
c00185df:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185e6:	e8 5b 2a ff ff       	call   c000b046 <File::close()>
c00185eb:	83 c4 10             	add    esp,0x10
c00185ee:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00185f5:	ba 00 00 00 00       	mov    edx,0x0
c00185fa:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018600:	5b                   	pop    ebx
c0018601:	5e                   	pop    esi
c0018602:	5f                   	pop    edi
c0018603:	5d                   	pop    ebp
c0018604:	c3                   	ret    
c0018605:	90                   	nop
c0018606:	66 90                	xchg   ax,ax

c0018608 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018608:	57                   	push   edi
c0018609:	56                   	push   esi
c001860a:	53                   	push   ebx
c001860b:	81 ec 50 02 00 00    	sub    esp,0x250
c0018611:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018619:	74 0d                	je     c0018628 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001861b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0018623:	75 0f                	jne    c0018634 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018625:	8d 76 00             	lea    esi,[esi+0x0]
c0018628:	b8 04 00 00 00       	mov    eax,0x4
c001862d:	e9 3a 01 00 00       	jmp    c001876c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018632:	66 90                	xchg   ax,ax
c0018634:	83 ec 08             	sub    esp,0x8
c0018637:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001863e:	50                   	push   eax
c001863f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0018646:	e8 d1 c0 fe ff       	call   c000471c <f_readdir>
c001864b:	83 c4 10             	add    esp,0x10
c001864e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018655:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001865c:	83 ec 0c             	sub    esp,0xc
c001865f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018666:	83 c0 16             	add    eax,0x16
c0018669:	50                   	push   eax
c001866a:	e8 11 7f fe ff       	call   c0000580 <strlen>
c001866f:	83 c4 10             	add    esp,0x10
c0018672:	ba 00 00 00 00       	mov    edx,0x0
c0018677:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001867b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001867f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018686:	0f b6 c0             	movzx  eax,al
c0018689:	83 e0 10             	and    eax,0x10
c001868c:	74 0a                	je     c0018698 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001868e:	b8 02 00 00 00       	mov    eax,0x2
c0018693:	eb 0b                	jmp    c00186a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018695:	8d 76 00             	lea    esi,[esi+0x0]
c0018698:	b8 01 00 00 00       	mov    eax,0x1
c001869d:	8d 76 00             	lea    esi,[esi+0x0]
c00186a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00186a4:	83 ec 08             	sub    esp,0x8
c00186a7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00186ae:	83 c0 16             	add    eax,0x16
c00186b1:	50                   	push   eax
c00186b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00186b6:	83 c0 10             	add    eax,0x10
c00186b9:	50                   	push   eax
c00186ba:	e8 91 7f fe ff       	call   c0000650 <strcpy>
c00186bf:	83 c4 10             	add    esp,0x10
c00186c2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00186c9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00186d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186d4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00186db:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00186e2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00186e9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00186f0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00186f7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00186fe:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018705:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001870c:	89 c6                	mov    esi,eax
c001870e:	89 d7                	mov    edi,edx
c0018710:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018712:	89 c8                	mov    eax,ecx
c0018714:	89 fa                	mov    edx,edi
c0018716:	89 f3                	mov    ebx,esi
c0018718:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001871f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018726:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001872d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018734:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001873a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018741:	0f be c0             	movsx  eax,al
c0018744:	85 c0                	test   eax,eax
c0018746:	75 08                	jne    c0018750 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018748:	b8 07 00 00 00       	mov    eax,0x7
c001874d:	eb 1d                	jmp    c001876c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001874f:	90                   	nop
c0018750:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018757:	85 c0                	test   eax,eax
c0018759:	75 09                	jne    c0018764 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001875b:	b8 00 00 00 00       	mov    eax,0x0
c0018760:	eb 0a                	jmp    c001876c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018762:	66 90                	xchg   ax,ax
c0018764:	b8 01 00 00 00       	mov    eax,0x1
c0018769:	8d 76 00             	lea    esi,[esi+0x0]
c001876c:	81 c4 50 02 00 00    	add    esp,0x250
c0018772:	5b                   	pop    ebx
c0018773:	5e                   	pop    esi
c0018774:	5f                   	pop    edi
c0018775:	c3                   	ret    
c0018776:	66 90                	xchg   ax,ax

c0018778 <FAT::read(void*, unsigned long, void*, int*)>:
c0018778:	83 ec 1c             	sub    esp,0x1c
c001877b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018780:	74 0a                	je     c001878c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018782:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018787:	75 0b                	jne    c0018794 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018789:	8d 76 00             	lea    esi,[esi+0x0]
c001878c:	b8 04 00 00 00       	mov    eax,0x4
c0018791:	eb 41                	jmp    c00187d4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018793:	90                   	nop
c0018794:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018798:	50                   	push   eax
c0018799:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001879d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00187a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187a5:	e8 b9 b7 fe ff       	call   c0003f63 <f_read>
c00187aa:	83 c4 10             	add    esp,0x10
c00187ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187b5:	89 c2                	mov    edx,eax
c00187b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187bb:	89 10                	mov    DWORD PTR [eax],edx
c00187bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187c1:	85 c0                	test   eax,eax
c00187c3:	75 07                	jne    c00187cc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00187c5:	b8 00 00 00 00       	mov    eax,0x0
c00187ca:	eb 08                	jmp    c00187d4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00187cc:	b8 01 00 00 00       	mov    eax,0x1
c00187d1:	8d 76 00             	lea    esi,[esi+0x0]
c00187d4:	83 c4 1c             	add    esp,0x1c
c00187d7:	c3                   	ret    

c00187d8 <FAT::write(void*, unsigned long, void*, int*)>:
c00187d8:	83 ec 1c             	sub    esp,0x1c
c00187db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187e0:	74 0a                	je     c00187ec <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00187e2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00187e7:	75 0b                	jne    c00187f4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00187e9:	8d 76 00             	lea    esi,[esi+0x0]
c00187ec:	b8 04 00 00 00       	mov    eax,0x4
c00187f1:	eb 41                	jmp    c0018834 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00187f3:	90                   	nop
c00187f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187f8:	50                   	push   eax
c00187f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018801:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018805:	e8 3a b9 fe ff       	call   c0004144 <f_write>
c001880a:	83 c4 10             	add    esp,0x10
c001880d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018815:	89 c2                	mov    edx,eax
c0018817:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001881b:	89 10                	mov    DWORD PTR [eax],edx
c001881d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018821:	85 c0                	test   eax,eax
c0018823:	75 07                	jne    c001882c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018825:	b8 00 00 00 00       	mov    eax,0x0
c001882a:	eb 08                	jmp    c0018834 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001882c:	b8 01 00 00 00       	mov    eax,0x1
c0018831:	8d 76 00             	lea    esi,[esi+0x0]
c0018834:	83 c4 1c             	add    esp,0x1c
c0018837:	c3                   	ret    

c0018838 <FAT::close(void*)>:
c0018838:	83 ec 1c             	sub    esp,0x1c
c001883b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018840:	75 0a                	jne    c001884c <FAT::close(void*)+0x14>
c0018842:	b8 04 00 00 00       	mov    eax,0x4
c0018847:	eb 3f                	jmp    c0018888 <FAT::close(void*)+0x50>
c0018849:	8d 76 00             	lea    esi,[esi+0x0]
c001884c:	83 ec 0c             	sub    esp,0xc
c001884f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018853:	e8 f8 bb fe ff       	call   c0004450 <f_close>
c0018858:	83 c4 10             	add    esp,0x10
c001885b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001885f:	83 ec 0c             	sub    esp,0xc
c0018862:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018866:	e8 70 f2 fe ff       	call   c0007adb <free>
c001886b:	83 c4 10             	add    esp,0x10
c001886e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018872:	85 c0                	test   eax,eax
c0018874:	75 0a                	jne    c0018880 <FAT::close(void*)+0x48>
c0018876:	b8 00 00 00 00       	mov    eax,0x0
c001887b:	eb 0b                	jmp    c0018888 <FAT::close(void*)+0x50>
c001887d:	8d 76 00             	lea    esi,[esi+0x0]
c0018880:	b8 01 00 00 00       	mov    eax,0x1
c0018885:	8d 76 00             	lea    esi,[esi+0x0]
c0018888:	83 c4 1c             	add    esp,0x1c
c001888b:	c3                   	ret    

c001888c <FAT::closeDir(void*)>:
c001888c:	83 ec 1c             	sub    esp,0x1c
c001888f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018894:	75 0a                	jne    c00188a0 <FAT::closeDir(void*)+0x14>
c0018896:	b8 04 00 00 00       	mov    eax,0x4
c001889b:	eb 3f                	jmp    c00188dc <FAT::closeDir(void*)+0x50>
c001889d:	8d 76 00             	lea    esi,[esi+0x0]
c00188a0:	83 ec 0c             	sub    esp,0xc
c00188a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188a7:	e8 4e be fe ff       	call   c00046fa <f_closedir>
c00188ac:	83 c4 10             	add    esp,0x10
c00188af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188b3:	83 ec 0c             	sub    esp,0xc
c00188b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188ba:	e8 1c f2 fe ff       	call   c0007adb <free>
c00188bf:	83 c4 10             	add    esp,0x10
c00188c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188c6:	85 c0                	test   eax,eax
c00188c8:	75 0a                	jne    c00188d4 <FAT::closeDir(void*)+0x48>
c00188ca:	b8 00 00 00 00       	mov    eax,0x0
c00188cf:	eb 0b                	jmp    c00188dc <FAT::closeDir(void*)+0x50>
c00188d1:	8d 76 00             	lea    esi,[esi+0x0]
c00188d4:	b8 01 00 00 00       	mov    eax,0x1
c00188d9:	8d 76 00             	lea    esi,[esi+0x0]
c00188dc:	83 c4 1c             	add    esp,0x1c
c00188df:	c3                   	ret    

c00188e0 <FAT::seek(void*, unsigned long long)>:
c00188e0:	83 ec 2c             	sub    esp,0x2c
c00188e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00188e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00188eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00188ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188f3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00188f8:	75 0a                	jne    c0018904 <FAT::seek(void*, unsigned long long)+0x24>
c00188fa:	b8 04 00 00 00       	mov    eax,0x4
c00188ff:	eb 33                	jmp    c0018934 <FAT::seek(void*, unsigned long long)+0x54>
c0018901:	8d 76 00             	lea    esi,[esi+0x0]
c0018904:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018908:	83 ec 08             	sub    esp,0x8
c001890b:	50                   	push   eax
c001890c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018910:	e8 6a bb fe ff       	call   c000447f <f_lseek>
c0018915:	83 c4 10             	add    esp,0x10
c0018918:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001891c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018920:	85 c0                	test   eax,eax
c0018922:	75 08                	jne    c001892c <FAT::seek(void*, unsigned long long)+0x4c>
c0018924:	b8 00 00 00 00       	mov    eax,0x0
c0018929:	eb 09                	jmp    c0018934 <FAT::seek(void*, unsigned long long)+0x54>
c001892b:	90                   	nop
c001892c:	b8 01 00 00 00       	mov    eax,0x1
c0018931:	8d 76 00             	lea    esi,[esi+0x0]
c0018934:	83 c4 2c             	add    esp,0x2c
c0018937:	c3                   	ret    

c0018938 <fatWrapperReadDisk>:
c0018938:	53                   	push   ebx
c0018939:	83 ec 18             	sub    esp,0x18
c001893c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018940:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018944:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018949:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018950:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018954:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018958:	ba 00 00 00 00       	mov    edx,0x0
c001895d:	83 ec 0c             	sub    esp,0xc
c0018960:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018964:	53                   	push   ebx
c0018965:	52                   	push   edx
c0018966:	50                   	push   eax
c0018967:	51                   	push   ecx
c0018968:	e8 61 48 ff ff       	call   c000d1ce <LogicalDisk::read(unsigned long long, int, void*)>
c001896d:	83 c4 20             	add    esp,0x20
c0018970:	83 c4 18             	add    esp,0x18
c0018973:	5b                   	pop    ebx
c0018974:	c3                   	ret    
c0018975:	8d 76 00             	lea    esi,[esi+0x0]

c0018978 <fatWrapperWriteDisk>:
c0018978:	53                   	push   ebx
c0018979:	83 ec 18             	sub    esp,0x18
c001897c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018980:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018984:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018989:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018990:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018994:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018998:	ba 00 00 00 00       	mov    edx,0x0
c001899d:	83 ec 0c             	sub    esp,0xc
c00189a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189a4:	53                   	push   ebx
c00189a5:	52                   	push   edx
c00189a6:	50                   	push   eax
c00189a7:	51                   	push   ecx
c00189a8:	e8 8d 48 ff ff       	call   c000d23a <LogicalDisk::write(unsigned long long, int, void*)>
c00189ad:	83 c4 20             	add    esp,0x20
c00189b0:	83 c4 18             	add    esp,0x18
c00189b3:	5b                   	pop    ebx
c00189b4:	c3                   	ret    
c00189b5:	8d 76 00             	lea    esi,[esi+0x0]

c00189b8 <fatWrapperIoctl>:
c00189b8:	53                   	push   ebx
c00189b9:	83 ec 28             	sub    esp,0x28
c00189bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189c0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00189c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189c8:	88 d0                	mov    al,dl
c00189ca:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00189ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189d3:	83 f8 02             	cmp    eax,0x2
c00189d6:	75 34                	jne    c0018a0c <fatWrapperIoctl+0x54>
c00189d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189e5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189ec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00189f8:	89 c2                	mov    edx,eax
c00189fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00189fe:	66 89 10             	mov    WORD PTR [eax],dx
c0018a01:	b8 00 00 00 00       	mov    eax,0x0
c0018a06:	e9 c5 00 00 00       	jmp    c0018ad0 <fatWrapperIoctl+0x118>
c0018a0b:	90                   	nop
c0018a0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a11:	83 f8 01             	cmp    eax,0x1
c0018a14:	75 6a                	jne    c0018a80 <fatWrapperIoctl+0xc8>
c0018a16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a1e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a23:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018a2a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a30:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018a36:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018a3c:	89 c8                	mov    eax,ecx
c0018a3e:	89 da                	mov    edx,ebx
c0018a40:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018a44:	c1 e0 0a             	shl    eax,0xa
c0018a47:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018a4c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018a53:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018a59:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018a5f:	89 cb                	mov    ebx,ecx
c0018a61:	c1 fb 1f             	sar    ebx,0x1f
c0018a64:	53                   	push   ebx
c0018a65:	51                   	push   ecx
c0018a66:	52                   	push   edx
c0018a67:	50                   	push   eax
c0018a68:	e8 b3 5b 00 00       	call   c001e620 <__udivdi3>
c0018a6d:	83 c4 10             	add    esp,0x10
c0018a70:	89 c2                	mov    edx,eax
c0018a72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a76:	89 10                	mov    DWORD PTR [eax],edx
c0018a78:	b8 00 00 00 00       	mov    eax,0x0
c0018a7d:	eb 51                	jmp    c0018ad0 <fatWrapperIoctl+0x118>
c0018a7f:	90                   	nop
c0018a80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a85:	85 c0                	test   eax,eax
c0018a87:	75 07                	jne    c0018a90 <fatWrapperIoctl+0xd8>
c0018a89:	b8 00 00 00 00       	mov    eax,0x0
c0018a8e:	eb 40                	jmp    c0018ad0 <fatWrapperIoctl+0x118>
c0018a90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a95:	83 f8 03             	cmp    eax,0x3
c0018a98:	75 1a                	jne    c0018ab4 <fatWrapperIoctl+0xfc>
c0018a9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018aa2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018aa6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018aac:	b8 00 00 00 00       	mov    eax,0x0
c0018ab1:	eb 1d                	jmp    c0018ad0 <fatWrapperIoctl+0x118>
c0018ab3:	90                   	nop
c0018ab4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ab9:	83 f8 04             	cmp    eax,0x4
c0018abc:	75 0a                	jne    c0018ac8 <fatWrapperIoctl+0x110>
c0018abe:	b8 00 00 00 00       	mov    eax,0x0
c0018ac3:	eb 0b                	jmp    c0018ad0 <fatWrapperIoctl+0x118>
c0018ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ac8:	b8 04 00 00 00       	mov    eax,0x4
c0018acd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ad0:	83 c4 28             	add    esp,0x28
c0018ad3:	5b                   	pop    ebx
c0018ad4:	c3                   	ret    
c0018ad5:	90                   	nop
c0018ad6:	66 90                	xchg   ax,ax

c0018ad8 <FAT::FAT()>:
c0018ad8:	83 ec 1c             	sub    esp,0x1c
c0018adb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018adf:	83 ec 0c             	sub    esp,0xc
c0018ae2:	50                   	push   eax
c0018ae3:	e8 be 21 ff ff       	call   c000aca6 <Filesystem::Filesystem()>
c0018ae8:	83 c4 10             	add    esp,0x10
c0018aeb:	ba 08 17 02 c0       	mov    edx,0xc0021708
c0018af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018af4:	89 10                	mov    DWORD PTR [eax],edx
c0018af6:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018b00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018b08:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018b0d:	7f 19                	jg     c0018b28 <FAT::FAT()+0x50>
c0018b0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b13:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018b1e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018b23:	eb e3                	jmp    c0018b08 <FAT::FAT()+0x30>
c0018b25:	8d 76 00             	lea    esi,[esi+0x0]
c0018b28:	90                   	nop
c0018b29:	83 c4 1c             	add    esp,0x1c
c0018b2c:	c3                   	ret    
c0018b2d:	90                   	nop
c0018b2e:	66 90                	xchg   ax,ax

c0018b30 <FAT::fixFilepath(char*)>:
c0018b30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b34:	8a 00                	mov    al,BYTE PTR [eax]
c0018b36:	0f be c0             	movsx  eax,al
c0018b39:	83 f8 40             	cmp    eax,0x40
c0018b3c:	7e 2e                	jle    c0018b6c <FAT::fixFilepath(char*)+0x3c>
c0018b3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b42:	8a 00                	mov    al,BYTE PTR [eax]
c0018b44:	83 e8 41             	sub    eax,0x41
c0018b47:	88 c2                	mov    dl,al
c0018b49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b4d:	88 10                	mov    BYTE PTR [eax],dl
c0018b4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b53:	8a 00                	mov    al,BYTE PTR [eax]
c0018b55:	0f be c0             	movsx  eax,al
c0018b58:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018b5f:	83 c0 30             	add    eax,0x30
c0018b62:	88 c2                	mov    dl,al
c0018b64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b68:	88 10                	mov    BYTE PTR [eax],dl
c0018b6a:	66 90                	xchg   ax,ax
c0018b6c:	90                   	nop
c0018b6d:	c3                   	ret    
c0018b6e:	66 90                	xchg   ax,ax

c0018b70 <FAT::open(char const*, void**, FileOpenMode)>:
c0018b70:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018b76:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018b7e:	74 0c                	je     c0018b8c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018b80:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018b88:	75 0e                	jne    c0018b98 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018b8a:	66 90                	xchg   ax,ax
c0018b8c:	b8 04 00 00 00       	mov    eax,0x4
c0018b91:	e9 46 01 00 00       	jmp    c0018cdc <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018b96:	66 90                	xchg   ax,ax
c0018b98:	83 ec 08             	sub    esp,0x8
c0018b9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018ba2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ba6:	50                   	push   eax
c0018ba7:	e8 a4 7a fe ff       	call   c0000650 <strcpy>
c0018bac:	83 c4 10             	add    esp,0x10
c0018baf:	83 ec 08             	sub    esp,0x8
c0018bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018bb6:	50                   	push   eax
c0018bb7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018bbe:	e8 6d ff ff ff       	call   c0018b30 <FAT::fixFilepath(char*)>
c0018bc3:	83 c4 10             	add    esp,0x10
c0018bc6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018bce:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bd5:	83 e0 01             	and    eax,0x1
c0018bd8:	74 12                	je     c0018bec <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018bda:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018be1:	83 c8 01             	or     eax,0x1
c0018be4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018beb:	90                   	nop
c0018bec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bf3:	83 e0 04             	and    eax,0x4
c0018bf6:	74 24                	je     c0018c1c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018bf8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bff:	83 c8 30             	or     eax,0x30
c0018c02:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c09:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c10:	83 c8 02             	or     eax,0x2
c0018c13:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c1a:	66 90                	xchg   ax,ax
c0018c1c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c23:	83 e0 02             	and    eax,0x2
c0018c26:	74 14                	je     c0018c3c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018c28:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c2f:	83 c8 02             	or     eax,0x2
c0018c32:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c39:	8d 76 00             	lea    esi,[esi+0x0]
c0018c3c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c43:	83 e0 08             	and    eax,0x8
c0018c46:	74 14                	je     c0018c5c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018c48:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c4f:	83 c8 04             	or     eax,0x4
c0018c52:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c59:	8d 76 00             	lea    esi,[esi+0x0]
c0018c5c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c63:	83 e0 10             	and    eax,0x10
c0018c66:	74 14                	je     c0018c7c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018c68:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c6f:	83 c8 08             	or     eax,0x8
c0018c72:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c79:	8d 76 00             	lea    esi,[esi+0x0]
c0018c7c:	83 ec 0c             	sub    esp,0xc
c0018c7f:	68 28 02 00 00       	push   0x228
c0018c84:	e8 42 ee fe ff       	call   c0007acb <malloc>
c0018c89:	83 c4 10             	add    esp,0x10
c0018c8c:	89 c2                	mov    edx,eax
c0018c8e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c95:	89 10                	mov    DWORD PTR [eax],edx
c0018c97:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018c9f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ca8:	83 ec 04             	sub    esp,0x4
c0018cab:	52                   	push   edx
c0018cac:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018cb0:	52                   	push   edx
c0018cb1:	50                   	push   eax
c0018cb2:	e8 e9 af fe ff       	call   c0003ca0 <f_open>
c0018cb7:	83 c4 10             	add    esp,0x10
c0018cba:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018cc1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018cc9:	74 09                	je     c0018cd4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018ccb:	b8 01 00 00 00       	mov    eax,0x1
c0018cd0:	eb 0a                	jmp    c0018cdc <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018cd2:	66 90                	xchg   ax,ax
c0018cd4:	b8 00 00 00 00       	mov    eax,0x0
c0018cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0018cdc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018ce2:	c3                   	ret    
c0018ce3:	90                   	nop

c0018ce4 <FAT::openDir(char const*, void**)>:
c0018ce4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018cea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018cf2:	74 0c                	je     c0018d00 <FAT::openDir(char const*, void**)+0x1c>
c0018cf4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018cfc:	75 0e                	jne    c0018d0c <FAT::openDir(char const*, void**)+0x28>
c0018cfe:	66 90                	xchg   ax,ax
c0018d00:	b8 04 00 00 00       	mov    eax,0x4
c0018d05:	e9 82 00 00 00       	jmp    c0018d8c <FAT::openDir(char const*, void**)+0xa8>
c0018d0a:	66 90                	xchg   ax,ax
c0018d0c:	83 ec 08             	sub    esp,0x8
c0018d0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d16:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d1a:	50                   	push   eax
c0018d1b:	e8 30 79 fe ff       	call   c0000650 <strcpy>
c0018d20:	83 c4 10             	add    esp,0x10
c0018d23:	83 ec 08             	sub    esp,0x8
c0018d26:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018d2a:	50                   	push   eax
c0018d2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d32:	e8 f9 fd ff ff       	call   c0018b30 <FAT::fixFilepath(char*)>
c0018d37:	83 c4 10             	add    esp,0x10
c0018d3a:	83 ec 0c             	sub    esp,0xc
c0018d3d:	6a 30                	push   0x30
c0018d3f:	e8 87 ed fe ff       	call   c0007acb <malloc>
c0018d44:	83 c4 10             	add    esp,0x10
c0018d47:	89 c2                	mov    edx,eax
c0018d49:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d50:	89 10                	mov    DWORD PTR [eax],edx
c0018d52:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d5b:	83 ec 08             	sub    esp,0x8
c0018d5e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018d62:	52                   	push   edx
c0018d63:	50                   	push   eax
c0018d64:	e8 c6 b8 fe ff       	call   c000462f <f_opendir>
c0018d69:	83 c4 10             	add    esp,0x10
c0018d6c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018d73:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018d7b:	74 07                	je     c0018d84 <FAT::openDir(char const*, void**)+0xa0>
c0018d7d:	b8 01 00 00 00       	mov    eax,0x1
c0018d82:	eb 08                	jmp    c0018d8c <FAT::openDir(char const*, void**)+0xa8>
c0018d84:	b8 00 00 00 00       	mov    eax,0x0
c0018d89:	8d 76 00             	lea    esi,[esi+0x0]
c0018d8c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d92:	c3                   	ret    
c0018d93:	90                   	nop

c0018d94 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018d94:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018d9a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018da2:	75 0c                	jne    c0018db0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018da4:	b8 04 00 00 00       	mov    eax,0x4
c0018da9:	e9 d6 00 00 00       	jmp    c0018e84 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018dae:	66 90                	xchg   ax,ax
c0018db0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018db8:	75 0a                	jne    c0018dc4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018dba:	b8 04 00 00 00       	mov    eax,0x4
c0018dbf:	e9 c0 00 00 00       	jmp    c0018e84 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018dc4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018dcc:	75 0a                	jne    c0018dd8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018dce:	b8 04 00 00 00       	mov    eax,0x4
c0018dd3:	e9 ac 00 00 00       	jmp    c0018e84 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018dd8:	83 ec 08             	sub    esp,0x8
c0018ddb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018de2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018de9:	50                   	push   eax
c0018dea:	e8 61 78 fe ff       	call   c0000650 <strcpy>
c0018def:	83 c4 10             	add    esp,0x10
c0018df2:	83 ec 08             	sub    esp,0x8
c0018df5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018dfc:	50                   	push   eax
c0018dfd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018e04:	e8 27 fd ff ff       	call   c0018b30 <FAT::fixFilepath(char*)>
c0018e09:	83 c4 10             	add    esp,0x10
c0018e0c:	83 ec 08             	sub    esp,0x8
c0018e0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e13:	50                   	push   eax
c0018e14:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018e1b:	50                   	push   eax
c0018e1c:	e8 8d b9 fe ff       	call   c00047ae <f_stat>
c0018e21:	83 c4 10             	add    esp,0x10
c0018e24:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018e2b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018e32:	85 c0                	test   eax,eax
c0018e34:	74 0a                	je     c0018e40 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018e36:	83 f8 04             	cmp    eax,0x4
c0018e39:	74 39                	je     c0018e74 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018e3b:	eb 3f                	jmp    c0018e7c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e40:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018e44:	0f b6 c0             	movzx  eax,al
c0018e47:	83 e0 10             	and    eax,0x10
c0018e4a:	0f 95 c2             	setne  dl
c0018e4d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018e54:	88 10                	mov    BYTE PTR [eax],dl
c0018e56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e5a:	ba 00 00 00 00       	mov    edx,0x0
c0018e5f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018e66:	89 01                	mov    DWORD PTR [ecx],eax
c0018e68:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e6b:	b8 00 00 00 00       	mov    eax,0x0
c0018e70:	eb 12                	jmp    c0018e84 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e72:	66 90                	xchg   ax,ax
c0018e74:	b8 02 00 00 00       	mov    eax,0x2
c0018e79:	eb 09                	jmp    c0018e84 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e7b:	90                   	nop
c0018e7c:	b8 01 00 00 00       	mov    eax,0x1
c0018e81:	8d 76 00             	lea    esi,[esi+0x0]
c0018e84:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018e8a:	c3                   	ret    
c0018e8b:	90                   	nop

c0018e8c <FAT::unlink(char const*)>:
c0018e8c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e92:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018e9a:	75 08                	jne    c0018ea4 <FAT::unlink(char const*)+0x18>
c0018e9c:	b8 04 00 00 00       	mov    eax,0x4
c0018ea1:	eb 61                	jmp    c0018f04 <FAT::unlink(char const*)+0x78>
c0018ea3:	90                   	nop
c0018ea4:	83 ec 08             	sub    esp,0x8
c0018ea7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018eae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018eb2:	50                   	push   eax
c0018eb3:	e8 98 77 fe ff       	call   c0000650 <strcpy>
c0018eb8:	83 c4 10             	add    esp,0x10
c0018ebb:	83 ec 08             	sub    esp,0x8
c0018ebe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ec2:	50                   	push   eax
c0018ec3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018eca:	e8 61 fc ff ff       	call   c0018b30 <FAT::fixFilepath(char*)>
c0018ecf:	83 c4 10             	add    esp,0x10
c0018ed2:	83 ec 0c             	sub    esp,0xc
c0018ed5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ed9:	50                   	push   eax
c0018eda:	e8 41 bb fe ff       	call   c0004a20 <f_unlink>
c0018edf:	83 c4 10             	add    esp,0x10
c0018ee2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018ee9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018ef0:	85 c0                	test   eax,eax
c0018ef2:	75 08                	jne    c0018efc <FAT::unlink(char const*)+0x70>
c0018ef4:	b8 00 00 00 00       	mov    eax,0x0
c0018ef9:	eb 09                	jmp    c0018f04 <FAT::unlink(char const*)+0x78>
c0018efb:	90                   	nop
c0018efc:	b8 01 00 00 00       	mov    eax,0x1
c0018f01:	8d 76 00             	lea    esi,[esi+0x0]
c0018f04:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018f0a:	c3                   	ret    
c0018f0b:	90                   	nop

c0018f0c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018f0c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018f12:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018f19:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0018f20:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f24:	88 d0                	mov    al,dl
c0018f26:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018f2a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018f32:	75 0c                	jne    c0018f40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0018f34:	b8 04 00 00 00       	mov    eax,0x4
c0018f39:	e9 7e 01 00 00       	jmp    c00190bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0018f3e:	66 90                	xchg   ax,ax
c0018f40:	83 ec 08             	sub    esp,0x8
c0018f43:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f4a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f4e:	50                   	push   eax
c0018f4f:	e8 fc 76 fe ff       	call   c0000650 <strcpy>
c0018f54:	83 c4 10             	add    esp,0x10
c0018f57:	83 ec 08             	sub    esp,0x8
c0018f5a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018f5e:	50                   	push   eax
c0018f5f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f66:	e8 c5 fb ff ff       	call   c0018b30 <FAT::fixFilepath(char*)>
c0018f6b:	83 c4 10             	add    esp,0x10
c0018f6e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018f76:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018f7e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f83:	83 e0 01             	and    eax,0x1
c0018f86:	74 14                	je     c0018f9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0018f88:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f8f:	83 c8 01             	or     eax,0x1
c0018f92:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f99:	8d 76 00             	lea    esi,[esi+0x0]
c0018f9c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fa1:	83 e0 02             	and    eax,0x2
c0018fa4:	74 12                	je     c0018fb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0018fa6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fad:	83 c8 20             	or     eax,0x20
c0018fb0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fb7:	90                   	nop
c0018fb8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fbd:	83 e0 04             	and    eax,0x4
c0018fc0:	74 12                	je     c0018fd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0018fc2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fc9:	83 c8 04             	or     eax,0x4
c0018fcc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fd3:	90                   	nop
c0018fd4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fd9:	83 e0 08             	and    eax,0x8
c0018fdc:	74 12                	je     c0018ff0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0018fde:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fe5:	83 c8 02             	or     eax,0x2
c0018fe8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fef:	90                   	nop
c0018ff0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ff5:	83 e0 01             	and    eax,0x1
c0018ff8:	74 12                	je     c001900c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0018ffa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019001:	83 c8 01             	or     eax,0x1
c0019004:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001900b:	90                   	nop
c001900c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019011:	83 e0 02             	and    eax,0x2
c0019014:	74 12                	je     c0019028 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019016:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001901d:	83 c8 20             	or     eax,0x20
c0019020:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019027:	90                   	nop
c0019028:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001902d:	83 e0 04             	and    eax,0x4
c0019030:	74 12                	je     c0019044 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019032:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019039:	83 c8 04             	or     eax,0x4
c001903c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019043:	90                   	nop
c0019044:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019049:	83 e0 08             	and    eax,0x8
c001904c:	74 12                	je     c0019060 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001904e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019055:	83 c8 02             	or     eax,0x2
c0019058:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001905f:	90                   	nop
c0019060:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019067:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001906e:	09 d0                	or     eax,edx
c0019070:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019077:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001907f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019087:	83 ec 04             	sub    esp,0x4
c001908a:	52                   	push   edx
c001908b:	50                   	push   eax
c001908c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019090:	50                   	push   eax
c0019091:	e8 fd bd fe ff       	call   c0004e93 <f_chmod>
c0019096:	83 c4 10             	add    esp,0x10
c0019099:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00190a0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00190a7:	85 c0                	test   eax,eax
c00190a9:	75 09                	jne    c00190b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c00190ab:	b8 00 00 00 00       	mov    eax,0x0
c00190b0:	eb 0a                	jmp    c00190bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c00190b2:	66 90                	xchg   ax,ax
c00190b4:	b8 01 00 00 00       	mov    eax,0x1
c00190b9:	8d 76 00             	lea    esi,[esi+0x0]
c00190bc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00190c2:	c3                   	ret    
c00190c3:	90                   	nop

c00190c4 <FAT::rename(char const*, char const*)>:
c00190c4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00190ca:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00190d2:	74 0c                	je     c00190e0 <FAT::rename(char const*, char const*)+0x1c>
c00190d4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00190dc:	75 0e                	jne    c00190ec <FAT::rename(char const*, char const*)+0x28>
c00190de:	66 90                	xchg   ax,ax
c00190e0:	b8 04 00 00 00       	mov    eax,0x4
c00190e5:	e9 9e 00 00 00       	jmp    c0019188 <FAT::rename(char const*, char const*)+0xc4>
c00190ea:	66 90                	xchg   ax,ax
c00190ec:	83 ec 08             	sub    esp,0x8
c00190ef:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190f6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00190fd:	50                   	push   eax
c00190fe:	e8 4d 75 fe ff       	call   c0000650 <strcpy>
c0019103:	83 c4 10             	add    esp,0x10
c0019106:	83 ec 08             	sub    esp,0x8
c0019109:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019110:	50                   	push   eax
c0019111:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019118:	e8 13 fa ff ff       	call   c0018b30 <FAT::fixFilepath(char*)>
c001911d:	83 c4 10             	add    esp,0x10
c0019120:	83 ec 08             	sub    esp,0x8
c0019123:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001912a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001912e:	50                   	push   eax
c001912f:	e8 1c 75 fe ff       	call   c0000650 <strcpy>
c0019134:	83 c4 10             	add    esp,0x10
c0019137:	83 ec 08             	sub    esp,0x8
c001913a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001913e:	50                   	push   eax
c001913f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019146:	e8 e5 f9 ff ff       	call   c0018b30 <FAT::fixFilepath(char*)>
c001914b:	83 c4 10             	add    esp,0x10
c001914e:	83 ec 08             	sub    esp,0x8
c0019151:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019155:	50                   	push   eax
c0019156:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001915d:	50                   	push   eax
c001915e:	e8 78 bb fe ff       	call   c0004cdb <f_rename>
c0019163:	83 c4 10             	add    esp,0x10
c0019166:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001916d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019174:	85 c0                	test   eax,eax
c0019176:	75 08                	jne    c0019180 <FAT::rename(char const*, char const*)+0xbc>
c0019178:	b8 00 00 00 00       	mov    eax,0x0
c001917d:	eb 09                	jmp    c0019188 <FAT::rename(char const*, char const*)+0xc4>
c001917f:	90                   	nop
c0019180:	b8 01 00 00 00       	mov    eax,0x1
c0019185:	8d 76 00             	lea    esi,[esi+0x0]
c0019188:	81 c4 1c 02 00 00    	add    esp,0x21c
c001918e:	c3                   	ret    
c001918f:	90                   	nop

c0019190 <FAT::mkdir(char const*)>:
c0019190:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019196:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001919e:	75 08                	jne    c00191a8 <FAT::mkdir(char const*)+0x18>
c00191a0:	b8 04 00 00 00       	mov    eax,0x4
c00191a5:	eb 61                	jmp    c0019208 <FAT::mkdir(char const*)+0x78>
c00191a7:	90                   	nop
c00191a8:	83 ec 08             	sub    esp,0x8
c00191ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00191b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191b6:	50                   	push   eax
c00191b7:	e8 94 74 fe ff       	call   c0000650 <strcpy>
c00191bc:	83 c4 10             	add    esp,0x10
c00191bf:	83 ec 08             	sub    esp,0x8
c00191c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191c6:	50                   	push   eax
c00191c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00191ce:	e8 5d f9 ff ff       	call   c0018b30 <FAT::fixFilepath(char*)>
c00191d3:	83 c4 10             	add    esp,0x10
c00191d6:	83 ec 0c             	sub    esp,0xc
c00191d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191dd:	50                   	push   eax
c00191de:	e8 5d b9 fe ff       	call   c0004b40 <f_mkdir>
c00191e3:	83 c4 10             	add    esp,0x10
c00191e6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00191ed:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00191f4:	85 c0                	test   eax,eax
c00191f6:	75 08                	jne    c0019200 <FAT::mkdir(char const*)+0x70>
c00191f8:	b8 00 00 00 00       	mov    eax,0x0
c00191fd:	eb 09                	jmp    c0019208 <FAT::mkdir(char const*)+0x78>
c00191ff:	90                   	nop
c0019200:	b8 01 00 00 00       	mov    eax,0x1
c0019205:	8d 76 00             	lea    esi,[esi+0x0]
c0019208:	81 c4 1c 01 00 00    	add    esp,0x11c
c001920e:	c3                   	ret    
c001920f:	90                   	nop

c0019210 <FAT::exists(char const*)>:
c0019210:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019216:	83 ec 08             	sub    esp,0x8
c0019219:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019220:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019224:	50                   	push   eax
c0019225:	e8 26 74 fe ff       	call   c0000650 <strcpy>
c001922a:	83 c4 10             	add    esp,0x10
c001922d:	83 ec 08             	sub    esp,0x8
c0019230:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019234:	50                   	push   eax
c0019235:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001923c:	e8 ef f8 ff ff       	call   c0018b30 <FAT::fixFilepath(char*)>
c0019241:	83 c4 10             	add    esp,0x10
c0019244:	83 ec 08             	sub    esp,0x8
c0019247:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001924e:	50                   	push   eax
c001924f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019253:	50                   	push   eax
c0019254:	e8 55 b5 fe ff       	call   c00047ae <f_stat>
c0019259:	83 c4 10             	add    esp,0x10
c001925c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019263:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001926a:	85 c0                	test   eax,eax
c001926c:	75 06                	jne    c0019274 <FAT::exists(char const*)+0x64>
c001926e:	b0 01                	mov    al,0x1
c0019270:	eb 06                	jmp    c0019278 <FAT::exists(char const*)+0x68>
c0019272:	66 90                	xchg   ax,ax
c0019274:	b0 00                	mov    al,0x0
c0019276:	66 90                	xchg   ax,ax
c0019278:	81 c4 2c 02 00 00    	add    esp,0x22c
c001927e:	c3                   	ret    
c001927f:	90                   	nop

c0019280 <isoReadDiscSectorHelper>:
c0019280:	83 ec 2c             	sub    esp,0x2c
c0019283:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019287:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001928b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019290:	83 e8 41             	sub    eax,0x41
c0019293:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001929a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001929e:	ba 00 00 00 00       	mov    edx,0x0
c00192a3:	83 ec 0c             	sub    esp,0xc
c00192a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00192aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192ae:	52                   	push   edx
c00192af:	50                   	push   eax
c00192b0:	51                   	push   ecx
c00192b1:	e8 18 3f ff ff       	call   c000d1ce <LogicalDisk::read(unsigned long long, int, void*)>
c00192b6:	83 c4 20             	add    esp,0x20
c00192b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00192bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00192c2:	74 0c                	je     c00192d0 <isoReadDiscSectorHelper+0x50>
c00192c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192c8:	c1 e0 0b             	shl    eax,0xb
c00192cb:	eb 0b                	jmp    c00192d8 <isoReadDiscSectorHelper+0x58>
c00192cd:	8d 76 00             	lea    esi,[esi+0x0]
c00192d0:	b8 00 00 00 00       	mov    eax,0x0
c00192d5:	8d 76 00             	lea    esi,[esi+0x0]
c00192d8:	83 c4 2c             	add    esp,0x2c
c00192db:	c3                   	ret    

c00192dc <iso_kprintf>:
c00192dc:	83 ec 0c             	sub    esp,0xc
c00192df:	83 ec 08             	sub    esp,0x8
c00192e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192e6:	68 11 11 02 c0       	push   0xc0021111
c00192eb:	e8 93 16 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00192f0:	83 c4 10             	add    esp,0x10
c00192f3:	90                   	nop
c00192f4:	83 c4 0c             	add    esp,0xc
c00192f7:	c3                   	ret    

c00192f8 <iso_kprintfd>:
c00192f8:	83 ec 0c             	sub    esp,0xc
c00192fb:	83 ec 08             	sub    esp,0x8
c00192fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019302:	68 fe 00 02 c0       	push   0xc00200fe
c0019307:	e8 77 16 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001930c:	83 c4 10             	add    esp,0x10
c001930f:	90                   	nop
c0019310:	83 c4 0c             	add    esp,0xc
c0019313:	c3                   	ret    

c0019314 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019314:	b8 08 00 00 00       	mov    eax,0x8
c0019319:	c3                   	ret    

c001931a <ISO9660::getName()>:
c001931a:	b8 68 17 02 c0       	mov    eax,0xc0021768
c001931f:	c3                   	ret    

c0019320 <ISO9660::closeDir(void*)>:
c0019320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019324:	8b 00                	mov    eax,DWORD PTR [eax]
c0019326:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019329:	90                   	nop

c001932a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001932a:	b8 01 00 00 00       	mov    eax,0x1
c001932f:	c3                   	ret    

c0019330 <ISO9660::unlink(char const*)>:
c0019330:	b8 01 00 00 00       	mov    eax,0x1
c0019335:	c3                   	ret    

c0019336 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019336:	b8 03 00 00 00       	mov    eax,0x3
c001933b:	c3                   	ret    

c001933c <ISO9660::rename(char const*, char const*)>:
c001933c:	b8 01 00 00 00       	mov    eax,0x1
c0019341:	c3                   	ret    

c0019342 <ISO9660::mkdir(char const*)>:
c0019342:	b8 01 00 00 00       	mov    eax,0x1
c0019347:	c3                   	ret    

c0019348 <ISO9660::~ISO9660()>:
c0019348:	83 ec 0c             	sub    esp,0xc
c001934b:	ba a8 18 02 c0       	mov    edx,0xc00218a8
c0019350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019354:	89 10                	mov    DWORD PTR [eax],edx
c0019356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001935a:	83 ec 0c             	sub    esp,0xc
c001935d:	50                   	push   eax
c001935e:	e8 67 19 ff ff       	call   c000acca <Filesystem::~Filesystem()>
c0019363:	83 c4 10             	add    esp,0x10
c0019366:	90                   	nop
c0019367:	83 c4 0c             	add    esp,0xc
c001936a:	c3                   	ret    
c001936b:	90                   	nop

c001936c <ISO9660::~ISO9660()>:
c001936c:	83 ec 0c             	sub    esp,0xc
c001936f:	83 ec 0c             	sub    esp,0xc
c0019372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019376:	e8 cd ff ff ff       	call   c0019348 <ISO9660::~ISO9660()>
c001937b:	83 c4 10             	add    esp,0x10
c001937e:	83 ec 08             	sub    esp,0x8
c0019381:	6a 08                	push   0x8
c0019383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019387:	e8 f9 14 ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001938c:	83 c4 10             	add    esp,0x10
c001938f:	83 c4 0c             	add    esp,0xc
c0019392:	c3                   	ret    
c0019393:	90                   	nop

c0019394 <ISO9660::exists(char const*)>:
c0019394:	83 ec 18             	sub    esp,0x18
c0019397:	68 83 17 02 c0       	push   0xc0021783
c001939c:	e8 ac 74 ff ff       	call   c001084d <KePanic(char const*)>
c00193a1:	31 c0                	xor    eax,eax
c00193a3:	83 c4 1c             	add    esp,0x1c
c00193a6:	c3                   	ret    
c00193a7:	90                   	nop

c00193a8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00193a8:	56                   	push   esi
c00193a9:	53                   	push   ebx
c00193aa:	53                   	push   ebx
c00193ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00193af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00193b3:	85 db                	test   ebx,ebx
c00193b5:	0f 84 ca 00 00 00    	je     c0019485 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00193bb:	85 f6                	test   esi,esi
c00193bd:	0f 84 c2 00 00 00    	je     c0019485 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00193c3:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00193c8:	b8 03 00 00 00       	mov    eax,0x3
c00193cd:	0f 85 b7 00 00 00    	jne    c001948a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00193d3:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00193d5:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00193db:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00193e2:	74 1b                	je     c00193ff <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00193e4:	85 c0                	test   eax,eax
c00193e6:	74 10                	je     c00193f8 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c00193e8:	83 ec 0c             	sub    esp,0xc
c00193eb:	68 a1 17 02 c0       	push   0xc00217a1
c00193f0:	e8 58 74 ff ff       	call   c001084d <KePanic(char const*)>
c00193f5:	83 c4 10             	add    esp,0x10
c00193f8:	8a 03                	mov    al,BYTE PTR [ebx]
c00193fa:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00193ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019402:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019409:	85 c0                	test   eax,eax
c001940b:	74 09                	je     c0019416 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001940d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019414:	74 48                	je     c001945e <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019416:	83 ec 0c             	sub    esp,0xc
c0019419:	68 b1 17 02 c0       	push   0xc00217b1
c001941e:	e8 60 15 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0019423:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019426:	83 c4 10             	add    esp,0x10
c0019429:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019430:	85 c0                	test   eax,eax
c0019432:	74 17                	je     c001944b <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019434:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001943b:	83 ec 0c             	sub    esp,0xc
c001943e:	68 d1 17 02 c0       	push   0xc00217d1
c0019443:	e8 3b 15 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0019448:	83 c4 10             	add    esp,0x10
c001944b:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019452:	83 ec 0c             	sub    esp,0xc
c0019455:	50                   	push   eax
c0019456:	e8 0c d6 fe ff       	call   c0006a67 <init_percd>
c001945b:	83 c4 10             	add    esp,0x10
c001945e:	51                   	push   ecx
c001945f:	83 c3 03             	add    ebx,0x3
c0019462:	51                   	push   ecx
c0019463:	6a 00                	push   0x0
c0019465:	53                   	push   ebx
c0019466:	e8 bf d0 fe ff       	call   c000652a <iso_open>
c001946b:	83 c4 10             	add    esp,0x10
c001946e:	89 c2                	mov    edx,eax
c0019470:	b8 01 00 00 00       	mov    eax,0x1
c0019475:	83 fa ff             	cmp    edx,0xffffffff
c0019478:	74 10                	je     c001948a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001947a:	83 c2 32             	add    edx,0x32
c001947d:	31 c0                	xor    eax,eax
c001947f:	01 d2                	add    edx,edx
c0019481:	89 16                	mov    DWORD PTR [esi],edx
c0019483:	eb 05                	jmp    c001948a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019485:	b8 04 00 00 00       	mov    eax,0x4
c001948a:	5a                   	pop    edx
c001948b:	5b                   	pop    ebx
c001948c:	5e                   	pop    esi
c001948d:	c3                   	ret    

c001948e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001948e:	53                   	push   ebx
c001948f:	83 ec 08             	sub    esp,0x8
c0019492:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019496:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001949a:	85 c0                	test   eax,eax
c001949c:	74 2d                	je     c00194cb <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001949e:	85 db                	test   ebx,ebx
c00194a0:	74 29                	je     c00194cb <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00194a2:	52                   	push   edx
c00194a3:	b9 02 00 00 00       	mov    ecx,0x2
c00194a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194ac:	99                   	cdq    
c00194ad:	f7 f9                	idiv   ecx
c00194af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194b3:	83 e8 32             	sub    eax,0x32
c00194b6:	50                   	push   eax
c00194b7:	e8 16 d1 fe ff       	call   c00065d2 <iso_read>
c00194bc:	83 c4 10             	add    esp,0x10
c00194bf:	89 03                	mov    DWORD PTR [ebx],eax
c00194c1:	09 d0                	or     eax,edx
c00194c3:	0f 94 c0             	sete   al
c00194c6:	0f b6 c0             	movzx  eax,al
c00194c9:	eb 05                	jmp    c00194d0 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00194cb:	b8 04 00 00 00       	mov    eax,0x4
c00194d0:	83 c4 08             	add    esp,0x8
c00194d3:	5b                   	pop    ebx
c00194d4:	c3                   	ret    
c00194d5:	90                   	nop

c00194d6 <ISO9660::seek(void*, unsigned long long)>:
c00194d6:	57                   	push   edi
c00194d7:	b8 04 00 00 00       	mov    eax,0x4
c00194dc:	56                   	push   esi
c00194dd:	51                   	push   ecx
c00194de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194e2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00194e6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00194ea:	85 d2                	test   edx,edx
c00194ec:	74 26                	je     c0019514 <ISO9660::seek(void*, unsigned long long)+0x3e>
c00194ee:	89 d0                	mov    eax,edx
c00194f0:	b9 02 00 00 00       	mov    ecx,0x2
c00194f5:	6a 00                	push   0x0
c00194f7:	99                   	cdq    
c00194f8:	f7 f9                	idiv   ecx
c00194fa:	57                   	push   edi
c00194fb:	56                   	push   esi
c00194fc:	83 e8 32             	sub    eax,0x32
c00194ff:	50                   	push   eax
c0019500:	e8 e3 d1 fe ff       	call   c00066e8 <iso_seek>
c0019505:	83 c4 10             	add    esp,0x10
c0019508:	31 f0                	xor    eax,esi
c001950a:	31 fa                	xor    edx,edi
c001950c:	09 d0                	or     eax,edx
c001950e:	0f 95 c0             	setne  al
c0019511:	0f b6 c0             	movzx  eax,al
c0019514:	5a                   	pop    edx
c0019515:	5e                   	pop    esi
c0019516:	5f                   	pop    edi
c0019517:	c3                   	ret    

c0019518 <ISO9660::tell(void*, unsigned long long*)>:
c0019518:	53                   	push   ebx
c0019519:	83 ec 08             	sub    esp,0x8
c001951c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019520:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019524:	85 c0                	test   eax,eax
c0019526:	74 24                	je     c001954c <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019528:	85 db                	test   ebx,ebx
c001952a:	74 20                	je     c001954c <ISO9660::tell(void*, unsigned long long*)+0x34>
c001952c:	b9 02 00 00 00       	mov    ecx,0x2
c0019531:	99                   	cdq    
c0019532:	f7 f9                	idiv   ecx
c0019534:	83 ec 0c             	sub    esp,0xc
c0019537:	83 e8 32             	sub    eax,0x32
c001953a:	50                   	push   eax
c001953b:	e8 2c d2 fe ff       	call   c000676c <iso_tell>
c0019540:	83 c4 10             	add    esp,0x10
c0019543:	89 03                	mov    DWORD PTR [ebx],eax
c0019545:	31 c0                	xor    eax,eax
c0019547:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001954a:	eb 05                	jmp    c0019551 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001954c:	b8 04 00 00 00       	mov    eax,0x4
c0019551:	83 c4 08             	add    esp,0x8
c0019554:	5b                   	pop    ebx
c0019555:	c3                   	ret    

c0019556 <ISO9660::stat(void*, unsigned long long*)>:
c0019556:	56                   	push   esi
c0019557:	53                   	push   ebx
c0019558:	83 ec 10             	sub    esp,0x10
c001955b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001955f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019563:	68 f5 17 02 c0       	push   0xc00217f5
c0019568:	e8 16 14 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001956d:	83 c4 10             	add    esp,0x10
c0019570:	85 db                	test   ebx,ebx
c0019572:	74 2a                	je     c001959e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019574:	85 f6                	test   esi,esi
c0019576:	74 26                	je     c001959e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019578:	89 d8                	mov    eax,ebx
c001957a:	b9 02 00 00 00       	mov    ecx,0x2
c001957f:	99                   	cdq    
c0019580:	83 ec 0c             	sub    esp,0xc
c0019583:	f7 f9                	idiv   ecx
c0019585:	83 e8 32             	sub    eax,0x32
c0019588:	50                   	push   eax
c0019589:	e8 0f d2 fe ff       	call   c000679d <iso_total>
c001958e:	83 c4 10             	add    esp,0x10
c0019591:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019598:	89 06                	mov    DWORD PTR [esi],eax
c001959a:	31 c0                	xor    eax,eax
c001959c:	eb 05                	jmp    c00195a3 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001959e:	b8 04 00 00 00       	mov    eax,0x4
c00195a3:	5a                   	pop    edx
c00195a4:	5b                   	pop    ebx
c00195a5:	5e                   	pop    esi
c00195a6:	c3                   	ret    
c00195a7:	90                   	nop

c00195a8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00195a8:	55                   	push   ebp
c00195a9:	57                   	push   edi
c00195aa:	56                   	push   esi
c00195ab:	53                   	push   ebx
c00195ac:	83 ec 18             	sub    esp,0x18
c00195af:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00195b3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00195b7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00195bb:	68 fd 17 02 c0       	push   0xc00217fd
c00195c0:	e8 be 13 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c00195c5:	83 c4 10             	add    esp,0x10
c00195c8:	85 ff                	test   edi,edi
c00195ca:	0f 94 c0             	sete   al
c00195cd:	85 f6                	test   esi,esi
c00195cf:	0f 94 c2             	sete   dl
c00195d2:	09 d0                	or     eax,edx
c00195d4:	a8 01                	test   al,0x1
c00195d6:	0f 85 dd 00 00 00    	jne    c00196b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00195dc:	85 db                	test   ebx,ebx
c00195de:	0f 84 d5 00 00 00    	je     c00196b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00195e4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00195e7:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00195ed:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00195f4:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00195fb:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00195fd:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019603:	74 1b                	je     c0019620 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0019605:	85 c0                	test   eax,eax
c0019607:	74 10                	je     c0019619 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019609:	83 ec 0c             	sub    esp,0xc
c001960c:	68 a1 17 02 c0       	push   0xc00217a1
c0019611:	e8 37 72 ff ff       	call   c001084d <KePanic(char const*)>
c0019616:	83 c4 10             	add    esp,0x10
c0019619:	8a 03                	mov    al,BYTE PTR [ebx]
c001961b:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019620:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019623:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001962a:	85 c0                	test   eax,eax
c001962c:	74 09                	je     c0019637 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001962e:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019635:	74 51                	je     c0019688 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019637:	83 ec 0c             	sub    esp,0xc
c001963a:	68 05 18 02 c0       	push   0xc0021805
c001963f:	e8 3f 13 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0019644:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019647:	83 c4 10             	add    esp,0x10
c001964a:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c0019652:	74 21                	je     c0019675 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0019654:	83 ec 0c             	sub    esp,0xc
c0019657:	68 25 18 02 c0       	push   0xc0021825
c001965c:	e8 22 13 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0019661:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019664:	83 c4 10             	add    esp,0x10
c0019667:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001966e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019675:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001967c:	83 ec 0c             	sub    esp,0xc
c001967f:	50                   	push   eax
c0019680:	e8 e2 d3 fe ff       	call   c0006a67 <init_percd>
c0019685:	83 c4 10             	add    esp,0x10
c0019688:	52                   	push   edx
c0019689:	83 c3 03             	add    ebx,0x3
c001968c:	52                   	push   edx
c001968d:	6a 00                	push   0x0
c001968f:	53                   	push   ebx
c0019690:	e8 95 ce fe ff       	call   c000652a <iso_open>
c0019695:	83 c4 10             	add    esp,0x10
c0019698:	83 f8 ff             	cmp    eax,0xffffffff
c001969b:	89 c5                	mov    ebp,eax
c001969d:	75 21                	jne    c00196c0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001969f:	50                   	push   eax
c00196a0:	50                   	push   eax
c00196a1:	6a 01                	push   0x1
c00196a3:	53                   	push   ebx
c00196a4:	e8 81 ce fe ff       	call   c000652a <iso_open>
c00196a9:	83 c4 10             	add    esp,0x10
c00196ac:	ba 02 00 00 00       	mov    edx,0x2
c00196b1:	40                   	inc    eax
c00196b2:	74 2b                	je     c00196df <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00196b4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00196b7:	eb 24                	jmp    c00196dd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c00196b9:	ba 04 00 00 00       	mov    edx,0x4
c00196be:	eb 1f                	jmp    c00196df <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00196c0:	83 ec 0c             	sub    esp,0xc
c00196c3:	50                   	push   eax
c00196c4:	e8 d4 d0 fe ff       	call   c000679d <iso_total>
c00196c9:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00196d0:	89 07                	mov    DWORD PTR [edi],eax
c00196d2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00196d5:	e8 da ce fe ff       	call   c00065b4 <iso_close>
c00196da:	83 c4 10             	add    esp,0x10
c00196dd:	31 d2                	xor    edx,edx
c00196df:	83 c4 0c             	add    esp,0xc
c00196e2:	89 d0                	mov    eax,edx
c00196e4:	5b                   	pop    ebx
c00196e5:	5e                   	pop    esi
c00196e6:	5f                   	pop    edi
c00196e7:	5d                   	pop    ebp
c00196e8:	c3                   	ret    
c00196e9:	90                   	nop

c00196ea <ISO9660::close(void*)>:
c00196ea:	83 ec 0c             	sub    esp,0xc
c00196ed:	b8 04 00 00 00       	mov    eax,0x4
c00196f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196f6:	85 d2                	test   edx,edx
c00196f8:	74 1b                	je     c0019715 <ISO9660::close(void*)+0x2b>
c00196fa:	89 d0                	mov    eax,edx
c00196fc:	b9 02 00 00 00       	mov    ecx,0x2
c0019701:	99                   	cdq    
c0019702:	83 ec 0c             	sub    esp,0xc
c0019705:	f7 f9                	idiv   ecx
c0019707:	83 e8 32             	sub    eax,0x32
c001970a:	50                   	push   eax
c001970b:	e8 a4 ce fe ff       	call   c00065b4 <iso_close>
c0019710:	83 c4 10             	add    esp,0x10
c0019713:	31 c0                	xor    eax,eax
c0019715:	83 c4 0c             	add    esp,0xc
c0019718:	c3                   	ret    
c0019719:	90                   	nop

c001971a <ISO9660::openDir(char const*, void**)>:
c001971a:	56                   	push   esi
c001971b:	53                   	push   ebx
c001971c:	50                   	push   eax
c001971d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019721:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019725:	85 db                	test   ebx,ebx
c0019727:	0f 84 bd 00 00 00    	je     c00197ea <ISO9660::openDir(char const*, void**)+0xd0>
c001972d:	85 f6                	test   esi,esi
c001972f:	0f 84 b5 00 00 00    	je     c00197ea <ISO9660::openDir(char const*, void**)+0xd0>
c0019735:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019737:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c001973d:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019744:	74 1b                	je     c0019761 <ISO9660::openDir(char const*, void**)+0x47>
c0019746:	85 c0                	test   eax,eax
c0019748:	74 10                	je     c001975a <ISO9660::openDir(char const*, void**)+0x40>
c001974a:	83 ec 0c             	sub    esp,0xc
c001974d:	68 a1 17 02 c0       	push   0xc00217a1
c0019752:	e8 f6 70 ff ff       	call   c001084d <KePanic(char const*)>
c0019757:	83 c4 10             	add    esp,0x10
c001975a:	8a 03                	mov    al,BYTE PTR [ebx]
c001975c:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019761:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019764:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001976b:	85 c0                	test   eax,eax
c001976d:	74 10                	je     c001977f <ISO9660::openDir(char const*, void**)+0x65>
c001976f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019776:	74 1a                	je     c0019792 <ISO9660::openDir(char const*, void**)+0x78>
c0019778:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001977f:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019786:	83 ec 0c             	sub    esp,0xc
c0019789:	50                   	push   eax
c001978a:	e8 d8 d2 fe ff       	call   c0006a67 <init_percd>
c001978f:	83 c4 10             	add    esp,0x10
c0019792:	50                   	push   eax
c0019793:	83 c3 03             	add    ebx,0x3
c0019796:	50                   	push   eax
c0019797:	6a 01                	push   0x1
c0019799:	53                   	push   ebx
c001979a:	e8 8b cd fe ff       	call   c000652a <iso_open>
c001979f:	83 c4 10             	add    esp,0x10
c00197a2:	83 f8 ff             	cmp    eax,0xffffffff
c00197a5:	89 c3                	mov    ebx,eax
c00197a7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00197ac:	75 1c                	jne    c00197ca <ISO9660::openDir(char const*, void**)+0xb0>
c00197ae:	53                   	push   ebx
c00197af:	53                   	push   ebx
c00197b0:	68 49 18 02 c0       	push   0xc0021849
c00197b5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197bb:	e8 d6 f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c00197c0:	83 c4 10             	add    esp,0x10
c00197c3:	b8 01 00 00 00       	mov    eax,0x1
c00197c8:	eb 25                	jmp    c00197ef <ISO9660::openDir(char const*, void**)+0xd5>
c00197ca:	51                   	push   ecx
c00197cb:	01 db                	add    ebx,ebx
c00197cd:	51                   	push   ecx
c00197ce:	83 c3 65             	add    ebx,0x65
c00197d1:	68 5c 18 02 c0       	push   0xc002185c
c00197d6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197dc:	e8 b5 f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c00197e1:	83 c4 10             	add    esp,0x10
c00197e4:	31 c0                	xor    eax,eax
c00197e6:	89 1e                	mov    DWORD PTR [esi],ebx
c00197e8:	eb 05                	jmp    c00197ef <ISO9660::openDir(char const*, void**)+0xd5>
c00197ea:	b8 04 00 00 00       	mov    eax,0x4
c00197ef:	5a                   	pop    edx
c00197f0:	5b                   	pop    ebx
c00197f1:	5e                   	pop    esi
c00197f2:	c3                   	ret    
c00197f3:	90                   	nop

c00197f4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00197f4:	55                   	push   ebp
c00197f5:	57                   	push   edi
c00197f6:	56                   	push   esi
c00197f7:	53                   	push   ebx
c00197f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197fe:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0019805:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001980c:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0019813:	85 db                	test   ebx,ebx
c0019815:	0f 84 e4 00 00 00    	je     c00198ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001981b:	85 ed                	test   ebp,ebp
c001981d:	0f 84 dc 00 00 00    	je     c00198ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019823:	83 ec 0c             	sub    esp,0xc
c0019826:	68 6f 18 02 c0       	push   0xc002186f
c001982b:	e8 53 11 ff ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c0019830:	89 d8                	mov    eax,ebx
c0019832:	b9 02 00 00 00       	mov    ecx,0x2
c0019837:	99                   	cdq    
c0019838:	f7 f9                	idiv   ecx
c001983a:	83 e8 32             	sub    eax,0x32
c001983d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019840:	e8 aa cf fe ff       	call   c00067ef <iso_readdir>
c0019845:	83 c4 10             	add    esp,0x10
c0019848:	85 c0                	test   eax,eax
c001984a:	89 c3                	mov    ebx,eax
c001984c:	75 38                	jne    c0019886 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001984e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019853:	53                   	push   ebx
c0019854:	53                   	push   ebx
c0019855:	68 7a 18 02 c0       	push   0xc002187a
c001985a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019860:	e8 31 f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c0019865:	83 c4 0c             	add    esp,0xc
c0019868:	68 10 01 00 00       	push   0x110
c001986d:	6a 00                	push   0x0
c001986f:	57                   	push   edi
c0019870:	e8 7b 6c fe ff       	call   c00004f0 <memset>
c0019875:	83 c4 10             	add    esp,0x10
c0019878:	b8 01 00 00 00       	mov    eax,0x1
c001987d:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0019884:	eb 7e                	jmp    c0019904 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019886:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001988c:	8d 70 08             	lea    esi,[eax+0x8]
c001988f:	83 ec 0c             	sub    esp,0xc
c0019892:	56                   	push   esi
c0019893:	e8 e8 6c fe ff       	call   c0000580 <strlen>
c0019898:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00198a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00198a4:	83 c4 10             	add    esp,0x10
c00198a7:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c00198ab:	75 0a                	jne    c00198b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c00198ad:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c00198b0:	b8 02 00 00 00       	mov    eax,0x2
c00198b5:	74 05                	je     c00198bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c00198b7:	b8 01 00 00 00       	mov    eax,0x1
c00198bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198c0:	50                   	push   eax
c00198c1:	50                   	push   eax
c00198c2:	56                   	push   esi
c00198c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00198c7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00198cb:	50                   	push   eax
c00198cc:	e8 7f 6d fe ff       	call   c0000650 <strcpy>
c00198d1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00198d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198da:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c00198e1:	5a                   	pop    edx
c00198e2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00198e7:	59                   	pop    ecx
c00198e8:	68 8d 18 02 c0       	push   0xc002188d
c00198ed:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00198f3:	e8 9e f1 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c00198f8:	83 c4 10             	add    esp,0x10
c00198fb:	31 c0                	xor    eax,eax
c00198fd:	eb 05                	jmp    c0019904 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00198ff:	b8 04 00 00 00       	mov    eax,0x4
c0019904:	81 c4 1c 01 00 00    	add    esp,0x11c
c001990a:	5b                   	pop    ebx
c001990b:	5e                   	pop    esi
c001990c:	5f                   	pop    edi
c001990d:	5d                   	pop    ebp
c001990e:	c3                   	ret    

c001990f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001990f:	57                   	push   edi
c0019910:	56                   	push   esi
c0019911:	53                   	push   ebx
c0019912:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019916:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001991a:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c0019920:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019924:	0f be cb             	movsx  ecx,bl
c0019927:	75 0b                	jne    c0019934 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019929:	0f be 05 e4 23 02 c0 	movsx  eax,BYTE PTR ds:0xc00223e4
c0019930:	39 c8                	cmp    eax,ecx
c0019932:	74 47                	je     c001997b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019934:	83 ec 0c             	sub    esp,0xc
c0019937:	31 d2                	xor    edx,edx
c0019939:	68 40 83 02 c0       	push   0xc0028340
c001993e:	6a 01                	push   0x1
c0019940:	52                   	push   edx
c0019941:	56                   	push   esi
c0019942:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c0019949:	e8 80 38 ff ff       	call   c000d1ce <LogicalDisk::read(unsigned long long, int, void*)>
c001994e:	83 c4 20             	add    esp,0x20
c0019951:	85 c0                	test   eax,eax
c0019953:	75 0e                	jne    c0019963 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019955:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c001995b:	88 1d e4 23 02 c0    	mov    BYTE PTR ds:0xc00223e4,bl
c0019961:	eb 18                	jmp    c001997b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019963:	50                   	push   eax
c0019964:	68 00 08 00 00       	push   0x800
c0019969:	6a 00                	push   0x0
c001996b:	57                   	push   edi
c001996c:	e8 7f 6b fe ff       	call   c00004f0 <memset>
c0019971:	83 c4 10             	add    esp,0x10
c0019974:	b8 01 00 00 00       	mov    eax,0x1
c0019979:	eb 0e                	jmp    c0019989 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001997b:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019980:	b9 00 08 00 00       	mov    ecx,0x800
c0019985:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019987:	31 c0                	xor    eax,eax
c0019989:	5b                   	pop    ebx
c001998a:	5e                   	pop    esi
c001998b:	5f                   	pop    edi
c001998c:	c3                   	ret    
c001998d:	90                   	nop

c001998e <ISO9660::tryMount(LogicalDisk*, int)>:
c001998e:	53                   	push   ebx
c001998f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019995:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c001999f:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c00199a6:	8d 58 41             	lea    ebx,[eax+0x41]
c00199a9:	0f be db             	movsx  ebx,bl
c00199ac:	53                   	push   ebx
c00199ad:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199b1:	50                   	push   eax
c00199b2:	6a 10                	push   0x10
c00199b4:	e8 56 ff ff ff       	call   c001990f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00199b9:	83 c4 10             	add    esp,0x10
c00199bc:	31 d2                	xor    edx,edx
c00199be:	85 c0                	test   eax,eax
c00199c0:	75 33                	jne    c00199f5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199c2:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00199c7:	75 2c                	jne    c00199f5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199c9:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00199ce:	75 25                	jne    c00199f5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199d0:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00199d5:	75 1e                	jne    c00199f5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199d7:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00199dc:	75 17                	jne    c00199f5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199de:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00199e3:	75 10                	jne    c00199f5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199e5:	83 ec 0c             	sub    esp,0xc
c00199e8:	53                   	push   ebx
c00199e9:	e8 79 d0 fe ff       	call   c0006a67 <init_percd>
c00199ee:	83 c4 10             	add    esp,0x10
c00199f1:	40                   	inc    eax
c00199f2:	0f 95 c2             	setne  dl
c00199f5:	81 c4 08 08 00 00    	add    esp,0x808
c00199fb:	88 d0                	mov    al,dl
c00199fd:	5b                   	pop    ebx
c00199fe:	c3                   	ret    
c00199ff:	90                   	nop

c0019a00 <ISO9660::ISO9660()>:
c0019a00:	83 ec 0c             	sub    esp,0xc
c0019a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a07:	83 ec 0c             	sub    esp,0xc
c0019a0a:	50                   	push   eax
c0019a0b:	e8 96 12 ff ff       	call   c000aca6 <Filesystem::Filesystem()>
c0019a10:	83 c4 10             	add    esp,0x10
c0019a13:	ba a8 18 02 c0       	mov    edx,0xc00218a8
c0019a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a1c:	89 10                	mov    DWORD PTR [eax],edx
c0019a1e:	e8 56 d1 fe ff       	call   c0006b79 <fs_iso9660_init>
c0019a23:	90                   	nop
c0019a24:	83 c4 0c             	add    esp,0xc
c0019a27:	c3                   	ret    

c0019a28 <SoundCard::beginPlayback()>:
c0019a28:	c7 44 24 04 08 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021908
c0019a30:	e9 18 6e ff ff       	jmp    c001084d <KePanic(char const*)>
c0019a35:	90                   	nop

c0019a36 <SoundCard::stopPlayback()>:
c0019a36:	c7 44 24 04 08 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021908
c0019a3e:	e9 0a 6e ff ff       	jmp    c001084d <KePanic(char const*)>
c0019a43:	90                   	nop

c0019a44 <SoundCard::SoundCard(char const*)>:
c0019a44:	83 ec 1c             	sub    esp,0x1c
c0019a47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a4b:	83 ec 08             	sub    esp,0x8
c0019a4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a52:	50                   	push   eax
c0019a53:	e8 24 25 ff ff       	call   c000bf7c <Device::Device(char const*)>
c0019a58:	83 c4 10             	add    esp,0x10
c0019a5b:	ba 54 19 02 c0       	mov    edx,0xc0021954
c0019a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a64:	89 10                	mov    DWORD PTR [eax],edx
c0019a66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a6a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a75:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a83:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019a8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a91:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019a9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a9f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019aa9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ab1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019ab6:	7f 1a                	jg     c0019ad2 <SoundCard::SoundCard(char const*)+0x8e>
c0019ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019abc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ac0:	83 c2 54             	add    edx,0x54
c0019ac3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019acb:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019ad0:	eb df                	jmp    c0019ab1 <SoundCard::SoundCard(char const*)+0x6d>
c0019ad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ad6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019add:	90                   	nop
c0019ade:	83 c4 1c             	add    esp,0x1c
c0019ae1:	c3                   	ret    

c0019ae2 <SoundCard::~SoundCard()>:
c0019ae2:	83 ec 0c             	sub    esp,0xc
c0019ae5:	ba 54 19 02 c0       	mov    edx,0xc0021954
c0019aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aee:	89 10                	mov    DWORD PTR [eax],edx
c0019af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019af4:	83 ec 0c             	sub    esp,0xc
c0019af7:	50                   	push   eax
c0019af8:	e8 e9 21 ff ff       	call   c000bce6 <Device::~Device()>
c0019afd:	83 c4 10             	add    esp,0x10
c0019b00:	90                   	nop
c0019b01:	83 c4 0c             	add    esp,0xc
c0019b04:	c3                   	ret    
c0019b05:	90                   	nop

c0019b06 <SoundCard::~SoundCard()>:
c0019b06:	83 ec 0c             	sub    esp,0xc
c0019b09:	83 ec 0c             	sub    esp,0xc
c0019b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b10:	e8 cd ff ff ff       	call   c0019ae2 <SoundCard::~SoundCard()>
c0019b15:	83 c4 10             	add    esp,0x10
c0019b18:	83 ec 08             	sub    esp,0x8
c0019b1b:	68 e8 01 00 00       	push   0x1e8
c0019b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b24:	e8 5c 0d ff ff       	call   c000a885 <operator delete(void*, unsigned long)>
c0019b29:	83 c4 10             	add    esp,0x10
c0019b2c:	83 c4 0c             	add    esp,0xc
c0019b2f:	c3                   	ret    

c0019b30 <SoundCard::configureRates(int, int, int)>:
c0019b30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019b34:	31 c0                	xor    eax,eax
c0019b36:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019b3d:	75 20                	jne    c0019b5f <SoundCard::configureRates(int, int, int)+0x2f>
c0019b3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b43:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b4d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b57:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019b5d:	b0 01                	mov    al,0x1
c0019b5f:	c3                   	ret    

c0019b60 <SoundCard::getSamples16(int, short*)>:
c0019b60:	55                   	push   ebp
c0019b61:	57                   	push   edi
c0019b62:	31 ff                	xor    edi,edi
c0019b64:	56                   	push   esi
c0019b65:	53                   	push   ebx
c0019b66:	31 db                	xor    ebx,ebx
c0019b68:	83 ec 10             	sub    esp,0x10
c0019b6b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019b6f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b73:	8d 04 36             	lea    eax,[esi+esi*1]
c0019b76:	50                   	push   eax
c0019b77:	6a 00                	push   0x0
c0019b79:	55                   	push   ebp
c0019b7a:	e8 71 69 fe ff       	call   c00004f0 <memset>
c0019b7f:	83 c4 10             	add    esp,0x10
c0019b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b86:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019b8d:	85 c0                	test   eax,eax
c0019b8f:	74 1a                	je     c0019bab <SoundCard::getSamples16(int, short*)+0x4b>
c0019b91:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019b95:	75 14                	jne    c0019bab <SoundCard::getSamples16(int, short*)+0x4b>
c0019b97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019b9b:	55                   	push   ebp
c0019b9c:	56                   	push   esi
c0019b9d:	50                   	push   eax
c0019b9e:	e8 f1 02 00 00       	call   c0019e94 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019ba3:	83 c4 10             	add    esp,0x10
c0019ba6:	39 c3                	cmp    ebx,eax
c0019ba8:	0f 4c d8             	cmovl  ebx,eax
c0019bab:	47                   	inc    edi
c0019bac:	83 ff 20             	cmp    edi,0x20
c0019baf:	75 d1                	jne    c0019b82 <SoundCard::getSamples16(int, short*)+0x22>
c0019bb1:	83 c4 0c             	add    esp,0xc
c0019bb4:	89 d8                	mov    eax,ebx
c0019bb6:	5b                   	pop    ebx
c0019bb7:	5e                   	pop    esi
c0019bb8:	5f                   	pop    edi
c0019bb9:	5d                   	pop    ebp
c0019bba:	c3                   	ret    
c0019bbb:	90                   	nop

c0019bbc <SoundCard::getSamples32(int, int*)>:
c0019bbc:	55                   	push   ebp
c0019bbd:	57                   	push   edi
c0019bbe:	31 ff                	xor    edi,edi
c0019bc0:	56                   	push   esi
c0019bc1:	31 f6                	xor    esi,esi
c0019bc3:	53                   	push   ebx
c0019bc4:	83 ec 10             	sub    esp,0x10
c0019bc7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019bcb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019bcf:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019bd3:	c1 e0 02             	shl    eax,0x2
c0019bd6:	50                   	push   eax
c0019bd7:	6a 00                	push   0x0
c0019bd9:	55                   	push   ebp
c0019bda:	e8 11 69 fe ff       	call   c00004f0 <memset>
c0019bdf:	83 c4 10             	add    esp,0x10
c0019be2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019be9:	85 c0                	test   eax,eax
c0019beb:	74 1a                	je     c0019c07 <SoundCard::getSamples32(int, int*)+0x4b>
c0019bed:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019bf1:	75 14                	jne    c0019c07 <SoundCard::getSamples32(int, int*)+0x4b>
c0019bf3:	53                   	push   ebx
c0019bf4:	55                   	push   ebp
c0019bf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019bf9:	50                   	push   eax
c0019bfa:	e8 65 03 00 00       	call   c0019f64 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019bff:	83 c4 10             	add    esp,0x10
c0019c02:	39 c6                	cmp    esi,eax
c0019c04:	0f 4c f0             	cmovl  esi,eax
c0019c07:	47                   	inc    edi
c0019c08:	83 ff 20             	cmp    edi,0x20
c0019c0b:	75 d5                	jne    c0019be2 <SoundCard::getSamples32(int, int*)+0x26>
c0019c0d:	85 f6                	test   esi,esi
c0019c0f:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019c16:	75 0f                	jne    c0019c27 <SoundCard::getSamples32(int, int*)+0x6b>
c0019c18:	85 c0                	test   eax,eax
c0019c1a:	74 1b                	je     c0019c37 <SoundCard::getSamples32(int, int*)+0x7b>
c0019c1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c1e:	83 ec 0c             	sub    esp,0xc
c0019c21:	53                   	push   ebx
c0019c22:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019c25:	eb 0d                	jmp    c0019c34 <SoundCard::getSamples32(int, int*)+0x78>
c0019c27:	85 c0                	test   eax,eax
c0019c29:	75 0c                	jne    c0019c37 <SoundCard::getSamples32(int, int*)+0x7b>
c0019c2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c2d:	83 ec 0c             	sub    esp,0xc
c0019c30:	53                   	push   ebx
c0019c31:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019c34:	83 c4 10             	add    esp,0x10
c0019c37:	83 c4 0c             	add    esp,0xc
c0019c3a:	89 f0                	mov    eax,esi
c0019c3c:	5b                   	pop    ebx
c0019c3d:	5e                   	pop    esi
c0019c3e:	5f                   	pop    edi
c0019c3f:	5d                   	pop    ebp
c0019c40:	c3                   	ret    
c0019c41:	90                   	nop

c0019c42 <SoundCard::addChannel(SoundPort*)>:
c0019c42:	83 ec 0c             	sub    esp,0xc
c0019c45:	31 c0                	xor    eax,eax
c0019c47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c4b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019c53:	74 1b                	je     c0019c70 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019c55:	40                   	inc    eax
c0019c56:	83 f8 20             	cmp    eax,0x20
c0019c59:	75 f0                	jne    c0019c4b <SoundCard::addChannel(SoundPort*)+0x9>
c0019c5b:	83 ec 0c             	sub    esp,0xc
c0019c5e:	68 2d 19 02 c0       	push   0xc002192d
c0019c63:	e8 e5 6b ff ff       	call   c001084d <KePanic(char const*)>
c0019c68:	83 c4 10             	add    esp,0x10
c0019c6b:	83 c8 ff             	or     eax,0xffffffff
c0019c6e:	eb 0b                	jmp    c0019c7b <SoundCard::addChannel(SoundPort*)+0x39>
c0019c70:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019c74:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019c7b:	83 c4 0c             	add    esp,0xc
c0019c7e:	c3                   	ret    
c0019c7f:	90                   	nop

c0019c80 <SoundCard::removeChannel(int)>:
c0019c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c88:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019c93:	c3                   	ret    

c0019c94 <SoundPort::SoundPort(int, int, int, int)>:
c0019c94:	83 ec 0c             	sub    esp,0xc
c0019c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c9b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ca6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019cb2:	89 10                	mov    DWORD PTR [eax],edx
c0019cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cb8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cbc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cc3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019cc7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019cca:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019ccf:	75 13                	jne    c0019ce4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0019cd7:	05 a0 0f 00 00       	add    eax,0xfa0
c0019cdc:	d1 e0                	shl    eax,1
c0019cde:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019ce2:	66 90                	xchg   ax,ax
c0019ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ce8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019cec:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cf3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cfe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d01:	c1 e0 02             	shl    eax,0x2
c0019d04:	83 ec 0c             	sub    esp,0xc
c0019d07:	50                   	push   eax
c0019d08:	e8 be dd fe ff       	call   c0007acb <malloc>
c0019d0d:	83 c4 10             	add    esp,0x10
c0019d10:	89 c2                	mov    edx,eax
c0019d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d16:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019d19:	90                   	nop
c0019d1a:	83 c4 0c             	add    esp,0xc
c0019d1d:	c3                   	ret    
c0019d1e:	66 90                	xchg   ax,ax

c0019d20 <SoundPort::~SoundPort()>:
c0019d20:	83 ec 0c             	sub    esp,0xc
c0019d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d2a:	85 c0                	test   eax,eax
c0019d2c:	74 1e                	je     c0019d4c <SoundPort::~SoundPort()+0x2c>
c0019d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d35:	83 ec 0c             	sub    esp,0xc
c0019d38:	50                   	push   eax
c0019d39:	e8 9d dd fe ff       	call   c0007adb <free>
c0019d3e:	83 c4 10             	add    esp,0x10
c0019d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d45:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019d4c:	90                   	nop
c0019d4d:	83 c4 0c             	add    esp,0xc
c0019d50:	c3                   	ret    
c0019d51:	90                   	nop
c0019d52:	66 90                	xchg   ax,ax

c0019d54 <SoundPort::unpause()>:
c0019d54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d58:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019d5c:	c3                   	ret    
c0019d5d:	90                   	nop
c0019d5e:	66 90                	xchg   ax,ax

c0019d60 <SoundPort::pause()>:
c0019d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d64:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d68:	c3                   	ret    
c0019d69:	90                   	nop
c0019d6a:	66 90                	xchg   ax,ax

c0019d6c <SoundPort::getBufferUsed()>:
c0019d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d70:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d73:	c3                   	ret    

c0019d74 <SoundPort::getBufferSize()>:
c0019d74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d78:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d7b:	c3                   	ret    

c0019d7c <SoundPort::buffer16(short*, int)>:
c0019d7c:	55                   	push   ebp
c0019d7d:	57                   	push   edi
c0019d7e:	56                   	push   esi
c0019d7f:	53                   	push   ebx
c0019d80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d84:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019d88:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019d8b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019d8e:	74 68                	je     c0019df8 <SoundPort::buffer16(short*, int)+0x7c>
c0019d90:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d94:	85 c9                	test   ecx,ecx
c0019d96:	7e 60                	jle    c0019df8 <SoundPort::buffer16(short*, int)+0x7c>
c0019d98:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019d9c:	8d 70 01             	lea    esi,[eax+0x1]
c0019d9f:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019da2:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019da5:	c1 e1 0f             	shl    ecx,0xf
c0019da8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019dab:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019dae:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019db1:	74 4d                	je     c0019e00 <SoundPort::buffer16(short*, int)+0x84>
c0019db3:	31 f6                	xor    esi,esi
c0019db5:	eb 21                	jmp    c0019dd8 <SoundPort::buffer16(short*, int)+0x5c>
c0019db7:	90                   	nop
c0019db8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019dbd:	8d 79 01             	lea    edi,[ecx+0x1]
c0019dc0:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019dc3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019dc6:	c1 e3 0f             	shl    ebx,0xf
c0019dc9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019dcc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019dcf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019dd2:	74 1c                	je     c0019df0 <SoundPort::buffer16(short*, int)+0x74>
c0019dd4:	89 c6                	mov    esi,eax
c0019dd6:	66 90                	xchg   ax,ax
c0019dd8:	8d 46 01             	lea    eax,[esi+0x1]
c0019ddb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019ddf:	75 d7                	jne    c0019db8 <SoundPort::buffer16(short*, int)+0x3c>
c0019de1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019de5:	8d 76 00             	lea    esi,[esi+0x0]
c0019de8:	5b                   	pop    ebx
c0019de9:	5e                   	pop    esi
c0019dea:	5f                   	pop    edi
c0019deb:	5d                   	pop    ebp
c0019dec:	c3                   	ret    
c0019ded:	8d 76 00             	lea    esi,[esi+0x0]
c0019df0:	5b                   	pop    ebx
c0019df1:	8d 46 02             	lea    eax,[esi+0x2]
c0019df4:	5e                   	pop    esi
c0019df5:	5f                   	pop    edi
c0019df6:	5d                   	pop    ebp
c0019df7:	c3                   	ret    
c0019df8:	5b                   	pop    ebx
c0019df9:	31 c0                	xor    eax,eax
c0019dfb:	5e                   	pop    esi
c0019dfc:	5f                   	pop    edi
c0019dfd:	5d                   	pop    ebp
c0019dfe:	c3                   	ret    
c0019dff:	90                   	nop
c0019e00:	b8 01 00 00 00       	mov    eax,0x1
c0019e05:	eb e1                	jmp    c0019de8 <SoundPort::buffer16(short*, int)+0x6c>
c0019e07:	90                   	nop

c0019e08 <SoundPort::buffer32(int*, int)>:
c0019e08:	55                   	push   ebp
c0019e09:	57                   	push   edi
c0019e0a:	56                   	push   esi
c0019e0b:	53                   	push   ebx
c0019e0c:	83 ec 04             	sub    esp,0x4
c0019e0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e17:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e1b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e1e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e21:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e24:	74 5a                	je     c0019e80 <SoundPort::buffer32(int*, int)+0x78>
c0019e26:	85 c0                	test   eax,eax
c0019e28:	7e 56                	jle    c0019e80 <SoundPort::buffer32(int*, int)+0x78>
c0019e2a:	8d 71 01             	lea    esi,[ecx+0x1]
c0019e2d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019e30:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019e33:	8b 37                	mov    esi,DWORD PTR [edi]
c0019e35:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019e38:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e3b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e3e:	74 4c                	je     c0019e8c <SoundPort::buffer32(int*, int)+0x84>
c0019e40:	31 f6                	xor    esi,esi
c0019e42:	eb 1c                	jmp    c0019e60 <SoundPort::buffer32(int*, int)+0x58>
c0019e44:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019e47:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019e4a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019e4d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019e50:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019e54:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e57:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e5a:	74 18                	je     c0019e74 <SoundPort::buffer32(int*, int)+0x6c>
c0019e5c:	89 de                	mov    esi,ebx
c0019e5e:	66 90                	xchg   ax,ax
c0019e60:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019e63:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019e66:	75 dc                	jne    c0019e44 <SoundPort::buffer32(int*, int)+0x3c>
c0019e68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019e6b:	90                   	nop
c0019e6c:	83 c4 04             	add    esp,0x4
c0019e6f:	5b                   	pop    ebx
c0019e70:	5e                   	pop    esi
c0019e71:	5f                   	pop    edi
c0019e72:	5d                   	pop    ebp
c0019e73:	c3                   	ret    
c0019e74:	8d 46 02             	lea    eax,[esi+0x2]
c0019e77:	83 c4 04             	add    esp,0x4
c0019e7a:	5b                   	pop    ebx
c0019e7b:	5e                   	pop    esi
c0019e7c:	5f                   	pop    edi
c0019e7d:	5d                   	pop    ebp
c0019e7e:	c3                   	ret    
c0019e7f:	90                   	nop
c0019e80:	83 c4 04             	add    esp,0x4
c0019e83:	31 c0                	xor    eax,eax
c0019e85:	5b                   	pop    ebx
c0019e86:	5e                   	pop    esi
c0019e87:	5f                   	pop    edi
c0019e88:	5d                   	pop    ebp
c0019e89:	c3                   	ret    
c0019e8a:	66 90                	xchg   ax,ax
c0019e8c:	b8 01 00 00 00       	mov    eax,0x1
c0019e91:	eb d9                	jmp    c0019e6c <SoundPort::buffer32(int*, int)+0x64>
c0019e93:	90                   	nop

c0019e94 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019e94:	55                   	push   ebp
c0019e95:	57                   	push   edi
c0019e96:	56                   	push   esi
c0019e97:	53                   	push   ebx
c0019e98:	83 ec 0c             	sub    esp,0xc
c0019e9b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019e9f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019ea3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019ea7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019eab:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019eb1:	39 03                	cmp    DWORD PTR [ebx],eax
c0019eb3:	74 13                	je     c0019ec8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0019eb5:	83 ec 0c             	sub    esp,0xc
c0019eb8:	68 80 19 02 c0       	push   0xc0021980
c0019ebd:	e8 8b 69 ff ff       	call   c001084d <KePanic(char const*)>
c0019ec2:	83 c4 10             	add    esp,0x10
c0019ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ec8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019ece:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019ed1:	74 11                	je     c0019ee4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0019ed3:	83 ec 0c             	sub    esp,0xc
c0019ed6:	68 bf 19 02 c0       	push   0xc00219bf
c0019edb:	e8 6d 69 ff ff       	call   c001084d <KePanic(char const*)>
c0019ee0:	83 c4 10             	add    esp,0x10
c0019ee3:	90                   	nop
c0019ee4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019eea:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019eed:	74 11                	je     c0019f00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0019eef:	83 ec 0c             	sub    esp,0xc
c0019ef2:	68 bf 19 02 c0       	push   0xc00219bf
c0019ef7:	e8 51 69 ff ff       	call   c001084d <KePanic(char const*)>
c0019efc:	83 c4 10             	add    esp,0x10
c0019eff:	90                   	nop
c0019f00:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019f03:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019f07:	85 f6                	test   esi,esi
c0019f09:	7e 2d                	jle    c0019f38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0019f0b:	31 c0                	xor    eax,eax
c0019f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f10:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f13:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019f16:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019f1c:	85 c9                	test   ecx,ecx
c0019f1e:	0f 49 d1             	cmovns edx,ecx
c0019f21:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0019f25:	c1 fa 0f             	sar    edx,0xf
c0019f28:	01 d1                	add    ecx,edx
c0019f2a:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0019f2e:	83 c0 01             	add    eax,0x1
c0019f31:	39 f0                	cmp    eax,esi
c0019f33:	75 db                	jne    c0019f10 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0019f35:	8d 76 00             	lea    esi,[esi+0x0]
c0019f38:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f3b:	83 ec 04             	sub    esp,0x4
c0019f3e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f41:	29 f0                	sub    eax,esi
c0019f43:	c1 e0 02             	shl    eax,0x2
c0019f46:	50                   	push   eax
c0019f47:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019f4a:	50                   	push   eax
c0019f4b:	52                   	push   edx
c0019f4c:	e8 7f 64 fe ff       	call   c00003d0 <memmove>
c0019f51:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019f54:	29 f0                	sub    eax,esi
c0019f56:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019f59:	83 c4 1c             	add    esp,0x1c
c0019f5c:	89 f0                	mov    eax,esi
c0019f5e:	5b                   	pop    ebx
c0019f5f:	5e                   	pop    esi
c0019f60:	5f                   	pop    edi
c0019f61:	5d                   	pop    ebp
c0019f62:	c3                   	ret    
c0019f63:	90                   	nop

c0019f64 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019f64:	55                   	push   ebp
c0019f65:	57                   	push   edi
c0019f66:	56                   	push   esi
c0019f67:	53                   	push   ebx
c0019f68:	83 ec 0c             	sub    esp,0xc
c0019f6b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019f6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019f73:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0019f77:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019f7b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019f81:	39 03                	cmp    DWORD PTR [ebx],eax
c0019f83:	74 13                	je     c0019f98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0019f85:	83 ec 0c             	sub    esp,0xc
c0019f88:	68 a0 19 02 c0       	push   0xc00219a0
c0019f8d:	e8 bb 68 ff ff       	call   c001084d <KePanic(char const*)>
c0019f92:	83 c4 10             	add    esp,0x10
c0019f95:	8d 76 00             	lea    esi,[esi+0x0]
c0019f98:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019f9e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019fa1:	74 11                	je     c0019fb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0019fa3:	83 ec 0c             	sub    esp,0xc
c0019fa6:	68 db 19 02 c0       	push   0xc00219db
c0019fab:	e8 9d 68 ff ff       	call   c001084d <KePanic(char const*)>
c0019fb0:	83 c4 10             	add    esp,0x10
c0019fb3:	90                   	nop
c0019fb4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019fba:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019fbd:	74 11                	je     c0019fd0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0019fbf:	83 ec 0c             	sub    esp,0xc
c0019fc2:	68 db 19 02 c0       	push   0xc00219db
c0019fc7:	e8 81 68 ff ff       	call   c001084d <KePanic(char const*)>
c0019fcc:	83 c4 10             	add    esp,0x10
c0019fcf:	90                   	nop
c0019fd0:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019fd3:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019fd7:	85 ff                	test   edi,edi
c0019fd9:	7e 21                	jle    c0019ffc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c0019fdb:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019fe2:	31 c0                	xor    eax,eax
c0019fe4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019fe7:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c0019fea:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019fed:	01 d5                	add    ebp,edx
c0019fef:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c0019ff2:	83 c0 04             	add    eax,0x4
c0019ff5:	39 c1                	cmp    ecx,eax
c0019ff7:	75 eb                	jne    c0019fe4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0019ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ffc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019fff:	83 ec 04             	sub    esp,0x4
c001a002:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a005:	29 f8                	sub    eax,edi
c001a007:	c1 e0 02             	shl    eax,0x2
c001a00a:	50                   	push   eax
c001a00b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a00e:	50                   	push   eax
c001a00f:	52                   	push   edx
c001a010:	e8 bb 63 fe ff       	call   c00003d0 <memmove>
c001a015:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a018:	29 f8                	sub    eax,edi
c001a01a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a01d:	83 c4 1c             	add    esp,0x1c
c001a020:	89 f8                	mov    eax,edi
c001a022:	5b                   	pop    ebx
c001a023:	5e                   	pop    esi
c001a024:	5f                   	pop    edi
c001a025:	5d                   	pop    ebp
c001a026:	c3                   	ret    
c001a027:	90                   	nop

c001a028 <PCI::open(int, int, void*)>:
c001a028:	83 ec 18             	sub    esp,0x18
c001a02b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a02f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a033:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a039:	8b 10                	mov    edx,DWORD PTR [eax]
c001a03b:	50                   	push   eax
c001a03c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a03f:	31 c0                	xor    eax,eax
c001a041:	83 c4 1c             	add    esp,0x1c
c001a044:	c3                   	ret    
c001a045:	90                   	nop

c001a046 <PCI::close(int, int, void*)>:
c001a046:	31 c0                	xor    eax,eax
c001a048:	c3                   	ret    
c001a049:	90                   	nop

c001a04a <PCI::PCI()>:
c001a04a:	83 ec 0c             	sub    esp,0xc
c001a04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a051:	83 ec 08             	sub    esp,0x8
c001a054:	68 f7 19 02 c0       	push   0xc00219f7
c001a059:	50                   	push   eax
c001a05a:	e8 e1 16 ff ff       	call   c000b740 <Bus::Bus(char const*)>
c001a05f:	83 c4 10             	add    esp,0x10
c001a062:	ba a0 1a 02 c0       	mov    edx,0xc0021aa0
c001a067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a06b:	89 10                	mov    DWORD PTR [eax],edx
c001a06d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a071:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a07f:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a088:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a08e:	0f b6 d0             	movzx  edx,al
c001a091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a095:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a0a6:	0f b6 d0             	movzx  edx,al
c001a0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ad:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a0bc:	8d 50 01             	lea    edx,[eax+0x1]
c001a0bf:	88 d1                	mov    cl,dl
c001a0c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a0c5:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a0cb:	0f b6 d0             	movzx  edx,al
c001a0ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0d2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a0d6:	83 c9 c0             	or     ecx,0xffffffc0
c001a0d9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a0dd:	90                   	nop
c001a0de:	83 c4 0c             	add    esp,0xc
c001a0e1:	c3                   	ret    

c001a0e2 <PCI::readBAR8(unsigned int, int)>:
c001a0e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0ea:	f6 c2 01             	test   dl,0x1
c001a0ed:	74 07                	je     c001a0f6 <PCI::readBAR8(unsigned int, int)+0x14>
c001a0ef:	83 e2 fc             	and    edx,0xfffffffc
c001a0f2:	01 c2                	add    edx,eax
c001a0f4:	ec                   	in     al,dx
c001a0f5:	c3                   	ret    
c001a0f6:	83 e2 f0             	and    edx,0xfffffff0
c001a0f9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a0fc:	c3                   	ret    
c001a0fd:	90                   	nop

c001a0fe <PCI::readBAR16(unsigned int, int)>:
c001a0fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a106:	f6 c2 01             	test   dl,0x1
c001a109:	74 08                	je     c001a113 <PCI::readBAR16(unsigned int, int)+0x15>
c001a10b:	83 e2 fc             	and    edx,0xfffffffc
c001a10e:	01 c2                	add    edx,eax
c001a110:	66 ed                	in     ax,dx
c001a112:	c3                   	ret    
c001a113:	83 e2 f0             	and    edx,0xfffffff0
c001a116:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a11a:	c3                   	ret    
c001a11b:	90                   	nop

c001a11c <PCI::readBAR32(unsigned int, int)>:
c001a11c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a124:	f6 c2 01             	test   dl,0x1
c001a127:	74 07                	je     c001a130 <PCI::readBAR32(unsigned int, int)+0x14>
c001a129:	83 e2 fc             	and    edx,0xfffffffc
c001a12c:	01 c2                	add    edx,eax
c001a12e:	ed                   	in     eax,dx
c001a12f:	c3                   	ret    
c001a130:	83 e2 f0             	and    edx,0xfffffff0
c001a133:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a136:	c3                   	ret    
c001a137:	90                   	nop

c001a138 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a138:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a13c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a140:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a144:	f6 c2 01             	test   dl,0x1
c001a147:	74 07                	je     c001a150 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a149:	83 e2 fc             	and    edx,0xfffffffc
c001a14c:	01 ca                	add    edx,ecx
c001a14e:	ee                   	out    dx,al
c001a14f:	c3                   	ret    
c001a150:	83 e2 f0             	and    edx,0xfffffff0
c001a153:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a156:	c3                   	ret    
c001a157:	90                   	nop

c001a158 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a158:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a15c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a160:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a164:	f6 c2 01             	test   dl,0x1
c001a167:	74 08                	je     c001a171 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a169:	83 e2 fc             	and    edx,0xfffffffc
c001a16c:	01 ca                	add    edx,ecx
c001a16e:	66 ef                	out    dx,ax
c001a170:	c3                   	ret    
c001a171:	83 e2 f0             	and    edx,0xfffffff0
c001a174:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a178:	c3                   	ret    
c001a179:	90                   	nop

c001a17a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a17a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a17e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a182:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a186:	f6 c2 01             	test   dl,0x1
c001a189:	74 07                	je     c001a192 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a18b:	83 e2 fc             	and    edx,0xfffffffc
c001a18e:	01 ca                	add    edx,ecx
c001a190:	ef                   	out    dx,eax
c001a191:	c3                   	ret    
c001a192:	83 e2 f0             	and    edx,0xfffffff0
c001a195:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a198:	c3                   	ret    
c001a199:	90                   	nop

c001a19a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a19a:	55                   	push   ebp
c001a19b:	57                   	push   edi
c001a19c:	56                   	push   esi
c001a19d:	53                   	push   ebx
c001a19e:	83 ec 0c             	sub    esp,0xc
c001a1a1:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a1a6:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a1aa:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a1ae:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a1b2:	83 fe 07             	cmp    esi,0x7
c001a1b5:	76 10                	jbe    c001a1c7 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a1b7:	83 ec 0c             	sub    esp,0xc
c001a1ba:	68 ff 19 02 c0       	push   0xc00219ff
c001a1bf:	e8 89 66 ff ff       	call   c001084d <KePanic(char const*)>
c001a1c4:	83 c4 10             	add    esp,0x10
c001a1c7:	0f b6 db             	movzx  ebx,bl
c001a1ca:	83 fb 0f             	cmp    ebx,0xf
c001a1cd:	76 10                	jbe    c001a1df <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a1cf:	83 ec 0c             	sub    esp,0xc
c001a1d2:	68 2f 1a 02 c0       	push   0xc0021a2f
c001a1d7:	e8 71 66 ff ff       	call   c001084d <KePanic(char const*)>
c001a1dc:	83 c4 10             	add    esp,0x10
c001a1df:	8d 04 36             	lea    eax,[esi+esi*1]
c001a1e2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a1e7:	83 c8 f0             	or     eax,0xfffffff0
c001a1ea:	ee                   	out    dx,al
c001a1eb:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a1f0:	89 e8                	mov    eax,ebp
c001a1f2:	ee                   	out    dx,al
c001a1f3:	89 f9                	mov    ecx,edi
c001a1f5:	89 d8                	mov    eax,ebx
c001a1f7:	0f b6 d9             	movzx  ebx,cl
c001a1fa:	83 c4 0c             	add    esp,0xc
c001a1fd:	c1 e0 08             	shl    eax,0x8
c001a200:	83 e3 fc             	and    ebx,0xfffffffc
c001a203:	09 d8                	or     eax,ebx
c001a205:	5b                   	pop    ebx
c001a206:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a20b:	5e                   	pop    esi
c001a20c:	5f                   	pop    edi
c001a20d:	5d                   	pop    ebp
c001a20e:	c3                   	ret    
c001a20f:	90                   	nop

c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a210:	57                   	push   edi
c001a211:	56                   	push   esi
c001a212:	53                   	push   ebx
c001a213:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a217:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a21b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a21f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a223:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a229:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a22d:	83 ff 01             	cmp    edi,0x1
c001a230:	75 3f                	jne    c001a271 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a232:	89 de                	mov    esi,ebx
c001a234:	0f b6 c0             	movzx  eax,al
c001a237:	c1 e0 10             	shl    eax,0x10
c001a23a:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a240:	0f b6 c9             	movzx  ecx,cl
c001a243:	09 f0                	or     eax,esi
c001a245:	c1 e1 08             	shl    ecx,0x8
c001a248:	0f b6 d2             	movzx  edx,dl
c001a24b:	c1 e2 0b             	shl    edx,0xb
c001a24e:	09 c8                	or     eax,ecx
c001a250:	09 d0                	or     eax,edx
c001a252:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a257:	0d 00 00 00 80       	or     eax,0x80000000
c001a25c:	ef                   	out    dx,eax
c001a25d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a262:	ed                   	in     eax,dx
c001a263:	83 e3 02             	and    ebx,0x2
c001a266:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a26d:	d3 e8                	shr    eax,cl
c001a26f:	eb 44                	jmp    c001a2b5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a271:	83 ff 02             	cmp    edi,0x2
c001a274:	75 2d                	jne    c001a2a3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a276:	83 ec 0c             	sub    esp,0xc
c001a279:	0f b6 fb             	movzx  edi,bl
c001a27c:	57                   	push   edi
c001a27d:	0f b6 c9             	movzx  ecx,cl
c001a280:	51                   	push   ecx
c001a281:	0f b6 d2             	movzx  edx,dl
c001a284:	52                   	push   edx
c001a285:	0f b6 c0             	movzx  eax,al
c001a288:	50                   	push   eax
c001a289:	56                   	push   esi
c001a28a:	e8 0b ff ff ff       	call   c001a19a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a28f:	89 c2                	mov    edx,eax
c001a291:	ed                   	in     eax,dx
c001a292:	83 e3 02             	and    ebx,0x2
c001a295:	83 c4 20             	add    esp,0x20
c001a298:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a29f:	d3 e8                	shr    eax,cl
c001a2a1:	eb 12                	jmp    c001a2b5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a2a3:	83 ec 0c             	sub    esp,0xc
c001a2a6:	68 5f 1a 02 c0       	push   0xc0021a5f
c001a2ab:	e8 9d 65 ff ff       	call   c001084d <KePanic(char const*)>
c001a2b0:	83 c4 10             	add    esp,0x10
c001a2b3:	31 c0                	xor    eax,eax
c001a2b5:	5b                   	pop    ebx
c001a2b6:	5e                   	pop    esi
c001a2b7:	5f                   	pop    edi
c001a2b8:	c3                   	ret    
c001a2b9:	90                   	nop

c001a2ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a2ba:	83 ec 18             	sub    esp,0x18
c001a2bd:	6a 00                	push   0x0
c001a2bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2c4:	50                   	push   eax
c001a2c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2ca:	50                   	push   eax
c001a2cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2d0:	50                   	push   eax
c001a2d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2d5:	e8 36 ff ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2da:	83 c4 2c             	add    esp,0x2c
c001a2dd:	c3                   	ret    

c001a2de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a2de:	83 ec 18             	sub    esp,0x18
c001a2e1:	6a 0e                	push   0xe
c001a2e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2e8:	50                   	push   eax
c001a2e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2ee:	50                   	push   eax
c001a2ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2f4:	50                   	push   eax
c001a2f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2f9:	e8 12 ff ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2fe:	83 c4 2c             	add    esp,0x2c
c001a301:	0f b6 c0             	movzx  eax,al
c001a304:	c3                   	ret    
c001a305:	90                   	nop

c001a306 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a306:	55                   	push   ebp
c001a307:	57                   	push   edi
c001a308:	56                   	push   esi
c001a309:	53                   	push   ebx
c001a30a:	83 ec 18             	sub    esp,0x18
c001a30d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a312:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a317:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a31c:	6a 0a                	push   0xa
c001a31e:	56                   	push   esi
c001a31f:	55                   	push   ebp
c001a320:	57                   	push   edi
c001a321:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a325:	e8 e6 fe ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a32a:	83 c4 14             	add    esp,0x14
c001a32d:	6a 0a                	push   0xa
c001a32f:	56                   	push   esi
c001a330:	55                   	push   ebp
c001a331:	57                   	push   edi
c001a332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a336:	89 c3                	mov    ebx,eax
c001a338:	0f b6 db             	movzx  ebx,bl
c001a33b:	e8 d0 fe ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a340:	83 c4 2c             	add    esp,0x2c
c001a343:	25 00 ff 00 00       	and    eax,0xff00
c001a348:	09 d8                	or     eax,ebx
c001a34a:	5b                   	pop    ebx
c001a34b:	5e                   	pop    esi
c001a34c:	5f                   	pop    edi
c001a34d:	5d                   	pop    ebp
c001a34e:	c3                   	ret    
c001a34f:	90                   	nop

c001a350 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a350:	83 ec 18             	sub    esp,0x18
c001a353:	6a 08                	push   0x8
c001a355:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a35a:	50                   	push   eax
c001a35b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a360:	50                   	push   eax
c001a361:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a366:	50                   	push   eax
c001a367:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a36b:	e8 a0 fe ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a370:	83 c4 2c             	add    esp,0x2c
c001a373:	0f b6 c4             	movzx  eax,ah
c001a376:	c3                   	ret    
c001a377:	90                   	nop

c001a378 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a378:	83 ec 18             	sub    esp,0x18
c001a37b:	6a 08                	push   0x8
c001a37d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a382:	50                   	push   eax
c001a383:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a388:	50                   	push   eax
c001a389:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a38e:	50                   	push   eax
c001a38f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a393:	e8 78 fe ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a398:	83 c4 2c             	add    esp,0x2c
c001a39b:	c3                   	ret    

c001a39c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a39c:	83 ec 18             	sub    esp,0x18
c001a39f:	6a 3c                	push   0x3c
c001a3a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3a6:	50                   	push   eax
c001a3a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3ac:	50                   	push   eax
c001a3ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3b2:	50                   	push   eax
c001a3b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3b7:	e8 54 fe ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3bc:	83 c4 2c             	add    esp,0x2c
c001a3bf:	c3                   	ret    

c001a3c0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a3c0:	83 ec 18             	sub    esp,0x18
c001a3c3:	6a 18                	push   0x18
c001a3c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3ca:	50                   	push   eax
c001a3cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3d0:	50                   	push   eax
c001a3d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3d6:	50                   	push   eax
c001a3d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3db:	e8 30 fe ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3e0:	83 c4 2c             	add    esp,0x2c
c001a3e3:	0f b6 c4             	movzx  eax,ah
c001a3e6:	c3                   	ret    
c001a3e7:	90                   	nop

c001a3e8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a3e8:	55                   	push   ebp
c001a3e9:	57                   	push   edi
c001a3ea:	56                   	push   esi
c001a3eb:	53                   	push   ebx
c001a3ec:	83 ec 28             	sub    esp,0x28
c001a3ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a3f3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a3f8:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a3fd:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a402:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a409:	8d 43 12             	lea    eax,[ebx+0x12]
c001a40c:	83 c3 10             	add    ebx,0x10
c001a40f:	0f b6 c0             	movzx  eax,al
c001a412:	0f b6 db             	movzx  ebx,bl
c001a415:	50                   	push   eax
c001a416:	51                   	push   ecx
c001a417:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a41b:	57                   	push   edi
c001a41c:	55                   	push   ebp
c001a41d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a421:	e8 ea fd ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a426:	83 c4 14             	add    esp,0x14
c001a429:	53                   	push   ebx
c001a42a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a42e:	51                   	push   ecx
c001a42f:	89 c6                	mov    esi,eax
c001a431:	57                   	push   edi
c001a432:	55                   	push   ebp
c001a433:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a437:	c1 e6 10             	shl    esi,0x10
c001a43a:	e8 d1 fd ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a43f:	83 c4 3c             	add    esp,0x3c
c001a442:	5b                   	pop    ebx
c001a443:	0f b7 c0             	movzx  eax,ax
c001a446:	09 f0                	or     eax,esi
c001a448:	5e                   	pop    esi
c001a449:	5f                   	pop    edi
c001a44a:	5d                   	pop    ebp
c001a44b:	c3                   	ret    

c001a44c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a44c:	55                   	push   ebp
c001a44d:	57                   	push   edi
c001a44e:	56                   	push   esi
c001a44f:	53                   	push   ebx
c001a450:	83 ec 0c             	sub    esp,0xc
c001a453:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a457:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a45b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a45f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a463:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001a469:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a46d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a471:	83 f9 01             	cmp    ecx,0x1
c001a474:	75 5d                	jne    c001a4d3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001a476:	0f b6 c8             	movzx  ecx,al
c001a479:	89 f0                	mov    eax,esi
c001a47b:	25 fc 00 00 00       	and    eax,0xfc
c001a480:	0f b6 d2             	movzx  edx,dl
c001a483:	c1 e1 10             	shl    ecx,0x10
c001a486:	c1 e2 0b             	shl    edx,0xb
c001a489:	09 c1                	or     ecx,eax
c001a48b:	89 f8                	mov    eax,edi
c001a48d:	0f b6 f8             	movzx  edi,al
c001a490:	c1 e7 08             	shl    edi,0x8
c001a493:	09 f9                	or     ecx,edi
c001a495:	09 d1                	or     ecx,edx
c001a497:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a49c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a4a2:	89 c8                	mov    eax,ecx
c001a4a4:	ef                   	out    dx,eax
c001a4a5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a4aa:	ed                   	in     eax,dx
c001a4ab:	83 e6 02             	and    esi,0x2
c001a4ae:	0f b7 db             	movzx  ebx,bx
c001a4b1:	74 0a                	je     c001a4bd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001a4b3:	c1 e3 10             	shl    ebx,0x10
c001a4b6:	0f b7 d0             	movzx  edx,ax
c001a4b9:	09 d3                	or     ebx,edx
c001a4bb:	eb 05                	jmp    c001a4c2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001a4bd:	66 31 c0             	xor    ax,ax
c001a4c0:	09 c3                	or     ebx,eax
c001a4c2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a4c7:	89 c8                	mov    eax,ecx
c001a4c9:	ef                   	out    dx,eax
c001a4ca:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a4cf:	89 d8                	mov    eax,ebx
c001a4d1:	eb 41                	jmp    c001a514 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a4d3:	83 f9 02             	cmp    ecx,0x2
c001a4d6:	75 45                	jne    c001a51d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001a4d8:	89 f1                	mov    ecx,esi
c001a4da:	83 ec 0c             	sub    esp,0xc
c001a4dd:	0f b6 f1             	movzx  esi,cl
c001a4e0:	89 f9                	mov    ecx,edi
c001a4e2:	56                   	push   esi
c001a4e3:	0f b6 f9             	movzx  edi,cl
c001a4e6:	57                   	push   edi
c001a4e7:	0f b6 d2             	movzx  edx,dl
c001a4ea:	52                   	push   edx
c001a4eb:	0f b6 c0             	movzx  eax,al
c001a4ee:	50                   	push   eax
c001a4ef:	55                   	push   ebp
c001a4f0:	e8 a5 fc ff ff       	call   c001a19a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4f5:	89 c2                	mov    edx,eax
c001a4f7:	ed                   	in     eax,dx
c001a4f8:	83 c4 20             	add    esp,0x20
c001a4fb:	f6 c2 02             	test   dl,0x2
c001a4fe:	0f b7 db             	movzx  ebx,bx
c001a501:	74 0c                	je     c001a50f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001a503:	0f b7 c8             	movzx  ecx,ax
c001a506:	89 d8                	mov    eax,ebx
c001a508:	c1 e0 10             	shl    eax,0x10
c001a50b:	09 c8                	or     eax,ecx
c001a50d:	eb 05                	jmp    c001a514 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a50f:	66 31 c0             	xor    ax,ax
c001a512:	09 d8                	or     eax,ebx
c001a514:	ef                   	out    dx,eax
c001a515:	83 c4 0c             	add    esp,0xc
c001a518:	5b                   	pop    ebx
c001a519:	5e                   	pop    esi
c001a51a:	5f                   	pop    edi
c001a51b:	5d                   	pop    ebp
c001a51c:	c3                   	ret    
c001a51d:	c7 44 24 20 5f 1a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021a5f
c001a525:	83 c4 0c             	add    esp,0xc
c001a528:	5b                   	pop    ebx
c001a529:	5e                   	pop    esi
c001a52a:	5f                   	pop    edi
c001a52b:	5d                   	pop    ebp
c001a52c:	e9 1c 63 ff ff       	jmp    c001084d <KePanic(char const*)>
c001a531:	90                   	nop

c001a532 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a532:	55                   	push   ebp
c001a533:	57                   	push   edi
c001a534:	56                   	push   esi
c001a535:	53                   	push   ebx
c001a536:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a53c:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a543:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001a54a:	0f 85 bd 00 00 00    	jne    c001a60d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a550:	83 ec 0c             	sub    esp,0xc
c001a553:	68 14 01 00 00       	push   0x114
c001a558:	e8 6e d5 fe ff       	call   c0007acb <malloc>
c001a55d:	83 c4 0c             	add    esp,0xc
c001a560:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a566:	68 65 1a 02 c0       	push   0xc0021a65
c001a56b:	50                   	push   eax
c001a56c:	89 c3                	mov    ebx,eax
c001a56e:	e8 b9 09 ff ff       	call   c000af2c <File::File(char const*, Process*)>
c001a573:	83 c4 10             	add    esp,0x10
c001a576:	85 db                	test   ebx,ebx
c001a578:	0f 84 6b 02 00 00    	je     c001a7e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a57e:	57                   	push   edi
c001a57f:	57                   	push   edi
c001a580:	6a 01                	push   0x1
c001a582:	53                   	push   ebx
c001a583:	e8 60 0a ff ff       	call   c000afe8 <File::open(FileOpenMode)>
c001a588:	83 c4 10             	add    esp,0x10
c001a58b:	85 c0                	test   eax,eax
c001a58d:	0f 85 56 02 00 00    	jne    c001a7e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a593:	52                   	push   edx
c001a594:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a598:	50                   	push   eax
c001a599:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a59d:	50                   	push   eax
c001a59e:	53                   	push   ebx
c001a59f:	e8 f0 0c ff ff       	call   c000b294 <File::stat(unsigned long long*, bool*)>
c001a5a4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5a8:	40                   	inc    eax
c001a5a9:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5ac:	e8 1a d5 fe ff       	call   c0007acb <malloc>
c001a5b1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a5b5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a5b9:	59                   	pop    ecx
c001a5ba:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a5bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a5c1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a5c5:	51                   	push   ecx
c001a5c6:	50                   	push   eax
c001a5c7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a5cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a5cf:	53                   	push   ebx
c001a5d0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a5d3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a5d7:	83 c4 20             	add    esp,0x20
c001a5da:	89 c8                	mov    eax,ecx
c001a5dc:	99                   	cdq    
c001a5dd:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a5e1:	0f 85 02 02 00 00    	jne    c001a7e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a5e7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a5eb:	0f 85 f8 01 00 00    	jne    c001a7e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a5f1:	83 ec 0c             	sub    esp,0xc
c001a5f4:	53                   	push   ebx
c001a5f5:	e8 4c 0a ff ff       	call   c000b046 <File::close()>
c001a5fa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5fe:	83 c4 10             	add    esp,0x10
c001a601:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a608:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a60d:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a615:	31 c9                	xor    ecx,ecx
c001a617:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001a61e:	8b 2d 44 8b 02 c0    	mov    ebp,DWORD PTR ds:0xc0028b44
c001a624:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a62b:	8b 15 48 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b48
c001a631:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a636:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a63e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a643:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a64b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a64f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a657:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a65b:	39 cd                	cmp    ebp,ecx
c001a65d:	0f 8e 86 01 00 00    	jle    c001a7e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a663:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001a666:	d4 40                	aam    0x40
c001a668:	d5 39                	aad    0x39
c001a66a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a66e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001a672:	d4 40                	aam    0x40
c001a674:	d5 39                	aad    0x39
c001a676:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a67a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001a67e:	d4 40                	aam    0x40
c001a680:	d5 39                	aad    0x39
c001a682:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a686:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001a68a:	d4 40                	aam    0x40
c001a68c:	d5 39                	aad    0x39
c001a68e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a692:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001a696:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a69a:	3c 56                	cmp    al,0x56
c001a69c:	74 47                	je     c001a6e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001a69e:	d4 40                	aam    0x40
c001a6a0:	d5 39                	aad    0x39
c001a6a2:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a6a5:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001a6a9:	0f b6 db             	movzx  ebx,bl
c001a6ac:	c1 e3 04             	shl    ebx,0x4
c001a6af:	d4 40                	aam    0x40
c001a6b1:	d5 39                	aad    0x39
c001a6b3:	83 e8 30             	sub    eax,0x30
c001a6b6:	0f b6 c0             	movzx  eax,al
c001a6b9:	09 c3                	or     ebx,eax
c001a6bb:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001a6bf:	c1 e3 04             	shl    ebx,0x4
c001a6c2:	d4 40                	aam    0x40
c001a6c4:	d5 39                	aad    0x39
c001a6c6:	83 e8 30             	sub    eax,0x30
c001a6c9:	0f b6 c0             	movzx  eax,al
c001a6cc:	09 c3                	or     ebx,eax
c001a6ce:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001a6d2:	c1 e3 04             	shl    ebx,0x4
c001a6d5:	d4 40                	aam    0x40
c001a6d7:	d5 39                	aad    0x39
c001a6d9:	83 e8 30             	sub    eax,0x30
c001a6dc:	0f b6 c0             	movzx  eax,al
c001a6df:	09 c3                	or     ebx,eax
c001a6e1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a6e5:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001a6e9:	80 fb 58             	cmp    bl,0x58
c001a6ec:	74 49                	je     c001a737 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001a6ee:	88 d8                	mov    al,bl
c001a6f0:	d4 40                	aam    0x40
c001a6f2:	d5 39                	aad    0x39
c001a6f4:	83 e8 30             	sub    eax,0x30
c001a6f7:	0f b6 f8             	movzx  edi,al
c001a6fa:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001a6fe:	c1 e7 04             	shl    edi,0x4
c001a701:	d4 40                	aam    0x40
c001a703:	d5 39                	aad    0x39
c001a705:	83 e8 30             	sub    eax,0x30
c001a708:	0f b6 c0             	movzx  eax,al
c001a70b:	09 c7                	or     edi,eax
c001a70d:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001a711:	c1 e7 04             	shl    edi,0x4
c001a714:	d4 40                	aam    0x40
c001a716:	d5 39                	aad    0x39
c001a718:	83 e8 30             	sub    eax,0x30
c001a71b:	0f b6 c0             	movzx  eax,al
c001a71e:	09 c7                	or     edi,eax
c001a720:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001a724:	c1 e7 04             	shl    edi,0x4
c001a727:	d4 40                	aam    0x40
c001a729:	d5 39                	aad    0x39
c001a72b:	83 e8 30             	sub    eax,0x30
c001a72e:	0f b6 c0             	movzx  eax,al
c001a731:	09 c7                	or     edi,eax
c001a733:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001a737:	8d 41 10             	lea    eax,[ecx+0x10]
c001a73a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a73e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001a742:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001a746:	83 f9 0a             	cmp    ecx,0xa
c001a749:	74 07                	je     c001a752 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001a74b:	47                   	inc    edi
c001a74c:	39 c5                	cmp    ebp,eax
c001a74e:	75 16                	jne    c001a766 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001a750:	89 e8                	mov    eax,ebp
c001a752:	83 f9 0a             	cmp    ecx,0xa
c001a755:	0f 94 c1             	sete   cl
c001a758:	0f b6 c9             	movzx  ecx,cl
c001a75b:	01 c1                	add    ecx,eax
c001a75d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a762:	75 0f                	jne    c001a773 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a764:	eb 1c                	jmp    c001a782 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001a766:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a769:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001a76d:	40                   	inc    eax
c001a76e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001a771:	eb cb                	jmp    c001a73e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001a773:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a777:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a77c:	0f 85 d9 fe ff ff    	jne    c001a65b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a782:	80 fb 58             	cmp    bl,0x58
c001a785:	74 10                	je     c001a797 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001a787:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a78c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001a791:	0f 85 c4 fe ff ff    	jne    c001a65b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a797:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a79b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a79f:	83 e8 30             	sub    eax,0x30
c001a7a2:	c1 e0 04             	shl    eax,0x4
c001a7a5:	83 eb 30             	sub    ebx,0x30
c001a7a8:	09 d8                	or     eax,ebx
c001a7aa:	0f b6 c0             	movzx  eax,al
c001a7ad:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a7b1:	0f 85 a4 fe ff ff    	jne    c001a65b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a7b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7bb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a7bf:	83 e8 30             	sub    eax,0x30
c001a7c2:	c1 e0 04             	shl    eax,0x4
c001a7c5:	83 eb 30             	sub    ebx,0x30
c001a7c8:	09 d8                	or     eax,ebx
c001a7ca:	0f b6 c0             	movzx  eax,al
c001a7cd:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a7d1:	0f 85 84 fe ff ff    	jne    c001a65b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a7d7:	50                   	push   eax
c001a7d8:	50                   	push   eax
c001a7d9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a7dd:	50                   	push   eax
c001a7de:	56                   	push   esi
c001a7df:	e8 6c 5e fe ff       	call   c0000650 <strcpy>
c001a7e4:	83 c4 10             	add    esp,0x10
c001a7e7:	eb 05                	jmp    c001a7ee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001a7e9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7ec:	31 f6                	xor    esi,esi
c001a7ee:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a7f4:	89 f0                	mov    eax,esi
c001a7f6:	5b                   	pop    ebx
c001a7f7:	5e                   	pop    esi
c001a7f8:	5f                   	pop    edi
c001a7f9:	5d                   	pop    ebp
c001a7fa:	c3                   	ret    
c001a7fb:	90                   	nop

c001a7fc <PCI::checkBus(unsigned char)>:
c001a7fc:	56                   	push   esi
c001a7fd:	53                   	push   ebx
c001a7fe:	31 db                	xor    ebx,ebx
c001a800:	51                   	push   ecx
c001a801:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a806:	52                   	push   edx
c001a807:	53                   	push   ebx
c001a808:	43                   	inc    ebx
c001a809:	56                   	push   esi
c001a80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a80e:	e8 0f 03 00 00       	call   c001ab22 <PCI::checkDevice(unsigned char, unsigned char)>
c001a813:	83 c4 10             	add    esp,0x10
c001a816:	83 fb 20             	cmp    ebx,0x20
c001a819:	75 eb                	jne    c001a806 <PCI::checkBus(unsigned char)+0xa>
c001a81b:	58                   	pop    eax
c001a81c:	5b                   	pop    ebx
c001a81d:	5e                   	pop    esi
c001a81e:	c3                   	ret    
c001a81f:	90                   	nop

c001a820 <PCI::foundDevice(PCIDeviceInfo)>:
c001a820:	55                   	push   ebp
c001a821:	57                   	push   edi
c001a822:	56                   	push   esi
c001a823:	53                   	push   ebx
c001a824:	83 ec 1c             	sub    esp,0x1c
c001a827:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a82c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a830:	3d ff ff 00 00       	cmp    eax,0xffff
c001a835:	0f 84 63 01 00 00    	je     c001a99e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a83b:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a840:	66 3d 06 04          	cmp    ax,0x406
c001a844:	75 2c                	jne    c001a872 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a846:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a84b:	50                   	push   eax
c001a84c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a851:	50                   	push   eax
c001a852:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a857:	50                   	push   eax
c001a858:	53                   	push   ebx
c001a859:	e8 62 fb ff ff       	call   c001a3c0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a85e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a862:	0f b6 c0             	movzx  eax,al
c001a865:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a869:	83 c4 2c             	add    esp,0x2c
c001a86c:	5b                   	pop    ebx
c001a86d:	5e                   	pop    esi
c001a86e:	5f                   	pop    edi
c001a86f:	5d                   	pop    ebp
c001a870:	eb 8a                	jmp    c001a7fc <PCI::checkBus(unsigned char)>
c001a872:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001a877:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a87d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a881:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a885:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a889:	85 d2                	test   edx,edx
c001a88b:	74 34                	je     c001a8c1 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a88d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a890:	85 c9                	test   ecx,ecx
c001a892:	74 29                	je     c001a8bd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a894:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001a89a:	31 f5                	xor    ebp,esi
c001a89c:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001a8a2:	75 19                	jne    c001a8bd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a8a4:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001a8aa:	75 11                	jne    c001a8bd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a8ac:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a8b3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a8b7:	0f 84 e1 00 00 00    	je     c001a99e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a8bd:	8b 12                	mov    edx,DWORD PTR [edx]
c001a8bf:	eb c8                	jmp    c001a889 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a8c1:	3d 01 06 00 00       	cmp    eax,0x601
c001a8c6:	75 19                	jne    c001a8e1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a8c8:	83 ec 0c             	sub    esp,0xc
c001a8cb:	68 64 01 00 00       	push   0x164
c001a8d0:	e8 f6 d1 fe ff       	call   c0007acb <malloc>
c001a8d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8d8:	89 c5                	mov    ebp,eax
c001a8da:	e8 ab 0e 00 00       	call   c001b78a <SATABus::SATABus()>
c001a8df:	eb 1e                	jmp    c001a8ff <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a8e1:	3d 01 01 00 00       	cmp    eax,0x101
c001a8e6:	75 62                	jne    c001a94a <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001a8e8:	83 ec 0c             	sub    esp,0xc
c001a8eb:	68 70 02 00 00       	push   0x270
c001a8f0:	e8 d6 d1 fe ff       	call   c0007acb <malloc>
c001a8f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8f8:	89 c5                	mov    ebp,eax
c001a8fa:	e8 f3 02 00 00       	call   c001abf2 <IDE::IDE()>
c001a8ff:	58                   	pop    eax
c001a900:	5a                   	pop    edx
c001a901:	55                   	push   ebp
c001a902:	53                   	push   ebx
c001a903:	e8 dc 14 ff ff       	call   c000bde4 <Device::addChild(Device*)>
c001a908:	83 ec 1c             	sub    esp,0x1c
c001a90b:	b9 09 00 00 00       	mov    ecx,0x9
c001a910:	fc                   	cld    
c001a911:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a915:	89 e7                	mov    edi,esp
c001a917:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a919:	55                   	push   ebp
c001a91a:	e8 0b 14 ff ff       	call   c000bd2a <Device::preOpenPCI(PCIDeviceInfo)>
c001a91f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a922:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a926:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a92e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a936:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a93e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a941:	83 c4 4c             	add    esp,0x4c
c001a944:	5b                   	pop    ebx
c001a945:	5e                   	pop    esi
c001a946:	5f                   	pop    edi
c001a947:	5d                   	pop    ebp
c001a948:	ff e0                	jmp    eax
c001a94a:	83 ec 0c             	sub    esp,0xc
c001a94d:	68 58 01 00 00       	push   0x158
c001a952:	e8 74 d1 fe ff       	call   c0007acb <malloc>
c001a957:	5a                   	pop    edx
c001a958:	59                   	pop    ecx
c001a959:	68 7e 1a 02 c0       	push   0xc0021a7e
c001a95e:	50                   	push   eax
c001a95f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a963:	e8 1a 17 ff ff       	call   c000c082 <DriverlessDevice::DriverlessDevice(char const*)>
c001a968:	5e                   	pop    esi
c001a969:	5f                   	pop    edi
c001a96a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a96e:	50                   	push   eax
c001a96f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a973:	53                   	push   ebx
c001a974:	e8 6b 14 ff ff       	call   c000bde4 <Device::addChild(Device*)>
c001a979:	83 c4 10             	add    esp,0x10
c001a97c:	b9 09 00 00 00       	mov    ecx,0x9
c001a981:	fc                   	cld    
c001a982:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a986:	89 fe                	mov    esi,edi
c001a988:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a98a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a98e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a992:	83 c4 1c             	add    esp,0x1c
c001a995:	5b                   	pop    ebx
c001a996:	5e                   	pop    esi
c001a997:	5f                   	pop    edi
c001a998:	5d                   	pop    ebp
c001a999:	e9 8c 13 ff ff       	jmp    c000bd2a <Device::preOpenPCI(PCIDeviceInfo)>
c001a99e:	83 c4 1c             	add    esp,0x1c
c001a9a1:	5b                   	pop    ebx
c001a9a2:	5e                   	pop    esi
c001a9a3:	5f                   	pop    edi
c001a9a4:	5d                   	pop    ebp
c001a9a5:	c3                   	ret    

c001a9a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a9a6:	55                   	push   ebp
c001a9a7:	57                   	push   edi
c001a9a8:	56                   	push   esi
c001a9a9:	53                   	push   ebx
c001a9aa:	83 ec 68             	sub    esp,0x68
c001a9ad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9b4:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a9b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a9bc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9c3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001a9c8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9cc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9d3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001a9d8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a9dc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001a9e1:	6a 0c                	push   0xc
c001a9e3:	57                   	push   edi
c001a9e4:	53                   	push   ebx
c001a9e5:	56                   	push   esi
c001a9e6:	55                   	push   ebp
c001a9e7:	e8 24 f8 ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9ec:	83 c4 20             	add    esp,0x20
c001a9ef:	57                   	push   edi
c001a9f0:	53                   	push   ebx
c001a9f1:	56                   	push   esi
c001a9f2:	55                   	push   ebp
c001a9f3:	e8 0e f9 ff ff       	call   c001a306 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a9f8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a9fd:	57                   	push   edi
c001a9fe:	53                   	push   ebx
c001a9ff:	56                   	push   esi
c001aa00:	55                   	push   ebp
c001aa01:	e8 96 f9 ff ff       	call   c001a39c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001aa06:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001aa0a:	83 c4 14             	add    esp,0x14
c001aa0d:	6a 3c                	push   0x3c
c001aa0f:	57                   	push   edi
c001aa10:	53                   	push   ebx
c001aa11:	56                   	push   esi
c001aa12:	55                   	push   ebp
c001aa13:	e8 f8 f7 ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa18:	0f b6 c4             	movzx  eax,ah
c001aa1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa1f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001aa23:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001aa27:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001aa2c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001aa32:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001aa38:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa3c:	83 c4 20             	add    esp,0x20
c001aa3f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001aa44:	74 30                	je     c001aa76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa46:	31 c0                	xor    eax,eax
c001aa48:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aa4c:	7e 28                	jle    c001aa76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa4e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001aa56:	39 cb                	cmp    ebx,ecx
c001aa58:	75 19                	jne    c001aa73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa5a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aa62:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aa66:	75 0b                	jne    c001aa73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa68:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aa6f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aa73:	40                   	inc    eax
c001aa74:	eb d2                	jmp    c001aa48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aa76:	31 d2                	xor    edx,edx
c001aa78:	83 ec 0c             	sub    esp,0xc
c001aa7b:	57                   	push   edi
c001aa7c:	53                   	push   ebx
c001aa7d:	56                   	push   esi
c001aa7e:	52                   	push   edx
c001aa7f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa83:	55                   	push   ebp
c001aa84:	e8 5f f9 ff ff       	call   c001a3e8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa89:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa8d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aa91:	42                   	inc    edx
c001aa92:	83 c4 20             	add    esp,0x20
c001aa95:	83 fa 06             	cmp    edx,0x6
c001aa98:	75 de                	jne    c001aa78 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001aa9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa9e:	83 ec 0c             	sub    esp,0xc
c001aaa1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aaa5:	c1 e2 08             	shl    edx,0x8
c001aaa8:	0f b6 c4             	movzx  eax,ah
c001aaab:	09 d0                	or     eax,edx
c001aaad:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aab2:	6a 02                	push   0x2
c001aab4:	57                   	push   edi
c001aab5:	53                   	push   ebx
c001aab6:	56                   	push   esi
c001aab7:	55                   	push   ebp
c001aab8:	e8 53 f7 ff ff       	call   c001a210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aabd:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aac2:	83 c4 20             	add    esp,0x20
c001aac5:	57                   	push   edi
c001aac6:	53                   	push   ebx
c001aac7:	56                   	push   esi
c001aac8:	55                   	push   ebp
c001aac9:	e8 82 f8 ff ff       	call   c001a350 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aace:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aad2:	57                   	push   edi
c001aad3:	53                   	push   ebx
c001aad4:	56                   	push   esi
c001aad5:	55                   	push   ebp
c001aad6:	e8 df f7 ff ff       	call   c001a2ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aadb:	b9 09 00 00 00       	mov    ecx,0x9
c001aae0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001aae5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aae9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001aaed:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001aaf1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001aaf5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001aaf9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001aafd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ab01:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ab05:	83 ec 0c             	sub    esp,0xc
c001ab08:	fc                   	cld    
c001ab09:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ab0d:	89 e7                	mov    edi,esp
c001ab0f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ab11:	55                   	push   ebp
c001ab12:	e8 09 fd ff ff       	call   c001a820 <PCI::foundDevice(PCIDeviceInfo)>
c001ab17:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ab1d:	5b                   	pop    ebx
c001ab1e:	5e                   	pop    esi
c001ab1f:	5f                   	pop    edi
c001ab20:	5d                   	pop    ebp
c001ab21:	c3                   	ret    

c001ab22 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ab22:	55                   	push   ebp
c001ab23:	57                   	push   edi
c001ab24:	56                   	push   esi
c001ab25:	53                   	push   ebx
c001ab26:	83 ec 0c             	sub    esp,0xc
c001ab29:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ab2e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ab33:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ab37:	6a 00                	push   0x0
c001ab39:	56                   	push   esi
c001ab3a:	57                   	push   edi
c001ab3b:	55                   	push   ebp
c001ab3c:	e8 79 f7 ff ff       	call   c001a2ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab41:	6a 00                	push   0x0
c001ab43:	56                   	push   esi
c001ab44:	57                   	push   edi
c001ab45:	55                   	push   ebp
c001ab46:	e8 5b fe ff ff       	call   c001a9a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab4b:	83 c4 20             	add    esp,0x20
c001ab4e:	6a 00                	push   0x0
c001ab50:	56                   	push   esi
c001ab51:	57                   	push   edi
c001ab52:	55                   	push   ebp
c001ab53:	e8 86 f7 ff ff       	call   c001a2de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab58:	83 c4 10             	add    esp,0x10
c001ab5b:	a8 80                	test   al,0x80
c001ab5d:	74 2d                	je     c001ab8c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001ab5f:	bb 01 00 00 00       	mov    ebx,0x1
c001ab64:	53                   	push   ebx
c001ab65:	56                   	push   esi
c001ab66:	57                   	push   edi
c001ab67:	55                   	push   ebp
c001ab68:	e8 4d f7 ff ff       	call   c001a2ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab6d:	83 c4 10             	add    esp,0x10
c001ab70:	0f b7 c0             	movzx  eax,ax
c001ab73:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab78:	74 0c                	je     c001ab86 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ab7a:	53                   	push   ebx
c001ab7b:	56                   	push   esi
c001ab7c:	57                   	push   edi
c001ab7d:	55                   	push   ebp
c001ab7e:	e8 23 fe ff ff       	call   c001a9a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab83:	83 c4 10             	add    esp,0x10
c001ab86:	43                   	inc    ebx
c001ab87:	83 fb 08             	cmp    ebx,0x8
c001ab8a:	75 d8                	jne    c001ab64 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ab8c:	83 c4 0c             	add    esp,0xc
c001ab8f:	5b                   	pop    ebx
c001ab90:	5e                   	pop    esi
c001ab91:	5f                   	pop    edi
c001ab92:	5d                   	pop    ebp
c001ab93:	c3                   	ret    

c001ab94 <PCI::detect()>:
c001ab94:	56                   	push   esi
c001ab95:	53                   	push   ebx
c001ab96:	53                   	push   ebx
c001ab97:	31 db                	xor    ebx,ebx
c001ab99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab9d:	6a 00                	push   0x0
c001ab9f:	6a 00                	push   0x0
c001aba1:	6a 00                	push   0x0
c001aba3:	56                   	push   esi
c001aba4:	e8 35 f7 ff ff       	call   c001a2de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001aba9:	83 c4 10             	add    esp,0x10
c001abac:	a8 80                	test   al,0x80
c001abae:	75 21                	jne    c001abd1 <PCI::detect()+0x3d>
c001abb0:	51                   	push   ecx
c001abb1:	51                   	push   ecx
c001abb2:	6a 00                	push   0x0
c001abb4:	56                   	push   esi
c001abb5:	e8 42 fc ff ff       	call   c001a7fc <PCI::checkBus(unsigned char)>
c001abba:	83 c4 10             	add    esp,0x10
c001abbd:	eb 2a                	jmp    c001abe9 <PCI::detect()+0x55>
c001abbf:	52                   	push   edx
c001abc0:	52                   	push   edx
c001abc1:	53                   	push   ebx
c001abc2:	43                   	inc    ebx
c001abc3:	56                   	push   esi
c001abc4:	e8 33 fc ff ff       	call   c001a7fc <PCI::checkBus(unsigned char)>
c001abc9:	83 c4 10             	add    esp,0x10
c001abcc:	83 fb 08             	cmp    ebx,0x8
c001abcf:	74 18                	je     c001abe9 <PCI::detect()+0x55>
c001abd1:	53                   	push   ebx
c001abd2:	6a 00                	push   0x0
c001abd4:	6a 00                	push   0x0
c001abd6:	56                   	push   esi
c001abd7:	e8 de f6 ff ff       	call   c001a2ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001abdc:	83 c4 10             	add    esp,0x10
c001abdf:	0f b7 c0             	movzx  eax,ax
c001abe2:	3d ff ff 00 00       	cmp    eax,0xffff
c001abe7:	74 d6                	je     c001abbf <PCI::detect()+0x2b>
c001abe9:	58                   	pop    eax
c001abea:	5b                   	pop    ebx
c001abeb:	5e                   	pop    esi
c001abec:	c3                   	ret    
c001abed:	90                   	nop

c001abee <IDE::close(int, int, void*)>:
c001abee:	83 c8 ff             	or     eax,0xffffffff
c001abf1:	c3                   	ret    

c001abf2 <IDE::IDE()>:
c001abf2:	83 ec 0c             	sub    esp,0xc
c001abf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf9:	83 ec 08             	sub    esp,0x8
c001abfc:	68 c4 1a 02 c0       	push   0xc0021ac4
c001ac01:	50                   	push   eax
c001ac02:	e8 21 15 ff ff       	call   c000c128 <HardDiskController::HardDiskController(char const*)>
c001ac07:	83 c4 10             	add    esp,0x10
c001ac0a:	ba 54 1b 02 c0       	mov    edx,0xc0021b54
c001ac0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac13:	89 10                	mov    DWORD PTR [eax],edx
c001ac15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac19:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ac20:	90                   	nop
c001ac21:	83 c4 0c             	add    esp,0xc
c001ac24:	c3                   	ret    
c001ac25:	90                   	nop

c001ac26 <IDE::prepareInterrupt(unsigned char)>:
c001ac26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac2f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ac37:	c3                   	ret    

c001ac38 <selectDrive(unsigned char, unsigned char)>:
c001ac38:	c3                   	ret    
c001ac39:	90                   	nop

c001ac3a <IDE::getBase(unsigned char)>:
c001ac3a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ac3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac43:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ac4b:	c3                   	ret    

c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ac4c:	55                   	push   ebp
c001ac4d:	57                   	push   edi
c001ac4e:	56                   	push   esi
c001ac4f:	53                   	push   ebx
c001ac50:	83 ec 1c             	sub    esp,0x1c
c001ac53:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ac57:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ac5b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ac5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac63:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ac66:	80 f9 03             	cmp    cl,0x3
c001ac69:	77 4f                	ja     c001acba <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ac6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac6f:	0f b6 f2             	movzx  esi,dl
c001ac72:	0f b6 db             	movzx  ebx,bl
c001ac75:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ac78:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ac7d:	80 ca 80             	or     dl,0x80
c001ac80:	52                   	push   edx
c001ac81:	6a 0c                	push   0xc
c001ac83:	56                   	push   esi
c001ac84:	57                   	push   edi
c001ac85:	e8 c2 ff ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac8a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ac8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac93:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ac97:	ee                   	out    dx,al
c001ac98:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ac9d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001aca1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001aca5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001acad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001acb1:	83 c4 2c             	add    esp,0x2c
c001acb4:	5b                   	pop    ebx
c001acb5:	5e                   	pop    esi
c001acb6:	5f                   	pop    edi
c001acb7:	5d                   	pop    ebp
c001acb8:	eb 92                	jmp    c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acba:	0f b6 cb             	movzx  ecx,bl
c001acbd:	83 f9 07             	cmp    ecx,0x7
c001acc0:	77 12                	ja     c001acd4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001acc2:	0f b6 d2             	movzx  edx,dl
c001acc5:	0f b6 db             	movzx  ebx,bl
c001acc8:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001acd0:	01 da                	add    edx,ebx
c001acd2:	eb 2f                	jmp    c001ad03 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001acd4:	83 f9 0d             	cmp    ecx,0xd
c001acd7:	77 13                	ja     c001acec <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001acd9:	0f b6 d2             	movzx  edx,dl
c001acdc:	0f b6 db             	movzx  ebx,bl
c001acdf:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ace6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001acea:	eb 17                	jmp    c001ad03 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001acec:	83 f9 15             	cmp    ecx,0x15
c001acef:	77 13                	ja     c001ad04 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001acf1:	0f b6 d2             	movzx  edx,dl
c001acf4:	0f b6 db             	movzx  ebx,bl
c001acf7:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001acff:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ad03:	ee                   	out    dx,al
c001ad04:	83 c4 1c             	add    esp,0x1c
c001ad07:	5b                   	pop    ebx
c001ad08:	5e                   	pop    esi
c001ad09:	5f                   	pop    edi
c001ad0a:	5d                   	pop    ebp
c001ad0b:	c3                   	ret    

c001ad0c <IDE::read(unsigned char, unsigned char)>:
c001ad0c:	57                   	push   edi
c001ad0d:	56                   	push   esi
c001ad0e:	53                   	push   ebx
c001ad0f:	83 ec 10             	sub    esp,0x10
c001ad12:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ad16:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad1a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ad1e:	8d 42 f8             	lea    eax,[edx-0x8]
c001ad21:	3c 03                	cmp    al,0x3
c001ad23:	77 48                	ja     c001ad6d <IDE::read(unsigned char, unsigned char)+0x61>
c001ad25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad29:	0f b6 f1             	movzx  esi,cl
c001ad2c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001ad2f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001ad34:	0c 80                	or     al,0x80
c001ad36:	50                   	push   eax
c001ad37:	6a 0c                	push   0xc
c001ad39:	56                   	push   esi
c001ad3a:	53                   	push   ebx
c001ad3b:	e8 0c ff ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad44:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001ad49:	0f b6 d2             	movzx  edx,dl
c001ad4c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ad50:	ec                   	in     al,dx
c001ad51:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ad55:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001ad5a:	52                   	push   edx
c001ad5b:	6a 0c                	push   0xc
c001ad5d:	56                   	push   esi
c001ad5e:	53                   	push   ebx
c001ad5f:	e8 e8 fe ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad64:	83 c4 20             	add    esp,0x20
c001ad67:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad6b:	eb 4c                	jmp    c001adb9 <IDE::read(unsigned char, unsigned char)+0xad>
c001ad6d:	0f b6 f2             	movzx  esi,dl
c001ad70:	83 fe 07             	cmp    esi,0x7
c001ad73:	77 12                	ja     c001ad87 <IDE::read(unsigned char, unsigned char)+0x7b>
c001ad75:	0f b6 c9             	movzx  ecx,cl
c001ad78:	0f b6 d2             	movzx  edx,dl
c001ad7b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001ad83:	01 c2                	add    edx,eax
c001ad85:	eb 31                	jmp    c001adb8 <IDE::read(unsigned char, unsigned char)+0xac>
c001ad87:	83 fe 0d             	cmp    esi,0xd
c001ad8a:	77 13                	ja     c001ad9f <IDE::read(unsigned char, unsigned char)+0x93>
c001ad8c:	0f b6 c9             	movzx  ecx,cl
c001ad8f:	0f b6 d2             	movzx  edx,dl
c001ad92:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001ad99:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ad9d:	eb 19                	jmp    c001adb8 <IDE::read(unsigned char, unsigned char)+0xac>
c001ad9f:	31 c0                	xor    eax,eax
c001ada1:	83 fe 15             	cmp    esi,0x15
c001ada4:	77 13                	ja     c001adb9 <IDE::read(unsigned char, unsigned char)+0xad>
c001ada6:	0f b6 c9             	movzx  ecx,cl
c001ada9:	0f b6 d2             	movzx  edx,dl
c001adac:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001adb4:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001adb8:	ec                   	in     al,dx
c001adb9:	83 c4 10             	add    esp,0x10
c001adbc:	5b                   	pop    ebx
c001adbd:	5e                   	pop    esi
c001adbe:	5f                   	pop    edi
c001adbf:	c3                   	ret    

c001adc0 <IDE::waitInterrupt(unsigned char)>:
c001adc0:	55                   	push   ebp
c001adc1:	57                   	push   edi
c001adc2:	56                   	push   esi
c001adc3:	53                   	push   ebx
c001adc4:	31 db                	xor    ebx,ebx
c001adc6:	83 ec 0c             	sub    esp,0xc
c001adc9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001adcd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001add2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001adda:	89 e8                	mov    eax,ebp
c001addc:	84 c0                	test   al,al
c001adde:	75 30                	jne    c001ae10 <IDE::waitInterrupt(unsigned char)+0x50>
c001ade0:	50                   	push   eax
c001ade1:	6a 0c                	push   0xc
c001ade3:	56                   	push   esi
c001ade4:	57                   	push   edi
c001ade5:	e8 22 ff ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001adea:	83 c4 10             	add    esp,0x10
c001aded:	a8 01                	test   al,0x1
c001adef:	75 27                	jne    c001ae18 <IDE::waitInterrupt(unsigned char)+0x58>
c001adf1:	f6 c3 04             	test   bl,0x4
c001adf4:	75 12                	jne    c001ae08 <IDE::waitInterrupt(unsigned char)+0x48>
c001adf6:	83 fb 32             	cmp    ebx,0x32
c001adf9:	7e 0d                	jle    c001ae08 <IDE::waitInterrupt(unsigned char)+0x48>
c001adfb:	83 ec 0c             	sub    esp,0xc
c001adfe:	6a 64                	push   0x64
c001ae00:	e8 5f a5 ff ff       	call   c0015364 <milliTenthSleep(unsigned int)>
c001ae05:	83 c4 10             	add    esp,0x10
c001ae08:	83 fb 3c             	cmp    ebx,0x3c
c001ae0b:	74 0b                	je     c001ae18 <IDE::waitInterrupt(unsigned char)+0x58>
c001ae0d:	43                   	inc    ebx
c001ae0e:	eb c2                	jmp    c001add2 <IDE::waitInterrupt(unsigned char)+0x12>
c001ae10:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ae18:	83 c4 0c             	add    esp,0xc
c001ae1b:	89 e8                	mov    eax,ebp
c001ae1d:	5b                   	pop    ebx
c001ae1e:	5e                   	pop    esi
c001ae1f:	5f                   	pop    edi
c001ae20:	5d                   	pop    ebp
c001ae21:	c3                   	ret    

c001ae22 <ideChannel0IRQHandler(regs*, void*)>:
c001ae22:	83 ec 10             	sub    esp,0x10
c001ae25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae29:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ae30:	6a 07                	push   0x7
c001ae32:	6a 00                	push   0x0
c001ae34:	50                   	push   eax
c001ae35:	e8 d2 fe ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001ae3a:	83 c4 1c             	add    esp,0x1c
c001ae3d:	c3                   	ret    

c001ae3e <ideChannel1IRQHandler(regs*, void*)>:
c001ae3e:	83 ec 10             	sub    esp,0x10
c001ae41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae45:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ae4c:	6a 07                	push   0x7
c001ae4e:	6a 01                	push   0x1
c001ae50:	50                   	push   eax
c001ae51:	e8 b6 fe ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001ae56:	83 c4 1c             	add    esp,0x1c
c001ae59:	c3                   	ret    

c001ae5a <IDE::enableIRQs(unsigned char, bool)>:
c001ae5a:	57                   	push   edi
c001ae5b:	b8 02 00 00 00       	mov    eax,0x2
c001ae60:	56                   	push   esi
c001ae61:	53                   	push   ebx
c001ae62:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ae67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae6b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ae6f:	74 02                	je     c001ae73 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ae71:	31 c0                	xor    eax,eax
c001ae73:	0f b6 db             	movzx  ebx,bl
c001ae76:	bf 04 00 00 00       	mov    edi,0x4
c001ae7b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ae82:	50                   	push   eax
c001ae83:	6a 0c                	push   0xc
c001ae85:	53                   	push   ebx
c001ae86:	56                   	push   esi
c001ae87:	e8 c0 fd ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae8c:	83 c4 10             	add    esp,0x10
c001ae8f:	50                   	push   eax
c001ae90:	6a 0c                	push   0xc
c001ae92:	53                   	push   ebx
c001ae93:	56                   	push   esi
c001ae94:	e8 73 fe ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001ae99:	83 c4 10             	add    esp,0x10
c001ae9c:	4f                   	dec    edi
c001ae9d:	75 f0                	jne    c001ae8f <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ae9f:	5b                   	pop    ebx
c001aea0:	5e                   	pop    esi
c001aea1:	5f                   	pop    edi
c001aea2:	c3                   	ret    
c001aea3:	90                   	nop

c001aea4 <IDE::open(int, int, void*)>:
c001aea4:	55                   	push   ebp
c001aea5:	57                   	push   edi
c001aea6:	56                   	push   esi
c001aea7:	53                   	push   ebx
c001aea8:	83 ec 1c             	sub    esp,0x1c
c001aeab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aeaf:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001aeb6:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001aebf:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001aec8:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001aecf:	0f 85 da 02 00 00    	jne    c001b1af <IDE::open(int, int, void*)+0x30b>
c001aed5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001aedb:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001aedf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aee3:	83 e0 7f             	and    eax,0x7f
c001aee6:	83 f8 05             	cmp    eax,0x5
c001aee9:	74 05                	je     c001aef0 <IDE::open(int, int, void*)+0x4c>
c001aeeb:	83 f8 0f             	cmp    eax,0xf
c001aeee:	75 32                	jne    c001af22 <IDE::open(int, int, void*)+0x7e>
c001aef0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001aef6:	83 e0 fc             	and    eax,0xfffffffc
c001aef9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001af00:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001af06:	83 e0 fc             	and    eax,0xfffffffc
c001af09:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001af10:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001af16:	83 e0 fc             	and    eax,0xfffffffc
c001af19:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001af20:	eb 14                	jmp    c001af36 <IDE::open(int, int, void*)+0x92>
c001af22:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001af2c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001af36:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001af3d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001af42:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001af49:	89 fa                	mov    edx,edi
c001af4b:	89 f1                	mov    ecx,esi
c001af4d:	c1 e1 10             	shl    ecx,0x10
c001af50:	89 e8                	mov    eax,ebp
c001af52:	c1 e0 0b             	shl    eax,0xb
c001af55:	09 c1                	or     ecx,eax
c001af57:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001af5e:	c1 e0 08             	shl    eax,0x8
c001af61:	09 c1                	or     ecx,eax
c001af63:	89 c8                	mov    eax,ecx
c001af65:	0d 08 00 00 80       	or     eax,0x80000008
c001af6a:	ef                   	out    dx,eax
c001af6b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af70:	ed                   	in     eax,dx
c001af71:	c1 e8 10             	shr    eax,0x10
c001af74:	3d ff ff 00 00       	cmp    eax,0xffff
c001af79:	0f 84 f9 00 00 00    	je     c001b078 <IDE::open(int, int, void*)+0x1d4>
c001af7f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001af85:	89 fa                	mov    edx,edi
c001af87:	89 c8                	mov    eax,ecx
c001af89:	ef                   	out    dx,eax
c001af8a:	b0 fe                	mov    al,0xfe
c001af8c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af91:	ee                   	out    dx,al
c001af92:	89 c8                	mov    eax,ecx
c001af94:	89 fa                	mov    edx,edi
c001af96:	ef                   	out    dx,eax
c001af97:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af9c:	ed                   	in     eax,dx
c001af9d:	3c fe                	cmp    al,0xfe
c001af9f:	0f 85 a4 00 00 00    	jne    c001b049 <IDE::open(int, int, void*)+0x1a5>
c001afa5:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001afab:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001afb2:	74 30                	je     c001afe4 <IDE::open(int, int, void*)+0x140>
c001afb4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001afba:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001afbe:	83 ec 0c             	sub    esp,0xc
c001afc1:	40                   	inc    eax
c001afc2:	0f b6 c0             	movzx  eax,al
c001afc5:	50                   	push   eax
c001afc6:	55                   	push   ebp
c001afc7:	56                   	push   esi
c001afc8:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001afce:	51                   	push   ecx
c001afcf:	e8 ac 3d ff ff       	call   c000ed80 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001afd4:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001afd9:	83 c4 1c             	add    esp,0x1c
c001afdc:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001afe2:	eb 0a                	jmp    c001afee <IDE::open(int, int, void*)+0x14a>
c001afe4:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001afee:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001aff5:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001affa:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b001:	89 ea                	mov    edx,ebp
c001b003:	c1 e1 10             	shl    ecx,0x10
c001b006:	c1 e0 08             	shl    eax,0x8
c001b009:	09 c1                	or     ecx,eax
c001b00b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b012:	c1 e0 0b             	shl    eax,0xb
c001b015:	09 c1                	or     ecx,eax
c001b017:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b01d:	89 c8                	mov    eax,ecx
c001b01f:	ef                   	out    dx,eax
c001b020:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001b026:	be fc 0c 00 00       	mov    esi,0xcfc
c001b02b:	89 f2                	mov    edx,esi
c001b02d:	89 f8                	mov    eax,edi
c001b02f:	ee                   	out    dx,al
c001b030:	89 c8                	mov    eax,ecx
c001b032:	89 ea                	mov    edx,ebp
c001b034:	ef                   	out    dx,eax
c001b035:	89 f2                	mov    edx,esi
c001b037:	ed                   	in     eax,dx
c001b038:	0f b6 c0             	movzx  eax,al
c001b03b:	39 f8                	cmp    eax,edi
c001b03d:	74 49                	je     c001b088 <IDE::open(int, int, void*)+0x1e4>
c001b03f:	83 ec 0c             	sub    esp,0xc
c001b042:	68 dc 1a 02 c0       	push   0xc0021adc
c001b047:	eb 37                	jmp    c001b080 <IDE::open(int, int, void*)+0x1dc>
c001b049:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b052:	75 1a                	jne    c001b06e <IDE::open(int, int, void*)+0x1ca>
c001b054:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b059:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b05e:	74 05                	je     c001b065 <IDE::open(int, int, void*)+0x1c1>
c001b060:	83 c0 80             	add    eax,0xffffff80
c001b063:	75 09                	jne    c001b06e <IDE::open(int, int, void*)+0x1ca>
c001b065:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b06c:	eb 1a                	jmp    c001b088 <IDE::open(int, int, void*)+0x1e4>
c001b06e:	83 ec 0c             	sub    esp,0xc
c001b071:	68 e4 1a 02 c0       	push   0xc0021ae4
c001b076:	eb 08                	jmp    c001b080 <IDE::open(int, int, void*)+0x1dc>
c001b078:	83 ec 0c             	sub    esp,0xc
c001b07b:	68 15 1b 02 c0       	push   0xc0021b15
c001b080:	e8 c8 57 ff ff       	call   c001084d <KePanic(char const*)>
c001b085:	83 c4 10             	add    esp,0x10
c001b088:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b08f:	74 1a                	je     c001b0ab <IDE::open(int, int, void*)+0x207>
c001b091:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b097:	83 e0 fc             	and    eax,0xfffffffc
c001b09a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b0a1:	83 c0 08             	add    eax,0x8
c001b0a4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b0ab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b0b1:	89 c2                	mov    edx,eax
c001b0b3:	83 e2 0f             	and    edx,0xf
c001b0b6:	83 fa 08             	cmp    edx,0x8
c001b0b9:	75 0a                	jne    c001b0c5 <IDE::open(int, int, void*)+0x221>
c001b0bb:	83 e8 02             	sub    eax,0x2
c001b0be:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b0c5:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b0cb:	89 c2                	mov    edx,eax
c001b0cd:	83 e2 0f             	and    edx,0xf
c001b0d0:	83 fa 08             	cmp    edx,0x8
c001b0d3:	75 0a                	jne    c001b0df <IDE::open(int, int, void*)+0x23b>
c001b0d5:	83 e8 02             	sub    eax,0x2
c001b0d8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b0df:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b0e6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b0ed:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b0f0:	89 d0                	mov    eax,edx
c001b0f2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0f6:	8d 7a 01             	lea    edi,[edx+0x1]
c001b0f9:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b0fd:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b101:	83 e1 3f             	and    ecx,0x3f
c001b104:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b108:	89 f9                	mov    ecx,edi
c001b10a:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b111:	8d 78 02             	lea    edi,[eax+0x2]
c001b114:	0f b6 c9             	movzx  ecx,cl
c001b117:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b11a:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b11e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b122:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b126:	83 e2 3f             	and    edx,0x3f
c001b129:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b12d:	89 f9                	mov    ecx,edi
c001b12f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b135:	8d 78 03             	lea    edi,[eax+0x3]
c001b138:	0f b6 d1             	movzx  edx,cl
c001b13b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b13e:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b142:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b146:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b14a:	83 e1 3f             	and    ecx,0x3f
c001b14d:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b151:	89 f9                	mov    ecx,edi
c001b153:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b159:	8d 78 04             	lea    edi,[eax+0x4]
c001b15c:	0f b6 c9             	movzx  ecx,cl
c001b15f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b162:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b166:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b16a:	89 fa                	mov    edx,edi
c001b16c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b172:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b176:	83 e2 3f             	and    edx,0x3f
c001b179:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b17d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b184:	66 85 f6             	test   si,si
c001b187:	74 65                	je     c001b1ee <IDE::open(int, int, void*)+0x34a>
c001b189:	89 f9                	mov    ecx,edi
c001b18b:	83 c0 05             	add    eax,0x5
c001b18e:	0f b6 d1             	movzx  edx,cl
c001b191:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b194:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b198:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b19c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b1a2:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b1a6:	83 e0 3f             	and    eax,0x3f
c001b1a9:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b1ad:	eb 3f                	jmp    c001b1ee <IDE::open(int, int, void*)+0x34a>
c001b1af:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b1b6:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b1bc:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b1c3:	05 06 02 00 00       	add    eax,0x206
c001b1c8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b1cf:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b1d6:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b1dd:	05 06 02 00 00       	add    eax,0x206
c001b1e2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b1e9:	e9 bd fe ff ff       	jmp    c001b0ab <IDE::open(int, int, void*)+0x207>
c001b1ee:	50                   	push   eax
c001b1ef:	50                   	push   eax
c001b1f0:	6a 00                	push   0x0
c001b1f2:	53                   	push   ebx
c001b1f3:	e8 2e fa ff ff       	call   c001ac26 <IDE::prepareInterrupt(unsigned char)>
c001b1f8:	5a                   	pop    edx
c001b1f9:	59                   	pop    ecx
c001b1fa:	6a 01                	push   0x1
c001b1fc:	53                   	push   ebx
c001b1fd:	e8 24 fa ff ff       	call   c001ac26 <IDE::prepareInterrupt(unsigned char)>
c001b202:	83 c4 0c             	add    esp,0xc
c001b205:	6a 00                	push   0x0
c001b207:	6a 00                	push   0x0
c001b209:	53                   	push   ebx
c001b20a:	e8 4b fc ff ff       	call   c001ae5a <IDE::enableIRQs(unsigned char, bool)>
c001b20f:	83 c4 0c             	add    esp,0xc
c001b212:	6a 00                	push   0x0
c001b214:	6a 01                	push   0x1
c001b216:	53                   	push   ebx
c001b217:	e8 3e fc ff ff       	call   c001ae5a <IDE::enableIRQs(unsigned char, bool)>
c001b21c:	83 c4 10             	add    esp,0x10
c001b21f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b226:	74 34                	je     c001b25c <IDE::open(int, int, void*)+0x3b8>
c001b228:	83 ec 0c             	sub    esp,0xc
c001b22b:	53                   	push   ebx
c001b22c:	6a 01                	push   0x1
c001b22e:	68 22 ae 01 c0       	push   0xc001ae22
c001b233:	6a 0e                	push   0xe
c001b235:	53                   	push   ebx
c001b236:	e8 55 0b ff ff       	call   c000bd90 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b23b:	83 c4 14             	add    esp,0x14
c001b23e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b244:	53                   	push   ebx
c001b245:	6a 01                	push   0x1
c001b247:	68 3e ae 01 c0       	push   0xc001ae3e
c001b24c:	6a 0f                	push   0xf
c001b24e:	53                   	push   ebx
c001b24f:	e8 3c 0b ff ff       	call   c000bd90 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b254:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b25a:	eb 38                	jmp    c001b294 <IDE::open(int, int, void*)+0x3f0>
c001b25c:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b266:	83 ec 0c             	sub    esp,0xc
c001b269:	53                   	push   ebx
c001b26a:	6a 00                	push   0x0
c001b26c:	68 22 ae 01 c0       	push   0xc001ae22
c001b271:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b277:	53                   	push   ebx
c001b278:	e8 13 0b ff ff       	call   c000bd90 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b27d:	83 c4 14             	add    esp,0x14
c001b280:	53                   	push   ebx
c001b281:	6a 00                	push   0x0
c001b283:	68 3e ae 01 c0       	push   0xc001ae3e
c001b288:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b28e:	53                   	push   ebx
c001b28f:	e8 fc 0a ff ff       	call   c000bd90 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b294:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b296:	83 c4 20             	add    esp,0x20
c001b299:	83 ec 0c             	sub    esp,0xc
c001b29c:	53                   	push   ebx
c001b29d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b2a0:	83 c4 0c             	add    esp,0xc
c001b2a3:	6a 07                	push   0x7
c001b2a5:	6a 00                	push   0x0
c001b2a7:	53                   	push   ebx
c001b2a8:	e8 5f fa ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b2ad:	83 c4 0c             	add    esp,0xc
c001b2b0:	6a 07                	push   0x7
c001b2b2:	6a 01                	push   0x1
c001b2b4:	53                   	push   ebx
c001b2b5:	e8 52 fa ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b2ba:	83 c4 0c             	add    esp,0xc
c001b2bd:	6a 01                	push   0x1
c001b2bf:	6a 00                	push   0x0
c001b2c1:	53                   	push   ebx
c001b2c2:	e8 93 fb ff ff       	call   c001ae5a <IDE::enableIRQs(unsigned char, bool)>
c001b2c7:	83 c4 0c             	add    esp,0xc
c001b2ca:	6a 01                	push   0x1
c001b2cc:	6a 01                	push   0x1
c001b2ce:	53                   	push   ebx
c001b2cf:	e8 86 fb ff ff       	call   c001ae5a <IDE::enableIRQs(unsigned char, bool)>
c001b2d4:	83 c4 2c             	add    esp,0x2c
c001b2d7:	31 c0                	xor    eax,eax
c001b2d9:	5b                   	pop    ebx
c001b2da:	5e                   	pop    esi
c001b2db:	5f                   	pop    edi
c001b2dc:	5d                   	pop    ebp
c001b2dd:	c3                   	ret    

c001b2de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b2de:	55                   	push   ebp
c001b2df:	57                   	push   edi
c001b2e0:	56                   	push   esi
c001b2e1:	53                   	push   ebx
c001b2e2:	83 ec 1c             	sub    esp,0x1c
c001b2e5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b2e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2ed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b2f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b2f5:	8d 42 f8             	lea    eax,[edx-0x8]
c001b2f8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b2fc:	3c 03                	cmp    al,0x3
c001b2fe:	77 5a                	ja     c001b35a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b300:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b304:	0f b6 db             	movzx  ebx,bl
c001b307:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b30b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b30e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b313:	0c 80                	or     al,0x80
c001b315:	50                   	push   eax
c001b316:	6a 0c                	push   0xc
c001b318:	53                   	push   ebx
c001b319:	56                   	push   esi
c001b31a:	e8 2d f9 ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b31f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b323:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b32c:	0f b6 d2             	movzx  edx,dl
c001b32f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b333:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b335:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b33a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b33e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b342:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b34a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b34e:	83 c4 2c             	add    esp,0x2c
c001b351:	5b                   	pop    ebx
c001b352:	5e                   	pop    esi
c001b353:	5f                   	pop    edi
c001b354:	5d                   	pop    ebp
c001b355:	e9 f2 f8 ff ff       	jmp    c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b35a:	0f b6 c2             	movzx  eax,dl
c001b35d:	83 f8 07             	cmp    eax,0x7
c001b360:	77 12                	ja     c001b374 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b362:	0f b6 db             	movzx  ebx,bl
c001b365:	0f b6 c2             	movzx  eax,dl
c001b368:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b370:	01 c2                	add    edx,eax
c001b372:	eb 2f                	jmp    c001b3a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b374:	83 f8 0d             	cmp    eax,0xd
c001b377:	77 13                	ja     c001b38c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b379:	0f b6 db             	movzx  ebx,bl
c001b37c:	0f b6 d2             	movzx  edx,dl
c001b37f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b386:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b38a:	eb 17                	jmp    c001b3a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b38c:	83 f8 15             	cmp    eax,0x15
c001b38f:	77 14                	ja     c001b3a5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b391:	0f b6 db             	movzx  ebx,bl
c001b394:	0f b6 d2             	movzx  edx,dl
c001b397:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b39f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b3a3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b3a5:	83 c4 1c             	add    esp,0x1c
c001b3a8:	5b                   	pop    ebx
c001b3a9:	5e                   	pop    esi
c001b3aa:	5f                   	pop    edi
c001b3ab:	5d                   	pop    ebp
c001b3ac:	c3                   	ret    
c001b3ad:	90                   	nop

c001b3ae <IDE::detect()>:
c001b3ae:	55                   	push   ebp
c001b3af:	57                   	push   edi
c001b3b0:	56                   	push   esi
c001b3b1:	53                   	push   ebx
c001b3b2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b3b8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b3bf:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b3c6:	0f 85 9e 02 00 00    	jne    c001b66a <IDE::detect()+0x2bc>
c001b3cc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b3d3:	31 f6                	xor    esi,esi
c001b3d5:	31 ff                	xor    edi,edi
c001b3d7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b3df:	89 f8                	mov    eax,edi
c001b3e1:	c1 e0 06             	shl    eax,0x6
c001b3e4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b3ec:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b3f0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b3f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3f8:	c1 e0 04             	shl    eax,0x4
c001b3fb:	83 c8 a0             	or     eax,0xffffffa0
c001b3fe:	0f b6 c0             	movzx  eax,al
c001b401:	50                   	push   eax
c001b402:	6a 06                	push   0x6
c001b404:	56                   	push   esi
c001b405:	53                   	push   ebx
c001b406:	e8 41 f8 ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b40b:	83 c4 0c             	add    esp,0xc
c001b40e:	6a 0c                	push   0xc
c001b410:	56                   	push   esi
c001b411:	53                   	push   ebx
c001b412:	e8 f5 f8 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b417:	83 c4 0c             	add    esp,0xc
c001b41a:	6a 0c                	push   0xc
c001b41c:	56                   	push   esi
c001b41d:	53                   	push   ebx
c001b41e:	e8 e9 f8 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b423:	83 c4 0c             	add    esp,0xc
c001b426:	6a 0c                	push   0xc
c001b428:	56                   	push   esi
c001b429:	53                   	push   ebx
c001b42a:	e8 dd f8 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b42f:	83 c4 0c             	add    esp,0xc
c001b432:	6a 0c                	push   0xc
c001b434:	56                   	push   esi
c001b435:	53                   	push   ebx
c001b436:	e8 d1 f8 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b43b:	68 ec 00 00 00       	push   0xec
c001b440:	6a 07                	push   0x7
c001b442:	56                   	push   esi
c001b443:	53                   	push   ebx
c001b444:	e8 03 f8 ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b449:	83 c4 1c             	add    esp,0x1c
c001b44c:	6a 0c                	push   0xc
c001b44e:	56                   	push   esi
c001b44f:	53                   	push   ebx
c001b450:	e8 b7 f8 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b455:	83 c4 0c             	add    esp,0xc
c001b458:	6a 0c                	push   0xc
c001b45a:	56                   	push   esi
c001b45b:	53                   	push   ebx
c001b45c:	e8 ab f8 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b461:	83 c4 0c             	add    esp,0xc
c001b464:	6a 0c                	push   0xc
c001b466:	56                   	push   esi
c001b467:	53                   	push   ebx
c001b468:	e8 9f f8 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b46d:	83 c4 0c             	add    esp,0xc
c001b470:	6a 0c                	push   0xc
c001b472:	56                   	push   esi
c001b473:	53                   	push   ebx
c001b474:	e8 93 f8 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b479:	83 c4 0c             	add    esp,0xc
c001b47c:	6a 0c                	push   0xc
c001b47e:	56                   	push   esi
c001b47f:	53                   	push   ebx
c001b480:	e8 87 f8 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b485:	83 c4 10             	add    esp,0x10
c001b488:	84 c0                	test   al,al
c001b48a:	0f 84 61 01 00 00    	je     c001b5f1 <IDE::detect()+0x243>
c001b490:	31 ed                	xor    ebp,ebp
c001b492:	50                   	push   eax
c001b493:	6a 0c                	push   0xc
c001b495:	56                   	push   esi
c001b496:	53                   	push   ebx
c001b497:	e8 70 f8 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b49c:	83 c4 10             	add    esp,0x10
c001b49f:	a8 01                	test   al,0x1
c001b4a1:	0f 85 6b 01 00 00    	jne    c001b612 <IDE::detect()+0x264>
c001b4a7:	a8 80                	test   al,0x80
c001b4a9:	75 04                	jne    c001b4af <IDE::detect()+0x101>
c001b4ab:	a8 08                	test   al,0x8
c001b4ad:	75 23                	jne    c001b4d2 <IDE::detect()+0x124>
c001b4af:	45                   	inc    ebp
c001b4b0:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b4b6:	7e da                	jle    c001b492 <IDE::detect()+0xe4>
c001b4b8:	83 ec 0c             	sub    esp,0xc
c001b4bb:	6a 32                	push   0x32
c001b4bd:	e8 a2 9e ff ff       	call   c0015364 <milliTenthSleep(unsigned int)>
c001b4c2:	83 c4 10             	add    esp,0x10
c001b4c5:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b4cb:	75 c5                	jne    c001b492 <IDE::detect()+0xe4>
c001b4cd:	e9 40 01 00 00       	jmp    c001b612 <IDE::detect()+0x264>
c001b4d2:	31 c9                	xor    ecx,ecx
c001b4d4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b4d8:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b4dc:	83 ec 0c             	sub    esp,0xc
c001b4df:	68 80 00 00 00       	push   0x80
c001b4e4:	55                   	push   ebp
c001b4e5:	6a 00                	push   0x0
c001b4e7:	56                   	push   esi
c001b4e8:	53                   	push   ebx
c001b4e9:	e8 f0 fd ff ff       	call   c001b2de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b4ee:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b4f3:	89 f8                	mov    eax,edi
c001b4f5:	c1 e0 06             	shl    eax,0x6
c001b4f8:	01 d8                	add    eax,ebx
c001b4fa:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b501:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b508:	89 d1                	mov    ecx,edx
c001b50a:	89 f2                	mov    edx,esi
c001b50c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b512:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b516:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b51c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b520:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b527:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b52f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b536:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b53e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b544:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b54b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b551:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b555:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b559:	83 c4 20             	add    esp,0x20
c001b55c:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001b55f:	83 c5 02             	add    ebp,0x2
c001b562:	83 c0 02             	add    eax,0x2
c001b565:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b56b:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001b56e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b574:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001b578:	75 e2                	jne    c001b55c <IDE::detect()+0x1ae>
c001b57a:	89 f8                	mov    eax,edi
c001b57c:	c1 e0 06             	shl    eax,0x6
c001b57f:	01 d8                	add    eax,ebx
c001b581:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b588:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b58f:	c1 ea 09             	shr    edx,0x9
c001b592:	83 e2 01             	and    edx,0x1
c001b595:	80 e1 01             	and    cl,0x1
c001b598:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b59e:	75 22                	jne    c001b5c2 <IDE::detect()+0x214>
c001b5a0:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b5a7:	74 47                	je     c001b5f0 <IDE::detect()+0x242>
c001b5a9:	83 ec 0c             	sub    esp,0xc
c001b5ac:	68 7c 01 00 00       	push   0x17c
c001b5b1:	e8 15 c5 fe ff       	call   c0007acb <malloc>
c001b5b6:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5b9:	89 c5                	mov    ebp,eax
c001b5bb:	e8 16 05 00 00       	call   c001bad6 <ATA::ATA()>
c001b5c0:	eb 17                	jmp    c001b5d9 <IDE::detect()+0x22b>
c001b5c2:	83 ec 0c             	sub    esp,0xc
c001b5c5:	68 84 01 00 00       	push   0x184
c001b5ca:	e8 fc c4 fe ff       	call   c0007acb <malloc>
c001b5cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5d2:	89 c5                	mov    ebp,eax
c001b5d4:	e8 6f 0e 00 00       	call   c001c448 <ATAPI::ATAPI()>
c001b5d9:	5a                   	pop    edx
c001b5da:	59                   	pop    ecx
c001b5db:	55                   	push   ebp
c001b5dc:	53                   	push   ebx
c001b5dd:	e8 02 08 ff ff       	call   c000bde4 <Device::addChild(Device*)>
c001b5e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b5e5:	53                   	push   ebx
c001b5e6:	57                   	push   edi
c001b5e7:	6a 00                	push   0x0
c001b5e9:	55                   	push   ebp
c001b5ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5ed:	83 c4 20             	add    esp,0x20
c001b5f0:	47                   	inc    edi
c001b5f1:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b5f6:	74 0d                	je     c001b605 <IDE::detect()+0x257>
c001b5f8:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b600:	e9 da fd ff ff       	jmp    c001b3df <IDE::detect()+0x31>
c001b605:	4e                   	dec    esi
c001b606:	74 62                	je     c001b66a <IDE::detect()+0x2bc>
c001b608:	be 01 00 00 00       	mov    esi,0x1
c001b60d:	e9 c5 fd ff ff       	jmp    c001b3d7 <IDE::detect()+0x29>
c001b612:	50                   	push   eax
c001b613:	6a 04                	push   0x4
c001b615:	56                   	push   esi
c001b616:	53                   	push   ebx
c001b617:	e8 f0 f6 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b61c:	83 c4 0c             	add    esp,0xc
c001b61f:	6a 05                	push   0x5
c001b621:	56                   	push   esi
c001b622:	53                   	push   ebx
c001b623:	89 c5                	mov    ebp,eax
c001b625:	e8 e2 f6 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b62a:	89 e9                	mov    ecx,ebp
c001b62c:	83 c4 10             	add    esp,0x10
c001b62f:	0f b6 e9             	movzx  ebp,cl
c001b632:	83 fd 14             	cmp    ebp,0x14
c001b635:	74 2d                	je     c001b664 <IDE::detect()+0x2b6>
c001b637:	83 fd 69             	cmp    ebp,0x69
c001b63a:	75 b5                	jne    c001b5f1 <IDE::detect()+0x243>
c001b63c:	3c 96                	cmp    al,0x96
c001b63e:	75 b1                	jne    c001b5f1 <IDE::detect()+0x243>
c001b640:	68 a1 00 00 00       	push   0xa1
c001b645:	6a 07                	push   0x7
c001b647:	56                   	push   esi
c001b648:	53                   	push   ebx
c001b649:	e8 fe f5 ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b64e:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b655:	e8 0a 9d ff ff       	call   c0015364 <milliTenthSleep(unsigned int)>
c001b65a:	83 c4 10             	add    esp,0x10
c001b65d:	b1 01                	mov    cl,0x1
c001b65f:	e9 70 fe ff ff       	jmp    c001b4d4 <IDE::detect()+0x126>
c001b664:	3c eb                	cmp    al,0xeb
c001b666:	75 cf                	jne    c001b637 <IDE::detect()+0x289>
c001b668:	eb d6                	jmp    c001b640 <IDE::detect()+0x292>
c001b66a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b670:	5b                   	pop    ebx
c001b671:	5e                   	pop    esi
c001b672:	5f                   	pop    edi
c001b673:	5d                   	pop    ebp
c001b674:	c3                   	ret    
c001b675:	90                   	nop

c001b676 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b676:	55                   	push   ebp
c001b677:	57                   	push   edi
c001b678:	56                   	push   esi
c001b679:	53                   	push   ebx
c001b67a:	83 ec 1c             	sub    esp,0x1c
c001b67d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b681:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b685:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b689:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b68d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b691:	88 c3                	mov    bl,al
c001b693:	25 ff 00 00 00       	and    eax,0xff
c001b698:	0f 84 88 00 00 00    	je     c001b726 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b69e:	83 ec 0c             	sub    esp,0xc
c001b6a1:	89 c7                	mov    edi,eax
c001b6a3:	68 3f 1b 02 c0       	push   0xc0021b3f
c001b6a8:	e8 d6 f2 fe ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001b6ad:	83 c4 10             	add    esp,0x10
c001b6b0:	83 ff 01             	cmp    edi,0x1
c001b6b3:	74 6b                	je     c001b720 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b6b5:	83 ff 02             	cmp    edi,0x2
c001b6b8:	75 58                	jne    c001b712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b6ba:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b6bf:	50                   	push   eax
c001b6c0:	6a 01                	push   0x1
c001b6c2:	01 ff                	add    edi,edi
c001b6c4:	09 fe                	or     esi,edi
c001b6c6:	89 f0                	mov    eax,esi
c001b6c8:	0f b6 f0             	movzx  esi,al
c001b6cb:	c1 e6 06             	shl    esi,0x6
c001b6ce:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b6d6:	50                   	push   eax
c001b6d7:	55                   	push   ebp
c001b6d8:	e8 2f f6 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b6dd:	83 c4 10             	add    esp,0x10
c001b6e0:	a8 01                	test   al,0x1
c001b6e2:	74 02                	je     c001b6e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b6e4:	b3 07                	mov    bl,0x7
c001b6e6:	a8 02                	test   al,0x2
c001b6e8:	74 02                	je     c001b6ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b6ea:	b3 03                	mov    bl,0x3
c001b6ec:	a8 04                	test   al,0x4
c001b6ee:	74 02                	je     c001b6f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b6f0:	b3 14                	mov    bl,0x14
c001b6f2:	a8 08                	test   al,0x8
c001b6f4:	74 02                	je     c001b6f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b6f6:	b3 03                	mov    bl,0x3
c001b6f8:	a8 10                	test   al,0x10
c001b6fa:	74 02                	je     c001b6fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b6fc:	b3 15                	mov    bl,0x15
c001b6fe:	a8 20                	test   al,0x20
c001b700:	74 02                	je     c001b704 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b702:	b3 03                	mov    bl,0x3
c001b704:	a8 40                	test   al,0x40
c001b706:	74 02                	je     c001b70a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b708:	b3 16                	mov    bl,0x16
c001b70a:	a8 80                	test   al,0x80
c001b70c:	74 18                	je     c001b726 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b70e:	b3 0d                	mov    bl,0xd
c001b710:	eb 14                	jmp    c001b726 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b712:	83 ff 03             	cmp    edi,0x3
c001b715:	74 0d                	je     c001b724 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b717:	83 ff 04             	cmp    edi,0x4
c001b71a:	75 0a                	jne    c001b726 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b71c:	b3 08                	mov    bl,0x8
c001b71e:	eb 06                	jmp    c001b726 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b720:	b3 13                	mov    bl,0x13
c001b722:	eb 02                	jmp    c001b726 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b724:	b3 17                	mov    bl,0x17
c001b726:	83 c4 1c             	add    esp,0x1c
c001b729:	88 d8                	mov    al,bl
c001b72b:	5b                   	pop    ebx
c001b72c:	5e                   	pop    esi
c001b72d:	5f                   	pop    edi
c001b72e:	5d                   	pop    ebp
c001b72f:	c3                   	ret    

c001b730 <IDE::polling(unsigned char, unsigned int)>:
c001b730:	57                   	push   edi
c001b731:	56                   	push   esi
c001b732:	53                   	push   ebx
c001b733:	bb 04 00 00 00       	mov    ebx,0x4
c001b738:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b73c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b741:	52                   	push   edx
c001b742:	6a 0c                	push   0xc
c001b744:	56                   	push   esi
c001b745:	57                   	push   edi
c001b746:	e8 c1 f5 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b74b:	83 c4 10             	add    esp,0x10
c001b74e:	4b                   	dec    ebx
c001b74f:	75 f0                	jne    c001b741 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b751:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b756:	50                   	push   eax
c001b757:	6a 0c                	push   0xc
c001b759:	56                   	push   esi
c001b75a:	57                   	push   edi
c001b75b:	e8 ac f5 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001b760:	83 c4 10             	add    esp,0x10
c001b763:	a8 01                	test   al,0x1
c001b765:	75 17                	jne    c001b77e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b767:	a8 20                	test   al,0x20
c001b769:	75 0f                	jne    c001b77a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b76b:	4b                   	dec    ebx
c001b76c:	74 10                	je     c001b77e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b76e:	a8 80                	test   al,0x80
c001b770:	75 e4                	jne    c001b756 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b772:	a8 08                	test   al,0x8
c001b774:	74 e0                	je     c001b756 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b776:	31 c0                	xor    eax,eax
c001b778:	eb 06                	jmp    c001b780 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b77a:	b0 01                	mov    al,0x1
c001b77c:	eb 02                	jmp    c001b780 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b77e:	b0 02                	mov    al,0x2
c001b780:	5b                   	pop    ebx
c001b781:	5e                   	pop    esi
c001b782:	5f                   	pop    edi
c001b783:	c3                   	ret    

c001b784 <SATABus::close(int, int, void*)>:
c001b784:	31 c0                	xor    eax,eax
c001b786:	c3                   	ret    
c001b787:	90                   	nop

c001b788 <SATABus::detect()>:
c001b788:	c3                   	ret    
c001b789:	90                   	nop

c001b78a <SATABus::SATABus()>:
c001b78a:	83 ec 0c             	sub    esp,0xc
c001b78d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b791:	83 ec 08             	sub    esp,0x8
c001b794:	68 78 1b 02 c0       	push   0xc0021b78
c001b799:	50                   	push   eax
c001b79a:	e8 89 09 ff ff       	call   c000c128 <HardDiskController::HardDiskController(char const*)>
c001b79f:	83 c4 10             	add    esp,0x10
c001b7a2:	ba a4 1b 02 c0       	mov    edx,0xc0021ba4
c001b7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7ab:	89 10                	mov    DWORD PTR [eax],edx
c001b7ad:	83 ec 0c             	sub    esp,0xc
c001b7b0:	6a 50                	push   0x50
c001b7b2:	e8 ee c6 fe ff       	call   c0007ea5 <Phys::allocateContiguousPages(int)>
c001b7b7:	83 c4 10             	add    esp,0x10
c001b7ba:	89 c2                	mov    edx,eax
c001b7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b7c6:	83 ec 0c             	sub    esp,0xc
c001b7c9:	6a 50                	push   0x50
c001b7cb:	e8 35 de fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001b7d0:	83 c4 10             	add    esp,0x10
c001b7d3:	89 c2                	mov    edx,eax
c001b7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b7df:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b7e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7e8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b7ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7f2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b7f8:	83 ec 0c             	sub    esp,0xc
c001b7fb:	6a 03                	push   0x3
c001b7fd:	6a 50                	push   0x50
c001b7ff:	51                   	push   ecx
c001b800:	52                   	push   edx
c001b801:	50                   	push   eax
c001b802:	e8 f7 e7 fe ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b807:	83 c4 20             	add    esp,0x20
c001b80a:	90                   	nop
c001b80b:	83 c4 0c             	add    esp,0xc
c001b80e:	c3                   	ret    
c001b80f:	90                   	nop

c001b810 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b810:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b814:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b817:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b81a:	09 c2                	or     edx,eax
c001b81c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b820:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b826:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b828:	31 c0                	xor    eax,eax
c001b82a:	c1 e9 08             	shr    ecx,0x8
c001b82d:	83 e1 0f             	and    ecx,0xf
c001b830:	39 c8                	cmp    eax,ecx
c001b832:	74 0a                	je     c001b83e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b834:	f6 c2 01             	test   dl,0x1
c001b837:	74 08                	je     c001b841 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b839:	d1 ea                	shr    edx,1
c001b83b:	40                   	inc    eax
c001b83c:	eb f2                	jmp    c001b830 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b83e:	83 c8 ff             	or     eax,0xffffffff
c001b841:	c3                   	ret    

c001b842 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b842:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b846:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b849:	89 c2                	mov    edx,eax
c001b84b:	c1 ea 08             	shr    edx,0x8
c001b84e:	83 e2 0f             	and    edx,0xf
c001b851:	4a                   	dec    edx
c001b852:	75 32                	jne    c001b886 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b854:	83 e0 0f             	and    eax,0xf
c001b857:	83 f8 03             	cmp    eax,0x3
c001b85a:	75 2a                	jne    c001b886 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b85c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b85f:	b8 02 00 00 00       	mov    eax,0x2
c001b864:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b86a:	74 1c                	je     c001b888 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b86c:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b872:	b8 04 00 00 00       	mov    eax,0x4
c001b877:	74 0f                	je     c001b888 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b879:	31 c0                	xor    eax,eax
c001b87b:	83 fa 03             	cmp    edx,0x3
c001b87e:	0f 94 c0             	sete   al
c001b881:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b885:	c3                   	ret    
c001b886:	31 c0                	xor    eax,eax
c001b888:	c3                   	ret    
c001b889:	90                   	nop

c001b88a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b88a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b88e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b891:	0f ba e2 0f          	bt     edx,0xf
c001b895:	72 f7                	jb     c001b88e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b897:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b89a:	83 ca 10             	or     edx,0x10
c001b89d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8a3:	83 ca 01             	or     edx,0x1
c001b8a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8a9:	c3                   	ret    

c001b8aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b8aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8ae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8b1:	83 e2 fe             	and    edx,0xfffffffe
c001b8b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8b7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8ba:	83 e2 ef             	and    edx,0xffffffef
c001b8bd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8c0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8c3:	0f ba e2 0e          	bt     edx,0xe
c001b8c7:	72 f7                	jb     c001b8c0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b8c9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8cc:	0f ba e2 0f          	bt     edx,0xf
c001b8d0:	72 ee                	jb     c001b8c0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b8d2:	c3                   	ret    
c001b8d3:	90                   	nop

c001b8d4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b8d4:	55                   	push   ebp
c001b8d5:	57                   	push   edi
c001b8d6:	56                   	push   esi
c001b8d7:	53                   	push   ebx
c001b8d8:	83 ec 1c             	sub    esp,0x1c
c001b8db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b8df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b8e3:	53                   	push   ebx
c001b8e4:	57                   	push   edi
c001b8e5:	e8 c0 ff ff ff       	call   c001b8aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b8ea:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b8ee:	83 ec 0c             	sub    esp,0xc
c001b8f1:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b8f7:	c1 e5 0a             	shl    ebp,0xa
c001b8fa:	01 e8                	add    eax,ebp
c001b8fc:	89 03                	mov    DWORD PTR [ebx],eax
c001b8fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b900:	68 00 04 00 00       	push   0x400
c001b905:	6a 00                	push   0x0
c001b907:	50                   	push   eax
c001b908:	e8 e3 4b fe ff       	call   c00004f0 <memset>
c001b90d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b913:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b917:	83 c4 1c             	add    esp,0x1c
c001b91a:	01 e8                	add    eax,ebp
c001b91c:	89 03                	mov    DWORD PTR [ebx],eax
c001b91e:	c1 e6 08             	shl    esi,0x8
c001b921:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b928:	81 c6 00 80 00 00    	add    esi,0x8000
c001b92e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b934:	01 f0                	add    eax,esi
c001b936:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b939:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b93c:	68 00 01 00 00       	push   0x100
c001b941:	6a 00                	push   0x0
c001b943:	50                   	push   eax
c001b944:	e8 a7 4b fe ff       	call   c00004f0 <memset>
c001b949:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b94f:	31 d2                	xor    edx,edx
c001b951:	01 f0                	add    eax,esi
c001b953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b956:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b95d:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001b963:	01 ee                	add    esi,ebp
c001b965:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b969:	83 c4 10             	add    esp,0x10
c001b96c:	c1 e5 0d             	shl    ebp,0xd
c001b96f:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001b975:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001b97b:	83 c6 20             	add    esi,0x20
c001b97e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b982:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b988:	01 e8                	add    eax,ebp
c001b98a:	01 d0                	add    eax,edx
c001b98c:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b98f:	52                   	push   edx
c001b990:	68 00 01 00 00       	push   0x100
c001b995:	6a 00                	push   0x0
c001b997:	50                   	push   eax
c001b998:	e8 53 4b fe ff       	call   c00004f0 <memset>
c001b99d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b9a3:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001b9aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b9ae:	83 c4 10             	add    esp,0x10
c001b9b1:	01 e8                	add    eax,ebp
c001b9b3:	01 d0                	add    eax,edx
c001b9b5:	81 c2 00 01 00 00    	add    edx,0x100
c001b9bb:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b9be:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b9c4:	75 af                	jne    c001b975 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001b9c6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b9cd:	50                   	push   eax
c001b9ce:	50                   	push   eax
c001b9cf:	53                   	push   ebx
c001b9d0:	57                   	push   edi
c001b9d1:	e8 b4 fe ff ff       	call   c001b88a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b9d6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b9dd:	83 c4 2c             	add    esp,0x2c
c001b9e0:	5b                   	pop    ebx
c001b9e1:	5e                   	pop    esi
c001b9e2:	5f                   	pop    edi
c001b9e3:	5d                   	pop    ebp
c001b9e4:	c3                   	ret    
c001b9e5:	90                   	nop

c001b9e6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b9e6:	55                   	push   ebp
c001b9e7:	57                   	push   edi
c001b9e8:	56                   	push   esi
c001b9e9:	53                   	push   ebx
c001b9ea:	31 db                	xor    ebx,ebx
c001b9ec:	83 ec 0c             	sub    esp,0xc
c001b9ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b9f3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b9f7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b9fa:	f7 c7 01 00 00 00    	test   edi,0x1
c001ba00:	74 7a                	je     c001ba7c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba02:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ba06:	89 d8                	mov    eax,ebx
c001ba08:	c1 e0 07             	shl    eax,0x7
c001ba0b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ba12:	55                   	push   ebp
c001ba13:	56                   	push   esi
c001ba14:	e8 29 fe ff ff       	call   c001b842 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ba19:	5a                   	pop    edx
c001ba1a:	59                   	pop    ecx
c001ba1b:	83 f8 01             	cmp    eax,0x1
c001ba1e:	75 21                	jne    c001ba41 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ba20:	50                   	push   eax
c001ba21:	53                   	push   ebx
c001ba22:	55                   	push   ebp
c001ba23:	56                   	push   esi
c001ba24:	e8 ab fe ff ff       	call   c001b8d4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba29:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ba30:	e8 96 c0 fe ff       	call   c0007acb <malloc>
c001ba35:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba38:	89 c5                	mov    ebp,eax
c001ba3a:	e8 c1 10 00 00       	call   c001cb00 <SATA::SATA()>
c001ba3f:	eb 24                	jmp    c001ba65 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001ba41:	83 f8 04             	cmp    eax,0x4
c001ba44:	75 36                	jne    c001ba7c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba46:	51                   	push   ecx
c001ba47:	53                   	push   ebx
c001ba48:	55                   	push   ebp
c001ba49:	56                   	push   esi
c001ba4a:	e8 85 fe ff ff       	call   c001b8d4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba4f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ba56:	e8 70 c0 fe ff       	call   c0007acb <malloc>
c001ba5b:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba5e:	89 c5                	mov    ebp,eax
c001ba60:	e8 f5 17 00 00       	call   c001d25a <SATAPI::SATAPI()>
c001ba65:	58                   	pop    eax
c001ba66:	5a                   	pop    edx
c001ba67:	55                   	push   ebp
c001ba68:	56                   	push   esi
c001ba69:	e8 76 03 ff ff       	call   c000bde4 <Device::addChild(Device*)>
c001ba6e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba71:	56                   	push   esi
c001ba72:	6a 00                	push   0x0
c001ba74:	53                   	push   ebx
c001ba75:	55                   	push   ebp
c001ba76:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba79:	83 c4 20             	add    esp,0x20
c001ba7c:	d1 ef                	shr    edi,1
c001ba7e:	43                   	inc    ebx
c001ba7f:	83 fb 20             	cmp    ebx,0x20
c001ba82:	0f 85 72 ff ff ff    	jne    c001b9fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ba88:	83 c4 0c             	add    esp,0xc
c001ba8b:	5b                   	pop    ebx
c001ba8c:	5e                   	pop    esi
c001ba8d:	5f                   	pop    edi
c001ba8e:	5d                   	pop    ebp
c001ba8f:	c3                   	ret    

c001ba90 <SATABus::open(int, int, void*)>:
c001ba90:	83 ec 14             	sub    esp,0x14
c001ba93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba97:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001ba9d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001baa3:	52                   	push   edx
c001baa4:	50                   	push   eax
c001baa5:	e8 3c ff ff ff       	call   c001b9e6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001baaa:	31 c0                	xor    eax,eax
c001baac:	83 c4 1c             	add    esp,0x1c
c001baaf:	c3                   	ret    

c001bab0 <ATA::close(int, int, void*)>:
c001bab0:	83 ec 0c             	sub    esp,0xc
c001bab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001babd:	85 c0                	test   eax,eax
c001babf:	74 0c                	je     c001bacd <ATA::close(int, int, void*)+0x1d>
c001bac1:	8b 10                	mov    edx,DWORD PTR [eax]
c001bac3:	83 ec 0c             	sub    esp,0xc
c001bac6:	50                   	push   eax
c001bac7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001baca:	83 c4 10             	add    esp,0x10
c001bacd:	31 c0                	xor    eax,eax
c001bacf:	83 c4 0c             	add    esp,0xc
c001bad2:	c3                   	ret    
c001bad3:	90                   	nop

c001bad4 <ATA::powerSaving(PowerSavingLevel)>:
c001bad4:	c3                   	ret    
c001bad5:	90                   	nop

c001bad6 <ATA::ATA()>:
c001bad6:	83 ec 0c             	sub    esp,0xc
c001bad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001badd:	83 ec 04             	sub    esp,0x4
c001bae0:	68 00 02 00 00       	push   0x200
c001bae5:	68 71 1c 02 c0       	push   0xc0021c71
c001baea:	50                   	push   eax
c001baeb:	e8 c2 06 ff ff       	call   c000c1b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001baf0:	83 c4 10             	add    esp,0x10
c001baf3:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001baf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bafc:	89 10                	mov    DWORD PTR [eax],edx
c001bafe:	90                   	nop
c001baff:	83 c4 0c             	add    esp,0xc
c001bb02:	c3                   	ret    
c001bb03:	90                   	nop

c001bb04 <ATA::flush(bool)>:
c001bb04:	53                   	push   ebx
c001bb05:	83 ec 08             	sub    esp,0x8
c001bb08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb11:	83 f8 01             	cmp    eax,0x1
c001bb14:	19 c0                	sbb    eax,eax
c001bb16:	83 e0 fd             	and    eax,0xfffffffd
c001bb19:	05 ea 00 00 00       	add    eax,0xea
c001bb1e:	50                   	push   eax
c001bb1f:	6a 07                	push   0x7
c001bb21:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb28:	50                   	push   eax
c001bb29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb2f:	e8 18 f1 ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb34:	83 c4 0c             	add    esp,0xc
c001bb37:	6a 00                	push   0x0
c001bb39:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb40:	50                   	push   eax
c001bb41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb47:	e8 e4 fb ff ff       	call   c001b730 <IDE::polling(unsigned char, unsigned int)>
c001bb4c:	83 c4 18             	add    esp,0x18
c001bb4f:	5b                   	pop    ebx
c001bb50:	c3                   	ret    
c001bb51:	90                   	nop

c001bb52 <ATA::readyForCommand()>:
c001bb52:	56                   	push   esi
c001bb53:	53                   	push   ebx
c001bb54:	53                   	push   ebx
c001bb55:	31 db                	xor    ebx,ebx
c001bb57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb5b:	51                   	push   ecx
c001bb5c:	6a 0c                	push   0xc
c001bb5e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb65:	50                   	push   eax
c001bb66:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb6c:	e8 9b f1 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001bb71:	83 c4 10             	add    esp,0x10
c001bb74:	a8 88                	test   al,0x88
c001bb76:	74 1f                	je     c001bb97 <ATA::readyForCommand()+0x45>
c001bb78:	43                   	inc    ebx
c001bb79:	83 fb 63             	cmp    ebx,0x63
c001bb7c:	7e dd                	jle    c001bb5b <ATA::readyForCommand()+0x9>
c001bb7e:	83 ec 0c             	sub    esp,0xc
c001bb81:	6a 0a                	push   0xa
c001bb83:	e8 dc 97 ff ff       	call   c0015364 <milliTenthSleep(unsigned int)>
c001bb88:	83 c4 10             	add    esp,0x10
c001bb8b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bb91:	75 c8                	jne    c001bb5b <ATA::readyForCommand()+0x9>
c001bb93:	31 c0                	xor    eax,eax
c001bb95:	eb 02                	jmp    c001bb99 <ATA::readyForCommand()+0x47>
c001bb97:	b0 01                	mov    al,0x1
c001bb99:	5a                   	pop    edx
c001bb9a:	5b                   	pop    ebx
c001bb9b:	5e                   	pop    esi
c001bb9c:	c3                   	ret    
c001bb9d:	90                   	nop

c001bb9e <ATA::access(unsigned long long, int, void*, bool)>:
c001bb9e:	55                   	push   ebp
c001bb9f:	57                   	push   edi
c001bba0:	56                   	push   esi
c001bba1:	53                   	push   ebx
c001bba2:	83 ec 2c             	sub    esp,0x2c
c001bba5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bba9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bbad:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bbb1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bbb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbb9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bbbd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001bbc1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bbc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbcb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bbd1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bbd5:	c1 e0 06             	shl    eax,0x6
c001bbd8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bbe0:	74 5b                	je     c001bc3d <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001bbe2:	89 fa                	mov    edx,edi
c001bbe4:	89 f0                	mov    eax,esi
c001bbe6:	c1 ea 1c             	shr    edx,0x1c
c001bbe9:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001bbed:	89 d1                	mov    ecx,edx
c001bbef:	09 c1                	or     ecx,eax
c001bbf1:	74 25                	je     c001bc18 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bbf3:	31 ed                	xor    ebp,ebp
c001bbf5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bbfc:	89 fa                	mov    edx,edi
c001bbfe:	89 f0                	mov    eax,esi
c001bc00:	0f ad d0             	shrd   eax,edx,cl
c001bc03:	d3 ea                	shr    edx,cl
c001bc05:	f6 c1 20             	test   cl,0x20
c001bc08:	74 02                	je     c001bc0c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bc0a:	89 d0                	mov    eax,edx
c001bc0c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bc10:	45                   	inc    ebp
c001bc11:	83 fd 06             	cmp    ebp,0x6
c001bc14:	75 df                	jne    c001bbf5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bc16:	eb 71                	jmp    c001bc89 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001bc18:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bc1d:	89 f0                	mov    eax,esi
c001bc1f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc26:	0f ac f8 10          	shrd   eax,edi,0x10
c001bc2a:	bf 01 00 00 00       	mov    edi,0x1
c001bc2f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bc33:	c1 ee 18             	shr    esi,0x18
c001bc36:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc3b:	eb 53                	jmp    c001bc90 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bc3d:	6a 00                	push   0x0
c001bc3f:	6a 3f                	push   0x3f
c001bc41:	57                   	push   edi
c001bc42:	56                   	push   esi
c001bc43:	e8 d8 2a 00 00       	call   c001e720 <__umoddi3>
c001bc48:	83 c4 10             	add    esp,0x10
c001bc4b:	40                   	inc    eax
c001bc4c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bc50:	6a 00                	push   0x0
c001bc52:	68 f0 03 00 00       	push   0x3f0
c001bc57:	57                   	push   edi
c001bc58:	56                   	push   esi
c001bc59:	e8 c2 29 00 00       	call   c001e620 <__udivdi3>
c001bc5e:	83 c4 10             	add    esp,0x10
c001bc61:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bc66:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc6d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc72:	6a 00                	push   0x0
c001bc74:	6a 3f                	push   0x3f
c001bc76:	57                   	push   edi
c001bc77:	31 ff                	xor    edi,edi
c001bc79:	56                   	push   esi
c001bc7a:	e8 a1 29 00 00       	call   c001e620 <__udivdi3>
c001bc7f:	83 c4 10             	add    esp,0x10
c001bc82:	83 e0 0f             	and    eax,0xf
c001bc85:	89 c6                	mov    esi,eax
c001bc87:	eb 07                	jmp    c001bc90 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bc89:	31 f6                	xor    esi,esi
c001bc8b:	bf 02 00 00 00       	mov    edi,0x2
c001bc90:	50                   	push   eax
c001bc91:	6a 00                	push   0x0
c001bc93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc9a:	50                   	push   eax
c001bc9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bc9f:	e8 b6 f1 ff ff       	call   c001ae5a <IDE::enableIRQs(unsigned char, bool)>
c001bca4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bca7:	e8 a6 fe ff ff       	call   c001bb52 <ATA::readyForCommand()>
c001bcac:	83 c4 10             	add    esp,0x10
c001bcaf:	84 c0                	test   al,al
c001bcb1:	75 0a                	jne    c001bcbd <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001bcb3:	be 01 00 00 00       	mov    esi,0x1
c001bcb8:	e9 9b 02 00 00       	jmp    c001bf58 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bcbd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bcc3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bcc9:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bcd0:	c1 e0 04             	shl    eax,0x4
c001bcd3:	09 c6                	or     esi,eax
c001bcd5:	f7 c7 03 00 00 00    	test   edi,0x3
c001bcdb:	75 05                	jne    c001bce2 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001bcdd:	83 ce a0             	or     esi,0xffffffa0
c001bce0:	eb 03                	jmp    c001bce5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bce2:	83 ce e0             	or     esi,0xffffffe0
c001bce5:	89 f0                	mov    eax,esi
c001bce7:	0f b6 f0             	movzx  esi,al
c001bcea:	56                   	push   esi
c001bceb:	6a 06                	push   0x6
c001bced:	51                   	push   ecx
c001bcee:	52                   	push   edx
c001bcef:	e8 58 ef ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcf4:	83 c4 10             	add    esp,0x10
c001bcf7:	6a 00                	push   0x0
c001bcf9:	6a 01                	push   0x1
c001bcfb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd02:	50                   	push   eax
c001bd03:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd09:	e8 3e ef ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd0e:	89 f8                	mov    eax,edi
c001bd10:	83 c4 10             	add    esp,0x10
c001bd13:	0f b6 f0             	movzx  esi,al
c001bd16:	83 fe 02             	cmp    esi,0x2
c001bd19:	75 6e                	jne    c001bd89 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001bd1b:	6a 00                	push   0x0
c001bd1d:	6a 08                	push   0x8
c001bd1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd26:	50                   	push   eax
c001bd27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd2d:	e8 1a ef ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd32:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bd37:	50                   	push   eax
c001bd38:	6a 09                	push   0x9
c001bd3a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd41:	50                   	push   eax
c001bd42:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd48:	e8 ff ee ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd4d:	83 c4 20             	add    esp,0x20
c001bd50:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bd55:	50                   	push   eax
c001bd56:	6a 0a                	push   0xa
c001bd58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd5f:	50                   	push   eax
c001bd60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd66:	e8 e1 ee ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd6b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bd70:	50                   	push   eax
c001bd71:	6a 0b                	push   0xb
c001bd73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd7a:	50                   	push   eax
c001bd7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd81:	e8 c6 ee ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd86:	83 c4 20             	add    esp,0x20
c001bd89:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bd8e:	50                   	push   eax
c001bd8f:	6a 02                	push   0x2
c001bd91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd98:	50                   	push   eax
c001bd99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd9f:	e8 a8 ee ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bda4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bda9:	50                   	push   eax
c001bdaa:	6a 03                	push   0x3
c001bdac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdb3:	50                   	push   eax
c001bdb4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdba:	e8 8d ee ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdbf:	83 c4 20             	add    esp,0x20
c001bdc2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bdc7:	50                   	push   eax
c001bdc8:	6a 04                	push   0x4
c001bdca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdd1:	50                   	push   eax
c001bdd2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdd8:	e8 6f ee ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bddd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bde2:	50                   	push   eax
c001bde3:	6a 05                	push   0x5
c001bde5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdec:	50                   	push   eax
c001bded:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdf3:	e8 54 ee ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdf8:	83 c4 20             	add    esp,0x20
c001bdfb:	83 fe 02             	cmp    esi,0x2
c001bdfe:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001be03:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001be08:	85 c9                	test   ecx,ecx
c001be0a:	74 07                	je     c001be13 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001be0c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001be11:	75 47                	jne    c001be5a <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001be13:	89 f8                	mov    eax,edi
c001be15:	0f b6 f8             	movzx  edi,al
c001be18:	31 c0                	xor    eax,eax
c001be1a:	83 ff 02             	cmp    edi,0x2
c001be1d:	0f 95 c0             	setne  al
c001be20:	89 c6                	mov    esi,eax
c001be22:	74 0c                	je     c001be30 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001be24:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001be29:	b8 30 00 00 00       	mov    eax,0x30
c001be2e:	75 2f                	jne    c001be5f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be34:	83 f2 01             	xor    edx,0x1
c001be37:	85 c9                	test   ecx,ecx
c001be39:	74 09                	je     c001be44 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001be3b:	84 d2                	test   dl,dl
c001be3d:	b8 24 00 00 00       	mov    eax,0x24
c001be42:	75 1b                	jne    c001be5f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be44:	85 f6                	test   esi,esi
c001be46:	0f 84 67 fe ff ff    	je     c001bcb3 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001be4c:	84 d2                	test   dl,dl
c001be4e:	b8 20 00 00 00       	mov    eax,0x20
c001be53:	75 0a                	jne    c001be5f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be55:	e9 59 fe ff ff       	jmp    c001bcb3 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001be5a:	b8 34 00 00 00       	mov    eax,0x34
c001be5f:	50                   	push   eax
c001be60:	6a 07                	push   0x7
c001be62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be69:	50                   	push   eax
c001be6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be70:	e8 d7 ed ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be75:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001be79:	83 c4 10             	add    esp,0x10
c001be7c:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001be81:	85 f6                	test   esi,esi
c001be83:	0f 84 b5 00 00 00    	je     c001bf3e <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001be89:	50                   	push   eax
c001be8a:	6a 01                	push   0x1
c001be8c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be93:	50                   	push   eax
c001be94:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be9a:	e8 91 f8 ff ff       	call   c001b730 <IDE::polling(unsigned char, unsigned int)>
c001be9f:	83 c4 10             	add    esp,0x10
c001bea2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001bea8:	0f b6 c0             	movzx  eax,al
c001beab:	85 c0                	test   eax,eax
c001bead:	74 1f                	je     c001bece <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001beaf:	50                   	push   eax
c001beb0:	89 c6                	mov    esi,eax
c001beb2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001beb9:	0f b6 d2             	movzx  edx,dl
c001bebc:	50                   	push   eax
c001bebd:	52                   	push   edx
c001bebe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bec4:	e8 ad f7 ff ff       	call   c001b676 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bec9:	e9 87 00 00 00       	jmp    c001bf55 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001bece:	85 ed                	test   ebp,ebp
c001bed0:	74 3b                	je     c001bf0d <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001bed2:	31 ff                	xor    edi,edi
c001bed4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bed8:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001bedc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001bee1:	50                   	push   eax
c001bee2:	50                   	push   eax
c001bee3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001beea:	50                   	push   eax
c001beeb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bef1:	e8 44 ed ff ff       	call   c001ac3a <IDE::getBase(unsigned char)>
c001bef6:	89 c2                	mov    edx,eax
c001bef8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001befd:	66 ef                	out    dx,ax
c001beff:	47                   	inc    edi
c001bf00:	83 c4 10             	add    esp,0x10
c001bf03:	81 ff 00 01 00 00    	cmp    edi,0x100
c001bf09:	75 c9                	jne    c001bed4 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001bf0b:	eb 23                	jmp    c001bf30 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001bf0d:	51                   	push   ecx
c001bf0e:	0f b6 d2             	movzx  edx,dl
c001bf11:	51                   	push   ecx
c001bf12:	52                   	push   edx
c001bf13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf19:	e8 1c ed ff ff       	call   c001ac3a <IDE::getBase(unsigned char)>
c001bf1e:	b9 00 01 00 00       	mov    ecx,0x100
c001bf23:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bf27:	89 c2                	mov    edx,eax
c001bf29:	fc                   	cld    
c001bf2a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bf2d:	83 c4 10             	add    esp,0x10
c001bf30:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bf38:	4e                   	dec    esi
c001bf39:	e9 43 ff ff ff       	jmp    c001be81 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001bf3e:	31 f6                	xor    esi,esi
c001bf40:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bf45:	74 11                	je     c001bf58 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bf47:	50                   	push   eax
c001bf48:	50                   	push   eax
c001bf49:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bf4e:	50                   	push   eax
c001bf4f:	53                   	push   ebx
c001bf50:	e8 af fb ff ff       	call   c001bb04 <ATA::flush(bool)>
c001bf55:	83 c4 10             	add    esp,0x10
c001bf58:	83 c4 2c             	add    esp,0x2c
c001bf5b:	89 f0                	mov    eax,esi
c001bf5d:	5b                   	pop    ebx
c001bf5e:	5e                   	pop    esi
c001bf5f:	5f                   	pop    edi
c001bf60:	5d                   	pop    ebp
c001bf61:	c3                   	ret    

c001bf62 <ATA::detectCHS()>:
c001bf62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf66:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bf6c:	c1 e0 06             	shl    eax,0x6
c001bf6f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bf75:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bf7f:	c7 44 24 04 c8 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bc8
c001bf87:	e9 c1 48 ff ff       	jmp    c001084d <KePanic(char const*)>

c001bf8c <ATA::open(int, int, void*)>:
c001bf8c:	53                   	push   ebx
c001bf8d:	83 ec 08             	sub    esp,0x8
c001bf90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf9c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bfa2:	c1 e0 06             	shl    eax,0x6
c001bfa5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bfab:	01 d0                	add    eax,edx
c001bfad:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bfb4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bfba:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bfc1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bfcb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bfd2:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bfd8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bfdf:	75 0c                	jne    c001bfed <ATA::open(int, int, void*)+0x61>
c001bfe1:	83 ec 0c             	sub    esp,0xc
c001bfe4:	53                   	push   ebx
c001bfe5:	e8 78 ff ff ff       	call   c001bf62 <ATA::detectCHS()>
c001bfea:	83 c4 10             	add    esp,0x10
c001bfed:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bff3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bff9:	c1 e0 06             	shl    eax,0x6
c001bffc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c003:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c00d:	d1 e8                	shr    eax,1
c001c00f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c015:	6a 04                	push   0x4
c001c017:	6a 0c                	push   0xc
c001c019:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c020:	50                   	push   eax
c001c021:	52                   	push   edx
c001c022:	e8 25 ec ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c027:	90                   	nop
c001c028:	90                   	nop
c001c029:	6a 00                	push   0x0
c001c02b:	6a 0c                	push   0xc
c001c02d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c034:	50                   	push   eax
c001c035:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c03b:	e8 0c ec ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c040:	83 c4 14             	add    esp,0x14
c001c043:	53                   	push   ebx
c001c044:	e8 d1 01 ff ff       	call   c000c21a <PhysicalDisk::startCache()>
c001c049:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c04c:	e8 15 14 ff ff       	call   c000d466 <createPartitionsForDisk(PhysicalDisk*)>
c001c051:	83 c4 18             	add    esp,0x18
c001c054:	31 c0                	xor    eax,eax
c001c056:	5b                   	pop    ebx
c001c057:	c3                   	ret    

c001c058 <combineCharAndColour(char, unsigned char)>:
c001c058:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c05d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c063:	c1 e0 08             	shl    eax,0x8
c001c066:	09 d0                	or     eax,edx
c001c068:	c3                   	ret    

c001c069 <combineColours(unsigned char, unsigned char)>:
c001c069:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c06e:	c1 e0 04             	shl    eax,0x4
c001c071:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c075:	c3                   	ret    

c001c076 <ATA::read(unsigned long long, int, void*)>:
c001c076:	55                   	push   ebp
c001c077:	57                   	push   edi
c001c078:	56                   	push   esi
c001c079:	be 04 00 00 00       	mov    esi,0x4
c001c07e:	53                   	push   ebx
c001c07f:	83 ec 0c             	sub    esp,0xc
c001c082:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c086:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c08a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c08e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c092:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c095:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c09b:	0f 87 a1 01 00 00    	ja     c001c242 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0a1:	85 c9                	test   ecx,ecx
c001c0a3:	be 06 00 00 00       	mov    esi,0x6
c001c0a8:	0f 84 94 01 00 00    	je     c001c242 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0ae:	55                   	push   ebp
c001c0af:	55                   	push   ebp
c001c0b0:	6a 00                	push   0x0
c001c0b2:	51                   	push   ecx
c001c0b3:	53                   	push   ebx
c001c0b4:	52                   	push   edx
c001c0b5:	50                   	push   eax
c001c0b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0ba:	e8 df fa ff ff       	call   c001bb9e <ATA::access(unsigned long long, int, void*, bool)>
c001c0bf:	83 c4 20             	add    esp,0x20
c001c0c2:	85 c0                	test   eax,eax
c001c0c4:	89 c6                	mov    esi,eax
c001c0c6:	0f 85 71 01 00 00    	jne    c001c23d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c0cc:	50                   	push   eax
c001c0cd:	bd 10 27 00 00       	mov    ebp,0x2710
c001c0d2:	50                   	push   eax
c001c0d3:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c0d9:	6a 0f                	push   0xf
c001c0db:	6a 00                	push   0x0
c001c0dd:	89 da                	mov    edx,ebx
c001c0df:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c0e5:	e8 7f ff ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001c0ea:	59                   	pop    ecx
c001c0eb:	b9 0a 00 00 00       	mov    ecx,0xa
c001c0f0:	5b                   	pop    ebx
c001c0f1:	0f b6 d8             	movzx  ebx,al
c001c0f4:	89 d0                	mov    eax,edx
c001c0f6:	53                   	push   ebx
c001c0f7:	99                   	cdq    
c001c0f8:	f7 fd                	idiv   ebp
c001c0fa:	99                   	cdq    
c001c0fb:	f7 f9                	idiv   ecx
c001c0fd:	83 c2 30             	add    edx,0x30
c001c100:	0f b6 d2             	movzx  edx,dl
c001c103:	52                   	push   edx
c001c104:	e8 4f ff ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c109:	5f                   	pop    edi
c001c10a:	bf e8 03 00 00       	mov    edi,0x3e8
c001c10f:	5a                   	pop    edx
c001c110:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c116:	53                   	push   ebx
c001c117:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c11c:	99                   	cdq    
c001c11d:	f7 ff                	idiv   edi
c001c11f:	99                   	cdq    
c001c120:	f7 f9                	idiv   ecx
c001c122:	8d 42 30             	lea    eax,[edx+0x30]
c001c125:	0f b6 c0             	movzx  eax,al
c001c128:	50                   	push   eax
c001c129:	e8 2a ff ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c12e:	5f                   	pop    edi
c001c12f:	bf 64 00 00 00       	mov    edi,0x64
c001c134:	5a                   	pop    edx
c001c135:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c13b:	53                   	push   ebx
c001c13c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c141:	99                   	cdq    
c001c142:	f7 ff                	idiv   edi
c001c144:	99                   	cdq    
c001c145:	f7 f9                	idiv   ecx
c001c147:	8d 42 30             	lea    eax,[edx+0x30]
c001c14a:	0f b6 c0             	movzx  eax,al
c001c14d:	50                   	push   eax
c001c14e:	e8 05 ff ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c153:	5a                   	pop    edx
c001c154:	5a                   	pop    edx
c001c155:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c15b:	53                   	push   ebx
c001c15c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c161:	99                   	cdq    
c001c162:	f7 f9                	idiv   ecx
c001c164:	99                   	cdq    
c001c165:	f7 f9                	idiv   ecx
c001c167:	8d 42 30             	lea    eax,[edx+0x30]
c001c16a:	0f b6 c0             	movzx  eax,al
c001c16d:	50                   	push   eax
c001c16e:	e8 e5 fe ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c173:	5a                   	pop    edx
c001c174:	5a                   	pop    edx
c001c175:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c17b:	53                   	push   ebx
c001c17c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c181:	99                   	cdq    
c001c182:	f7 f9                	idiv   ecx
c001c184:	83 c2 30             	add    edx,0x30
c001c187:	0f b6 d2             	movzx  edx,dl
c001c18a:	52                   	push   edx
c001c18b:	e8 c8 fe ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c190:	5a                   	pop    edx
c001c191:	5a                   	pop    edx
c001c192:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c198:	53                   	push   ebx
c001c199:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c19e:	99                   	cdq    
c001c19f:	f7 fd                	idiv   ebp
c001c1a1:	99                   	cdq    
c001c1a2:	f7 f9                	idiv   ecx
c001c1a4:	8d 42 30             	lea    eax,[edx+0x30]
c001c1a7:	0f b6 c0             	movzx  eax,al
c001c1aa:	50                   	push   eax
c001c1ab:	e8 a8 fe ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c1b0:	5d                   	pop    ebp
c001c1b1:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c1b6:	5a                   	pop    edx
c001c1b7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c1bd:	53                   	push   ebx
c001c1be:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1c3:	99                   	cdq    
c001c1c4:	f7 fd                	idiv   ebp
c001c1c6:	99                   	cdq    
c001c1c7:	f7 f9                	idiv   ecx
c001c1c9:	8d 42 30             	lea    eax,[edx+0x30]
c001c1cc:	0f b6 c0             	movzx  eax,al
c001c1cf:	50                   	push   eax
c001c1d0:	e8 83 fe ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c1d5:	5d                   	pop    ebp
c001c1d6:	5a                   	pop    edx
c001c1d7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c1dd:	53                   	push   ebx
c001c1de:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1e3:	99                   	cdq    
c001c1e4:	f7 ff                	idiv   edi
c001c1e6:	99                   	cdq    
c001c1e7:	f7 f9                	idiv   ecx
c001c1e9:	8d 42 30             	lea    eax,[edx+0x30]
c001c1ec:	0f b6 c0             	movzx  eax,al
c001c1ef:	50                   	push   eax
c001c1f0:	e8 63 fe ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c1f5:	5f                   	pop    edi
c001c1f6:	5d                   	pop    ebp
c001c1f7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c1fd:	53                   	push   ebx
c001c1fe:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c203:	99                   	cdq    
c001c204:	f7 f9                	idiv   ecx
c001c206:	99                   	cdq    
c001c207:	f7 f9                	idiv   ecx
c001c209:	8d 42 30             	lea    eax,[edx+0x30]
c001c20c:	0f b6 c0             	movzx  eax,al
c001c20f:	50                   	push   eax
c001c210:	e8 43 fe ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c215:	5a                   	pop    edx
c001c216:	5f                   	pop    edi
c001c217:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c21d:	53                   	push   ebx
c001c21e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c223:	99                   	cdq    
c001c224:	f7 f9                	idiv   ecx
c001c226:	83 c2 30             	add    edx,0x30
c001c229:	0f b6 d2             	movzx  edx,dl
c001c22c:	52                   	push   edx
c001c22d:	e8 26 fe ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c232:	83 c4 10             	add    esp,0x10
c001c235:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c23b:	eb 05                	jmp    c001c242 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c23d:	be 01 00 00 00       	mov    esi,0x1
c001c242:	83 c4 0c             	add    esp,0xc
c001c245:	89 f0                	mov    eax,esi
c001c247:	5b                   	pop    ebx
c001c248:	5e                   	pop    esi
c001c249:	5f                   	pop    edi
c001c24a:	5d                   	pop    ebp
c001c24b:	c3                   	ret    

c001c24c <ATA::write(unsigned long long, int, void*)>:
c001c24c:	55                   	push   ebp
c001c24d:	57                   	push   edi
c001c24e:	56                   	push   esi
c001c24f:	be 04 00 00 00       	mov    esi,0x4
c001c254:	53                   	push   ebx
c001c255:	83 ec 0c             	sub    esp,0xc
c001c258:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c25c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c260:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c264:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c268:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c26b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c271:	0f 87 9c 01 00 00    	ja     c001c413 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c277:	85 c9                	test   ecx,ecx
c001c279:	be 06 00 00 00       	mov    esi,0x6
c001c27e:	0f 84 8f 01 00 00    	je     c001c413 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c284:	55                   	push   ebp
c001c285:	55                   	push   ebp
c001c286:	6a 01                	push   0x1
c001c288:	51                   	push   ecx
c001c289:	53                   	push   ebx
c001c28a:	52                   	push   edx
c001c28b:	50                   	push   eax
c001c28c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c290:	e8 09 f9 ff ff       	call   c001bb9e <ATA::access(unsigned long long, int, void*, bool)>
c001c295:	83 c4 20             	add    esp,0x20
c001c298:	85 c0                	test   eax,eax
c001c29a:	89 c6                	mov    esi,eax
c001c29c:	0f 85 6c 01 00 00    	jne    c001c40e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c2a2:	50                   	push   eax
c001c2a3:	bd 10 27 00 00       	mov    ebp,0x2710
c001c2a8:	50                   	push   eax
c001c2a9:	6a 0f                	push   0xf
c001c2ab:	6a 00                	push   0x0
c001c2ad:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c2b3:	e8 b1 fd ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001c2b8:	5a                   	pop    edx
c001c2b9:	59                   	pop    ecx
c001c2ba:	b9 0a 00 00 00       	mov    ecx,0xa
c001c2bf:	0f b6 d8             	movzx  ebx,al
c001c2c2:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2c7:	53                   	push   ebx
c001c2c8:	99                   	cdq    
c001c2c9:	f7 fd                	idiv   ebp
c001c2cb:	99                   	cdq    
c001c2cc:	f7 f9                	idiv   ecx
c001c2ce:	8d 42 30             	lea    eax,[edx+0x30]
c001c2d1:	0f b6 c0             	movzx  eax,al
c001c2d4:	50                   	push   eax
c001c2d5:	e8 7e fd ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c2da:	5f                   	pop    edi
c001c2db:	bf e8 03 00 00       	mov    edi,0x3e8
c001c2e0:	5a                   	pop    edx
c001c2e1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c2e7:	53                   	push   ebx
c001c2e8:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2ed:	99                   	cdq    
c001c2ee:	f7 ff                	idiv   edi
c001c2f0:	99                   	cdq    
c001c2f1:	f7 f9                	idiv   ecx
c001c2f3:	8d 42 30             	lea    eax,[edx+0x30]
c001c2f6:	0f b6 c0             	movzx  eax,al
c001c2f9:	50                   	push   eax
c001c2fa:	e8 59 fd ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c2ff:	5f                   	pop    edi
c001c300:	bf 64 00 00 00       	mov    edi,0x64
c001c305:	5a                   	pop    edx
c001c306:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c30c:	53                   	push   ebx
c001c30d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c312:	99                   	cdq    
c001c313:	f7 ff                	idiv   edi
c001c315:	99                   	cdq    
c001c316:	f7 f9                	idiv   ecx
c001c318:	8d 42 30             	lea    eax,[edx+0x30]
c001c31b:	0f b6 c0             	movzx  eax,al
c001c31e:	50                   	push   eax
c001c31f:	e8 34 fd ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c324:	5a                   	pop    edx
c001c325:	5a                   	pop    edx
c001c326:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c32c:	53                   	push   ebx
c001c32d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c332:	99                   	cdq    
c001c333:	f7 f9                	idiv   ecx
c001c335:	99                   	cdq    
c001c336:	f7 f9                	idiv   ecx
c001c338:	8d 42 30             	lea    eax,[edx+0x30]
c001c33b:	0f b6 c0             	movzx  eax,al
c001c33e:	50                   	push   eax
c001c33f:	e8 14 fd ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c344:	5a                   	pop    edx
c001c345:	5a                   	pop    edx
c001c346:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c34c:	53                   	push   ebx
c001c34d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c352:	99                   	cdq    
c001c353:	f7 f9                	idiv   ecx
c001c355:	83 c2 30             	add    edx,0x30
c001c358:	0f b6 d2             	movzx  edx,dl
c001c35b:	52                   	push   edx
c001c35c:	e8 f7 fc ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c361:	5a                   	pop    edx
c001c362:	5a                   	pop    edx
c001c363:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c369:	53                   	push   ebx
c001c36a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c36f:	99                   	cdq    
c001c370:	f7 fd                	idiv   ebp
c001c372:	99                   	cdq    
c001c373:	f7 f9                	idiv   ecx
c001c375:	8d 42 30             	lea    eax,[edx+0x30]
c001c378:	0f b6 c0             	movzx  eax,al
c001c37b:	50                   	push   eax
c001c37c:	e8 d7 fc ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c381:	5d                   	pop    ebp
c001c382:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c387:	5a                   	pop    edx
c001c388:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c38e:	53                   	push   ebx
c001c38f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c394:	99                   	cdq    
c001c395:	f7 fd                	idiv   ebp
c001c397:	99                   	cdq    
c001c398:	f7 f9                	idiv   ecx
c001c39a:	8d 42 30             	lea    eax,[edx+0x30]
c001c39d:	0f b6 c0             	movzx  eax,al
c001c3a0:	50                   	push   eax
c001c3a1:	e8 b2 fc ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c3a6:	5d                   	pop    ebp
c001c3a7:	5a                   	pop    edx
c001c3a8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c3ae:	53                   	push   ebx
c001c3af:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3b4:	99                   	cdq    
c001c3b5:	f7 ff                	idiv   edi
c001c3b7:	99                   	cdq    
c001c3b8:	f7 f9                	idiv   ecx
c001c3ba:	8d 42 30             	lea    eax,[edx+0x30]
c001c3bd:	0f b6 c0             	movzx  eax,al
c001c3c0:	50                   	push   eax
c001c3c1:	e8 92 fc ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c3c6:	5f                   	pop    edi
c001c3c7:	5d                   	pop    ebp
c001c3c8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c3ce:	53                   	push   ebx
c001c3cf:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3d4:	99                   	cdq    
c001c3d5:	f7 f9                	idiv   ecx
c001c3d7:	99                   	cdq    
c001c3d8:	f7 f9                	idiv   ecx
c001c3da:	8d 42 30             	lea    eax,[edx+0x30]
c001c3dd:	0f b6 c0             	movzx  eax,al
c001c3e0:	50                   	push   eax
c001c3e1:	e8 72 fc ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c3e6:	5a                   	pop    edx
c001c3e7:	5f                   	pop    edi
c001c3e8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c3ee:	53                   	push   ebx
c001c3ef:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3f4:	99                   	cdq    
c001c3f5:	f7 f9                	idiv   ecx
c001c3f7:	83 c2 30             	add    edx,0x30
c001c3fa:	0f b6 d2             	movzx  edx,dl
c001c3fd:	52                   	push   edx
c001c3fe:	e8 55 fc ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001c403:	83 c4 10             	add    esp,0x10
c001c406:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c40c:	eb 05                	jmp    c001c413 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c40e:	be 01 00 00 00       	mov    esi,0x1
c001c413:	83 c4 0c             	add    esp,0xc
c001c416:	89 f0                	mov    eax,esi
c001c418:	5b                   	pop    ebx
c001c419:	5e                   	pop    esi
c001c41a:	5f                   	pop    edi
c001c41b:	5d                   	pop    ebp
c001c41c:	c3                   	ret    
c001c41d:	90                   	nop

c001c41e <ATAPI::write(unsigned long long, int, void*)>:
c001c41e:	b8 03 00 00 00       	mov    eax,0x3
c001c423:	c3                   	ret    

c001c424 <ATAPI::close(int, int, void*)>:
c001c424:	83 ec 0c             	sub    esp,0xc
c001c427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c42b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c431:	85 c0                	test   eax,eax
c001c433:	74 0c                	je     c001c441 <ATAPI::close(int, int, void*)+0x1d>
c001c435:	8b 10                	mov    edx,DWORD PTR [eax]
c001c437:	83 ec 0c             	sub    esp,0xc
c001c43a:	50                   	push   eax
c001c43b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c43e:	83 c4 10             	add    esp,0x10
c001c441:	31 c0                	xor    eax,eax
c001c443:	83 c4 0c             	add    esp,0xc
c001c446:	c3                   	ret    
c001c447:	90                   	nop

c001c448 <ATAPI::ATAPI()>:
c001c448:	83 ec 0c             	sub    esp,0xc
c001c44b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44f:	83 ec 04             	sub    esp,0x4
c001c452:	68 00 08 00 00       	push   0x800
c001c457:	68 11 1d 02 c0       	push   0xc0021d11
c001c45c:	50                   	push   eax
c001c45d:	e8 50 fd fe ff       	call   c000c1b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c462:	83 c4 10             	add    esp,0x10
c001c465:	ba 2c 1c 02 c0       	mov    edx,0xc0021c2c
c001c46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46e:	89 10                	mov    DWORD PTR [eax],edx
c001c470:	90                   	nop
c001c471:	83 c4 0c             	add    esp,0xc
c001c474:	c3                   	ret    
c001c475:	90                   	nop

c001c476 <ATAPI::readyForCommand()>:
c001c476:	56                   	push   esi
c001c477:	53                   	push   ebx
c001c478:	53                   	push   ebx
c001c479:	31 db                	xor    ebx,ebx
c001c47b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c47f:	51                   	push   ecx
c001c480:	6a 0c                	push   0xc
c001c482:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c489:	50                   	push   eax
c001c48a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c490:	e8 77 e8 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001c495:	83 c4 10             	add    esp,0x10
c001c498:	a8 88                	test   al,0x88
c001c49a:	74 25                	je     c001c4c1 <ATAPI::readyForCommand()+0x4b>
c001c49c:	43                   	inc    ebx
c001c49d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c4a3:	7e da                	jle    c001c47f <ATAPI::readyForCommand()+0x9>
c001c4a5:	83 ec 0c             	sub    esp,0xc
c001c4a8:	68 5e 01 00 00       	push   0x15e
c001c4ad:	e8 b2 8e ff ff       	call   c0015364 <milliTenthSleep(unsigned int)>
c001c4b2:	83 c4 10             	add    esp,0x10
c001c4b5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c4bb:	75 c2                	jne    c001c47f <ATAPI::readyForCommand()+0x9>
c001c4bd:	31 c0                	xor    eax,eax
c001c4bf:	eb 02                	jmp    c001c4c3 <ATAPI::readyForCommand()+0x4d>
c001c4c1:	b0 01                	mov    al,0x1
c001c4c3:	5a                   	pop    edx
c001c4c4:	5b                   	pop    ebx
c001c4c5:	5e                   	pop    esi
c001c4c6:	c3                   	ret    
c001c4c7:	90                   	nop

c001c4c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c4c8:	55                   	push   ebp
c001c4c9:	57                   	push   edi
c001c4ca:	56                   	push   esi
c001c4cb:	53                   	push   ebx
c001c4cc:	83 ec 20             	sub    esp,0x20
c001c4cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c4d3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c4d7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c4db:	6a 01                	push   0x1
c001c4dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4e4:	50                   	push   eax
c001c4e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4eb:	e8 6a e9 ff ff       	call   c001ae5a <IDE::enableIRQs(unsigned char, bool)>
c001c4f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4f7:	59                   	pop    ecx
c001c4f8:	5e                   	pop    esi
c001c4f9:	50                   	push   eax
c001c4fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c500:	e8 21 e7 ff ff       	call   c001ac26 <IDE::prepareInterrupt(unsigned char)>
c001c505:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c508:	e8 69 ff ff ff       	call   c001c476 <ATAPI::readyForCommand()>
c001c50d:	83 c4 10             	add    esp,0x10
c001c510:	84 c0                	test   al,al
c001c512:	75 0a                	jne    c001c51e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001c514:	bb 01 00 00 00       	mov    ebx,0x1
c001c519:	e9 5f 02 00 00       	jmp    c001c77d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c51e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c524:	c1 e0 04             	shl    eax,0x4
c001c527:	0f b6 c0             	movzx  eax,al
c001c52a:	50                   	push   eax
c001c52b:	6a 06                	push   0x6
c001c52d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c534:	50                   	push   eax
c001c535:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c53b:	e8 0c e7 ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c540:	6a 00                	push   0x0
c001c542:	6a 01                	push   0x1
c001c544:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c54b:	50                   	push   eax
c001c54c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c552:	e8 f5 e6 ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c557:	83 c4 20             	add    esp,0x20
c001c55a:	0f b6 c3             	movzx  eax,bl
c001c55d:	50                   	push   eax
c001c55e:	0f b6 df             	movzx  ebx,bh
c001c561:	6a 04                	push   0x4
c001c563:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c56a:	50                   	push   eax
c001c56b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c571:	e8 d6 e6 ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c576:	53                   	push   ebx
c001c577:	6a 05                	push   0x5
c001c579:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c580:	50                   	push   eax
c001c581:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c587:	e8 c0 e6 ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c58c:	83 c4 20             	add    esp,0x20
c001c58f:	68 a0 00 00 00       	push   0xa0
c001c594:	6a 07                	push   0x7
c001c596:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c59d:	50                   	push   eax
c001c59e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5a4:	e8 a3 e6 ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5a9:	83 c4 0c             	add    esp,0xc
c001c5ac:	6a 01                	push   0x1
c001c5ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5b5:	50                   	push   eax
c001c5b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5bc:	e8 6f f1 ff ff       	call   c001b730 <IDE::polling(unsigned char, unsigned int)>
c001c5c1:	83 c4 10             	add    esp,0x10
c001c5c4:	0f b6 d8             	movzx  ebx,al
c001c5c7:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c5cd:	85 db                	test   ebx,ebx
c001c5cf:	74 20                	je     c001c5f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001c5d1:	53                   	push   ebx
c001c5d2:	0f b6 c0             	movzx  eax,al
c001c5d5:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c5dc:	52                   	push   edx
c001c5dd:	50                   	push   eax
c001c5de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5e4:	e8 8d f0 ff ff       	call   c001b676 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c5e9:	83 c4 10             	add    esp,0x10
c001c5ec:	e9 8c 01 00 00       	jmp    c001c77d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c5f1:	52                   	push   edx
c001c5f2:	0f b6 c0             	movzx  eax,al
c001c5f5:	52                   	push   edx
c001c5f6:	50                   	push   eax
c001c5f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5fd:	e8 38 e6 ff ff       	call   c001ac3a <IDE::getBase(unsigned char)>
c001c602:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c606:	b9 06 00 00 00       	mov    ecx,0x6
c001c60b:	89 c2                	mov    edx,eax
c001c60d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c610:	89 e8                	mov    eax,ebp
c001c612:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c616:	83 c4 10             	add    esp,0x10
c001c619:	0f b6 c0             	movzx  eax,al
c001c61c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c620:	85 db                	test   ebx,ebx
c001c622:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c628:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c62f:	0f 84 eb 00 00 00    	je     c001c720 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c635:	55                   	push   ebp
c001c636:	55                   	push   ebp
c001c637:	52                   	push   edx
c001c638:	50                   	push   eax
c001c639:	e8 82 e7 ff ff       	call   c001adc0 <IDE::waitInterrupt(unsigned char)>
c001c63e:	83 c4 10             	add    esp,0x10
c001c641:	84 c0                	test   al,al
c001c643:	0f 84 cb fe ff ff    	je     c001c514 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c649:	56                   	push   esi
c001c64a:	56                   	push   esi
c001c64b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c652:	50                   	push   eax
c001c653:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c659:	e8 c8 e5 ff ff       	call   c001ac26 <IDE::prepareInterrupt(unsigned char)>
c001c65e:	83 c4 0c             	add    esp,0xc
c001c661:	6a 04                	push   0x4
c001c663:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c66a:	50                   	push   eax
c001c66b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c671:	e8 96 e6 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001c676:	83 c4 0c             	add    esp,0xc
c001c679:	6a 05                	push   0x5
c001c67b:	89 c6                	mov    esi,eax
c001c67d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c684:	50                   	push   eax
c001c685:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c68b:	e8 7c e6 ff ff       	call   c001ad0c <IDE::read(unsigned char, unsigned char)>
c001c690:	83 c4 10             	add    esp,0x10
c001c693:	0f b6 e8             	movzx  ebp,al
c001c696:	89 f0                	mov    eax,esi
c001c698:	c1 e5 08             	shl    ebp,0x8
c001c69b:	0f b6 f0             	movzx  esi,al
c001c69e:	09 f5                	or     ebp,esi
c001c6a0:	31 f6                	xor    esi,esi
c001c6a2:	d1 fd                	sar    ebp,1
c001c6a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c6a9:	74 5c                	je     c001c707 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001c6ab:	39 ee                	cmp    esi,ebp
c001c6ad:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c6b3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c6ba:	75 0d                	jne    c001c6c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001c6bc:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c6bf:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001c6c3:	4b                   	dec    ebx
c001c6c4:	e9 57 ff ff ff       	jmp    c001c620 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001c6c9:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c6cd:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001c6d1:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001c6d6:	51                   	push   ecx
c001c6d7:	51                   	push   ecx
c001c6d8:	52                   	push   edx
c001c6d9:	50                   	push   eax
c001c6da:	e8 5b e5 ff ff       	call   c001ac3a <IDE::getBase(unsigned char)>
c001c6df:	89 c2                	mov    edx,eax
c001c6e1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001c6e6:	66 ef                	out    dx,ax
c001c6e8:	46                   	inc    esi
c001c6e9:	83 c4 10             	add    esp,0x10
c001c6ec:	eb bd                	jmp    c001c6ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001c6ee:	51                   	push   ecx
c001c6ef:	51                   	push   ecx
c001c6f0:	52                   	push   edx
c001c6f1:	50                   	push   eax
c001c6f2:	e8 43 e5 ff ff       	call   c001ac3a <IDE::getBase(unsigned char)>
c001c6f7:	89 c2                	mov    edx,eax
c001c6f9:	66 ed                	in     ax,dx
c001c6fb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c6ff:	83 c4 10             	add    esp,0x10
c001c702:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001c706:	46                   	inc    esi
c001c707:	39 ee                	cmp    esi,ebp
c001c709:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c70f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c716:	75 d6                	jne    c001c6ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c718:	01 f6                	add    esi,esi
c001c71a:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001c71e:	eb a3                	jmp    c001c6c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001c720:	51                   	push   ecx
c001c721:	51                   	push   ecx
c001c722:	52                   	push   edx
c001c723:	50                   	push   eax
c001c724:	e8 97 e6 ff ff       	call   c001adc0 <IDE::waitInterrupt(unsigned char)>
c001c729:	83 c4 10             	add    esp,0x10
c001c72c:	84 c0                	test   al,al
c001c72e:	0f 84 e0 fd ff ff    	je     c001c514 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c734:	52                   	push   edx
c001c735:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c73a:	52                   	push   edx
c001c73b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c742:	50                   	push   eax
c001c743:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c749:	e8 d8 e4 ff ff       	call   c001ac26 <IDE::prepareInterrupt(unsigned char)>
c001c74e:	83 c4 10             	add    esp,0x10
c001c751:	50                   	push   eax
c001c752:	50                   	push   eax
c001c753:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c75a:	50                   	push   eax
c001c75b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c761:	e8 d4 e4 ff ff       	call   c001ac3a <IDE::getBase(unsigned char)>
c001c766:	8d 50 07             	lea    edx,[eax+0x7]
c001c769:	ec                   	in     al,dx
c001c76a:	83 c4 10             	add    esp,0x10
c001c76d:	a8 88                	test   al,0x88
c001c76f:	74 0a                	je     c001c77b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c771:	4b                   	dec    ebx
c001c772:	75 dd                	jne    c001c751 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001c774:	bb 02 00 00 00       	mov    ebx,0x2
c001c779:	eb 02                	jmp    c001c77d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c77b:	31 db                	xor    ebx,ebx
c001c77d:	83 c4 1c             	add    esp,0x1c
c001c780:	89 d8                	mov    eax,ebx
c001c782:	5b                   	pop    ebx
c001c783:	5e                   	pop    esi
c001c784:	5f                   	pop    edi
c001c785:	5d                   	pop    ebp
c001c786:	c3                   	ret    
c001c787:	90                   	nop

c001c788 <ATAPI::diskRemoved()>:
c001c788:	53                   	push   ebx
c001c789:	83 ec 14             	sub    esp,0x14
c001c78c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c790:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c797:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c79d:	e8 b2 09 ff ff       	call   c000d154 <LogicalDisk::unmount()>
c001c7a2:	58                   	pop    eax
c001c7a3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c7a9:	e8 8a 13 ff ff       	call   c000db38 <VCache::writeWriteBuffer()>
c001c7ae:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c7b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7b8:	83 c4 18             	add    esp,0x18
c001c7bb:	5b                   	pop    ebx
c001c7bc:	e9 67 13 ff ff       	jmp    c000db28 <VCache::invalidateReadBuffer()>
c001c7c1:	90                   	nop

c001c7c2 <ATAPI::eject()>:
c001c7c2:	57                   	push   edi
c001c7c3:	b9 03 00 00 00       	mov    ecx,0x3
c001c7c8:	53                   	push   ebx
c001c7c9:	83 ec 14             	sub    esp,0x14
c001c7cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c7d0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c7d4:	fc                   	cld    
c001c7d5:	31 c0                	xor    eax,eax
c001c7d7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c7d9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c7de:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c7e3:	50                   	push   eax
c001c7e4:	50                   	push   eax
c001c7e5:	6a 00                	push   0x0
c001c7e7:	6a 00                	push   0x0
c001c7e9:	6a 00                	push   0x0
c001c7eb:	6a 02                	push   0x2
c001c7ed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7f1:	50                   	push   eax
c001c7f2:	53                   	push   ebx
c001c7f3:	e8 d0 fc ff ff       	call   c001c4c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7f8:	83 c4 14             	add    esp,0x14
c001c7fb:	53                   	push   ebx
c001c7fc:	e8 87 ff ff ff       	call   c001c788 <ATAPI::diskRemoved()>
c001c801:	83 c4 24             	add    esp,0x24
c001c804:	31 c0                	xor    eax,eax
c001c806:	5b                   	pop    ebx
c001c807:	5f                   	pop    edi
c001c808:	c3                   	ret    
c001c809:	90                   	nop

c001c80a <ATAPI::diskInserted()>:
c001c80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c80e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c815:	c3                   	ret    

c001c816 <ATAPI::detectMedia()>:
c001c816:	56                   	push   esi
c001c817:	53                   	push   ebx
c001c818:	83 ec 28             	sub    esp,0x28
c001c81b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c81f:	6a 0c                	push   0xc
c001c821:	6a 00                	push   0x0
c001c823:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c827:	56                   	push   esi
c001c828:	e8 c3 3c fe ff       	call   c00004f0 <memset>
c001c82d:	58                   	pop    eax
c001c82e:	5a                   	pop    edx
c001c82f:	6a 00                	push   0x0
c001c831:	6a 00                	push   0x0
c001c833:	6a 00                	push   0x0
c001c835:	6a 00                	push   0x0
c001c837:	56                   	push   esi
c001c838:	53                   	push   ebx
c001c839:	e8 8a fc ff ff       	call   c001c4c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c83e:	83 c4 1c             	add    esp,0x1c
c001c841:	6a 0c                	push   0xc
c001c843:	6a 00                	push   0x0
c001c845:	56                   	push   esi
c001c846:	e8 a5 3c fe ff       	call   c00004f0 <memset>
c001c84b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c850:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c855:	59                   	pop    ecx
c001c856:	58                   	pop    eax
c001c857:	6a 01                	push   0x1
c001c859:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c85d:	50                   	push   eax
c001c85e:	6a 00                	push   0x0
c001c860:	6a 12                	push   0x12
c001c862:	56                   	push   esi
c001c863:	53                   	push   ebx
c001c864:	e8 5f fc ff ff       	call   c001c4c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c869:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c86d:	83 c4 20             	add    esp,0x20
c001c870:	83 e0 7f             	and    eax,0x7f
c001c873:	83 f8 70             	cmp    eax,0x70
c001c876:	74 15                	je     c001c88d <ATAPI::detectMedia()+0x77>
c001c878:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c87f:	75 0c                	jne    c001c88d <ATAPI::detectMedia()+0x77>
c001c881:	83 ec 0c             	sub    esp,0xc
c001c884:	53                   	push   ebx
c001c885:	e8 80 ff ff ff       	call   c001c80a <ATAPI::diskInserted()>
c001c88a:	83 c4 10             	add    esp,0x10
c001c88d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c891:	83 e0 0f             	and    eax,0xf
c001c894:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c899:	0f b6 c0             	movzx  eax,al
c001c89c:	75 19                	jne    c001c8b7 <ATAPI::detectMedia()+0xa1>
c001c89e:	83 f8 02             	cmp    eax,0x2
c001c8a1:	75 14                	jne    c001c8b7 <ATAPI::detectMedia()+0xa1>
c001c8a3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8aa:	74 24                	je     c001c8d0 <ATAPI::detectMedia()+0xba>
c001c8ac:	83 ec 0c             	sub    esp,0xc
c001c8af:	53                   	push   ebx
c001c8b0:	e8 d3 fe ff ff       	call   c001c788 <ATAPI::diskRemoved()>
c001c8b5:	eb 16                	jmp    c001c8cd <ATAPI::detectMedia()+0xb7>
c001c8b7:	85 c0                	test   eax,eax
c001c8b9:	75 15                	jne    c001c8d0 <ATAPI::detectMedia()+0xba>
c001c8bb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8c2:	75 0c                	jne    c001c8d0 <ATAPI::detectMedia()+0xba>
c001c8c4:	83 ec 0c             	sub    esp,0xc
c001c8c7:	53                   	push   ebx
c001c8c8:	e8 3d ff ff ff       	call   c001c80a <ATAPI::diskInserted()>
c001c8cd:	83 c4 10             	add    esp,0x10
c001c8d0:	83 c4 24             	add    esp,0x24
c001c8d3:	5b                   	pop    ebx
c001c8d4:	5e                   	pop    esi
c001c8d5:	c3                   	ret    

c001c8d6 <ATAPI::open(int, int, void*)>:
c001c8d6:	56                   	push   esi
c001c8d7:	53                   	push   ebx
c001c8d8:	50                   	push   eax
c001c8d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8e5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c8eb:	c1 e0 06             	shl    eax,0x6
c001c8ee:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c8f4:	01 d0                	add    eax,edx
c001c8f6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c8fd:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c903:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c90a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c914:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c91b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c921:	6a 04                	push   0x4
c001c923:	6a 0c                	push   0xc
c001c925:	51                   	push   ecx
c001c926:	52                   	push   edx
c001c927:	e8 20 e3 ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c92c:	90                   	nop
c001c92d:	90                   	nop
c001c92e:	6a 00                	push   0x0
c001c930:	6a 0c                	push   0xc
c001c932:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c939:	50                   	push   eax
c001c93a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c940:	e8 07 e3 ff ff       	call   c001ac4c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c945:	83 c4 14             	add    esp,0x14
c001c948:	68 78 01 00 00       	push   0x178
c001c94d:	e8 79 b1 fe ff       	call   c0007acb <malloc>
c001c952:	83 c4 0c             	add    esp,0xc
c001c955:	6a 00                	push   0x0
c001c957:	68 ff ff ff 7f       	push   0x7fffffff
c001c95c:	6a 00                	push   0x0
c001c95e:	6a 00                	push   0x0
c001c960:	53                   	push   ebx
c001c961:	68 c3 1d 02 c0       	push   0xc0021dc3
c001c966:	89 c6                	mov    esi,eax
c001c968:	50                   	push   eax
c001c969:	e8 24 06 ff ff       	call   c000cf92 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c96e:	83 c4 14             	add    esp,0x14
c001c971:	56                   	push   esi
c001c972:	e8 db 06 ff ff       	call   c000d052 <LogicalDisk::assignDriveLetter()>
c001c977:	5a                   	pop    edx
c001c978:	59                   	pop    ecx
c001c979:	0f be c0             	movsx  eax,al
c001c97c:	50                   	push   eax
c001c97d:	68 14 1c 02 c0       	push   0xc0021c14
c001c982:	e8 fc df fe ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001c987:	58                   	pop    eax
c001c988:	5a                   	pop    edx
c001c989:	56                   	push   esi
c001c98a:	53                   	push   ebx
c001c98b:	e8 54 f4 fe ff       	call   c000bde4 <Device::addChild(Device*)>
c001c990:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c996:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c999:	e8 7c f8 fe ff       	call   c000c21a <PhysicalDisk::startCache()>
c001c99e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c9a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9a8:	e8 69 fe ff ff       	call   c001c816 <ATAPI::detectMedia()>
c001c9ad:	83 c4 14             	add    esp,0x14
c001c9b0:	31 c0                	xor    eax,eax
c001c9b2:	5b                   	pop    ebx
c001c9b3:	5e                   	pop    esi
c001c9b4:	c3                   	ret    
c001c9b5:	90                   	nop

c001c9b6 <ATAPI::read(unsigned long long, int, void*)>:
c001c9b6:	55                   	push   ebp
c001c9b7:	57                   	push   edi
c001c9b8:	56                   	push   esi
c001c9b9:	53                   	push   ebx
c001c9ba:	83 ec 1c             	sub    esp,0x1c
c001c9bd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c9c1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c9c5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c9c9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c9d0:	74 3c                	je     c001ca0e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c9d2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c9d6:	b9 03 00 00 00       	mov    ecx,0x3
c001c9db:	fc                   	cld    
c001c9dc:	31 c0                	xor    eax,eax
c001c9de:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c9e0:	89 e8                	mov    eax,ebp
c001c9e2:	0f ce                	bswap  esi
c001c9e4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c9e8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c9ed:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c9f1:	50                   	push   eax
c001c9f2:	50                   	push   eax
c001c9f3:	55                   	push   ebp
c001c9f4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c9f8:	c1 e5 0b             	shl    ebp,0xb
c001c9fb:	6a 00                	push   0x0
c001c9fd:	55                   	push   ebp
c001c9fe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca02:	50                   	push   eax
c001ca03:	53                   	push   ebx
c001ca04:	e8 bf fa ff ff       	call   c001c4c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ca09:	83 c4 20             	add    esp,0x20
c001ca0c:	eb 1a                	jmp    c001ca28 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ca0e:	83 ec 0c             	sub    esp,0xc
c001ca11:	53                   	push   ebx
c001ca12:	e8 ff fd ff ff       	call   c001c816 <ATAPI::detectMedia()>
c001ca17:	83 c4 10             	add    esp,0x10
c001ca1a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca21:	75 af                	jne    c001c9d2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ca23:	b8 02 00 00 00       	mov    eax,0x2
c001ca28:	83 c4 1c             	add    esp,0x1c
c001ca2b:	5b                   	pop    ebx
c001ca2c:	5e                   	pop    esi
c001ca2d:	5f                   	pop    edi
c001ca2e:	5d                   	pop    ebp
c001ca2f:	c3                   	ret    

c001ca30 <SATA::close(int, int, void*)>:
c001ca30:	83 ec 0c             	sub    esp,0xc
c001ca33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca37:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca3d:	85 c0                	test   eax,eax
c001ca3f:	74 0c                	je     c001ca4d <SATA::close(int, int, void*)+0x1d>
c001ca41:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca43:	83 ec 0c             	sub    esp,0xc
c001ca46:	50                   	push   eax
c001ca47:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca4a:	83 c4 10             	add    esp,0x10
c001ca4d:	31 c0                	xor    eax,eax
c001ca4f:	83 c4 0c             	add    esp,0xc
c001ca52:	c3                   	ret    
c001ca53:	90                   	nop

c001ca54 <SATA::powerSaving(PowerSavingLevel)>:
c001ca54:	c3                   	ret    
c001ca55:	90                   	nop

c001ca56 <SATA::open(int, int, void*)>:
c001ca56:	56                   	push   esi
c001ca57:	53                   	push   ebx
c001ca58:	50                   	push   eax
c001ca59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca61:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ca6b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ca71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca75:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ca7f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ca89:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ca90:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ca96:	e8 3b b3 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001ca9b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001caa1:	89 c6                	mov    esi,eax
c001caa3:	e8 2e b3 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001caa8:	81 c6 00 10 00 00    	add    esi,0x1000
c001caae:	39 c6                	cmp    esi,eax
c001cab0:	74 10                	je     c001cac2 <SATA::open(int, int, void*)+0x6c>
c001cab2:	83 ec 0c             	sub    esp,0xc
c001cab5:	68 5c 1c 02 c0       	push   0xc0021c5c
c001caba:	e8 8e 3d ff ff       	call   c001084d <KePanic(char const*)>
c001cabf:	83 c4 10             	add    esp,0x10
c001cac2:	83 ec 0c             	sub    esp,0xc
c001cac5:	6a 02                	push   0x2
c001cac7:	e8 39 cb fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001cacc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cad2:	6a 03                	push   0x3
c001cad4:	50                   	push   eax
c001cad5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001cadb:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001cae1:	e8 fe d1 fe ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cae6:	83 c4 14             	add    esp,0x14
c001cae9:	53                   	push   ebx
c001caea:	e8 2b f7 fe ff       	call   c000c21a <PhysicalDisk::startCache()>
c001caef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001caf2:	e8 6f 09 ff ff       	call   c000d466 <createPartitionsForDisk(PhysicalDisk*)>
c001caf7:	83 c4 14             	add    esp,0x14
c001cafa:	31 c0                	xor    eax,eax
c001cafc:	5b                   	pop    ebx
c001cafd:	5e                   	pop    esi
c001cafe:	c3                   	ret    
c001caff:	90                   	nop

c001cb00 <SATA::SATA()>:
c001cb00:	83 ec 0c             	sub    esp,0xc
c001cb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb07:	83 ec 04             	sub    esp,0x4
c001cb0a:	68 00 02 00 00       	push   0x200
c001cb0f:	68 70 1c 02 c0       	push   0xc0021c70
c001cb14:	50                   	push   eax
c001cb15:	e8 98 f6 fe ff       	call   c000c1b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb1a:	83 c4 10             	add    esp,0x10
c001cb1d:	ba e0 1c 02 c0       	mov    edx,0xc0021ce0
c001cb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb26:	89 10                	mov    DWORD PTR [eax],edx
c001cb28:	90                   	nop
c001cb29:	83 c4 0c             	add    esp,0xc
c001cb2c:	c3                   	ret    
c001cb2d:	90                   	nop

c001cb2e <SATA::access(unsigned long long, int, void*, bool)>:
c001cb2e:	55                   	push   ebp
c001cb2f:	57                   	push   edi
c001cb30:	56                   	push   esi
c001cb31:	53                   	push   ebx
c001cb32:	83 ec 2c             	sub    esp,0x2c
c001cb35:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cb39:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cb3e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cb42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb46:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cb4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb4e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cb52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb56:	7e 10                	jle    c001cb68 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001cb58:	83 ec 0c             	sub    esp,0xc
c001cb5b:	68 80 1c 02 c0       	push   0xc0021c80
c001cb60:	e8 e8 3c ff ff       	call   c001084d <KePanic(char const*)>
c001cb65:	83 c4 10             	add    esp,0x10
c001cb68:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cb6e:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001cb74:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001cb7a:	89 e8                	mov    eax,ebp
c001cb7c:	c1 e0 07             	shl    eax,0x7
c001cb7f:	01 d0                	add    eax,edx
c001cb81:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cb8b:	8d 45 02             	lea    eax,[ebp+0x2]
c001cb8e:	51                   	push   ecx
c001cb8f:	c1 e0 07             	shl    eax,0x7
c001cb92:	51                   	push   ecx
c001cb93:	01 d0                	add    eax,edx
c001cb95:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cb99:	50                   	push   eax
c001cb9a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cba0:	e8 6b ec ff ff       	call   c001b810 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cba5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cba9:	83 c4 10             	add    esp,0x10
c001cbac:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001cbb1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cbb5:	0f 84 5b 01 00 00    	je     c001cd16 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cbbb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cbbf:	c1 e0 09             	shl    eax,0x9
c001cbc2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cbc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cbcb:	74 0e                	je     c001cbdb <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001cbcd:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cbd3:	89 c1                	mov    ecx,eax
c001cbd5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cbd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cbdb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cbdf:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cbe5:	8d 45 02             	lea    eax,[ebp+0x2]
c001cbe8:	c1 e0 07             	shl    eax,0x7
c001cbeb:	01 d0                	add    eax,edx
c001cbed:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbef:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cbf5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cbfb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cbff:	c1 e1 05             	shl    ecx,0x5
c001cc02:	01 c8                	add    eax,ecx
c001cc04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cc08:	83 e1 01             	and    ecx,0x1
c001cc0b:	89 ce                	mov    esi,ecx
c001cc0d:	8a 08                	mov    cl,BYTE PTR [eax]
c001cc0f:	c1 e6 06             	shl    esi,0x6
c001cc12:	83 e1 bf             	and    ecx,0xffffffbf
c001cc15:	09 f1                	or     ecx,esi
c001cc17:	88 08                	mov    BYTE PTR [eax],cl
c001cc19:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc1b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cc21:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cc27:	89 08                	mov    DWORD PTR [eax],ecx
c001cc29:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc2f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cc35:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cc3b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cc3e:	50                   	push   eax
c001cc3f:	68 90 00 00 00       	push   0x90
c001cc44:	6a 00                	push   0x0
c001cc46:	56                   	push   esi
c001cc47:	e8 a4 38 fe ff       	call   c00004f0 <memset>
c001cc4c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cc52:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc5c:	83 c4 10             	add    esp,0x10
c001cc5f:	48                   	dec    eax
c001cc60:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cc65:	89 c1                	mov    ecx,eax
c001cc67:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cc6d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cc72:	09 c8                	or     eax,ecx
c001cc74:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cc7a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cc80:	83 c8 80             	or     eax,0xffffff80
c001cc83:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cc89:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cc8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc90:	25 00 7f 00 00       	and    eax,0x7f00
c001cc95:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cc9a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cc9f:	66 89 06             	mov    WORD PTR [esi],ax
c001cca2:	b0 35                	mov    al,0x35
c001cca4:	75 02                	jne    c001cca8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001cca6:	b0 25                	mov    al,0x25
c001cca8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ccab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ccaf:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ccb3:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001ccb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ccbb:	c1 e8 10             	shr    eax,0x10
c001ccbe:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ccc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ccc5:	c1 e8 18             	shr    eax,0x18
c001ccc8:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cccb:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cccf:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ccd2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccd6:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ccd9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ccdd:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cce1:	89 ee                	mov    esi,ebp
c001cce3:	31 c0                	xor    eax,eax
c001cce5:	c1 e6 07             	shl    esi,0x7
c001cce8:	01 d6                	add    esi,edx
c001ccea:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ccf0:	80 e1 88             	and    cl,0x88
c001ccf3:	74 0a                	je     c001ccff <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001ccf5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ccfa:	74 0a                	je     c001cd06 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ccfc:	40                   	inc    eax
c001ccfd:	eb eb                	jmp    c001ccea <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001ccff:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd04:	75 17                	jne    c001cd1d <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001cd06:	83 ec 0c             	sub    esp,0xc
c001cd09:	68 b9 1c 02 c0       	push   0xc0021cb9
c001cd0e:	e8 70 dc fe ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001cd13:	83 c4 10             	add    esp,0x10
c001cd16:	b8 01 00 00 00       	mov    eax,0x1
c001cd1b:	eb 5b                	jmp    c001cd78 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cd1d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001cd21:	c1 e5 07             	shl    ebp,0x7
c001cd24:	b8 01 00 00 00       	mov    eax,0x1
c001cd29:	01 ea                	add    edx,ebp
c001cd2b:	d3 e0                	shl    eax,cl
c001cd2d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cd33:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cd39:	85 c8                	test   eax,ecx
c001cd3b:	74 16                	je     c001cd53 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001cd3d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001cd43:	0f ba e1 1e          	bt     ecx,0x1e
c001cd47:	73 ea                	jae    c001cd33 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001cd49:	83 ec 0c             	sub    esp,0xc
c001cd4c:	68 c7 1c 02 c0       	push   0xc0021cc7
c001cd51:	eb bb                	jmp    c001cd0e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cd53:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cd59:	0f ba e0 1e          	bt     eax,0x1e
c001cd5d:	72 b7                	jb     c001cd16 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cd5f:	31 c0                	xor    eax,eax
c001cd61:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cd66:	75 10                	jne    c001cd78 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cd68:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cd6e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cd72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cd76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd78:	83 c4 2c             	add    esp,0x2c
c001cd7b:	5b                   	pop    ebx
c001cd7c:	5e                   	pop    esi
c001cd7d:	5f                   	pop    edi
c001cd7e:	5d                   	pop    ebp
c001cd7f:	c3                   	ret    

c001cd80 <SATA::read(unsigned long long, int, void*)>:
c001cd80:	55                   	push   ebp
c001cd81:	57                   	push   edi
c001cd82:	56                   	push   esi
c001cd83:	be 04 00 00 00       	mov    esi,0x4
c001cd88:	53                   	push   ebx
c001cd89:	83 ec 0c             	sub    esp,0xc
c001cd8c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd9c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd9f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cda5:	0f 87 1a 02 00 00    	ja     c001cfc5 <SATA::read(unsigned long long, int, void*)+0x245>
c001cdab:	85 c9                	test   ecx,ecx
c001cdad:	be 06 00 00 00       	mov    esi,0x6
c001cdb2:	0f 84 0d 02 00 00    	je     c001cfc5 <SATA::read(unsigned long long, int, void*)+0x245>
c001cdb8:	56                   	push   esi
c001cdb9:	56                   	push   esi
c001cdba:	6a 00                	push   0x0
c001cdbc:	51                   	push   ecx
c001cdbd:	53                   	push   ebx
c001cdbe:	52                   	push   edx
c001cdbf:	50                   	push   eax
c001cdc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdc4:	e8 65 fd ff ff       	call   c001cb2e <SATA::access(unsigned long long, int, void*, bool)>
c001cdc9:	83 c4 20             	add    esp,0x20
c001cdcc:	85 c0                	test   eax,eax
c001cdce:	89 c6                	mov    esi,eax
c001cdd0:	0f 85 ea 01 00 00    	jne    c001cfc0 <SATA::read(unsigned long long, int, void*)+0x240>
c001cdd6:	50                   	push   eax
c001cdd7:	50                   	push   eax
c001cdd8:	6a 0f                	push   0xf
c001cdda:	6a 00                	push   0x0
c001cddc:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cde2:	bb 0a 00 00 00       	mov    ebx,0xa
c001cde7:	e8 7d f2 ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001cdec:	5a                   	pop    edx
c001cded:	59                   	pop    ecx
c001cdee:	b9 10 27 00 00       	mov    ecx,0x2710
c001cdf3:	0f b6 c0             	movzx  eax,al
c001cdf6:	50                   	push   eax
c001cdf7:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdfc:	99                   	cdq    
c001cdfd:	f7 f9                	idiv   ecx
c001cdff:	99                   	cdq    
c001ce00:	f7 fb                	idiv   ebx
c001ce02:	8d 42 30             	lea    eax,[edx+0x30]
c001ce05:	0f b6 c0             	movzx  eax,al
c001ce08:	50                   	push   eax
c001ce09:	e8 4a f2 ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001ce0e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce14:	5f                   	pop    edi
c001ce15:	5d                   	pop    ebp
c001ce16:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce1b:	6a 0f                	push   0xf
c001ce1d:	6a 00                	push   0x0
c001ce1f:	e8 45 f2 ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001ce24:	5a                   	pop    edx
c001ce25:	59                   	pop    ecx
c001ce26:	0f b6 c0             	movzx  eax,al
c001ce29:	50                   	push   eax
c001ce2a:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce2f:	99                   	cdq    
c001ce30:	f7 fd                	idiv   ebp
c001ce32:	99                   	cdq    
c001ce33:	f7 fb                	idiv   ebx
c001ce35:	8d 42 30             	lea    eax,[edx+0x30]
c001ce38:	0f b6 c0             	movzx  eax,al
c001ce3b:	50                   	push   eax
c001ce3c:	e8 17 f2 ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001ce41:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce47:	5f                   	pop    edi
c001ce48:	bf 64 00 00 00       	mov    edi,0x64
c001ce4d:	58                   	pop    eax
c001ce4e:	6a 0f                	push   0xf
c001ce50:	6a 00                	push   0x0
c001ce52:	e8 12 f2 ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001ce57:	5a                   	pop    edx
c001ce58:	59                   	pop    ecx
c001ce59:	0f b6 c0             	movzx  eax,al
c001ce5c:	50                   	push   eax
c001ce5d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce62:	99                   	cdq    
c001ce63:	f7 ff                	idiv   edi
c001ce65:	99                   	cdq    
c001ce66:	f7 fb                	idiv   ebx
c001ce68:	8d 42 30             	lea    eax,[edx+0x30]
c001ce6b:	0f b6 c0             	movzx  eax,al
c001ce6e:	50                   	push   eax
c001ce6f:	e8 e4 f1 ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001ce74:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce7a:	58                   	pop    eax
c001ce7b:	5a                   	pop    edx
c001ce7c:	6a 0f                	push   0xf
c001ce7e:	6a 00                	push   0x0
c001ce80:	e8 e4 f1 ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001ce85:	59                   	pop    ecx
c001ce86:	5a                   	pop    edx
c001ce87:	0f b6 c0             	movzx  eax,al
c001ce8a:	50                   	push   eax
c001ce8b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce90:	99                   	cdq    
c001ce91:	f7 fb                	idiv   ebx
c001ce93:	99                   	cdq    
c001ce94:	f7 fb                	idiv   ebx
c001ce96:	8d 42 30             	lea    eax,[edx+0x30]
c001ce99:	0f b6 c0             	movzx  eax,al
c001ce9c:	50                   	push   eax
c001ce9d:	e8 b6 f1 ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001cea2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cea8:	59                   	pop    ecx
c001cea9:	58                   	pop    eax
c001ceaa:	6a 0f                	push   0xf
c001ceac:	6a 00                	push   0x0
c001ceae:	e8 b6 f1 ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001ceb3:	5a                   	pop    edx
c001ceb4:	59                   	pop    ecx
c001ceb5:	0f b6 c0             	movzx  eax,al
c001ceb8:	50                   	push   eax
c001ceb9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cebe:	99                   	cdq    
c001cebf:	f7 fb                	idiv   ebx
c001cec1:	83 c2 30             	add    edx,0x30
c001cec4:	0f b6 d2             	movzx  edx,dl
c001cec7:	52                   	push   edx
c001cec8:	e8 8b f1 ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001cecd:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ced3:	58                   	pop    eax
c001ced4:	5a                   	pop    edx
c001ced5:	6a 0f                	push   0xf
c001ced7:	6a 00                	push   0x0
c001ced9:	e8 8b f1 ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001cede:	59                   	pop    ecx
c001cedf:	b9 10 27 00 00       	mov    ecx,0x2710
c001cee4:	5a                   	pop    edx
c001cee5:	0f b6 c0             	movzx  eax,al
c001cee8:	50                   	push   eax
c001cee9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ceee:	99                   	cdq    
c001ceef:	f7 f9                	idiv   ecx
c001cef1:	99                   	cdq    
c001cef2:	f7 fb                	idiv   ebx
c001cef4:	8d 42 30             	lea    eax,[edx+0x30]
c001cef7:	0f b6 c0             	movzx  eax,al
c001cefa:	50                   	push   eax
c001cefb:	e8 58 f1 ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001cf00:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf06:	59                   	pop    ecx
c001cf07:	58                   	pop    eax
c001cf08:	6a 0f                	push   0xf
c001cf0a:	6a 00                	push   0x0
c001cf0c:	e8 58 f1 ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001cf11:	5a                   	pop    edx
c001cf12:	59                   	pop    ecx
c001cf13:	0f b6 c0             	movzx  eax,al
c001cf16:	50                   	push   eax
c001cf17:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf1c:	99                   	cdq    
c001cf1d:	f7 fd                	idiv   ebp
c001cf1f:	99                   	cdq    
c001cf20:	f7 fb                	idiv   ebx
c001cf22:	8d 42 30             	lea    eax,[edx+0x30]
c001cf25:	0f b6 c0             	movzx  eax,al
c001cf28:	50                   	push   eax
c001cf29:	e8 2a f1 ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001cf2e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf34:	5d                   	pop    ebp
c001cf35:	58                   	pop    eax
c001cf36:	6a 0f                	push   0xf
c001cf38:	6a 00                	push   0x0
c001cf3a:	e8 2a f1 ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001cf3f:	5a                   	pop    edx
c001cf40:	59                   	pop    ecx
c001cf41:	0f b6 c0             	movzx  eax,al
c001cf44:	50                   	push   eax
c001cf45:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf4a:	99                   	cdq    
c001cf4b:	f7 ff                	idiv   edi
c001cf4d:	99                   	cdq    
c001cf4e:	f7 fb                	idiv   ebx
c001cf50:	8d 42 30             	lea    eax,[edx+0x30]
c001cf53:	0f b6 c0             	movzx  eax,al
c001cf56:	50                   	push   eax
c001cf57:	e8 fc f0 ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001cf5c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf62:	5f                   	pop    edi
c001cf63:	5d                   	pop    ebp
c001cf64:	6a 0f                	push   0xf
c001cf66:	6a 00                	push   0x0
c001cf68:	e8 fc f0 ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001cf6d:	5a                   	pop    edx
c001cf6e:	59                   	pop    ecx
c001cf6f:	0f b6 c0             	movzx  eax,al
c001cf72:	50                   	push   eax
c001cf73:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf78:	99                   	cdq    
c001cf79:	f7 fb                	idiv   ebx
c001cf7b:	99                   	cdq    
c001cf7c:	f7 fb                	idiv   ebx
c001cf7e:	8d 42 30             	lea    eax,[edx+0x30]
c001cf81:	0f b6 c0             	movzx  eax,al
c001cf84:	50                   	push   eax
c001cf85:	e8 ce f0 ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001cf8a:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf90:	5f                   	pop    edi
c001cf91:	5d                   	pop    ebp
c001cf92:	6a 0f                	push   0xf
c001cf94:	6a 00                	push   0x0
c001cf96:	e8 ce f0 ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001cf9b:	5a                   	pop    edx
c001cf9c:	59                   	pop    ecx
c001cf9d:	0f b6 c0             	movzx  eax,al
c001cfa0:	50                   	push   eax
c001cfa1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cfa6:	99                   	cdq    
c001cfa7:	f7 fb                	idiv   ebx
c001cfa9:	83 c2 30             	add    edx,0x30
c001cfac:	0f b6 d2             	movzx  edx,dl
c001cfaf:	52                   	push   edx
c001cfb0:	e8 a3 f0 ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001cfb5:	83 c4 10             	add    esp,0x10
c001cfb8:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cfbe:	eb 05                	jmp    c001cfc5 <SATA::read(unsigned long long, int, void*)+0x245>
c001cfc0:	be 01 00 00 00       	mov    esi,0x1
c001cfc5:	83 c4 0c             	add    esp,0xc
c001cfc8:	89 f0                	mov    eax,esi
c001cfca:	5b                   	pop    ebx
c001cfcb:	5e                   	pop    esi
c001cfcc:	5f                   	pop    edi
c001cfcd:	5d                   	pop    ebp
c001cfce:	c3                   	ret    
c001cfcf:	90                   	nop

c001cfd0 <SATA::write(unsigned long long, int, void*)>:
c001cfd0:	55                   	push   ebp
c001cfd1:	57                   	push   edi
c001cfd2:	56                   	push   esi
c001cfd3:	53                   	push   ebx
c001cfd4:	83 ec 0c             	sub    esp,0xc
c001cfd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cfdb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cfdf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cfe3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cfe7:	8d 70 ff             	lea    esi,[eax-0x1]
c001cfea:	b8 04 00 00 00       	mov    eax,0x4
c001cfef:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001cff5:	0f 87 2c 02 00 00    	ja     c001d227 <SATA::write(unsigned long long, int, void*)+0x257>
c001cffb:	85 db                	test   ebx,ebx
c001cffd:	b8 06 00 00 00       	mov    eax,0x6
c001d002:	0f 84 1f 02 00 00    	je     c001d227 <SATA::write(unsigned long long, int, void*)+0x257>
c001d008:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d00c:	c1 e6 09             	shl    esi,0x9
c001d00f:	01 de                	add    esi,ebx
c001d011:	50                   	push   eax
c001d012:	89 d7                	mov    edi,edx
c001d014:	50                   	push   eax
c001d015:	83 c7 01             	add    edi,0x1
c001d018:	6a 01                	push   0x1
c001d01a:	89 cd                	mov    ebp,ecx
c001d01c:	53                   	push   ebx
c001d01d:	83 d5 00             	adc    ebp,0x0
c001d020:	6a 01                	push   0x1
c001d022:	81 c3 00 02 00 00    	add    ebx,0x200
c001d028:	51                   	push   ecx
c001d029:	52                   	push   edx
c001d02a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d02e:	e8 fb fa ff ff       	call   c001cb2e <SATA::access(unsigned long long, int, void*, bool)>
c001d033:	83 c4 20             	add    esp,0x20
c001d036:	39 f3                	cmp    ebx,esi
c001d038:	89 fa                	mov    edx,edi
c001d03a:	89 e9                	mov    ecx,ebp
c001d03c:	75 d3                	jne    c001d011 <SATA::write(unsigned long long, int, void*)+0x41>
c001d03e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d042:	bd 10 27 00 00       	mov    ebp,0x2710
c001d047:	bb 0a 00 00 00       	mov    ebx,0xa
c001d04c:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001d052:	50                   	push   eax
c001d053:	50                   	push   eax
c001d054:	6a 0f                	push   0xf
c001d056:	6a 00                	push   0x0
c001d058:	e8 0c f0 ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001d05d:	5a                   	pop    edx
c001d05e:	59                   	pop    ecx
c001d05f:	0f b6 c0             	movzx  eax,al
c001d062:	50                   	push   eax
c001d063:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d068:	99                   	cdq    
c001d069:	f7 fd                	idiv   ebp
c001d06b:	99                   	cdq    
c001d06c:	f7 fb                	idiv   ebx
c001d06e:	8d 42 30             	lea    eax,[edx+0x30]
c001d071:	0f b6 c0             	movzx  eax,al
c001d074:	50                   	push   eax
c001d075:	e8 de ef ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001d07a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d080:	5e                   	pop    esi
c001d081:	5f                   	pop    edi
c001d082:	bf e8 03 00 00       	mov    edi,0x3e8
c001d087:	6a 0f                	push   0xf
c001d089:	6a 00                	push   0x0
c001d08b:	e8 d9 ef ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001d090:	5a                   	pop    edx
c001d091:	59                   	pop    ecx
c001d092:	0f b6 c0             	movzx  eax,al
c001d095:	50                   	push   eax
c001d096:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d09b:	99                   	cdq    
c001d09c:	f7 ff                	idiv   edi
c001d09e:	99                   	cdq    
c001d09f:	f7 fb                	idiv   ebx
c001d0a1:	8d 42 30             	lea    eax,[edx+0x30]
c001d0a4:	0f b6 c0             	movzx  eax,al
c001d0a7:	50                   	push   eax
c001d0a8:	e8 ab ef ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001d0ad:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d0b3:	5e                   	pop    esi
c001d0b4:	be 64 00 00 00       	mov    esi,0x64
c001d0b9:	58                   	pop    eax
c001d0ba:	6a 0f                	push   0xf
c001d0bc:	6a 00                	push   0x0
c001d0be:	e8 a6 ef ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001d0c3:	5a                   	pop    edx
c001d0c4:	59                   	pop    ecx
c001d0c5:	0f b6 c0             	movzx  eax,al
c001d0c8:	50                   	push   eax
c001d0c9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0ce:	99                   	cdq    
c001d0cf:	f7 fe                	idiv   esi
c001d0d1:	99                   	cdq    
c001d0d2:	f7 fb                	idiv   ebx
c001d0d4:	8d 42 30             	lea    eax,[edx+0x30]
c001d0d7:	0f b6 c0             	movzx  eax,al
c001d0da:	50                   	push   eax
c001d0db:	e8 78 ef ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001d0e0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d0e6:	58                   	pop    eax
c001d0e7:	5a                   	pop    edx
c001d0e8:	6a 0f                	push   0xf
c001d0ea:	6a 00                	push   0x0
c001d0ec:	e8 78 ef ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001d0f1:	59                   	pop    ecx
c001d0f2:	5a                   	pop    edx
c001d0f3:	0f b6 c0             	movzx  eax,al
c001d0f6:	50                   	push   eax
c001d0f7:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0fc:	99                   	cdq    
c001d0fd:	f7 fb                	idiv   ebx
c001d0ff:	99                   	cdq    
c001d100:	f7 fb                	idiv   ebx
c001d102:	8d 42 30             	lea    eax,[edx+0x30]
c001d105:	0f b6 c0             	movzx  eax,al
c001d108:	50                   	push   eax
c001d109:	e8 4a ef ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001d10e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d114:	59                   	pop    ecx
c001d115:	58                   	pop    eax
c001d116:	6a 0f                	push   0xf
c001d118:	6a 00                	push   0x0
c001d11a:	e8 4a ef ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001d11f:	5a                   	pop    edx
c001d120:	59                   	pop    ecx
c001d121:	0f b6 c0             	movzx  eax,al
c001d124:	50                   	push   eax
c001d125:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d12a:	99                   	cdq    
c001d12b:	f7 fb                	idiv   ebx
c001d12d:	83 c2 30             	add    edx,0x30
c001d130:	0f b6 d2             	movzx  edx,dl
c001d133:	52                   	push   edx
c001d134:	e8 1f ef ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001d139:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d13f:	58                   	pop    eax
c001d140:	5a                   	pop    edx
c001d141:	6a 0f                	push   0xf
c001d143:	6a 00                	push   0x0
c001d145:	e8 1f ef ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001d14a:	59                   	pop    ecx
c001d14b:	5a                   	pop    edx
c001d14c:	0f b6 c0             	movzx  eax,al
c001d14f:	50                   	push   eax
c001d150:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d155:	99                   	cdq    
c001d156:	f7 fd                	idiv   ebp
c001d158:	99                   	cdq    
c001d159:	f7 fb                	idiv   ebx
c001d15b:	8d 42 30             	lea    eax,[edx+0x30]
c001d15e:	0f b6 c0             	movzx  eax,al
c001d161:	50                   	push   eax
c001d162:	e8 f1 ee ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001d167:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d16d:	59                   	pop    ecx
c001d16e:	5d                   	pop    ebp
c001d16f:	6a 0f                	push   0xf
c001d171:	6a 00                	push   0x0
c001d173:	e8 f1 ee ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001d178:	5a                   	pop    edx
c001d179:	59                   	pop    ecx
c001d17a:	0f b6 c0             	movzx  eax,al
c001d17d:	50                   	push   eax
c001d17e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d183:	99                   	cdq    
c001d184:	f7 ff                	idiv   edi
c001d186:	99                   	cdq    
c001d187:	f7 fb                	idiv   ebx
c001d189:	8d 42 30             	lea    eax,[edx+0x30]
c001d18c:	0f b6 c0             	movzx  eax,al
c001d18f:	50                   	push   eax
c001d190:	e8 c3 ee ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001d195:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d19b:	5f                   	pop    edi
c001d19c:	5d                   	pop    ebp
c001d19d:	6a 0f                	push   0xf
c001d19f:	6a 00                	push   0x0
c001d1a1:	e8 c3 ee ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001d1a6:	5a                   	pop    edx
c001d1a7:	59                   	pop    ecx
c001d1a8:	0f b6 c0             	movzx  eax,al
c001d1ab:	50                   	push   eax
c001d1ac:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1b1:	99                   	cdq    
c001d1b2:	f7 fe                	idiv   esi
c001d1b4:	99                   	cdq    
c001d1b5:	f7 fb                	idiv   ebx
c001d1b7:	8d 42 30             	lea    eax,[edx+0x30]
c001d1ba:	0f b6 c0             	movzx  eax,al
c001d1bd:	50                   	push   eax
c001d1be:	e8 95 ee ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001d1c3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d1c9:	5e                   	pop    esi
c001d1ca:	5f                   	pop    edi
c001d1cb:	6a 0f                	push   0xf
c001d1cd:	6a 00                	push   0x0
c001d1cf:	e8 95 ee ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001d1d4:	5d                   	pop    ebp
c001d1d5:	5a                   	pop    edx
c001d1d6:	0f b6 c0             	movzx  eax,al
c001d1d9:	50                   	push   eax
c001d1da:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1df:	99                   	cdq    
c001d1e0:	f7 fb                	idiv   ebx
c001d1e2:	99                   	cdq    
c001d1e3:	f7 fb                	idiv   ebx
c001d1e5:	8d 42 30             	lea    eax,[edx+0x30]
c001d1e8:	0f b6 c0             	movzx  eax,al
c001d1eb:	50                   	push   eax
c001d1ec:	e8 67 ee ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001d1f1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d1f7:	59                   	pop    ecx
c001d1f8:	5e                   	pop    esi
c001d1f9:	6a 0f                	push   0xf
c001d1fb:	6a 00                	push   0x0
c001d1fd:	e8 67 ee ff ff       	call   c001c069 <combineColours(unsigned char, unsigned char)>
c001d202:	5f                   	pop    edi
c001d203:	5d                   	pop    ebp
c001d204:	0f b6 c0             	movzx  eax,al
c001d207:	50                   	push   eax
c001d208:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d20d:	99                   	cdq    
c001d20e:	f7 fb                	idiv   ebx
c001d210:	83 c2 30             	add    edx,0x30
c001d213:	0f b6 d2             	movzx  edx,dl
c001d216:	52                   	push   edx
c001d217:	e8 3c ee ff ff       	call   c001c058 <combineCharAndColour(char, unsigned char)>
c001d21c:	83 c4 10             	add    esp,0x10
c001d21f:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d225:	31 c0                	xor    eax,eax
c001d227:	83 c4 0c             	add    esp,0xc
c001d22a:	5b                   	pop    ebx
c001d22b:	5e                   	pop    esi
c001d22c:	5f                   	pop    edi
c001d22d:	5d                   	pop    ebp
c001d22e:	c3                   	ret    
c001d22f:	90                   	nop

c001d230 <SATAPI::write(unsigned long long, int, void*)>:
c001d230:	b8 03 00 00 00       	mov    eax,0x3
c001d235:	c3                   	ret    

c001d236 <SATAPI::close(int, int, void*)>:
c001d236:	83 ec 0c             	sub    esp,0xc
c001d239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d23d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d243:	85 c0                	test   eax,eax
c001d245:	74 0c                	je     c001d253 <SATAPI::close(int, int, void*)+0x1d>
c001d247:	8b 10                	mov    edx,DWORD PTR [eax]
c001d249:	83 ec 0c             	sub    esp,0xc
c001d24c:	50                   	push   eax
c001d24d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d250:	83 c4 10             	add    esp,0x10
c001d253:	31 c0                	xor    eax,eax
c001d255:	83 c4 0c             	add    esp,0xc
c001d258:	c3                   	ret    
c001d259:	90                   	nop

c001d25a <SATAPI::SATAPI()>:
c001d25a:	83 ec 0c             	sub    esp,0xc
c001d25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d261:	83 ec 04             	sub    esp,0x4
c001d264:	68 00 08 00 00       	push   0x800
c001d269:	68 10 1d 02 c0       	push   0xc0021d10
c001d26e:	50                   	push   eax
c001d26f:	e8 3e ef fe ff       	call   c000c1b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d274:	83 c4 10             	add    esp,0x10
c001d277:	ba 04 1e 02 c0       	mov    edx,0xc0021e04
c001d27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d280:	89 10                	mov    DWORD PTR [eax],edx
c001d282:	90                   	nop
c001d283:	83 c4 0c             	add    esp,0xc
c001d286:	c3                   	ret    
c001d287:	90                   	nop

c001d288 <SATAPI::diskRemoved()>:
c001d288:	c3                   	ret    
c001d289:	90                   	nop

c001d28a <SATAPI::diskInserted()>:
c001d28a:	83 ec 18             	sub    esp,0x18
c001d28d:	68 1c 1d 02 c0       	push   0xc0021d1c
c001d292:	e8 ec d6 fe ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001d297:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d29b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d2a2:	83 c4 1c             	add    esp,0x1c
c001d2a5:	c3                   	ret    

c001d2a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d2a6:	55                   	push   ebp
c001d2a7:	57                   	push   edi
c001d2a8:	56                   	push   esi
c001d2a9:	53                   	push   ebx
c001d2aa:	83 ec 34             	sub    esp,0x34
c001d2ad:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d2b1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d2b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2b9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d2bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2c1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d2c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d2d1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d2d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2db:	83 c0 02             	add    eax,0x2
c001d2de:	c1 e0 07             	shl    eax,0x7
c001d2e1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d2e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d2ed:	c1 e0 07             	shl    eax,0x7
c001d2f0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d2f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d2f8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d302:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d306:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d30c:	e8 ff e4 ff ff       	call   c001b810 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d311:	83 c4 10             	add    esp,0x10
c001d314:	89 c2                	mov    edx,eax
c001d316:	b8 01 00 00 00       	mov    eax,0x1
c001d31b:	83 fa ff             	cmp    edx,0xffffffff
c001d31e:	0f 84 5f 02 00 00    	je     c001d583 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d324:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d32c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d332:	8b 00                	mov    eax,DWORD PTR [eax]
c001d334:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d33a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d340:	89 d1                	mov    ecx,edx
c001d342:	c1 e1 05             	shl    ecx,0x5
c001d345:	01 c8                	add    eax,ecx
c001d347:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d349:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d34f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d355:	89 08                	mov    DWORD PTR [eax],ecx
c001d357:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d35d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d363:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d369:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d36c:	50                   	push   eax
c001d36d:	68 90 00 00 00       	push   0x90
c001d372:	6a 00                	push   0x0
c001d374:	53                   	push   ebx
c001d375:	e8 76 31 fe ff       	call   c00004f0 <memset>
c001d37a:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d37d:	b9 0c 00 00 00       	mov    ecx,0xc
c001d382:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d386:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d388:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d38e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d392:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d396:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d39c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d3a0:	48                   	dec    eax
c001d3a1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d3a6:	89 c1                	mov    ecx,eax
c001d3a8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d3ae:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d3b3:	09 c8                	or     eax,ecx
c001d3b5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d3bb:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d3c1:	83 c8 80             	or     eax,0xffffff80
c001d3c4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d3ca:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d3cd:	25 00 7f 00 00       	and    eax,0x7f00
c001d3d2:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d3d7:	66 89 03             	mov    WORD PTR [ebx],ax
c001d3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3de:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d3e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3e6:	c1 e8 10             	shr    eax,0x10
c001d3e9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d3ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f0:	c1 e8 18             	shr    eax,0x18
c001d3f3:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d3f6:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d3fa:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d3fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d401:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d404:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d408:	83 c4 10             	add    esp,0x10
c001d40b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d40f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d413:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d417:	31 c0                	xor    eax,eax
c001d419:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d41f:	80 e1 88             	and    cl,0x88
c001d422:	74 0a                	je     c001d42e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001d424:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d429:	74 0a                	je     c001d435 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001d42b:	40                   	inc    eax
c001d42c:	eb eb                	jmp    c001d419 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001d42e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d433:	75 43                	jne    c001d478 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001d435:	83 ec 0c             	sub    esp,0xc
c001d438:	68 34 1d 02 c0       	push   0xc0021d34
c001d43d:	e8 41 d5 fe ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001d442:	58                   	pop    eax
c001d443:	5a                   	pop    edx
c001d444:	68 49 1d 02 c0       	push   0xc0021d49
c001d449:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d44f:	e8 42 b6 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c001d454:	59                   	pop    ecx
c001d455:	5b                   	pop    ebx
c001d456:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d45a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d460:	e8 45 e4 ff ff       	call   c001b8aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d465:	5e                   	pop    esi
c001d466:	5f                   	pop    edi
c001d467:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d46b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d471:	e8 14 e4 ff ff       	call   c001b88a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d476:	eb 48                	jmp    c001d4c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001d478:	b8 01 00 00 00       	mov    eax,0x1
c001d47d:	88 d1                	mov    cl,dl
c001d47f:	d3 e0                	shl    eax,cl
c001d481:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001d486:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001d48c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d490:	89 c7                	mov    edi,eax
c001d492:	c1 e3 07             	shl    ebx,0x7
c001d495:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d499:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d49f:	85 c7                	test   edi,eax
c001d4a1:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d4a7:	0f 84 a3 00 00 00    	je     c001d550 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001d4ad:	0f ba e0 1e          	bt     eax,0x1e
c001d4b1:	73 1a                	jae    c001d4cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001d4b3:	83 ec 0c             	sub    esp,0xc
c001d4b6:	68 5b 1d 02 c0       	push   0xc0021d5b
c001d4bb:	e8 c3 d4 fe ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001d4c0:	83 c4 10             	add    esp,0x10
c001d4c3:	b8 01 00 00 00       	mov    eax,0x1
c001d4c8:	e9 b6 00 00 00       	jmp    c001d583 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d4cd:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001d4d3:	83 f8 0d             	cmp    eax,0xd
c001d4d6:	77 0a                	ja     c001d4e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001d4d8:	83 ec 0c             	sub    esp,0xc
c001d4db:	68 c8 00 00 00       	push   0xc8
c001d4e0:	eb 28                	jmp    c001d50a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d4e2:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001d4e8:	83 f8 0d             	cmp    eax,0xd
c001d4eb:	77 0a                	ja     c001d4f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001d4ed:	83 ec 0c             	sub    esp,0xc
c001d4f0:	68 58 02 00 00       	push   0x258
c001d4f5:	eb 13                	jmp    c001d50a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d4f7:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001d4fd:	83 f8 06             	cmp    eax,0x6
c001d500:	77 10                	ja     c001d512 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001d502:	83 ec 0c             	sub    esp,0xc
c001d505:	68 dc 05 00 00       	push   0x5dc
c001d50a:	e8 55 7e ff ff       	call   c0015364 <milliTenthSleep(unsigned int)>
c001d50f:	83 c4 10             	add    esp,0x10
c001d512:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d516:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d519:	75 06                	jne    c001d521 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001d51b:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d51f:	74 15                	je     c001d536 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d521:	83 fe 06             	cmp    esi,0x6
c001d524:	77 10                	ja     c001d536 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	68 c4 09 00 00       	push   0x9c4
c001d52e:	e8 31 7e ff ff       	call   c0015364 <milliTenthSleep(unsigned int)>
c001d533:	83 c4 10             	add    esp,0x10
c001d536:	46                   	inc    esi
c001d537:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001d53d:	0f 85 56 ff ff ff    	jne    c001d499 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001d543:	83 ec 0c             	sub    esp,0xc
c001d546:	68 6e 1d 02 c0       	push   0xc0021d6e
c001d54b:	e9 6b ff ff ff       	jmp    c001d4bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d550:	0f ba e0 1e          	bt     eax,0x1e
c001d554:	73 0d                	jae    c001d563 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001d556:	83 ec 0c             	sub    esp,0xc
c001d559:	68 82 1d 02 c0       	push   0xc0021d82
c001d55e:	e9 58 ff ff ff       	jmp    c001d4bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d563:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d568:	74 17                	je     c001d581 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d56a:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d56f:	74 10                	je     c001d581 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d571:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d577:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d57b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d57f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d581:	31 c0                	xor    eax,eax
c001d583:	83 c4 2c             	add    esp,0x2c
c001d586:	5b                   	pop    ebx
c001d587:	5e                   	pop    esi
c001d588:	5f                   	pop    edi
c001d589:	5d                   	pop    ebp
c001d58a:	c3                   	ret    
c001d58b:	90                   	nop

c001d58c <SATAPI::eject()>:
c001d58c:	57                   	push   edi
c001d58d:	b9 03 00 00 00       	mov    ecx,0x3
c001d592:	83 ec 18             	sub    esp,0x18
c001d595:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d599:	fc                   	cld    
c001d59a:	31 c0                	xor    eax,eax
c001d59c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d59e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d5a3:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d5a8:	50                   	push   eax
c001d5a9:	6a 00                	push   0x0
c001d5ab:	6a 00                	push   0x0
c001d5ad:	6a 00                	push   0x0
c001d5af:	6a 00                	push   0x0
c001d5b1:	6a 02                	push   0x2
c001d5b3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d5b7:	50                   	push   eax
c001d5b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5bc:	e8 e5 fc ff ff       	call   c001d2a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d5c1:	83 c4 38             	add    esp,0x38
c001d5c4:	31 c0                	xor    eax,eax
c001d5c6:	5f                   	pop    edi
c001d5c7:	c3                   	ret    

c001d5c8 <SATAPI::detectMedia()>:
c001d5c8:	53                   	push   ebx
c001d5c9:	83 ec 14             	sub    esp,0x14
c001d5cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d5d0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d5d6:	e8 5d 05 ff ff       	call   c000db38 <VCache::writeWriteBuffer()>
c001d5db:	59                   	pop    ecx
c001d5dc:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d5e2:	e8 41 05 ff ff       	call   c000db28 <VCache::invalidateReadBuffer()>
c001d5e7:	c7 04 24 97 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d97
c001d5ee:	e8 90 d3 fe ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001d5f3:	83 c4 10             	add    esp,0x10
c001d5f6:	31 c0                	xor    eax,eax
c001d5f8:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d5ff:	85 d2                	test   edx,edx
c001d601:	74 0f                	je     c001d612 <SATAPI::detectMedia()+0x4a>
c001d603:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d609:	75 07                	jne    c001d612 <SATAPI::detectMedia()+0x4a>
c001d60b:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d612:	40                   	inc    eax
c001d613:	83 f8 1a             	cmp    eax,0x1a
c001d616:	75 e0                	jne    c001d5f8 <SATAPI::detectMedia()+0x30>
c001d618:	83 c4 08             	add    esp,0x8
c001d61b:	5b                   	pop    ebx
c001d61c:	c3                   	ret    
c001d61d:	90                   	nop

c001d61e <SATAPI::open(int, int, void*)>:
c001d61e:	56                   	push   esi
c001d61f:	53                   	push   ebx
c001d620:	51                   	push   ecx
c001d621:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d625:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d629:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d633:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d639:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d63d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d647:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d651:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d658:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d65e:	e8 73 a7 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001d663:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d669:	89 c6                	mov    esi,eax
c001d66b:	e8 66 a7 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001d670:	81 c6 00 10 00 00    	add    esi,0x1000
c001d676:	39 c6                	cmp    esi,eax
c001d678:	74 10                	je     c001d68a <SATAPI::open(int, int, void*)+0x6c>
c001d67a:	83 ec 0c             	sub    esp,0xc
c001d67d:	68 ac 1d 02 c0       	push   0xc0021dac
c001d682:	e8 c6 31 ff ff       	call   c001084d <KePanic(char const*)>
c001d687:	83 c4 10             	add    esp,0x10
c001d68a:	83 ec 0c             	sub    esp,0xc
c001d68d:	6a 02                	push   0x2
c001d68f:	e8 71 bf fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001d694:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d69a:	6a 03                	push   0x3
c001d69c:	50                   	push   eax
c001d69d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d6a3:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d6a9:	e8 36 c6 fe ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d6ae:	83 c4 14             	add    esp,0x14
c001d6b1:	68 78 01 00 00       	push   0x178
c001d6b6:	e8 10 a4 fe ff       	call   c0007acb <malloc>
c001d6bb:	83 c4 0c             	add    esp,0xc
c001d6be:	6a 00                	push   0x0
c001d6c0:	68 ff ff ff 7f       	push   0x7fffffff
c001d6c5:	6a 00                	push   0x0
c001d6c7:	6a 00                	push   0x0
c001d6c9:	53                   	push   ebx
c001d6ca:	68 c2 1d 02 c0       	push   0xc0021dc2
c001d6cf:	89 c6                	mov    esi,eax
c001d6d1:	50                   	push   eax
c001d6d2:	e8 bb f8 fe ff       	call   c000cf92 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d6d7:	83 c4 14             	add    esp,0x14
c001d6da:	56                   	push   esi
c001d6db:	e8 72 f9 fe ff       	call   c000d052 <LogicalDisk::assignDriveLetter()>
c001d6e0:	5a                   	pop    edx
c001d6e1:	59                   	pop    ecx
c001d6e2:	0f be c0             	movsx  eax,al
c001d6e5:	50                   	push   eax
c001d6e6:	68 14 1c 02 c0       	push   0xc0021c14
c001d6eb:	e8 93 d2 fe ff       	call   c000a983 <Dbg::kprintf(char const*, ...)>
c001d6f0:	58                   	pop    eax
c001d6f1:	5a                   	pop    edx
c001d6f2:	56                   	push   esi
c001d6f3:	53                   	push   ebx
c001d6f4:	e8 eb e6 fe ff       	call   c000bde4 <Device::addChild(Device*)>
c001d6f9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d6ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d702:	e8 13 eb fe ff       	call   c000c21a <PhysicalDisk::startCache()>
c001d707:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d70e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d711:	e8 b2 fe ff ff       	call   c001d5c8 <SATAPI::detectMedia()>
c001d716:	83 c4 14             	add    esp,0x14
c001d719:	31 c0                	xor    eax,eax
c001d71b:	5b                   	pop    ebx
c001d71c:	5e                   	pop    esi
c001d71d:	c3                   	ret    

c001d71e <SATAPI::read(unsigned long long, int, void*)>:
c001d71e:	55                   	push   ebp
c001d71f:	57                   	push   edi
c001d720:	56                   	push   esi
c001d721:	53                   	push   ebx
c001d722:	83 ec 3c             	sub    esp,0x3c
c001d725:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001d729:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d72d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d731:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001d735:	83 fd 04             	cmp    ebp,0x4
c001d738:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d73c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d740:	7e 10                	jle    c001d752 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d742:	83 ec 0c             	sub    esp,0xc
c001d745:	68 d0 1d 02 c0       	push   0xc0021dd0
c001d74a:	e8 fe 30 ff ff       	call   c001084d <KePanic(char const*)>
c001d74f:	83 c4 10             	add    esp,0x10
c001d752:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d758:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d75e:	51                   	push   ecx
c001d75f:	50                   	push   eax
c001d760:	83 c0 02             	add    eax,0x2
c001d763:	c1 e0 07             	shl    eax,0x7
c001d766:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d76c:	50                   	push   eax
c001d76d:	52                   	push   edx
c001d76e:	e8 61 e1 ff ff       	call   c001b8d4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d773:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d777:	b9 03 00 00 00       	mov    ecx,0x3
c001d77c:	fc                   	cld    
c001d77d:	31 c0                	xor    eax,eax
c001d77f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d781:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d786:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d78b:	83 c4 0c             	add    esp,0xc
c001d78e:	6a 00                	push   0x0
c001d790:	6a 00                	push   0x0
c001d792:	6a 00                	push   0x0
c001d794:	6a 00                	push   0x0
c001d796:	6a 02                	push   0x2
c001d798:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d79c:	50                   	push   eax
c001d79d:	53                   	push   ebx
c001d79e:	e8 03 fb ff ff       	call   c001d2a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d7a3:	83 c4 20             	add    esp,0x20
c001d7a6:	85 c0                	test   eax,eax
c001d7a8:	89 c6                	mov    esi,eax
c001d7aa:	75 46                	jne    c001d7f2 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001d7ac:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d7b0:	b9 03 00 00 00       	mov    ecx,0x3
c001d7b5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d7b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7bb:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d7c0:	0f c8                	bswap  eax
c001d7c2:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d7c6:	89 e8                	mov    eax,ebp
c001d7c8:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d7cc:	50                   	push   eax
c001d7cd:	55                   	push   ebp
c001d7ce:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d7d2:	c1 e5 0b             	shl    ebp,0xb
c001d7d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7dd:	55                   	push   ebp
c001d7de:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d7e2:	50                   	push   eax
c001d7e3:	53                   	push   ebx
c001d7e4:	e8 bd fa ff ff       	call   c001d2a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d7e9:	83 c4 20             	add    esp,0x20
c001d7ec:	85 c0                	test   eax,eax
c001d7ee:	89 c6                	mov    esi,eax
c001d7f0:	74 0c                	je     c001d7fe <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001d7f2:	83 ec 0c             	sub    esp,0xc
c001d7f5:	53                   	push   ebx
c001d7f6:	e8 cd fd ff ff       	call   c001d5c8 <SATAPI::detectMedia()>
c001d7fb:	83 c4 10             	add    esp,0x10
c001d7fe:	83 c4 3c             	add    esp,0x3c
c001d801:	89 f0                	mov    eax,esi
c001d803:	5b                   	pop    ebx
c001d804:	5e                   	pop    esi
c001d805:	5f                   	pop    edi
c001d806:	5d                   	pop    ebp
c001d807:	c3                   	ret    

c001d808 <IOAPIC::close(int, int, void*)>:
c001d808:	b8 00 00 00 00       	mov    eax,0x0
c001d80d:	c3                   	ret    

c001d80e <apicGetBase()>:
c001d80e:	55                   	push   ebp
c001d80f:	89 e5                	mov    ebp,esp
c001d811:	83 ec 18             	sub    esp,0x18
c001d814:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d819:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d81f:	83 e0 08             	and    eax,0x8
c001d822:	0f b6 c0             	movzx  eax,al
c001d825:	85 c0                	test   eax,eax
c001d827:	75 07                	jne    c001d830 <apicGetBase()+0x22>
c001d829:	b8 00 00 00 00       	mov    eax,0x0
c001d82e:	eb 21                	jmp    c001d851 <apicGetBase()+0x43>
c001d830:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d835:	83 ec 08             	sub    esp,0x8
c001d838:	6a 1b                	push   0x1b
c001d83a:	50                   	push   eax
c001d83b:	e8 9a 98 fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001d840:	83 c4 10             	add    esp,0x10
c001d843:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d846:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d849:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d84c:	25 00 00 ff ff       	and    eax,0xffff0000
c001d851:	c9                   	leave  
c001d852:	c3                   	ret    
c001d853:	90                   	nop

c001d854 <IOAPIC::IOAPIC()>:
c001d854:	83 ec 0c             	sub    esp,0xc
c001d857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d85b:	83 ec 08             	sub    esp,0x8
c001d85e:	68 34 1e 02 c0       	push   0xc0021e34
c001d863:	50                   	push   eax
c001d864:	e8 13 e7 fe ff       	call   c000bf7c <Device::Device(char const*)>
c001d869:	83 c4 10             	add    esp,0x10
c001d86c:	ba 44 1e 02 c0       	mov    edx,0xc0021e44
c001d871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d875:	89 10                	mov    DWORD PTR [eax],edx
c001d877:	90                   	nop
c001d878:	83 c4 0c             	add    esp,0xc
c001d87b:	c3                   	ret    

c001d87c <apicOpen()>:
c001d87c:	55                   	push   ebp
c001d87d:	89 e5                	mov    ebp,esp
c001d87f:	53                   	push   ebx
c001d880:	83 ec 34             	sub    esp,0x34
c001d883:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d888:	83 f0 01             	xor    eax,0x1
c001d88b:	0f b6 c0             	movzx  eax,al
c001d88e:	85 c0                	test   eax,eax
c001d890:	0f 84 a3 00 00 00    	je     c001d939 <apicOpen()+0xbd>
c001d896:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d89a:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d89f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d8a3:	0f b6 c0             	movzx  eax,al
c001d8a6:	39 c2                	cmp    edx,eax
c001d8a8:	0f 83 84 00 00 00    	jae    c001d932 <apicOpen()+0xb6>
c001d8ae:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d8b5:	83 ec 0c             	sub    esp,0xc
c001d8b8:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d8bb:	e8 0b a2 fe ff       	call   c0007acb <malloc>
c001d8c0:	83 c4 10             	add    esp,0x10
c001d8c3:	89 c3                	mov    ebx,eax
c001d8c5:	83 ec 0c             	sub    esp,0xc
c001d8c8:	53                   	push   ebx
c001d8c9:	e8 86 ff ff ff       	call   c001d854 <IOAPIC::IOAPIC()>
c001d8ce:	83 c4 10             	add    esp,0x10
c001d8d1:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d8d4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d8d8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d8db:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d8e2:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d8e7:	83 c0 01             	add    eax,0x1
c001d8ea:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d8ef:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d8f4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d8fa:	83 ec 08             	sub    esp,0x8
c001d8fd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d900:	50                   	push   eax
c001d901:	e8 de e4 fe ff       	call   c000bde4 <Device::addChild(Device*)>
c001d906:	83 c4 10             	add    esp,0x10
c001d909:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d90c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d90e:	83 c0 08             	add    eax,0x8
c001d911:	8b 00                	mov    eax,DWORD PTR [eax]
c001d913:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d917:	6a 00                	push   0x0
c001d919:	6a 00                	push   0x0
c001d91b:	52                   	push   edx
c001d91c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d91f:	ff d0                	call   eax
c001d921:	83 c4 10             	add    esp,0x10
c001d924:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d927:	83 c0 01             	add    eax,0x1
c001d92a:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d92d:	e9 68 ff ff ff       	jmp    c001d89a <apicOpen()+0x1e>
c001d932:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d939:	e8 d0 fe ff ff       	call   c001d80e <apicGetBase()>
c001d93e:	05 f0 00 00 00       	add    eax,0xf0
c001d943:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d946:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d949:	8b 00                	mov    eax,DWORD PTR [eax]
c001d94b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d94e:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d955:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d95c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d95f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d962:	89 10                	mov    DWORD PTR [eax],edx
c001d964:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d96b:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d970:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d973:	7d 7c                	jge    c001d9f1 <apicOpen()+0x175>
c001d975:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d978:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d97f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d982:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d985:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d98c:	c1 e8 08             	shr    eax,0x8
c001d98f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d993:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d996:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d99d:	c1 e8 18             	shr    eax,0x18
c001d9a0:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d9a3:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d9a7:	3d ff 00 00 00       	cmp    eax,0xff
c001d9ac:	75 3a                	jne    c001d9e8 <apicOpen()+0x16c>
c001d9ae:	e8 5b fe ff ff       	call   c001d80e <apicGetBase()>
c001d9b3:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d9b7:	83 fa 01             	cmp    edx,0x1
c001d9ba:	75 07                	jne    c001d9c3 <apicOpen()+0x147>
c001d9bc:	ba 60 03 00 00       	mov    edx,0x360
c001d9c1:	eb 05                	jmp    c001d9c8 <apicOpen()+0x14c>
c001d9c3:	ba 50 03 00 00       	mov    edx,0x350
c001d9c8:	01 d0                	add    eax,edx
c001d9ca:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d9cd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d9d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9d2:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d9d5:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d9dc:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d9e0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d9e3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d9e6:	89 10                	mov    DWORD PTR [eax],edx
c001d9e8:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001d9ec:	e9 7a ff ff ff       	jmp    c001d96b <apicOpen()+0xef>
c001d9f1:	90                   	nop
c001d9f2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d9f5:	c9                   	leave  
c001d9f6:	c3                   	ret    
c001d9f7:	90                   	nop

c001d9f8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d9f8:	55                   	push   ebp
c001d9f9:	89 e5                	mov    ebp,esp
c001d9fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da04:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da07:	72 1d                	jb     c001da26 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da0c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001da12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da15:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001da1b:	01 d0                	add    eax,edx
c001da1d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da20:	73 04                	jae    c001da26 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da22:	b0 01                	mov    al,0x1
c001da24:	eb 02                	jmp    c001da28 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001da26:	b0 00                	mov    al,0x0
c001da28:	5d                   	pop    ebp
c001da29:	c3                   	ret    

c001da2a <IOAPIC::read(int)>:
c001da2a:	55                   	push   ebp
c001da2b:	89 e5                	mov    ebp,esp
c001da2d:	83 ec 10             	sub    esp,0x10
c001da30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da33:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da39:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da3f:	0f b6 d0             	movzx  edx,al
c001da42:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da45:	89 10                	mov    DWORD PTR [eax],edx
c001da47:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da4a:	83 c0 10             	add    eax,0x10
c001da4d:	8b 00                	mov    eax,DWORD PTR [eax]
c001da4f:	c9                   	leave  
c001da50:	c3                   	ret    
c001da51:	90                   	nop

c001da52 <IOAPIC::open(int, int, void*)>:
c001da52:	55                   	push   ebp
c001da53:	89 e5                	mov    ebp,esp
c001da55:	57                   	push   edi
c001da56:	56                   	push   esi
c001da57:	53                   	push   ebx
c001da58:	83 ec 04             	sub    esp,0x4
c001da5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da5e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da61:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da6a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da70:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001da77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da7a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001da80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da83:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da89:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001da90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da93:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001da99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da9c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001daa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daa5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001daab:	0f b6 f0             	movzx  esi,al
c001daae:	89 d0                	mov    eax,edx
c001dab0:	ba 00 00 00 00       	mov    edx,0x0
c001dab5:	89 c7                	mov    edi,eax
c001dab7:	83 e7 ff             	and    edi,0xffffffff
c001daba:	89 f9                	mov    ecx,edi
c001dabc:	0f b6 da             	movzx  ebx,dl
c001dabf:	89 c8                	mov    eax,ecx
c001dac1:	89 da                	mov    edx,ebx
c001dac3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001dac6:	8d 5e 08             	lea    ebx,[esi+0x8]
c001dac9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dacd:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dad1:	83 e0 00             	and    eax,0x0
c001dad4:	09 d0                	or     eax,edx
c001dad6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dadd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dae3:	8d 50 01             	lea    edx,[eax+0x1]
c001dae6:	88 d1                	mov    cl,dl
c001dae8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001daeb:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001daf1:	0f b6 d0             	movzx  edx,al
c001daf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daf7:	83 c2 08             	add    edx,0x8
c001dafa:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001dafe:	0f b6 c9             	movzx  ecx,cl
c001db01:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001db07:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001db0b:	6a 01                	push   0x1
c001db0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db10:	e8 15 ff ff ff       	call   c001da2a <IOAPIC::read(int)>
c001db15:	83 c4 08             	add    esp,0x8
c001db18:	c1 f8 10             	sar    eax,0x10
c001db1b:	0f b6 c0             	movzx  eax,al
c001db1e:	8d 50 01             	lea    edx,[eax+0x1]
c001db21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db24:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001db2a:	b8 00 00 00 00       	mov    eax,0x0
c001db2f:	8d 65 f4             	lea    esp,[ebp-0xc]
c001db32:	5b                   	pop    ebx
c001db33:	5e                   	pop    esi
c001db34:	5f                   	pop    edi
c001db35:	5d                   	pop    ebp
c001db36:	c3                   	ret    
c001db37:	90                   	nop

c001db38 <IOAPIC::write(int, int)>:
c001db38:	55                   	push   ebp
c001db39:	89 e5                	mov    ebp,esp
c001db3b:	83 ec 10             	sub    esp,0x10
c001db3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db41:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001db47:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001db4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db4d:	0f b6 d0             	movzx  edx,al
c001db50:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db53:	89 10                	mov    DWORD PTR [eax],edx
c001db55:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db58:	8d 50 10             	lea    edx,[eax+0x10]
c001db5b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db5e:	89 02                	mov    DWORD PTR [edx],eax
c001db60:	90                   	nop
c001db61:	c9                   	leave  
c001db62:	c3                   	ret    
c001db63:	90                   	nop

c001db64 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001db64:	55                   	push   ebp
c001db65:	89 e5                	mov    ebp,esp
c001db67:	53                   	push   ebx
c001db68:	83 ec 2c             	sub    esp,0x2c
c001db6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db6e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001db71:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001db74:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001db77:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001db7a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db7d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001db80:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001db83:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001db86:	88 d8                	mov    al,bl
c001db88:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001db8b:	88 c8                	mov    al,cl
c001db8d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001db90:	88 d0                	mov    al,dl
c001db92:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001db95:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db99:	83 c0 08             	add    eax,0x8
c001db9c:	d1 e0                	shl    eax,1
c001db9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dba1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dba5:	83 c0 08             	add    eax,0x8
c001dba8:	d1 e0                	shl    eax,1
c001dbaa:	83 c0 01             	add    eax,0x1
c001dbad:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001dbb0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dbb3:	50                   	push   eax
c001dbb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbb7:	e8 6e fe ff ff       	call   c001da2a <IOAPIC::read(int)>
c001dbbc:	83 c4 08             	add    esp,0x8
c001dbbf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dbc2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001dbc9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dbcc:	c1 e0 18             	shl    eax,0x18
c001dbcf:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001dbd2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dbd5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dbd8:	52                   	push   edx
c001dbd9:	50                   	push   eax
c001dbda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbdd:	e8 56 ff ff ff       	call   c001db38 <IOAPIC::write(int, int)>
c001dbe2:	83 c4 0c             	add    esp,0xc
c001dbe5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dbe8:	50                   	push   eax
c001dbe9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbec:	e8 39 fe ff ff       	call   c001da2a <IOAPIC::read(int)>
c001dbf1:	83 c4 08             	add    esp,0x8
c001dbf4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dbf7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dbfe:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dc05:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dc0c:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dc10:	85 c0                	test   eax,eax
c001dc12:	74 09                	je     c001dc1d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dc14:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dc1b:	eb 07                	jmp    c001dc24 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dc1d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dc24:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dc28:	85 c0                	test   eax,eax
c001dc2a:	74 09                	je     c001dc35 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dc2c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dc33:	eb 07                	jmp    c001dc3c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dc35:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dc3c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dc43:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dc47:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dc4a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dc4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc50:	52                   	push   edx
c001dc51:	50                   	push   eax
c001dc52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc55:	e8 de fe ff ff       	call   c001db38 <IOAPIC::write(int, int)>
c001dc5a:	83 c4 0c             	add    esp,0xc
c001dc5d:	90                   	nop
c001dc5e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dc61:	c9                   	leave  
c001dc62:	c3                   	ret    
c001dc63:	90                   	nop

c001dc64 <APICTimer::close(int, int, void*)>:
c001dc64:	b8 00 00 00 00       	mov    eax,0x0
c001dc69:	c3                   	ret    
c001dc6a:	66 90                	xchg   ax,ax

c001dc6c <apicTimerHandler(regs*, void*)>:
c001dc6c:	83 ec 0c             	sub    esp,0xc
c001dc6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc73:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc75:	b8 10 27 00 00       	mov    eax,0x2710
c001dc7a:	ba 00 00 00 00       	mov    edx,0x0
c001dc7f:	f7 f1                	div    ecx
c001dc81:	83 ec 0c             	sub    esp,0xc
c001dc84:	50                   	push   eax
c001dc85:	e8 c6 fb fe ff       	call   c000d850 <timerHandler(unsigned int)>
c001dc8a:	83 c4 10             	add    esp,0x10
c001dc8d:	90                   	nop
c001dc8e:	83 c4 0c             	add    esp,0xc
c001dc91:	c3                   	ret    
c001dc92:	66 90                	xchg   ax,ax

c001dc94 <APICTimer::open(int, int, void*)>:
c001dc94:	83 ec 0c             	sub    esp,0xc
c001dc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc9d:	83 c0 24             	add    eax,0x24
c001dca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001dca2:	83 ec 08             	sub    esp,0x8
c001dca5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dca9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcad:	ff d0                	call   eax
c001dcaf:	83 c4 10             	add    esp,0x10
c001dcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dcba:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcc8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dcce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcd2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dcd8:	83 ec 0c             	sub    esp,0xc
c001dcdb:	51                   	push   ecx
c001dcdc:	6a 01                	push   0x1
c001dcde:	68 6c dc 01 c0       	push   0xc001dc6c
c001dce3:	52                   	push   edx
c001dce4:	50                   	push   eax
c001dce5:	e8 a6 e0 fe ff       	call   c000bd90 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dcea:	83 c4 20             	add    esp,0x20
c001dced:	89 c2                	mov    edx,eax
c001dcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dcf9:	b8 00 00 00 00       	mov    eax,0x0
c001dcfe:	83 c4 0c             	add    esp,0xc
c001dd01:	c3                   	ret    
c001dd02:	66 90                	xchg   ax,ax

c001dd04 <APICTimer::write(int)>:
c001dd04:	83 ec 0c             	sub    esp,0xc
c001dd07:	83 ec 0c             	sub    esp,0xc
c001dd0a:	68 68 1e 02 c0       	push   0xc0021e68
c001dd0f:	e8 39 2b ff ff       	call   c001084d <KePanic(char const*)>
c001dd14:	83 c4 10             	add    esp,0x10
c001dd17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd1f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd25:	90                   	nop
c001dd26:	83 c4 0c             	add    esp,0xc
c001dd29:	c3                   	ret    
c001dd2a:	66 90                	xchg   ax,ax

c001dd2c <APICTimer::APICTimer()>:
c001dd2c:	83 ec 0c             	sub    esp,0xc
c001dd2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd33:	83 ec 08             	sub    esp,0x8
c001dd36:	68 78 1e 02 c0       	push   0xc0021e78
c001dd3b:	50                   	push   eax
c001dd3c:	e8 43 fa fe ff       	call   c000d784 <Timer::Timer(char const*)>
c001dd41:	83 c4 10             	add    esp,0x10
c001dd44:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c001dd49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd4d:	89 10                	mov    DWORD PTR [eax],edx
c001dd4f:	90                   	nop
c001dd50:	83 c4 0c             	add    esp,0xc
c001dd53:	c3                   	ret    

c001dd54 <PIT::write(int)>:
c001dd54:	83 ec 10             	sub    esp,0x10
c001dd57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd5f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd69:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dd6e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dd73:	89 c2                	mov    edx,eax
c001dd75:	c1 fa 1f             	sar    edx,0x1f
c001dd78:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dd7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd80:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dd87:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dd8c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dd90:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dd95:	ee                   	out    dx,al
c001dd96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd9a:	0f b6 c0             	movzx  eax,al
c001dd9d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dda4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dda8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ddac:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ddb1:	ee                   	out    dx,al
c001ddb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddb6:	c1 f8 08             	sar    eax,0x8
c001ddb9:	0f b6 c0             	movzx  eax,al
c001ddbc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ddc3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ddc7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ddcb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ddd0:	ee                   	out    dx,al
c001ddd1:	90                   	nop
c001ddd2:	83 c4 10             	add    esp,0x10
c001ddd5:	c3                   	ret    
c001ddd6:	66 90                	xchg   ax,ax

c001ddd8 <pitHandler(regs*, void*)>:
c001ddd8:	83 ec 0c             	sub    esp,0xc
c001dddb:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001dde1:	b8 10 27 00 00       	mov    eax,0x2710
c001dde6:	89 c2                	mov    edx,eax
c001dde8:	c1 fa 1f             	sar    edx,0x1f
c001ddeb:	f7 f9                	idiv   ecx
c001dded:	83 ec 0c             	sub    esp,0xc
c001ddf0:	50                   	push   eax
c001ddf1:	e8 5a fa fe ff       	call   c000d850 <timerHandler(unsigned int)>
c001ddf6:	83 c4 10             	add    esp,0x10
c001ddf9:	90                   	nop
c001ddfa:	83 c4 0c             	add    esp,0xc
c001ddfd:	c3                   	ret    
c001ddfe:	66 90                	xchg   ax,ax

c001de00 <PIT::open(int, int, void*)>:
c001de00:	83 ec 0c             	sub    esp,0xc
c001de03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de07:	8b 00                	mov    eax,DWORD PTR [eax]
c001de09:	83 c0 24             	add    eax,0x24
c001de0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001de0e:	83 ec 08             	sub    esp,0x8
c001de11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de19:	ff d0                	call   eax
c001de1b:	83 c4 10             	add    esp,0x10
c001de1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de22:	83 ec 0c             	sub    esp,0xc
c001de25:	6a 00                	push   0x0
c001de27:	6a 01                	push   0x1
c001de29:	68 d8 dd 01 c0       	push   0xc001ddd8
c001de2e:	6a 00                	push   0x0
c001de30:	50                   	push   eax
c001de31:	e8 5a df fe ff       	call   c000bd90 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001de36:	83 c4 20             	add    esp,0x20
c001de39:	89 c2                	mov    edx,eax
c001de3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de3f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de45:	b8 00 00 00 00       	mov    eax,0x0
c001de4a:	83 c4 0c             	add    esp,0xc
c001de4d:	c3                   	ret    
c001de4e:	66 90                	xchg   ax,ax

c001de50 <PIT::close(int, int, void*)>:
c001de50:	83 ec 0c             	sub    esp,0xc
c001de53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de57:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001de61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de65:	6a 01                	push   0x1
c001de67:	68 d8 dd 01 c0       	push   0xc001ddd8
c001de6c:	6a 00                	push   0x0
c001de6e:	50                   	push   eax
c001de6f:	e8 52 df fe ff       	call   c000bdc6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001de74:	83 c4 10             	add    esp,0x10
c001de77:	b8 00 00 00 00       	mov    eax,0x0
c001de7c:	83 c4 0c             	add    esp,0xc
c001de7f:	c3                   	ret    

c001de80 <PIT::PIT()>:
c001de80:	83 ec 0c             	sub    esp,0xc
c001de83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de87:	83 ec 08             	sub    esp,0x8
c001de8a:	68 b4 1e 02 c0       	push   0xc0021eb4
c001de8f:	50                   	push   eax
c001de90:	e8 ef f8 fe ff       	call   c000d784 <Timer::Timer(char const*)>
c001de95:	83 c4 10             	add    esp,0x10
c001de98:	ba dc 1e 02 c0       	mov    edx,0xc0021edc
c001de9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dea1:	89 10                	mov    DWORD PTR [eax],edx
c001dea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dea7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dead:	0f b6 d0             	movzx  edx,al
c001deb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deb4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001debb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001debf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dec5:	0f b6 d0             	movzx  edx,al
c001dec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001decc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ded1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dedb:	8d 50 01             	lea    edx,[eax+0x1]
c001dede:	88 d1                	mov    cl,dl
c001dee0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dee4:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001deea:	0f b6 d0             	movzx  edx,al
c001deed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001def5:	83 e1 3f             	and    ecx,0x3f
c001def8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001defc:	90                   	nop
c001defd:	83 c4 0c             	add    esp,0xc
c001df00:	c3                   	ret    
c001df01:	66 90                	xchg   ax,ax
c001df03:	66 90                	xchg   ax,ax
c001df05:	66 90                	xchg   ax,ax
c001df07:	66 90                	xchg   ax,ax
c001df09:	66 90                	xchg   ax,ax
c001df0b:	66 90                	xchg   ax,ax
c001df0d:	66 90                	xchg   ax,ax
c001df0f:	90                   	nop

c001df10 <avxDetect>:
c001df10:	b8 01 00 00 00       	mov    eax,0x1
c001df15:	0f a2                	cpuid  
c001df17:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001df1d:	74 15                	je     c001df34 <avxDetect.noAVX>
c001df1f:	b8 01 00 00 00       	mov    eax,0x1
c001df24:	0f a2                	cpuid  
c001df26:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001df2c:	74 06                	je     c001df34 <avxDetect.noAVX>
c001df2e:	b8 01 00 00 00       	mov    eax,0x1
c001df33:	c3                   	ret    

c001df34 <avxDetect.noAVX>:
c001df34:	b8 00 00 00 00       	mov    eax,0x0
c001df39:	c3                   	ret    

c001df3a <avxSave>:
c001df3a:	53                   	push   ebx
c001df3b:	52                   	push   edx
c001df3c:	31 c0                	xor    eax,eax
c001df3e:	48                   	dec    eax
c001df3f:	89 c2                	mov    edx,eax
c001df41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df45:	0f ae 23             	xsave  [ebx]
c001df48:	5a                   	pop    edx
c001df49:	5b                   	pop    ebx
c001df4a:	c3                   	ret    

c001df4b <avxLoad>:
c001df4b:	53                   	push   ebx
c001df4c:	52                   	push   edx
c001df4d:	31 c0                	xor    eax,eax
c001df4f:	48                   	dec    eax
c001df50:	89 c2                	mov    edx,eax
c001df52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df56:	0f ae 2b             	xrstor [ebx]
c001df59:	5a                   	pop    edx
c001df5a:	5b                   	pop    ebx
c001df5b:	c3                   	ret    

c001df5c <avxInit>:
c001df5c:	e8 67 03 00 00       	call   c001e2c8 <sseInit>
c001df61:	50                   	push   eax
c001df62:	51                   	push   ecx
c001df63:	0f 20 e0             	mov    eax,cr4
c001df66:	0d 00 00 04 00       	or     eax,0x40000
c001df6b:	0f 22 e0             	mov    cr4,eax
c001df6e:	31 c9                	xor    ecx,ecx
c001df70:	0f 01 d0             	xgetbv 
c001df73:	0d 07 00 00 00       	or     eax,0x7
c001df78:	0f 01 d1             	xsetbv 
c001df7b:	59                   	pop    ecx
c001df7c:	58                   	pop    eax
c001df7d:	c3                   	ret    

c001df7e <avxClose>:
c001df7e:	c3                   	ret    

c001df7f <wouldSheSayYes>:
c001df7f:	c3                   	ret    
c001df80:	49                   	dec    ecx
c001df81:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001df85:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001df89:	75 20                	jne    c001dfab <isr0+0xb>
c001df8b:	4e                   	dec    esi
c001df8c:	79 61                	jns    c001dfef <isr7+0x3>
c001df8e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001df93:	66 90                	xchg   ax,ax
c001df95:	66 90                	xchg   ax,ax
c001df97:	66 90                	xchg   ax,ax
c001df99:	66 90                	xchg   ax,ax
c001df9b:	66 90                	xchg   ax,ax
c001df9d:	66 90                	xchg   ax,ax
c001df9f:	90                   	nop

c001dfa0 <isr0>:
c001dfa0:	fa                   	cli    
c001dfa1:	68 00 00 00 00       	push   0x0
c001dfa6:	68 00 00 00 00       	push   0x0
c001dfab:	e9 56 01 00 00       	jmp    c001e106 <int_common_stub>

c001dfb0 <isr1>:
c001dfb0:	fa                   	cli    
c001dfb1:	6a 00                	push   0x0
c001dfb3:	6a 01                	push   0x1
c001dfb5:	e9 4c 01 00 00       	jmp    c001e106 <int_common_stub>

c001dfba <isr2>:
c001dfba:	fa                   	cli    
c001dfbb:	6a 00                	push   0x0
c001dfbd:	6a 02                	push   0x2
c001dfbf:	e9 42 01 00 00       	jmp    c001e106 <int_common_stub>

c001dfc4 <isr3>:
c001dfc4:	fa                   	cli    
c001dfc5:	6a 00                	push   0x0
c001dfc7:	6a 03                	push   0x3
c001dfc9:	e9 38 01 00 00       	jmp    c001e106 <int_common_stub>

c001dfce <isr4>:
c001dfce:	fa                   	cli    
c001dfcf:	6a 00                	push   0x0
c001dfd1:	6a 04                	push   0x4
c001dfd3:	e9 2e 01 00 00       	jmp    c001e106 <int_common_stub>

c001dfd8 <isr5>:
c001dfd8:	fa                   	cli    
c001dfd9:	6a 00                	push   0x0
c001dfdb:	6a 05                	push   0x5
c001dfdd:	e9 24 01 00 00       	jmp    c001e106 <int_common_stub>

c001dfe2 <isr6>:
c001dfe2:	fa                   	cli    
c001dfe3:	6a 00                	push   0x0
c001dfe5:	6a 06                	push   0x6
c001dfe7:	e9 1a 01 00 00       	jmp    c001e106 <int_common_stub>

c001dfec <isr7>:
c001dfec:	fa                   	cli    
c001dfed:	6a 00                	push   0x0
c001dfef:	6a 07                	push   0x7
c001dff1:	e9 10 01 00 00       	jmp    c001e106 <int_common_stub>

c001dff6 <isr8>:
c001dff6:	fa                   	cli    
c001dff7:	6a 08                	push   0x8
c001dff9:	e9 08 01 00 00       	jmp    c001e106 <int_common_stub>

c001dffe <isr9>:
c001dffe:	fa                   	cli    
c001dfff:	6a 00                	push   0x0
c001e001:	6a 09                	push   0x9
c001e003:	e9 fe 00 00 00       	jmp    c001e106 <int_common_stub>

c001e008 <isr10>:
c001e008:	fa                   	cli    
c001e009:	6a 0a                	push   0xa
c001e00b:	e9 f6 00 00 00       	jmp    c001e106 <int_common_stub>

c001e010 <isr11>:
c001e010:	fa                   	cli    
c001e011:	6a 0b                	push   0xb
c001e013:	e9 ee 00 00 00       	jmp    c001e106 <int_common_stub>

c001e018 <isr12>:
c001e018:	fa                   	cli    
c001e019:	6a 0c                	push   0xc
c001e01b:	e9 e6 00 00 00       	jmp    c001e106 <int_common_stub>

c001e020 <isr13>:
c001e020:	fa                   	cli    
c001e021:	6a 0d                	push   0xd
c001e023:	53                   	push   ebx
c001e024:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e028:	81 fb f6 e1 01 c0    	cmp    ebx,0xc001e1f6
c001e02e:	5b                   	pop    ebx
c001e02f:	0f 84 c3 01 00 00    	je     c001e1f8 <finishSignal2>
c001e035:	e9 cc 00 00 00       	jmp    c001e106 <int_common_stub>

c001e03a <isr14>:
c001e03a:	fa                   	cli    
c001e03b:	6a 0e                	push   0xe
c001e03d:	e9 c4 00 00 00       	jmp    c001e106 <int_common_stub>

c001e042 <isr15>:
c001e042:	fa                   	cli    
c001e043:	6a 00                	push   0x0
c001e045:	6a 0f                	push   0xf
c001e047:	e9 ba 00 00 00       	jmp    c001e106 <int_common_stub>

c001e04c <isr16>:
c001e04c:	fa                   	cli    
c001e04d:	6a 00                	push   0x0
c001e04f:	6a 10                	push   0x10
c001e051:	e9 b0 00 00 00       	jmp    c001e106 <int_common_stub>

c001e056 <isr17>:
c001e056:	fa                   	cli    
c001e057:	6a 00                	push   0x0
c001e059:	6a 11                	push   0x11
c001e05b:	e9 a6 00 00 00       	jmp    c001e106 <int_common_stub>

c001e060 <isr18>:
c001e060:	fa                   	cli    
c001e061:	6a 00                	push   0x0
c001e063:	6a 12                	push   0x12
c001e065:	e9 9c 00 00 00       	jmp    c001e106 <int_common_stub>

c001e06a <irq3>:
c001e06a:	fa                   	cli    
c001e06b:	6a 00                	push   0x0
c001e06d:	6a 23                	push   0x23
c001e06f:	e9 92 00 00 00       	jmp    c001e106 <int_common_stub>

c001e074 <irq4>:
c001e074:	fa                   	cli    
c001e075:	6a 00                	push   0x0
c001e077:	6a 24                	push   0x24
c001e079:	e9 88 00 00 00       	jmp    c001e106 <int_common_stub>

c001e07e <irq5>:
c001e07e:	fa                   	cli    
c001e07f:	6a 00                	push   0x0
c001e081:	6a 25                	push   0x25
c001e083:	e9 7e 00 00 00       	jmp    c001e106 <int_common_stub>

c001e088 <irq6>:
c001e088:	fa                   	cli    
c001e089:	6a 00                	push   0x0
c001e08b:	6a 26                	push   0x26
c001e08d:	e9 74 00 00 00       	jmp    c001e106 <int_common_stub>

c001e092 <irq7>:
c001e092:	fa                   	cli    
c001e093:	6a 00                	push   0x0
c001e095:	6a 27                	push   0x27
c001e097:	e9 6a 00 00 00       	jmp    c001e106 <int_common_stub>

c001e09c <irq8>:
c001e09c:	fa                   	cli    
c001e09d:	6a 00                	push   0x0
c001e09f:	6a 28                	push   0x28
c001e0a1:	e9 60 00 00 00       	jmp    c001e106 <int_common_stub>

c001e0a6 <irq9>:
c001e0a6:	fa                   	cli    
c001e0a7:	6a 00                	push   0x0
c001e0a9:	6a 29                	push   0x29
c001e0ab:	e9 56 00 00 00       	jmp    c001e106 <int_common_stub>

c001e0b0 <irq10>:
c001e0b0:	fa                   	cli    
c001e0b1:	6a 00                	push   0x0
c001e0b3:	6a 2a                	push   0x2a
c001e0b5:	e9 4c 00 00 00       	jmp    c001e106 <int_common_stub>

c001e0ba <irq11>:
c001e0ba:	fa                   	cli    
c001e0bb:	6a 00                	push   0x0
c001e0bd:	6a 2b                	push   0x2b
c001e0bf:	e9 42 00 00 00       	jmp    c001e106 <int_common_stub>

c001e0c4 <irq12>:
c001e0c4:	fa                   	cli    
c001e0c5:	6a 00                	push   0x0
c001e0c7:	6a 2c                	push   0x2c
c001e0c9:	e9 38 00 00 00       	jmp    c001e106 <int_common_stub>

c001e0ce <irq13>:
c001e0ce:	fa                   	cli    
c001e0cf:	6a 00                	push   0x0
c001e0d1:	6a 2d                	push   0x2d
c001e0d3:	e9 2e 00 00 00       	jmp    c001e106 <int_common_stub>

c001e0d8 <irq14>:
c001e0d8:	fa                   	cli    
c001e0d9:	6a 00                	push   0x0
c001e0db:	6a 2e                	push   0x2e
c001e0dd:	e9 24 00 00 00       	jmp    c001e106 <int_common_stub>

c001e0e2 <irq15>:
c001e0e2:	fa                   	cli    
c001e0e3:	6a 00                	push   0x0
c001e0e5:	6a 2f                	push   0x2f
c001e0e7:	e9 1a 00 00 00       	jmp    c001e106 <int_common_stub>

c001e0ec <irq1>:
c001e0ec:	fa                   	cli    
c001e0ed:	6a 00                	push   0x0
c001e0ef:	6a 21                	push   0x21
c001e0f1:	eb 13                	jmp    c001e106 <int_common_stub>

c001e0f3 <irq2>:
c001e0f3:	fa                   	cli    
c001e0f4:	6a 00                	push   0x0
c001e0f6:	6a 22                	push   0x22
c001e0f8:	eb 0c                	jmp    c001e106 <int_common_stub>

c001e0fa <isr96>:
c001e0fa:	6a 00                	push   0x0
c001e0fc:	6a 60                	push   0x60
c001e0fe:	fb                   	sti    
c001e0ff:	eb 37                	jmp    c001e138 <syscall_common_stub>

c001e101 <irq0>:
c001e101:	fa                   	cli    
c001e102:	6a 00                	push   0x0
c001e104:	6a 20                	push   0x20

c001e106 <int_common_stub>:
c001e106:	60                   	pusha  
c001e107:	1e                   	push   ds
c001e108:	06                   	push   es
c001e109:	0f a0                	push   fs
c001e10b:	0f a8                	push   gs
c001e10d:	66 b8 10 00          	mov    ax,0x10
c001e111:	66 8e d8             	mov    ds,ax
c001e114:	66 8e c0             	mov    es,ax
c001e117:	66 8e e0             	mov    fs,ax
c001e11a:	66 8e e8             	mov    gs,ax
c001e11d:	54                   	push   esp
c001e11e:	fc                   	cld    
c001e11f:	e8 6c e1 fe ff       	call   c000c290 <int_handler>
c001e124:	81 c4 04 00 00 00    	add    esp,0x4
c001e12a:	0f a9                	pop    gs
c001e12c:	0f a1                	pop    fs
c001e12e:	07                   	pop    es
c001e12f:	1f                   	pop    ds
c001e130:	61                   	popa   
c001e131:	81 c4 08 00 00 00    	add    esp,0x8
c001e137:	cf                   	iret   

c001e138 <syscall_common_stub>:
c001e138:	60                   	pusha  
c001e139:	1e                   	push   ds
c001e13a:	06                   	push   es
c001e13b:	0f a0                	push   fs
c001e13d:	0f a8                	push   gs
c001e13f:	66 b8 10 00          	mov    ax,0x10
c001e143:	66 8e d8             	mov    ds,ax
c001e146:	66 8e c0             	mov    es,ax
c001e149:	66 8e e0             	mov    fs,ax
c001e14c:	66 8e e8             	mov    gs,ax
c001e14f:	54                   	push   esp
c001e150:	fc                   	cld    
c001e151:	e8 3a e1 fe ff       	call   c000c290 <int_handler>
c001e156:	81 c4 04 00 00 00    	add    esp,0x4
c001e15c:	0f a9                	pop    gs
c001e15e:	0f a1                	pop    fs
c001e160:	07                   	pop    es
c001e161:	1f                   	pop    ds
c001e162:	e8 ec 2c ff ff       	call   c0010e53 <KiCheckSignalZ>
c001e167:	3d 00 00 00 00       	cmp    eax,0x0
c001e16c:	0f 84 c0 00 00 00    	je     c001e232 <skipSignals>
c001e172:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e177:	61                   	popa   
c001e178:	53                   	push   ebx
c001e179:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e17f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e182:	5b                   	pop    ebx
c001e183:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e188:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e18b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e18e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e191:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e194:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e197:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e19a:	81 c4 08 00 00 00    	add    esp,0x8
c001e1a0:	5e                   	pop    esi
c001e1a1:	5b                   	pop    ebx
c001e1a2:	59                   	pop    ecx
c001e1a3:	5a                   	pop    edx
c001e1a4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e1a7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e1aa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e1ad:	52                   	push   edx
c001e1ae:	51                   	push   ecx
c001e1af:	53                   	push   ebx
c001e1b0:	56                   	push   esi
c001e1b1:	81 ec 08 00 00 00    	sub    esp,0x8
c001e1b7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e1ba:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e1bd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e1c0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e1c6:	60                   	pusha  
c001e1c7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e1cd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e1d0:	89 e3                	mov    ebx,esp
c001e1d2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e1d5:	52                   	push   edx
c001e1d6:	68 f6 e1 01 c0       	push   0xc001e1f6
c001e1db:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e1de:	89 dc                	mov    esp,ebx
c001e1e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e1e3:	68 23 00 00 00       	push   0x23
c001e1e8:	51                   	push   ecx
c001e1e9:	68 02 02 00 00       	push   0x202
c001e1ee:	68 1b 00 00 00       	push   0x1b
c001e1f3:	ff 36                	push   DWORD PTR [esi]
c001e1f5:	cf                   	iret   

c001e1f6 <finishSignal>:
c001e1f6:	cd 0f                	int    0xf

c001e1f8 <finishSignal2>:
c001e1f8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e1fe:	e8 cd 2c ff ff       	call   c0010ed0 <KiFinishSignalZ>
c001e203:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e209:	68 23 00 00 00       	push   0x23
c001e20e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e211:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e214:	68 1b 00 00 00       	push   0x1b
c001e219:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e21c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e21f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e222:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e225:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e228:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e22b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e22e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e231:	cf                   	iret   

c001e232 <skipSignals>:
c001e232:	61                   	popa   
c001e233:	81 c4 08 00 00 00    	add    esp,0x8
c001e239:	cf                   	iret   
c001e23a:	90                   	nop
c001e23b:	90                   	nop

c001e23c <irq16>:
c001e23c:	fa                   	cli    
c001e23d:	6a 00                	push   0x0
c001e23f:	6a 30                	push   0x30
c001e241:	e9 c0 fe ff ff       	jmp    c001e106 <int_common_stub>

c001e246 <irq17>:
c001e246:	fa                   	cli    
c001e247:	6a 00                	push   0x0
c001e249:	6a 31                	push   0x31
c001e24b:	e9 b6 fe ff ff       	jmp    c001e106 <int_common_stub>

c001e250 <irq18>:
c001e250:	fa                   	cli    
c001e251:	6a 00                	push   0x0
c001e253:	6a 32                	push   0x32
c001e255:	e9 ac fe ff ff       	jmp    c001e106 <int_common_stub>

c001e25a <irq19>:
c001e25a:	fa                   	cli    
c001e25b:	6a 00                	push   0x0
c001e25d:	6a 33                	push   0x33
c001e25f:	e9 a2 fe ff ff       	jmp    c001e106 <int_common_stub>

c001e264 <irq20>:
c001e264:	fa                   	cli    
c001e265:	6a 00                	push   0x0
c001e267:	6a 34                	push   0x34
c001e269:	e9 98 fe ff ff       	jmp    c001e106 <int_common_stub>

c001e26e <irq21>:
c001e26e:	fa                   	cli    
c001e26f:	6a 00                	push   0x0
c001e271:	6a 35                	push   0x35
c001e273:	e9 8e fe ff ff       	jmp    c001e106 <int_common_stub>

c001e278 <irq22>:
c001e278:	fa                   	cli    
c001e279:	6a 00                	push   0x0
c001e27b:	6a 36                	push   0x36
c001e27d:	e9 84 fe ff ff       	jmp    c001e106 <int_common_stub>

c001e282 <irq23>:
c001e282:	fa                   	cli    
c001e283:	6a 00                	push   0x0
c001e285:	6a 37                	push   0x37
c001e287:	e9 7a fe ff ff       	jmp    c001e106 <int_common_stub>
c001e28c:	66 90                	xchg   ax,ax
c001e28e:	66 90                	xchg   ax,ax

c001e290 <i386GetRDRAND>:
c001e290:	b9 64 00 00 00       	mov    ecx,0x64

c001e295 <retry>:
c001e295:	0f c7 f0             	rdrand eax
c001e298:	72 05                	jb     c001e29f <retry.done>
c001e29a:	e2 f9                	loop   c001e295 <retry>

c001e29c <retry.fail>:
c001e29c:	31 c0                	xor    eax,eax
c001e29e:	c3                   	ret    

c001e29f <retry.done>:
c001e29f:	c3                   	ret    

c001e2a0 <absolutelyNoChanceInHell>:
c001e2a0:	b8 01 00 00 00       	mov    eax,0x1
c001e2a5:	0f a2                	cpuid  
c001e2a7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e2ad:	74 06                	je     c001e2b5 <sseDetect.noSSE>
c001e2af:	b8 01 00 00 00       	mov    eax,0x1
c001e2b4:	c3                   	ret    

c001e2b5 <sseDetect.noSSE>:
c001e2b5:	31 c0                	xor    eax,eax
c001e2b7:	c3                   	ret    

c001e2b8 <sseSave>:
c001e2b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2bc:	0f ae 00             	fxsave [eax]
c001e2bf:	c3                   	ret    

c001e2c0 <sseLoad>:
c001e2c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2c4:	0f ae 08             	fxrstor [eax]
c001e2c7:	c3                   	ret    

c001e2c8 <sseInit>:
c001e2c8:	e8 42 00 00 00       	call   c001e30f <x87Init>
c001e2cd:	0f 20 e0             	mov    eax,cr4
c001e2d0:	66 0d 00 06          	or     ax,0x600
c001e2d4:	0f 22 e0             	mov    cr4,eax
c001e2d7:	c3                   	ret    

c001e2d8 <sseClose>:
c001e2d8:	c3                   	ret    
c001e2d9:	66 90                	xchg   ax,ax
c001e2db:	66 90                	xchg   ax,ax
c001e2dd:	66 90                	xchg   ax,ax
c001e2df:	90                   	nop

c001e2e0 <value_37F>:
c001e2e0:	7f 03                	jg     c001e2e5 <value_37A+0x1>

c001e2e2 <value_37E>:
c001e2e2:	7e 03                	jle    c001e2e7 <x87Detect+0x1>

c001e2e4 <value_37A>:
c001e2e4:	7a 03                	jp     c001e2e9 <x87Detect+0x3>

c001e2e6 <x87Detect>:
c001e2e6:	b8 01 00 00 00       	mov    eax,0x1
c001e2eb:	0f a2                	cpuid  
c001e2ed:	f7 c2 01 00 00 00    	test   edx,0x1
c001e2f3:	74 06                	je     c001e2fb <x87Detect.nox87>
c001e2f5:	b8 01 00 00 00       	mov    eax,0x1
c001e2fa:	c3                   	ret    

c001e2fb <x87Detect.nox87>:
c001e2fb:	b8 00 00 00 00       	mov    eax,0x0
c001e300:	c3                   	ret    

c001e301 <x87Save>:
c001e301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e305:	dd 30                	fnsave [eax]
c001e307:	c3                   	ret    

c001e308 <x87Load>:
c001e308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e30c:	dd 20                	frstor [eax]
c001e30e:	c3                   	ret    

c001e30f <x87Init>:
c001e30f:	0f 20 c0             	mov    eax,cr0
c001e312:	66 25 fb ff          	and    ax,0xfffb
c001e316:	66 0d 22 00          	or     ax,0x22
c001e31a:	0f 22 c0             	mov    cr0,eax
c001e31d:	db e3                	fninit 
c001e31f:	0f 06                	clts   
c001e321:	d9 2d e4 e2 01 c0    	fldcw  WORD PTR ds:0xc001e2e4
c001e327:	c3                   	ret    

c001e328 <x87Close>:
c001e328:	c3                   	ret    
c001e329:	66 90                	xchg   ax,ax
c001e32b:	90                   	nop

c001e32c <__do_global_ctors_aux>:
c001e32c:	a1 e0 f2 01 c0       	mov    eax,ds:0xc001f2e0
c001e331:	83 f8 ff             	cmp    eax,0xffffffff
c001e334:	74 1a                	je     c001e350 <__do_global_ctors_aux+0x24>
c001e336:	55                   	push   ebp
c001e337:	89 e5                	mov    ebp,esp
c001e339:	53                   	push   ebx
c001e33a:	52                   	push   edx
c001e33b:	bb e0 f2 01 c0       	mov    ebx,0xc001f2e0
c001e340:	ff d0                	call   eax
c001e342:	83 eb 04             	sub    ebx,0x4
c001e345:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e347:	83 f8 ff             	cmp    eax,0xffffffff
c001e34a:	75 f4                	jne    c001e340 <__do_global_ctors_aux+0x14>
c001e34c:	58                   	pop    eax
c001e34d:	5b                   	pop    ebx
c001e34e:	5d                   	pop    ebp
c001e34f:	c3                   	ret    
c001e350:	c3                   	ret    
c001e351:	66 90                	xchg   ax,ax
c001e353:	90                   	nop

c001e354 <__divdi3>:
c001e354:	55                   	push   ebp
c001e355:	57                   	push   edi
c001e356:	56                   	push   esi
c001e357:	53                   	push   ebx
c001e358:	83 ec 1c             	sub    esp,0x1c
c001e35b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e35f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e363:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e366:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e36a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e36e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e372:	85 db                	test   ebx,ebx
c001e374:	0f 88 8e 00 00 00    	js     c001e408 <__divdi3+0xb4>
c001e37a:	89 dd                	mov    ebp,ebx
c001e37c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e384:	89 d3                	mov    ebx,edx
c001e386:	85 d2                	test   edx,edx
c001e388:	79 0d                	jns    c001e397 <__divdi3+0x43>
c001e38a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e38e:	f7 d8                	neg    eax
c001e390:	83 d2 00             	adc    edx,0x0
c001e393:	f7 da                	neg    edx
c001e395:	89 d3                	mov    ebx,edx
c001e397:	89 c7                	mov    edi,eax
c001e399:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e39c:	85 db                	test   ebx,ebx
c001e39e:	75 48                	jne    c001e3e8 <__divdi3+0x94>
c001e3a0:	39 ef                	cmp    edi,ebp
c001e3a2:	76 24                	jbe    c001e3c8 <__divdi3+0x74>
c001e3a4:	89 ea                	mov    edx,ebp
c001e3a6:	f7 f7                	div    edi
c001e3a8:	89 c1                	mov    ecx,eax
c001e3aa:	31 f6                	xor    esi,esi
c001e3ac:	89 c8                	mov    eax,ecx
c001e3ae:	89 f2                	mov    edx,esi
c001e3b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e3b4:	85 c9                	test   ecx,ecx
c001e3b6:	74 07                	je     c001e3bf <__divdi3+0x6b>
c001e3b8:	f7 d8                	neg    eax
c001e3ba:	83 d2 00             	adc    edx,0x0
c001e3bd:	f7 da                	neg    edx
c001e3bf:	83 c4 1c             	add    esp,0x1c
c001e3c2:	5b                   	pop    ebx
c001e3c3:	5e                   	pop    esi
c001e3c4:	5f                   	pop    edi
c001e3c5:	5d                   	pop    ebp
c001e3c6:	c3                   	ret    
c001e3c7:	90                   	nop
c001e3c8:	85 ff                	test   edi,edi
c001e3ca:	75 0b                	jne    c001e3d7 <__divdi3+0x83>
c001e3cc:	b8 01 00 00 00       	mov    eax,0x1
c001e3d1:	31 d2                	xor    edx,edx
c001e3d3:	f7 f3                	div    ebx
c001e3d5:	89 c7                	mov    edi,eax
c001e3d7:	31 d2                	xor    edx,edx
c001e3d9:	89 e8                	mov    eax,ebp
c001e3db:	f7 f7                	div    edi
c001e3dd:	89 c6                	mov    esi,eax
c001e3df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3e2:	f7 f7                	div    edi
c001e3e4:	89 c1                	mov    ecx,eax
c001e3e6:	eb c4                	jmp    c001e3ac <__divdi3+0x58>
c001e3e8:	39 eb                	cmp    ebx,ebp
c001e3ea:	77 3c                	ja     c001e428 <__divdi3+0xd4>
c001e3ec:	0f bd f3             	bsr    esi,ebx
c001e3ef:	83 f6 1f             	xor    esi,0x1f
c001e3f2:	75 40                	jne    c001e434 <__divdi3+0xe0>
c001e3f4:	39 eb                	cmp    ebx,ebp
c001e3f6:	72 09                	jb     c001e401 <__divdi3+0xad>
c001e3f8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e3fb:	0f 87 97 00 00 00    	ja     c001e498 <__divdi3+0x144>
c001e401:	b9 01 00 00 00       	mov    ecx,0x1
c001e406:	eb a4                	jmp    c001e3ac <__divdi3+0x58>
c001e408:	f7 d9                	neg    ecx
c001e40a:	83 d3 00             	adc    ebx,0x0
c001e40d:	f7 db                	neg    ebx
c001e40f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e412:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e416:	89 dd                	mov    ebp,ebx
c001e418:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e420:	e9 5f ff ff ff       	jmp    c001e384 <__divdi3+0x30>
c001e425:	8d 76 00             	lea    esi,[esi+0x0]
c001e428:	31 f6                	xor    esi,esi
c001e42a:	31 c9                	xor    ecx,ecx
c001e42c:	e9 7b ff ff ff       	jmp    c001e3ac <__divdi3+0x58>
c001e431:	8d 76 00             	lea    esi,[esi+0x0]
c001e434:	b8 20 00 00 00       	mov    eax,0x20
c001e439:	29 f0                	sub    eax,esi
c001e43b:	89 f1                	mov    ecx,esi
c001e43d:	d3 e3                	shl    ebx,cl
c001e43f:	89 fa                	mov    edx,edi
c001e441:	88 c1                	mov    cl,al
c001e443:	d3 ea                	shr    edx,cl
c001e445:	09 da                	or     edx,ebx
c001e447:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e44b:	89 f1                	mov    ecx,esi
c001e44d:	d3 e7                	shl    edi,cl
c001e44f:	89 eb                	mov    ebx,ebp
c001e451:	88 c1                	mov    cl,al
c001e453:	d3 eb                	shr    ebx,cl
c001e455:	89 f1                	mov    ecx,esi
c001e457:	d3 e5                	shl    ebp,cl
c001e459:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e45c:	88 c1                	mov    cl,al
c001e45e:	d3 ea                	shr    edx,cl
c001e460:	09 d5                	or     ebp,edx
c001e462:	89 e8                	mov    eax,ebp
c001e464:	89 da                	mov    edx,ebx
c001e466:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e46a:	89 d3                	mov    ebx,edx
c001e46c:	89 c5                	mov    ebp,eax
c001e46e:	f7 e7                	mul    edi
c001e470:	39 d3                	cmp    ebx,edx
c001e472:	72 18                	jb     c001e48c <__divdi3+0x138>
c001e474:	74 0a                	je     c001e480 <__divdi3+0x12c>
c001e476:	89 e9                	mov    ecx,ebp
c001e478:	31 f6                	xor    esi,esi
c001e47a:	e9 2d ff ff ff       	jmp    c001e3ac <__divdi3+0x58>
c001e47f:	90                   	nop
c001e480:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e483:	89 f1                	mov    ecx,esi
c001e485:	d3 e7                	shl    edi,cl
c001e487:	39 c7                	cmp    edi,eax
c001e489:	73 eb                	jae    c001e476 <__divdi3+0x122>
c001e48b:	90                   	nop
c001e48c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e48f:	31 f6                	xor    esi,esi
c001e491:	e9 16 ff ff ff       	jmp    c001e3ac <__divdi3+0x58>
c001e496:	66 90                	xchg   ax,ax
c001e498:	31 c9                	xor    ecx,ecx
c001e49a:	e9 0d ff ff ff       	jmp    c001e3ac <__divdi3+0x58>
c001e49f:	90                   	nop

c001e4a0 <__moddi3>:
c001e4a0:	55                   	push   ebp
c001e4a1:	57                   	push   edi
c001e4a2:	56                   	push   esi
c001e4a3:	53                   	push   ebx
c001e4a4:	83 ec 2c             	sub    esp,0x2c
c001e4a7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e4ab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e4af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e4b3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e4b7:	85 db                	test   ebx,ebx
c001e4b9:	0f 88 85 00 00 00    	js     c001e544 <__moddi3+0xa4>
c001e4bf:	89 de                	mov    esi,ebx
c001e4c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e4c9:	89 d7                	mov    edi,edx
c001e4cb:	85 d2                	test   edx,edx
c001e4cd:	79 09                	jns    c001e4d8 <__moddi3+0x38>
c001e4cf:	f7 d8                	neg    eax
c001e4d1:	83 d2 00             	adc    edx,0x0
c001e4d4:	f7 da                	neg    edx
c001e4d6:	89 d7                	mov    edi,edx
c001e4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4dc:	89 cd                	mov    ebp,ecx
c001e4de:	85 ff                	test   edi,edi
c001e4e0:	75 52                	jne    c001e534 <__moddi3+0x94>
c001e4e2:	89 c3                	mov    ebx,eax
c001e4e4:	39 f0                	cmp    eax,esi
c001e4e6:	76 24                	jbe    c001e50c <__moddi3+0x6c>
c001e4e8:	89 c8                	mov    eax,ecx
c001e4ea:	89 f2                	mov    edx,esi
c001e4ec:	f7 f3                	div    ebx
c001e4ee:	89 d6                	mov    esi,edx
c001e4f0:	89 f0                	mov    eax,esi
c001e4f2:	31 d2                	xor    edx,edx
c001e4f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4f8:	85 c9                	test   ecx,ecx
c001e4fa:	74 07                	je     c001e503 <__moddi3+0x63>
c001e4fc:	f7 d8                	neg    eax
c001e4fe:	83 d2 00             	adc    edx,0x0
c001e501:	f7 da                	neg    edx
c001e503:	83 c4 2c             	add    esp,0x2c
c001e506:	5b                   	pop    ebx
c001e507:	5e                   	pop    esi
c001e508:	5f                   	pop    edi
c001e509:	5d                   	pop    ebp
c001e50a:	c3                   	ret    
c001e50b:	90                   	nop
c001e50c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e510:	85 db                	test   ebx,ebx
c001e512:	75 0d                	jne    c001e521 <__moddi3+0x81>
c001e514:	b8 01 00 00 00       	mov    eax,0x1
c001e519:	31 d2                	xor    edx,edx
c001e51b:	f7 f7                	div    edi
c001e51d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e521:	89 f0                	mov    eax,esi
c001e523:	31 d2                	xor    edx,edx
c001e525:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e529:	f7 f7                	div    edi
c001e52b:	89 e8                	mov    eax,ebp
c001e52d:	f7 f7                	div    edi
c001e52f:	89 d6                	mov    esi,edx
c001e531:	eb bd                	jmp    c001e4f0 <__moddi3+0x50>
c001e533:	90                   	nop
c001e534:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e538:	39 f7                	cmp    edi,esi
c001e53a:	76 20                	jbe    c001e55c <__moddi3+0xbc>
c001e53c:	89 c8                	mov    eax,ecx
c001e53e:	89 f2                	mov    edx,esi
c001e540:	eb b2                	jmp    c001e4f4 <__moddi3+0x54>
c001e542:	66 90                	xchg   ax,ax
c001e544:	f7 d9                	neg    ecx
c001e546:	83 d3 00             	adc    ebx,0x0
c001e549:	f7 db                	neg    ebx
c001e54b:	89 de                	mov    esi,ebx
c001e54d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e555:	e9 6f ff ff ff       	jmp    c001e4c9 <__moddi3+0x29>
c001e55a:	66 90                	xchg   ax,ax
c001e55c:	0f bd c7             	bsr    eax,edi
c001e55f:	83 f0 1f             	xor    eax,0x1f
c001e562:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e566:	75 24                	jne    c001e58c <__moddi3+0xec>
c001e568:	39 f7                	cmp    edi,esi
c001e56a:	72 06                	jb     c001e572 <__moddi3+0xd2>
c001e56c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e570:	77 0c                	ja     c001e57e <__moddi3+0xde>
c001e572:	89 e9                	mov    ecx,ebp
c001e574:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e578:	19 fe                	sbb    esi,edi
c001e57a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e57e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e582:	89 f2                	mov    edx,esi
c001e584:	e9 6b ff ff ff       	jmp    c001e4f4 <__moddi3+0x54>
c001e589:	8d 76 00             	lea    esi,[esi+0x0]
c001e58c:	b8 20 00 00 00       	mov    eax,0x20
c001e591:	89 c2                	mov    edx,eax
c001e593:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e597:	29 da                	sub    edx,ebx
c001e599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e59d:	88 d9                	mov    cl,bl
c001e59f:	d3 e7                	shl    edi,cl
c001e5a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5a5:	88 d1                	mov    cl,dl
c001e5a7:	d3 e8                	shr    eax,cl
c001e5a9:	09 c7                	or     edi,eax
c001e5ab:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e5af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5b3:	89 d8                	mov    eax,ebx
c001e5b5:	88 d9                	mov    cl,bl
c001e5b7:	d3 e7                	shl    edi,cl
c001e5b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e5bd:	89 f3                	mov    ebx,esi
c001e5bf:	88 d1                	mov    cl,dl
c001e5c1:	d3 eb                	shr    ebx,cl
c001e5c3:	89 c7                	mov    edi,eax
c001e5c5:	88 c1                	mov    cl,al
c001e5c7:	d3 e6                	shl    esi,cl
c001e5c9:	89 e8                	mov    eax,ebp
c001e5cb:	88 d1                	mov    cl,dl
c001e5cd:	d3 e8                	shr    eax,cl
c001e5cf:	09 f0                	or     eax,esi
c001e5d1:	89 f9                	mov    ecx,edi
c001e5d3:	d3 e5                	shl    ebp,cl
c001e5d5:	89 da                	mov    edx,ebx
c001e5d7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e5db:	89 d3                	mov    ebx,edx
c001e5dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e5e1:	89 c6                	mov    esi,eax
c001e5e3:	89 d1                	mov    ecx,edx
c001e5e5:	39 d3                	cmp    ebx,edx
c001e5e7:	72 27                	jb     c001e610 <__moddi3+0x170>
c001e5e9:	74 21                	je     c001e60c <__moddi3+0x16c>
c001e5eb:	29 f5                	sub    ebp,esi
c001e5ed:	19 cb                	sbb    ebx,ecx
c001e5ef:	89 de                	mov    esi,ebx
c001e5f1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e5f5:	d3 e6                	shl    esi,cl
c001e5f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e5fb:	89 f9                	mov    ecx,edi
c001e5fd:	d3 ed                	shr    ebp,cl
c001e5ff:	09 ee                	or     esi,ebp
c001e601:	89 f0                	mov    eax,esi
c001e603:	d3 eb                	shr    ebx,cl
c001e605:	89 da                	mov    edx,ebx
c001e607:	e9 e8 fe ff ff       	jmp    c001e4f4 <__moddi3+0x54>
c001e60c:	39 c5                	cmp    ebp,eax
c001e60e:	73 db                	jae    c001e5eb <__moddi3+0x14b>
c001e610:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e614:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e618:	89 d1                	mov    ecx,edx
c001e61a:	89 c6                	mov    esi,eax
c001e61c:	eb cd                	jmp    c001e5eb <__moddi3+0x14b>
c001e61e:	66 90                	xchg   ax,ax

c001e620 <__udivdi3>:
c001e620:	55                   	push   ebp
c001e621:	57                   	push   edi
c001e622:	56                   	push   esi
c001e623:	53                   	push   ebx
c001e624:	83 ec 1c             	sub    esp,0x1c
c001e627:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e62b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e62f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e633:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e637:	85 d2                	test   edx,edx
c001e639:	75 41                	jne    c001e67c <__udivdi3+0x5c>
c001e63b:	39 f7                	cmp    edi,esi
c001e63d:	76 15                	jbe    c001e654 <__udivdi3+0x34>
c001e63f:	89 e8                	mov    eax,ebp
c001e641:	89 f2                	mov    edx,esi
c001e643:	f7 f7                	div    edi
c001e645:	31 db                	xor    ebx,ebx
c001e647:	89 da                	mov    edx,ebx
c001e649:	83 c4 1c             	add    esp,0x1c
c001e64c:	5b                   	pop    ebx
c001e64d:	5e                   	pop    esi
c001e64e:	5f                   	pop    edi
c001e64f:	5d                   	pop    ebp
c001e650:	c3                   	ret    
c001e651:	8d 76 00             	lea    esi,[esi+0x0]
c001e654:	89 f9                	mov    ecx,edi
c001e656:	85 ff                	test   edi,edi
c001e658:	75 0b                	jne    c001e665 <__udivdi3+0x45>
c001e65a:	b8 01 00 00 00       	mov    eax,0x1
c001e65f:	31 d2                	xor    edx,edx
c001e661:	f7 f7                	div    edi
c001e663:	89 c1                	mov    ecx,eax
c001e665:	31 d2                	xor    edx,edx
c001e667:	89 f0                	mov    eax,esi
c001e669:	f7 f1                	div    ecx
c001e66b:	89 c3                	mov    ebx,eax
c001e66d:	89 e8                	mov    eax,ebp
c001e66f:	f7 f1                	div    ecx
c001e671:	89 da                	mov    edx,ebx
c001e673:	83 c4 1c             	add    esp,0x1c
c001e676:	5b                   	pop    ebx
c001e677:	5e                   	pop    esi
c001e678:	5f                   	pop    edi
c001e679:	5d                   	pop    ebp
c001e67a:	c3                   	ret    
c001e67b:	90                   	nop
c001e67c:	39 f2                	cmp    edx,esi
c001e67e:	77 1c                	ja     c001e69c <__udivdi3+0x7c>
c001e680:	0f bd da             	bsr    ebx,edx
c001e683:	83 f3 1f             	xor    ebx,0x1f
c001e686:	75 24                	jne    c001e6ac <__udivdi3+0x8c>
c001e688:	39 f2                	cmp    edx,esi
c001e68a:	72 08                	jb     c001e694 <__udivdi3+0x74>
c001e68c:	39 ef                	cmp    edi,ebp
c001e68e:	0f 87 84 00 00 00    	ja     c001e718 <__udivdi3+0xf8>
c001e694:	b8 01 00 00 00       	mov    eax,0x1
c001e699:	eb ac                	jmp    c001e647 <__udivdi3+0x27>
c001e69b:	90                   	nop
c001e69c:	31 db                	xor    ebx,ebx
c001e69e:	31 c0                	xor    eax,eax
c001e6a0:	89 da                	mov    edx,ebx
c001e6a2:	83 c4 1c             	add    esp,0x1c
c001e6a5:	5b                   	pop    ebx
c001e6a6:	5e                   	pop    esi
c001e6a7:	5f                   	pop    edi
c001e6a8:	5d                   	pop    ebp
c001e6a9:	c3                   	ret    
c001e6aa:	66 90                	xchg   ax,ax
c001e6ac:	b8 20 00 00 00       	mov    eax,0x20
c001e6b1:	29 d8                	sub    eax,ebx
c001e6b3:	88 d9                	mov    cl,bl
c001e6b5:	d3 e2                	shl    edx,cl
c001e6b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e6bb:	89 fa                	mov    edx,edi
c001e6bd:	88 c1                	mov    cl,al
c001e6bf:	d3 ea                	shr    edx,cl
c001e6c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e6c5:	09 d1                	or     ecx,edx
c001e6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e6cb:	88 d9                	mov    cl,bl
c001e6cd:	d3 e7                	shl    edi,cl
c001e6cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e6d3:	89 f7                	mov    edi,esi
c001e6d5:	88 c1                	mov    cl,al
c001e6d7:	d3 ef                	shr    edi,cl
c001e6d9:	88 d9                	mov    cl,bl
c001e6db:	d3 e6                	shl    esi,cl
c001e6dd:	89 ea                	mov    edx,ebp
c001e6df:	88 c1                	mov    cl,al
c001e6e1:	d3 ea                	shr    edx,cl
c001e6e3:	09 d6                	or     esi,edx
c001e6e5:	89 f0                	mov    eax,esi
c001e6e7:	89 fa                	mov    edx,edi
c001e6e9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e6ed:	89 d7                	mov    edi,edx
c001e6ef:	89 c6                	mov    esi,eax
c001e6f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e6f5:	39 d7                	cmp    edi,edx
c001e6f7:	72 13                	jb     c001e70c <__udivdi3+0xec>
c001e6f9:	74 09                	je     c001e704 <__udivdi3+0xe4>
c001e6fb:	89 f0                	mov    eax,esi
c001e6fd:	31 db                	xor    ebx,ebx
c001e6ff:	e9 43 ff ff ff       	jmp    c001e647 <__udivdi3+0x27>
c001e704:	88 d9                	mov    cl,bl
c001e706:	d3 e5                	shl    ebp,cl
c001e708:	39 c5                	cmp    ebp,eax
c001e70a:	73 ef                	jae    c001e6fb <__udivdi3+0xdb>
c001e70c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e70f:	31 db                	xor    ebx,ebx
c001e711:	e9 31 ff ff ff       	jmp    c001e647 <__udivdi3+0x27>
c001e716:	66 90                	xchg   ax,ax
c001e718:	31 c0                	xor    eax,eax
c001e71a:	e9 28 ff ff ff       	jmp    c001e647 <__udivdi3+0x27>
c001e71f:	90                   	nop

c001e720 <__umoddi3>:
c001e720:	55                   	push   ebp
c001e721:	57                   	push   edi
c001e722:	56                   	push   esi
c001e723:	53                   	push   ebx
c001e724:	83 ec 1c             	sub    esp,0x1c
c001e727:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e72b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e72f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e733:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e737:	89 da                	mov    edx,ebx
c001e739:	85 c0                	test   eax,eax
c001e73b:	75 37                	jne    c001e774 <__umoddi3+0x54>
c001e73d:	39 df                	cmp    edi,ebx
c001e73f:	76 13                	jbe    c001e754 <__umoddi3+0x34>
c001e741:	89 f0                	mov    eax,esi
c001e743:	f7 f7                	div    edi
c001e745:	89 d0                	mov    eax,edx
c001e747:	31 d2                	xor    edx,edx
c001e749:	83 c4 1c             	add    esp,0x1c
c001e74c:	5b                   	pop    ebx
c001e74d:	5e                   	pop    esi
c001e74e:	5f                   	pop    edi
c001e74f:	5d                   	pop    ebp
c001e750:	c3                   	ret    
c001e751:	8d 76 00             	lea    esi,[esi+0x0]
c001e754:	89 fd                	mov    ebp,edi
c001e756:	85 ff                	test   edi,edi
c001e758:	75 0b                	jne    c001e765 <__umoddi3+0x45>
c001e75a:	b8 01 00 00 00       	mov    eax,0x1
c001e75f:	31 d2                	xor    edx,edx
c001e761:	f7 f7                	div    edi
c001e763:	89 c5                	mov    ebp,eax
c001e765:	89 d8                	mov    eax,ebx
c001e767:	31 d2                	xor    edx,edx
c001e769:	f7 f5                	div    ebp
c001e76b:	89 f0                	mov    eax,esi
c001e76d:	f7 f5                	div    ebp
c001e76f:	89 d0                	mov    eax,edx
c001e771:	eb d4                	jmp    c001e747 <__umoddi3+0x27>
c001e773:	90                   	nop
c001e774:	89 f1                	mov    ecx,esi
c001e776:	39 d8                	cmp    eax,ebx
c001e778:	76 0a                	jbe    c001e784 <__umoddi3+0x64>
c001e77a:	89 f0                	mov    eax,esi
c001e77c:	83 c4 1c             	add    esp,0x1c
c001e77f:	5b                   	pop    ebx
c001e780:	5e                   	pop    esi
c001e781:	5f                   	pop    edi
c001e782:	5d                   	pop    ebp
c001e783:	c3                   	ret    
c001e784:	0f bd e8             	bsr    ebp,eax
c001e787:	83 f5 1f             	xor    ebp,0x1f
c001e78a:	75 1c                	jne    c001e7a8 <__umoddi3+0x88>
c001e78c:	39 d8                	cmp    eax,ebx
c001e78e:	72 04                	jb     c001e794 <__umoddi3+0x74>
c001e790:	39 f7                	cmp    edi,esi
c001e792:	77 08                	ja     c001e79c <__umoddi3+0x7c>
c001e794:	89 da                	mov    edx,ebx
c001e796:	29 fe                	sub    esi,edi
c001e798:	19 c2                	sbb    edx,eax
c001e79a:	89 f1                	mov    ecx,esi
c001e79c:	89 c8                	mov    eax,ecx
c001e79e:	83 c4 1c             	add    esp,0x1c
c001e7a1:	5b                   	pop    ebx
c001e7a2:	5e                   	pop    esi
c001e7a3:	5f                   	pop    edi
c001e7a4:	5d                   	pop    ebp
c001e7a5:	c3                   	ret    
c001e7a6:	66 90                	xchg   ax,ax
c001e7a8:	ba 20 00 00 00       	mov    edx,0x20
c001e7ad:	29 ea                	sub    edx,ebp
c001e7af:	89 e9                	mov    ecx,ebp
c001e7b1:	d3 e0                	shl    eax,cl
c001e7b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7b7:	89 f8                	mov    eax,edi
c001e7b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e7bd:	88 d1                	mov    cl,dl
c001e7bf:	d3 e8                	shr    eax,cl
c001e7c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7c5:	09 c1                	or     ecx,eax
c001e7c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e7cb:	89 e9                	mov    ecx,ebp
c001e7cd:	d3 e7                	shl    edi,cl
c001e7cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e7d3:	89 d8                	mov    eax,ebx
c001e7d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e7d9:	88 d1                	mov    cl,dl
c001e7db:	d3 e8                	shr    eax,cl
c001e7dd:	89 c7                	mov    edi,eax
c001e7df:	89 e9                	mov    ecx,ebp
c001e7e1:	d3 e3                	shl    ebx,cl
c001e7e3:	89 f0                	mov    eax,esi
c001e7e5:	88 d1                	mov    cl,dl
c001e7e7:	d3 e8                	shr    eax,cl
c001e7e9:	09 d8                	or     eax,ebx
c001e7eb:	89 e9                	mov    ecx,ebp
c001e7ed:	d3 e6                	shl    esi,cl
c001e7ef:	89 f3                	mov    ebx,esi
c001e7f1:	89 fa                	mov    edx,edi
c001e7f3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e7f7:	89 d1                	mov    ecx,edx
c001e7f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e7fd:	89 c6                	mov    esi,eax
c001e7ff:	89 d7                	mov    edi,edx
c001e801:	39 d1                	cmp    ecx,edx
c001e803:	72 27                	jb     c001e82c <__umoddi3+0x10c>
c001e805:	74 21                	je     c001e828 <__umoddi3+0x108>
c001e807:	89 ca                	mov    edx,ecx
c001e809:	29 f3                	sub    ebx,esi
c001e80b:	19 fa                	sbb    edx,edi
c001e80d:	89 d0                	mov    eax,edx
c001e80f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e813:	d3 e0                	shl    eax,cl
c001e815:	89 e9                	mov    ecx,ebp
c001e817:	d3 eb                	shr    ebx,cl
c001e819:	09 d8                	or     eax,ebx
c001e81b:	d3 ea                	shr    edx,cl
c001e81d:	83 c4 1c             	add    esp,0x1c
c001e820:	5b                   	pop    ebx
c001e821:	5e                   	pop    esi
c001e822:	5f                   	pop    edi
c001e823:	5d                   	pop    ebp
c001e824:	c3                   	ret    
c001e825:	8d 76 00             	lea    esi,[esi+0x0]
c001e828:	39 c3                	cmp    ebx,eax
c001e82a:	73 db                	jae    c001e807 <__umoddi3+0xe7>
c001e82c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e830:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e834:	89 d7                	mov    edi,edx
c001e836:	89 c6                	mov    esi,eax
c001e838:	eb cd                	jmp    c001e807 <__umoddi3+0xe7>

Disassembly of section .init:

c001e83a <_init>:
c001e83a:	55                   	push   ebp
c001e83b:	89 e5                	mov    ebp,esp
c001e83d:	e8 b2 18 fe ff       	call   c00000f4 <frame_dummy>
c001e842:	e8 e5 fa ff ff       	call   c001e32c <__do_global_ctors_aux>
c001e847:	5d                   	pop    ebp
c001e848:	c3                   	ret    

Disassembly of section .fini:

c001e849 <_fini>:
c001e849:	55                   	push   ebp
c001e84a:	89 e5                	mov    ebp,esp
c001e84c:	e8 33 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e851:	5d                   	pop    ebp
c001e852:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e854 <Computer::~Computer()>:
c001e854:	83 ec 0c             	sub    esp,0xc
c001e857:	ba 74 fb 01 c0       	mov    edx,0xc001fb74
c001e85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e860:	89 10                	mov    DWORD PTR [eax],edx
c001e862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e866:	83 ec 0c             	sub    esp,0xc
c001e869:	50                   	push   eax
c001e86a:	e8 77 d4 fe ff       	call   c000bce6 <Device::~Device()>
c001e86f:	83 c4 10             	add    esp,0x10
c001e872:	90                   	nop
c001e873:	83 c4 0c             	add    esp,0xc
c001e876:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e878 <Computer::~Computer()>:
c001e878:	83 ec 0c             	sub    esp,0xc
c001e87b:	83 ec 0c             	sub    esp,0xc
c001e87e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e882:	e8 cd ff ff ff       	call   c001e854 <Computer::~Computer()>
c001e887:	83 c4 10             	add    esp,0x10
c001e88a:	83 ec 08             	sub    esp,0x8
c001e88d:	68 70 01 00 00       	push   0x170
c001e892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e896:	e8 ea bf fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001e89b:	83 c4 10             	add    esp,0x10
c001e89e:	83 c4 0c             	add    esp,0xc
c001e8a1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e8a2 <idleCommon()>:
c001e8a2:	83 ec 0c             	sub    esp,0xc
c001e8a5:	fa                   	cli    
c001e8a6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e8ac:	e8 97 67 ff ff       	call   c0015048 <schedule()>
c001e8b1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e8b6:	48                   	dec    eax
c001e8b7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e8bc:	75 01                	jne    c001e8bf <idleCommon()+0x1d>
c001e8be:	fb                   	sti    
c001e8bf:	83 c4 0c             	add    esp,0xc
c001e8c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e8c4 <LinkedList<UnixFile>::~LinkedList()>:
c001e8c4:	90                   	nop
c001e8c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e8c6 <LinkedList<UnixFile>::LinkedList()>:
c001e8c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e906:	90                   	nop
c001e907:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e908 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e908:	83 ec 0c             	sub    esp,0xc
c001e90b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e910:	75 10                	jne    c001e922 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e912:	83 ec 0c             	sub    esp,0xc
c001e915:	68 88 fd 01 c0       	push   0xc001fd88
c001e91a:	e8 2e 1f ff ff       	call   c001084d <KePanic(char const*)>
c001e91f:	83 c4 10             	add    esp,0x10
c001e922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e926:	8b 00                	mov    eax,DWORD PTR [eax]
c001e928:	85 c0                	test   eax,eax
c001e92a:	74 34                	je     c001e960 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e930:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e933:	85 c0                	test   eax,eax
c001e935:	74 29                	je     c001e960 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e93e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e942:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e949:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e94d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e954:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e957:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e95e:	eb 65                	jmp    c001e9c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e964:	8b 00                	mov    eax,DWORD PTR [eax]
c001e966:	85 c0                	test   eax,eax
c001e968:	75 4b                	jne    c001e9b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e971:	85 c0                	test   eax,eax
c001e973:	75 40                	jne    c001e9b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e979:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e97d:	89 10                	mov    DWORD PTR [eax],edx
c001e97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e983:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e987:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e991:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e99f:	85 c0                	test   eax,eax
c001e9a1:	74 22                	je     c001e9c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9a3:	83 ec 0c             	sub    esp,0xc
c001e9a6:	68 aa fd 01 c0       	push   0xc001fdaa
c001e9ab:	e8 9d 1e ff ff       	call   c001084d <KePanic(char const*)>
c001e9b0:	83 c4 10             	add    esp,0x10
c001e9b3:	eb 10                	jmp    c001e9c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9b5:	83 ec 0c             	sub    esp,0xc
c001e9b8:	68 b4 fd 01 c0       	push   0xc001fdb4
c001e9bd:	e8 8b 1e ff ff       	call   c001084d <KePanic(char const*)>
c001e9c2:	83 c4 10             	add    esp,0x10
c001e9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9cc:	8d 50 01             	lea    edx,[eax+0x1]
c001e9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9d6:	90                   	nop
c001e9d7:	83 c4 0c             	add    esp,0xc
c001e9da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e9dc <LinkedList<UnixFile>::getFirstElement()>:
c001e9dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e9e4 <LinkedList<UnixFile>::removeFirst()>:
c001e9e4:	83 ec 0c             	sub    esp,0xc
c001e9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ed:	85 c0                	test   eax,eax
c001e9ef:	75 12                	jne    c001ea03 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e9f1:	83 ec 0c             	sub    esp,0xc
c001e9f4:	68 c0 fd 01 c0       	push   0xc001fdc0
c001e9f9:	e8 4f 1e ff ff       	call   c001084d <KePanic(char const*)>
c001e9fe:	83 c4 10             	add    esp,0x10
c001ea01:	eb 7e                	jmp    c001ea81 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ea03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea0d:	85 c0                	test   eax,eax
c001ea0f:	74 10                	je     c001ea21 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ea11:	83 ec 0c             	sub    esp,0xc
c001ea14:	68 0b fe 01 c0       	push   0xc001fe0b
c001ea19:	e8 2f 1e ff ff       	call   c001084d <KePanic(char const*)>
c001ea1e:	83 c4 10             	add    esp,0x10
c001ea21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea25:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea2a:	85 c0                	test   eax,eax
c001ea2c:	75 33                	jne    c001ea61 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ea2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea4a:	83 f8 01             	cmp    eax,0x1
c001ea4d:	74 21                	je     c001ea70 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea4f:	83 ec 0c             	sub    esp,0xc
c001ea52:	68 e4 fd 01 c0       	push   0xc001fde4
c001ea57:	e8 f1 1d ff ff       	call   c001084d <KePanic(char const*)>
c001ea5c:	83 c4 10             	add    esp,0x10
c001ea5f:	eb 0f                	jmp    c001ea70 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea65:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea67:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ea6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6e:	89 10                	mov    DWORD PTR [eax],edx
c001ea70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea77:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea81:	83 c4 0c             	add    esp,0xc
c001ea84:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ea86 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ea86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea8d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ea8e <DriverlessDevice::~DriverlessDevice()>:
c001ea8e:	ba 9c 04 02 c0       	mov    edx,0xc002049c
c001ea93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea97:	89 10                	mov    DWORD PTR [eax],edx
c001ea99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea9d:	50                   	push   eax
c001ea9e:	e8 43 d2 fe ff       	call   c000bce6 <Device::~Device()>
c001eaa3:	83 c4 04             	add    esp,0x4
c001eaa6:	90                   	nop
c001eaa7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001eaa8 <DriverlessDevice::~DriverlessDevice()>:
c001eaa8:	83 ec 0c             	sub    esp,0xc
c001eaab:	83 ec 0c             	sub    esp,0xc
c001eaae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eab2:	e8 d7 ff ff ff       	call   c001ea8e <DriverlessDevice::~DriverlessDevice()>
c001eab7:	83 c4 10             	add    esp,0x10
c001eaba:	83 ec 08             	sub    esp,0x8
c001eabd:	68 58 01 00 00       	push   0x158
c001eac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac6:	e8 ba bd fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001eacb:	83 c4 10             	add    esp,0x10
c001eace:	83 c4 0c             	add    esp,0xc
c001ead1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ead2 <LinkedList<Device>::addElement(Device*)>:
c001ead2:	83 ec 0c             	sub    esp,0xc
c001ead5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eada:	75 10                	jne    c001eaec <LinkedList<Device>::addElement(Device*)+0x1a>
c001eadc:	83 ec 0c             	sub    esp,0xc
c001eadf:	68 88 fd 01 c0       	push   0xc001fd88
c001eae4:	e8 64 1d ff ff       	call   c001084d <KePanic(char const*)>
c001eae9:	83 c4 10             	add    esp,0x10
c001eaec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaf2:	85 c0                	test   eax,eax
c001eaf4:	74 3a                	je     c001eb30 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eaf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eafa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eafd:	85 c0                	test   eax,eax
c001eaff:	74 2f                	je     c001eb30 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb0c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb1a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb24:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb2e:	eb 68                	jmp    c001eb98 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb34:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb36:	85 c0                	test   eax,eax
c001eb38:	75 4e                	jne    c001eb88 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb41:	85 c0                	test   eax,eax
c001eb43:	75 43                	jne    c001eb88 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb4d:	89 10                	mov    DWORD PTR [eax],edx
c001eb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb61:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb72:	85 c0                	test   eax,eax
c001eb74:	74 22                	je     c001eb98 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb76:	83 ec 0c             	sub    esp,0xc
c001eb79:	68 aa fd 01 c0       	push   0xc001fdaa
c001eb7e:	e8 ca 1c ff ff       	call   c001084d <KePanic(char const*)>
c001eb83:	83 c4 10             	add    esp,0x10
c001eb86:	eb 10                	jmp    c001eb98 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb88:	83 ec 0c             	sub    esp,0xc
c001eb8b:	68 b4 fd 01 c0       	push   0xc001fdb4
c001eb90:	e8 b8 1c ff ff       	call   c001084d <KePanic(char const*)>
c001eb95:	83 c4 10             	add    esp,0x10
c001eb98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb9f:	8d 50 01             	lea    edx,[eax+0x1]
c001eba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eba9:	90                   	nop
c001ebaa:	83 c4 0c             	add    esp,0xc
c001ebad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ebae <LinkedList<Device>::LinkedList()>:
c001ebae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebe3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebe7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebee:	90                   	nop
c001ebef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ebf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ebf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf6:	85 c0                	test   eax,eax
c001ebf8:	75 0e                	jne    c001ec08 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec01:	85 c0                	test   eax,eax
c001ec03:	75 03                	jne    c001ec08 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec05:	b0 01                	mov    al,0x1
c001ec07:	c3                   	ret    
c001ec08:	b0 00                	mov    al,0x0
c001ec0a:	90                   	nop
c001ec0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ec0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ec0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ec14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ec14:	83 ec 0c             	sub    esp,0xc
c001ec17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec1d:	85 c0                	test   eax,eax
c001ec1f:	75 17                	jne    c001ec38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ec21:	83 ec 0c             	sub    esp,0xc
c001ec24:	68 c0 fd 01 c0       	push   0xc001fdc0
c001ec29:	e8 1f 1c ff ff       	call   c001084d <KePanic(char const*)>
c001ec2e:	83 c4 10             	add    esp,0x10
c001ec31:	e9 96 00 00 00       	jmp    c001eccc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ec36:	66 90                	xchg   ax,ax
c001ec38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec3f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec42:	85 c0                	test   eax,eax
c001ec44:	0f 95 c0             	setne  al
c001ec47:	0f b6 c0             	movzx  eax,al
c001ec4a:	85 c0                	test   eax,eax
c001ec4c:	74 12                	je     c001ec60 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ec4e:	83 ec 0c             	sub    esp,0xc
c001ec51:	68 0b fe 01 c0       	push   0xc001fe0b
c001ec56:	e8 f2 1b ff ff       	call   c001084d <KePanic(char const*)>
c001ec5b:	83 c4 10             	add    esp,0x10
c001ec5e:	66 90                	xchg   ax,ax
c001ec60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec64:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec66:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec69:	85 c0                	test   eax,eax
c001ec6b:	0f 94 c0             	sete   al
c001ec6e:	0f b6 c0             	movzx  eax,al
c001ec71:	85 c0                	test   eax,eax
c001ec73:	74 33                	je     c001eca8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ec75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec79:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec83:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec91:	83 f8 01             	cmp    eax,0x1
c001ec94:	74 22                	je     c001ecb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec96:	83 ec 0c             	sub    esp,0xc
c001ec99:	68 e4 fd 01 c0       	push   0xc001fde4
c001ec9e:	e8 aa 1b ff ff       	call   c001084d <KePanic(char const*)>
c001eca3:	83 c4 10             	add    esp,0x10
c001eca6:	eb 10                	jmp    c001ecb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001eca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecac:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ecb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb5:	89 10                	mov    DWORD PTR [eax],edx
c001ecb7:	90                   	nop
c001ecb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecbf:	8d 50 ff             	lea    edx,[eax-0x1]
c001ecc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ecc9:	8d 76 00             	lea    esi,[esi+0x0]
c001eccc:	83 c4 0c             	add    esp,0xc
c001eccf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ecd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ecd0:	83 ec 0c             	sub    esp,0xc
c001ecd3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ecd8:	75 12                	jne    c001ecec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ecda:	83 ec 0c             	sub    esp,0xc
c001ecdd:	68 88 fd 01 c0       	push   0xc001fd88
c001ece2:	e8 66 1b ff ff       	call   c001084d <KePanic(char const*)>
c001ece7:	83 c4 10             	add    esp,0x10
c001ecea:	66 90                	xchg   ax,ax
c001ecec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecf2:	85 c0                	test   eax,eax
c001ecf4:	74 36                	je     c001ed2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ecf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecfd:	85 c0                	test   eax,eax
c001ecff:	74 2b                	je     c001ed2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed0c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ed0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed21:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed28:	eb 6a                	jmp    c001ed94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed2a:	66 90                	xchg   ax,ax
c001ed2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed32:	85 c0                	test   eax,eax
c001ed34:	75 4e                	jne    c001ed84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed3d:	85 c0                	test   eax,eax
c001ed3f:	75 43                	jne    c001ed84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed49:	89 10                	mov    DWORD PTR [eax],edx
c001ed4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed5d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed6b:	85 c0                	test   eax,eax
c001ed6d:	74 25                	je     c001ed94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed6f:	83 ec 0c             	sub    esp,0xc
c001ed72:	68 aa fd 01 c0       	push   0xc001fdaa
c001ed77:	e8 d1 1a ff ff       	call   c001084d <KePanic(char const*)>
c001ed7c:	83 c4 10             	add    esp,0x10
c001ed7f:	eb 13                	jmp    c001ed94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed81:	8d 76 00             	lea    esi,[esi+0x0]
c001ed84:	83 ec 0c             	sub    esp,0xc
c001ed87:	68 b4 fd 01 c0       	push   0xc001fdb4
c001ed8c:	e8 bc 1a ff ff       	call   c001084d <KePanic(char const*)>
c001ed91:	83 c4 10             	add    esp,0x10
c001ed94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed9b:	8d 50 01             	lea    edx,[eax+0x1]
c001ed9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eda5:	90                   	nop
c001eda6:	83 c4 0c             	add    esp,0xc
c001eda9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001edac <ACPI::~ACPI()>:
c001edac:	83 ec 0c             	sub    esp,0xc
c001edaf:	ba a0 0a 02 c0       	mov    edx,0xc0020aa0
c001edb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb8:	89 10                	mov    DWORD PTR [eax],edx
c001edba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbe:	83 ec 0c             	sub    esp,0xc
c001edc1:	50                   	push   eax
c001edc2:	e8 1f cf fe ff       	call   c000bce6 <Device::~Device()>
c001edc7:	83 c4 10             	add    esp,0x10
c001edca:	90                   	nop
c001edcb:	83 c4 0c             	add    esp,0xc
c001edce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001edd0 <ACPI::~ACPI()>:
c001edd0:	83 ec 0c             	sub    esp,0xc
c001edd3:	83 ec 0c             	sub    esp,0xc
c001edd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edda:	e8 cd ff ff ff       	call   c001edac <ACPI::~ACPI()>
c001eddf:	83 c4 10             	add    esp,0x10
c001ede2:	83 ec 08             	sub    esp,0x8
c001ede5:	68 64 12 00 00       	push   0x1264
c001edea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edee:	e8 92 ba fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001edf3:	83 c4 10             	add    esp,0x10
c001edf6:	83 c4 0c             	add    esp,0xc
c001edf9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001edfc <LinkedList<Device>::~LinkedList()>:
c001edfc:	90                   	nop
c001edfd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ee00 <LinkedList<Device>::isEmpty()>:
c001ee00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee04:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee06:	85 c0                	test   eax,eax
c001ee08:	75 0e                	jne    c001ee18 <LinkedList<Device>::isEmpty()+0x18>
c001ee0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee11:	85 c0                	test   eax,eax
c001ee13:	75 03                	jne    c001ee18 <LinkedList<Device>::isEmpty()+0x18>
c001ee15:	b0 01                	mov    al,0x1
c001ee17:	c3                   	ret    
c001ee18:	b0 00                	mov    al,0x0
c001ee1a:	90                   	nop
c001ee1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ee1c <LinkedList<Device>::getFirstElement()>:
c001ee1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ee24 <LinkedList<Device>::removeFirst()>:
c001ee24:	83 ec 0c             	sub    esp,0xc
c001ee27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee2d:	85 c0                	test   eax,eax
c001ee2f:	75 17                	jne    c001ee48 <LinkedList<Device>::removeFirst()+0x24>
c001ee31:	83 ec 0c             	sub    esp,0xc
c001ee34:	68 c0 fd 01 c0       	push   0xc001fdc0
c001ee39:	e8 0f 1a ff ff       	call   c001084d <KePanic(char const*)>
c001ee3e:	83 c4 10             	add    esp,0x10
c001ee41:	e9 92 00 00 00       	jmp    c001eed8 <LinkedList<Device>::removeFirst()+0xb4>
c001ee46:	66 90                	xchg   ax,ax
c001ee48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee4f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee55:	85 c0                	test   eax,eax
c001ee57:	74 13                	je     c001ee6c <LinkedList<Device>::removeFirst()+0x48>
c001ee59:	83 ec 0c             	sub    esp,0xc
c001ee5c:	68 0b fe 01 c0       	push   0xc001fe0b
c001ee61:	e8 e7 19 ff ff       	call   c001084d <KePanic(char const*)>
c001ee66:	83 c4 10             	add    esp,0x10
c001ee69:	8d 76 00             	lea    esi,[esi+0x0]
c001ee6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee70:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee72:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee78:	85 c0                	test   eax,eax
c001ee7a:	75 34                	jne    c001eeb0 <LinkedList<Device>::removeFirst()+0x8c>
c001ee7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee95:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee98:	83 f8 01             	cmp    eax,0x1
c001ee9b:	74 27                	je     c001eec4 <LinkedList<Device>::removeFirst()+0xa0>
c001ee9d:	83 ec 0c             	sub    esp,0xc
c001eea0:	68 e4 fd 01 c0       	push   0xc001fde4
c001eea5:	e8 a3 19 ff ff       	call   c001084d <KePanic(char const*)>
c001eeaa:	83 c4 10             	add    esp,0x10
c001eead:	eb 15                	jmp    c001eec4 <LinkedList<Device>::removeFirst()+0xa0>
c001eeaf:	90                   	nop
c001eeb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeb6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001eebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec0:	89 10                	mov    DWORD PTR [eax],edx
c001eec2:	66 90                	xchg   ax,ax
c001eec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eecb:	8d 50 ff             	lea    edx,[eax-0x1]
c001eece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eed5:	8d 76 00             	lea    esi,[esi+0x0]
c001eed8:	83 c4 0c             	add    esp,0xc
c001eedb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001eedc <CPU::~CPU()>:
c001eedc:	83 ec 0c             	sub    esp,0xc
c001eedf:	ba 3c 0c 02 c0       	mov    edx,0xc0020c3c
c001eee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee8:	89 10                	mov    DWORD PTR [eax],edx
c001eeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeee:	83 ec 0c             	sub    esp,0xc
c001eef1:	50                   	push   eax
c001eef2:	e8 ef cd fe ff       	call   c000bce6 <Device::~Device()>
c001eef7:	83 c4 10             	add    esp,0x10
c001eefa:	90                   	nop
c001eefb:	83 c4 0c             	add    esp,0xc
c001eefe:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ef00 <CPU::~CPU()>:
c001ef00:	83 ec 0c             	sub    esp,0xc
c001ef03:	83 ec 0c             	sub    esp,0xc
c001ef06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef0a:	e8 cd ff ff ff       	call   c001eedc <CPU::~CPU()>
c001ef0f:	83 c4 10             	add    esp,0x10
c001ef12:	83 ec 08             	sub    esp,0x8
c001ef15:	68 94 11 00 00       	push   0x1194
c001ef1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef1e:	e8 62 b9 fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001ef23:	83 c4 10             	add    esp,0x10
c001ef26:	83 c4 0c             	add    esp,0xc
c001ef29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ef2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ef2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef30:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ef33:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ef34 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ef34:	90                   	nop
c001ef35:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ef38 <ThreadControlBlock::ThreadControlBlock()>:
c001ef38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef3c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef47:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ef4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef52:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ef59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef5d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ef64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef68:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ef6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef73:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ef77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef7b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ef7f:	90                   	nop
c001ef80:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ef84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ef84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef88:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef9d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efbd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efc4:	90                   	nop
c001efc5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001efc6 <PCI::~PCI()>:
c001efc6:	83 ec 0c             	sub    esp,0xc
c001efc9:	ba a0 1a 02 c0       	mov    edx,0xc0021aa0
c001efce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd2:	89 10                	mov    DWORD PTR [eax],edx
c001efd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd8:	83 ec 0c             	sub    esp,0xc
c001efdb:	50                   	push   eax
c001efdc:	e8 97 c7 fe ff       	call   c000b778 <Bus::~Bus()>
c001efe1:	83 c4 10             	add    esp,0x10
c001efe4:	90                   	nop
c001efe5:	83 c4 0c             	add    esp,0xc
c001efe8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001efea <PCI::~PCI()>:
c001efea:	83 ec 0c             	sub    esp,0xc
c001efed:	83 ec 0c             	sub    esp,0xc
c001eff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff4:	e8 cd ff ff ff       	call   c001efc6 <PCI::~PCI()>
c001eff9:	83 c4 10             	add    esp,0x10
c001effc:	83 ec 08             	sub    esp,0x8
c001efff:	68 5c 01 00 00       	push   0x15c
c001f004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f008:	e8 78 b8 fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001f00d:	83 c4 10             	add    esp,0x10
c001f010:	83 c4 0c             	add    esp,0xc
c001f013:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f014 <IDE::~IDE()>:
c001f014:	83 ec 0c             	sub    esp,0xc
c001f017:	ba 54 1b 02 c0       	mov    edx,0xc0021b54
c001f01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f020:	89 10                	mov    DWORD PTR [eax],edx
c001f022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f026:	83 ec 0c             	sub    esp,0xc
c001f029:	50                   	push   eax
c001f02a:	e8 31 d1 fe ff       	call   c000c160 <HardDiskController::~HardDiskController()>
c001f02f:	83 c4 10             	add    esp,0x10
c001f032:	90                   	nop
c001f033:	83 c4 0c             	add    esp,0xc
c001f036:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f038 <IDE::~IDE()>:
c001f038:	83 ec 0c             	sub    esp,0xc
c001f03b:	83 ec 0c             	sub    esp,0xc
c001f03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f042:	e8 cd ff ff ff       	call   c001f014 <IDE::~IDE()>
c001f047:	83 c4 10             	add    esp,0x10
c001f04a:	83 ec 08             	sub    esp,0x8
c001f04d:	68 70 02 00 00       	push   0x270
c001f052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f056:	e8 2a b8 fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001f05b:	83 c4 10             	add    esp,0x10
c001f05e:	83 c4 0c             	add    esp,0xc
c001f061:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f062 <SATABus::~SATABus()>:
c001f062:	83 ec 0c             	sub    esp,0xc
c001f065:	ba a4 1b 02 c0       	mov    edx,0xc0021ba4
c001f06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06e:	89 10                	mov    DWORD PTR [eax],edx
c001f070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f074:	83 ec 0c             	sub    esp,0xc
c001f077:	50                   	push   eax
c001f078:	e8 e3 d0 fe ff       	call   c000c160 <HardDiskController::~HardDiskController()>
c001f07d:	83 c4 10             	add    esp,0x10
c001f080:	90                   	nop
c001f081:	83 c4 0c             	add    esp,0xc
c001f084:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f086 <SATABus::~SATABus()>:
c001f086:	83 ec 0c             	sub    esp,0xc
c001f089:	83 ec 0c             	sub    esp,0xc
c001f08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f090:	e8 cd ff ff ff       	call   c001f062 <SATABus::~SATABus()>
c001f095:	83 c4 10             	add    esp,0x10
c001f098:	83 ec 08             	sub    esp,0x8
c001f09b:	68 64 01 00 00       	push   0x164
c001f0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a4:	e8 dc b7 fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001f0a9:	83 c4 10             	add    esp,0x10
c001f0ac:	83 c4 0c             	add    esp,0xc
c001f0af:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f0b0 <ATA::~ATA()>:
c001f0b0:	83 ec 0c             	sub    esp,0xc
c001f0b3:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001f0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0bc:	89 10                	mov    DWORD PTR [eax],edx
c001f0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c2:	83 ec 0c             	sub    esp,0xc
c001f0c5:	50                   	push   eax
c001f0c6:	e8 77 d1 fe ff       	call   c000c242 <PhysicalDisk::~PhysicalDisk()>
c001f0cb:	83 c4 10             	add    esp,0x10
c001f0ce:	90                   	nop
c001f0cf:	83 c4 0c             	add    esp,0xc
c001f0d2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f0d4 <ATA::~ATA()>:
c001f0d4:	83 ec 0c             	sub    esp,0xc
c001f0d7:	83 ec 0c             	sub    esp,0xc
c001f0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0de:	e8 cd ff ff ff       	call   c001f0b0 <ATA::~ATA()>
c001f0e3:	83 c4 10             	add    esp,0x10
c001f0e6:	83 ec 08             	sub    esp,0x8
c001f0e9:	68 7c 01 00 00       	push   0x17c
c001f0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0f2:	e8 8e b7 fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001f0f7:	83 c4 10             	add    esp,0x10
c001f0fa:	83 c4 0c             	add    esp,0xc
c001f0fd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f0fe <ATAPI::~ATAPI()>:
c001f0fe:	83 ec 0c             	sub    esp,0xc
c001f101:	ba 2c 1c 02 c0       	mov    edx,0xc0021c2c
c001f106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10a:	89 10                	mov    DWORD PTR [eax],edx
c001f10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f110:	83 ec 0c             	sub    esp,0xc
c001f113:	50                   	push   eax
c001f114:	e8 29 d1 fe ff       	call   c000c242 <PhysicalDisk::~PhysicalDisk()>
c001f119:	83 c4 10             	add    esp,0x10
c001f11c:	90                   	nop
c001f11d:	83 c4 0c             	add    esp,0xc
c001f120:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f122 <ATAPI::~ATAPI()>:
c001f122:	83 ec 0c             	sub    esp,0xc
c001f125:	83 ec 0c             	sub    esp,0xc
c001f128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f12c:	e8 cd ff ff ff       	call   c001f0fe <ATAPI::~ATAPI()>
c001f131:	83 c4 10             	add    esp,0x10
c001f134:	83 ec 08             	sub    esp,0x8
c001f137:	68 84 01 00 00       	push   0x184
c001f13c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f140:	e8 40 b7 fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001f145:	83 c4 10             	add    esp,0x10
c001f148:	83 c4 0c             	add    esp,0xc
c001f14b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f14c <SATA::~SATA()>:
c001f14c:	83 ec 0c             	sub    esp,0xc
c001f14f:	ba e0 1c 02 c0       	mov    edx,0xc0021ce0
c001f154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f158:	89 10                	mov    DWORD PTR [eax],edx
c001f15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15e:	83 ec 0c             	sub    esp,0xc
c001f161:	50                   	push   eax
c001f162:	e8 db d0 fe ff       	call   c000c242 <PhysicalDisk::~PhysicalDisk()>
c001f167:	83 c4 10             	add    esp,0x10
c001f16a:	90                   	nop
c001f16b:	83 c4 0c             	add    esp,0xc
c001f16e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f170 <SATA::~SATA()>:
c001f170:	83 ec 0c             	sub    esp,0xc
c001f173:	83 ec 0c             	sub    esp,0xc
c001f176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f17a:	e8 cd ff ff ff       	call   c001f14c <SATA::~SATA()>
c001f17f:	83 c4 10             	add    esp,0x10
c001f182:	83 ec 08             	sub    esp,0x8
c001f185:	68 7c 01 00 00       	push   0x17c
c001f18a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f18e:	e8 f2 b6 fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001f193:	83 c4 10             	add    esp,0x10
c001f196:	83 c4 0c             	add    esp,0xc
c001f199:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f19a <SATAPI::~SATAPI()>:
c001f19a:	83 ec 0c             	sub    esp,0xc
c001f19d:	ba 04 1e 02 c0       	mov    edx,0xc0021e04
c001f1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a6:	89 10                	mov    DWORD PTR [eax],edx
c001f1a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ac:	83 ec 0c             	sub    esp,0xc
c001f1af:	50                   	push   eax
c001f1b0:	e8 8d d0 fe ff       	call   c000c242 <PhysicalDisk::~PhysicalDisk()>
c001f1b5:	83 c4 10             	add    esp,0x10
c001f1b8:	90                   	nop
c001f1b9:	83 c4 0c             	add    esp,0xc
c001f1bc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f1be <SATAPI::~SATAPI()>:
c001f1be:	83 ec 0c             	sub    esp,0xc
c001f1c1:	83 ec 0c             	sub    esp,0xc
c001f1c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c8:	e8 cd ff ff ff       	call   c001f19a <SATAPI::~SATAPI()>
c001f1cd:	83 c4 10             	add    esp,0x10
c001f1d0:	83 ec 08             	sub    esp,0x8
c001f1d3:	68 84 01 00 00       	push   0x184
c001f1d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1dc:	e8 a4 b6 fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001f1e1:	83 c4 10             	add    esp,0x10
c001f1e4:	83 c4 0c             	add    esp,0xc
c001f1e7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f1e8 <IOAPIC::~IOAPIC()>:
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	ba 44 1e 02 c0       	mov    edx,0xc0021e44
c001f1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f4:	89 10                	mov    DWORD PTR [eax],edx
c001f1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1fa:	83 ec 0c             	sub    esp,0xc
c001f1fd:	50                   	push   eax
c001f1fe:	e8 e3 ca fe ff       	call   c000bce6 <Device::~Device()>
c001f203:	83 c4 10             	add    esp,0x10
c001f206:	90                   	nop
c001f207:	83 c4 0c             	add    esp,0xc
c001f20a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f20c <IOAPIC::~IOAPIC()>:
c001f20c:	83 ec 0c             	sub    esp,0xc
c001f20f:	83 ec 0c             	sub    esp,0xc
c001f212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f216:	e8 cd ff ff ff       	call   c001f1e8 <IOAPIC::~IOAPIC()>
c001f21b:	83 c4 10             	add    esp,0x10
c001f21e:	83 ec 08             	sub    esp,0x8
c001f221:	68 68 01 00 00       	push   0x168
c001f226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f22a:	e8 56 b6 fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001f22f:	83 c4 10             	add    esp,0x10
c001f232:	83 c4 0c             	add    esp,0xc
c001f235:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f238 <APICTimer::~APICTimer()>:
c001f238:	83 ec 0c             	sub    esp,0xc
c001f23b:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c001f240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f244:	89 10                	mov    DWORD PTR [eax],edx
c001f246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f24a:	83 ec 0c             	sub    esp,0xc
c001f24d:	50                   	push   eax
c001f24e:	e8 69 e5 fe ff       	call   c000d7bc <Timer::~Timer()>
c001f253:	83 c4 10             	add    esp,0x10
c001f256:	90                   	nop
c001f257:	83 c4 0c             	add    esp,0xc
c001f25a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f25c <APICTimer::~APICTimer()>:
c001f25c:	83 ec 0c             	sub    esp,0xc
c001f25f:	83 ec 0c             	sub    esp,0xc
c001f262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f266:	e8 cd ff ff ff       	call   c001f238 <APICTimer::~APICTimer()>
c001f26b:	83 c4 10             	add    esp,0x10
c001f26e:	83 ec 08             	sub    esp,0x8
c001f271:	68 60 01 00 00       	push   0x160
c001f276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f27a:	e8 06 b6 fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001f27f:	83 c4 10             	add    esp,0x10
c001f282:	83 c4 0c             	add    esp,0xc
c001f285:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f288 <PIT::~PIT()>:
c001f288:	83 ec 0c             	sub    esp,0xc
c001f28b:	ba dc 1e 02 c0       	mov    edx,0xc0021edc
c001f290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f294:	89 10                	mov    DWORD PTR [eax],edx
c001f296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f29a:	83 ec 0c             	sub    esp,0xc
c001f29d:	50                   	push   eax
c001f29e:	e8 19 e5 fe ff       	call   c000d7bc <Timer::~Timer()>
c001f2a3:	83 c4 10             	add    esp,0x10
c001f2a6:	90                   	nop
c001f2a7:	83 c4 0c             	add    esp,0xc
c001f2aa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f2ac <PIT::~PIT()>:
c001f2ac:	83 ec 0c             	sub    esp,0xc
c001f2af:	83 ec 0c             	sub    esp,0xc
c001f2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b6:	e8 cd ff ff ff       	call   c001f288 <PIT::~PIT()>
c001f2bb:	83 c4 10             	add    esp,0x10
c001f2be:	83 ec 08             	sub    esp,0x8
c001f2c1:	68 5c 01 00 00       	push   0x15c
c001f2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ca:	e8 b6 b5 fe ff       	call   c000a885 <operator delete(void*, unsigned long)>
c001f2cf:	83 c4 10             	add    esp,0x10
c001f2d2:	83 c4 0c             	add    esp,0xc
c001f2d5:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 2d 0d 02 c0       	mov    esi,0xc0020d2d
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 49 0d 02 c0       	mov    esi,0xc0020d49
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
