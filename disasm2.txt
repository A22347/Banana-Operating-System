
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 05 7b 00 00       	call   c0007b25 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 64 2e 02 c0       	mov    eax,0xc0022e64
c0000025:	3d 64 2e 02 c0       	cmp    eax,0xc0022e64
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 64 2e 02 c0       	push   0xc0022e64
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 64 2e 02 c0       	mov    eax,0xc0022e64
c0000051:	2d 64 2e 02 c0       	sub    eax,0xc0022e64
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 64 2e 02 c0       	push   0xc0022e64
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 7c f6 01 c0       	mov    ebx,0xc001f67c
c0000097:	81 eb 78 f6 01 c0    	sub    ebx,0xc001f678
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 78 f6 01 c0       	mov    esi,0xc001f678
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 64 2e 02 c0       	push   0xc0022e64
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 64 2e 02 c0       	push   0xc0022e64
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 f7 48 01 00       	call   c0014ba4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 2e a4 00 00       	call   c000a6f3 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 d5 48 01 00       	call   c0014ba4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 e2 4d 01 00       	call   c00150d0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 7d 54 01 00       	call   c0015774 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 a9 07 01 00       	jmp    c0010b28 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 80 f6 01 c0 02 	test   BYTE PTR [edx-0x3ffe0980],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 80 f6 01 c0 01 	test   BYTE PTR [edx-0x3ffe0980],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 80 f6 01 c0 08 	test   BYTE PTR [edx-0x3ffe0980],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 80 f6 01 c0 08 	test   BYTE PTR [edx-0x3ffe0980],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 80 f6 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0980],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 80 f6 01 c0 01 	test   BYTE PTR [edx-0x3ffe0980],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e2a:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 9b 6a 00 00       	call   c00079a0 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 f6 69 00 00       	call   c00079a0 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e0 69 00 00       	call   c00079a0 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 de 68 00 00       	call   c00079a0 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c00011af:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001206:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c000124f:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c000126a:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c0001324:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c000132a:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001331:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013f7:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013fd:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c0001404:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001552:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 84 f7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe087c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 fa 6e 01 00       	jmp    c0018cd4 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 24 6f 01 00       	jmp    c0018d14 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 45 6f 01 00       	jmp    c0018d54 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 e0 f8 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0720]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 e0 f8 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0720]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 74 1e 02 c0       	mov    edx,0xc0021e74
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 9c f7 01 c0       	mov    edx,0xc001f79c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 a2 f7 01 c0       	mov    eax,0xc001f7a2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 60 f8 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe07a0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 ab f7 01 c0       	mov    eax,0xc001f7ab
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 e0 f8 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0720]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 30 f8 01 c0       	mov    eax,0xc001f830
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 20 f8 01 c0       	mov    ebx,0xc001f820
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 00 f8 01 c0       	mov    eax,0xc001f800
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 10 f8 01 c0       	mov    eax,0xc001f810
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba b2 f7 01 c0       	mov    edx,0xc001f7b2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba be f7 01 c0       	mov    edx,0xc001f7be
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba d2 f7 01 c0       	mov    edx,0xc001f7d2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 68 1e 00 00       	call   c0007acb <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 60 1e 00 00       	call   c0007adb <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 00 fc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fc00
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 00 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc00
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 00 fa 01 c0       	mov    eax,0xc001fa00
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 40 f9 01 c0       	mov    eax,0xc001f940
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 00 f9 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0700]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 00 fd 01 c0       	push   0xc001fd00
c0006147:	e8 2c 35 01 00       	call   c0019678 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 0e fd 01 c0       	push   0xc001fd0e
c000617f:	e8 f4 34 01 00       	call   c0019678 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 5d 34 01 00       	call   c001961c <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 40 02 c0       	mov    eax,0xc0024020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 1d fd 01 c0       	push   0xc001fd1d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000657b:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c0006585:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c000659d:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006616:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c00066ad:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000670f:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000674c:	05 40 45 02 c0       	add    eax,0xc0024540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c000680c:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 20 fd 01 c0       	push   0xc001fd20
c000682f:	e8 44 2e 01 00       	call   c0019678 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 52 2e 01 00       	call   c0019694 <iso_kprintfd>
c0006842:	c7 04 24 25 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd25
c0006849:	e8 2a 2e 01 00       	call   c0019678 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006855:	e8 3a 2e 01 00       	call   c0019694 <iso_kprintfd>
c000685a:	c7 04 24 2b fd 01 c0 	mov    DWORD PTR [esp],0xc001fd2b
c0006861:	e8 12 2e 01 00       	call   c0019678 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c000686d:	e8 22 2e 01 00       	call   c0019694 <iso_kprintfd>
c0006872:	c7 04 24 31 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd31
c0006879:	e8 fa 2d 01 00       	call   c0019678 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006885:	e8 0a 2e 01 00       	call   c0019694 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068eb:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 1d fd 01 c0       	push   0xc001fd1d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a2a:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a30:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 3a fd 01 c0       	push   0xc001fd3a
c0006a52:	e8 21 2c 01 00       	call   c0019678 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a87:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 45 fd 01 c0       	push   0xc001fd45
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 4c fd 01 c0       	push   0xc001fd4c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b25:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b48:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 53 fd 01 c0       	push   0xc001fd53
c0006b69:	e8 0a 2b 01 00       	call   c0019678 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 5e fd 01 c0       	push   0xc001fd5e
c0006b84:	e8 ef 2a 01 00       	call   c0019678 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 45 02 c0       	push   0xc0024540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 18 0f 00 00       	call   c0007acb <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006bbf:	e8 07 0f 00 00       	call   c0007acb <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 f2 0e 00 00       	call   c0007acb <malloc>
c0006bd9:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 d9 0e 00 00       	call   c0007acb <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006c1f:	e8 b7 0e 00 00       	call   c0007adb <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 a9 0e 00 00       	call   c0007adb <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 8f 0e 00 00       	call   c0007adb <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 7a 0e 00 00       	call   c0007adb <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	83 ec 0c             	sub    esp,0xc
c0006c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006c92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c98:	50                   	push   eax
c0006c99:	e8 f4 54 00 00       	call   c000c192 <Device::closeAll()>
c0006c9e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca4:	83 c4 10             	add    esp,0x10
c0006ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ca9:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cad:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cb5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cbd:	5b                   	pop    ebx
c0006cbe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc1:	5e                   	pop    esi
c0006cc2:	5f                   	pop    edi
c0006cc3:	ff e0                	jmp    eax

c0006cc5 <Krnl::firstTask()>:
c0006cc5:	53                   	push   ebx
c0006cc6:	83 ec 14             	sub    esp,0x14
c0006cc9:	fb                   	sti    
c0006cca:	68 6f fd 01 c0       	push   0xc001fd6f
c0006ccf:	e8 b3 97 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c0006cd4:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cdb:	e8 eb 0d 00 00       	call   c0007acb <malloc>
c0006ce0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ce7:	89 c3                	mov    ebx,eax
c0006ce9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cee:	50                   	push   eax
c0006cef:	68 88 fd 01 c0       	push   0xc001fd88
c0006cf4:	6a 01                	push   0x1
c0006cf6:	53                   	push   ebx
c0006cf7:	e8 00 e2 00 00       	call   c0014efc <Process::Process(bool, char const*, Process*, char**)>
c0006cfc:	83 c4 20             	add    esp,0x20
c0006cff:	68 ff 00 00 00       	push   0xff
c0006d04:	6a 00                	push   0x0
c0006d06:	68 15 75 00 c0       	push   0xc0007515
c0006d0b:	53                   	push   ebx
c0006d0c:	e8 0f e4 00 00       	call   c0015120 <Process::createThread(void (*)(void*), void*, int)>
c0006d11:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006d17:	6a 7a                	push   0x7a
c0006d19:	6a 00                	push   0x0
c0006d1b:	68 e4 5b 01 c0       	push   0xc0015be4
c0006d20:	52                   	push   edx
c0006d21:	e8 fa e3 00 00       	call   c0015120 <Process::createThread(void (*)(void*), void*, int)>
c0006d26:	83 c4 20             	add    esp,0x20
c0006d29:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d30:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d35:	e8 ba 9f 00 00       	call   c0010cf4 <KeInitRand()>
c0006d3a:	83 ec 0c             	sub    esp,0xc
c0006d3d:	68 84 fe 01 c0       	push   0xc001fe84
c0006d42:	e8 40 97 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c0006d47:	e8 bb f2 00 00       	call   c0016007 <Vm::initialise8086()>
c0006d4c:	e8 63 42 00 00       	call   c000afb4 <Fs::initVFS()>
c0006d51:	c7 04 24 95 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd95
c0006d58:	e8 2a 97 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c0006d5d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d62:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6a:	6a 00                	push   0x0
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	50                   	push   eax
c0006d71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d74:	83 c4 14             	add    esp,0x14
c0006d77:	68 84 fe 01 c0       	push   0xc001fe84
c0006d7c:	e8 06 97 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c0006d81:	e8 1a 9c 00 00       	call   c00109a0 <KeLoadSystemEnv()>
c0006d86:	e8 77 9e 00 00       	call   c0010c02 <KeSetupPowerManager()>
c0006d8b:	83 c4 0c             	add    esp,0xc
c0006d8e:	6a 3a                	push   0x3a
c0006d90:	68 af fd 01 c0       	push   0xc001fdaf
c0006d95:	68 b8 fd 01 c0       	push   0xc001fdb8
c0006d9a:	e8 5f c4 00 00       	call   c00131fe <Reg::readIntWithDefault(char*, char*, int)>
c0006d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da2:	e8 45 4d 00 00       	call   c000baec <User::loadClockSettings(int)>
c0006da7:	c7 04 24 a8 fe 01 c0 	mov    DWORD PTR [esp],0xc001fea8
c0006dae:	e8 d4 96 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c0006db3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006db8:	59                   	pop    ecx
c0006db9:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dbf:	53                   	push   ebx
c0006dc0:	e8 cb 53 00 00       	call   c000c190 <Device::loadDriversForAll()>
c0006dc5:	c7 04 24 c0 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdc0
c0006dcc:	e8 b6 96 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c0006dd1:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dd7:	58                   	pop    eax
c0006dd8:	5a                   	pop    edx
c0006dd9:	6a 01                	push   0x1
c0006ddb:	68 d1 fd 01 c0       	push   0xc001fdd1
c0006de0:	e8 1b db 00 00       	call   c0014900 <Thr::loadDLL(char const*, bool)>
c0006de5:	59                   	pop    ecx
c0006de6:	5a                   	pop    edx
c0006de7:	53                   	push   ebx
c0006de8:	50                   	push   eax
c0006de9:	e8 52 dd 00 00       	call   c0014b40 <Thr::executeDLL(unsigned long, void*)>
c0006dee:	83 c4 10             	add    esp,0x10
c0006df1:	83 ec 0c             	sub    esp,0xc
c0006df4:	6a 02                	push   0x2
c0006df6:	e8 71 e7 00 00       	call   c001556c <blockTask(TaskState)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	eb f1                	jmp    c0006df1 <Krnl::firstTask()+0x12c>

c0006e00 <Computer::Computer()>:
c0006e00:	83 ec 0c             	sub    esp,0xc
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	83 ec 08             	sub    esp,0x8
c0006e0a:	68 ed fd 01 c0       	push   0xc001fded
c0006e0f:	50                   	push   eax
c0006e10:	e8 f7 53 00 00       	call   c000c20c <Device::Device(char const*)>
c0006e15:	83 c4 10             	add    esp,0x10
c0006e18:	ba f4 fe 01 c0       	mov    edx,0xc001fef4
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	89 10                	mov    DWORD PTR [eax],edx
c0006e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e27:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e35:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e43:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e49:	83 ca 04             	or     edx,0x4
c0006e4c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5c:	0f b6 d0             	movzx  edx,al
c0006e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e63:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e74:	0f b6 d0             	movzx  edx,al
c0006e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e8a:	8d 50 01             	lea    edx,[eax+0x1]
c0006e8d:	88 d1                	mov    cl,dl
c0006e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e93:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e99:	0f b6 d0             	movzx  edx,al
c0006e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ea4:	83 e1 3f             	and    ecx,0x3f
c0006ea7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eab:	90                   	nop
c0006eac:	83 c4 0c             	add    esp,0xc
c0006eaf:	c3                   	ret    

c0006eb0 <Computer::setBootMessage(char const*)>:
c0006eb0:	c3                   	ret    
c0006eb1:	90                   	nop

c0006eb2 <Computer::detectFeatures()>:
c0006eb2:	55                   	push   ebp
c0006eb3:	57                   	push   edi
c0006eb4:	56                   	push   esi
c0006eb5:	53                   	push   ebx
c0006eb6:	83 ec 1c             	sub    esp,0x1c
c0006eb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ebd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ec3:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ec9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ecf:	e8 25 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ed4:	31 d2                	xor    edx,edx
c0006ed6:	85 c0                	test   eax,eax
c0006ed8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ede:	0f 95 c2             	setne  dl
c0006ee1:	d1 e2                	shl    edx,1
c0006ee3:	83 e0 fd             	and    eax,0xfffffffd
c0006ee6:	09 d0                	or     eax,edx
c0006ee8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006eee:	a8 02                	test   al,0x2
c0006ef0:	75 51                	jne    c0006f43 <Computer::detectFeatures()+0x91>
c0006ef2:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ef9:	74 0f                	je     c0006f0a <Computer::detectFeatures()+0x58>
c0006efb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f01:	83 e0 fb             	and    eax,0xfffffffb
c0006f04:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0a:	e8 67 77 01 00       	call   c001e676 <x87Detect>
c0006f0f:	83 e0 01             	and    eax,0x1
c0006f12:	c1 e0 04             	shl    eax,0x4
c0006f15:	89 c2                	mov    edx,eax
c0006f17:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f1d:	83 e0 ef             	and    eax,0xffffffef
c0006f20:	09 d0                	or     eax,edx
c0006f22:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f28:	a8 10                	test   al,0x10
c0006f2a:	88 c2                	mov    dl,al
c0006f2c:	0f 85 33 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1b3>
c0006f32:	80 e2 80             	and    dl,0x80
c0006f35:	0f 85 4c 01 00 00    	jne    c0007087 <Computer::detectFeatures()+0x1d5>
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	5b                   	pop    ebx
c0006f3f:	5e                   	pop    esi
c0006f40:	5f                   	pop    edi
c0006f41:	5d                   	pop    ebp
c0006f42:	c3                   	ret    
c0006f43:	83 ec 0c             	sub    esp,0xc
c0006f46:	6a 20                	push   0x20
c0006f48:	e8 29 8a 00 00       	call   c000f976 <CPU::cpuidCheckEDX(unsigned int)>
c0006f4d:	83 e0 01             	and    eax,0x1
c0006f50:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f57:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f5d:	83 e0 f7             	and    eax,0xfffffff7
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f68:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f6f:	e8 02 8a 00 00       	call   c000f976 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	83 e2 01             	and    edx,0x1
c0006f7f:	83 e0 fe             	and    eax,0xfffffffe
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f91:	e8 e0 89 00 00       	call   c000f976 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	89 c2                	mov    edx,eax
c0006f98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f9e:	c1 e2 07             	shl    edx,0x7
c0006fa1:	83 e0 7f             	and    eax,0x7f
c0006fa4:	09 d0                	or     eax,edx
c0006fa6:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fac:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fb3:	e8 be 89 00 00       	call   c000f976 <CPU::cpuidCheckEDX(unsigned int)>
c0006fb8:	83 c4 10             	add    esp,0x10
c0006fbb:	83 e0 01             	and    eax,0x1
c0006fbe:	c1 e0 05             	shl    eax,0x5
c0006fc1:	89 c2                	mov    edx,eax
c0006fc3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc9:	83 e0 df             	and    eax,0xffffffdf
c0006fcc:	09 d0                	or     eax,edx
c0006fce:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fde:	0f 84 c9 00 00 00    	je     c00070ad <Computer::detectFeatures()+0x1fb>
c0006fe4:	83 e0 fe             	and    eax,0xfffffffe
c0006fe7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fed:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ff3:	89 c2                	mov    edx,eax
c0006ff5:	83 e2 09             	and    edx,0x9
c0006ff8:	83 fa 01             	cmp    edx,0x1
c0006ffb:	75 09                	jne    c0007006 <Computer::detectFeatures()+0x154>
c0006ffd:	83 e0 fe             	and    eax,0xfffffffe
c0007000:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	8d 44 24 18          	lea    eax,[esp+0x18]
c000700d:	50                   	push   eax
c000700e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007012:	55                   	push   ebp
c0007013:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007017:	57                   	push   edi
c0007018:	8d 74 24 18          	lea    esi,[esp+0x18]
c000701c:	56                   	push   esi
c000701d:	68 00 00 00 80       	push   0x80000000
c0007022:	e8 cb 88 00 00       	call   c000f8f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007027:	83 c4 20             	add    esp,0x20
c000702a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007035:	0f 86 b7 fe ff ff    	jbe    c0006ef2 <Computer::detectFeatures()+0x40>
c000703b:	83 ec 0c             	sub    esp,0xc
c000703e:	50                   	push   eax
c000703f:	55                   	push   ebp
c0007040:	57                   	push   edi
c0007041:	56                   	push   esi
c0007042:	68 01 00 00 80       	push   0x80000001
c0007047:	e8 a6 88 00 00       	call   c000f8f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000704c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007052:	83 c4 20             	add    esp,0x20
c0007055:	25 bf ff fc ff       	and    eax,0xfffcffbf
c000705a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007060:	e9 8d fe ff ff       	jmp    c0006ef2 <Computer::detectFeatures()+0x40>
c0007065:	e8 c6 75 01 00       	call   c001e630 <absolutelyNoChanceInHell>
c000706a:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007070:	83 e2 7f             	and    edx,0x7f
c0007073:	c1 e0 07             	shl    eax,0x7
c0007076:	09 c2                	or     edx,eax
c0007078:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000707e:	80 e2 80             	and    dl,0x80
c0007081:	0f 84 b4 fe ff ff    	je     c0006f3b <Computer::detectFeatures()+0x89>
c0007087:	e8 14 72 01 00       	call   c001e2a0 <avxDetect>
c000708c:	83 e0 01             	and    eax,0x1
c000708f:	c1 e0 05             	shl    eax,0x5
c0007092:	89 c2                	mov    edx,eax
c0007094:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000709a:	83 e0 df             	and    eax,0xffffffdf
c000709d:	09 d0                	or     eax,edx
c000709f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070a5:	83 c4 1c             	add    esp,0x1c
c00070a8:	5b                   	pop    ebx
c00070a9:	5e                   	pop    esi
c00070aa:	5f                   	pop    edi
c00070ab:	5d                   	pop    ebp
c00070ac:	c3                   	ret    
c00070ad:	83 ec 0c             	sub    esp,0xc
c00070b0:	68 00 02 00 00       	push   0x200
c00070b5:	e8 bc 88 00 00       	call   c000f976 <CPU::cpuidCheckEDX(unsigned int)>
c00070ba:	83 c4 10             	add    esp,0x10
c00070bd:	89 c2                	mov    edx,eax
c00070bf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070c5:	83 e2 01             	and    edx,0x1
c00070c8:	83 e0 fe             	and    eax,0xfffffffe
c00070cb:	09 d0                	or     eax,edx
c00070cd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070d3:	e9 15 ff ff ff       	jmp    c0006fed <Computer::detectFeatures()+0x13b>

c00070d8 <Computer::displayFeatures()>:
c00070d8:	c3                   	ret    
c00070d9:	90                   	nop

c00070da <Computer::rdmsr(unsigned int)>:
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070e8:	74 0a                	je     c00070f4 <Computer::rdmsr(unsigned int)+0x1a>
c00070ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070ee:	0f 32                	rdmsr  
c00070f0:	83 c4 0c             	add    esp,0xc
c00070f3:	c3                   	ret    
c00070f4:	83 ec 0c             	sub    esp,0xc
c00070f7:	68 f6 fd 01 c0       	push   0xc001fdf6
c00070fc:	e8 3c 9a 00 00       	call   c0010b3d <KePanic(char const*)>
c0007101:	83 c4 10             	add    esp,0x10
c0007104:	eb e4                	jmp    c00070ea <Computer::rdmsr(unsigned int)+0x10>

c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007106:	57                   	push   edi
c0007107:	56                   	push   esi
c0007108:	83 ec 04             	sub    esp,0x4
c000710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000710f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007113:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007117:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000711e:	74 10                	je     c0007130 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007120:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007124:	89 f0                	mov    eax,esi
c0007126:	89 fa                	mov    edx,edi
c0007128:	0f 30                	wrmsr  
c000712a:	83 c4 04             	add    esp,0x4
c000712d:	5e                   	pop    esi
c000712e:	5f                   	pop    edi
c000712f:	c3                   	ret    
c0007130:	83 ec 0c             	sub    esp,0xc
c0007133:	68 fc fd 01 c0       	push   0xc001fdfc
c0007138:	e8 00 9a 00 00       	call   c0010b3d <KePanic(char const*)>
c000713d:	83 c4 10             	add    esp,0x10
c0007140:	eb de                	jmp    c0007120 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007142 <Computer::shutdown()>:
c0007142:	83 ec 0c             	sub    esp,0xc
c0007145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007149:	8b 10                	mov    edx,DWORD PTR [eax]
c000714b:	6a 00                	push   0x0
c000714d:	6a 00                	push   0x0
c000714f:	6a 00                	push   0x0
c0007151:	50                   	push   eax
c0007152:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007155:	83 c4 1c             	add    esp,0x1c
c0007158:	c3                   	ret    
c0007159:	90                   	nop

c000715a <Computer::restart()>:
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007161:	8b 10                	mov    edx,DWORD PTR [eax]
c0007163:	6a 00                	push   0x0
c0007165:	6a 00                	push   0x0
c0007167:	6a 01                	push   0x1
c0007169:	50                   	push   eax
c000716a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000716d:	83 c4 1c             	add    esp,0x1c
c0007170:	c3                   	ret    
c0007171:	90                   	nop

c0007172 <Computer::sleep()>:
c0007172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007176:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000717c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007180:	e9 c3 82 00 00       	jmp    c000f448 <ACPI::sleep()>
c0007185:	90                   	nop

c0007186 <Computer::nmiEnabled()>:
c0007186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000718a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007190:	c3                   	ret    
c0007191:	90                   	nop

c0007192 <Computer::readCMOS(unsigned char)>:
c0007192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007196:	31 d2                	xor    edx,edx
c0007198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000719c:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071a3:	75 02                	jne    c00071a7 <Computer::readCMOS(unsigned char)+0x15>
c00071a5:	b2 80                	mov    dl,0x80
c00071a7:	09 d0                	or     eax,edx
c00071a9:	e6 70                	out    0x70,al
c00071ab:	e4 71                	in     al,0x71
c00071ad:	c3                   	ret    

c00071ae <Computer::enableNMI(bool)>:
c00071ae:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071b6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071bc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071c4:	eb cc                	jmp    c0007192 <Computer::readCMOS(unsigned char)>

c00071c6 <Computer::open(int, int, void*)>:
c00071c6:	56                   	push   esi
c00071c7:	53                   	push   ebx
c00071c8:	83 ec 10             	sub    esp,0x10
c00071cb:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071d6:	68 02 fe 01 c0       	push   0xc001fe02
c00071db:	0f 94 05 c0 26 02 c0 	sete   BYTE PTR ds:0xc00226c0
c00071e2:	e8 a0 92 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c00071e7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ee:	e8 d8 08 00 00       	call   c0007acb <malloc>
c00071f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071f6:	89 c6                	mov    esi,eax
c00071f8:	e8 bf 7d 00 00       	call   c000efbc <ACPI::ACPI()>
c00071fd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007203:	58                   	pop    eax
c0007204:	5a                   	pop    edx
c0007205:	56                   	push   esi
c0007206:	53                   	push   ebx
c0007207:	e8 68 4e 00 00       	call   c000c074 <Device::addChild(Device*)>
c000720c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000720f:	e8 9e fc ff ff       	call   c0006eb2 <Computer::detectFeatures()>
c0007214:	59                   	pop    ecx
c0007215:	5e                   	pop    esi
c0007216:	6a 01                	push   0x1
c0007218:	53                   	push   ebx
c0007219:	e8 90 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c000721e:	c7 04 24 1a fe 01 c0 	mov    DWORD PTR [esp],0xc001fe1a
c0007225:	e8 5d 92 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c000722a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007231:	e8 95 08 00 00       	call   c0007acb <malloc>
c0007236:	89 04 24             	mov    DWORD PTR [esp],eax
c0007239:	89 c6                	mov    esi,eax
c000723b:	e8 ee 87 00 00       	call   c000fa2e <CPU::CPU()>
c0007240:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007246:	58                   	pop    eax
c0007247:	5a                   	pop    edx
c0007248:	56                   	push   esi
c0007249:	53                   	push   ebx
c000724a:	e8 25 4e 00 00       	call   c000c074 <Device::addChild(Device*)>
c000724f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007255:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007259:	8b 10                	mov    edx,DWORD PTR [eax]
c000725b:	51                   	push   ecx
c000725c:	6a 00                	push   0x0
c000725e:	6a 00                	push   0x0
c0007260:	50                   	push   eax
c0007261:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007264:	83 c4 14             	add    esp,0x14
c0007267:	68 c8 fe 01 c0       	push   0xc001fec8
c000726c:	e8 16 92 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c0007271:	e8 d8 ff 00 00       	call   c001724e <HalInitialiseCoprocessor()>
c0007276:	c7 04 24 34 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe34
c000727d:	e8 05 92 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c0007282:	c7 04 24 c5 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cc5
c0007289:	e8 ba df 00 00       	call   c0015248 <setupMultitasking(void (*)())>
c000728e:	83 c4 14             	add    esp,0x14
c0007291:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007296:	5b                   	pop    ebx
c0007297:	5e                   	pop    esi
c0007298:	c3                   	ret    
c0007299:	90                   	nop

c000729a <Computer::disableNMI()>:
c000729a:	6a 00                	push   0x0
c000729c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a0:	50                   	push   eax
c00072a1:	e8 08 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c00072a6:	5a                   	pop    edx
c00072a7:	59                   	pop    ecx
c00072a8:	c3                   	ret    
c00072a9:	90                   	nop

c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072aa:	53                   	push   ebx
c00072ab:	b2 80                	mov    dl,0x80
c00072ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c0:	74 02                	je     c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072c2:	31 d2                	xor    edx,edx
c00072c4:	09 d0                	or     eax,edx
c00072c6:	e6 70                	out    0x70,al
c00072c8:	88 c8                	mov    al,cl
c00072ca:	e6 71                	out    0x71,al
c00072cc:	5b                   	pop    ebx
c00072cd:	c3                   	ret    

c00072ce <Computer::handleNMI()>:
c00072ce:	56                   	push   esi
c00072cf:	53                   	push   ebx
c00072d0:	83 ec 10             	sub    esp,0x10
c00072d3:	e4 92                	in     al,0x92
c00072d5:	89 c6                	mov    esi,eax
c00072d7:	e4 61                	in     al,0x61
c00072d9:	68 4f fe 01 c0       	push   0xc001fe4f
c00072de:	88 c3                	mov    bl,al
c00072e0:	e8 57 36 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00072e5:	83 c4 10             	add    esp,0x10
c00072e8:	83 e6 10             	and    esi,0x10
c00072eb:	75 10                	jne    c00072fd <Computer::handleNMI()+0x2f>
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	75 20                	jne    c0007312 <Computer::handleNMI()+0x44>
c00072f2:	80 e3 80             	and    bl,0x80
c00072f5:	75 30                	jne    c0007327 <Computer::handleNMI()+0x59>
c00072f7:	83 c4 04             	add    esp,0x4
c00072fa:	5b                   	pop    ebx
c00072fb:	5e                   	pop    esi
c00072fc:	c3                   	ret    
c00072fd:	83 ec 0c             	sub    esp,0xc
c0007300:	68 60 fe 01 c0       	push   0xc001fe60
c0007305:	e8 33 98 00 00       	call   c0010b3d <KePanic(char const*)>
c000730a:	83 c4 10             	add    esp,0x10
c000730d:	f6 c3 40             	test   bl,0x40
c0007310:	74 e0                	je     c00072f2 <Computer::handleNMI()+0x24>
c0007312:	83 ec 0c             	sub    esp,0xc
c0007315:	68 6d fe 01 c0       	push   0xc001fe6d
c000731a:	e8 1e 98 00 00       	call   c0010b3d <KePanic(char const*)>
c000731f:	83 c4 10             	add    esp,0x10
c0007322:	80 e3 80             	and    bl,0x80
c0007325:	74 d0                	je     c00072f7 <Computer::handleNMI()+0x29>
c0007327:	c7 44 24 10 77 fe 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fe77
c000732f:	83 c4 04             	add    esp,0x4
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	e9 04 98 00 00       	jmp    c0010b3d <KePanic(char const*)>
c0007339:	90                   	nop

c000733a <GDTEntry::setBase(unsigned int)>:
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007342:	89 c1                	mov    ecx,eax
c0007344:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007348:	c1 e9 10             	shr    ecx,0x10
c000734b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000734e:	c1 e8 18             	shr    eax,0x18
c0007351:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007354:	c3                   	ret    
c0007355:	90                   	nop

c0007356 <GDTEntry::setLimit(unsigned int)>:
c0007356:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000735a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007361:	66 89 01             	mov    WORD PTR [ecx],ax
c0007364:	c1 e8 10             	shr    eax,0x10
c0007367:	83 e0 0f             	and    eax,0xf
c000736a:	83 e2 f0             	and    edx,0xfffffff0
c000736d:	09 d0                	or     eax,edx
c000736f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007372:	c3                   	ret    
c0007373:	90                   	nop

c0007374 <GDT::GDT()>:
c0007374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000737e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007382:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007388:	90                   	nop
c0007389:	c3                   	ret    

c000738a <GDT::addEntry(GDTEntry)>:
c000738a:	53                   	push   ebx
c000738b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000738f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007393:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007397:	8b 02                	mov    eax,DWORD PTR [edx]
c0007399:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000739d:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a0:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073a4:	c1 e0 03             	shl    eax,0x3
c00073a7:	89 0a                	mov    DWORD PTR [edx],ecx
c00073a9:	5b                   	pop    ebx
c00073aa:	c3                   	ret    
c00073ab:	90                   	nop

c00073ac <GDT::getNumberOfEntries()>:
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::flush()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00073ba:	83 c0 04             	add    eax,0x4
c00073bd:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073c2:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073c9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073d0:	e9 85 8f ff ff       	jmp    c000035a <loadGDT>
c00073d5:	90                   	nop

c00073d6 <GDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 30             	sub    esp,0x30
c00073dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e0:	6a 00                	push   0x0
c00073e2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073e6:	56                   	push   esi
c00073e7:	e8 4e ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c00073ec:	6a 00                	push   0x0
c00073ee:	56                   	push   esi
c00073ef:	e8 62 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c00073f4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073fc:	6a 00                	push   0x0
c00073fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007402:	56                   	push   esi
c0007403:	e8 32 ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0007408:	68 ff ff ff 00       	push   0xffffff
c000740d:	56                   	push   esi
c000740e:	e8 43 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0007413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007417:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000741b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007420:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007424:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007429:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000742d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007431:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007435:	89 f8                	mov    eax,edi
c0007437:	89 fa                	mov    edx,edi
c0007439:	80 e4 f7             	and    ah,0xf7
c000743c:	80 ce 60             	or     dh,0x60
c000743f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007443:	89 c7                	mov    edi,eax
c0007445:	80 cc 60             	or     ah,0x60
c0007448:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000744c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007454:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007458:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000745c:	83 c4 20             	add    esp,0x20
c000745f:	6a 00                	push   0x0
c0007461:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007465:	50                   	push   eax
c0007466:	e8 cf fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000746b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000746f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007473:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007477:	83 e0 3f             	and    eax,0x3f
c000747a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000747e:	6a 00                	push   0x0
c0007480:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007484:	50                   	push   eax
c0007485:	e8 b0 fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000748a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000748e:	83 e0 3f             	and    eax,0x3f
c0007491:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007495:	83 c4 0c             	add    esp,0xc
c0007498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000749c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a0:	53                   	push   ebx
c00074a1:	e8 e4 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074a6:	83 c4 0c             	add    esp,0xc
c00074a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b1:	53                   	push   ebx
c00074b2:	e8 d3 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074b7:	83 c4 0c             	add    esp,0xc
c00074ba:	57                   	push   edi
c00074bb:	56                   	push   esi
c00074bc:	53                   	push   ebx
c00074bd:	e8 c8 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074c2:	83 c4 0c             	add    esp,0xc
c00074c5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074c9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074cd:	53                   	push   ebx
c00074ce:	e8 b7 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074d3:	83 c4 0c             	add    esp,0xc
c00074d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074de:	53                   	push   ebx
c00074df:	e8 a6 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074e4:	83 c4 0c             	add    esp,0xc
c00074e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074ef:	53                   	push   ebx
c00074f0:	e8 95 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074f5:	83 c4 0c             	add    esp,0xc
c00074f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007500:	53                   	push   ebx
c0007501:	e8 84 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c0007506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007509:	e8 a6 fe ff ff       	call   c00073b4 <GDT::flush()>
c000750e:	83 c4 40             	add    esp,0x40
c0007511:	5b                   	pop    ebx
c0007512:	5e                   	pop    esi
c0007513:	5f                   	pop    edi
c0007514:	c3                   	ret    

c0007515 <idleFunction(void*)>:
c0007515:	83 ec 0c             	sub    esp,0xc
c0007518:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000751d:	48                   	dec    eax
c000751e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007523:	75 01                	jne    c0007526 <idleFunction(void*)+0x11>
c0007525:	fb                   	sti    
c0007526:	e8 ef f9 00 00       	call   c0016f1a <HalSystemIdle()>
c000752b:	e8 02 77 01 00       	call   c001ec32 <idleCommon()>
c0007530:	eb f4                	jmp    c0007526 <idleFunction(void*)+0x11>
c0007532:	66 90                	xchg   ax,ax

c0007534 <IDTEntry::IDTEntry(bool)>:
c0007534:	53                   	push   ebx
c0007535:	83 ec 04             	sub    esp,0x4
c0007538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753c:	88 04 24             	mov    BYTE PTR [esp],al
c000753f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007543:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007558:	83 e2 f0             	and    edx,0xfffffff0
c000755b:	83 ca 0e             	or     edx,0xe
c000755e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007565:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007568:	83 e2 ef             	and    edx,0xffffffef
c000756b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000756e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007572:	85 c0                	test   eax,eax
c0007574:	74 06                	je     c000757c <IDTEntry::IDTEntry(bool)+0x48>
c0007576:	b2 03                	mov    dl,0x3
c0007578:	eb 06                	jmp    c0007580 <IDTEntry::IDTEntry(bool)+0x4c>
c000757a:	66 90                	xchg   ax,ax
c000757c:	b2 00                	mov    dl,0x0
c000757e:	66 90                	xchg   ax,ax
c0007580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007584:	83 e2 03             	and    edx,0x3
c0007587:	89 d3                	mov    ebx,edx
c0007589:	c1 e3 05             	shl    ebx,0x5
c000758c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758f:	83 e2 9f             	and    edx,0xffffff9f
c0007592:	88 d1                	mov    cl,dl
c0007594:	88 da                	mov    dl,bl
c0007596:	09 ca                	or     edx,ecx
c0007598:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000759b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a2:	83 ca 80             	or     edx,0xffffff80
c00075a5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a8:	90                   	nop
c00075a9:	83 c4 04             	add    esp,0x4
c00075ac:	5b                   	pop    ebx
c00075ad:	c3                   	ret    

c00075ae <IDTEntry::setOffset(unsigned int)>:
c00075ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b6:	66 89 02             	mov    WORD PTR [edx],ax
c00075b9:	c1 e8 10             	shr    eax,0x10
c00075bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c0:	c3                   	ret    
c00075c1:	90                   	nop
c00075c2:	66 90                	xchg   ax,ax

c00075c4 <IDT::IDT()>:
c00075c4:	90                   	nop
c00075c5:	c3                   	ret    

c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ca:	83 c0 30             	add    eax,0x30
c00075cd:	c3                   	ret    

c00075ce <IDT::addEntry(IDTEntry, int)>:
c00075ce:	53                   	push   ebx
c00075cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075df:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075e2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075e6:	5b                   	pop    ebx
c00075e7:	c3                   	ret    

c00075e8 <IDT::addEntry(int, void (*)(), bool)>:
c00075e8:	53                   	push   ebx
c00075e9:	83 ec 10             	sub    esp,0x10
c00075ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f1:	50                   	push   eax
c00075f2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075f6:	53                   	push   ebx
c00075f7:	e8 38 ff ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c00075fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007600:	53                   	push   ebx
c0007601:	e8 a8 ff ff ff       	call   c00075ae <IDTEntry::setOffset(unsigned int)>
c0007606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000760a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000760e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007612:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007616:	e8 b3 ff ff ff       	call   c00075ce <IDT::addEntry(IDTEntry, int)>
c000761b:	83 c4 30             	add    esp,0x30
c000761e:	5b                   	pop    ebx
c000761f:	c3                   	ret    

c0007620 <IDT::flush()>:
c0007620:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c0007629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000762d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007632:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007639:	c3                   	ret    

c000763a <IDT::setup()>:
c000763a:	57                   	push   edi
c000763b:	56                   	push   esi
c000763c:	53                   	push   ebx
c000763d:	83 ec 10             	sub    esp,0x10
c0007640:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007644:	6a 00                	push   0x0
c0007646:	68 30 e3 01 c0       	push   0xc001e330
c000764b:	6a 00                	push   0x0
c000764d:	53                   	push   ebx
c000764e:	e8 95 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007653:	6a 00                	push   0x0
c0007655:	68 40 e3 01 c0       	push   0xc001e340
c000765a:	6a 01                	push   0x1
c000765c:	53                   	push   ebx
c000765d:	e8 86 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	83 c4 20             	add    esp,0x20
c0007665:	6a 00                	push   0x0
c0007667:	68 4a e3 01 c0       	push   0xc001e34a
c000766c:	6a 02                	push   0x2
c000766e:	53                   	push   ebx
c000766f:	e8 74 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007674:	6a 00                	push   0x0
c0007676:	68 54 e3 01 c0       	push   0xc001e354
c000767b:	6a 03                	push   0x3
c000767d:	53                   	push   ebx
c000767e:	e8 65 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	83 c4 20             	add    esp,0x20
c0007686:	6a 00                	push   0x0
c0007688:	68 5e e3 01 c0       	push   0xc001e35e
c000768d:	6a 04                	push   0x4
c000768f:	53                   	push   ebx
c0007690:	e8 53 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007695:	6a 00                	push   0x0
c0007697:	68 68 e3 01 c0       	push   0xc001e368
c000769c:	6a 05                	push   0x5
c000769e:	53                   	push   ebx
c000769f:	e8 44 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	83 c4 20             	add    esp,0x20
c00076a7:	6a 00                	push   0x0
c00076a9:	68 72 e3 01 c0       	push   0xc001e372
c00076ae:	6a 06                	push   0x6
c00076b0:	53                   	push   ebx
c00076b1:	e8 32 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	6a 00                	push   0x0
c00076b8:	68 7c e3 01 c0       	push   0xc001e37c
c00076bd:	6a 07                	push   0x7
c00076bf:	53                   	push   ebx
c00076c0:	e8 23 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076c5:	83 c4 20             	add    esp,0x20
c00076c8:	6a 00                	push   0x0
c00076ca:	68 86 e3 01 c0       	push   0xc001e386
c00076cf:	6a 08                	push   0x8
c00076d1:	53                   	push   ebx
c00076d2:	e8 11 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	6a 00                	push   0x0
c00076d9:	68 8e e3 01 c0       	push   0xc001e38e
c00076de:	6a 09                	push   0x9
c00076e0:	53                   	push   ebx
c00076e1:	e8 02 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076e6:	83 c4 20             	add    esp,0x20
c00076e9:	6a 00                	push   0x0
c00076eb:	68 98 e3 01 c0       	push   0xc001e398
c00076f0:	6a 0a                	push   0xa
c00076f2:	53                   	push   ebx
c00076f3:	e8 f0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	6a 00                	push   0x0
c00076fa:	68 a0 e3 01 c0       	push   0xc001e3a0
c00076ff:	6a 0b                	push   0xb
c0007701:	53                   	push   ebx
c0007702:	e8 e1 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007707:	83 c4 20             	add    esp,0x20
c000770a:	6a 00                	push   0x0
c000770c:	68 a8 e3 01 c0       	push   0xc001e3a8
c0007711:	6a 0c                	push   0xc
c0007713:	53                   	push   ebx
c0007714:	e8 cf fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007719:	6a 00                	push   0x0
c000771b:	68 b0 e3 01 c0       	push   0xc001e3b0
c0007720:	6a 0d                	push   0xd
c0007722:	53                   	push   ebx
c0007723:	e8 c0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007728:	83 c4 20             	add    esp,0x20
c000772b:	6a 00                	push   0x0
c000772d:	68 ca e3 01 c0       	push   0xc001e3ca
c0007732:	6a 0e                	push   0xe
c0007734:	53                   	push   ebx
c0007735:	e8 ae fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000773a:	6a 00                	push   0x0
c000773c:	68 d2 e3 01 c0       	push   0xc001e3d2
c0007741:	6a 0f                	push   0xf
c0007743:	53                   	push   ebx
c0007744:	e8 9f fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007749:	83 c4 20             	add    esp,0x20
c000774c:	6a 00                	push   0x0
c000774e:	68 dc e3 01 c0       	push   0xc001e3dc
c0007753:	6a 10                	push   0x10
c0007755:	53                   	push   ebx
c0007756:	e8 8d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000775b:	6a 00                	push   0x0
c000775d:	68 e6 e3 01 c0       	push   0xc001e3e6
c0007762:	6a 11                	push   0x11
c0007764:	53                   	push   ebx
c0007765:	e8 7e fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000776a:	83 c4 20             	add    esp,0x20
c000776d:	6a 00                	push   0x0
c000776f:	68 f0 e3 01 c0       	push   0xc001e3f0
c0007774:	6a 12                	push   0x12
c0007776:	53                   	push   ebx
c0007777:	e8 6c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000777c:	6a 01                	push   0x1
c000777e:	68 8a e4 01 c0       	push   0xc001e48a
c0007783:	6a 60                	push   0x60
c0007785:	53                   	push   ebx
c0007786:	e8 5d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000778b:	83 c4 20             	add    esp,0x20
c000778e:	6a 00                	push   0x0
c0007790:	68 91 e4 01 c0       	push   0xc001e491
c0007795:	6a 20                	push   0x20
c0007797:	53                   	push   ebx
c0007798:	e8 4b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000779d:	6a 00                	push   0x0
c000779f:	68 7c e4 01 c0       	push   0xc001e47c
c00077a4:	6a 21                	push   0x21
c00077a6:	53                   	push   ebx
c00077a7:	e8 3c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ac:	83 c4 20             	add    esp,0x20
c00077af:	6a 00                	push   0x0
c00077b1:	68 83 e4 01 c0       	push   0xc001e483
c00077b6:	6a 22                	push   0x22
c00077b8:	53                   	push   ebx
c00077b9:	e8 2a fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077be:	6a 00                	push   0x0
c00077c0:	68 fa e3 01 c0       	push   0xc001e3fa
c00077c5:	6a 23                	push   0x23
c00077c7:	53                   	push   ebx
c00077c8:	e8 1b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077cd:	83 c4 20             	add    esp,0x20
c00077d0:	6a 00                	push   0x0
c00077d2:	68 04 e4 01 c0       	push   0xc001e404
c00077d7:	6a 24                	push   0x24
c00077d9:	53                   	push   ebx
c00077da:	e8 09 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077df:	6a 00                	push   0x0
c00077e1:	68 0e e4 01 c0       	push   0xc001e40e
c00077e6:	6a 25                	push   0x25
c00077e8:	53                   	push   ebx
c00077e9:	e8 fa fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ee:	83 c4 20             	add    esp,0x20
c00077f1:	6a 00                	push   0x0
c00077f3:	68 18 e4 01 c0       	push   0xc001e418
c00077f8:	6a 26                	push   0x26
c00077fa:	53                   	push   ebx
c00077fb:	e8 e8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007800:	6a 00                	push   0x0
c0007802:	68 22 e4 01 c0       	push   0xc001e422
c0007807:	6a 27                	push   0x27
c0007809:	53                   	push   ebx
c000780a:	e8 d9 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	6a 00                	push   0x0
c0007814:	68 2c e4 01 c0       	push   0xc001e42c
c0007819:	6a 28                	push   0x28
c000781b:	53                   	push   ebx
c000781c:	e8 c7 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007821:	6a 00                	push   0x0
c0007823:	68 36 e4 01 c0       	push   0xc001e436
c0007828:	6a 29                	push   0x29
c000782a:	53                   	push   ebx
c000782b:	e8 b8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	6a 00                	push   0x0
c0007835:	68 40 e4 01 c0       	push   0xc001e440
c000783a:	6a 2a                	push   0x2a
c000783c:	53                   	push   ebx
c000783d:	e8 a6 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007842:	6a 00                	push   0x0
c0007844:	68 4a e4 01 c0       	push   0xc001e44a
c0007849:	6a 2b                	push   0x2b
c000784b:	53                   	push   ebx
c000784c:	e8 97 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007851:	83 c4 20             	add    esp,0x20
c0007854:	6a 00                	push   0x0
c0007856:	68 54 e4 01 c0       	push   0xc001e454
c000785b:	6a 2c                	push   0x2c
c000785d:	53                   	push   ebx
c000785e:	e8 85 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007863:	6a 00                	push   0x0
c0007865:	68 5e e4 01 c0       	push   0xc001e45e
c000786a:	6a 2d                	push   0x2d
c000786c:	53                   	push   ebx
c000786d:	e8 76 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007872:	83 c4 20             	add    esp,0x20
c0007875:	6a 00                	push   0x0
c0007877:	68 68 e4 01 c0       	push   0xc001e468
c000787c:	6a 2e                	push   0x2e
c000787e:	53                   	push   ebx
c000787f:	e8 64 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007884:	6a 00                	push   0x0
c0007886:	68 72 e4 01 c0       	push   0xc001e472
c000788b:	6a 2f                	push   0x2f
c000788d:	53                   	push   ebx
c000788e:	e8 55 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007893:	83 c4 20             	add    esp,0x20
c0007896:	6a 00                	push   0x0
c0007898:	68 cc e5 01 c0       	push   0xc001e5cc
c000789d:	6a 30                	push   0x30
c000789f:	53                   	push   ebx
c00078a0:	e8 43 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078a5:	6a 00                	push   0x0
c00078a7:	68 d6 e5 01 c0       	push   0xc001e5d6
c00078ac:	6a 31                	push   0x31
c00078ae:	53                   	push   ebx
c00078af:	e8 34 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078b4:	83 c4 20             	add    esp,0x20
c00078b7:	6a 00                	push   0x0
c00078b9:	68 e0 e5 01 c0       	push   0xc001e5e0
c00078be:	6a 32                	push   0x32
c00078c0:	53                   	push   ebx
c00078c1:	e8 22 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078c6:	6a 00                	push   0x0
c00078c8:	68 ea e5 01 c0       	push   0xc001e5ea
c00078cd:	6a 33                	push   0x33
c00078cf:	53                   	push   ebx
c00078d0:	e8 13 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078d5:	83 c4 20             	add    esp,0x20
c00078d8:	6a 00                	push   0x0
c00078da:	68 f4 e5 01 c0       	push   0xc001e5f4
c00078df:	6a 34                	push   0x34
c00078e1:	53                   	push   ebx
c00078e2:	e8 01 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078e7:	6a 00                	push   0x0
c00078e9:	68 fe e5 01 c0       	push   0xc001e5fe
c00078ee:	6a 35                	push   0x35
c00078f0:	53                   	push   ebx
c00078f1:	e8 f2 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078f6:	83 c4 20             	add    esp,0x20
c00078f9:	6a 00                	push   0x0
c00078fb:	68 08 e6 01 c0       	push   0xc001e608
c0007900:	6a 36                	push   0x36
c0007902:	53                   	push   ebx
c0007903:	e8 e0 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007908:	6a 00                	push   0x0
c000790a:	68 12 e6 01 c0       	push   0xc001e612
c000790f:	6a 37                	push   0x37
c0007911:	53                   	push   ebx
c0007912:	e8 d1 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007917:	83 c4 1c             	add    esp,0x1c
c000791a:	6a 03                	push   0x3
c000791c:	6a 02                	push   0x2
c000791e:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007924:	e8 cf 24 00 00       	call   c0009df8 <VAS::allocatePages(int, int)>
c0007929:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007930:	89 c6                	mov    esi,eax
c0007932:	e8 94 01 00 00       	call   c0007acb <malloc>
c0007937:	81 c6 00 20 00 00    	add    esi,0x2000
c000793d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007940:	89 c7                	mov    edi,eax
c0007942:	e8 d9 15 00 00       	call   c0008f20 <TSS::TSS()>
c0007947:	83 c4 0c             	add    esp,0xc
c000794a:	68 86 e3 01 c0       	push   0xc001e386
c000794f:	56                   	push   esi
c0007950:	57                   	push   edi
c0007951:	e8 0e 16 00 00       	call   c0008f64 <TSS::setup(unsigned long, unsigned long)>
c0007956:	89 c6                	mov    esi,eax
c0007958:	58                   	pop    eax
c0007959:	5a                   	pop    edx
c000795a:	6a 00                	push   0x0
c000795c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007960:	50                   	push   eax
c0007961:	e8 ce fb ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c0007966:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000796f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007976:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000797a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007980:	80 ce 05             	or     dh,0x5
c0007983:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007987:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000798a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000798e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007994:	e8 87 fc ff ff       	call   c0007620 <IDT::flush()>
c0007999:	83 c4 20             	add    esp,0x20
c000799c:	5b                   	pop    ebx
c000799d:	5e                   	pop    esi
c000799e:	5f                   	pop    edi
c000799f:	c3                   	ret    

c00079a0 <sbrk>:
c00079a0:	55                   	push   ebp
c00079a1:	57                   	push   edi
c00079a2:	56                   	push   esi
c00079a3:	53                   	push   ebx
c00079a4:	83 ec 1c             	sub    esp,0x1c
c00079a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079ab:	85 c0                	test   eax,eax
c00079ad:	74 66                	je     c0007a15 <sbrk+0x75>
c00079af:	78 6b                	js     c0007a1c <sbrk+0x7c>
c00079b1:	8b 15 9c 26 02 c0    	mov    edx,DWORD PTR ds:0xc002269c
c00079b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079bb:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c1:	05 ff 0f 00 00       	add    eax,0xfff
c00079c6:	0f 49 e8             	cmovns ebp,eax
c00079c9:	c1 fd 0c             	sar    ebp,0xc
c00079cc:	bb 00 00 00 00       	mov    ebx,0x0
c00079d1:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079d7:	8b 3d 9c 26 02 c0    	mov    edi,DWORD PTR ds:0xc002269c
c00079dd:	e8 f3 03 00 00       	call   c0007dd5 <Phys::allocatePage()>
c00079e2:	68 01 04 00 00       	push   0x401
c00079e7:	57                   	push   edi
c00079e8:	50                   	push   eax
c00079e9:	56                   	push   esi
c00079ea:	e8 01 23 00 00       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ef:	81 05 9c 26 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002269c,0x1000
c00079f9:	83 c3 01             	add    ebx,0x1
c00079fc:	83 c4 10             	add    esp,0x10
c00079ff:	39 dd                	cmp    ebp,ebx
c0007a01:	75 ce                	jne    c00079d1 <sbrk+0x31>
c0007a03:	0f 20 d8             	mov    eax,cr3
c0007a06:	0f 22 d8             	mov    cr3,eax
c0007a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a0d:	83 c4 1c             	add    esp,0x1c
c0007a10:	5b                   	pop    ebx
c0007a11:	5e                   	pop    esi
c0007a12:	5f                   	pop    edi
c0007a13:	5d                   	pop    ebp
c0007a14:	c3                   	ret    
c0007a15:	a1 9c 26 02 c0       	mov    eax,ds:0xc002269c
c0007a1a:	eb f1                	jmp    c0007a0d <sbrk+0x6d>
c0007a1c:	83 ec 08             	sub    esp,0x8
c0007a1f:	50                   	push   eax
c0007a20:	68 18 ff 01 c0       	push   0xc001ff18
c0007a25:	e8 12 2f 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0007a2a:	83 c4 10             	add    esp,0x10
c0007a2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a32:	eb d9                	jmp    c0007a0d <sbrk+0x6d>

c0007a34 <mmap>:
c0007a34:	83 ec 18             	sub    esp,0x18
c0007a37:	68 48 ff 01 c0       	push   0xc001ff48
c0007a3c:	e8 fc 90 00 00       	call   c0010b3d <KePanic(char const*)>
c0007a41:	b8 00 00 00 00       	mov    eax,0x0
c0007a46:	83 c4 1c             	add    esp,0x1c
c0007a49:	c3                   	ret    

c0007a4a <munmap>:
c0007a4a:	83 ec 18             	sub    esp,0x18
c0007a4d:	68 4d ff 01 c0       	push   0xc001ff4d
c0007a52:	e8 e6 90 00 00       	call   c0010b3d <KePanic(char const*)>
c0007a57:	b8 00 00 00 00       	mov    eax,0x0
c0007a5c:	83 c4 1c             	add    esp,0x1c
c0007a5f:	c3                   	ret    

c0007a60 <liballoc_lock()>:
c0007a60:	fa                   	cli    
c0007a61:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a68:	b8 00 00 00 00       	mov    eax,0x0
c0007a6d:	c3                   	ret    

c0007a6e <liballoc_unlock()>:
c0007a6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a73:	83 e8 01             	sub    eax,0x1
c0007a76:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a7b:	75 01                	jne    c0007a7e <liballoc_unlock()+0x10>
c0007a7d:	fb                   	sti    
c0007a7e:	b8 00 00 00 00       	mov    eax,0x0
c0007a83:	c3                   	ret    

c0007a84 <liballoc_alloc(int)>:
c0007a84:	83 ec 10             	sub    esp,0x10
c0007a87:	6a 01                	push   0x1
c0007a89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8d:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a93:	e8 60 23 00 00       	call   c0009df8 <VAS::allocatePages(int, int)>
c0007a98:	83 c4 1c             	add    esp,0x1c
c0007a9b:	c3                   	ret    

c0007a9c <liballoc_free(void*, int)>:
c0007a9c:	83 ec 14             	sub    esp,0x14
c0007a9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aa3:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007aa9:	e8 8a 1f 00 00       	call   c0009a38 <VAS::freeAllocatedPages(unsigned long)>
c0007aae:	b8 00 00 00 00       	mov    eax,0x0
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <realloc>:
c0007ab7:	83 ec 14             	sub    esp,0x14
c0007aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac2:	e8 5a 9b ff ff       	call   c0001621 <dlrealloc>
c0007ac7:	83 c4 1c             	add    esp,0x1c
c0007aca:	c3                   	ret    

c0007acb <malloc>:
c0007acb:	83 ec 18             	sub    esp,0x18
c0007ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad2:	e8 0d 96 ff ff       	call   c00010e4 <dlmalloc>
c0007ad7:	83 c4 1c             	add    esp,0x1c
c0007ada:	c3                   	ret    

c0007adb <free>:
c0007adb:	83 ec 18             	sub    esp,0x18
c0007ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ae2:	e8 9f 92 ff ff       	call   c0000d86 <dlfree>
c0007ae7:	83 c4 1c             	add    esp,0x1c
c0007aea:	c3                   	ret    

c0007aeb <rfree>:
c0007aeb:	83 ec 18             	sub    esp,0x18
c0007aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007af2:	e8 8f 92 ff ff       	call   c0000d86 <dlfree>
c0007af7:	83 c4 1c             	add    esp,0x1c
c0007afa:	c3                   	ret    

c0007afb <calloc>:
c0007afb:	56                   	push   esi
c0007afc:	53                   	push   ebx
c0007afd:	83 ec 10             	sub    esp,0x10
c0007b00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b04:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b09:	53                   	push   ebx
c0007b0a:	e8 bc ff ff ff       	call   c0007acb <malloc>
c0007b0f:	89 c6                	mov    esi,eax
c0007b11:	83 c4 0c             	add    esp,0xc
c0007b14:	53                   	push   ebx
c0007b15:	6a 00                	push   0x0
c0007b17:	50                   	push   eax
c0007b18:	e8 d3 89 ff ff       	call   c00004f0 <memset>
c0007b1d:	89 f0                	mov    eax,esi
c0007b1f:	83 c4 14             	add    esp,0x14
c0007b22:	5b                   	pop    ebx
c0007b23:	5e                   	pop    esi
c0007b24:	c3                   	ret    

c0007b25 <KeEntryPoint>:
c0007b25:	57                   	push   edi
c0007b26:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b2b:	56                   	push   esi
c0007b2c:	31 f6                	xor    esi,esi
c0007b2e:	53                   	push   ebx
c0007b2f:	89 fa                	mov    edx,edi
c0007b31:	83 ec 2c             	sub    esp,0x2c
c0007b34:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b39:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b3e:	89 f0                	mov    eax,esi
c0007b40:	ee                   	out    dx,al
c0007b41:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b46:	b0 80                	mov    al,0x80
c0007b48:	89 da                	mov    edx,ebx
c0007b4a:	ee                   	out    dx,al
c0007b4b:	b1 03                	mov    cl,0x3
c0007b4d:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b52:	88 c8                	mov    al,cl
c0007b54:	ee                   	out    dx,al
c0007b55:	89 f0                	mov    eax,esi
c0007b57:	89 fa                	mov    edx,edi
c0007b59:	ee                   	out    dx,al
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	ee                   	out    dx,al
c0007b5f:	b0 c7                	mov    al,0xc7
c0007b61:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 0b                	mov    al,0xb
c0007b69:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b6e:	ee                   	out    dx,al
c0007b6f:	68 54 ff 01 c0       	push   0xc001ff54
c0007b74:	e8 c3 2d 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0007b79:	e8 8d 88 00 00       	call   c001040b <KeDisplaySplashScreen()>
c0007b7e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b83:	05 ff 0f 00 00       	add    eax,0xfff
c0007b88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b90:	e8 ae 03 00 00       	call   c0007f43 <Phys::physicalMemorySetup(unsigned int)>
c0007b95:	e8 23 1c 00 00       	call   c00097bd <Virt::virtualMemorySetup()>
c0007b9a:	58                   	pop    eax
c0007b9b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b9f:	53                   	push   ebx
c0007ba0:	e8 13 1f 00 00       	call   c0009ab8 <VAS::VAS()>
c0007ba5:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007bab:	e8 1a 70 01 00       	call   c001ebca <_init>
c0007bb0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bb7:	e8 0f ff ff ff       	call   c0007acb <malloc>
c0007bbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bbf:	89 c6                	mov    esi,eax
c0007bc1:	e8 3a f2 ff ff       	call   c0006e00 <Computer::Computer()>
c0007bc6:	53                   	push   ebx
c0007bc7:	6a 00                	push   0x0
c0007bc9:	6a 00                	push   0x0
c0007bcb:	56                   	push   esi
c0007bcc:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bd2:	e8 ef f5 ff ff       	call   c00071c6 <Computer::open(int, int, void*)>
c0007bd7:	83 c4 14             	add    esp,0x14
c0007bda:	53                   	push   ebx
c0007bdb:	e8 a2 1f 00 00       	call   c0009b82 <VAS::~VAS()>
c0007be0:	83 c4 30             	add    esp,0x30
c0007be3:	5b                   	pop    ebx
c0007be4:	5e                   	pop    esi
c0007be5:	5f                   	pop    edi
c0007be6:	c3                   	ret    

c0007be7 <Phys::allocateDMA(unsigned long)>:
c0007be7:	55                   	push   ebp
c0007be8:	31 ed                	xor    ebp,ebp
c0007bea:	57                   	push   edi
c0007beb:	56                   	push   esi
c0007bec:	31 f6                	xor    esi,esi
c0007bee:	53                   	push   ebx
c0007bef:	31 db                	xor    ebx,ebx
c0007bf1:	83 ec 1c             	sub    esp,0x1c
c0007bf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bf8:	05 ff 0f 00 00       	add    eax,0xfff
c0007bfd:	c1 e8 0c             	shr    eax,0xc
c0007c00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c04:	31 c0                	xor    eax,eax
c0007c06:	eb 1b                	jmp    c0007c23 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c08:	8d 78 01             	lea    edi,[eax+0x1]
c0007c0b:	85 c0                	test   eax,eax
c0007c0d:	0f 44 eb             	cmove  ebp,ebx
c0007c10:	0f 44 f3             	cmove  esi,ebx
c0007c13:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c17:	74 37                	je     c0007c50 <Phys::allocateDMA(unsigned long)+0x69>
c0007c19:	89 f8                	mov    eax,edi
c0007c1b:	83 c3 01             	add    ebx,0x1
c0007c1e:	83 fb 0f             	cmp    ebx,0xf
c0007c21:	7f 13                	jg     c0007c36 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c23:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c2a:	74 dc                	je     c0007c08 <Phys::allocateDMA(unsigned long)+0x21>
c0007c2c:	31 c0                	xor    eax,eax
c0007c2e:	83 c3 01             	add    ebx,0x1
c0007c31:	83 fb 0f             	cmp    ebx,0xf
c0007c34:	7e ed                	jle    c0007c23 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c36:	83 ec 0c             	sub    esp,0xc
c0007c39:	68 6c ff 01 c0       	push   0xc001ff6c
c0007c3e:	e8 fa 8e 00 00       	call   c0010b3d <KePanic(char const*)>
c0007c43:	83 c4 10             	add    esp,0x10
c0007c46:	31 c0                	xor    eax,eax
c0007c48:	83 c4 1c             	add    esp,0x1c
c0007c4b:	5b                   	pop    ebx
c0007c4c:	5e                   	pop    esi
c0007c4d:	5f                   	pop    edi
c0007c4e:	5d                   	pop    ebp
c0007c4f:	c3                   	ret    
c0007c50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c54:	89 f2                	mov    edx,esi
c0007c56:	c1 fa 04             	sar    edx,0x4
c0007c59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5d:	01 f1                	add    ecx,esi
c0007c5f:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c62:	83 e9 01             	sub    ecx,0x1
c0007c65:	0f 48 ca             	cmovs  ecx,edx
c0007c68:	c1 f9 04             	sar    ecx,0x4
c0007c6b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c6f:	74 06                	je     c0007c77 <Phys::allocateDMA(unsigned long)+0x90>
c0007c71:	89 eb                	mov    ebx,ebp
c0007c73:	31 c0                	xor    eax,eax
c0007c75:	eb b7                	jmp    c0007c2e <Phys::allocateDMA(unsigned long)+0x47>
c0007c77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7b:	85 d2                	test   edx,edx
c0007c7d:	74 17                	je     c0007c96 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c7f:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007c85:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007c8c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c8f:	83 c2 01             	add    edx,0x1
c0007c92:	39 d0                	cmp    eax,edx
c0007c94:	75 f6                	jne    c0007c8c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c96:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007c9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ca4:	01 c2                	add    edx,eax
c0007ca6:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007cac:	85 c9                	test   ecx,ecx
c0007cae:	74 17                	je     c0007cc7 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cb0:	83 ec 0c             	sub    esp,0xc
c0007cb3:	68 6c ff 01 c0       	push   0xc001ff6c
c0007cb8:	e8 80 8e 00 00       	call   c0010b3d <KePanic(char const*)>
c0007cbd:	83 c4 10             	add    esp,0x10
c0007cc0:	89 f8                	mov    eax,edi
c0007cc2:	e9 54 ff ff ff       	jmp    c0007c1b <Phys::allocateDMA(unsigned long)+0x34>
c0007cc7:	c1 e6 0c             	shl    esi,0xc
c0007cca:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cd0:	e9 73 ff ff ff       	jmp    c0007c48 <Phys::allocateDMA(unsigned long)+0x61>

c0007cd5 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cd9:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cdf:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007ce4:	c1 ea 0c             	shr    edx,0xc
c0007ce7:	29 d0                	sub    eax,edx
c0007ce9:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf2:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cf7:	c1 e8 0c             	shr    eax,0xc
c0007cfa:	85 d2                	test   edx,edx
c0007cfc:	74 11                	je     c0007d0f <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cfe:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007d03:	01 c2                	add    edx,eax
c0007d05:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d08:	83 c0 01             	add    eax,0x1
c0007d0b:	39 d0                	cmp    eax,edx
c0007d0d:	75 f6                	jne    c0007d05 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d0f:	c3                   	ret    

c0007d10 <Phys::setPageState(unsigned long, bool)>:
c0007d10:	57                   	push   edi
c0007d11:	56                   	push   esi
c0007d12:	8b 35 a0 26 02 c0    	mov    esi,DWORD PTR ds:0xc00226a0
c0007d18:	53                   	push   ebx
c0007d19:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d1e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d26:	89 ca                	mov    edx,ecx
c0007d28:	83 e1 07             	and    ecx,0x7
c0007d2b:	c1 ea 03             	shr    edx,0x3
c0007d2e:	0f b6 c0             	movzx  eax,al
c0007d31:	d3 c3                	rol    ebx,cl
c0007d33:	01 d6                	add    esi,edx
c0007d35:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d38:	d3 e0                	shl    eax,cl
c0007d3a:	21 fb                	and    ebx,edi
c0007d3c:	88 1e                	mov    BYTE PTR [esi],bl
c0007d3e:	8b 1d a0 26 02 c0    	mov    ebx,DWORD PTR ds:0xc00226a0
c0007d44:	01 da                	add    edx,ebx
c0007d46:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d48:	09 c8                	or     eax,ecx
c0007d4a:	88 02                	mov    BYTE PTR [edx],al
c0007d4c:	5b                   	pop    ebx
c0007d4d:	5e                   	pop    esi
c0007d4e:	5f                   	pop    edi
c0007d4f:	c3                   	ret    

c0007d50 <Phys::getPageState(unsigned long)>:
c0007d50:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d54:	8b 15 a0 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226a0
c0007d5a:	89 c8                	mov    eax,ecx
c0007d5c:	83 e1 07             	and    ecx,0x7
c0007d5f:	c1 e8 03             	shr    eax,0x3
c0007d62:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d66:	d3 f8                	sar    eax,cl
c0007d68:	83 e0 01             	and    eax,0x1
c0007d6b:	c3                   	ret    

c0007d6c <Phys::freePage(unsigned long)>:
c0007d6c:	53                   	push   ebx
c0007d6d:	83 ec 08             	sub    esp,0x8
c0007d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d74:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d7a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d80:	76 41                	jbe    c0007dc3 <Phys::freePage(unsigned long)+0x57>
c0007d82:	c1 e8 0c             	shr    eax,0xc
c0007d85:	50                   	push   eax
c0007d86:	89 c3                	mov    ebx,eax
c0007d88:	e8 c3 ff ff ff       	call   c0007d50 <Phys::getPageState(unsigned long)>
c0007d8d:	5a                   	pop    edx
c0007d8e:	84 c0                	test   al,al
c0007d90:	74 20                	je     c0007db2 <Phys::freePage(unsigned long)+0x46>
c0007d92:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 00                	push   0x0
c0007d9c:	53                   	push   ebx
c0007d9d:	83 e8 01             	sub    eax,0x1
c0007da0:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007da5:	e8 66 ff ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007daa:	83 c4 10             	add    esp,0x10
c0007dad:	83 c4 08             	add    esp,0x8
c0007db0:	5b                   	pop    ebx
c0007db1:	c3                   	ret    
c0007db2:	c7 44 24 10 11 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020011
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	e9 7a 8d 00 00       	jmp    c0010b3d <KePanic(char const*)>
c0007dc3:	68 00 10 00 00       	push   0x1000
c0007dc8:	50                   	push   eax
c0007dc9:	e8 07 ff ff ff       	call   c0007cd5 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dce:	59                   	pop    ecx
c0007dcf:	5b                   	pop    ebx
c0007dd0:	83 c4 08             	add    esp,0x8
c0007dd3:	5b                   	pop    ebx
c0007dd4:	c3                   	ret    

c0007dd5 <Phys::allocatePage()>:
c0007dd5:	56                   	push   esi
c0007dd6:	53                   	push   ebx
c0007dd7:	83 ec 14             	sub    esp,0x14
c0007dda:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007de0:	89 f3                	mov    ebx,esi
c0007de2:	eb 0a                	jmp    c0007dee <Phys::allocatePage()+0x19>
c0007de4:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007dea:	39 de                	cmp    esi,ebx
c0007dec:	74 26                	je     c0007e14 <Phys::allocatePage()+0x3f>
c0007dee:	53                   	push   ebx
c0007def:	e8 5c ff ff ff       	call   c0007d50 <Phys::getPageState(unsigned long)>
c0007df4:	5a                   	pop    edx
c0007df5:	84 c0                	test   al,al
c0007df7:	74 67                	je     c0007e60 <Phys::allocatePage()+0x8b>
c0007df9:	83 c3 01             	add    ebx,0x1
c0007dfc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e02:	75 e0                	jne    c0007de4 <Phys::allocatePage()+0xf>
c0007e04:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007e0e:	31 db                	xor    ebx,ebx
c0007e10:	39 de                	cmp    esi,ebx
c0007e12:	75 da                	jne    c0007dee <Phys::allocatePage()+0x19>
c0007e14:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007e19:	83 ec 0c             	sub    esp,0xc
c0007e1c:	83 f0 01             	xor    eax,0x1
c0007e1f:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e2c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e32:	50                   	push   eax
c0007e33:	e8 b8 27 00 00       	call   c000a5f0 <VAS::scanForEviction()>
c0007e38:	83 c4 10             	add    esp,0x10
c0007e3b:	85 c0                	test   eax,eax
c0007e3d:	75 48                	jne    c0007e87 <Phys::allocatePage()+0xb2>
c0007e3f:	83 ec 0c             	sub    esp,0xc
c0007e42:	68 94 ff 01 c0       	push   0xc001ff94
c0007e47:	e8 f1 8c 00 00       	call   c0010b3d <KePanic(char const*)>
c0007e4c:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e52:	83 c4 10             	add    esp,0x10
c0007e55:	53                   	push   ebx
c0007e56:	e8 f5 fe ff ff       	call   c0007d50 <Phys::getPageState(unsigned long)>
c0007e5b:	5a                   	pop    edx
c0007e5c:	84 c0                	test   al,al
c0007e5e:	75 99                	jne    c0007df9 <Phys::allocatePage()+0x24>
c0007e60:	6a 01                	push   0x1
c0007e62:	53                   	push   ebx
c0007e63:	e8 a8 fe ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007e68:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e6e:	59                   	pop    ecx
c0007e6f:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e74:	5b                   	pop    ebx
c0007e75:	83 c2 01             	add    edx,0x1
c0007e78:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e7e:	c1 e0 0c             	shl    eax,0xc
c0007e81:	83 c4 14             	add    esp,0x14
c0007e84:	5b                   	pop    ebx
c0007e85:	5e                   	pop    esi
c0007e86:	c3                   	ret    
c0007e87:	83 ec 08             	sub    esp,0x8
c0007e8a:	89 c2                	mov    edx,eax
c0007e8c:	6a 01                	push   0x1
c0007e8e:	c1 ea 0c             	shr    edx,0xc
c0007e91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e95:	52                   	push   edx
c0007e96:	e8 75 fe ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007e9b:	83 c4 10             	add    esp,0x10
c0007e9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ea2:	eb dd                	jmp    c0007e81 <Phys::allocatePage()+0xac>

c0007ea4 <Phys::allocateContiguousPages(int)>:
c0007ea4:	57                   	push   edi
c0007ea5:	56                   	push   esi
c0007ea6:	53                   	push   ebx
c0007ea7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eab:	fa                   	cli    
c0007eac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007eb1:	31 db                	xor    ebx,ebx
c0007eb3:	83 c0 01             	add    eax,0x1
c0007eb6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ebb:	85 db                	test   ebx,ebx
c0007ebd:	75 11                	jne    c0007ed0 <Phys::allocateContiguousPages(int)+0x2c>
c0007ebf:	e8 11 ff ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0007ec4:	83 fe 01             	cmp    esi,0x1
c0007ec7:	89 c7                	mov    edi,eax
c0007ec9:	74 21                	je     c0007eec <Phys::allocateContiguousPages(int)+0x48>
c0007ecb:	bb 01 00 00 00       	mov    ebx,0x1
c0007ed0:	e8 00 ff ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0007ed5:	89 da                	mov    edx,ebx
c0007ed7:	c1 e2 0c             	shl    edx,0xc
c0007eda:	01 fa                	add    edx,edi
c0007edc:	39 c2                	cmp    edx,eax
c0007ede:	74 22                	je     c0007f02 <Phys::allocateContiguousPages(int)+0x5e>
c0007ee0:	83 fe 01             	cmp    esi,0x1
c0007ee3:	bb 01 00 00 00       	mov    ebx,0x1
c0007ee8:	89 c7                	mov    edi,eax
c0007eea:	75 e4                	jne    c0007ed0 <Phys::allocateContiguousPages(int)+0x2c>
c0007eec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ef1:	83 e8 01             	sub    eax,0x1
c0007ef4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ef9:	75 01                	jne    c0007efc <Phys::allocateContiguousPages(int)+0x58>
c0007efb:	fb                   	sti    
c0007efc:	5b                   	pop    ebx
c0007efd:	89 f8                	mov    eax,edi
c0007eff:	5e                   	pop    esi
c0007f00:	5f                   	pop    edi
c0007f01:	c3                   	ret    
c0007f02:	83 c3 01             	add    ebx,0x1
c0007f05:	39 f3                	cmp    ebx,esi
c0007f07:	75 b2                	jne    c0007ebb <Phys::allocateContiguousPages(int)+0x17>
c0007f09:	eb e1                	jmp    c0007eec <Phys::allocateContiguousPages(int)+0x48>

c0007f0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f0b:	56                   	push   esi
c0007f0c:	53                   	push   ebx
c0007f0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f11:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f17:	73 06                	jae    c0007f1f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f19:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f23:	c1 eb 0c             	shr    ebx,0xc
c0007f26:	c1 e8 0c             	shr    eax,0xc
c0007f29:	39 d8                	cmp    eax,ebx
c0007f2b:	73 13                	jae    c0007f40 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f2d:	6a 00                	push   0x0
c0007f2f:	50                   	push   eax
c0007f30:	8d 70 01             	lea    esi,[eax+0x1]
c0007f33:	e8 d8 fd ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007f38:	39 f3                	cmp    ebx,esi
c0007f3a:	89 f0                	mov    eax,esi
c0007f3c:	5a                   	pop    edx
c0007f3d:	59                   	pop    ecx
c0007f3e:	75 ed                	jne    c0007f2d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f40:	5b                   	pop    ebx
c0007f41:	5e                   	pop    esi
c0007f42:	c3                   	ret    

c0007f43 <Phys::physicalMemorySetup(unsigned int)>:
c0007f43:	55                   	push   ebp
c0007f44:	57                   	push   edi
c0007f45:	56                   	push   esi
c0007f46:	53                   	push   ebx
c0007f47:	31 db                	xor    ebx,ebx
c0007f49:	83 ec 40             	sub    esp,0x40
c0007f4c:	6a 10                	push   0x10
c0007f4e:	6a 00                	push   0x0
c0007f50:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f55:	e8 96 85 ff ff       	call   c00004f0 <memset>
c0007f5a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f63:	05 00 10 00 00       	add    eax,0x1000
c0007f68:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f6c:	5a                   	pop    edx
c0007f6d:	59                   	pop    ecx
c0007f6e:	50                   	push   eax
c0007f6f:	68 27 00 02 c0       	push   0xc0020027
c0007f74:	e8 c3 29 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0007f79:	83 c4 10             	add    esp,0x10
c0007f7c:	83 ec 08             	sub    esp,0x8
c0007f7f:	6a 01                	push   0x1
c0007f81:	53                   	push   ebx
c0007f82:	83 c3 01             	add    ebx,0x1
c0007f85:	e8 86 fd ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007f8a:	83 c4 10             	add    esp,0x10
c0007f8d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f93:	75 e7                	jne    c0007f7c <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f95:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f9c:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fa3:	c1 e0 08             	shl    eax,0x8
c0007fa6:	09 c2                	or     edx,eax
c0007fa8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fac:	0f 84 43 01 00 00    	je     c00080f5 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fb2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fba:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fbf:	e9 82 00 00 00       	jmp    c0008046 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fc4:	ba 00 00 08 00       	mov    edx,0x80000
c0007fc9:	89 c1                	mov    ecx,eax
c0007fcb:	39 f2                	cmp    edx,esi
c0007fcd:	19 f9                	sbb    ecx,edi
c0007fcf:	0f 82 c0 00 00 00    	jb     c0008095 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fd9:	89 c5                	mov    ebp,eax
c0007fdb:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fdf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007fe3:	19 cd                	sbb    ebp,ecx
c0007fe5:	0f 83 af 00 00 00    	jae    c000809a <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007feb:	89 d6                	mov    esi,edx
c0007fed:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007ff2:	39 f2                	cmp    edx,esi
c0007ff4:	89 cf                	mov    edi,ecx
c0007ff6:	19 c8                	sbb    eax,ecx
c0007ff8:	73 07                	jae    c0008001 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0007ffa:	be 00 00 0a 00       	mov    esi,0xa0000
c0007fff:	31 ff                	xor    edi,edi
c0008001:	89 f2                	mov    edx,esi
c0008003:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008008:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000800e:	89 f9                	mov    ecx,edi
c0008010:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008014:	83 d1 ff             	adc    ecx,0xffffffff
c0008017:	39 d0                	cmp    eax,edx
c0008019:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000801d:	b8 00 00 00 00       	mov    eax,0x0
c0008022:	19 c8                	sbb    eax,ecx
c0008024:	0f 82 9d 01 00 00    	jb     c00081c7 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000802a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000802e:	83 c3 18             	add    ebx,0x18
c0008031:	83 c6 01             	add    esi,0x1
c0008034:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008038:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000803c:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0008040:	0f 84 bf 00 00 00    	je     c0008105 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008046:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008048:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000804b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000804e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008051:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008055:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008058:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000805c:	01 f0                	add    eax,esi
c000805e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008062:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008066:	55                   	push   ebp
c0008067:	11 fa                	adc    edx,edi
c0008069:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000806d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008075:	50                   	push   eax
c0008076:	56                   	push   esi
c0008077:	68 c4 ff 01 c0       	push   0xc001ffc4
c000807c:	e8 bb 28 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0008081:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008085:	83 c4 10             	add    esp,0x10
c0008088:	09 f8                	or     eax,edi
c000808a:	75 79                	jne    c0008105 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000808c:	83 fd 01             	cmp    ebp,0x1
c000808f:	0f 84 2f ff ff ff    	je     c0007fc4 <Phys::physicalMemorySetup(unsigned int)+0x81>
c0008095:	83 fd 01             	cmp    ebp,0x1
c0008098:	75 90                	jne    c000802a <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000809a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000809e:	31 d2                	xor    edx,edx
c00080a0:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080a4:	89 c8                	mov    eax,ecx
c00080a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080aa:	19 d1                	sbb    ecx,edx
c00080ac:	0f 82 78 ff ff ff    	jb     c000802a <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080b2:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080b7:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080bb:	b9 00 00 00 00       	mov    ecx,0x0
c00080c0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080c4:	0f 83 60 ff ff ff    	jae    c000802a <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080ca:	39 c6                	cmp    esi,eax
c00080cc:	19 d7                	sbb    edi,edx
c00080ce:	0f 83 ff 00 00 00    	jae    c00081d3 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080d4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080dc:	29 c7                	sub    edi,eax
c00080de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080e2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080e6:	19 d5                	sbb    ebp,edx
c00080e8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080f0:	e9 de 00 00 00       	jmp    c00081d3 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080f5:	83 ec 0c             	sub    esp,0xc
c00080f8:	68 3f 00 02 c0       	push   0xc002003f
c00080fd:	e8 3b 8a 00 00       	call   c0010b3d <KePanic(char const*)>
c0008102:	83 c4 10             	add    esp,0x10
c0008105:	83 ec 08             	sub    esp,0x8
c0008108:	bb 60 00 00 00       	mov    ebx,0x60
c000810d:	6a 00                	push   0x0
c000810f:	6a 06                	push   0x6
c0008111:	e8 fa fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0008116:	58                   	pop    eax
c0008117:	5a                   	pop    edx
c0008118:	6a 00                	push   0x0
c000811a:	6a 07                	push   0x7
c000811c:	e8 ef fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0008121:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0008127:	83 c4 10             	add    esp,0x10
c000812a:	83 c1 02             	add    ecx,0x2
c000812d:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c0008133:	83 ec 08             	sub    esp,0x8
c0008136:	6a 00                	push   0x0
c0008138:	53                   	push   ebx
c0008139:	83 c3 01             	add    ebx,0x1
c000813c:	e8 cf fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000814a:	75 e7                	jne    c0008133 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000814c:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008151:	bb 40 01 00 00       	mov    ebx,0x140
c0008156:	83 c0 20             	add    eax,0x20
c0008159:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000815e:	eb 26                	jmp    c0008186 <Phys::physicalMemorySetup(unsigned int)+0x243>
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	6a 00                	push   0x0
c0008165:	53                   	push   ebx
c0008166:	83 c3 01             	add    ebx,0x1
c0008169:	e8 a2 fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c000816e:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008173:	83 c4 10             	add    esp,0x10
c0008176:	83 c0 01             	add    eax,0x1
c0008179:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000817f:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008184:	74 07                	je     c000818d <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008186:	3d ff 03 00 00       	cmp    eax,0x3ff
c000818b:	7e d3                	jle    c0008160 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000818d:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008192:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008197:	7f 26                	jg     c00081bf <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0008199:	83 ec 08             	sub    esp,0x8
c000819c:	6a 00                	push   0x0
c000819e:	53                   	push   ebx
c000819f:	83 c3 01             	add    ebx,0x1
c00081a2:	e8 69 fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c00081a7:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081ac:	83 c4 10             	add    esp,0x10
c00081af:	83 c0 01             	add    eax,0x1
c00081b2:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081b8:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081bd:	75 d3                	jne    c0008192 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081bf:	83 c4 3c             	add    esp,0x3c
c00081c2:	5b                   	pop    ebx
c00081c3:	5e                   	pop    esi
c00081c4:	5f                   	pop    edi
c00081c5:	5d                   	pop    ebp
c00081c6:	c3                   	ret    
c00081c7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081cb:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081d3:	83 ec 04             	sub    esp,0x4
c00081d6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081da:	56                   	push   esi
c00081db:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081df:	57                   	push   edi
c00081e0:	68 e8 ff 01 c0       	push   0xc001ffe8
c00081e5:	e8 52 27 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00081ea:	5d                   	pop    ebp
c00081eb:	58                   	pop    eax
c00081ec:	56                   	push   esi
c00081ed:	57                   	push   edi
c00081ee:	e8 18 fd ff ff       	call   c0007f0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00081f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00081f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00081fb:	83 c4 0c             	add    esp,0xc
c00081fe:	8b 35 e8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ee8
c0008204:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008208:	01 f0                	add    eax,esi
c000820a:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000820f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008216:	52                   	push   edx
c0008217:	50                   	push   eax
c0008218:	68 4d 00 02 c0       	push   0xc002004d
c000821d:	e8 1a 27 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0008222:	83 c4 10             	add    esp,0x10
c0008225:	e9 00 fe ff ff       	jmp    c000802a <Phys::physicalMemorySetup(unsigned int)+0xe7>

c000822a <Pipe::isAtty()>:
c000822a:	31 c0                	xor    eax,eax
c000822c:	c3                   	ret    
c000822d:	90                   	nop

c000822e <Pipe::~Pipe()>:
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	ba ac 00 02 c0       	mov    edx,0xc00200ac
c0008236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000823a:	89 10                	mov    DWORD PTR [eax],edx
c000823c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008240:	83 ec 0c             	sub    esp,0xc
c0008243:	50                   	push   eax
c0008244:	e8 37 11 00 00       	call   c0009380 <UnixFile::~UnixFile()>
c0008249:	83 c4 10             	add    esp,0x10
c000824c:	90                   	nop
c000824d:	83 c4 0c             	add    esp,0xc
c0008250:	c3                   	ret    
c0008251:	90                   	nop

c0008252 <Pipe::~Pipe()>:
c0008252:	83 ec 0c             	sub    esp,0xc
c0008255:	83 ec 0c             	sub    esp,0xc
c0008258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825c:	e8 cd ff ff ff       	call   c000822e <Pipe::~Pipe()>
c0008261:	83 c4 10             	add    esp,0x10
c0008264:	83 ec 08             	sub    esp,0x8
c0008267:	6a 20                	push   0x20
c0008269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826d:	e8 cc 25 00 00       	call   c000a83e <operator delete(void*, unsigned long)>
c0008272:	83 c4 10             	add    esp,0x10
c0008275:	83 c4 0c             	add    esp,0xc
c0008278:	c3                   	ret    
c0008279:	90                   	nop

c000827a <Pipe::write(unsigned long long, void*, int*)>:
c000827a:	55                   	push   ebp
c000827b:	57                   	push   edi
c000827c:	56                   	push   esi
c000827d:	53                   	push   ebx
c000827e:	83 ec 1c             	sub    esp,0x1c
c0008281:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008285:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008289:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000828d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008290:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008294:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008297:	89 04 24             	mov    DWORD PTR [esp],eax
c000829a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000829e:	89 d8                	mov    eax,ebx
c00082a0:	89 d6                	mov    esi,edx
c00082a2:	89 d7                	mov    edi,edx
c00082a4:	c1 ff 1f             	sar    edi,0x1f
c00082a7:	03 34 24             	add    esi,DWORD PTR [esp]
c00082aa:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082ae:	c1 f8 1f             	sar    eax,0x1f
c00082b1:	39 f3                	cmp    ebx,esi
c00082b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082bb:	19 f8                	sbb    eax,edi
c00082bd:	b8 01 00 00 00       	mov    eax,0x1
c00082c2:	72 72                	jb     c0008336 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082c7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082cb:	01 d0                	add    eax,edx
c00082cd:	99                   	cdq    
c00082ce:	f7 fb                	idiv   ebx
c00082d0:	89 d8                	mov    eax,ebx
c00082d2:	29 d0                	sub    eax,edx
c00082d4:	89 d6                	mov    esi,edx
c00082d6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082d9:	89 c3                	mov    ebx,eax
c00082db:	c1 fb 1f             	sar    ebx,0x1f
c00082de:	39 c2                	cmp    edx,eax
c00082e0:	19 df                	sbb    edi,ebx
c00082e2:	bb 00 00 00 00       	mov    ebx,0x0
c00082e7:	72 04                	jb     c00082ed <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082e9:	89 d3                	mov    ebx,edx
c00082eb:	29 c3                	sub    ebx,eax
c00082ed:	89 d0                	mov    eax,edx
c00082ef:	29 d8                	sub    eax,ebx
c00082f1:	74 0d                	je     c0008300 <Pipe::write(unsigned long long, void*, int*)+0x86>
c00082f3:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f6:	89 c1                	mov    ecx,eax
c00082f8:	01 f7                	add    edi,esi
c00082fa:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008300:	85 db                	test   ebx,ebx
c0008302:	74 0d                	je     c0008311 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008304:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008308:	89 d9                	mov    ecx,ebx
c000830a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000830d:	89 c6                	mov    esi,eax
c000830f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008311:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008314:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008319:	75 10                	jne    c000832b <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000831b:	83 ec 0c             	sub    esp,0xc
c000831e:	68 69 00 02 c0       	push   0xc0020069
c0008323:	e8 15 88 00 00       	call   c0010b3d <KePanic(char const*)>
c0008328:	83 c4 10             	add    esp,0x10
c000832b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000832f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008332:	89 08                	mov    DWORD PTR [eax],ecx
c0008334:	31 c0                	xor    eax,eax
c0008336:	83 c4 1c             	add    esp,0x1c
c0008339:	5b                   	pop    ebx
c000833a:	5e                   	pop    esi
c000833b:	5f                   	pop    edi
c000833c:	5d                   	pop    ebp
c000833d:	c3                   	ret    

c000833e <Pipe::read(unsigned long long, void*, int*)>:
c000833e:	55                   	push   ebp
c000833f:	57                   	push   edi
c0008340:	56                   	push   esi
c0008341:	53                   	push   ebx
c0008342:	83 ec 1c             	sub    esp,0x1c
c0008345:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008349:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000834d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008351:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008354:	89 c8                	mov    eax,ecx
c0008356:	99                   	cdq    
c0008357:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000835b:	74 24                	je     c0008381 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000835d:	39 f9                	cmp    ecx,edi
c000835f:	89 d1                	mov    ecx,edx
c0008361:	19 f1                	sbb    ecx,esi
c0008363:	73 1c                	jae    c0008381 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008365:	fa                   	cli    
c0008366:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000836c:	e8 fb cf 00 00       	call   c001536c <schedule()>
c0008371:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0008376:	48                   	dec    eax
c0008377:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000837c:	75 d3                	jne    c0008351 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000837e:	fb                   	sti    
c000837f:	eb d0                	jmp    c0008351 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008381:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008385:	39 f8                	cmp    eax,edi
c0008387:	89 d1                	mov    ecx,edx
c0008389:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000838d:	19 f1                	sbb    ecx,esi
c000838f:	73 08                	jae    c0008399 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0008391:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008395:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008399:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000839c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000839f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083a3:	29 f7                	sub    edi,esi
c00083a5:	89 f8                	mov    eax,edi
c00083a7:	99                   	cdq    
c00083a8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ac:	89 d0                	mov    eax,edx
c00083ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083b2:	19 c2                	sbb    edx,eax
c00083b4:	89 f8                	mov    eax,edi
c00083b6:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083bb:	89 ea                	mov    edx,ebp
c00083bd:	29 c2                	sub    edx,eax
c00083bf:	85 c0                	test   eax,eax
c00083c1:	74 0b                	je     c00083ce <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083c3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083c6:	89 c1                	mov    ecx,eax
c00083c8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ce:	85 d2                	test   edx,edx
c00083d0:	74 0d                	je     c00083df <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083d2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d6:	89 d1                	mov    ecx,edx
c00083d8:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083db:	89 c7                	mov    edi,eax
c00083dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083df:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083e2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083e8:	99                   	cdq    
c00083e9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083ed:	89 f7                	mov    edi,esi
c00083ef:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00083f3:	c1 ff 1f             	sar    edi,0x1f
c00083f6:	57                   	push   edi
c00083f7:	56                   	push   esi
c00083f8:	52                   	push   edx
c00083f9:	50                   	push   eax
c00083fa:	e8 b1 66 01 00       	call   c001eab0 <__umoddi3>
c00083ff:	83 c4 10             	add    esp,0x10
c0008402:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008407:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000840a:	75 10                	jne    c000841c <Pipe::read(unsigned long long, void*, int*)+0xde>
c000840c:	83 ec 0c             	sub    esp,0xc
c000840f:	68 86 00 02 c0       	push   0xc0020086
c0008414:	e8 24 87 00 00       	call   c0010b3d <KePanic(char const*)>
c0008419:	83 c4 10             	add    esp,0x10
c000841c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008420:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008424:	89 10                	mov    DWORD PTR [eax],edx
c0008426:	83 c4 1c             	add    esp,0x1c
c0008429:	31 c0                	xor    eax,eax
c000842b:	5b                   	pop    ebx
c000842c:	5e                   	pop    esi
c000842d:	5f                   	pop    edi
c000842e:	5d                   	pop    ebp
c000842f:	c3                   	ret    

c0008430 <Pipe::Pipe(int)>:
c0008430:	83 ec 0c             	sub    esp,0xc
c0008433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008437:	83 ec 08             	sub    esp,0x8
c000843a:	6a 00                	push   0x0
c000843c:	50                   	push   eax
c000843d:	e8 58 0d 00 00       	call   c000919a <UnixFile::UnixFile(int)>
c0008442:	83 c4 10             	add    esp,0x10
c0008445:	ba ac 00 02 c0       	mov    edx,0xc00200ac
c000844a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844e:	89 10                	mov    DWORD PTR [eax],edx
c0008450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008454:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008458:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000845b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008471:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008475:	83 ec 0c             	sub    esp,0xc
c0008478:	50                   	push   eax
c0008479:	e8 4d f6 ff ff       	call   c0007acb <malloc>
c000847e:	83 c4 10             	add    esp,0x10
c0008481:	89 c2                	mov    edx,eax
c0008483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008487:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000848a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008492:	90                   	nop
c0008493:	83 c4 0c             	add    esp,0xc
c0008496:	c3                   	ret    
c0008497:	90                   	nop

c0008498 <VgaText::isAtty()>:
c0008498:	b0 01                	mov    al,0x1
c000849a:	c3                   	ret    
c000849b:	90                   	nop

c000849c <VgaText::~VgaText()>:
c000849c:	83 ec 0c             	sub    esp,0xc
c000849f:	ba f4 00 02 c0       	mov    edx,0xc00200f4
c00084a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a8:	89 10                	mov    DWORD PTR [eax],edx
c00084aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084ae:	83 ec 0c             	sub    esp,0xc
c00084b1:	50                   	push   eax
c00084b2:	e8 c9 0e 00 00       	call   c0009380 <UnixFile::~UnixFile()>
c00084b7:	83 c4 10             	add    esp,0x10
c00084ba:	90                   	nop
c00084bb:	83 c4 0c             	add    esp,0xc
c00084be:	c3                   	ret    
c00084bf:	90                   	nop

c00084c0 <VgaText::~VgaText()>:
c00084c0:	83 ec 0c             	sub    esp,0xc
c00084c3:	83 ec 0c             	sub    esp,0xc
c00084c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ca:	e8 cd ff ff ff       	call   c000849c <VgaText::~VgaText()>
c00084cf:	83 c4 10             	add    esp,0x10
c00084d2:	83 ec 08             	sub    esp,0x8
c00084d5:	68 84 01 00 00       	push   0x184
c00084da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084de:	e8 5b 23 00 00       	call   c000a83e <operator delete(void*, unsigned long)>
c00084e3:	83 c4 10             	add    esp,0x10
c00084e6:	83 c4 0c             	add    esp,0xc
c00084e9:	c3                   	ret    

c00084ea <VgaText::read(unsigned long long, void*, int*)>:
c00084ea:	83 ec 10             	sub    esp,0x10
c00084ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f9:	e8 58 4a 00 00       	call   c000cf56 <readKeyboard(VgaText*, char*, unsigned long)>
c00084fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008502:	89 02                	mov    DWORD PTR [edx],eax
c0008504:	31 c0                	xor    eax,eax
c0008506:	83 c4 1c             	add    esp,0x1c
c0008509:	c3                   	ret    

c000850a <setTerminalScrollLock(bool)>:
c000850a:	c3                   	ret    

c000850b <doTerminalCycle()>:
c000850b:	c3                   	ret    

c000850c <addToTerminalCycle(VgaText*)>:
c000850c:	c3                   	ret    

c000850d <scrollTerminalScrollLock(int)>:
c000850d:	c3                   	ret    

c000850e <VgaText::updateTitle()>:
c000850e:	c3                   	ret    
c000850f:	90                   	nop

c0008510 <VgaText::load()>:
c0008510:	c3                   	ret    
c0008511:	90                   	nop

c0008512 <VgaText::updateCursor()>:
c0008512:	83 ec 14             	sub    esp,0x14
c0008515:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008519:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000851c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000851f:	e8 e8 fb 00 00       	call   c001810c <HalConsoleCursorUpdate(int, int)>
c0008524:	83 c4 1c             	add    esp,0x1c
c0008527:	c3                   	ret    

c0008528 <VgaText::doANSI_SGR(int)>:
c0008528:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000852c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008530:	85 d2                	test   edx,edx
c0008532:	75 0b                	jne    c000853f <VgaText::doANSI_SGR(int)+0x17>
c0008534:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008537:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000853a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000853d:	eb 59                	jmp    c0008598 <VgaText::doANSI_SGR(int)+0x70>
c000853f:	83 fa 07             	cmp    edx,0x7
c0008542:	75 0b                	jne    c000854f <VgaText::doANSI_SGR(int)+0x27>
c0008544:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008547:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000854a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000854d:	eb 49                	jmp    c0008598 <VgaText::doANSI_SGR(int)+0x70>
c000854f:	83 fa 1b             	cmp    edx,0x1b
c0008552:	74 e0                	je     c0008534 <VgaText::doANSI_SGR(int)+0xc>
c0008554:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008557:	83 f9 07             	cmp    ecx,0x7
c000855a:	77 09                	ja     c0008565 <VgaText::doANSI_SGR(int)+0x3d>
c000855c:	8b 14 8d e0 26 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd920]
c0008563:	eb 20                	jmp    c0008585 <VgaText::doANSI_SGR(int)+0x5d>
c0008565:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008568:	83 f9 07             	cmp    ecx,0x7
c000856b:	77 09                	ja     c0008576 <VgaText::doANSI_SGR(int)+0x4e>
c000856d:	8b 14 8d e0 26 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd920]
c0008574:	eb 22                	jmp    c0008598 <VgaText::doANSI_SGR(int)+0x70>
c0008576:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008579:	83 f9 07             	cmp    ecx,0x7
c000857c:	77 0b                	ja     c0008589 <VgaText::doANSI_SGR(int)+0x61>
c000857e:	8b 14 95 98 25 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdda68]
c0008585:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008588:	c3                   	ret    
c0008589:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000858c:	83 f9 07             	cmp    ecx,0x7
c000858f:	77 0a                	ja     c000859b <VgaText::doANSI_SGR(int)+0x73>
c0008591:	8b 14 95 70 25 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdda90]
c0008598:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000859b:	c3                   	ret    

c000859c <VgaText::setDefaultBgColour(VgaColour)>:
c000859c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085a4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085a7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085aa:	c3                   	ret    
c00085ab:	90                   	nop

c00085ac <VgaText::setDefaultFgColour(VgaColour)>:
c00085ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085b7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085ba:	c3                   	ret    
c00085bb:	90                   	nop

c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085bc:	53                   	push   ebx
c00085bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c9:	51                   	push   ecx
c00085ca:	e8 cd ff ff ff       	call   c000859c <VgaText::setDefaultBgColour(VgaColour)>
c00085cf:	58                   	pop    eax
c00085d0:	5a                   	pop    edx
c00085d1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085d5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d9:	5b                   	pop    ebx
c00085da:	eb d0                	jmp    c00085ac <VgaText::setDefaultFgColour(VgaColour)>

c00085dc <VgaText::setTitleTextColour(VgaColour)>:
c00085dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085e7:	c3                   	ret    

c00085e8 <VgaText::setTitleColour(VgaColour)>:
c00085e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085f3:	c3                   	ret    

c00085f4 <VgaText::setTitle(char*)>:
c00085f4:	c3                   	ret    
c00085f5:	90                   	nop

c00085f6 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085ff:	83 e0 0f             	and    eax,0xf
c0008602:	c1 e2 04             	shl    edx,0x4
c0008605:	09 d0                	or     eax,edx
c0008607:	c3                   	ret    

c0008608 <VgaText::scrollScreen()>:
c0008608:	55                   	push   ebp
c0008609:	57                   	push   edi
c000860a:	56                   	push   esi
c000860b:	be 01 00 00 00       	mov    esi,0x1
c0008610:	53                   	push   ebx
c0008611:	83 ec 0c             	sub    esp,0xc
c0008614:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008618:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000861b:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008621:	31 ff                	xor    edi,edi
c0008623:	01 e9                	add    ecx,ebp
c0008625:	8a 01                	mov    al,BYTE PTR [ecx]
c0008627:	83 fe 18             	cmp    esi,0x18
c000862a:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008630:	75 20                	jne    c0008652 <VgaText::scrollScreen()+0x4a>
c0008632:	f7 c7 01 00 00 00    	test   edi,0x1
c0008638:	74 15                	je     c000864f <VgaText::scrollScreen()+0x47>
c000863a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000863e:	50                   	push   eax
c000863f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008643:	50                   	push   eax
c0008644:	e8 ad ff ff ff       	call   c00085f6 <VgaText::combineColours(unsigned char, unsigned char)>
c0008649:	5a                   	pop    edx
c000864a:	5a                   	pop    edx
c000864b:	88 01                	mov    BYTE PTR [ecx],al
c000864d:	eb 03                	jmp    c0008652 <VgaText::scrollScreen()+0x4a>
c000864f:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008652:	47                   	inc    edi
c0008653:	41                   	inc    ecx
c0008654:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000865a:	75 c9                	jne    c0008625 <VgaText::scrollScreen()+0x1d>
c000865c:	46                   	inc    esi
c000865d:	83 fe 19             	cmp    esi,0x19
c0008660:	75 b9                	jne    c000861b <VgaText::scrollScreen()+0x13>
c0008662:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008668:	75 1f                	jne    c0008689 <VgaText::scrollScreen()+0x81>
c000866a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000866e:	74 05                	je     c0008675 <VgaText::scrollScreen()+0x6d>
c0008670:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008673:	eb 14                	jmp    c0008689 <VgaText::scrollScreen()+0x81>
c0008675:	50                   	push   eax
c0008676:	50                   	push   eax
c0008677:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000867b:	50                   	push   eax
c000867c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008680:	50                   	push   eax
c0008681:	e8 1a f9 00 00       	call   c0017fa0 <HalConsoleScroll(int, int)>
c0008686:	83 c4 10             	add    esp,0x10
c0008689:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000868d:	83 c4 0c             	add    esp,0xc
c0008690:	5b                   	pop    ebx
c0008691:	5e                   	pop    esi
c0008692:	5f                   	pop    edi
c0008693:	5d                   	pop    ebp
c0008694:	e9 79 fe ff ff       	jmp    c0008512 <VgaText::updateCursor()>
c0008699:	90                   	nop

c000869a <VgaText::combineCharAndColour(char, unsigned char)>:
c000869a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000869f:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086a4:	c1 e0 08             	shl    eax,0x8
c00086a7:	09 d0                	or     eax,edx
c00086a9:	c3                   	ret    

c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086aa:	55                   	push   ebp
c00086ab:	57                   	push   edi
c00086ac:	56                   	push   esi
c00086ad:	53                   	push   ebx
c00086ae:	83 ec 1c             	sub    esp,0x1c
c00086b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086bd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086c5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c9:	0f b6 c3             	movzx  eax,bl
c00086cc:	50                   	push   eax
c00086cd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086d2:	50                   	push   eax
c00086d3:	e8 1e ff ff ff       	call   c00085f6 <VgaText::combineColours(unsigned char, unsigned char)>
c00086d8:	5a                   	pop    edx
c00086d9:	59                   	pop    ecx
c00086da:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086df:	0f b6 c0             	movzx  eax,al
c00086e2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086e6:	50                   	push   eax
c00086e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086eb:	e8 aa ff ff ff       	call   c000869a <VgaText::combineCharAndColour(char, unsigned char)>
c00086f0:	5a                   	pop    edx
c00086f1:	6b d7 50             	imul   edx,edi,0x50
c00086f4:	59                   	pop    ecx
c00086f5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f8:	01 f2                	add    edx,esi
c00086fa:	0f b7 d2             	movzx  edx,dx
c00086fd:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008701:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008707:	75 28                	jne    c0008731 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008709:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000870d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008711:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008715:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008719:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000871d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008721:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008725:	83 c4 1c             	add    esp,0x1c
c0008728:	5b                   	pop    ebx
c0008729:	5e                   	pop    esi
c000872a:	5f                   	pop    edi
c000872b:	5d                   	pop    ebp
c000872c:	e9 77 f9 00 00       	jmp    c00180a8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008731:	83 c4 1c             	add    esp,0x1c
c0008734:	5b                   	pop    ebx
c0008735:	5e                   	pop    esi
c0008736:	5f                   	pop    edi
c0008737:	5d                   	pop    ebp
c0008738:	c3                   	ret    
c0008739:	90                   	nop

c000873a <VgaText::getCursorX()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008741:	c3                   	ret    

c0008742 <VgaText::getCursorY()>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008749:	c3                   	ret    

c000874a <VgaText::setCursor(int, int)>:
c000874a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008752:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008755:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008759:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000875c:	e9 b1 fd ff ff       	jmp    c0008512 <VgaText::updateCursor()>

c0008761 <setActiveTerminal(VgaText*)>:
c0008761:	53                   	push   ebx
c0008762:	83 ec 08             	sub    esp,0x8
c0008765:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008769:	85 db                	test   ebx,ebx
c000876b:	75 11                	jne    c000877e <setActiveTerminal(VgaText*)+0x1d>
c000876d:	c7 44 24 10 c0 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc00200c0
c0008775:	83 c4 08             	add    esp,0x8
c0008778:	5b                   	pop    ebx
c0008779:	e9 bf 83 00 00       	jmp    c0010b3d <KePanic(char const*)>
c000877e:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008783:	85 c0                	test   eax,eax
c0008785:	74 0c                	je     c0008793 <setActiveTerminal(VgaText*)+0x32>
c0008787:	83 ec 0c             	sub    esp,0xc
c000878a:	50                   	push   eax
c000878b:	e8 82 fd ff ff       	call   c0008512 <VgaText::updateCursor()>
c0008790:	83 c4 10             	add    esp,0x10
c0008793:	50                   	push   eax
c0008794:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008797:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c000879d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087a0:	53                   	push   ebx
c00087a1:	e8 a4 ff ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c00087a6:	83 c4 18             	add    esp,0x18
c00087a9:	5b                   	pop    ebx
c00087aa:	c3                   	ret    
c00087ab:	90                   	nop

c00087ac <VgaText::clearScreen()>:
c00087ac:	57                   	push   edi
c00087ad:	56                   	push   esi
c00087ae:	31 f6                	xor    esi,esi
c00087b0:	53                   	push   ebx
c00087b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087b5:	52                   	push   edx
c00087b6:	6a 00                	push   0x0
c00087b8:	6a 00                	push   0x0
c00087ba:	53                   	push   ebx
c00087bb:	e8 8a ff ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c00087c0:	83 c4 10             	add    esp,0x10
c00087c3:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087ca:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087cd:	7e 20                	jle    c00087ef <VgaText::clearScreen()+0x43>
c00087cf:	31 ff                	xor    edi,edi
c00087d1:	50                   	push   eax
c00087d2:	50                   	push   eax
c00087d3:	56                   	push   esi
c00087d4:	57                   	push   edi
c00087d5:	47                   	inc    edi
c00087d6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087dc:	6a 20                	push   0x20
c00087de:	53                   	push   ebx
c00087df:	e8 c6 fe ff ff       	call   c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087e4:	83 c4 20             	add    esp,0x20
c00087e7:	83 ff 50             	cmp    edi,0x50
c00087ea:	75 e5                	jne    c00087d1 <VgaText::clearScreen()+0x25>
c00087ec:	46                   	inc    esi
c00087ed:	eb db                	jmp    c00087ca <VgaText::clearScreen()+0x1e>
c00087ef:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087f6:	5b                   	pop    ebx
c00087f7:	5e                   	pop    esi
c00087f8:	5f                   	pop    edi
c00087f9:	c3                   	ret    

c00087fa <VgaText::setCursorX(int)>:
c00087fa:	83 ec 10             	sub    esp,0x10
c00087fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008801:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008808:	50                   	push   eax
c0008809:	e8 3c ff ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c000880e:	83 c4 1c             	add    esp,0x1c
c0008811:	c3                   	ret    

c0008812 <VgaText::setCursorY(int)>:
c0008812:	83 ec 10             	sub    esp,0x10
c0008815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000881d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008820:	50                   	push   eax
c0008821:	e8 24 ff ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c0008826:	83 c4 1c             	add    esp,0x1c
c0008829:	c3                   	ret    

c000882a <VgaText::incrementCursor(bool)>:
c000882a:	56                   	push   esi
c000882b:	53                   	push   ebx
c000882c:	51                   	push   ecx
c000882d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008831:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008835:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008838:	40                   	inc    eax
c0008839:	83 f8 50             	cmp    eax,0x50
c000883c:	74 05                	je     c0008843 <VgaText::incrementCursor(bool)+0x19>
c000883e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008841:	eb 24                	jmp    c0008867 <VgaText::incrementCursor(bool)+0x3d>
c0008843:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000884a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000884d:	8d 50 01             	lea    edx,[eax+0x1]
c0008850:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008853:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008856:	75 0f                	jne    c0008867 <VgaText::incrementCursor(bool)+0x3d>
c0008858:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000885b:	83 ec 0c             	sub    esp,0xc
c000885e:	53                   	push   ebx
c000885f:	e8 a4 fd ff ff       	call   c0008608 <VgaText::scrollScreen()>
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	89 f0                	mov    eax,esi
c0008869:	84 c0                	test   al,al
c000886b:	74 0c                	je     c0008879 <VgaText::incrementCursor(bool)+0x4f>
c000886d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008871:	5a                   	pop    edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	e9 99 fc ff ff       	jmp    c0008512 <VgaText::updateCursor()>
c0008879:	58                   	pop    eax
c000887a:	5b                   	pop    ebx
c000887b:	5e                   	pop    esi
c000887c:	c3                   	ret    
c000887d:	90                   	nop

c000887e <VgaText::decrementCursor(bool)>:
c000887e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008882:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008886:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008889:	85 c0                	test   eax,eax
c000888b:	74 04                	je     c0008891 <VgaText::decrementCursor(bool)+0x13>
c000888d:	48                   	dec    eax
c000888e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008891:	84 c9                	test   cl,cl
c0008893:	74 09                	je     c000889e <VgaText::decrementCursor(bool)+0x20>
c0008895:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008899:	e9 74 fc ff ff       	jmp    c0008512 <VgaText::updateCursor()>
c000889e:	c3                   	ret    
c000889f:	90                   	nop

c00088a0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088a0:	53                   	push   ebx
c00088a1:	83 ec 08             	sub    esp,0x8
c00088a4:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088b5:	83 f8 07             	cmp    eax,0x7
c00088b8:	75 21                	jne    c00088db <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088c2:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088ca:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088d2:	83 c4 08             	add    esp,0x8
c00088d5:	5b                   	pop    ebx
c00088d6:	e9 b8 31 00 00       	jmp    c000ba93 <Krnl::beep(int, int, bool)>
c00088db:	83 f8 0d             	cmp    eax,0xd
c00088de:	75 09                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088e7:	eb 2d                	jmp    c0008916 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e9:	83 f8 0a             	cmp    eax,0xa
c00088ec:	75 31                	jne    c000891f <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088f8:	8d 50 01             	lea    edx,[eax+0x1]
c00088fb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088fe:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008901:	75 0f                	jne    c0008912 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008903:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008906:	83 ec 0c             	sub    esp,0xc
c0008909:	53                   	push   ebx
c000890a:	e8 f9 fc ff ff       	call   c0008608 <VgaText::scrollScreen()>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008916:	83 c4 08             	add    esp,0x8
c0008919:	5b                   	pop    ebx
c000891a:	e9 f3 fb ff ff       	jmp    c0008512 <VgaText::updateCursor()>
c000891f:	83 f8 08             	cmp    eax,0x8
c0008922:	75 25                	jne    c0008949 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008924:	50                   	push   eax
c0008925:	50                   	push   eax
c0008926:	6a 01                	push   0x1
c0008928:	53                   	push   ebx
c0008929:	e8 50 ff ff ff       	call   c000887e <VgaText::decrementCursor(bool)>
c000892e:	5a                   	pop    edx
c000892f:	59                   	pop    ecx
c0008930:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008933:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008936:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008939:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000893c:	6a 20                	push   0x20
c000893e:	53                   	push   ebx
c000893f:	e8 66 fd ff ff       	call   c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008944:	83 c4 28             	add    esp,0x28
c0008947:	5b                   	pop    ebx
c0008948:	c3                   	ret    
c0008949:	83 ec 08             	sub    esp,0x8
c000894c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000894f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008952:	51                   	push   ecx
c0008953:	52                   	push   edx
c0008954:	50                   	push   eax
c0008955:	53                   	push   ebx
c0008956:	e8 4f fd ff ff       	call   c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000895b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000895f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008967:	83 c4 28             	add    esp,0x28
c000896a:	5b                   	pop    ebx
c000896b:	e9 ba fe ff ff       	jmp    c000882a <VgaText::incrementCursor(bool)>

c0008970 <VgaText::putchar(char)>:
c0008970:	57                   	push   edi
c0008971:	56                   	push   esi
c0008972:	53                   	push   ebx
c0008973:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008977:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000897b:	0f be c2             	movsx  eax,dl
c000897e:	83 f8 5b             	cmp    eax,0x5b
c0008981:	75 18                	jne    c000899b <VgaText::putchar(char)+0x2b>
c0008983:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008987:	74 20                	je     c00089a9 <VgaText::putchar(char)+0x39>
c0008989:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008996:	e9 b8 00 00 00       	jmp    c0008a53 <VgaText::putchar(char)+0xe3>
c000899b:	83 f8 1b             	cmp    eax,0x1b
c000899e:	75 09                	jne    c00089a9 <VgaText::putchar(char)+0x39>
c00089a0:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a4:	e9 aa 00 00 00       	jmp    c0008a53 <VgaText::putchar(char)+0xe3>
c00089a9:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089ad:	89 f9                	mov    ecx,edi
c00089af:	84 c9                	test   cl,cl
c00089b1:	0f 84 8c 00 00 00    	je     c0008a43 <VgaText::putchar(char)+0xd3>
c00089b7:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089ba:	80 f9 3e             	cmp    cl,0x3e
c00089bd:	77 70                	ja     c0008a2f <VgaText::putchar(char)+0xbf>
c00089bf:	83 f8 6d             	cmp    eax,0x6d
c00089c2:	75 3f                	jne    c0008a03 <VgaText::putchar(char)+0x93>
c00089c4:	31 f6                	xor    esi,esi
c00089c6:	31 d2                	xor    edx,edx
c00089c8:	31 c0                	xor    eax,eax
c00089ca:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089cd:	7e 25                	jle    c00089f4 <VgaText::putchar(char)+0x84>
c00089cf:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d4:	83 fa 3b             	cmp    edx,0x3b
c00089d7:	75 0f                	jne    c00089e8 <VgaText::putchar(char)+0x78>
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 48 fb ff ff       	call   c0008528 <VgaText::doANSI_SGR(int)>
c00089e0:	31 d2                	xor    edx,edx
c00089e2:	59                   	pop    ecx
c00089e3:	58                   	pop    eax
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	eb 09                	jmp    c00089f1 <VgaText::putchar(char)+0x81>
c00089e8:	6b c0 0a             	imul   eax,eax,0xa
c00089eb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089ef:	89 fa                	mov    edx,edi
c00089f1:	46                   	inc    esi
c00089f2:	eb d6                	jmp    c00089ca <VgaText::putchar(char)+0x5a>
c00089f4:	84 d2                	test   dl,dl
c00089f6:	74 2f                	je     c0008a27 <VgaText::putchar(char)+0xb7>
c00089f8:	50                   	push   eax
c00089f9:	53                   	push   ebx
c00089fa:	e8 29 fb ff ff       	call   c0008528 <VgaText::doANSI_SGR(int)>
c00089ff:	58                   	pop    eax
c0008a00:	5a                   	pop    edx
c0008a01:	eb 24                	jmp    c0008a27 <VgaText::putchar(char)+0xb7>
c0008a03:	83 f8 4a             	cmp    eax,0x4a
c0008a06:	75 1f                	jne    c0008a27 <VgaText::putchar(char)+0xb7>
c0008a08:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a0c:	75 19                	jne    c0008a27 <VgaText::putchar(char)+0xb7>
c0008a0e:	83 ec 0c             	sub    esp,0xc
c0008a11:	53                   	push   ebx
c0008a12:	e8 95 fd ff ff       	call   c00087ac <VgaText::clearScreen()>
c0008a17:	83 c4 0c             	add    esp,0xc
c0008a1a:	6a 00                	push   0x0
c0008a1c:	6a 00                	push   0x0
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 26 fd ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c0008a24:	83 c4 10             	add    esp,0x10
c0008a27:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a2d:	eb 24                	jmp    c0008a53 <VgaText::putchar(char)+0xe3>
c0008a2f:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a32:	83 f8 0e             	cmp    eax,0xe
c0008a35:	7f 1c                	jg     c0008a53 <VgaText::putchar(char)+0xe3>
c0008a37:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a3d:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a41:	eb 10                	jmp    c0008a53 <VgaText::putchar(char)+0xe3>
c0008a43:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a46:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a49:	50                   	push   eax
c0008a4a:	53                   	push   ebx
c0008a4b:	e8 50 fe ff ff       	call   c00088a0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a50:	83 c4 10             	add    esp,0x10
c0008a53:	5b                   	pop    ebx
c0008a54:	5e                   	pop    esi
c0008a55:	5f                   	pop    edi
c0008a56:	c3                   	ret    
c0008a57:	90                   	nop

c0008a58 <VgaText::putx(unsigned int)>:
c0008a58:	57                   	push   edi
c0008a59:	b9 11 00 00 00       	mov    ecx,0x11
c0008a5e:	56                   	push   esi
c0008a5f:	be ce 00 02 c0       	mov    esi,0xc00200ce
c0008a64:	53                   	push   ebx
c0008a65:	83 ec 20             	sub    esp,0x20
c0008a68:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a6c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a70:	fc                   	cld    
c0008a71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a73:	be 08 00 00 00       	mov    esi,0x8
c0008a78:	50                   	push   eax
c0008a79:	50                   	push   eax
c0008a7a:	89 d8                	mov    eax,ebx
c0008a7c:	c1 e8 1c             	shr    eax,0x1c
c0008a7f:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	50                   	push   eax
c0008a88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a8c:	e8 df fe ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008a91:	83 c4 10             	add    esp,0x10
c0008a94:	4e                   	dec    esi
c0008a95:	75 e1                	jne    c0008a78 <VgaText::putx(unsigned int)+0x20>
c0008a97:	83 c4 20             	add    esp,0x20
c0008a9a:	5b                   	pop    ebx
c0008a9b:	5e                   	pop    esi
c0008a9c:	5f                   	pop    edi
c0008a9d:	c3                   	ret    

c0008a9e <VgaText::puts(char const*)>:
c0008a9e:	53                   	push   ebx
c0008a9f:	83 ec 08             	sub    esp,0x8
c0008aa2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aa6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa9:	85 c0                	test   eax,eax
c0008aab:	74 12                	je     c0008abf <VgaText::puts(char const*)+0x21>
c0008aad:	51                   	push   ecx
c0008aae:	43                   	inc    ebx
c0008aaf:	51                   	push   ecx
c0008ab0:	50                   	push   eax
c0008ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ab5:	e8 b6 fe ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	eb e7                	jmp    c0008aa6 <VgaText::puts(char const*)+0x8>
c0008abf:	83 c4 08             	add    esp,0x8
c0008ac2:	5b                   	pop    ebx
c0008ac3:	c3                   	ret    

c0008ac4 <VgaText::write(unsigned long long, void*, int*)>:
c0008ac4:	55                   	push   ebp
c0008ac5:	57                   	push   edi
c0008ac6:	56                   	push   esi
c0008ac7:	53                   	push   ebx
c0008ac8:	83 ec 0c             	sub    esp,0xc
c0008acb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008acf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ad3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ad7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ade:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae1:	39 eb                	cmp    ebx,ebp
c0008ae3:	74 13                	je     c0008af8 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008ae5:	50                   	push   eax
c0008ae6:	43                   	inc    ebx
c0008ae7:	50                   	push   eax
c0008ae8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008aec:	50                   	push   eax
c0008aed:	56                   	push   esi
c0008aee:	e8 7d fe ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008af3:	83 c4 10             	add    esp,0x10
c0008af6:	eb e9                	jmp    c0008ae1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af8:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008aff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b03:	89 38                	mov    DWORD PTR [eax],edi
c0008b05:	83 c4 0c             	add    esp,0xc
c0008b08:	31 c0                	xor    eax,eax
c0008b0a:	5b                   	pop    ebx
c0008b0b:	5e                   	pop    esi
c0008b0c:	5f                   	pop    edi
c0008b0d:	5d                   	pop    ebp
c0008b0e:	c3                   	ret    
c0008b0f:	90                   	nop

c0008b10 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b10:	55                   	push   ebp
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	53                   	push   ebx
c0008b14:	83 ec 0c             	sub    esp,0xc
c0008b17:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b20:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b27:	50                   	push   eax
c0008b28:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2d:	50                   	push   eax
c0008b2e:	e8 c3 fa ff ff       	call   c00085f6 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b33:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b37:	5a                   	pop    edx
c0008b38:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b3b:	59                   	pop    ecx
c0008b3c:	0f b6 f8             	movzx  edi,al
c0008b3f:	0f b7 db             	movzx  ebx,bx
c0008b42:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b46:	01 db                	add    ebx,ebx
c0008b48:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b4b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b4e:	85 c0                	test   eax,eax
c0008b50:	0f 84 ef 00 00 00    	je     c0008c45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b56:	83 f8 0d             	cmp    eax,0xd
c0008b59:	75 0c                	jne    c0008b67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b5b:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b62:	e9 d8 00 00 00       	jmp    c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b67:	83 f8 0a             	cmp    eax,0xa
c0008b6a:	75 44                	jne    c0008bb0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b6c:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b73:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b76:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b79:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b7c:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b7f:	75 0f                	jne    c0008b90 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b81:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b84:	83 ec 0c             	sub    esp,0xc
c0008b87:	55                   	push   ebp
c0008b88:	e8 7b fa ff ff       	call   c0008608 <VgaText::scrollScreen()>
c0008b8d:	83 c4 10             	add    esp,0x10
c0008b90:	83 ec 0c             	sub    esp,0xc
c0008b93:	55                   	push   ebp
c0008b94:	e8 79 f9 ff ff       	call   c0008512 <VgaText::updateCursor()>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008ba0:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008ba3:	0f b7 db             	movzx  ebx,bx
c0008ba6:	01 db                	add    ebx,ebx
c0008ba8:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bab:	e9 8f 00 00 00       	jmp    c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb0:	83 f8 08             	cmp    eax,0x8
c0008bb3:	75 34                	jne    c0008be9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bb5:	51                   	push   ecx
c0008bb6:	51                   	push   ecx
c0008bb7:	6a 01                	push   0x1
c0008bb9:	55                   	push   ebp
c0008bba:	e8 bf fc ff ff       	call   c000887e <VgaText::decrementCursor(bool)>
c0008bbf:	5b                   	pop    ebx
c0008bc0:	58                   	pop    eax
c0008bc1:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bc4:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bc7:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bca:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bcd:	6a 20                	push   0x20
c0008bcf:	55                   	push   ebp
c0008bd0:	e8 d5 fa ff ff       	call   c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bd5:	83 c4 20             	add    esp,0x20
c0008bd8:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bdc:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bdf:	0f b7 db             	movzx  ebx,bx
c0008be2:	01 db                	add    ebx,ebx
c0008be4:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008be7:	eb 56                	jmp    c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be9:	52                   	push   edx
c0008bea:	52                   	push   edx
c0008beb:	57                   	push   edi
c0008bec:	50                   	push   eax
c0008bed:	e8 a8 fa ff ff       	call   c000869a <VgaText::combineCharAndColour(char, unsigned char)>
c0008bf2:	83 c4 10             	add    esp,0x10
c0008bf5:	66 89 03             	mov    WORD PTR [ebx],ax
c0008bf8:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008bfe:	75 1d                	jne    c0008c1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c00:	83 ec 0c             	sub    esp,0xc
c0008c03:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c06:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c09:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c0d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c11:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c14:	50                   	push   eax
c0008c15:	e8 8e f4 00 00       	call   c00180a8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c1a:	83 c4 20             	add    esp,0x20
c0008c1d:	50                   	push   eax
c0008c1e:	83 c3 02             	add    ebx,0x2
c0008c21:	50                   	push   eax
c0008c22:	6a 00                	push   0x0
c0008c24:	55                   	push   ebp
c0008c25:	e8 00 fc ff ff       	call   c000882a <VgaText::incrementCursor(bool)>
c0008c2a:	83 c4 10             	add    esp,0x10
c0008c2d:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c31:	75 0c                	jne    c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c33:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c37:	0f b7 db             	movzx  ebx,bx
c0008c3a:	01 db                	add    ebx,ebx
c0008c3c:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c3f:	46                   	inc    esi
c0008c40:	e9 06 ff ff ff       	jmp    c0008b4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c45:	83 ec 0c             	sub    esp,0xc
c0008c48:	55                   	push   ebp
c0008c49:	e8 c4 f8 ff ff       	call   c0008512 <VgaText::updateCursor()>
c0008c4e:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c55:	83 c4 1c             	add    esp,0x1c
c0008c58:	5b                   	pop    ebx
c0008c59:	5e                   	pop    esi
c0008c5a:	5f                   	pop    edi
c0008c5b:	5d                   	pop    ebp
c0008c5c:	c3                   	ret    
c0008c5d:	90                   	nop

c0008c5e <VgaText::VgaText(char const*)>:
c0008c5e:	56                   	push   esi
c0008c5f:	53                   	push   ebx
c0008c60:	83 ec 04             	sub    esp,0x4
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	83 ec 08             	sub    esp,0x8
c0008c6a:	6a 00                	push   0x0
c0008c6c:	50                   	push   eax
c0008c6d:	e8 28 05 00 00       	call   c000919a <UnixFile::UnixFile(int)>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	ba f4 00 02 c0       	mov    edx,0xc00200f4
c0008c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7e:	89 10                	mov    DWORD PTR [eax],edx
c0008c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c84:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8f:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9a:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cdd:	83 ec 0c             	sub    esp,0xc
c0008ce0:	6a 01                	push   0x1
c0008ce2:	e8 02 09 00 00       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0008ce7:	83 c4 10             	add    esp,0x10
c0008cea:	89 c2                	mov    edx,eax
c0008cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cf3:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d00:	89 c6                	mov    esi,eax
c0008d02:	e8 ce f0 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0008d07:	68 05 0c 00 00       	push   0xc05
c0008d0c:	56                   	push   esi
c0008d0d:	50                   	push   eax
c0008d0e:	53                   	push   ebx
c0008d0f:	e8 dc 0f 00 00       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d1e:	83 ec 04             	sub    esp,0x4
c0008d21:	68 a0 0f 00 00       	push   0xfa0
c0008d26:	6a 00                	push   0x0
c0008d28:	50                   	push   eax
c0008d29:	e8 c2 77 ff ff       	call   c00004f0 <memset>
c0008d2e:	83 c4 10             	add    esp,0x10
c0008d31:	83 ec 04             	sub    esp,0x4
c0008d34:	6a 00                	push   0x0
c0008d36:	6a 07                	push   0x7
c0008d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d3c:	e8 7b f8 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d41:	83 c4 10             	add    esp,0x10
c0008d44:	83 ec 04             	sub    esp,0x4
c0008d47:	6a 00                	push   0x0
c0008d49:	6a 00                	push   0x0
c0008d4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4f:	e8 f6 f9 ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c0008d54:	83 c4 10             	add    esp,0x10
c0008d57:	83 ec 0c             	sub    esp,0xc
c0008d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5e:	e8 49 fa ff ff       	call   c00087ac <VgaText::clearScreen()>
c0008d63:	83 c4 10             	add    esp,0x10
c0008d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6a:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	05 82 00 00 00       	add    eax,0x82
c0008d77:	83 ec 04             	sub    esp,0x4
c0008d7a:	68 80 00 00 00       	push   0x80
c0008d7f:	6a 00                	push   0x0
c0008d81:	50                   	push   eax
c0008d82:	e8 69 77 ff ff       	call   c00004f0 <memset>
c0008d87:	83 c4 10             	add    esp,0x10
c0008d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d8e:	05 02 01 00 00       	add    eax,0x102
c0008d93:	83 ec 04             	sub    esp,0x4
c0008d96:	68 80 00 00 00       	push   0x80
c0008d9b:	6a 00                	push   0x0
c0008d9d:	50                   	push   eax
c0008d9e:	e8 4d 77 ff ff       	call   c00004f0 <memset>
c0008da3:	83 c4 10             	add    esp,0x10
c0008da6:	90                   	nop
c0008da7:	83 c4 04             	add    esp,0x4
c0008daa:	5b                   	pop    ebx
c0008dab:	5e                   	pop    esi
c0008dac:	c3                   	ret    
c0008dad:	90                   	nop

c0008dae <VgaText::receiveKey(unsigned char)>:
c0008dae:	55                   	push   ebp
c0008daf:	57                   	push   edi
c0008db0:	56                   	push   esi
c0008db1:	53                   	push   ebx
c0008db2:	83 ec 2c             	sub    esp,0x2c
c0008db5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008db9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dbd:	89 fd                	mov    ebp,edi
c0008dbf:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dc5:	0f 84 48 01 00 00    	je     c0008f13 <VgaText::receiveKey(unsigned char)+0x165>
c0008dcb:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd1:	83 fd 08             	cmp    ebp,0x8
c0008dd4:	75 6a                	jne    c0008e40 <VgaText::receiveKey(unsigned char)+0x92>
c0008dd6:	83 ec 0c             	sub    esp,0xc
c0008dd9:	56                   	push   esi
c0008dda:	e8 a1 77 ff ff       	call   c0000580 <strlen>
c0008ddf:	83 c4 10             	add    esp,0x10
c0008de2:	85 c0                	test   eax,eax
c0008de4:	0f 84 ef 00 00 00    	je     c0008ed9 <VgaText::receiveKey(unsigned char)+0x12b>
c0008dea:	50                   	push   eax
c0008deb:	50                   	push   eax
c0008dec:	6a 08                	push   0x8
c0008dee:	53                   	push   ebx
c0008def:	e8 7c fb ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008df4:	89 34 24             	mov    DWORD PTR [esp],esi
c0008df7:	e8 84 77 ff ff       	call   c0000580 <strlen>
c0008dfc:	83 c4 10             	add    esp,0x10
c0008dff:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e07:	83 fa 1f             	cmp    edx,0x1f
c0008e0a:	89 d0                	mov    eax,edx
c0008e0c:	7f 1c                	jg     c0008e2a <VgaText::receiveKey(unsigned char)+0x7c>
c0008e0e:	83 e8 08             	sub    eax,0x8
c0008e11:	3c 02                	cmp    al,0x2
c0008e13:	76 15                	jbe    c0008e2a <VgaText::receiveKey(unsigned char)+0x7c>
c0008e15:	83 fa 0d             	cmp    edx,0xd
c0008e18:	74 10                	je     c0008e2a <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1a:	57                   	push   edi
c0008e1b:	57                   	push   edi
c0008e1c:	68 df 00 02 c0       	push   0xc00200df
c0008e21:	53                   	push   ebx
c0008e22:	e8 77 fc ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	83 ec 0c             	sub    esp,0xc
c0008e2d:	56                   	push   esi
c0008e2e:	e8 4d 77 ff ff       	call   c0000580 <strlen>
c0008e33:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e3b:	e9 96 00 00 00       	jmp    c0008ed6 <VgaText::receiveKey(unsigned char)+0x128>
c0008e40:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e46:	83 ec 0c             	sub    esp,0xc
c0008e49:	50                   	push   eax
c0008e4a:	e8 31 77 ff ff       	call   c0000580 <strlen>
c0008e4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e56:	e8 25 77 ff ff       	call   c0000580 <strlen>
c0008e5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e66:	3d 80 00 00 00       	cmp    eax,0x80
c0008e6b:	0f 87 a2 00 00 00    	ja     c0008f13 <VgaText::receiveKey(unsigned char)+0x165>
c0008e71:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e74:	3c 1e                	cmp    al,0x1e
c0008e76:	77 35                	ja     c0008ead <VgaText::receiveKey(unsigned char)+0xff>
c0008e78:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e7b:	3c 01                	cmp    al,0x1
c0008e7d:	76 2e                	jbe    c0008ead <VgaText::receiveKey(unsigned char)+0xff>
c0008e7f:	83 fd 0d             	cmp    ebp,0xd
c0008e82:	74 29                	je     c0008ead <VgaText::receiveKey(unsigned char)+0xff>
c0008e84:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e87:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e8a:	68 e5 00 02 c0       	push   0xc00200e5
c0008e8f:	53                   	push   ebx
c0008e90:	e8 7b fc ff ff       	call   c0008b10 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e95:	8d 47 40             	lea    eax,[edi+0x40]
c0008e98:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e9b:	0f b6 c0             	movzx  eax,al
c0008e9e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea1:	50                   	push   eax
c0008ea2:	53                   	push   ebx
c0008ea3:	e8 f8 f9 ff ff       	call   c00088a0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ea8:	83 c4 20             	add    esp,0x20
c0008eab:	eb 11                	jmp    c0008ebe <VgaText::receiveKey(unsigned char)+0x110>
c0008ead:	51                   	push   ecx
c0008eae:	89 f8                	mov    eax,edi
c0008eb0:	51                   	push   ecx
c0008eb1:	0f be c0             	movsx  eax,al
c0008eb4:	50                   	push   eax
c0008eb5:	53                   	push   ebx
c0008eb6:	e8 b5 fa ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ec3:	89 f8                	mov    eax,edi
c0008ec5:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ec9:	52                   	push   edx
c0008eca:	52                   	push   edx
c0008ecb:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ecf:	50                   	push   eax
c0008ed0:	56                   	push   esi
c0008ed1:	e8 9a 79 ff ff       	call   c0000870 <strcat>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ee0:	75 0f                	jne    c0008ef1 <VgaText::receiveKey(unsigned char)+0x143>
c0008ee2:	83 fd 1c             	cmp    ebp,0x1c
c0008ee5:	77 2c                	ja     c0008f13 <VgaText::receiveKey(unsigned char)+0x165>
c0008ee7:	b8 08 04 00 10       	mov    eax,0x10000408
c0008eec:	0f a3 e8             	bt     eax,ebp
c0008eef:	73 22                	jae    c0008f13 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef1:	50                   	push   eax
c0008ef2:	81 c3 02 01 00 00    	add    ebx,0x102
c0008ef8:	50                   	push   eax
c0008ef9:	56                   	push   esi
c0008efa:	53                   	push   ebx
c0008efb:	e8 70 79 ff ff       	call   c0000870 <strcat>
c0008f00:	83 c4 0c             	add    esp,0xc
c0008f03:	68 80 00 00 00       	push   0x80
c0008f08:	6a 00                	push   0x0
c0008f0a:	56                   	push   esi
c0008f0b:	e8 e0 75 ff ff       	call   c00004f0 <memset>
c0008f10:	83 c4 10             	add    esp,0x10
c0008f13:	83 c4 2c             	add    esp,0x2c
c0008f16:	5b                   	pop    ebx
c0008f17:	5e                   	pop    esi
c0008f18:	5f                   	pop    edi
c0008f19:	5d                   	pop    ebp
c0008f1a:	c3                   	ret    
c0008f1b:	90                   	nop

c0008f1c <VgaText::doUpdate()>:
c0008f1c:	c3                   	ret    
c0008f1d:	66 90                	xchg   ax,ax
c0008f1f:	90                   	nop

c0008f20 <TSS::TSS()>:
c0008f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f2b:	90                   	nop
c0008f2c:	c3                   	ret    
c0008f2d:	90                   	nop
c0008f2e:	66 90                	xchg   ax,ax

c0008f30 <TSS::setESP(unsigned long)>:
c0008f30:	55                   	push   ebp
c0008f31:	89 e5                	mov    ebp,esp
c0008f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f39:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f3f:	90                   	nop
c0008f40:	5d                   	pop    ebp
c0008f41:	c3                   	ret    
c0008f42:	66 90                	xchg   ax,ax

c0008f44 <TSS::flush()>:
c0008f44:	55                   	push   ebp
c0008f45:	89 e5                	mov    ebp,esp
c0008f47:	83 ec 10             	sub    esp,0x10
c0008f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f4f:	83 c8 03             	or     eax,0x3
c0008f52:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f56:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f5a:	66 89 d0             	mov    ax,dx
c0008f5d:	0f 00 d8             	ltr    ax
c0008f60:	90                   	nop
c0008f61:	c9                   	leave  
c0008f62:	c3                   	ret    
c0008f63:	90                   	nop

c0008f64 <TSS::setup(unsigned long, unsigned long)>:
c0008f64:	55                   	push   ebp
c0008f65:	89 e5                	mov    ebp,esp
c0008f67:	83 ec 18             	sub    esp,0x18
c0008f6a:	83 ec 0c             	sub    esp,0xc
c0008f6d:	6a 68                	push   0x68
c0008f6f:	e8 57 eb ff ff       	call   c0007acb <malloc>
c0008f74:	83 c4 10             	add    esp,0x10
c0008f77:	89 c2                	mov    edx,eax
c0008f79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f85:	83 ec 04             	sub    esp,0x4
c0008f88:	6a 68                	push   0x68
c0008f8a:	6a 00                	push   0x0
c0008f8c:	50                   	push   eax
c0008f8d:	e8 5e 75 ff ff       	call   c00004f0 <memset>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f9b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fb6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000900a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009016:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009029:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902c:	0f 20 da             	mov    edx,cr3
c000902f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009032:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009035:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000903b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903e:	83 ec 08             	sub    esp,0x8
c0009041:	50                   	push   eax
c0009042:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009045:	50                   	push   eax
c0009046:	e8 ef e2 ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000904b:	83 c4 10             	add    esp,0x10
c000904e:	83 ec 08             	sub    esp,0x8
c0009051:	6a 68                	push   0x68
c0009053:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009056:	50                   	push   eax
c0009057:	e8 fa e2 ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c000905c:	83 c4 10             	add    esp,0x10
c000905f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009063:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009066:	83 e0 0f             	and    eax,0xf
c0009069:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000906c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000906f:	83 c8 40             	or     eax,0x40
c0009072:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009075:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000907a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009080:	05 78 01 00 00       	add    eax,0x178
c0009085:	83 ec 04             	sub    esp,0x4
c0009088:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000908b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000908e:	50                   	push   eax
c000908f:	e8 f6 e2 ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c0009094:	83 c4 10             	add    esp,0x10
c0009097:	89 c2                	mov    edx,eax
c0009099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000909c:	89 10                	mov    DWORD PTR [eax],edx
c000909e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a9:	05 78 01 00 00       	add    eax,0x178
c00090ae:	83 ec 0c             	sub    esp,0xc
c00090b1:	50                   	push   eax
c00090b2:	e8 fd e2 ff ff       	call   c00073b4 <GDT::flush()>
c00090b7:	83 c4 10             	add    esp,0x10
c00090ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00090bf:	c9                   	leave  
c00090c0:	c3                   	ret    
c00090c1:	90                   	nop

c00090c2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090cd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090d2:	75 08                	jne    c00090dc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090d4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090da:	eb 38                	jmp    c0009114 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090dc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090e1:	75 17                	jne    c00090fa <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090f7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00090fa:	89 c1                	mov    ecx,eax
c00090fc:	83 e1 fd             	and    ecx,0xfffffffd
c00090ff:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009105:	74 cd                	je     c00090d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009107:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000910c:	83 e0 ef             	and    eax,0xffffffef
c000910f:	83 f8 08             	cmp    eax,0x8
c0009112:	76 c0                	jbe    c00090d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009114:	31 c0                	xor    eax,eax
c0009116:	c3                   	ret    
c0009117:	90                   	nop

c0009118 <ReservedFilename::isAtty()>:
c0009118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000911c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000911f:	31 c0                	xor    eax,eax
c0009121:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009127:	74 09                	je     c0009132 <ReservedFilename::isAtty()+0x1a>
c0009129:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000912f:	0f 94 c0             	sete   al
c0009132:	c3                   	ret    
c0009133:	90                   	nop

c0009134 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009138:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000913c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009143:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009148:	75 08                	jne    c0009152 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000914a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009150:	eb 3d                	jmp    c000918f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009152:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009157:	75 17                	jne    c0009170 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009159:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000915e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009161:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009167:	8b 10                	mov    edx,DWORD PTR [eax]
c0009169:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000916d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009170:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009175:	75 04                	jne    c000917b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009177:	89 0a                	mov    DWORD PTR [edx],ecx
c0009179:	eb 14                	jmp    c000918f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000917b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009180:	74 c8                	je     c000914a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009182:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009187:	83 e0 ef             	and    eax,0xffffffef
c000918a:	83 f8 08             	cmp    eax,0x8
c000918d:	76 bb                	jbe    c000914a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918f:	31 c0                	xor    eax,eax
c0009191:	c3                   	ret    

c0009192 <UnixFile::getFileDescriptor()>:
c0009192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009196:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009199:	c3                   	ret    

c000919a <UnixFile::UnixFile(int)>:
c000919a:	53                   	push   ebx
c000919b:	83 ec 28             	sub    esp,0x28
c000919e:	ba bc 01 02 c0       	mov    edx,0xc00201bc
c00091a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091a7:	89 10                	mov    DWORD PTR [eax],edx
c00091a9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091b1:	0f 8f 90 01 00 00    	jg     c0009347 <UnixFile::UnixFile(int)+0x1ad>
c00091b7:	a1 20 27 02 c0       	mov    eax,ds:0xc0022720
c00091bc:	8d 50 01             	lea    edx,[eax+0x1]
c00091bf:	89 15 20 27 02 c0    	mov    DWORD PTR ds:0xc0022720,edx
c00091c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091c9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091cc:	83 ec 08             	sub    esp,0x8
c00091cf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091d3:	68 98 4f 02 c0       	push   0xc0024f98
c00091d8:	e8 bb 5a 01 00       	call   c001ec98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c00091e5:	83 f0 01             	xor    eax,0x1
c00091e8:	0f b6 c0             	movzx  eax,al
c00091eb:	85 c0                	test   eax,eax
c00091ed:	0f 84 55 01 00 00    	je     c0009348 <UnixFile::UnixFile(int)+0x1ae>
c00091f3:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c00091fa:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009202:	83 ec 0c             	sub    esp,0xc
c0009205:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009209:	e8 bd e8 ff ff       	call   c0007acb <malloc>
c000920e:	83 c4 10             	add    esp,0x10
c0009211:	89 c3                	mov    ebx,eax
c0009213:	83 ec 08             	sub    esp,0x8
c0009216:	68 03 ff ff 0f       	push   0xfffff03
c000921b:	53                   	push   ebx
c000921c:	e8 2d 01 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c0009221:	83 c4 10             	add    esp,0x10
c0009224:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c000922a:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009232:	83 ec 0c             	sub    esp,0xc
c0009235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009239:	e8 8d e8 ff ff       	call   c0007acb <malloc>
c000923e:	83 c4 10             	add    esp,0x10
c0009241:	89 c3                	mov    ebx,eax
c0009243:	83 ec 08             	sub    esp,0x8
c0009246:	68 01 ff ff 0f       	push   0xfffff01
c000924b:	53                   	push   ebx
c000924c:	e8 fd 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c0009251:	83 c4 10             	add    esp,0x10
c0009254:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c000925a:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009262:	83 ec 0c             	sub    esp,0xc
c0009265:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009269:	e8 5d e8 ff ff       	call   c0007acb <malloc>
c000926e:	83 c4 10             	add    esp,0x10
c0009271:	89 c3                	mov    ebx,eax
c0009273:	83 ec 08             	sub    esp,0x8
c0009276:	68 00 ff ff 0f       	push   0xfffff00
c000927b:	53                   	push   ebx
c000927c:	e8 cd 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c0009281:	83 c4 10             	add    esp,0x10
c0009284:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c000928a:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009292:	83 ec 0c             	sub    esp,0xc
c0009295:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009299:	e8 2d e8 ff ff       	call   c0007acb <malloc>
c000929e:	83 c4 10             	add    esp,0x10
c00092a1:	89 c3                	mov    ebx,eax
c00092a3:	83 ec 08             	sub    esp,0x8
c00092a6:	68 02 ff ff 0f       	push   0xfffff02
c00092ab:	53                   	push   ebx
c00092ac:	e8 9d 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c00092b1:	83 c4 10             	add    esp,0x10
c00092b4:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092ba:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092c2:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092c7:	7f 7f                	jg     c0009348 <UnixFile::UnixFile(int)+0x1ae>
c00092c9:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092d1:	83 ec 0c             	sub    esp,0xc
c00092d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092d8:	e8 ee e7 ff ff       	call   c0007acb <malloc>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	89 c3                	mov    ebx,eax
c00092e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092e6:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092eb:	83 ec 08             	sub    esp,0x8
c00092ee:	50                   	push   eax
c00092ef:	53                   	push   ebx
c00092f0:	e8 59 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092fc:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c0009303:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000930b:	83 ec 0c             	sub    esp,0xc
c000930e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009312:	e8 b4 e7 ff ff       	call   c0007acb <malloc>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 c3                	mov    ebx,eax
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009325:	83 ec 08             	sub    esp,0x8
c0009328:	50                   	push   eax
c0009329:	53                   	push   ebx
c000932a:	e8 1f 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c000932f:	83 c4 10             	add    esp,0x10
c0009332:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009336:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c000933d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009342:	e9 7b ff ff ff       	jmp    c00092c2 <UnixFile::UnixFile(int)+0x128>
c0009347:	90                   	nop
c0009348:	83 c4 28             	add    esp,0x28
c000934b:	5b                   	pop    ebx
c000934c:	c3                   	ret    
c000934d:	90                   	nop

c000934e <ReservedFilename::ReservedFilename(int)>:
c000934e:	83 ec 0c             	sub    esp,0xc
c0009351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009355:	83 ec 08             	sub    esp,0x8
c0009358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000935c:	50                   	push   eax
c000935d:	e8 38 fe ff ff       	call   c000919a <UnixFile::UnixFile(int)>
c0009362:	83 c4 10             	add    esp,0x10
c0009365:	ba d8 01 02 c0       	mov    edx,0xc00201d8
c000936a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000936e:	89 10                	mov    DWORD PTR [eax],edx
c0009370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009374:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009378:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000937b:	90                   	nop
c000937c:	83 c4 0c             	add    esp,0xc
c000937f:	c3                   	ret    

c0009380 <UnixFile::~UnixFile()>:
c0009380:	83 ec 1c             	sub    esp,0x1c
c0009383:	ba bc 01 02 c0       	mov    edx,0xc00201bc
c0009388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000938c:	89 10                	mov    DWORD PTR [eax],edx
c000938e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009392:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009395:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000939a:	7f 76                	jg     c0009412 <UnixFile::~UnixFile()+0x92>
c000939c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	68 98 4f 02 c0       	push   0xc0024f98
c00093ac:	e8 bb 59 01 00       	call   c001ed6c <LinkedList<UnixFile>::getFirstElement()>
c00093b1:	83 c4 10             	add    esp,0x10
c00093b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b8:	83 ec 0c             	sub    esp,0xc
c00093bb:	68 98 4f 02 c0       	push   0xc0024f98
c00093c0:	e8 af 59 01 00       	call   c001ed74 <LinkedList<UnixFile>::removeFirst()>
c00093c5:	83 c4 10             	add    esp,0x10
c00093c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093cc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093d0:	74 43                	je     c0009415 <UnixFile::~UnixFile()+0x95>
c00093d2:	83 ec 08             	sub    esp,0x8
c00093d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093d9:	68 98 4f 02 c0       	push   0xc0024f98
c00093de:	e8 b5 58 01 00       	call   c001ec98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093ea:	8d 50 01             	lea    edx,[eax+0x1]
c00093ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093f1:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00093f6:	0f 94 c0             	sete   al
c00093f9:	0f b6 c0             	movzx  eax,al
c00093fc:	85 c0                	test   eax,eax
c00093fe:	74 a4                	je     c00093a4 <UnixFile::~UnixFile()+0x24>
c0009400:	83 ec 0c             	sub    esp,0xc
c0009403:	68 94 01 02 c0       	push   0xc0020194
c0009408:	e8 30 77 00 00       	call   c0010b3d <KePanic(char const*)>
c000940d:	83 c4 10             	add    esp,0x10
c0009410:	eb 92                	jmp    c00093a4 <UnixFile::~UnixFile()+0x24>
c0009412:	90                   	nop
c0009413:	eb 01                	jmp    c0009416 <UnixFile::~UnixFile()+0x96>
c0009415:	90                   	nop
c0009416:	90                   	nop
c0009417:	83 c4 1c             	add    esp,0x1c
c000941a:	c3                   	ret    
c000941b:	90                   	nop

c000941c <UnixFile::~UnixFile()>:
c000941c:	83 ec 0c             	sub    esp,0xc
c000941f:	83 ec 0c             	sub    esp,0xc
c0009422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009426:	e8 55 ff ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000942b:	83 c4 10             	add    esp,0x10
c000942e:	83 ec 08             	sub    esp,0x8
c0009431:	6a 0c                	push   0xc
c0009433:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009437:	e8 02 14 00 00       	call   c000a83e <operator delete(void*, unsigned long)>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	83 c4 0c             	add    esp,0xc
c0009442:	c3                   	ret    
c0009443:	90                   	nop

c0009444 <ReservedFilename::~ReservedFilename()>:
c0009444:	83 ec 0c             	sub    esp,0xc
c0009447:	ba d8 01 02 c0       	mov    edx,0xc00201d8
c000944c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009450:	89 10                	mov    DWORD PTR [eax],edx
c0009452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009456:	83 ec 0c             	sub    esp,0xc
c0009459:	50                   	push   eax
c000945a:	e8 21 ff ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	90                   	nop
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	83 ec 0c             	sub    esp,0xc
c000946e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009472:	e8 cd ff ff ff       	call   c0009444 <ReservedFilename::~ReservedFilename()>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	83 ec 08             	sub    esp,0x8
c000947d:	6a 0c                	push   0xc
c000947f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009483:	e8 b6 13 00 00       	call   c000a83e <operator delete(void*, unsigned long)>
c0009488:	83 c4 10             	add    esp,0x10
c000948b:	83 c4 0c             	add    esp,0xc
c000948e:	c3                   	ret    

c000948f <KeGetFileFromDescriptor(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 08             	sub    esp,0x8
c0009493:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009497:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000949d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094a3:	7f 2c                	jg     c00094d1 <KeGetFileFromDescriptor(int)+0x42>
c00094a5:	83 ec 0c             	sub    esp,0xc
c00094a8:	68 98 4f 02 c0       	push   0xc0024f98
c00094ad:	e8 ba 58 01 00       	call   c001ed6c <LinkedList<UnixFile>::getFirstElement()>
c00094b2:	83 c4 10             	add    esp,0x10
c00094b5:	85 c0                	test   eax,eax
c00094b7:	75 04                	jne    c00094bd <KeGetFileFromDescriptor(int)+0x2e>
c00094b9:	31 c0                	xor    eax,eax
c00094bb:	eb 6e                	jmp    c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094bd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094c0:	74 69                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094c2:	52                   	push   edx
c00094c3:	52                   	push   edx
c00094c4:	50                   	push   eax
c00094c5:	68 98 4f 02 c0       	push   0xc0024f98
c00094ca:	e8 47 59 01 00       	call   c001ee16 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094cf:	eb e1                	jmp    c00094b2 <KeGetFileFromDescriptor(int)+0x23>
c00094d1:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094d7:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094dc:	74 4d                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094de:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094e4:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c00094e9:	74 40                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094eb:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094f1:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c00094f6:	74 33                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094f8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00094fe:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009503:	74 26                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c0009505:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000950b:	83 f8 08             	cmp    eax,0x8
c000950e:	77 09                	ja     c0009519 <KeGetFileFromDescriptor(int)+0x8a>
c0009510:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009517:	eb 12                	jmp    c000952b <KeGetFileFromDescriptor(int)+0x9c>
c0009519:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000951f:	83 fb 08             	cmp    ebx,0x8
c0009522:	77 95                	ja     c00094b9 <KeGetFileFromDescriptor(int)+0x2a>
c0009524:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c000952b:	83 c4 08             	add    esp,0x8
c000952e:	5b                   	pop    ebx
c000952f:	c3                   	ret    

c0009530 <__static_initialization_and_destruction_0(int, int)>:
c0009530:	83 ec 0c             	sub    esp,0xc
c0009533:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009538:	75 34                	jne    c000956e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000953a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009542:	75 2a                	jne    c000956e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009544:	83 ec 0c             	sub    esp,0xc
c0009547:	68 98 4f 02 c0       	push   0xc0024f98
c000954c:	e8 05 57 01 00       	call   c001ec56 <LinkedList<UnixFile>::LinkedList()>
c0009551:	83 c4 10             	add    esp,0x10
c0009554:	83 ec 04             	sub    esp,0x4
c0009557:	68 98 26 02 c0       	push   0xc0022698
c000955c:	68 98 4f 02 c0       	push   0xc0024f98
c0009561:	68 54 ec 01 c0       	push   0xc001ec54
c0009566:	e8 83 12 00 00       	call   c000a7ee <__cxa_atexit>
c000956b:	83 c4 10             	add    esp,0x10
c000956e:	90                   	nop
c000956f:	83 c4 0c             	add    esp,0xc
c0009572:	c3                   	ret    

c0009573 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009573:	83 ec 0c             	sub    esp,0xc
c0009576:	83 ec 08             	sub    esp,0x8
c0009579:	68 ff ff 00 00       	push   0xffff
c000957e:	6a 01                	push   0x1
c0009580:	e8 ab ff ff ff       	call   c0009530 <__static_initialization_and_destruction_0(int, int)>
c0009585:	83 c4 10             	add    esp,0x10
c0009588:	83 c4 0c             	add    esp,0xc
c000958b:	c3                   	ret    

c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000958c:	53                   	push   ebx
c000958d:	8b 15 28 27 02 c0    	mov    edx,DWORD PTR ds:0xc0022728
c0009593:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009597:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000959b:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095a1:	89 d8                	mov    eax,ebx
c00095a3:	d1 e8                	shr    eax,1
c00095a5:	01 d0                	add    eax,edx
c00095a7:	80 e3 01             	and    bl,0x1
c00095aa:	8a 10                	mov    dl,BYTE PTR [eax]
c00095ac:	75 09                	jne    c00095b7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ae:	83 e2 f0             	and    edx,0xfffffff0
c00095b1:	09 ca                	or     edx,ecx
c00095b3:	88 10                	mov    BYTE PTR [eax],dl
c00095b5:	5b                   	pop    ebx
c00095b6:	c3                   	ret    
c00095b7:	0f b6 c9             	movzx  ecx,cl
c00095ba:	83 e2 0f             	and    edx,0xf
c00095bd:	c1 e1 04             	shl    ecx,0x4
c00095c0:	09 ca                	or     edx,ecx
c00095c2:	88 10                	mov    BYTE PTR [eax],dl
c00095c4:	5b                   	pop    ebx
c00095c5:	c3                   	ret    

c00095c6 <Virt::getPageState(unsigned long)>:
c00095c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ca:	8b 0d 28 27 02 c0    	mov    ecx,DWORD PTR ds:0xc0022728
c00095d0:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095d6:	89 d0                	mov    eax,edx
c00095d8:	d1 e8                	shr    eax,1
c00095da:	80 e2 01             	and    dl,0x1
c00095dd:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095e0:	74 03                	je     c00095e5 <Virt::getPageState(unsigned long)+0x1f>
c00095e2:	c1 e8 04             	shr    eax,0x4
c00095e5:	83 e0 0f             	and    eax,0xf
c00095e8:	c3                   	ret    

c00095e9 <Virt::allocateKernelVirtualPages(int)>:
c00095e9:	55                   	push   ebp
c00095ea:	57                   	push   edi
c00095eb:	56                   	push   esi
c00095ec:	31 f6                	xor    esi,esi
c00095ee:	53                   	push   ebx
c00095ef:	31 db                	xor    ebx,ebx
c00095f1:	83 ec 1c             	sub    esp,0x1c
c00095f4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00095f9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00095fd:	8b 2d 24 27 02 c0    	mov    ebp,DWORD PTR ds:0xc0022724
c0009603:	55                   	push   ebp
c0009604:	e8 bd ff ff ff       	call   c00095c6 <Virt::getPageState(unsigned long)>
c0009609:	5a                   	pop    edx
c000960a:	84 c0                	test   al,al
c000960c:	75 3d                	jne    c000964b <Virt::allocateKernelVirtualPages(int)+0x62>
c000960e:	85 db                	test   ebx,ebx
c0009610:	0f 44 f5             	cmove  esi,ebp
c0009613:	83 c3 01             	add    ebx,0x1
c0009616:	39 fb                	cmp    ebx,edi
c0009618:	74 5e                	je     c0009678 <Virt::allocateKernelVirtualPages(int)+0x8f>
c000961a:	83 c5 01             	add    ebp,0x1
c000961d:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009623:	76 33                	jbe    c0009658 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009625:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c000962a:	c7 05 24 27 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022724,0xc8000
c0009634:	75 2a                	jne    c0009660 <Virt::allocateKernelVirtualPages(int)+0x77>
c0009636:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000963b:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0009640:	55                   	push   ebp
c0009641:	e8 80 ff ff ff       	call   c00095c6 <Virt::getPageState(unsigned long)>
c0009646:	5a                   	pop    edx
c0009647:	84 c0                	test   al,al
c0009649:	74 c3                	je     c000960e <Virt::allocateKernelVirtualPages(int)+0x25>
c000964b:	83 c5 01             	add    ebp,0x1
c000964e:	31 db                	xor    ebx,ebx
c0009650:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009656:	77 cd                	ja     c0009625 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009658:	89 2d 24 27 02 c0    	mov    DWORD PTR ds:0xc0022724,ebp
c000965e:	eb a3                	jmp    c0009603 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009660:	83 ec 0c             	sub    esp,0xc
c0009663:	68 ec 01 02 c0       	push   0xc00201ec
c0009668:	e8 d0 74 00 00       	call   c0010b3d <KePanic(char const*)>
c000966d:	8b 2d 24 27 02 c0    	mov    ebp,DWORD PTR ds:0xc0022724
c0009673:	83 c4 10             	add    esp,0x10
c0009676:	eb 8b                	jmp    c0009603 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009678:	89 35 24 27 02 c0    	mov    DWORD PTR ds:0xc0022724,esi
c000967e:	83 fb 01             	cmp    ebx,0x1
c0009681:	74 63                	je     c00096e6 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0009683:	85 ff                	test   edi,edi
c0009685:	74 41                	je     c00096c8 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009687:	89 f0                	mov    eax,esi
c0009689:	31 db                	xor    ebx,ebx
c000968b:	8d 6f ff             	lea    ebp,[edi-0x1]
c000968e:	eb 16                	jmp    c00096a6 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0009690:	6a 01                	push   0x1
c0009692:	83 c3 01             	add    ebx,0x1
c0009695:	50                   	push   eax
c0009696:	e8 f1 fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000969b:	39 fb                	cmp    ebx,edi
c000969d:	58                   	pop    eax
c000969e:	5a                   	pop    edx
c000969f:	74 27                	je     c00096c8 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096a1:	a1 24 27 02 c0       	mov    eax,ds:0xc0022724
c00096a6:	8d 50 01             	lea    edx,[eax+0x1]
c00096a9:	85 db                	test   ebx,ebx
c00096ab:	89 15 24 27 02 c0    	mov    DWORD PTR ds:0xc0022724,edx
c00096b1:	74 22                	je     c00096d5 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096b3:	39 dd                	cmp    ebp,ebx
c00096b5:	75 d9                	jne    c0009690 <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096b7:	6a 03                	push   0x3
c00096b9:	83 c3 01             	add    ebx,0x1
c00096bc:	50                   	push   eax
c00096bd:	e8 ca fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c2:	39 fb                	cmp    ebx,edi
c00096c4:	59                   	pop    ecx
c00096c5:	58                   	pop    eax
c00096c6:	75 d9                	jne    c00096a1 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096c8:	83 c4 1c             	add    esp,0x1c
c00096cb:	89 f0                	mov    eax,esi
c00096cd:	5b                   	pop    ebx
c00096ce:	c1 e0 0c             	shl    eax,0xc
c00096d1:	5e                   	pop    esi
c00096d2:	5f                   	pop    edi
c00096d3:	5d                   	pop    ebp
c00096d4:	c3                   	ret    
c00096d5:	6a 02                	push   0x2
c00096d7:	bb 01 00 00 00       	mov    ebx,0x1
c00096dc:	50                   	push   eax
c00096dd:	e8 aa fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096e2:	58                   	pop    eax
c00096e3:	5a                   	pop    edx
c00096e4:	eb bb                	jmp    c00096a1 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096e6:	6a 04                	push   0x4
c00096e8:	56                   	push   esi
c00096e9:	8d 46 01             	lea    eax,[esi+0x1]
c00096ec:	a3 24 27 02 c0       	mov    ds:0xc0022724,eax
c00096f1:	e8 96 fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096f6:	89 f0                	mov    eax,esi
c00096f8:	59                   	pop    ecx
c00096f9:	c1 e0 0c             	shl    eax,0xc
c00096fc:	5b                   	pop    ebx
c00096fd:	83 c4 1c             	add    esp,0x1c
c0009700:	5b                   	pop    ebx
c0009701:	5e                   	pop    esi
c0009702:	5f                   	pop    edi
c0009703:	5d                   	pop    ebp
c0009704:	c3                   	ret    

c0009705 <Virt::freeSwapfilePage(unsigned long)>:
c0009705:	53                   	push   ebx
c0009706:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c000970c:	b8 01 00 00 00       	mov    eax,0x1
c0009711:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009715:	d3 e0                	shl    eax,cl
c0009717:	89 cb                	mov    ebx,ecx
c0009719:	c1 eb 05             	shr    ebx,0x5
c000971c:	f7 d0                	not    eax
c000971e:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009721:	21 c1                	and    ecx,eax
c0009723:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009726:	5b                   	pop    ebx
c0009727:	c3                   	ret    

c0009728 <Virt::swapIDToSector(unsigned long)>:
c0009728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000972c:	8b 15 2c 27 02 c0    	mov    edx,DWORD PTR ds:0xc002272c
c0009732:	8b 0d 34 27 02 c0    	mov    ecx,DWORD PTR ds:0xc0022734
c0009738:	0f af c2             	imul   eax,edx
c000973b:	01 c8                	add    eax,ecx
c000973d:	c3                   	ret    

c000973e <Virt::allocateSwapfilePage()>:
c000973e:	55                   	push   ebp
c000973f:	31 d2                	xor    edx,edx
c0009741:	57                   	push   edi
c0009742:	56                   	push   esi
c0009743:	53                   	push   ebx
c0009744:	83 ec 0c             	sub    esp,0xc
c0009747:	8b 1d 30 27 02 c0    	mov    ebx,DWORD PTR ds:0xc0022730
c000974d:	8b 0d 2c 27 02 c0    	mov    ecx,DWORD PTR ds:0xc002272c
c0009753:	89 d8                	mov    eax,ebx
c0009755:	f7 f1                	div    ecx
c0009757:	39 cb                	cmp    ebx,ecx
c0009759:	72 2f                	jb     c000978a <Virt::allocateSwapfilePage()+0x4c>
c000975b:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c0009761:	8b 16                	mov    edx,DWORD PTR [esi]
c0009763:	f6 c2 01             	test   dl,0x1
c0009766:	74 3e                	je     c00097a6 <Virt::allocateSwapfilePage()+0x68>
c0009768:	31 c9                	xor    ecx,ecx
c000976a:	bf 01 00 00 00       	mov    edi,0x1
c000976f:	eb 12                	jmp    c0009783 <Virt::allocateSwapfilePage()+0x45>
c0009771:	89 ca                	mov    edx,ecx
c0009773:	89 fd                	mov    ebp,edi
c0009775:	c1 ea 05             	shr    edx,0x5
c0009778:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000977b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000977d:	d3 e5                	shl    ebp,cl
c000977f:	85 ea                	test   edx,ebp
c0009781:	74 2c                	je     c00097af <Virt::allocateSwapfilePage()+0x71>
c0009783:	83 c1 01             	add    ecx,0x1
c0009786:	39 c8                	cmp    eax,ecx
c0009788:	77 e7                	ja     c0009771 <Virt::allocateSwapfilePage()+0x33>
c000978a:	83 ec 0c             	sub    esp,0xc
c000978d:	68 80 04 02 c0       	push   0xc0020480
c0009792:	e8 a6 73 00 00       	call   c0010b3d <KePanic(char const*)>
c0009797:	83 c4 10             	add    esp,0x10
c000979a:	31 c9                	xor    ecx,ecx
c000979c:	83 c4 0c             	add    esp,0xc
c000979f:	89 c8                	mov    eax,ecx
c00097a1:	5b                   	pop    ebx
c00097a2:	5e                   	pop    esi
c00097a3:	5f                   	pop    edi
c00097a4:	5d                   	pop    ebp
c00097a5:	c3                   	ret    
c00097a6:	89 f3                	mov    ebx,esi
c00097a8:	bd 01 00 00 00       	mov    ebp,0x1
c00097ad:	31 c9                	xor    ecx,ecx
c00097af:	09 ea                	or     edx,ebp
c00097b1:	89 c8                	mov    eax,ecx
c00097b3:	89 13                	mov    DWORD PTR [ebx],edx
c00097b5:	83 c4 0c             	add    esp,0xc
c00097b8:	5b                   	pop    ebx
c00097b9:	5e                   	pop    esi
c00097ba:	5f                   	pop    edi
c00097bb:	5d                   	pop    ebp
c00097bc:	c3                   	ret    

c00097bd <Virt::virtualMemorySetup()>:
c00097bd:	53                   	push   ebx
c00097be:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097c3:	6a 0f                	push   0xf
c00097c5:	53                   	push   ebx
c00097c6:	83 c3 01             	add    ebx,0x1
c00097c9:	e8 be fd ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ce:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097d4:	58                   	pop    eax
c00097d5:	5a                   	pop    edx
c00097d6:	75 eb                	jne    c00097c3 <Virt::virtualMemorySetup()+0x6>
c00097d8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097dd:	6a 00                	push   0x0
c00097df:	53                   	push   ebx
c00097e0:	83 c3 01             	add    ebx,0x1
c00097e3:	e8 a4 fd ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097e8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097ee:	59                   	pop    ecx
c00097ef:	58                   	pop    eax
c00097f0:	75 eb                	jne    c00097dd <Virt::virtualMemorySetup()+0x20>
c00097f2:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00097f7:	6a 0f                	push   0xf
c00097f9:	53                   	push   ebx
c00097fa:	83 c3 01             	add    ebx,0x1
c00097fd:	e8 8a fd ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009802:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009808:	58                   	pop    eax
c0009809:	5a                   	pop    edx
c000980a:	75 eb                	jne    c00097f7 <Virt::virtualMemorySetup()+0x3a>
c000980c:	5b                   	pop    ebx
c000980d:	c3                   	ret    

c000980e <Virt::setupPageSwapping(int)>:
c000980e:	53                   	push   ebx
c000980f:	83 ec 0c             	sub    esp,0xc
c0009812:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009817:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000981b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009821:	8b 10                	mov    edx,DWORD PTR [eax]
c0009823:	53                   	push   ebx
c0009824:	68 97 04 02 c0       	push   0xc0020497
c0009829:	50                   	push   eax
c000982a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000982d:	c1 e3 0b             	shl    ebx,0xb
c0009830:	89 1d 30 27 02 c0    	mov    DWORD PTR ds:0xc0022730,ebx
c0009836:	c1 eb 08             	shr    ebx,0x8
c0009839:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000983c:	c6 05 38 27 02 c0 43 	mov    BYTE PTR ds:0xc0022738,0x43
c0009843:	c7 05 2c 27 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002272c,0x8
c000984d:	a3 34 27 02 c0       	mov    ds:0xc0022734,eax
c0009852:	e8 74 e2 ff ff       	call   c0007acb <malloc>
c0009857:	31 d2                	xor    edx,edx
c0009859:	83 c4 0c             	add    esp,0xc
c000985c:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c0009861:	89 c1                	mov    ecx,eax
c0009863:	a1 30 27 02 c0       	mov    eax,ds:0xc0022730
c0009868:	f7 35 2c 27 02 c0    	div    DWORD PTR ds:0xc002272c
c000986e:	c1 e8 05             	shr    eax,0x5
c0009871:	50                   	push   eax
c0009872:	6a 00                	push   0x0
c0009874:	51                   	push   ecx
c0009875:	e8 76 6c ff ff       	call   c00004f0 <memset>
c000987a:	83 c4 18             	add    esp,0x18
c000987d:	5b                   	pop    ebx
c000987e:	c3                   	ret    
c000987f:	90                   	nop

c0009880 <VAS::VAS(VAS*)>:
c0009880:	83 ec 0c             	sub    esp,0xc
c0009883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009887:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000988e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009892:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009899:	83 ec 0c             	sub    esp,0xc
c000989c:	68 0c 02 02 c0       	push   0xc002020c
c00098a1:	e8 97 72 00 00       	call   c0010b3d <KePanic(char const*)>
c00098a6:	83 c4 10             	add    esp,0x10
c00098a9:	90                   	nop
c00098aa:	83 c4 0c             	add    esp,0xc
c00098ad:	c3                   	ret    

c00098ae <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098b2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098b7:	89 c2                	mov    edx,eax
c00098b9:	c1 ea 16             	shr    edx,0x16
c00098bc:	c1 e8 0a             	shr    eax,0xa
c00098bf:	83 f9 01             	cmp    ecx,0x1
c00098c2:	19 c9                	sbb    ecx,ecx
c00098c4:	25 fc 0f 00 00       	and    eax,0xffc
c00098c9:	c1 e2 0c             	shl    edx,0xc
c00098cc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098d2:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098d9:	01 d0                	add    eax,edx
c00098db:	c3                   	ret    

c00098dc <VAS::getPageTableEntry(unsigned long)>:
c00098dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098e0:	89 ca                	mov    edx,ecx
c00098e2:	c1 ea 16             	shr    edx,0x16
c00098e5:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098eb:	c1 e9 0a             	shr    ecx,0xa
c00098ee:	c1 e0 0c             	shl    eax,0xc
c00098f1:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00098f7:	8d 04 08             	lea    eax,[eax+ecx*1]
c00098fa:	c3                   	ret    

c00098fb <Virt::freeKernelVirtualPages(unsigned long)>:
c00098fb:	55                   	push   ebp
c00098fc:	57                   	push   edi
c00098fd:	bf 01 00 00 00       	mov    edi,0x1
c0009902:	56                   	push   esi
c0009903:	53                   	push   ebx
c0009904:	83 ec 1c             	sub    esp,0x1c
c0009907:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000990b:	c1 ee 0c             	shr    esi,0xc
c000990e:	eb 48                	jmp    c0009958 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009910:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009915:	83 ec 08             	sub    esp,0x8
c0009918:	55                   	push   ebp
c0009919:	50                   	push   eax
c000991a:	e8 bd ff ff ff       	call   c00098dc <VAS::getPageTableEntry(unsigned long)>
c000991f:	83 c4 10             	add    esp,0x10
c0009922:	8b 10                	mov    edx,DWORD PTR [eax]
c0009924:	f6 c6 04             	test   dh,0x4
c0009927:	75 70                	jne    c0009999 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009929:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000992f:	83 fb 04             	cmp    ebx,0x4
c0009932:	0f 84 8a 00 00 00    	je     c00099c2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009938:	83 fb 02             	cmp    ebx,0x2
c000993b:	0f 84 9a 00 00 00    	je     c00099db <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009941:	83 fb 03             	cmp    ebx,0x3
c0009944:	0f 84 be 00 00 00    	je     c0009a08 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000994a:	83 fb 01             	cmp    ebx,0x1
c000994d:	0f 84 a2 00 00 00    	je     c00099f5 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009953:	83 c6 01             	add    esi,0x1
c0009956:	31 ff                	xor    edi,edi
c0009958:	56                   	push   esi
c0009959:	89 f5                	mov    ebp,esi
c000995b:	e8 66 fc ff ff       	call   c00095c6 <Virt::getPageState(unsigned long)>
c0009960:	c1 e5 0c             	shl    ebp,0xc
c0009963:	5a                   	pop    edx
c0009964:	0f b6 d8             	movzx  ebx,al
c0009967:	85 db                	test   ebx,ebx
c0009969:	75 a5                	jne    c0009910 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000996b:	83 ec 0c             	sub    esp,0xc
c000996e:	68 ae 04 02 c0       	push   0xc00204ae
c0009973:	e8 c5 71 00 00       	call   c0010b3d <KePanic(char const*)>
c0009978:	5a                   	pop    edx
c0009979:	59                   	pop    ecx
c000997a:	55                   	push   ebp
c000997b:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c0009981:	55                   	push   ebp
c0009982:	e8 55 ff ff ff       	call   c00098dc <VAS::getPageTableEntry(unsigned long)>
c0009987:	83 c4 10             	add    esp,0x10
c000998a:	8b 10                	mov    edx,DWORD PTR [eax]
c000998c:	f6 c6 04             	test   dh,0x4
c000998f:	75 08                	jne    c0009999 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009991:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009997:	eb ba                	jmp    c0009953 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000999d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099a3:	83 ec 0c             	sub    esp,0xc
c00099a6:	52                   	push   edx
c00099a7:	e8 c0 e3 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c00099ac:	83 c4 10             	add    esp,0x10
c00099af:	83 fb 04             	cmp    ebx,0x4
c00099b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099bc:	0f 85 76 ff ff ff    	jne    c0009938 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099c2:	83 e7 01             	and    edi,0x1
c00099c5:	75 46                	jne    c0009a0d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099c7:	c7 44 24 30 30 02 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020230
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	5b                   	pop    ebx
c00099d3:	5e                   	pop    esi
c00099d4:	5f                   	pop    edi
c00099d5:	5d                   	pop    ebp
c00099d6:	e9 62 71 00 00       	jmp    c0010b3d <KePanic(char const*)>
c00099db:	83 e7 01             	and    edi,0x1
c00099de:	75 15                	jne    c00099f5 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099e0:	83 ec 0c             	sub    esp,0xc
c00099e3:	68 ca 04 02 c0       	push   0xc00204ca
c00099e8:	e8 50 71 00 00       	call   c0010b3d <KePanic(char const*)>
c00099ed:	83 c4 10             	add    esp,0x10
c00099f0:	e9 5e ff ff ff       	jmp    c0009953 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099f5:	83 ec 08             	sub    esp,0x8
c00099f8:	6a 00                	push   0x0
c00099fa:	56                   	push   esi
c00099fb:	e8 8c fb ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a00:	83 c4 10             	add    esp,0x10
c0009a03:	e9 4b ff ff ff       	jmp    c0009953 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a08:	83 e7 01             	and    edi,0x1
c0009a0b:	75 16                	jne    c0009a23 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a0d:	83 ec 08             	sub    esp,0x8
c0009a10:	6a 00                	push   0x0
c0009a12:	56                   	push   esi
c0009a13:	e8 74 fb ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a18:	83 c4 10             	add    esp,0x10
c0009a1b:	83 c4 1c             	add    esp,0x1c
c0009a1e:	5b                   	pop    ebx
c0009a1f:	5e                   	pop    esi
c0009a20:	5f                   	pop    edi
c0009a21:	5d                   	pop    ebp
c0009a22:	c3                   	ret    
c0009a23:	c7 44 24 30 e6 04 02 c0 	mov    DWORD PTR [esp+0x30],0xc00204e6
c0009a2b:	83 c4 1c             	add    esp,0x1c
c0009a2e:	5b                   	pop    ebx
c0009a2f:	5e                   	pop    esi
c0009a30:	5f                   	pop    edi
c0009a31:	5d                   	pop    ebp
c0009a32:	e9 06 71 00 00       	jmp    c0010b3d <KePanic(char const*)>
c0009a37:	90                   	nop

c0009a38 <VAS::freeAllocatedPages(unsigned long)>:
c0009a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a40:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a44:	74 09                	je     c0009a4f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a46:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a4a:	e9 ac fe ff ff       	jmp    c00098fb <Virt::freeKernelVirtualPages(unsigned long)>
c0009a4f:	c7 44 24 04 54 02 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020254
c0009a57:	e9 e0 0e 00 00       	jmp    c000a93c <Dbg::kprintf(char const*, ...)>

c0009a5c <VAS::virtualToPhysical(unsigned long)>:
c0009a5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a60:	50                   	push   eax
c0009a61:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a65:	52                   	push   edx
c0009a66:	e8 71 fe ff ff       	call   c00098dc <VAS::getPageTableEntry(unsigned long)>
c0009a6b:	59                   	pop    ecx
c0009a6c:	5a                   	pop    edx
c0009a6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a74:	c3                   	ret    
c0009a75:	90                   	nop

c0009a76 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a76:	55                   	push   ebp
c0009a77:	57                   	push   edi
c0009a78:	56                   	push   esi
c0009a79:	53                   	push   ebx
c0009a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a82:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a86:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a8a:	85 db                	test   ebx,ebx
c0009a8c:	7e 24                	jle    c0009ab2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a8e:	c1 e3 0c             	shl    ebx,0xc
c0009a91:	01 f3                	add    ebx,esi
c0009a93:	56                   	push   esi
c0009a94:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a9a:	55                   	push   ebp
c0009a9b:	e8 3c fe ff ff       	call   c00098dc <VAS::getPageTableEntry(unsigned long)>
c0009aa0:	5a                   	pop    edx
c0009aa1:	59                   	pop    ecx
c0009aa2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009aa4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009aa8:	21 f9                	and    ecx,edi
c0009aaa:	09 d1                	or     ecx,edx
c0009aac:	39 f3                	cmp    ebx,esi
c0009aae:	89 08                	mov    DWORD PTR [eax],ecx
c0009ab0:	75 e1                	jne    c0009a93 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ab2:	5b                   	pop    ebx
c0009ab3:	5e                   	pop    esi
c0009ab4:	5f                   	pop    edi
c0009ab5:	5d                   	pop    ebp
c0009ab6:	c3                   	ret    
c0009ab7:	90                   	nop

c0009ab8 <VAS::VAS()>:
c0009ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad2:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009ad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009adb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009adf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aea:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009af1:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009af6:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009afb:	29 c2                	sub    edx,eax
c0009afd:	89 d0                	mov    eax,edx
c0009aff:	05 ff 0f 00 00       	add    eax,0xfff
c0009b04:	c1 e8 0c             	shr    eax,0xc
c0009b07:	89 c2                	mov    edx,eax
c0009b09:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b0e:	6a 04                	push   0x4
c0009b10:	6a ff                	push   0xffffffff
c0009b12:	52                   	push   edx
c0009b13:	50                   	push   eax
c0009b14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b18:	e8 59 ff ff ff       	call   c0009a76 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b1d:	83 c4 14             	add    esp,0x14
c0009b20:	90                   	nop
c0009b21:	c3                   	ret    

c0009b22 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b22:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b27:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b2d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b34:	75 01                	jne    c0009b37 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b36:	c3                   	ret    
c0009b37:	68 80 00 00 00       	push   0x80
c0009b3c:	6a ff                	push   0xffffffff
c0009b3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b42:	50                   	push   eax
c0009b43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b47:	52                   	push   edx
c0009b48:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b4c:	51                   	push   ecx
c0009b4d:	e8 24 ff ff ff       	call   c0009a76 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b52:	83 c4 14             	add    esp,0x14
c0009b55:	c3                   	ret    

c0009b56 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b5a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b61:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b69:	83 f8 01             	cmp    eax,0x1
c0009b6c:	19 c0                	sbb    eax,eax
c0009b6e:	83 ca 03             	or     edx,0x3
c0009b71:	83 e0 fc             	and    eax,0xfffffffc
c0009b74:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b7b:	0f 20 d8             	mov    eax,cr3
c0009b7e:	0f 22 d8             	mov    cr3,eax
c0009b81:	c3                   	ret    

c0009b82 <VAS::~VAS()>:
c0009b82:	83 ec 2c             	sub    esp,0x2c
c0009b85:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b8d:	fa                   	cli    
c0009b8e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b93:	83 c0 01             	add    eax,0x1
c0009b96:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b9b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ba2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ba5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009baf:	6a 01                	push   0x1
c0009bb1:	50                   	push   eax
c0009bb2:	e8 9f ff ff ff       	call   c0009b56 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bb7:	83 c4 0c             	add    esp,0xc
c0009bba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bc2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bca:	0f 8f d8 00 00 00    	jg     c0009ca8 <VAS::~VAS()+0x126>
c0009bd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bd4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bdb:	c1 e2 02             	shl    edx,0x2
c0009bde:	01 d0                	add    eax,edx
c0009be0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009be2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bea:	83 e0 01             	and    eax,0x1
c0009bed:	0f 84 ab 00 00 00    	je     c0009c9e <VAS::~VAS()+0x11c>
c0009bf3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009bfb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c03:	7f 74                	jg     c0009c79 <VAS::~VAS()+0xf7>
c0009c05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c09:	c1 e0 0a             	shl    eax,0xa
c0009c0c:	89 c2                	mov    edx,eax
c0009c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c12:	01 d0                	add    eax,edx
c0009c14:	c1 e0 0c             	shl    eax,0xc
c0009c17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c1b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c25:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c2f:	6a 01                	push   0x1
c0009c31:	50                   	push   eax
c0009c32:	e8 77 fc ff ff       	call   c00098ae <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c37:	83 c4 0c             	add    esp,0xc
c0009c3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c4c:	25 01 04 00 00       	and    eax,0x401
c0009c51:	3d 01 04 00 00       	cmp    eax,0x401
c0009c56:	75 1a                	jne    c0009c72 <VAS::~VAS()+0xf0>
c0009c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c61:	83 ec 0c             	sub    esp,0xc
c0009c64:	50                   	push   eax
c0009c65:	e8 02 e1 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c0009c6a:	83 c4 10             	add    esp,0x10
c0009c6d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c72:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c77:	eb 82                	jmp    c0009bfb <VAS::~VAS()+0x79>
c0009c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c7d:	25 00 04 00 00       	and    eax,0x400
c0009c82:	74 1a                	je     c0009c9e <VAS::~VAS()+0x11c>
c0009c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c8d:	83 ec 0c             	sub    esp,0xc
c0009c90:	50                   	push   eax
c0009c91:	e8 d6 e0 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c0009c96:	83 c4 10             	add    esp,0x10
c0009c99:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c9e:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009ca3:	e9 1a ff ff ff       	jmp    c0009bc2 <VAS::~VAS()+0x40>
c0009ca8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009caf:	83 ec 0c             	sub    esp,0xc
c0009cb2:	50                   	push   eax
c0009cb3:	e8 43 fc ff ff       	call   c00098fb <Virt::freeKernelVirtualPages(unsigned long)>
c0009cb8:	83 c4 10             	add    esp,0x10
c0009cbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cbf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cc2:	83 ec 0c             	sub    esp,0xc
c0009cc5:	50                   	push   eax
c0009cc6:	e8 a1 e0 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c0009ccb:	83 c4 10             	add    esp,0x10
c0009cce:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cd3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cd8:	83 e8 01             	sub    eax,0x1
c0009cdb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009ce0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ce5:	85 c0                	test   eax,eax
c0009ce7:	75 01                	jne    c0009cea <VAS::~VAS()+0x168>
c0009ce9:	fb                   	sti    
c0009cea:	90                   	nop
c0009ceb:	83 c4 2c             	add    esp,0x2c
c0009cee:	c3                   	ret    
c0009cef:	90                   	nop

c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cf0:	55                   	push   ebp
c0009cf1:	57                   	push   edi
c0009cf2:	56                   	push   esi
c0009cf3:	53                   	push   ebx
c0009cf4:	83 ec 1c             	sub    esp,0x1c
c0009cf7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cfb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009cff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d03:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d09:	77 08                	ja     c0009d13 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d0b:	0f 20 d8             	mov    eax,cr3
c0009d0e:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d11:	75 43                	jne    c0009d56 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d13:	89 d8                	mov    eax,ebx
c0009d15:	09 f8                	or     eax,edi
c0009d17:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d1c:	75 53                	jne    c0009d71 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d21:	89 de                	mov    esi,ebx
c0009d23:	c1 ee 16             	shr    esi,0x16
c0009d26:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d2d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d31:	74 50                	je     c0009d83 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d37:	c1 eb 0a             	shr    ebx,0xa
c0009d3a:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d40:	c1 e6 0c             	shl    esi,0xc
c0009d43:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d49:	09 c7                	or     edi,eax
c0009d4b:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d4e:	83 c4 1c             	add    esp,0x1c
c0009d51:	5b                   	pop    ebx
c0009d52:	5e                   	pop    esi
c0009d53:	5f                   	pop    edi
c0009d54:	5d                   	pop    ebp
c0009d55:	c3                   	ret    
c0009d56:	83 ec 0c             	sub    esp,0xc
c0009d59:	68 78 02 02 c0       	push   0xc0020278
c0009d5e:	e8 d9 0b 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0009d63:	89 d8                	mov    eax,ebx
c0009d65:	83 c4 10             	add    esp,0x10
c0009d68:	09 f8                	or     eax,edi
c0009d6a:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d6f:	74 ad                	je     c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d71:	83 ec 0c             	sub    esp,0xc
c0009d74:	68 e0 02 02 c0       	push   0xc00202e0
c0009d79:	e8 bf 6d 00 00       	call   c0010b3d <KePanic(char const*)>
c0009d7e:	83 c4 10             	add    esp,0x10
c0009d81:	eb 9b                	jmp    c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d87:	e8 49 e0 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0009d8c:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d92:	83 ec 0c             	sub    esp,0xc
c0009d95:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d9d:	6a 01                	push   0x1
c0009d9f:	e8 45 f8 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0009da4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dab:	6a 01                	push   0x1
c0009dad:	50                   	push   eax
c0009dae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009db2:	52                   	push   edx
c0009db3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009db7:	51                   	push   ecx
c0009db8:	e8 5b 01 00 00       	call   c0009f18 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dbd:	83 c4 1c             	add    esp,0x1c
c0009dc0:	68 00 10 00 00       	push   0x1000
c0009dc5:	6a 00                	push   0x0
c0009dc7:	50                   	push   eax
c0009dc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dcc:	e8 1f 67 ff ff       	call   c00004f0 <memset>
c0009dd1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dd5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dd8:	e8 1e fb ff ff       	call   c00098fb <Virt::freeKernelVirtualPages(unsigned long)>
c0009ddd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009de1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009de5:	83 c4 10             	add    esp,0x10
c0009de8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009deb:	0d 07 04 00 00       	or     eax,0x407
c0009df0:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009df3:	e9 3b ff ff ff       	jmp    c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009df8 <VAS::allocatePages(int, int)>:
c0009df8:	55                   	push   ebp
c0009df9:	57                   	push   edi
c0009dfa:	56                   	push   esi
c0009dfb:	53                   	push   ebx
c0009dfc:	83 ec 1c             	sub    esp,0x1c
c0009dff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e03:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e07:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e0b:	75 75                	jne    c0009e82 <VAS::allocatePages(int, int)+0x8a>
c0009e0d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e14:	85 c0                	test   eax,eax
c0009e16:	74 49                	je     c0009e61 <VAS::allocatePages(int, int)+0x69>
c0009e18:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e1c:	89 d5                	mov    ebp,edx
c0009e1e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e22:	c1 e5 0c             	shl    ebp,0xc
c0009e25:	01 dd                	add    ebp,ebx
c0009e27:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e2a:	81 cf 00 04 00 00    	or     edi,0x400
c0009e30:	85 d2                	test   edx,edx
c0009e32:	7e 1b                	jle    c0009e4f <VAS::allocatePages(int, int)+0x57>
c0009e34:	e8 9c df ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0009e39:	57                   	push   edi
c0009e3a:	53                   	push   ebx
c0009e3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e41:	50                   	push   eax
c0009e42:	56                   	push   esi
c0009e43:	e8 a8 fe ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e48:	83 c4 10             	add    esp,0x10
c0009e4b:	39 dd                	cmp    ebp,ebx
c0009e4d:	75 e5                	jne    c0009e34 <VAS::allocatePages(int, int)+0x3c>
c0009e4f:	0f 20 d8             	mov    eax,cr3
c0009e52:	0f 22 d8             	mov    cr3,eax
c0009e55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e59:	83 c4 1c             	add    esp,0x1c
c0009e5c:	5b                   	pop    ebx
c0009e5d:	5e                   	pop    esi
c0009e5e:	5f                   	pop    edi
c0009e5f:	5d                   	pop    ebp
c0009e60:	c3                   	ret    
c0009e61:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e65:	83 ec 0c             	sub    esp,0xc
c0009e68:	68 04 03 02 c0       	push   0xc0020304
c0009e6d:	e8 cb 6c 00 00       	call   c0010b3d <KePanic(char const*)>
c0009e72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e79:	83 c4 10             	add    esp,0x10
c0009e7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e80:	eb 96                	jmp    c0009e18 <VAS::allocatePages(int, int)+0x20>
c0009e82:	83 ec 0c             	sub    esp,0xc
c0009e85:	52                   	push   edx
c0009e86:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e8a:	e8 5a f7 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0009e8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e93:	83 c4 10             	add    esp,0x10
c0009e96:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009e9b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e9f:	77 38                	ja     c0009ed9 <VAS::allocatePages(int, int)+0xe1>
c0009ea1:	85 d2                	test   edx,edx
c0009ea3:	7e aa                	jle    c0009e4f <VAS::allocatePages(int, int)+0x57>
c0009ea5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ea9:	c1 e2 0c             	shl    edx,0xc
c0009eac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009eb0:	81 cf 00 04 00 00    	or     edi,0x400
c0009eb6:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009eb9:	e8 17 df ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0009ebe:	57                   	push   edi
c0009ebf:	53                   	push   ebx
c0009ec0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ec6:	50                   	push   eax
c0009ec7:	56                   	push   esi
c0009ec8:	e8 23 fe ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ecd:	83 c4 10             	add    esp,0x10
c0009ed0:	39 dd                	cmp    ebp,ebx
c0009ed2:	75 e5                	jne    c0009eb9 <VAS::allocatePages(int, int)+0xc1>
c0009ed4:	e9 76 ff ff ff       	jmp    c0009e4f <VAS::allocatePages(int, int)+0x57>
c0009ed9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009ede:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ee4:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009eeb:	74 b4                	je     c0009ea1 <VAS::allocatePages(int, int)+0xa9>
c0009eed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009ef1:	80 cc 01             	or     ah,0x1
c0009ef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ef8:	eb a7                	jmp    c0009ea1 <VAS::allocatePages(int, int)+0xa9>

c0009efa <VAS::setCPUSpecific(unsigned long)>:
c0009efa:	83 ec 0c             	sub    esp,0xc
c0009efd:	6a 05                	push   0x5
c0009eff:	68 00 00 40 c2       	push   0xc2400000
c0009f04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f08:	50                   	push   eax
c0009f09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f0d:	52                   	push   edx
c0009f0e:	e8 dd fd ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f13:	83 c4 1c             	add    esp,0x1c
c0009f16:	c3                   	ret    
c0009f17:	90                   	nop

c0009f18 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f18:	55                   	push   ebp
c0009f19:	57                   	push   edi
c0009f1a:	56                   	push   esi
c0009f1b:	53                   	push   ebx
c0009f1c:	83 ec 1c             	sub    esp,0x1c
c0009f1f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f23:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f27:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f2b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f2f:	85 db                	test   ebx,ebx
c0009f31:	7e 2c                	jle    c0009f5f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f33:	c1 e3 0c             	shl    ebx,0xc
c0009f36:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f39:	89 f3                	mov    ebx,esi
c0009f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f3f:	55                   	push   ebp
c0009f40:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f44:	29 f2                	sub    edx,esi
c0009f46:	01 da                	add    edx,ebx
c0009f48:	52                   	push   edx
c0009f49:	53                   	push   ebx
c0009f4a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f50:	57                   	push   edi
c0009f51:	e8 9a fd ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f56:	83 c4 10             	add    esp,0x10
c0009f59:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f5d:	75 e0                	jne    c0009f3f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f5f:	0f 20 d8             	mov    eax,cr3
c0009f62:	0f 22 d8             	mov    cr3,eax
c0009f65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f69:	83 c4 1c             	add    esp,0x1c
c0009f6c:	5b                   	pop    ebx
c0009f6d:	5e                   	pop    esi
c0009f6e:	5f                   	pop    edi
c0009f6f:	5d                   	pop    ebp
c0009f70:	c3                   	ret    
c0009f71:	90                   	nop

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f7d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f81:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f8d:	09 d8                	or     eax,ebx
c0009f8f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f94:	75 4b                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f96:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f99:	89 de                	mov    esi,ebx
c0009f9b:	c1 ee 16             	shr    esi,0x16
c0009f9e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009fa5:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009fa9:	74 48                	je     c0009ff3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009fab:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fb0:	c1 eb 0a             	shr    ebx,0xa
c0009fb3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fb7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fbb:	83 ff 01             	cmp    edi,0x1
c0009fbe:	19 c0                	sbb    eax,eax
c0009fc0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fc6:	c1 e6 0c             	shl    esi,0xc
c0009fc9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fce:	01 f3                	add    ebx,esi
c0009fd0:	09 ca                	or     edx,ecx
c0009fd2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	83 ec 0c             	sub    esp,0xc
c0009fe4:	68 30 03 02 c0       	push   0xc0020330
c0009fe9:	e8 4f 6b 00 00       	call   c0010b3d <KePanic(char const*)>
c0009fee:	83 c4 10             	add    esp,0x10
c0009ff1:	eb a3                	jmp    c0009f96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009ff3:	e8 dd dd ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0009ff8:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009ffe:	83 ec 0c             	sub    esp,0xc
c000a001:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a005:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a009:	6a 01                	push   0x1
c000a00b:	e8 d9 f5 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000a010:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a017:	6a 01                	push   0x1
c000a019:	50                   	push   eax
c000a01a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a01e:	50                   	push   eax
c000a01f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a023:	51                   	push   ecx
c000a024:	e8 ef fe ff ff       	call   c0009f18 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a029:	83 c4 1c             	add    esp,0x1c
c000a02c:	68 00 10 00 00       	push   0x1000
c000a031:	6a 00                	push   0x0
c000a033:	50                   	push   eax
c000a034:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a038:	e8 b3 64 ff ff       	call   c00004f0 <memset>
c000a03d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a041:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a044:	e8 b2 f8 ff ff       	call   c00098fb <Virt::freeKernelVirtualPages(unsigned long)>
c000a049:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a04d:	83 c4 10             	add    esp,0x10
c000a050:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a053:	81 ca 07 04 00 00    	or     edx,0x407
c000a059:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a05c:	e9 4a ff ff ff       	jmp    c0009fab <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a061:	90                   	nop

c000a062 <VAS::VAS(bool)>:
c000a062:	53                   	push   ebx
c000a063:	83 ec 28             	sub    esp,0x28
c000a066:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a06a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a06e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a072:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a079:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a07d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a084:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a088:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a08c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a08f:	e8 41 dd ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a094:	89 c2                	mov    edx,eax
c000a096:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a09a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a09d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a0a3:	83 ec 0c             	sub    esp,0xc
c000a0a6:	6a 01                	push   0x1
c000a0a8:	e8 3c f5 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 c2                	mov    edx,eax
c000a0b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0b9:	83 ec 0c             	sub    esp,0xc
c000a0bc:	6a 03                	push   0x3
c000a0be:	6a 01                	push   0x1
c000a0c0:	52                   	push   edx
c000a0c1:	50                   	push   eax
c000a0c2:	53                   	push   ebx
c000a0c3:	e8 50 fe ff ff       	call   c0009f18 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0c8:	83 c4 20             	add    esp,0x20
c000a0cb:	89 c2                	mov    edx,eax
c000a0cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0d4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0dc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0e4:	7f 1d                	jg     c000a103 <VAS::VAS(bool)+0xa1>
c000a0e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f1:	c1 e2 02             	shl    edx,0x2
c000a0f4:	01 d0                	add    eax,edx
c000a0f6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0fc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a101:	eb d9                	jmp    c000a0dc <VAS::VAS(bool)+0x7a>
c000a103:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a10b:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a113:	7f 7e                	jg     c000a193 <VAS::VAS(bool)+0x131>
c000a115:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a119:	2d 00 02 00 00       	sub    eax,0x200
c000a11e:	c1 e0 0c             	shl    eax,0xc
c000a121:	83 c8 05             	or     eax,0x5
c000a124:	89 c2                	mov    edx,eax
c000a126:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a12b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a131:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a137:	83 e0 10             	and    eax,0x10
c000a13a:	0f b6 c0             	movzx  eax,al
c000a13d:	85 c0                	test   eax,eax
c000a13f:	74 07                	je     c000a148 <VAS::VAS(bool)+0xe6>
c000a141:	b8 00 01 00 00       	mov    eax,0x100
c000a146:	eb 05                	jmp    c000a14d <VAS::VAS(bool)+0xeb>
c000a148:	b8 00 00 00 00       	mov    eax,0x0
c000a14d:	09 d0                	or     eax,edx
c000a14f:	89 c1                	mov    ecx,eax
c000a151:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a155:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a158:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a15c:	c1 e2 02             	shl    edx,0x2
c000a15f:	01 d0                	add    eax,edx
c000a161:	89 ca                	mov    edx,ecx
c000a163:	89 10                	mov    DWORD PTR [eax],edx
c000a165:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a169:	2d 40 03 00 00       	sub    eax,0x340
c000a16e:	83 f8 7f             	cmp    eax,0x7f
c000a171:	77 16                	ja     c000a189 <VAS::VAS(bool)+0x127>
c000a173:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a177:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a17a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a17e:	c1 e2 02             	shl    edx,0x2
c000a181:	01 d0                	add    eax,edx
c000a183:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a189:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a18e:	e9 78 ff ff ff       	jmp    c000a10b <VAS::VAS(bool)+0xa9>
c000a193:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a198:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a19e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1a4:	83 e0 10             	and    eax,0x10
c000a1a7:	0f b6 c0             	movzx  eax,al
c000a1aa:	85 c0                	test   eax,eax
c000a1ac:	74 07                	je     c000a1b5 <VAS::VAS(bool)+0x153>
c000a1ae:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b3:	eb 05                	jmp    c000a1ba <VAS::VAS(bool)+0x158>
c000a1b5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1be:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1c7:	89 02                	mov    DWORD PTR [edx],eax
c000a1c9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a1ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1d4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a1da:	83 ec 08             	sub    esp,0x8
c000a1dd:	50                   	push   eax
c000a1de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a1e2:	e8 13 fd ff ff       	call   c0009efa <VAS::setCPUSpecific(unsigned long)>
c000a1e7:	83 c4 10             	add    esp,0x10
c000a1ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1f1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a1f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1fc:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a202:	83 e0 10             	and    eax,0x10
c000a205:	0f b6 c0             	movzx  eax,al
c000a208:	85 c0                	test   eax,eax
c000a20a:	74 07                	je     c000a213 <VAS::VAS(bool)+0x1b1>
c000a20c:	b8 00 01 00 00       	mov    eax,0x100
c000a211:	eb 05                	jmp    c000a218 <VAS::VAS(bool)+0x1b6>
c000a213:	b8 00 00 00 00       	mov    eax,0x0
c000a218:	09 c2                	or     edx,eax
c000a21a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a21e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a221:	05 fc 0f 00 00       	add    eax,0xffc
c000a226:	83 ca 03             	or     edx,0x3
c000a229:	89 10                	mov    DWORD PTR [eax],edx
c000a22b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a230:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a236:	83 ec 0c             	sub    esp,0xc
c000a239:	50                   	push   eax
c000a23a:	e8 c9 20 00 00       	call   c000c308 <Device::getName()>
c000a23f:	83 c4 10             	add    esp,0x10
c000a242:	83 ec 08             	sub    esp,0x8
c000a245:	68 00 05 02 c0       	push   0xc0020500
c000a24a:	50                   	push   eax
c000a24b:	e8 30 65 ff ff       	call   c0000780 <strcmp>
c000a250:	83 c4 10             	add    esp,0x10
c000a253:	85 c0                	test   eax,eax
c000a255:	0f 94 c0             	sete   al
c000a258:	0f b6 c0             	movzx  eax,al
c000a25b:	85 c0                	test   eax,eax
c000a25d:	74 68                	je     c000a2c7 <VAS::VAS(bool)+0x265>
c000a25f:	fa                   	cli    
c000a260:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a265:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a26b:	05 7c 09 00 00       	add    eax,0x97c
c000a270:	83 ec 0c             	sub    esp,0xc
c000a273:	50                   	push   eax
c000a274:	e8 4d d3 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a279:	83 c4 10             	add    esp,0x10
c000a27c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a281:	89 c3                	mov    ebx,eax
c000a283:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a288:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a28e:	05 7c 09 00 00       	add    eax,0x97c
c000a293:	83 ec 0c             	sub    esp,0xc
c000a296:	50                   	push   eax
c000a297:	e8 2a d3 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a29c:	83 c4 10             	add    esp,0x10
c000a29f:	83 ec 08             	sub    esp,0x8
c000a2a2:	50                   	push   eax
c000a2a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a7:	e8 30 f6 ff ff       	call   c00098dc <VAS::getPageTableEntry(unsigned long)>
c000a2ac:	83 c4 10             	add    esp,0x10
c000a2af:	8b 00                	mov    eax,DWORD PTR [eax]
c000a2b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2b6:	6a 11                	push   0x11
c000a2b8:	53                   	push   ebx
c000a2b9:	50                   	push   eax
c000a2ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2be:	e8 2d fa ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	fb                   	sti    
c000a2c7:	90                   	nop
c000a2c8:	83 c4 28             	add    esp,0x28
c000a2cb:	5b                   	pop    ebx
c000a2cc:	c3                   	ret    
c000a2cd:	90                   	nop

c000a2ce <VAS::evict(unsigned long)>:
c000a2ce:	55                   	push   ebp
c000a2cf:	57                   	push   edi
c000a2d0:	56                   	push   esi
c000a2d1:	53                   	push   ebx
c000a2d2:	83 ec 1c             	sub    esp,0x1c
c000a2d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2d9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2e1:	e8 58 f4 ff ff       	call   c000973e <Virt::allocateSwapfilePage()>
c000a2e6:	89 c7                	mov    edi,eax
c000a2e8:	a1 2c 27 02 c0       	mov    eax,ds:0xc002272c
c000a2ed:	85 c0                	test   eax,eax
c000a2ef:	7e 40                	jle    c000a331 <VAS::evict(unsigned long)+0x63>
c000a2f1:	89 ee                	mov    esi,ebp
c000a2f3:	31 db                	xor    ebx,ebx
c000a2f5:	83 ec 0c             	sub    esp,0xc
c000a2f8:	57                   	push   edi
c000a2f9:	e8 2a f4 ff ff       	call   c0009728 <Virt::swapIDToSector(unsigned long)>
c000a2fe:	31 d2                	xor    edx,edx
c000a300:	89 34 24             	mov    DWORD PTR [esp],esi
c000a303:	81 c6 00 02 00 00    	add    esi,0x200
c000a309:	6a 01                	push   0x1
c000a30b:	52                   	push   edx
c000a30c:	01 d8                	add    eax,ebx
c000a30e:	83 c3 01             	add    ebx,0x1
c000a311:	50                   	push   eax
c000a312:	0f be 05 38 27 02 c0 	movsx  eax,BYTE PTR ds:0xc0022738
c000a319:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a320:	50                   	push   eax
c000a321:	e8 a4 31 00 00       	call   c000d4ca <LogicalDisk::write(unsigned long long, int, void*)>
c000a326:	83 c4 20             	add    esp,0x20
c000a329:	39 1d 2c 27 02 c0    	cmp    DWORD PTR ds:0xc002272c,ebx
c000a32f:	7f c4                	jg     c000a2f5 <VAS::evict(unsigned long)+0x27>
c000a331:	c1 e7 0c             	shl    edi,0xc
c000a334:	83 ec 08             	sub    esp,0x8
c000a337:	55                   	push   ebp
c000a338:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a33c:	50                   	push   eax
c000a33d:	e8 9a f5 ff ff       	call   c00098dc <VAS::getPageTableEntry(unsigned long)>
c000a342:	8b 10                	mov    edx,DWORD PTR [eax]
c000a344:	89 d3                	mov    ebx,edx
c000a346:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a34c:	09 d7                	or     edi,edx
c000a34e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a354:	89 38                	mov    DWORD PTR [eax],edi
c000a356:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a359:	8b 15 a8 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fa8
c000a35f:	83 c2 01             	add    edx,0x1
c000a362:	89 15 a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,edx
c000a368:	e8 ff d9 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c000a36d:	0f 20 d8             	mov    eax,cr3
c000a370:	0f 22 d8             	mov    cr3,eax
c000a373:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a379:	51                   	push   ecx
c000a37a:	55                   	push   ebp
c000a37b:	53                   	push   ebx
c000a37c:	68 54 03 02 c0       	push   0xc0020354
c000a381:	e8 b6 05 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000a386:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a38b:	c7 44 24 50 0e 05 02 c0 	mov    DWORD PTR [esp+0x50],0xc002050e
c000a393:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a397:	8d 50 01             	lea    edx,[eax+0x1]
c000a39a:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a3a0:	83 c4 3c             	add    esp,0x3c
c000a3a3:	5b                   	pop    ebx
c000a3a4:	5e                   	pop    esi
c000a3a5:	5f                   	pop    edi
c000a3a6:	5d                   	pop    ebp
c000a3a7:	e9 90 05 00 00       	jmp    c000a93c <Dbg::kprintf(char const*, ...)>

c000a3ac <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a3ac:	55                   	push   ebp
c000a3ad:	57                   	push   edi
c000a3ae:	56                   	push   esi
c000a3af:	53                   	push   ebx
c000a3b0:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a3b6:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a3bd:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a3c3:	77 78                	ja     c000a43d <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a3c5:	83 ec 08             	sub    esp,0x8
c000a3c8:	53                   	push   ebx
c000a3c9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3cf:	68 31 05 02 c0       	push   0xc0020531
c000a3d4:	e8 63 05 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000a3d9:	58                   	pop    eax
c000a3da:	5a                   	pop    edx
c000a3db:	53                   	push   ebx
c000a3dc:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3e3:	51                   	push   ecx
c000a3e4:	e8 f3 f4 ff ff       	call   c00098dc <VAS::getPageTableEntry(unsigned long)>
c000a3e9:	83 c4 10             	add    esp,0x10
c000a3ec:	85 c0                	test   eax,eax
c000a3ee:	89 c5                	mov    ebp,eax
c000a3f0:	0f 95 c0             	setne  al
c000a3f3:	85 db                	test   ebx,ebx
c000a3f5:	0f 95 c2             	setne  dl
c000a3f8:	21 d0                	and    eax,edx
c000a3fa:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3fe:	a8 01                	test   al,0x1
c000a400:	75 0f                	jne    c000a411 <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a402:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a406:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a40c:	5b                   	pop    ebx
c000a40d:	5e                   	pop    esi
c000a40e:	5f                   	pop    edi
c000a40f:	5d                   	pop    ebp
c000a410:	c3                   	ret    
c000a411:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a414:	f6 c4 02             	test   ah,0x2
c000a417:	75 39                	jne    c000a452 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a419:	89 c2                	mov    edx,eax
c000a41b:	81 e2 01 04 00 00    	and    edx,0x401
c000a421:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a427:	74 73                	je     c000a49c <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a429:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a42e:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a432:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a438:	5b                   	pop    ebx
c000a439:	5e                   	pop    esi
c000a43a:	5f                   	pop    edi
c000a43b:	5d                   	pop    ebp
c000a43c:	c3                   	ret    
c000a43d:	83 ec 0c             	sub    esp,0xc
c000a440:	68 1f 05 02 c0       	push   0xc002051f
c000a445:	e8 f3 66 00 00       	call   c0010b3d <KePanic(char const*)>
c000a44a:	83 c4 10             	add    esp,0x10
c000a44d:	e9 73 ff ff ff       	jmp    c000a3c5 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a452:	83 ec 0c             	sub    esp,0xc
c000a455:	89 de                	mov    esi,ebx
c000a457:	68 84 03 02 c0       	push   0xc0020384
c000a45c:	e8 db 04 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000a461:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a465:	e8 6b d9 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a46a:	ba 00 10 00 00       	mov    edx,0x1000
c000a46f:	89 d1                	mov    ecx,edx
c000a471:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a473:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a476:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a47c:	09 c8                	or     eax,ecx
c000a47e:	83 c8 02             	or     eax,0x2
c000a481:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a484:	0f 20 d8             	mov    eax,cr3
c000a487:	0f 22 d8             	mov    cr3,eax
c000a48a:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a48e:	89 df                	mov    edi,ebx
c000a490:	89 d1                	mov    ecx,edx
c000a492:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	e9 66 ff ff ff       	jmp    c000a402 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a49c:	c1 e8 0c             	shr    eax,0xc
c000a49f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4a3:	e8 2d d9 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a4a8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a4ab:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a4b1:	09 c2                	or     edx,eax
c000a4b3:	81 ca 01 08 00 00    	or     edx,0x801
c000a4b9:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a4bc:	a1 2c 27 02 c0       	mov    eax,ds:0xc002272c
c000a4c1:	85 c0                	test   eax,eax
c000a4c3:	7e 44                	jle    c000a509 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a4c5:	89 df                	mov    edi,ebx
c000a4c7:	31 f6                	xor    esi,esi
c000a4c9:	83 ec 0c             	sub    esp,0xc
c000a4cc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4d0:	51                   	push   ecx
c000a4d1:	e8 52 f2 ff ff       	call   c0009728 <Virt::swapIDToSector(unsigned long)>
c000a4d6:	31 d2                	xor    edx,edx
c000a4d8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4db:	81 c7 00 02 00 00    	add    edi,0x200
c000a4e1:	6a 01                	push   0x1
c000a4e3:	52                   	push   edx
c000a4e4:	01 f0                	add    eax,esi
c000a4e6:	83 c6 01             	add    esi,0x1
c000a4e9:	50                   	push   eax
c000a4ea:	0f be 05 38 27 02 c0 	movsx  eax,BYTE PTR ds:0xc0022738
c000a4f1:	8b 2c 85 1c 73 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8ce4]
c000a4f8:	55                   	push   ebp
c000a4f9:	e8 60 2f 00 00       	call   c000d45e <LogicalDisk::read(unsigned long long, int, void*)>
c000a4fe:	83 c4 20             	add    esp,0x20
c000a501:	39 35 2c 27 02 c0    	cmp    DWORD PTR ds:0xc002272c,esi
c000a507:	7f c0                	jg     c000a4c9 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a509:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a50e:	83 ec 04             	sub    esp,0x4
c000a511:	83 e8 01             	sub    eax,0x1
c000a514:	50                   	push   eax
c000a515:	53                   	push   ebx
c000a516:	68 44 05 02 c0       	push   0xc0020544
c000a51b:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a520:	e8 17 04 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000a525:	58                   	pop    eax
c000a526:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a52a:	52                   	push   edx
c000a52b:	e8 d5 f1 ff ff       	call   c0009705 <Virt::freeSwapfilePage(unsigned long)>
c000a530:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a535:	83 c4 10             	add    esp,0x10
c000a538:	83 e8 01             	sub    eax,0x1
c000a53b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a540:	85 c0                	test   eax,eax
c000a542:	75 01                	jne    c000a545 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a544:	fb                   	sti    
c000a545:	0f 20 d8             	mov    eax,cr3
c000a548:	0f 22 d8             	mov    cr3,eax
c000a54b:	e9 b2 fe ff ff       	jmp    c000a402 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a550 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a550:	55                   	push   ebp
c000a551:	57                   	push   edi
c000a552:	56                   	push   esi
c000a553:	53                   	push   ebx
c000a554:	83 ec 28             	sub    esp,0x28
c000a557:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a55b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a55f:	50                   	push   eax
c000a560:	e8 84 f0 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000a565:	83 c4 0c             	add    esp,0xc
c000a568:	6a 07                	push   0x7
c000a56a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a56e:	52                   	push   edx
c000a56f:	89 c5                	mov    ebp,eax
c000a571:	53                   	push   ebx
c000a572:	e8 81 f8 ff ff       	call   c0009df8 <VAS::allocatePages(int, int)>
c000a577:	83 c4 10             	add    esp,0x10
c000a57a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a57e:	89 c7                	mov    edi,eax
c000a580:	85 c9                	test   ecx,ecx
c000a582:	74 2f                	je     c000a5b3 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a584:	31 f6                	xor    esi,esi
c000a586:	e8 4a d8 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a58b:	83 c6 01             	add    esi,0x1
c000a58e:	6a 03                	push   0x3
c000a590:	55                   	push   ebp
c000a591:	50                   	push   eax
c000a592:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a596:	53                   	push   ebx
c000a597:	e8 54 f7 ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a59c:	6a 07                	push   0x7
c000a59e:	57                   	push   edi
c000a59f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a5a3:	50                   	push   eax
c000a5a4:	53                   	push   ebx
c000a5a5:	e8 46 f7 ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5aa:	83 c4 20             	add    esp,0x20
c000a5ad:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a5b1:	75 d3                	jne    c000a586 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a5b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a5b7:	89 28                	mov    DWORD PTR [eax],ebp
c000a5b9:	83 c4 1c             	add    esp,0x1c
c000a5bc:	89 f8                	mov    eax,edi
c000a5be:	5b                   	pop    ebx
c000a5bf:	5e                   	pop    esi
c000a5c0:	5f                   	pop    edi
c000a5c1:	5d                   	pop    ebp
c000a5c2:	c3                   	ret    
c000a5c3:	90                   	nop

c000a5c4 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a5c4:	53                   	push   ebx
c000a5c5:	83 ec 14             	sub    esp,0x14
c000a5c8:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5cc:	68 a4 03 02 c0       	push   0xc00203a4
c000a5d1:	e8 66 03 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000a5d6:	c7 04 24 04 04 02 c0 	mov    DWORD PTR [esp],0xc0020404
c000a5dd:	e8 5a 03 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000a5e2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5e6:	83 c4 18             	add    esp,0x18
c000a5e9:	5b                   	pop    ebx
c000a5ea:	e9 0c f3 ff ff       	jmp    c00098fb <Virt::freeKernelVirtualPages(unsigned long)>
c000a5ef:	90                   	nop

c000a5f0 <VAS::scanForEviction()>:
c000a5f0:	57                   	push   edi
c000a5f1:	56                   	push   esi
c000a5f2:	31 f6                	xor    esi,esi
c000a5f4:	53                   	push   ebx
c000a5f5:	83 ec 10             	sub    esp,0x10
c000a5f8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5fc:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5ff:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a605:	75 0e                	jne    c000a615 <VAS::scanForEviction()+0x25>
c000a607:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a60a:	89 da                	mov    edx,ebx
c000a60c:	c1 ea 16             	shr    edx,0x16
c000a60f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a613:	74 57                	je     c000a66c <VAS::scanForEviction()+0x7c>
c000a615:	53                   	push   ebx
c000a616:	57                   	push   edi
c000a617:	e8 c0 f2 ff ff       	call   c00098dc <VAS::getPageTableEntry(unsigned long)>
c000a61c:	5a                   	pop    edx
c000a61d:	59                   	pop    ecx
c000a61e:	8b 10                	mov    edx,DWORD PTR [eax]
c000a620:	89 d1                	mov    ecx,edx
c000a622:	c1 e9 0c             	shr    ecx,0xc
c000a625:	74 10                	je     c000a637 <VAS::scanForEviction()+0x47>
c000a627:	89 d1                	mov    ecx,edx
c000a629:	81 e1 01 08 00 00    	and    ecx,0x801
c000a62f:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a635:	74 40                	je     c000a677 <VAS::scanForEviction()+0x87>
c000a637:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a63d:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a643:	76 2d                	jbe    c000a672 <VAS::scanForEviction()+0x82>
c000a645:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a64c:	83 c6 01             	add    esi,0x1
c000a64f:	83 fe 03             	cmp    esi,0x3
c000a652:	74 32                	je     c000a686 <VAS::scanForEviction()+0x96>
c000a654:	31 db                	xor    ebx,ebx
c000a656:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a65c:	75 b7                	jne    c000a615 <VAS::scanForEviction()+0x25>
c000a65e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a661:	89 da                	mov    edx,ebx
c000a663:	c1 ea 16             	shr    edx,0x16
c000a666:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a66a:	75 a9                	jne    c000a615 <VAS::scanForEviction()+0x25>
c000a66c:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a672:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a675:	eb 88                	jmp    c000a5ff <VAS::scanForEviction()+0xf>
c000a677:	f6 c2 20             	test   dl,0x20
c000a67a:	74 13                	je     c000a68f <VAS::scanForEviction()+0x9f>
c000a67c:	83 e2 df             	and    edx,0xffffffdf
c000a67f:	89 10                	mov    DWORD PTR [eax],edx
c000a681:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a684:	eb b1                	jmp    c000a637 <VAS::scanForEviction()+0x47>
c000a686:	83 c4 10             	add    esp,0x10
c000a689:	31 c0                	xor    eax,eax
c000a68b:	5b                   	pop    ebx
c000a68c:	5e                   	pop    esi
c000a68d:	5f                   	pop    edi
c000a68e:	c3                   	ret    
c000a68f:	89 d0                	mov    eax,edx
c000a691:	83 ec 08             	sub    esp,0x8
c000a694:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a699:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a69d:	53                   	push   ebx
c000a69e:	68 59 05 02 c0       	push   0xc0020559
c000a6a3:	e8 94 02 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000a6a8:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6ab:	58                   	pop    eax
c000a6ac:	5a                   	pop    edx
c000a6ad:	51                   	push   ecx
c000a6ae:	57                   	push   edi
c000a6af:	e8 1a fc ff ff       	call   c000a2ce <VAS::evict(unsigned long)>
c000a6b4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a6b7:	5b                   	pop    ebx
c000a6b8:	5e                   	pop    esi
c000a6b9:	50                   	push   eax
c000a6ba:	68 6d 05 02 c0       	push   0xc002056d
c000a6bf:	e8 78 02 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000a6c4:	58                   	pop    eax
c000a6c5:	5a                   	pop    edx
c000a6c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6ca:	50                   	push   eax
c000a6cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6cf:	68 80 05 02 c0       	push   0xc0020580
c000a6d4:	e8 63 02 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000a6d9:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6dc:	83 c4 10             	add    esp,0x10
c000a6df:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6e5:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ec:	83 c4 10             	add    esp,0x10
c000a6ef:	5b                   	pop    ebx
c000a6f0:	5e                   	pop    esi
c000a6f1:	5f                   	pop    edi
c000a6f2:	c3                   	ret    

c000a6f3 <mapVASFirstTime>:
c000a6f3:	55                   	push   ebp
c000a6f4:	57                   	push   edi
c000a6f5:	56                   	push   esi
c000a6f6:	53                   	push   ebx
c000a6f7:	83 ec 0c             	sub    esp,0xc
c000a6fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6ff:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a702:	83 fa 01             	cmp    edx,0x1
c000a705:	0f 84 cb 00 00 00    	je     c000a7d6 <mapVASFirstTime+0xe3>
c000a70b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a70e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a713:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a718:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a71b:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a721:	c1 e5 15             	shl    ebp,0x15
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 a8 d6 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a72d:	83 ec 0c             	sub    esp,0xc
c000a730:	68 03 04 00 00       	push   0x403
c000a735:	6a 01                	push   0x1
c000a737:	53                   	push   ebx
c000a738:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a73e:	50                   	push   eax
c000a73f:	56                   	push   esi
c000a740:	e8 d3 f7 ff ff       	call   c0009f18 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a745:	83 c4 20             	add    esp,0x20
c000a748:	39 fb                	cmp    ebx,edi
c000a74a:	75 dc                	jne    c000a728 <mapVASFirstTime+0x35>
c000a74c:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a751:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a756:	29 eb                	sub    ebx,ebp
c000a758:	29 ef                	sub    edi,ebp
c000a75a:	e8 76 d6 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a75f:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a763:	83 fa 01             	cmp    edx,0x1
c000a766:	19 d2                	sbb    edx,edx
c000a768:	83 ec 0c             	sub    esp,0xc
c000a76b:	83 e2 04             	and    edx,0x4
c000a76e:	81 c2 03 04 00 00    	add    edx,0x403
c000a774:	52                   	push   edx
c000a775:	6a 01                	push   0x1
c000a777:	53                   	push   ebx
c000a778:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a77e:	50                   	push   eax
c000a77f:	56                   	push   esi
c000a780:	e8 93 f7 ff ff       	call   c0009f18 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a785:	83 c4 20             	add    esp,0x20
c000a788:	39 df                	cmp    edi,ebx
c000a78a:	75 ce                	jne    c000a75a <mapVASFirstTime+0x67>
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a794:	6a 04                	push   0x4
c000a796:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a79c:	6a ff                	push   0xffffffff
c000a79e:	c1 eb 0c             	shr    ebx,0xc
c000a7a1:	53                   	push   ebx
c000a7a2:	68 00 30 02 c0       	push   0xc0023000
c000a7a7:	56                   	push   esi
c000a7a8:	e8 c9 f2 ff ff       	call   c0009a76 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7ad:	83 c4 14             	add    esp,0x14
c000a7b0:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a7b5:	6a 04                	push   0x4
c000a7b7:	6a ff                	push   0xffffffff
c000a7b9:	53                   	push   ebx
c000a7ba:	68 00 30 02 c0       	push   0xc0023000
c000a7bf:	50                   	push   eax
c000a7c0:	e8 b1 f2 ff ff       	call   c0009a76 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7c5:	0f 20 d8             	mov    eax,cr3
c000a7c8:	0f 22 d8             	mov    cr3,eax
c000a7cb:	83 c4 20             	add    esp,0x20
c000a7ce:	83 c4 0c             	add    esp,0xc
c000a7d1:	5b                   	pop    ebx
c000a7d2:	5e                   	pop    esi
c000a7d3:	5f                   	pop    edi
c000a7d4:	5d                   	pop    ebp
c000a7d5:	c3                   	ret    
c000a7d6:	83 ec 0c             	sub    esp,0xc
c000a7d9:	68 8d 05 02 c0       	push   0xc002058d
c000a7de:	e8 59 01 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000a7e3:	83 c4 10             	add    esp,0x10
c000a7e6:	83 c4 0c             	add    esp,0xc
c000a7e9:	5b                   	pop    ebx
c000a7ea:	5e                   	pop    esi
c000a7eb:	5f                   	pop    edi
c000a7ec:	5d                   	pop    ebp
c000a7ed:	c3                   	ret    

c000a7ee <__cxa_atexit>:
c000a7ee:	31 c0                	xor    eax,eax
c000a7f0:	c3                   	ret    

c000a7f1 <__cxa_finalize>:
c000a7f1:	c3                   	ret    

c000a7f2 <__stack_chk_fail>:
c000a7f2:	55                   	push   ebp
c000a7f3:	89 e5                	mov    ebp,esp
c000a7f5:	83 ec 10             	sub    esp,0x10
c000a7f8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7fb:	68 a6 05 02 c0       	push   0xc00205a6
c000a800:	e8 37 01 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000a805:	58                   	pop    eax
c000a806:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a809:	5a                   	pop    edx
c000a80a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a80d:	68 a6 05 02 c0       	push   0xc00205a6
c000a812:	e8 25 01 00 00       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000a817:	c7 04 24 ae 05 02 c0 	mov    DWORD PTR [esp],0xc00205ae
c000a81e:	e8 1a 63 00 00       	call   c0010b3d <KePanic(char const*)>
c000a823:	83 c4 10             	add    esp,0x10
c000a826:	c9                   	leave  
c000a827:	c3                   	ret    

c000a828 <__cxa_pure_virtual>:
c000a828:	83 ec 18             	sub    esp,0x18
c000a82b:	68 c6 05 02 c0       	push   0xc00205c6
c000a830:	e8 08 63 00 00       	call   c0010b3d <KePanic(char const*)>
c000a835:	83 c4 1c             	add    esp,0x1c
c000a838:	c3                   	ret    

c000a839 <operator new[](unsigned long)>:
c000a839:	e9 8d d2 ff ff       	jmp    c0007acb <malloc>

c000a83e <operator delete(void*, unsigned long)>:
c000a83e:	e9 a8 d2 ff ff       	jmp    c0007aeb <rfree>

c000a843 <operator delete[](void*)>:
c000a843:	e9 a3 d2 ff ff       	jmp    c0007aeb <rfree>

c000a848 <operator delete[](void*, unsigned long)>:
c000a848:	e9 9e d2 ff ff       	jmp    c0007aeb <rfree>

c000a84d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a84d:	55                   	push   ebp
c000a84e:	57                   	push   edi
c000a84f:	56                   	push   esi
c000a850:	53                   	push   ebx
c000a851:	83 ec 20             	sub    esp,0x20
c000a854:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a858:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a860:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a864:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a86c:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a870:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a878:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a880:	89 f7                	mov    edi,esi
c000a882:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a887:	89 eb                	mov    ebx,ebp
c000a889:	eb 02                	jmp    c000a88d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a88b:	89 c7                	mov    edi,eax
c000a88d:	31 d2                	xor    edx,edx
c000a88f:	89 f8                	mov    eax,edi
c000a891:	f7 f1                	div    ecx
c000a893:	83 c3 01             	add    ebx,0x1
c000a896:	39 cf                	cmp    edi,ecx
c000a898:	73 f1                	jae    c000a88b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a89a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a89d:	eb 02                	jmp    c000a8a1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a89f:	89 c6                	mov    esi,eax
c000a8a1:	31 d2                	xor    edx,edx
c000a8a3:	89 f0                	mov    eax,esi
c000a8a5:	f7 f1                	div    ecx
c000a8a7:	83 eb 01             	sub    ebx,0x1
c000a8aa:	39 ce                	cmp    esi,ecx
c000a8ac:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8b0:	88 13                	mov    BYTE PTR [ebx],dl
c000a8b2:	73 eb                	jae    c000a89f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a8b4:	83 c4 20             	add    esp,0x20
c000a8b7:	89 e8                	mov    eax,ebp
c000a8b9:	5b                   	pop    ebx
c000a8ba:	5e                   	pop    esi
c000a8bb:	5f                   	pop    edi
c000a8bc:	5d                   	pop    ebp
c000a8bd:	c3                   	ret    

c000a8be <Dbg::logc(char)>:
c000a8be:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a8c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8c9:	75 12                	jne    c000a8dd <Dbg::logc(char)+0x1f>
c000a8cb:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d0:	ec                   	in     al,dx
c000a8d1:	a8 20                	test   al,0x20
c000a8d3:	74 fb                	je     c000a8d0 <Dbg::logc(char)+0x12>
c000a8d5:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8da:	88 c8                	mov    al,cl
c000a8dc:	ee                   	out    dx,al
c000a8dd:	c3                   	ret    

c000a8de <Dbg::logs(char*)>:
c000a8de:	53                   	push   ebx
c000a8df:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8e3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8e6:	85 c0                	test   eax,eax
c000a8e8:	74 11                	je     c000a8fb <Dbg::logs(char*)+0x1d>
c000a8ea:	50                   	push   eax
c000a8eb:	83 c3 01             	add    ebx,0x1
c000a8ee:	e8 cb ff ff ff       	call   c000a8be <Dbg::logc(char)>
c000a8f3:	58                   	pop    eax
c000a8f4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8f7:	85 c0                	test   eax,eax
c000a8f9:	75 ef                	jne    c000a8ea <Dbg::logs(char*)+0xc>
c000a8fb:	5b                   	pop    ebx
c000a8fc:	c3                   	ret    

c000a8fd <Dbg::logWriteInt(unsigned int)>:
c000a8fd:	83 ec 10             	sub    esp,0x10
c000a900:	6a 0a                	push   0xa
c000a902:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a906:	50                   	push   eax
c000a907:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a90b:	50                   	push   eax
c000a90c:	e8 3c ff ff ff       	call   c000a84d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a911:	50                   	push   eax
c000a912:	e8 c7 ff ff ff       	call   c000a8de <Dbg::logs(char*)>
c000a917:	83 c4 20             	add    esp,0x20
c000a91a:	c3                   	ret    

c000a91b <Dbg::logWriteIntBase(unsigned int, int)>:
c000a91b:	83 ec 10             	sub    esp,0x10
c000a91e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a922:	50                   	push   eax
c000a923:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a927:	50                   	push   eax
c000a928:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a92c:	52                   	push   edx
c000a92d:	e8 1b ff ff ff       	call   c000a84d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a932:	50                   	push   eax
c000a933:	e8 a6 ff ff ff       	call   c000a8de <Dbg::logs(char*)>
c000a938:	83 c4 20             	add    esp,0x20
c000a93b:	c3                   	ret    

c000a93c <Dbg::kprintf(char const*, ...)>:
c000a93c:	55                   	push   ebp
c000a93d:	57                   	push   edi
c000a93e:	56                   	push   esi
c000a93f:	53                   	push   ebx
c000a940:	83 ec 0c             	sub    esp,0xc
c000a943:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a94a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a94e:	74 08                	je     c000a958 <Dbg::kprintf(char const*, ...)+0x1c>
c000a950:	83 c4 0c             	add    esp,0xc
c000a953:	5b                   	pop    ebx
c000a954:	5e                   	pop    esi
c000a955:	5f                   	pop    edi
c000a956:	5d                   	pop    ebp
c000a957:	c3                   	ret    
c000a958:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a95c:	31 ff                	xor    edi,edi
c000a95e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a962:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a965:	85 c0                	test   eax,eax
c000a967:	74 e7                	je     c000a950 <Dbg::kprintf(char const*, ...)+0x14>
c000a969:	8d 77 01             	lea    esi,[edi+0x1]
c000a96c:	83 f8 25             	cmp    eax,0x25
c000a96f:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a972:	75 47                	jne    c000a9bb <Dbg::kprintf(char const*, ...)+0x7f>
c000a974:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a977:	83 c7 02             	add    edi,0x2
c000a97a:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a97d:	83 e8 25             	sub    eax,0x25
c000a980:	0f b6 c0             	movzx  eax,al
c000a983:	83 f8 53             	cmp    eax,0x53
c000a986:	0f 87 ce 00 00 00    	ja     c000aa5a <Dbg::kprintf(char const*, ...)+0x11e>
c000a98c:	ff 24 85 dc 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa24]
c000a993:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a997:	89 c8                	mov    eax,ecx
c000a999:	83 c1 04             	add    ecx,0x4
c000a99c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9a2:	55                   	push   ebp
c000a9a3:	e8 55 ff ff ff       	call   c000a8fd <Dbg::logWriteInt(unsigned int)>
c000a9a8:	58                   	pop    eax
c000a9a9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9ac:	85 c0                	test   eax,eax
c000a9ae:	74 a0                	je     c000a950 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b0:	8d 77 01             	lea    esi,[edi+0x1]
c000a9b3:	83 f8 25             	cmp    eax,0x25
c000a9b6:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9b9:	74 b9                	je     c000a974 <Dbg::kprintf(char const*, ...)+0x38>
c000a9bb:	50                   	push   eax
c000a9bc:	89 f7                	mov    edi,esi
c000a9be:	e8 fb fe ff ff       	call   c000a8be <Dbg::logc(char)>
c000a9c3:	89 ee                	mov    esi,ebp
c000a9c5:	58                   	pop    eax
c000a9c6:	eb e1                	jmp    c000a9a9 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9cc:	89 c8                	mov    eax,ecx
c000a9ce:	83 c1 04             	add    ecx,0x4
c000a9d1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9d7:	50                   	push   eax
c000a9d8:	e8 01 ff ff ff       	call   c000a8de <Dbg::logs(char*)>
c000a9dd:	58                   	pop    eax
c000a9de:	eb c9                	jmp    c000a9a9 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9e4:	89 d0                	mov    eax,edx
c000a9e6:	83 c2 04             	add    edx,0x4
c000a9e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9ed:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9ef:	50                   	push   eax
c000a9f0:	e8 08 ff ff ff       	call   c000a8fd <Dbg::logWriteInt(unsigned int)>
c000a9f5:	58                   	pop    eax
c000a9f6:	eb b1                	jmp    c000a9a9 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9fc:	89 d0                	mov    eax,edx
c000a9fe:	83 c2 04             	add    edx,0x4
c000aa01:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa05:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa08:	50                   	push   eax
c000aa09:	e8 b0 fe ff ff       	call   c000a8be <Dbg::logc(char)>
c000aa0e:	58                   	pop    eax
c000aa0f:	eb 98                	jmp    c000a9a9 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa11:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa15:	89 c8                	mov    eax,ecx
c000aa17:	83 c1 04             	add    ecx,0x4
c000aa1a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa1e:	6a 10                	push   0x10
c000aa20:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa22:	51                   	push   ecx
c000aa23:	e8 f3 fe ff ff       	call   c000a91b <Dbg::logWriteIntBase(unsigned int, int)>
c000aa28:	5d                   	pop    ebp
c000aa29:	58                   	pop    eax
c000aa2a:	e9 7a ff ff ff       	jmp    c000a9a9 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa2f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa33:	89 d0                	mov    eax,edx
c000aa35:	83 c2 08             	add    edx,0x8
c000aa38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa3c:	6a 10                	push   0x10
c000aa3e:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa40:	50                   	push   eax
c000aa41:	e8 d5 fe ff ff       	call   c000a91b <Dbg::logWriteIntBase(unsigned int, int)>
c000aa46:	58                   	pop    eax
c000aa47:	5a                   	pop    edx
c000aa48:	e9 5c ff ff ff       	jmp    c000a9a9 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa4d:	6a 25                	push   0x25
c000aa4f:	e8 6a fe ff ff       	call   c000a8be <Dbg::logc(char)>
c000aa54:	5a                   	pop    edx
c000aa55:	e9 4f ff ff ff       	jmp    c000a9a9 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa5a:	6a 25                	push   0x25
c000aa5c:	e8 5d fe ff ff       	call   c000a8be <Dbg::logc(char)>
c000aa61:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa65:	50                   	push   eax
c000aa66:	e8 53 fe ff ff       	call   c000a8be <Dbg::logc(char)>
c000aa6b:	5a                   	pop    edx
c000aa6c:	59                   	pop    ecx
c000aa6d:	e9 37 ff ff ff       	jmp    c000a9a9 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa72:	66 90                	xchg   ax,ax

c000aa74 <KiUbsanPrintDetails(char const*, void*)>:
c000aa74:	83 ec 1c             	sub    esp,0x1c
c000aa77:	83 ec 08             	sub    esp,0x8
c000aa7a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa7e:	68 2c 07 02 c0       	push   0xc002072c
c000aa83:	e8 b4 fe ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa97:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa99:	83 ec 08             	sub    esp,0x8
c000aa9c:	50                   	push   eax
c000aa9d:	68 40 07 02 c0       	push   0xc0020740
c000aaa2:	e8 95 fe ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000aaa7:	83 c4 10             	add    esp,0x10
c000aaaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aaae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab1:	83 ec 08             	sub    esp,0x8
c000aab4:	50                   	push   eax
c000aab5:	68 4a 07 02 c0       	push   0xc002074a
c000aaba:	e8 7d fe ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000aabf:	83 c4 10             	add    esp,0x10
c000aac2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aac6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aac9:	83 ec 08             	sub    esp,0x8
c000aacc:	50                   	push   eax
c000aacd:	68 54 07 02 c0       	push   0xc0020754
c000aad2:	e8 65 fe ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	90                   	nop
c000aadb:	83 c4 1c             	add    esp,0x1c
c000aade:	c3                   	ret    
c000aadf:	90                   	nop

c000aae0 <__ubsan_handle_type_mismatch_v1>:
c000aae0:	83 ec 0c             	sub    esp,0xc
c000aae3:	83 ec 08             	sub    esp,0x8
c000aae6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaea:	68 98 08 02 c0       	push   0xc0020898
c000aaef:	e8 80 ff ff ff       	call   c000aa74 <KiUbsanPrintDetails(char const*, void*)>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aafc:	75 16                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x34>
c000aafe:	83 ec 0c             	sub    esp,0xc
c000ab01:	68 5e 07 02 c0       	push   0xc002075e
c000ab06:	e8 31 fe ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000ab0b:	83 c4 10             	add    esp,0x10
c000ab0e:	e9 91 00 00 00       	jmp    c000aba4 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab13:	90                   	nop
c000ab14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab18:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab1b:	85 c0                	test   eax,eax
c000ab1d:	74 29                	je     c000ab48 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab23:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab26:	83 e8 01             	sub    eax,0x1
c000ab29:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab2d:	75 19                	jne    c000ab48 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab2f:	83 ec 08             	sub    esp,0x8
c000ab32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab36:	68 b8 08 02 c0       	push   0xc00208b8
c000ab3b:	e8 fc fd ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000ab40:	83 c4 10             	add    esp,0x10
c000ab43:	eb 5f                	jmp    c000aba4 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab45:	8d 76 00             	lea    esi,[esi+0x0]
c000ab48:	83 ec 0c             	sub    esp,0xc
c000ab4b:	68 73 07 02 c0       	push   0xc0020773
c000ab50:	e8 e7 fd ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000ab55:	83 c4 10             	add    esp,0x10
c000ab58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab5f:	0f b6 c0             	movzx  eax,al
c000ab62:	83 ec 08             	sub    esp,0x8
c000ab65:	50                   	push   eax
c000ab66:	68 8d 07 02 c0       	push   0xc002078d
c000ab6b:	e8 cc fd ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000ab70:	83 c4 10             	add    esp,0x10
c000ab73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab77:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab7a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab85:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab88:	0f b6 c0             	movzx  eax,al
c000ab8b:	8b 04 85 40 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd8c0]
c000ab92:	51                   	push   ecx
c000ab93:	52                   	push   edx
c000ab94:	50                   	push   eax
c000ab95:	68 e0 08 02 c0       	push   0xc00208e0
c000ab9a:	e8 9d fd ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	66 90                	xchg   ax,ax
c000aba4:	83 ec 0c             	sub    esp,0xc
c000aba7:	68 98 08 02 c0       	push   0xc0020898
c000abac:	e8 8c 5f 00 00       	call   c0010b3d <KePanic(char const*)>
c000abb1:	83 c4 10             	add    esp,0x10
c000abb4:	90                   	nop
c000abb5:	83 c4 0c             	add    esp,0xc
c000abb8:	c3                   	ret    
c000abb9:	8d 76 00             	lea    esi,[esi+0x0]

c000abbc <__ubsan_handle_pointer_overflow>:
c000abbc:	83 ec 0c             	sub    esp,0xc
c000abbf:	83 ec 08             	sub    esp,0x8
c000abc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abc6:	68 28 09 02 c0       	push   0xc0020928
c000abcb:	e8 a4 fe ff ff       	call   c000aa74 <KiUbsanPrintDetails(char const*, void*)>
c000abd0:	83 c4 10             	add    esp,0x10
c000abd3:	83 ec 0c             	sub    esp,0xc
c000abd6:	68 28 09 02 c0       	push   0xc0020928
c000abdb:	e8 5d 5f 00 00       	call   c0010b3d <KePanic(char const*)>
c000abe0:	83 c4 10             	add    esp,0x10
c000abe3:	90                   	nop
c000abe4:	83 c4 0c             	add    esp,0xc
c000abe7:	c3                   	ret    

c000abe8 <__ubsan_handle_out_of_bounds>:
c000abe8:	83 ec 0c             	sub    esp,0xc
c000abeb:	83 ec 08             	sub    esp,0x8
c000abee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abf2:	68 98 07 02 c0       	push   0xc0020798
c000abf7:	e8 78 fe ff ff       	call   c000aa74 <KiUbsanPrintDetails(char const*, void*)>
c000abfc:	83 c4 10             	add    esp,0x10
c000abff:	83 ec 0c             	sub    esp,0xc
c000ac02:	68 98 07 02 c0       	push   0xc0020798
c000ac07:	e8 31 5f 00 00       	call   c0010b3d <KePanic(char const*)>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	90                   	nop
c000ac10:	83 c4 0c             	add    esp,0xc
c000ac13:	c3                   	ret    

c000ac14 <__ubsan_handle_add_overflow>:
c000ac14:	83 ec 0c             	sub    esp,0xc
c000ac17:	83 ec 08             	sub    esp,0x8
c000ac1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac1e:	68 b5 07 02 c0       	push   0xc00207b5
c000ac23:	e8 4c fe ff ff       	call   c000aa74 <KiUbsanPrintDetails(char const*, void*)>
c000ac28:	83 c4 10             	add    esp,0x10
c000ac2b:	83 ec 0c             	sub    esp,0xc
c000ac2e:	68 b5 07 02 c0       	push   0xc00207b5
c000ac33:	e8 05 5f 00 00       	call   c0010b3d <KePanic(char const*)>
c000ac38:	83 c4 10             	add    esp,0x10
c000ac3b:	90                   	nop
c000ac3c:	83 c4 0c             	add    esp,0xc
c000ac3f:	c3                   	ret    

c000ac40 <__ubsan_handle_load_invalid_value>:
c000ac40:	83 ec 0c             	sub    esp,0xc
c000ac43:	83 ec 08             	sub    esp,0x8
c000ac46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac4a:	68 48 09 02 c0       	push   0xc0020948
c000ac4f:	e8 20 fe ff ff       	call   c000aa74 <KiUbsanPrintDetails(char const*, void*)>
c000ac54:	83 c4 10             	add    esp,0x10
c000ac57:	83 ec 0c             	sub    esp,0xc
c000ac5a:	68 48 09 02 c0       	push   0xc0020948
c000ac5f:	e8 d9 5e 00 00       	call   c0010b3d <KePanic(char const*)>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	90                   	nop
c000ac68:	83 c4 0c             	add    esp,0xc
c000ac6b:	c3                   	ret    

c000ac6c <__ubsan_handle_divrem_overflow>:
c000ac6c:	83 ec 0c             	sub    esp,0xc
c000ac6f:	83 ec 08             	sub    esp,0x8
c000ac72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac76:	68 6c 09 02 c0       	push   0xc002096c
c000ac7b:	e8 f4 fd ff ff       	call   c000aa74 <KiUbsanPrintDetails(char const*, void*)>
c000ac80:	83 c4 10             	add    esp,0x10
c000ac83:	83 ec 0c             	sub    esp,0xc
c000ac86:	68 6c 09 02 c0       	push   0xc002096c
c000ac8b:	e8 ad 5e 00 00       	call   c0010b3d <KePanic(char const*)>
c000ac90:	83 c4 10             	add    esp,0x10
c000ac93:	90                   	nop
c000ac94:	83 c4 0c             	add    esp,0xc
c000ac97:	c3                   	ret    

c000ac98 <__ubsan_handle_mul_overflow>:
c000ac98:	83 ec 0c             	sub    esp,0xc
c000ac9b:	83 ec 08             	sub    esp,0x8
c000ac9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aca2:	68 d1 07 02 c0       	push   0xc00207d1
c000aca7:	e8 c8 fd ff ff       	call   c000aa74 <KiUbsanPrintDetails(char const*, void*)>
c000acac:	83 c4 10             	add    esp,0x10
c000acaf:	83 ec 0c             	sub    esp,0xc
c000acb2:	68 d1 07 02 c0       	push   0xc00207d1
c000acb7:	e8 81 5e 00 00       	call   c0010b3d <KePanic(char const*)>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	90                   	nop
c000acc0:	83 c4 0c             	add    esp,0xc
c000acc3:	c3                   	ret    

c000acc4 <__ubsan_handle_sub_overflow>:
c000acc4:	83 ec 0c             	sub    esp,0xc
c000acc7:	83 ec 08             	sub    esp,0x8
c000acca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acce:	68 ed 07 02 c0       	push   0xc00207ed
c000acd3:	e8 9c fd ff ff       	call   c000aa74 <KiUbsanPrintDetails(char const*, void*)>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	83 ec 0c             	sub    esp,0xc
c000acde:	68 ed 07 02 c0       	push   0xc00207ed
c000ace3:	e8 55 5e 00 00       	call   c0010b3d <KePanic(char const*)>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	90                   	nop
c000acec:	83 c4 0c             	add    esp,0xc
c000acef:	c3                   	ret    

c000acf0 <__ubsan_handle_shift_out_of_bounds>:
c000acf0:	83 ec 0c             	sub    esp,0xc
c000acf3:	83 ec 08             	sub    esp,0x8
c000acf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acfa:	68 8c 09 02 c0       	push   0xc002098c
c000acff:	e8 70 fd ff ff       	call   c000aa74 <KiUbsanPrintDetails(char const*, void*)>
c000ad04:	83 c4 10             	add    esp,0x10
c000ad07:	83 ec 0c             	sub    esp,0xc
c000ad0a:	68 8c 09 02 c0       	push   0xc002098c
c000ad0f:	e8 29 5e 00 00       	call   c0010b3d <KePanic(char const*)>
c000ad14:	83 c4 10             	add    esp,0x10
c000ad17:	90                   	nop
c000ad18:	83 c4 0c             	add    esp,0xc
c000ad1b:	c3                   	ret    

c000ad1c <__ubsan_handle_negate_overflow>:
c000ad1c:	83 ec 0c             	sub    esp,0xc
c000ad1f:	83 ec 08             	sub    esp,0x8
c000ad22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad26:	68 b0 09 02 c0       	push   0xc00209b0
c000ad2b:	e8 44 fd ff ff       	call   c000aa74 <KiUbsanPrintDetails(char const*, void*)>
c000ad30:	83 c4 10             	add    esp,0x10
c000ad33:	83 ec 0c             	sub    esp,0xc
c000ad36:	68 b0 09 02 c0       	push   0xc00209b0
c000ad3b:	e8 fd 5d 00 00       	call   c0010b3d <KePanic(char const*)>
c000ad40:	83 c4 10             	add    esp,0x10
c000ad43:	90                   	nop
c000ad44:	83 c4 0c             	add    esp,0xc
c000ad47:	c3                   	ret    

c000ad48 <File::read(unsigned long long, void*, int*)>:
c000ad48:	53                   	push   ebx
c000ad49:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad4d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad51:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad58:	83 f8 19             	cmp    eax,0x19
c000ad5b:	77 35                	ja     c000ad92 <File::read(unsigned long long, void*, int*)+0x4a>
c000ad5d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ad64:	85 c0                	test   eax,eax
c000ad66:	74 2a                	je     c000ad92 <File::read(unsigned long long, void*, int*)+0x4a>
c000ad68:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ad6e:	85 c0                	test   eax,eax
c000ad70:	74 20                	je     c000ad92 <File::read(unsigned long long, void*, int*)+0x4a>
c000ad72:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad76:	74 21                	je     c000ad99 <File::read(unsigned long long, void*, int*)+0x51>
c000ad78:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad7e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad8c:	5b                   	pop    ebx
c000ad8d:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad90:	ff e0                	jmp    eax
c000ad92:	b8 0b 00 00 00       	mov    eax,0xb
c000ad97:	eb 05                	jmp    c000ad9e <File::read(unsigned long long, void*, int*)+0x56>
c000ad99:	b8 05 00 00 00       	mov    eax,0x5
c000ad9e:	5b                   	pop    ebx
c000ad9f:	c3                   	ret    

c000ada0 <File::write(unsigned long long, void*, int*)>:
c000ada0:	53                   	push   ebx
c000ada1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ada5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ada9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000adb0:	83 f8 19             	cmp    eax,0x19
c000adb3:	77 35                	ja     c000adea <File::write(unsigned long long, void*, int*)+0x4a>
c000adb5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000adbc:	85 c0                	test   eax,eax
c000adbe:	74 2a                	je     c000adea <File::write(unsigned long long, void*, int*)+0x4a>
c000adc0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000adc6:	85 c0                	test   eax,eax
c000adc8:	74 20                	je     c000adea <File::write(unsigned long long, void*, int*)+0x4a>
c000adca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adce:	74 21                	je     c000adf1 <File::write(unsigned long long, void*, int*)+0x51>
c000add0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000add2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000add6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000addc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ade0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ade4:	5b                   	pop    ebx
c000ade5:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ade8:	ff e0                	jmp    eax
c000adea:	b8 0b 00 00 00       	mov    eax,0xb
c000adef:	eb 05                	jmp    c000adf6 <File::write(unsigned long long, void*, int*)+0x56>
c000adf1:	b8 05 00 00 00       	mov    eax,0x5
c000adf6:	5b                   	pop    ebx
c000adf7:	c3                   	ret    

c000adf8 <Directory::read(unsigned long long, void*, int*)>:
c000adf8:	53                   	push   ebx
c000adf9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000adfd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ae01:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ae08:	83 f8 19             	cmp    eax,0x19
c000ae0b:	77 35                	ja     c000ae42 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae0d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ae14:	85 c0                	test   eax,eax
c000ae16:	74 2a                	je     c000ae42 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae18:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ae1e:	85 c0                	test   eax,eax
c000ae20:	74 20                	je     c000ae42 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae22:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae26:	74 21                	je     c000ae49 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ae28:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ae2a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae2e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae3c:	5b                   	pop    ebx
c000ae3d:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae40:	ff e0                	jmp    eax
c000ae42:	b8 0b 00 00 00       	mov    eax,0xb
c000ae47:	eb 05                	jmp    c000ae4e <Directory::read(unsigned long long, void*, int*)+0x56>
c000ae49:	b8 05 00 00 00       	mov    eax,0x5
c000ae4e:	5b                   	pop    ebx
c000ae4f:	c3                   	ret    

c000ae50 <Directory::write(unsigned long long, void*, int*)>:
c000ae50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae54:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae5b:	b8 0b 00 00 00       	mov    eax,0xb
c000ae60:	83 fa 19             	cmp    edx,0x19
c000ae63:	77 18                	ja     c000ae7d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae65:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ae6c:	85 d2                	test   edx,edx
c000ae6e:	74 0d                	je     c000ae7d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae70:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ae77:	19 c0                	sbb    eax,eax
c000ae79:	83 e0 0a             	and    eax,0xa
c000ae7c:	40                   	inc    eax
c000ae7d:	c3                   	ret    

c000ae7e <File::isAtty()>:
c000ae7e:	31 c0                	xor    eax,eax
c000ae80:	c3                   	ret    
c000ae81:	90                   	nop

c000ae82 <Directory::isAtty()>:
c000ae82:	31 c0                	xor    eax,eax
c000ae84:	c3                   	ret    
c000ae85:	90                   	nop

c000ae86 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae86:	b8 0a 00 00 00       	mov    eax,0xa
c000ae8b:	c3                   	ret    

c000ae8c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae8c:	b8 0a 00 00 00       	mov    eax,0xa
c000ae91:	c3                   	ret    

c000ae92 <Filesystem::allocateSwapfile(char const*, int)>:
c000ae92:	31 c0                	xor    eax,eax
c000ae94:	31 d2                	xor    edx,edx
c000ae96:	c3                   	ret    
c000ae97:	90                   	nop

c000ae98 <File::~File()>:
c000ae98:	83 ec 0c             	sub    esp,0xc
c000ae9b:	ba 40 0a 02 c0       	mov    edx,0xc0020a40
c000aea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea4:	89 10                	mov    DWORD PTR [eax],edx
c000aea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeaa:	83 ec 0c             	sub    esp,0xc
c000aead:	50                   	push   eax
c000aeae:	e8 cd e4 ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000aeb3:	83 c4 10             	add    esp,0x10
c000aeb6:	90                   	nop
c000aeb7:	83 c4 0c             	add    esp,0xc
c000aeba:	c3                   	ret    
c000aebb:	90                   	nop

c000aebc <File::~File()>:
c000aebc:	83 ec 0c             	sub    esp,0xc
c000aebf:	83 ec 0c             	sub    esp,0xc
c000aec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aec6:	e8 cd ff ff ff       	call   c000ae98 <File::~File()>
c000aecb:	83 c4 10             	add    esp,0x10
c000aece:	83 ec 08             	sub    esp,0x8
c000aed1:	68 14 01 00 00       	push   0x114
c000aed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeda:	e8 5f f9 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000aedf:	83 c4 10             	add    esp,0x10
c000aee2:	83 c4 0c             	add    esp,0xc
c000aee5:	c3                   	ret    

c000aee6 <Directory::~Directory()>:
c000aee6:	83 ec 0c             	sub    esp,0xc
c000aee9:	ba 5c 0a 02 c0       	mov    edx,0xc0020a5c
c000aeee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef2:	89 10                	mov    DWORD PTR [eax],edx
c000aef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef8:	83 ec 0c             	sub    esp,0xc
c000aefb:	50                   	push   eax
c000aefc:	e8 7f e4 ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000af01:	83 c4 10             	add    esp,0x10
c000af04:	90                   	nop
c000af05:	83 c4 0c             	add    esp,0xc
c000af08:	c3                   	ret    
c000af09:	90                   	nop

c000af0a <Directory::~Directory()>:
c000af0a:	83 ec 0c             	sub    esp,0xc
c000af0d:	83 ec 0c             	sub    esp,0xc
c000af10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af14:	e8 cd ff ff ff       	call   c000aee6 <Directory::~Directory()>
c000af19:	83 c4 10             	add    esp,0x10
c000af1c:	83 ec 08             	sub    esp,0x8
c000af1f:	68 14 01 00 00       	push   0x114
c000af24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af28:	e8 11 f9 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000af2d:	83 c4 10             	add    esp,0x10
c000af30:	83 c4 0c             	add    esp,0xc
c000af33:	c3                   	ret    

c000af34 <Filesystem::Filesystem()>:
c000af34:	ba d8 09 02 c0       	mov    edx,0xc00209d8
c000af39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af3d:	89 10                	mov    DWORD PTR [eax],edx
c000af3f:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000af45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af49:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af50:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000af55:	90                   	nop
c000af56:	c3                   	ret    
c000af57:	90                   	nop

c000af58 <Filesystem::~Filesystem()>:
c000af58:	ba d8 09 02 c0       	mov    edx,0xc00209d8
c000af5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af61:	89 10                	mov    DWORD PTR [eax],edx
c000af63:	90                   	nop
c000af64:	c3                   	ret    
c000af65:	90                   	nop

c000af66 <Filesystem::~Filesystem()>:
c000af66:	83 ec 0c             	sub    esp,0xc
c000af69:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af6d:	e8 e6 ff ff ff       	call   c000af58 <Filesystem::~Filesystem()>
c000af72:	83 c4 04             	add    esp,0x4
c000af75:	83 ec 08             	sub    esp,0x8
c000af78:	6a 08                	push   0x8
c000af7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af7e:	e8 bb f8 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	83 c4 0c             	add    esp,0xc
c000af89:	c3                   	ret    

c000af8a <Fs::getcwd(Process*, char*, int)>:
c000af8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af8e:	31 c0                	xor    eax,eax
c000af90:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af94:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af97:	7d 15                	jge    c000afae <Fs::getcwd(Process*, char*, int)+0x24>
c000af99:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af9d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000afa4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000afa7:	84 c9                	test   cl,cl
c000afa9:	74 06                	je     c000afb1 <Fs::getcwd(Process*, char*, int)+0x27>
c000afab:	40                   	inc    eax
c000afac:	eb e2                	jmp    c000af90 <Fs::getcwd(Process*, char*, int)+0x6>
c000afae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000afb1:	31 c0                	xor    eax,eax
c000afb3:	c3                   	ret    

c000afb4 <Fs::initVFS()>:
c000afb4:	83 ec 18             	sub    esp,0x18
c000afb7:	6a 08                	push   0x8
c000afb9:	e8 0d cb ff ff       	call   c0007acb <malloc>
c000afbe:	89 04 24             	mov    DWORD PTR [esp],eax
c000afc1:	e8 ae de 00 00       	call   c0018e74 <FAT::FAT()>
c000afc6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000afcd:	e8 f9 ca ff ff       	call   c0007acb <malloc>
c000afd2:	89 04 24             	mov    DWORD PTR [esp],eax
c000afd5:	e8 c2 ed 00 00       	call   c0019d9c <ISO9660::ISO9660()>
c000afda:	83 c4 1c             	add    esp,0x1c
c000afdd:	c3                   	ret    

c000afde <Fs::standardiseFiles(char*, char const*, char const*)>:
c000afde:	55                   	push   ebp
c000afdf:	57                   	push   edi
c000afe0:	56                   	push   esi
c000afe1:	53                   	push   ebx
c000afe2:	81 ec 20 04 00 00    	sub    esp,0x420
c000afe8:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000afef:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000aff6:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000affd:	68 00 04 00 00       	push   0x400
c000b002:	6a 00                	push   0x0
c000b004:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b008:	56                   	push   esi
c000b009:	e8 e2 54 ff ff       	call   c00004f0 <memset>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b015:	75 0b                	jne    c000b022 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b017:	50                   	push   eax
c000b018:	50                   	push   eax
c000b019:	57                   	push   edi
c000b01a:	56                   	push   esi
c000b01b:	e8 30 56 ff ff       	call   c0000650 <strcpy>
c000b020:	eb 45                	jmp    c000b067 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000b022:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b025:	83 f8 2f             	cmp    eax,0x2f
c000b028:	74 05                	je     c000b02f <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b02a:	83 f8 5c             	cmp    eax,0x5c
c000b02d:	75 19                	jne    c000b048 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000b02f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b032:	3c 60                	cmp    al,0x60
c000b034:	7e 03                	jle    c000b039 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b036:	83 e8 20             	sub    eax,0x20
c000b039:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b03d:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b044:	50                   	push   eax
c000b045:	50                   	push   eax
c000b046:	eb 18                	jmp    c000b060 <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000b048:	50                   	push   eax
c000b049:	50                   	push   eax
c000b04a:	55                   	push   ebp
c000b04b:	56                   	push   esi
c000b04c:	e8 ff 55 ff ff       	call   c0000650 <strcpy>
c000b051:	5a                   	pop    edx
c000b052:	59                   	pop    ecx
c000b053:	68 91 19 02 c0       	push   0xc0021991
c000b058:	56                   	push   esi
c000b059:	e8 12 58 ff ff       	call   c0000870 <strcat>
c000b05e:	5d                   	pop    ebp
c000b05f:	58                   	pop    eax
c000b060:	57                   	push   edi
c000b061:	56                   	push   esi
c000b062:	e8 09 58 ff ff       	call   c0000870 <strcat>
c000b067:	83 c4 10             	add    esp,0x10
c000b06a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b06e:	3c 60                	cmp    al,0x60
c000b070:	7e 03                	jle    c000b075 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000b072:	83 e8 20             	sub    eax,0x20
c000b075:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b079:	88 03                	mov    BYTE PTR [ebx],al
c000b07b:	b8 03 00 00 00       	mov    eax,0x3
c000b080:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b087:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b08d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b091:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000b099:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b09d:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000b0a2:	89 fa                	mov    edx,edi
c000b0a4:	0f be ea             	movsx  ebp,dl
c000b0a7:	85 ed                	test   ebp,ebp
c000b0a9:	0f 84 af 00 00 00    	je     c000b15e <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000b0af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0b3:	42                   	inc    edx
c000b0b4:	83 fd 2f             	cmp    ebp,0x2f
c000b0b7:	74 05                	je     c000b0be <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000b0b9:	83 fd 5c             	cmp    ebp,0x5c
c000b0bc:	75 14                	jne    c000b0d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b0be:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b0c3:	89 c5                	mov    ebp,eax
c000b0c5:	74 0b                	je     c000b0d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b0c7:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b0cb:	40                   	inc    eax
c000b0cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b0d0:	eb c7                	jmp    c000b099 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000b0d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b0d6:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000b0db:	89 f9                	mov    ecx,edi
c000b0dd:	0f be e9             	movsx  ebp,cl
c000b0e0:	75 63                	jne    c000b145 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b0e2:	83 fd 2e             	cmp    ebp,0x2e
c000b0e5:	75 5e                	jne    c000b145 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b0e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b0eb:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b0f0:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000b0f5:	74 18                	je     c000b10f <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000b0f7:	83 fd 2e             	cmp    ebp,0x2e
c000b0fa:	74 57                	je     c000b153 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b0fc:	89 ca                	mov    edx,ecx
c000b0fe:	42                   	inc    edx
c000b0ff:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b103:	83 f9 2f             	cmp    ecx,0x2f
c000b106:	74 f6                	je     c000b0fe <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b108:	83 f9 5c             	cmp    ecx,0x5c
c000b10b:	74 f1                	je     c000b0fe <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b10d:	eb bd                	jmp    c000b0cc <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b10f:	83 fd 2e             	cmp    ebp,0x2e
c000b112:	74 3f                	je     c000b153 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b114:	83 f8 03             	cmp    eax,0x3
c000b117:	74 b3                	je     c000b0cc <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b119:	42                   	inc    edx
c000b11a:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b11e:	83 f9 2f             	cmp    ecx,0x2f
c000b121:	74 f6                	je     c000b119 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b123:	83 f9 5c             	cmp    ecx,0x5c
c000b126:	74 f1                	je     c000b119 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b128:	48                   	dec    eax
c000b129:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b12d:	75 06                	jne    c000b135 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b12f:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b133:	eb f3                	jmp    c000b128 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b135:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b139:	74 07                	je     c000b142 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000b13b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b13f:	48                   	dec    eax
c000b140:	eb f3                	jmp    c000b135 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b142:	40                   	inc    eax
c000b143:	eb 87                	jmp    c000b0cc <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b145:	83 fd 2f             	cmp    ebp,0x2f
c000b148:	74 82                	je     c000b0cc <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b14a:	83 fd 5c             	cmp    ebp,0x5c
c000b14d:	0f 84 79 ff ff ff    	je     c000b0cc <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b153:	89 f9                	mov    ecx,edi
c000b155:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b158:	40                   	inc    eax
c000b159:	e9 6e ff ff ff       	jmp    c000b0cc <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b15e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b162:	83 ec 0c             	sub    esp,0xc
c000b165:	53                   	push   ebx
c000b166:	e8 15 54 ff ff       	call   c0000580 <strlen>
c000b16b:	83 c4 10             	add    esp,0x10
c000b16e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b173:	75 26                	jne    c000b19b <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000b175:	83 ec 0c             	sub    esp,0xc
c000b178:	53                   	push   ebx
c000b179:	e8 02 54 ff ff       	call   c0000580 <strlen>
c000b17e:	83 c4 10             	add    esp,0x10
c000b181:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b186:	74 26                	je     c000b1ae <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000b188:	83 ec 0c             	sub    esp,0xc
c000b18b:	53                   	push   ebx
c000b18c:	e8 ef 53 ff ff       	call   c0000580 <strlen>
c000b191:	83 c4 10             	add    esp,0x10
c000b194:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b199:	eb c7                	jmp    c000b162 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000b19b:	83 ec 0c             	sub    esp,0xc
c000b19e:	53                   	push   ebx
c000b19f:	e8 dc 53 ff ff       	call   c0000580 <strlen>
c000b1a4:	83 c4 10             	add    esp,0x10
c000b1a7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b1ac:	74 c7                	je     c000b175 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b1ae:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b1b4:	5b                   	pop    ebx
c000b1b5:	5e                   	pop    esi
c000b1b6:	5f                   	pop    edi
c000b1b7:	5d                   	pop    ebp
c000b1b8:	c3                   	ret    
c000b1b9:	90                   	nop

c000b1ba <File::File(char const*, Process*)>:
c000b1ba:	83 ec 0c             	sub    esp,0xc
c000b1bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c1:	83 ec 08             	sub    esp,0x8
c000b1c4:	6a 00                	push   0x0
c000b1c6:	50                   	push   eax
c000b1c7:	e8 ce df ff ff       	call   c000919a <UnixFile::UnixFile(int)>
c000b1cc:	83 c4 10             	add    esp,0x10
c000b1cf:	ba 40 0a 02 c0       	mov    edx,0xc0020a40
c000b1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d8:	89 10                	mov    DWORD PTR [eax],edx
c000b1da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b1de:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e8:	83 c0 0d             	add    eax,0xd
c000b1eb:	83 ec 04             	sub    esp,0x4
c000b1ee:	52                   	push   edx
c000b1ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1f3:	50                   	push   eax
c000b1f4:	e8 e5 fd ff ff       	call   c000afde <Fs::standardiseFiles(char*, char const*, char const*)>
c000b1f9:	83 c4 10             	add    esp,0x10
c000b1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b200:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b203:	83 e8 41             	sub    eax,0x41
c000b206:	88 c2                	mov    dl,al
c000b208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b20c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b216:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b21e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b224:	0f b6 c0             	movzx  eax,al
c000b227:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b22e:	85 c0                	test   eax,eax
c000b230:	74 3e                	je     c000b270 <File::File(char const*, Process*)+0xb6>
c000b232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b236:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b23c:	0f b6 c0             	movzx  eax,al
c000b23f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b246:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b24c:	85 c0                	test   eax,eax
c000b24e:	75 20                	jne    c000b270 <File::File(char const*, Process*)+0xb6>
c000b250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b254:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b25a:	0f b6 c0             	movzx  eax,al
c000b25d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b264:	83 ec 0c             	sub    esp,0xc
c000b267:	50                   	push   eax
c000b268:	e8 2f 21 00 00       	call   c000d39c <LogicalDisk::mount()>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	90                   	nop
c000b271:	83 c4 0c             	add    esp,0xc
c000b274:	c3                   	ret    
c000b275:	90                   	nop

c000b276 <File::open(FileOpenMode)>:
c000b276:	53                   	push   ebx
c000b277:	b8 0b 00 00 00       	mov    eax,0xb
c000b27c:	83 ec 08             	sub    esp,0x8
c000b27f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b283:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b28a:	83 fa 19             	cmp    edx,0x19
c000b28d:	77 40                	ja     c000b2cf <File::open(FileOpenMode)+0x59>
c000b28f:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b296:	85 d2                	test   edx,edx
c000b298:	74 35                	je     c000b2cf <File::open(FileOpenMode)+0x59>
c000b29a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b2a0:	85 d2                	test   edx,edx
c000b2a2:	74 2b                	je     c000b2cf <File::open(FileOpenMode)+0x59>
c000b2a4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b2a8:	b8 06 00 00 00       	mov    eax,0x6
c000b2ad:	75 20                	jne    c000b2cf <File::open(FileOpenMode)+0x59>
c000b2af:	8b 02                	mov    eax,DWORD PTR [edx]
c000b2b1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bb:	51                   	push   ecx
c000b2bc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b2bf:	51                   	push   ecx
c000b2c0:	52                   	push   edx
c000b2c1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b2c4:	83 c4 10             	add    esp,0x10
c000b2c7:	85 c0                	test   eax,eax
c000b2c9:	75 04                	jne    c000b2cf <File::open(FileOpenMode)+0x59>
c000b2cb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b2cf:	83 c4 08             	add    esp,0x8
c000b2d2:	5b                   	pop    ebx
c000b2d3:	c3                   	ret    

c000b2d4 <File::close()>:
c000b2d4:	53                   	push   ebx
c000b2d5:	b8 0b 00 00 00       	mov    eax,0xb
c000b2da:	83 ec 08             	sub    esp,0x8
c000b2dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2e1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2e8:	83 f9 19             	cmp    ecx,0x19
c000b2eb:	77 41                	ja     c000b32e <File::close()+0x5a>
c000b2ed:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2f4:	85 db                	test   ebx,ebx
c000b2f6:	74 36                	je     c000b32e <File::close()+0x5a>
c000b2f8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b2ff:	74 2d                	je     c000b32e <File::close()+0x5a>
c000b301:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b305:	b8 05 00 00 00       	mov    eax,0x5
c000b30a:	74 22                	je     c000b32e <File::close()+0x5a>
c000b30c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b310:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b317:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b31d:	53                   	push   ebx
c000b31e:	53                   	push   ebx
c000b31f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b321:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b327:	50                   	push   eax
c000b328:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b32b:	83 c4 10             	add    esp,0x10
c000b32e:	83 c4 08             	add    esp,0x8
c000b331:	5b                   	pop    ebx
c000b332:	c3                   	ret    
c000b333:	90                   	nop

c000b334 <File::seek(unsigned long long)>:
c000b334:	56                   	push   esi
c000b335:	b8 0b 00 00 00       	mov    eax,0xb
c000b33a:	53                   	push   ebx
c000b33b:	51                   	push   ecx
c000b33c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b340:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b344:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b348:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b34f:	83 fa 19             	cmp    edx,0x19
c000b352:	77 31                	ja     c000b385 <File::seek(unsigned long long)+0x51>
c000b354:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b35b:	85 d2                	test   edx,edx
c000b35d:	74 26                	je     c000b385 <File::seek(unsigned long long)+0x51>
c000b35f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b365:	85 d2                	test   edx,edx
c000b367:	74 1c                	je     c000b385 <File::seek(unsigned long long)+0x51>
c000b369:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b36d:	b8 05 00 00 00       	mov    eax,0x5
c000b372:	74 11                	je     c000b385 <File::seek(unsigned long long)+0x51>
c000b374:	8b 02                	mov    eax,DWORD PTR [edx]
c000b376:	53                   	push   ebx
c000b377:	51                   	push   ecx
c000b378:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b37e:	52                   	push   edx
c000b37f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b382:	83 c4 10             	add    esp,0x10
c000b385:	5a                   	pop    edx
c000b386:	5b                   	pop    ebx
c000b387:	5e                   	pop    esi
c000b388:	c3                   	ret    
c000b389:	90                   	nop

c000b38a <File::tell(unsigned long long*)>:
c000b38a:	83 ec 0c             	sub    esp,0xc
c000b38d:	b8 0b 00 00 00       	mov    eax,0xb
c000b392:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b396:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b39d:	83 fa 19             	cmp    edx,0x19
c000b3a0:	77 34                	ja     c000b3d6 <File::tell(unsigned long long*)+0x4c>
c000b3a2:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b3a9:	85 d2                	test   edx,edx
c000b3ab:	74 29                	je     c000b3d6 <File::tell(unsigned long long*)+0x4c>
c000b3ad:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b3b3:	85 d2                	test   edx,edx
c000b3b5:	74 1f                	je     c000b3d6 <File::tell(unsigned long long*)+0x4c>
c000b3b7:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b3bb:	b8 05 00 00 00       	mov    eax,0x5
c000b3c0:	74 14                	je     c000b3d6 <File::tell(unsigned long long*)+0x4c>
c000b3c2:	50                   	push   eax
c000b3c3:	8b 02                	mov    eax,DWORD PTR [edx]
c000b3c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3c9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b3cf:	52                   	push   edx
c000b3d0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b3d3:	83 c4 10             	add    esp,0x10
c000b3d6:	83 c4 0c             	add    esp,0xc
c000b3d9:	c3                   	ret    

c000b3da <File::rewind()>:
c000b3da:	83 ec 10             	sub    esp,0x10
c000b3dd:	6a 00                	push   0x0
c000b3df:	6a 00                	push   0x0
c000b3e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e5:	e8 4a ff ff ff       	call   c000b334 <File::seek(unsigned long long)>
c000b3ea:	83 c4 1c             	add    esp,0x1c
c000b3ed:	c3                   	ret    

c000b3ee <File::unlink()>:
c000b3ee:	83 ec 0c             	sub    esp,0xc
c000b3f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b3f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b401:	83 f9 19             	cmp    ecx,0x19
c000b404:	77 2f                	ja     c000b435 <File::unlink()+0x47>
c000b406:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b40d:	85 c9                	test   ecx,ecx
c000b40f:	74 24                	je     c000b435 <File::unlink()+0x47>
c000b411:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b417:	85 c9                	test   ecx,ecx
c000b419:	74 1a                	je     c000b435 <File::unlink()+0x47>
c000b41b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b41f:	b8 06 00 00 00       	mov    eax,0x6
c000b424:	75 0f                	jne    c000b435 <File::unlink()+0x47>
c000b426:	50                   	push   eax
c000b427:	83 c2 0d             	add    edx,0xd
c000b42a:	50                   	push   eax
c000b42b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b42d:	52                   	push   edx
c000b42e:	51                   	push   ecx
c000b42f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	83 c4 0c             	add    esp,0xc
c000b438:	c3                   	ret    
c000b439:	90                   	nop

c000b43a <File::rename(char const*)>:
c000b43a:	83 ec 0c             	sub    esp,0xc
c000b43d:	b8 0b 00 00 00       	mov    eax,0xb
c000b442:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b446:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b44d:	83 f9 19             	cmp    ecx,0x19
c000b450:	77 32                	ja     c000b484 <File::rename(char const*)+0x4a>
c000b452:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b459:	85 c9                	test   ecx,ecx
c000b45b:	74 27                	je     c000b484 <File::rename(char const*)+0x4a>
c000b45d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b463:	85 c9                	test   ecx,ecx
c000b465:	74 1d                	je     c000b484 <File::rename(char const*)+0x4a>
c000b467:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b46b:	b8 06 00 00 00       	mov    eax,0x6
c000b470:	75 12                	jne    c000b484 <File::rename(char const*)+0x4a>
c000b472:	50                   	push   eax
c000b473:	83 c2 0d             	add    edx,0xd
c000b476:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b47c:	52                   	push   edx
c000b47d:	51                   	push   ecx
c000b47e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b481:	83 c4 10             	add    esp,0x10
c000b484:	83 c4 0c             	add    esp,0xc
c000b487:	c3                   	ret    

c000b488 <File::chfatattr(unsigned char, unsigned char)>:
c000b488:	57                   	push   edi
c000b489:	b8 0b 00 00 00       	mov    eax,0xb
c000b48e:	56                   	push   esi
c000b48f:	53                   	push   ebx
c000b490:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b494:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b498:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b49c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4a3:	83 f9 19             	cmp    ecx,0x19
c000b4a6:	77 37                	ja     c000b4df <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4a8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b4af:	85 c9                	test   ecx,ecx
c000b4b1:	74 2c                	je     c000b4df <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4b3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b4b9:	85 c9                	test   ecx,ecx
c000b4bb:	74 22                	je     c000b4df <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b4c1:	b8 06 00 00 00       	mov    eax,0x6
c000b4c6:	75 17                	jne    c000b4df <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4c8:	89 f0                	mov    eax,esi
c000b4ca:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b4cc:	0f b6 db             	movzx  ebx,bl
c000b4cf:	0f b6 f0             	movzx  esi,al
c000b4d2:	83 c2 0d             	add    edx,0xd
c000b4d5:	56                   	push   esi
c000b4d6:	53                   	push   ebx
c000b4d7:	52                   	push   edx
c000b4d8:	51                   	push   ecx
c000b4d9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	5b                   	pop    ebx
c000b4e0:	5e                   	pop    esi
c000b4e1:	5f                   	pop    edi
c000b4e2:	c3                   	ret    
c000b4e3:	90                   	nop

c000b4e4 <File::exists()>:
c000b4e4:	83 ec 0c             	sub    esp,0xc
c000b4e7:	31 c0                	xor    eax,eax
c000b4e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4ed:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4f4:	83 f9 19             	cmp    ecx,0x19
c000b4f7:	77 24                	ja     c000b51d <File::exists()+0x39>
c000b4f9:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b500:	85 c9                	test   ecx,ecx
c000b502:	74 19                	je     c000b51d <File::exists()+0x39>
c000b504:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b50a:	85 c9                	test   ecx,ecx
c000b50c:	74 0f                	je     c000b51d <File::exists()+0x39>
c000b50e:	50                   	push   eax
c000b50f:	83 c2 0d             	add    edx,0xd
c000b512:	50                   	push   eax
c000b513:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b515:	52                   	push   edx
c000b516:	51                   	push   ecx
c000b517:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b51a:	83 c4 10             	add    esp,0x10
c000b51d:	83 c4 0c             	add    esp,0xc
c000b520:	c3                   	ret    
c000b521:	90                   	nop

c000b522 <File::stat(unsigned long long*, bool*)>:
c000b522:	56                   	push   esi
c000b523:	53                   	push   ebx
c000b524:	50                   	push   eax
c000b525:	b8 0b 00 00 00       	mov    eax,0xb
c000b52a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b52e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b532:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b536:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b53d:	83 f9 19             	cmp    ecx,0x19
c000b540:	77 3d                	ja     c000b57f <File::stat(unsigned long long*, bool*)+0x5d>
c000b542:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b549:	85 c9                	test   ecx,ecx
c000b54b:	74 32                	je     c000b57f <File::stat(unsigned long long*, bool*)+0x5d>
c000b54d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b553:	85 c9                	test   ecx,ecx
c000b555:	74 28                	je     c000b57f <File::stat(unsigned long long*, bool*)+0x5d>
c000b557:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b55b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b55d:	74 13                	je     c000b572 <File::stat(unsigned long long*, bool*)+0x50>
c000b55f:	83 ec 04             	sub    esp,0x4
c000b562:	56                   	push   esi
c000b563:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b569:	51                   	push   ecx
c000b56a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b56d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b570:	eb 0a                	jmp    c000b57c <File::stat(unsigned long long*, bool*)+0x5a>
c000b572:	53                   	push   ebx
c000b573:	83 c2 0d             	add    edx,0xd
c000b576:	56                   	push   esi
c000b577:	52                   	push   edx
c000b578:	51                   	push   ecx
c000b579:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b57c:	83 c4 10             	add    esp,0x10
c000b57f:	5a                   	pop    edx
c000b580:	5b                   	pop    ebx
c000b581:	5e                   	pop    esi
c000b582:	c3                   	ret    

c000b583 <Fs::setcwd(Process*, char*)>:
c000b583:	55                   	push   ebp
c000b584:	57                   	push   edi
c000b585:	56                   	push   esi
c000b586:	53                   	push   ebx
c000b587:	81 ec 20 02 00 00    	sub    esp,0x220
c000b58d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b594:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b59a:	57                   	push   edi
c000b59b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b5a2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b5a6:	56                   	push   esi
c000b5a7:	e8 32 fa ff ff       	call   c000afde <Fs::standardiseFiles(char*, char const*, char const*)>
c000b5ac:	89 34 24             	mov    DWORD PTR [esp],esi
c000b5af:	e8 cc 4f ff ff       	call   c0000580 <strlen>
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	83 f8 02             	cmp    eax,0x2
c000b5ba:	77 15                	ja     c000b5d1 <Fs::setcwd(Process*, char*)+0x4e>
c000b5bc:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b5c1:	83 eb 41             	sub    ebx,0x41
c000b5c4:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b5cb:	85 c0                	test   eax,eax
c000b5cd:	75 1c                	jne    c000b5eb <Fs::setcwd(Process*, char*)+0x68>
c000b5cf:	eb 2f                	jmp    c000b600 <Fs::setcwd(Process*, char*)+0x7d>
c000b5d1:	83 ec 0c             	sub    esp,0xc
c000b5d4:	56                   	push   esi
c000b5d5:	e8 a6 4f ff ff       	call   c0000580 <strlen>
c000b5da:	83 c4 10             	add    esp,0x10
c000b5dd:	83 f8 03             	cmp    eax,0x3
c000b5e0:	75 57                	jne    c000b639 <Fs::setcwd(Process*, char*)+0xb6>
c000b5e2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b5e7:	75 50                	jne    c000b639 <Fs::setcwd(Process*, char*)+0xb6>
c000b5e9:	eb d1                	jmp    c000b5bc <Fs::setcwd(Process*, char*)+0x39>
c000b5eb:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b5f2:	75 0c                	jne    c000b600 <Fs::setcwd(Process*, char*)+0x7d>
c000b5f4:	83 ec 0c             	sub    esp,0xc
c000b5f7:	50                   	push   eax
c000b5f8:	e8 9f 1d 00 00       	call   c000d39c <LogicalDisk::mount()>
c000b5fd:	83 c4 10             	add    esp,0x10
c000b600:	83 fb 19             	cmp    ebx,0x19
c000b603:	b8 03 00 00 00       	mov    eax,0x3
c000b608:	0f 87 c6 00 00 00    	ja     c000b6d4 <Fs::setcwd(Process*, char*)+0x151>
c000b60e:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b615:	b8 05 00 00 00       	mov    eax,0x5
c000b61a:	85 d2                	test   edx,edx
c000b61c:	0f 84 b2 00 00 00    	je     c000b6d4 <Fs::setcwd(Process*, char*)+0x151>
c000b622:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b629:	b8 06 00 00 00       	mov    eax,0x6
c000b62e:	0f 85 92 00 00 00    	jne    c000b6c6 <Fs::setcwd(Process*, char*)+0x143>
c000b634:	e9 9b 00 00 00       	jmp    c000b6d4 <Fs::setcwd(Process*, char*)+0x151>
c000b639:	83 ec 0c             	sub    esp,0xc
c000b63c:	68 14 01 00 00       	push   0x114
c000b641:	e8 85 c4 ff ff       	call   c0007acb <malloc>
c000b646:	83 c4 0c             	add    esp,0xc
c000b649:	55                   	push   ebp
c000b64a:	56                   	push   esi
c000b64b:	50                   	push   eax
c000b64c:	89 c3                	mov    ebx,eax
c000b64e:	e8 67 fb ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c000b653:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b658:	83 c4 0c             	add    esp,0xc
c000b65b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b65f:	50                   	push   eax
c000b660:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b664:	50                   	push   eax
c000b665:	53                   	push   ebx
c000b666:	e8 b7 fe ff ff       	call   c000b522 <File::stat(unsigned long long*, bool*)>
c000b66b:	83 c4 10             	add    esp,0x10
c000b66e:	83 f8 02             	cmp    eax,0x2
c000b671:	74 27                	je     c000b69a <Fs::setcwd(Process*, char*)+0x117>
c000b673:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b678:	75 1c                	jne    c000b696 <Fs::setcwd(Process*, char*)+0x113>
c000b67a:	85 db                	test   ebx,ebx
c000b67c:	b8 02 00 00 00       	mov    eax,0x2
c000b681:	74 51                	je     c000b6d4 <Fs::setcwd(Process*, char*)+0x151>
c000b683:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b685:	83 ec 0c             	sub    esp,0xc
c000b688:	53                   	push   ebx
c000b689:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b68c:	83 c4 10             	add    esp,0x10
c000b68f:	b8 02 00 00 00       	mov    eax,0x2
c000b694:	eb 3e                	jmp    c000b6d4 <Fs::setcwd(Process*, char*)+0x151>
c000b696:	85 c0                	test   eax,eax
c000b698:	74 1c                	je     c000b6b6 <Fs::setcwd(Process*, char*)+0x133>
c000b69a:	85 db                	test   ebx,ebx
c000b69c:	b8 01 00 00 00       	mov    eax,0x1
c000b6a1:	74 31                	je     c000b6d4 <Fs::setcwd(Process*, char*)+0x151>
c000b6a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b6a5:	83 ec 0c             	sub    esp,0xc
c000b6a8:	53                   	push   ebx
c000b6a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b6ac:	83 c4 10             	add    esp,0x10
c000b6af:	b8 01 00 00 00       	mov    eax,0x1
c000b6b4:	eb 1e                	jmp    c000b6d4 <Fs::setcwd(Process*, char*)+0x151>
c000b6b6:	85 db                	test   ebx,ebx
c000b6b8:	74 0c                	je     c000b6c6 <Fs::setcwd(Process*, char*)+0x143>
c000b6ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b6bc:	83 ec 0c             	sub    esp,0xc
c000b6bf:	53                   	push   ebx
c000b6c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b6c3:	83 c4 10             	add    esp,0x10
c000b6c6:	50                   	push   eax
c000b6c7:	50                   	push   eax
c000b6c8:	56                   	push   esi
c000b6c9:	57                   	push   edi
c000b6ca:	e8 81 4f ff ff       	call   c0000650 <strcpy>
c000b6cf:	83 c4 10             	add    esp,0x10
c000b6d2:	31 c0                	xor    eax,eax
c000b6d4:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b6da:	5b                   	pop    ebx
c000b6db:	5e                   	pop    esi
c000b6dc:	5f                   	pop    edi
c000b6dd:	5d                   	pop    ebp
c000b6de:	c3                   	ret    
c000b6df:	90                   	nop

c000b6e0 <Directory::Directory(char const*, Process*)>:
c000b6e0:	83 ec 0c             	sub    esp,0xc
c000b6e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e7:	83 ec 08             	sub    esp,0x8
c000b6ea:	6a 00                	push   0x0
c000b6ec:	50                   	push   eax
c000b6ed:	e8 a8 da ff ff       	call   c000919a <UnixFile::UnixFile(int)>
c000b6f2:	83 c4 10             	add    esp,0x10
c000b6f5:	ba 5c 0a 02 c0       	mov    edx,0xc0020a5c
c000b6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6fe:	89 10                	mov    DWORD PTR [eax],edx
c000b700:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b704:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b70e:	83 c0 0d             	add    eax,0xd
c000b711:	83 ec 04             	sub    esp,0x4
c000b714:	52                   	push   edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	50                   	push   eax
c000b71a:	e8 bf f8 ff ff       	call   c000afde <Fs::standardiseFiles(char*, char const*, char const*)>
c000b71f:	83 c4 10             	add    esp,0x10
c000b722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b726:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b729:	83 e8 41             	sub    eax,0x41
c000b72c:	88 c2                	mov    dl,al
c000b72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b732:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b744:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b74a:	0f b6 c0             	movzx  eax,al
c000b74d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b754:	85 c0                	test   eax,eax
c000b756:	74 3e                	je     c000b796 <Directory::Directory(char const*, Process*)+0xb6>
c000b758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b762:	0f b6 c0             	movzx  eax,al
c000b765:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b76c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b772:	85 c0                	test   eax,eax
c000b774:	75 20                	jne    c000b796 <Directory::Directory(char const*, Process*)+0xb6>
c000b776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b77a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b780:	0f b6 c0             	movzx  eax,al
c000b783:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b78a:	83 ec 0c             	sub    esp,0xc
c000b78d:	50                   	push   eax
c000b78e:	e8 09 1c 00 00       	call   c000d39c <LogicalDisk::mount()>
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	90                   	nop
c000b797:	83 c4 0c             	add    esp,0xc
c000b79a:	c3                   	ret    
c000b79b:	90                   	nop

c000b79c <Directory::open()>:
c000b79c:	53                   	push   ebx
c000b79d:	b8 0b 00 00 00       	mov    eax,0xb
c000b7a2:	83 ec 08             	sub    esp,0x8
c000b7a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7a9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7b0:	83 fa 19             	cmp    edx,0x19
c000b7b3:	77 3d                	ja     c000b7f2 <Directory::open()+0x56>
c000b7b5:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b7bc:	85 d2                	test   edx,edx
c000b7be:	74 32                	je     c000b7f2 <Directory::open()+0x56>
c000b7c0:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7c6:	85 d2                	test   edx,edx
c000b7c8:	74 28                	je     c000b7f2 <Directory::open()+0x56>
c000b7ca:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7ce:	b8 06 00 00 00       	mov    eax,0x6
c000b7d3:	75 1d                	jne    c000b7f2 <Directory::open()+0x56>
c000b7d5:	50                   	push   eax
c000b7d6:	8b 02                	mov    eax,DWORD PTR [edx]
c000b7d8:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b7de:	51                   	push   ecx
c000b7df:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7e2:	51                   	push   ecx
c000b7e3:	52                   	push   edx
c000b7e4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	85 c0                	test   eax,eax
c000b7ec:	75 04                	jne    c000b7f2 <Directory::open()+0x56>
c000b7ee:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7f2:	83 c4 08             	add    esp,0x8
c000b7f5:	5b                   	pop    ebx
c000b7f6:	c3                   	ret    
c000b7f7:	90                   	nop

c000b7f8 <Directory::close()>:
c000b7f8:	53                   	push   ebx
c000b7f9:	b8 0b 00 00 00       	mov    eax,0xb
c000b7fe:	83 ec 08             	sub    esp,0x8
c000b801:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b805:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b80c:	83 f9 19             	cmp    ecx,0x19
c000b80f:	77 41                	ja     c000b852 <Directory::close()+0x5a>
c000b811:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b818:	85 db                	test   ebx,ebx
c000b81a:	74 36                	je     c000b852 <Directory::close()+0x5a>
c000b81c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b823:	74 2d                	je     c000b852 <Directory::close()+0x5a>
c000b825:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b829:	b8 05 00 00 00       	mov    eax,0x5
c000b82e:	74 22                	je     c000b852 <Directory::close()+0x5a>
c000b830:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b834:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b83b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b841:	53                   	push   ebx
c000b842:	53                   	push   ebx
c000b843:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b845:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b84b:	50                   	push   eax
c000b84c:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b84f:	83 c4 10             	add    esp,0x10
c000b852:	83 c4 08             	add    esp,0x8
c000b855:	5b                   	pop    ebx
c000b856:	c3                   	ret    
c000b857:	90                   	nop

c000b858 <Directory::unlink()>:
c000b858:	83 ec 0c             	sub    esp,0xc
c000b85b:	b8 0b 00 00 00       	mov    eax,0xb
c000b860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b864:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b86b:	83 f9 19             	cmp    ecx,0x19
c000b86e:	77 2f                	ja     c000b89f <Directory::unlink()+0x47>
c000b870:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b877:	85 c9                	test   ecx,ecx
c000b879:	74 24                	je     c000b89f <Directory::unlink()+0x47>
c000b87b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b881:	85 c9                	test   ecx,ecx
c000b883:	74 1a                	je     c000b89f <Directory::unlink()+0x47>
c000b885:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b889:	b8 06 00 00 00       	mov    eax,0x6
c000b88e:	75 0f                	jne    c000b89f <Directory::unlink()+0x47>
c000b890:	50                   	push   eax
c000b891:	83 c2 0d             	add    edx,0xd
c000b894:	50                   	push   eax
c000b895:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b897:	52                   	push   edx
c000b898:	51                   	push   ecx
c000b899:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b89c:	83 c4 10             	add    esp,0x10
c000b89f:	83 c4 0c             	add    esp,0xc
c000b8a2:	c3                   	ret    
c000b8a3:	90                   	nop

c000b8a4 <Directory::rename(char const*)>:
c000b8a4:	83 ec 0c             	sub    esp,0xc
c000b8a7:	b8 0b 00 00 00       	mov    eax,0xb
c000b8ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8b7:	83 f9 19             	cmp    ecx,0x19
c000b8ba:	77 32                	ja     c000b8ee <Directory::rename(char const*)+0x4a>
c000b8bc:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b8c3:	85 c9                	test   ecx,ecx
c000b8c5:	74 27                	je     c000b8ee <Directory::rename(char const*)+0x4a>
c000b8c7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b8cd:	85 c9                	test   ecx,ecx
c000b8cf:	74 1d                	je     c000b8ee <Directory::rename(char const*)+0x4a>
c000b8d1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b8d5:	b8 06 00 00 00       	mov    eax,0x6
c000b8da:	75 12                	jne    c000b8ee <Directory::rename(char const*)+0x4a>
c000b8dc:	50                   	push   eax
c000b8dd:	83 c2 0d             	add    edx,0xd
c000b8e0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8e6:	52                   	push   edx
c000b8e7:	51                   	push   ecx
c000b8e8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b8eb:	83 c4 10             	add    esp,0x10
c000b8ee:	83 c4 0c             	add    esp,0xc
c000b8f1:	c3                   	ret    

c000b8f2 <Directory::exists()>:
c000b8f2:	83 ec 0c             	sub    esp,0xc
c000b8f5:	31 c0                	xor    eax,eax
c000b8f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8fb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b902:	83 f9 19             	cmp    ecx,0x19
c000b905:	77 24                	ja     c000b92b <Directory::exists()+0x39>
c000b907:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b90e:	85 c9                	test   ecx,ecx
c000b910:	74 19                	je     c000b92b <Directory::exists()+0x39>
c000b912:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b918:	85 c9                	test   ecx,ecx
c000b91a:	74 0f                	je     c000b92b <Directory::exists()+0x39>
c000b91c:	50                   	push   eax
c000b91d:	83 c2 0d             	add    edx,0xd
c000b920:	50                   	push   eax
c000b921:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b923:	52                   	push   edx
c000b924:	51                   	push   ecx
c000b925:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b928:	83 c4 10             	add    esp,0x10
c000b92b:	83 c4 0c             	add    esp,0xc
c000b92e:	c3                   	ret    
c000b92f:	90                   	nop

c000b930 <Directory::read(dirent*)>:
c000b930:	83 ec 1c             	sub    esp,0x1c
c000b933:	b8 0b 00 00 00       	mov    eax,0xb
c000b938:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b93c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b943:	83 f9 19             	cmp    ecx,0x19
c000b946:	77 30                	ja     c000b978 <Directory::read(dirent*)+0x48>
c000b948:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b94f:	85 c9                	test   ecx,ecx
c000b951:	74 25                	je     c000b978 <Directory::read(dirent*)+0x48>
c000b953:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b95a:	74 1c                	je     c000b978 <Directory::read(dirent*)+0x48>
c000b95c:	83 ec 0c             	sub    esp,0xc
c000b95f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b961:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b965:	51                   	push   ecx
c000b966:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b96a:	6a 00                	push   0x0
c000b96c:	68 10 01 00 00       	push   0x110
c000b971:	52                   	push   edx
c000b972:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b975:	83 c4 20             	add    esp,0x20
c000b978:	83 c4 1c             	add    esp,0x1c
c000b97b:	c3                   	ret    

c000b97c <Directory::create()>:
c000b97c:	83 ec 0c             	sub    esp,0xc
c000b97f:	b8 0b 00 00 00       	mov    eax,0xb
c000b984:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b988:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b98f:	83 f9 19             	cmp    ecx,0x19
c000b992:	77 2f                	ja     c000b9c3 <Directory::create()+0x47>
c000b994:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b99b:	85 c9                	test   ecx,ecx
c000b99d:	74 24                	je     c000b9c3 <Directory::create()+0x47>
c000b99f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9a5:	85 c9                	test   ecx,ecx
c000b9a7:	74 1a                	je     c000b9c3 <Directory::create()+0x47>
c000b9a9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9ad:	b8 06 00 00 00       	mov    eax,0x6
c000b9b2:	75 0f                	jne    c000b9c3 <Directory::create()+0x47>
c000b9b4:	50                   	push   eax
c000b9b5:	83 c2 0d             	add    edx,0xd
c000b9b8:	50                   	push   eax
c000b9b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9bb:	52                   	push   edx
c000b9bc:	51                   	push   ecx
c000b9bd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	83 c4 0c             	add    esp,0xc
c000b9c6:	c3                   	ret    
c000b9c7:	90                   	nop

c000b9c8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b9c8:	b8 0a 00 00 00       	mov    eax,0xa
c000b9cd:	c3                   	ret    
c000b9ce:	66 90                	xchg   ax,ax

c000b9d0 <Bus::Bus(char const*)>:
c000b9d0:	83 ec 0c             	sub    esp,0xc
c000b9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9d7:	83 ec 08             	sub    esp,0x8
c000b9da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9de:	50                   	push   eax
c000b9df:	e8 28 08 00 00       	call   c000c20c <Device::Device(char const*)>
c000b9e4:	83 c4 10             	add    esp,0x10
c000b9e7:	ba 78 0a 02 c0       	mov    edx,0xc0020a78
c000b9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f0:	89 10                	mov    DWORD PTR [eax],edx
c000b9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ba00:	90                   	nop
c000ba01:	83 c4 0c             	add    esp,0xc
c000ba04:	c3                   	ret    
c000ba05:	90                   	nop
c000ba06:	66 90                	xchg   ax,ax

c000ba08 <Bus::~Bus()>:
c000ba08:	83 ec 0c             	sub    esp,0xc
c000ba0b:	ba 78 0a 02 c0       	mov    edx,0xc0020a78
c000ba10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba14:	89 10                	mov    DWORD PTR [eax],edx
c000ba16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba1a:	83 ec 0c             	sub    esp,0xc
c000ba1d:	50                   	push   eax
c000ba1e:	e8 53 05 00 00       	call   c000bf76 <Device::~Device()>
c000ba23:	83 c4 10             	add    esp,0x10
c000ba26:	90                   	nop
c000ba27:	83 c4 0c             	add    esp,0xc
c000ba2a:	c3                   	ret    
c000ba2b:	90                   	nop

c000ba2c <Bus::~Bus()>:
c000ba2c:	83 ec 0c             	sub    esp,0xc
c000ba2f:	83 ec 0c             	sub    esp,0xc
c000ba32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba36:	e8 cd ff ff ff       	call   c000ba08 <Bus::~Bus()>
c000ba3b:	83 c4 10             	add    esp,0x10
c000ba3e:	83 ec 08             	sub    esp,0x8
c000ba41:	68 58 01 00 00       	push   0x158
c000ba46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba4a:	e8 ef ed ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000ba4f:	83 c4 10             	add    esp,0x10
c000ba52:	83 c4 0c             	add    esp,0xc
c000ba55:	c3                   	ret    

c000ba56 <beepThread(void*)>:
c000ba56:	83 ec 0c             	sub    esp,0xc
c000ba59:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ba5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba62:	48                   	dec    eax
c000ba63:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000ba68:	75 01                	jne    c000ba6b <beepThread(void*)+0x15>
c000ba6a:	fb                   	sti    
c000ba6b:	6b c2 0a             	imul   eax,edx,0xa
c000ba6e:	83 ec 0c             	sub    esp,0xc
c000ba71:	50                   	push   eax
c000ba72:	e8 11 9c 00 00       	call   c0015688 <milliTenthSleep(unsigned int)>
c000ba77:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba7e:	e8 5e bb 00 00       	call   c00175e1 <HalMakeBeep(int)>
c000ba83:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba8b:	83 c4 1c             	add    esp,0x1c
c000ba8e:	e9 d9 9a 00 00       	jmp    c001556c <blockTask(TaskState)>

c000ba93 <Krnl::beep(int, int, bool)>:
c000ba93:	56                   	push   esi
c000ba94:	53                   	push   ebx
c000ba95:	83 ec 10             	sub    esp,0x10
c000ba98:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba9c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000baa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baa4:	e8 38 bb 00 00       	call   c00175e1 <HalMakeBeep(int)>
c000baa9:	89 f0                	mov    eax,esi
c000baab:	83 c4 10             	add    esp,0x10
c000baae:	84 c0                	test   al,al
c000bab0:	74 1e                	je     c000bad0 <Krnl::beep(int, int, bool)+0x3d>
c000bab2:	6b db 0a             	imul   ebx,ebx,0xa
c000bab5:	83 ec 0c             	sub    esp,0xc
c000bab8:	53                   	push   ebx
c000bab9:	e8 ca 9b 00 00       	call   c0015688 <milliTenthSleep(unsigned int)>
c000babe:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bac6:	83 c4 14             	add    esp,0x14
c000bac9:	5b                   	pop    ebx
c000baca:	5e                   	pop    esi
c000bacb:	e9 11 bb 00 00       	jmp    c00175e1 <HalMakeBeep(int)>
c000bad0:	68 e6 00 00 00       	push   0xe6
c000bad5:	53                   	push   ebx
c000bad6:	68 56 ba 00 c0       	push   0xc000ba56
c000badb:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000bae1:	e8 3a 96 00 00       	call   c0015120 <Process::createThread(void (*)(void*), void*, int)>
c000bae6:	83 c4 14             	add    esp,0x14
c000bae9:	5b                   	pop    ebx
c000baea:	5e                   	pop    esi
c000baeb:	c3                   	ret    

c000baec <User::loadClockSettings(int)>:
c000baec:	53                   	push   ebx
c000baed:	83 ec 14             	sub    esp,0x14
c000baf0:	68 14 01 00 00       	push   0x114
c000baf5:	e8 d1 bf ff ff       	call   c0007acb <malloc>
c000bafa:	83 c4 0c             	add    esp,0xc
c000bafd:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000bb03:	68 9c 0a 02 c0       	push   0xc0020a9c
c000bb08:	50                   	push   eax
c000bb09:	89 c3                	mov    ebx,eax
c000bb0b:	e8 aa f6 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c000bb10:	58                   	pop    eax
c000bb11:	5a                   	pop    edx
c000bb12:	6a 01                	push   0x1
c000bb14:	53                   	push   ebx
c000bb15:	e8 5c f7 ff ff       	call   c000b276 <File::open(FileOpenMode)>
c000bb1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bb1d:	e8 b2 f7 ff ff       	call   c000b2d4 <File::close()>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	85 db                	test   ebx,ebx
c000bb27:	74 0f                	je     c000bb38 <User::loadClockSettings(int)+0x4c>
c000bb29:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb2b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000bb2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bb32:	83 c4 08             	add    esp,0x8
c000bb35:	5b                   	pop    ebx
c000bb36:	ff e0                	jmp    eax
c000bb38:	83 c4 08             	add    esp,0x8
c000bb3b:	5b                   	pop    ebx
c000bb3c:	c3                   	ret    
c000bb3d:	90                   	nop

c000bb3e <Clock::Clock(char const*)>:
c000bb3e:	83 ec 0c             	sub    esp,0xc
c000bb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb45:	83 ec 08             	sub    esp,0x8
c000bb48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb4c:	50                   	push   eax
c000bb4d:	e8 ba 06 00 00       	call   c000c20c <Device::Device(char const*)>
c000bb52:	83 c4 10             	add    esp,0x10
c000bb55:	ba c4 0a 02 c0       	mov    edx,0xc0020ac4
c000bb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb5e:	89 10                	mov    DWORD PTR [eax],edx
c000bb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb64:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb6e:	90                   	nop
c000bb6f:	83 c4 0c             	add    esp,0xc
c000bb72:	c3                   	ret    
c000bb73:	90                   	nop

c000bb74 <Clock::~Clock()>:
c000bb74:	83 ec 0c             	sub    esp,0xc
c000bb77:	ba c4 0a 02 c0       	mov    edx,0xc0020ac4
c000bb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb80:	89 10                	mov    DWORD PTR [eax],edx
c000bb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb86:	83 ec 0c             	sub    esp,0xc
c000bb89:	50                   	push   eax
c000bb8a:	e8 e7 03 00 00       	call   c000bf76 <Device::~Device()>
c000bb8f:	83 c4 10             	add    esp,0x10
c000bb92:	90                   	nop
c000bb93:	83 c4 0c             	add    esp,0xc
c000bb96:	c3                   	ret    
c000bb97:	90                   	nop

c000bb98 <Clock::~Clock()>:
c000bb98:	83 ec 0c             	sub    esp,0xc
c000bb9b:	83 ec 0c             	sub    esp,0xc
c000bb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba2:	e8 cd ff ff ff       	call   c000bb74 <Clock::~Clock()>
c000bba7:	83 c4 10             	add    esp,0x10
c000bbaa:	83 ec 08             	sub    esp,0x8
c000bbad:	68 58 01 00 00       	push   0x158
c000bbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbb6:	e8 83 ec ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000bbbb:	83 c4 10             	add    esp,0x10
c000bbbe:	83 c4 0c             	add    esp,0xc
c000bbc1:	c3                   	ret    

c000bbc2 <Clock::timeInSecondsLocal()>:
c000bbc2:	53                   	push   ebx
c000bbc3:	83 ec 14             	sub    esp,0x14
c000bbc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bbca:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbcc:	50                   	push   eax
c000bbcd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bbd0:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bbd7:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bbdd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bbe3:	89 cb                	mov    ebx,ecx
c000bbe5:	c1 fb 1f             	sar    ebx,0x1f
c000bbe8:	01 c8                	add    eax,ecx
c000bbea:	11 da                	adc    edx,ebx
c000bbec:	83 c4 10             	add    esp,0x10
c000bbef:	31 c9                	xor    ecx,ecx
c000bbf1:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bbf8:	74 05                	je     c000bbff <Clock::timeInSecondsLocal()+0x3d>
c000bbfa:	b9 08 07 00 00       	mov    ecx,0x708
c000bbff:	31 db                	xor    ebx,ebx
c000bc01:	01 c8                	add    eax,ecx
c000bc03:	11 da                	adc    edx,ebx
c000bc05:	83 c4 08             	add    esp,0x8
c000bc08:	5b                   	pop    ebx
c000bc09:	c3                   	ret    

c000bc0a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bc0a:	57                   	push   edi
c000bc0b:	56                   	push   esi
c000bc0c:	53                   	push   ebx
c000bc0d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bc11:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc15:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc19:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc1b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bc1e:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000bc25:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000bc2b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bc31:	99                   	cdq    
c000bc32:	29 c6                	sub    esi,eax
c000bc34:	19 d7                	sbb    edi,edx
c000bc36:	89 f0                	mov    eax,esi
c000bc38:	31 f6                	xor    esi,esi
c000bc3a:	89 fa                	mov    edx,edi
c000bc3c:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bc43:	74 05                	je     c000bc4a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bc45:	be 08 07 00 00       	mov    esi,0x708
c000bc4a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bc4e:	31 ff                	xor    edi,edi
c000bc50:	29 f0                	sub    eax,esi
c000bc52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc56:	19 fa                	sbb    edx,edi
c000bc58:	89 d8                	mov    eax,ebx
c000bc5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc5e:	5b                   	pop    ebx
c000bc5f:	5e                   	pop    esi
c000bc60:	5f                   	pop    edi
c000bc61:	ff e0                	jmp    eax

c000bc63 <datetimeToSeconds(datetime_t)>:
c000bc63:	55                   	push   ebp
c000bc64:	57                   	push   edi
c000bc65:	56                   	push   esi
c000bc66:	53                   	push   ebx
c000bc67:	83 ec 0c             	sub    esp,0xc
c000bc6a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000bc6e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc72:	89 f7                	mov    edi,esi
c000bc74:	89 f0                	mov    eax,esi
c000bc76:	0f b6 cf             	movzx  ecx,bh
c000bc79:	0f b6 c4             	movzx  eax,ah
c000bc7c:	c1 ef 10             	shr    edi,0x10
c000bc7f:	89 da                	mov    edx,ebx
c000bc81:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000bc84:	89 f9                	mov    ecx,edi
c000bc86:	0f b6 f9             	movzx  edi,cl
c000bc89:	89 f1                	mov    ecx,esi
c000bc8b:	6b c0 3c             	imul   eax,eax,0x3c
c000bc8e:	0f b6 f1             	movzx  esi,cl
c000bc91:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000bc97:	0f b6 db             	movzx  ebx,bl
c000bc9a:	c1 ea 10             	shr    edx,0x10
c000bc9d:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000bca3:	01 f8                	add    eax,edi
c000bca5:	01 f0                	add    eax,esi
c000bca7:	89 04 24             	mov    DWORD PTR [esp],eax
c000bcaa:	c1 f8 1f             	sar    eax,0x1f
c000bcad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bcb1:	89 e8                	mov    eax,ebp
c000bcb3:	0f b6 c0             	movzx  eax,al
c000bcb6:	8b 0c 85 00 0b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdf500]
c000bcbd:	83 f8 01             	cmp    eax,0x1
c000bcc0:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000bcc4:	0f b7 da             	movzx  ebx,dx
c000bcc7:	76 27                	jbe    c000bcf0 <datetimeToSeconds(datetime_t)+0x8d>
c000bcc9:	80 e2 03             	and    dl,0x3
c000bccc:	75 22                	jne    c000bcf0 <datetimeToSeconds(datetime_t)+0x8d>
c000bcce:	31 d2                	xor    edx,edx
c000bcd0:	be 64 00 00 00       	mov    esi,0x64
c000bcd5:	89 d8                	mov    eax,ebx
c000bcd7:	f7 f6                	div    esi
c000bcd9:	85 d2                	test   edx,edx
c000bcdb:	75 12                	jne    c000bcef <datetimeToSeconds(datetime_t)+0x8c>
c000bcdd:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bce3:	be 90 01 00 00       	mov    esi,0x190
c000bce8:	99                   	cdq    
c000bce9:	f7 fe                	idiv   esi
c000bceb:	85 d2                	test   edx,edx
c000bced:	75 01                	jne    c000bcf0 <datetimeToSeconds(datetime_t)+0x8d>
c000bcef:	41                   	inc    ecx
c000bcf0:	83 fb 46             	cmp    ebx,0x46
c000bcf3:	76 48                	jbe    c000bd3d <datetimeToSeconds(datetime_t)+0xda>
c000bcf5:	be 46 00 00 00       	mov    esi,0x46
c000bcfa:	bf 64 00 00 00       	mov    edi,0x64
c000bcff:	bd 90 01 00 00       	mov    ebp,0x190
c000bd04:	f7 c6 03 00 00 00    	test   esi,0x3
c000bd0a:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd0f:	75 23                	jne    c000bd34 <datetimeToSeconds(datetime_t)+0xd1>
c000bd11:	89 f0                	mov    eax,esi
c000bd13:	99                   	cdq    
c000bd14:	f7 ff                	idiv   edi
c000bd16:	b8 6e 01 00 00       	mov    eax,0x16e
c000bd1b:	85 d2                	test   edx,edx
c000bd1d:	75 15                	jne    c000bd34 <datetimeToSeconds(datetime_t)+0xd1>
c000bd1f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bd25:	99                   	cdq    
c000bd26:	f7 fd                	idiv   ebp
c000bd28:	83 fa 01             	cmp    edx,0x1
c000bd2b:	19 c0                	sbb    eax,eax
c000bd2d:	f7 d0                	not    eax
c000bd2f:	05 6e 01 00 00       	add    eax,0x16e
c000bd34:	46                   	inc    esi
c000bd35:	01 c1                	add    ecx,eax
c000bd37:	39 de                	cmp    esi,ebx
c000bd39:	7c c9                	jl     c000bd04 <datetimeToSeconds(datetime_t)+0xa1>
c000bd3b:	eb 34                	jmp    c000bd71 <datetimeToSeconds(datetime_t)+0x10e>
c000bd3d:	74 32                	je     c000bd71 <datetimeToSeconds(datetime_t)+0x10e>
c000bd3f:	b8 45 00 00 00       	mov    eax,0x45
c000bd44:	89 c2                	mov    edx,eax
c000bd46:	83 e2 03             	and    edx,0x3
c000bd49:	39 d8                	cmp    eax,ebx
c000bd4b:	7e 0f                	jle    c000bd5c <datetimeToSeconds(datetime_t)+0xf9>
c000bd4d:	83 fa 01             	cmp    edx,0x1
c000bd50:	19 d2                	sbb    edx,edx
c000bd52:	48                   	dec    eax
c000bd53:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bd5a:	eb e8                	jmp    c000bd44 <datetimeToSeconds(datetime_t)+0xe1>
c000bd5c:	85 d2                	test   edx,edx
c000bd5e:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd63:	75 0a                	jne    c000bd6f <datetimeToSeconds(datetime_t)+0x10c>
c000bd65:	83 fb 01             	cmp    ebx,0x1
c000bd68:	19 c0                	sbb    eax,eax
c000bd6a:	05 6e 01 00 00       	add    eax,0x16e
c000bd6f:	29 c1                	sub    ecx,eax
c000bd71:	b8 80 51 01 00       	mov    eax,0x15180
c000bd76:	f7 e9                	imul   ecx
c000bd78:	03 04 24             	add    eax,DWORD PTR [esp]
c000bd7b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bd7f:	83 c4 0c             	add    esp,0xc
c000bd82:	5b                   	pop    ebx
c000bd83:	5e                   	pop    esi
c000bd84:	5f                   	pop    edi
c000bd85:	5d                   	pop    ebp
c000bd86:	c3                   	ret    
c000bd87:	90                   	nop

c000bd88 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd88:	57                   	push   edi
c000bd89:	56                   	push   esi
c000bd8a:	53                   	push   ebx
c000bd8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd8f:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd91:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd9c:	e8 c2 fe ff ff       	call   c000bc63 <datetimeToSeconds(datetime_t)>
c000bda1:	59                   	pop    ecx
c000bda2:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bda9:	5b                   	pop    ebx
c000bdaa:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bdb0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bdb6:	89 cb                	mov    ebx,ecx
c000bdb8:	c1 fb 1f             	sar    ebx,0x1f
c000bdbb:	29 c8                	sub    eax,ecx
c000bdbd:	19 da                	sbb    edx,ebx
c000bdbf:	31 c9                	xor    ecx,ecx
c000bdc1:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bdc8:	74 05                	je     c000bdcf <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bdca:	b9 08 07 00 00       	mov    ecx,0x708
c000bdcf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bdd3:	31 db                	xor    ebx,ebx
c000bdd5:	29 c8                	sub    eax,ecx
c000bdd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bddb:	19 da                	sbb    edx,ebx
c000bddd:	89 f8                	mov    eax,edi
c000bddf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bde3:	5b                   	pop    ebx
c000bde4:	5e                   	pop    esi
c000bde5:	5f                   	pop    edi
c000bde6:	ff e0                	jmp    eax

c000bde8 <secondsToDatetime(unsigned long long)>:
c000bde8:	55                   	push   ebp
c000bde9:	57                   	push   edi
c000bdea:	56                   	push   esi
c000bdeb:	53                   	push   ebx
c000bdec:	83 ec 1c             	sub    esp,0x1c
c000bdef:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bdf3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bdf7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdfb:	6a 00                	push   0x0
c000bdfd:	68 80 51 01 00       	push   0x15180
c000be02:	55                   	push   ebp
c000be03:	57                   	push   edi
c000be04:	e8 a7 2b 01 00       	call   c001e9b0 <__udivdi3>
c000be09:	83 c4 10             	add    esp,0x10
c000be0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be10:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000be16:	6a 00                	push   0x0
c000be18:	68 80 51 01 00       	push   0x15180
c000be1d:	55                   	push   ebp
c000be1e:	57                   	push   edi
c000be1f:	bf 10 0e 00 00       	mov    edi,0xe10
c000be24:	e8 87 2c 01 00       	call   c001eab0 <__umoddi3>
c000be29:	83 c4 10             	add    esp,0x10
c000be2c:	99                   	cdq    
c000be2d:	f7 ff                	idiv   edi
c000be2f:	bf 3c 00 00 00       	mov    edi,0x3c
c000be34:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000be37:	89 d0                	mov    eax,edx
c000be39:	99                   	cdq    
c000be3a:	f7 ff                	idiv   edi
c000be3c:	85 db                	test   ebx,ebx
c000be3e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000be41:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000be44:	79 11                	jns    c000be57 <secondsToDatetime(unsigned long long)+0x6f>
c000be46:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be4a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be50:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be55:	eb 07                	jmp    c000be5e <secondsToDatetime(unsigned long long)+0x76>
c000be57:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be5c:	89 d8                	mov    eax,ebx
c000be5e:	99                   	cdq    
c000be5f:	bf b4 05 00 00       	mov    edi,0x5b4
c000be64:	f7 f9                	idiv   ecx
c000be66:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be6b:	31 d2                	xor    edx,edx
c000be6d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be76:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be7e:	01 c3                	add    ebx,eax
c000be80:	89 d8                	mov    eax,ebx
c000be82:	f7 f1                	div    ecx
c000be84:	31 d2                	xor    edx,edx
c000be86:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be89:	89 d8                	mov    eax,ebx
c000be8b:	f7 f7                	div    edi
c000be8d:	31 d2                	xor    edx,edx
c000be8f:	29 c1                	sub    ecx,eax
c000be91:	89 d8                	mov    eax,ebx
c000be93:	f7 f5                	div    ebp
c000be95:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be9a:	31 d2                	xor    edx,edx
c000be9c:	29 c1                	sub    ecx,eax
c000be9e:	89 c8                	mov    eax,ecx
c000bea0:	f7 f5                	div    ebp
c000bea2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bea7:	31 d2                	xor    edx,edx
c000bea9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bead:	89 c8                	mov    eax,ecx
c000beaf:	f7 f5                	div    ebp
c000beb1:	31 d2                	xor    edx,edx
c000beb3:	01 c3                	add    ebx,eax
c000beb5:	89 c8                	mov    eax,ecx
c000beb7:	f7 f7                	div    edi
c000beb9:	bf 99 00 00 00       	mov    edi,0x99
c000bebe:	31 d2                	xor    edx,edx
c000bec0:	29 c3                	sub    ebx,eax
c000bec2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000beca:	29 c3                	sub    ebx,eax
c000becc:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000becf:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bed2:	83 c1 02             	add    ecx,0x2
c000bed5:	89 c8                	mov    eax,ecx
c000bed7:	bb 05 00 00 00       	mov    ebx,0x5
c000bedc:	f7 f7                	div    edi
c000bede:	31 d2                	xor    edx,edx
c000bee0:	89 c7                	mov    edi,eax
c000bee2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bee8:	83 c0 02             	add    eax,0x2
c000beeb:	f7 f3                	div    ebx
c000beed:	89 eb                	mov    ebx,ebp
c000beef:	29 c3                	sub    ebx,eax
c000bef1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bef7:	88 1e                	mov    BYTE PTR [esi],bl
c000bef9:	19 c0                	sbb    eax,eax
c000befb:	31 d2                	xor    edx,edx
c000befd:	83 e0 0c             	and    eax,0xc
c000bf00:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bf04:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bf0c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf10:	83 f9 01             	cmp    ecx,0x1
c000bf13:	0f 96 c2             	setbe  dl
c000bf16:	41                   	inc    ecx
c000bf17:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bf1a:	01 d0                	add    eax,edx
c000bf1c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bf20:	83 c4 1c             	add    esp,0x1c
c000bf23:	89 f0                	mov    eax,esi
c000bf25:	5b                   	pop    ebx
c000bf26:	5e                   	pop    esi
c000bf27:	5f                   	pop    edi
c000bf28:	5d                   	pop    ebp
c000bf29:	c2 04 00             	ret    0x4

c000bf2c <Clock::timeInDatetimeLocal()>:
c000bf2c:	53                   	push   ebx
c000bf2d:	83 ec 14             	sub    esp,0x14
c000bf30:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf34:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf38:	e8 85 fc ff ff       	call   c000bbc2 <Clock::timeInSecondsLocal()>
c000bf3d:	83 c4 0c             	add    esp,0xc
c000bf40:	52                   	push   edx
c000bf41:	50                   	push   eax
c000bf42:	53                   	push   ebx
c000bf43:	e8 a0 fe ff ff       	call   c000bde8 <secondsToDatetime(unsigned long long)>
c000bf48:	89 d8                	mov    eax,ebx
c000bf4a:	83 c4 14             	add    esp,0x14
c000bf4d:	5b                   	pop    ebx
c000bf4e:	c2 04 00             	ret    0x4
c000bf51:	90                   	nop

c000bf52 <Device::hibernate()>:
c000bf52:	c3                   	ret    
c000bf53:	90                   	nop

c000bf54 <Device::wake()>:
c000bf54:	c3                   	ret    
c000bf55:	90                   	nop

c000bf56 <Device::detect()>:
c000bf56:	c3                   	ret    
c000bf57:	90                   	nop

c000bf58 <Device::disableLegacy()>:
c000bf58:	c3                   	ret    
c000bf59:	90                   	nop

c000bf5a <Device::powerSaving(PowerSavingLevel)>:
c000bf5a:	c3                   	ret    
c000bf5b:	90                   	nop

c000bf5c <DriverlessDevice::close(int, int, void*)>:
c000bf5c:	31 c0                	xor    eax,eax
c000bf5e:	c3                   	ret    
c000bf5f:	90                   	nop

c000bf60 <DriverlessDevice::detect()>:
c000bf60:	c3                   	ret    
c000bf61:	90                   	nop

c000bf62 <DriverlessDevice::open(int, int, void*)>:
c000bf62:	83 ec 18             	sub    esp,0x18
c000bf65:	68 30 0b 02 c0       	push   0xc0020b30
c000bf6a:	e8 ce 4b 00 00       	call   c0010b3d <KePanic(char const*)>
c000bf6f:	83 c8 ff             	or     eax,0xffffffff
c000bf72:	83 c4 1c             	add    esp,0x1c
c000bf75:	c3                   	ret    

c000bf76 <Device::~Device()>:
c000bf76:	ba 90 0b 02 c0       	mov    edx,0xc0020b90
c000bf7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf7f:	89 10                	mov    DWORD PTR [eax],edx
c000bf81:	90                   	nop
c000bf82:	c3                   	ret    
c000bf83:	90                   	nop

c000bf84 <Device::~Device()>:
c000bf84:	83 ec 0c             	sub    esp,0xc
c000bf87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf8b:	e8 e6 ff ff ff       	call   c000bf76 <Device::~Device()>
c000bf90:	83 c4 04             	add    esp,0x4
c000bf93:	83 ec 08             	sub    esp,0x8
c000bf96:	68 58 01 00 00       	push   0x158
c000bf9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf9f:	e8 9a e8 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000bfa4:	83 c4 10             	add    esp,0x10
c000bfa7:	83 c4 0c             	add    esp,0xc
c000bfaa:	c3                   	ret    
c000bfab:	90                   	nop

c000bfac <Device::findAndLoadDriver()>:
c000bfac:	c7 44 24 04 4e 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b4e
c000bfb4:	e9 83 e9 ff ff       	jmp    c000a93c <Dbg::kprintf(char const*, ...)>
c000bfb9:	90                   	nop

c000bfba <Device::preOpenPCI(PCIDeviceInfo)>:
c000bfba:	57                   	push   edi
c000bfbb:	b9 09 00 00 00       	mov    ecx,0x9
c000bfc0:	56                   	push   esi
c000bfc1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bfc5:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bfc9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bfd3:	81 c7 18 01 00 00    	add    edi,0x118
c000bfd9:	fc                   	cld    
c000bfda:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bfdc:	5e                   	pop    esi
c000bfdd:	5f                   	pop    edi
c000bfde:	c3                   	ret    
c000bfdf:	90                   	nop

c000bfe0 <Device::preOpenACPI(void*, char*, char*)>:
c000bfe0:	57                   	push   edi
c000bfe1:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bfe6:	56                   	push   esi
c000bfe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfeb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bff3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bffd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c003:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c009:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c00b:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c011:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c015:	b9 0e 00 00 00       	mov    ecx,0xe
c000c01a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c01c:	5e                   	pop    esi
c000c01d:	5f                   	pop    edi
c000c01e:	c3                   	ret    
c000c01f:	90                   	nop

c000c020 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c020:	53                   	push   ebx
c000c021:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c025:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c029:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c02d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c031:	0f b6 c0             	movzx  eax,al
c000c034:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c038:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c03c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c040:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c044:	5b                   	pop    ebx
c000c045:	e9 aa 05 00 00       	jmp    c000c5f4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c04a <Device::getParent()>:
c000c04a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c04e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c054:	c3                   	ret    
c000c055:	90                   	nop

c000c056 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c056:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c05a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c05e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c063:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c067:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c06b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c06f:	e9 f7 06 00 00       	jmp    c000c76b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c074 <Device::addChild(Device*)>:
c000c074:	53                   	push   ebx
c000c075:	83 ec 08             	sub    esp,0x8
c000c078:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c07c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c080:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c086:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c08c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c08e:	85 d2                	test   edx,edx
c000c090:	74 04                	je     c000c096 <Device::addChild(Device*)+0x22>
c000c092:	89 d3                	mov    ebx,edx
c000c094:	eb f6                	jmp    c000c08c <Device::addChild(Device*)+0x18>
c000c096:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c099:	83 ec 0c             	sub    esp,0xc
c000c09c:	6a 08                	push   0x8
c000c09e:	e8 28 ba ff ff       	call   c0007acb <malloc>
c000c0a3:	89 03                	mov    DWORD PTR [ebx],eax
c000c0a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0b2:	83 c4 18             	add    esp,0x18
c000c0b5:	5b                   	pop    ebx
c000c0b6:	c3                   	ret    
c000c0b7:	90                   	nop

c000c0b8 <Device::removeAllChildren()>:
c000c0b8:	56                   	push   esi
c000c0b9:	53                   	push   ebx
c000c0ba:	52                   	push   edx
c000c0bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c0bf:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c0c5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0c8:	74 17                	je     c000c0e1 <Device::removeAllChildren()+0x29>
c000c0ca:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c0cd:	85 c0                	test   eax,eax
c000c0cf:	74 0c                	je     c000c0dd <Device::removeAllChildren()+0x25>
c000c0d1:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0d3:	83 ec 0c             	sub    esp,0xc
c000c0d6:	50                   	push   eax
c000c0d7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c0da:	83 c4 10             	add    esp,0x10
c000c0dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0df:	eb e4                	jmp    c000c0c5 <Device::removeAllChildren()+0xd>
c000c0e1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0ed:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0fa:	58                   	pop    eax
c000c0fb:	5b                   	pop    ebx
c000c0fc:	5e                   	pop    esi
c000c0fd:	c3                   	ret    

c000c0fe <Device::hibernateAll()>:
c000c0fe:	53                   	push   ebx
c000c0ff:	83 ec 14             	sub    esp,0x14
c000c102:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c106:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c108:	53                   	push   ebx
c000c109:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c10c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c112:	83 c4 10             	add    esp,0x10
c000c115:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c118:	74 0f                	je     c000c129 <Device::hibernateAll()+0x2b>
c000c11a:	83 ec 0c             	sub    esp,0xc
c000c11d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c120:	e8 d9 ff ff ff       	call   c000c0fe <Device::hibernateAll()>
c000c125:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c127:	eb e9                	jmp    c000c112 <Device::hibernateAll()+0x14>
c000c129:	83 c4 08             	add    esp,0x8
c000c12c:	5b                   	pop    ebx
c000c12d:	c3                   	ret    

c000c12e <Device::wakeAll()>:
c000c12e:	53                   	push   ebx
c000c12f:	83 ec 14             	sub    esp,0x14
c000c132:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c136:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c138:	53                   	push   ebx
c000c139:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c13c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c142:	83 c4 10             	add    esp,0x10
c000c145:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c148:	74 0f                	je     c000c159 <Device::wakeAll()+0x2b>
c000c14a:	83 ec 0c             	sub    esp,0xc
c000c14d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c150:	e8 d9 ff ff ff       	call   c000c12e <Device::wakeAll()>
c000c155:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c157:	eb e9                	jmp    c000c142 <Device::wakeAll()+0x14>
c000c159:	83 c4 08             	add    esp,0x8
c000c15c:	5b                   	pop    ebx
c000c15d:	c3                   	ret    

c000c15e <Device::detectAll()>:
c000c15e:	53                   	push   ebx
c000c15f:	83 ec 14             	sub    esp,0x14
c000c162:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c166:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c168:	53                   	push   ebx
c000c169:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c16c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c172:	83 c4 10             	add    esp,0x10
c000c175:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c178:	74 0f                	je     c000c189 <Device::detectAll()+0x2b>
c000c17a:	83 ec 0c             	sub    esp,0xc
c000c17d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c180:	e8 d9 ff ff ff       	call   c000c15e <Device::detectAll()>
c000c185:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c187:	eb e9                	jmp    c000c172 <Device::detectAll()+0x14>
c000c189:	83 c4 08             	add    esp,0x8
c000c18c:	5b                   	pop    ebx
c000c18d:	c3                   	ret    

c000c18e <Device::disableLegacyAll()>:
c000c18e:	c3                   	ret    
c000c18f:	90                   	nop

c000c190 <Device::loadDriversForAll()>:
c000c190:	c3                   	ret    
c000c191:	90                   	nop

c000c192 <Device::closeAll()>:
c000c192:	53                   	push   ebx
c000c193:	83 ec 08             	sub    esp,0x8
c000c196:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c19a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c19c:	6a 00                	push   0x0
c000c19e:	6a 00                	push   0x0
c000c1a0:	6a 00                	push   0x0
c000c1a2:	53                   	push   ebx
c000c1a3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c1a6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1ac:	83 c4 10             	add    esp,0x10
c000c1af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1b2:	74 0f                	je     c000c1c3 <Device::closeAll()+0x31>
c000c1b4:	83 ec 0c             	sub    esp,0xc
c000c1b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1ba:	e8 d3 ff ff ff       	call   c000c192 <Device::closeAll()>
c000c1bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1c1:	eb e9                	jmp    c000c1ac <Device::closeAll()+0x1a>
c000c1c3:	83 c4 08             	add    esp,0x8
c000c1c6:	5b                   	pop    ebx
c000c1c7:	c3                   	ret    

c000c1c8 <Device::powerSavingAll(PowerSavingLevel)>:
c000c1c8:	56                   	push   esi
c000c1c9:	53                   	push   ebx
c000c1ca:	83 ec 0c             	sub    esp,0xc
c000c1cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c1d1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c1d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1d7:	56                   	push   esi
c000c1d8:	53                   	push   ebx
c000c1d9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c1dc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1e2:	83 c4 10             	add    esp,0x10
c000c1e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1e8:	74 0f                	je     c000c1f9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c1ea:	52                   	push   edx
c000c1eb:	52                   	push   edx
c000c1ec:	56                   	push   esi
c000c1ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1f0:	e8 d3 ff ff ff       	call   c000c1c8 <Device::powerSavingAll(PowerSavingLevel)>
c000c1f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1f7:	eb e9                	jmp    c000c1e2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c1f9:	58                   	pop    eax
c000c1fa:	5b                   	pop    ebx
c000c1fb:	5e                   	pop    esi
c000c1fc:	c3                   	ret    
c000c1fd:	90                   	nop

c000c1fe <Device::setName(char const*)>:
c000c1fe:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c206:	e9 45 44 ff ff       	jmp    c0000650 <strcpy>
c000c20b:	90                   	nop

c000c20c <Device::Device(char const*)>:
c000c20c:	83 ec 1c             	sub    esp,0x1c
c000c20f:	ba 90 0b 02 c0       	mov    edx,0xc0020b90
c000c214:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c218:	89 10                	mov    DWORD PTR [eax],edx
c000c21a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c21e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c22c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c23a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c248:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c252:	83 ec 08             	sub    esp,0x8
c000c255:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c259:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c25d:	e8 9c ff ff ff       	call   c000c1fe <Device::setName(char const*)>
c000c262:	83 c4 10             	add    esp,0x10
c000c265:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c26d:	83 ec 0c             	sub    esp,0xc
c000c270:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c274:	e8 52 b8 ff ff       	call   c0007acb <malloc>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c282:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c289:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c28d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c297:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c29d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c2a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2a7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c2ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c2b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2b8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c2bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2c3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c2ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ce:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c2d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2dc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c2e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ea:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c2f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2f8:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c302:	90                   	nop
c000c303:	83 c4 1c             	add    esp,0x1c
c000c306:	c3                   	ret    
c000c307:	90                   	nop

c000c308 <Device::getName()>:
c000c308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c30c:	05 d0 00 00 00       	add    eax,0xd0
c000c311:	c3                   	ret    

c000c312 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c312:	83 ec 0c             	sub    esp,0xc
c000c315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c319:	83 ec 08             	sub    esp,0x8
c000c31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c320:	50                   	push   eax
c000c321:	e8 e6 fe ff ff       	call   c000c20c <Device::Device(char const*)>
c000c326:	83 c4 10             	add    esp,0x10
c000c329:	ba bc 0b 02 c0       	mov    edx,0xc0020bbc
c000c32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c332:	89 10                	mov    DWORD PTR [eax],edx
c000c334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c338:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c342:	90                   	nop
c000c343:	83 c4 0c             	add    esp,0xc
c000c346:	c3                   	ret    
c000c347:	90                   	nop

c000c348 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c348:	57                   	push   edi
c000c349:	56                   	push   esi
c000c34a:	53                   	push   ebx
c000c34b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c34f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c353:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c357:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c35d:	75 0c                	jne    c000c36b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c35f:	52                   	push   edx
c000c360:	52                   	push   edx
c000c361:	53                   	push   ebx
c000c362:	56                   	push   esi
c000c363:	e8 fa 2a 01 00       	call   c001ee62 <LinkedList<Device>::addElement(Device*)>
c000c368:	83 c4 10             	add    esp,0x10
c000c36b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c371:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c374:	74 12                	je     c000c388 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c376:	50                   	push   eax
c000c377:	57                   	push   edi
c000c378:	56                   	push   esi
c000c379:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c37c:	e8 c7 ff ff ff       	call   c000c348 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c381:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c383:	83 c4 10             	add    esp,0x10
c000c386:	eb e9                	jmp    c000c371 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c388:	5b                   	pop    ebx
c000c389:	5e                   	pop    esi
c000c38a:	5f                   	pop    edi
c000c38b:	c3                   	ret    

c000c38c <getDevicesOfType(DeviceType)>:
c000c38c:	53                   	push   ebx
c000c38d:	83 ec 14             	sub    esp,0x14
c000c390:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c394:	53                   	push   ebx
c000c395:	e8 a4 2b 01 00       	call   c001ef3e <LinkedList<Device>::LinkedList()>
c000c39a:	83 c4 0c             	add    esp,0xc
c000c39d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c3a1:	53                   	push   ebx
c000c3a2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c3a8:	e8 9b ff ff ff       	call   c000c348 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c3ad:	83 c4 18             	add    esp,0x18
c000c3b0:	89 d8                	mov    eax,ebx
c000c3b2:	5b                   	pop    ebx
c000c3b3:	c2 04 00             	ret    0x4
c000c3b6:	66 90                	xchg   ax,ax

c000c3b8 <HardDiskController::HardDiskController(char const*)>:
c000c3b8:	83 ec 0c             	sub    esp,0xc
c000c3bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3bf:	83 ec 08             	sub    esp,0x8
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	50                   	push   eax
c000c3c7:	e8 40 fe ff ff       	call   c000c20c <Device::Device(char const*)>
c000c3cc:	83 c4 10             	add    esp,0x10
c000c3cf:	ba e8 0b 02 c0       	mov    edx,0xc0020be8
c000c3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3d8:	89 10                	mov    DWORD PTR [eax],edx
c000c3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3de:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c3e8:	90                   	nop
c000c3e9:	83 c4 0c             	add    esp,0xc
c000c3ec:	c3                   	ret    
c000c3ed:	90                   	nop
c000c3ee:	66 90                	xchg   ax,ax

c000c3f0 <HardDiskController::~HardDiskController()>:
c000c3f0:	83 ec 0c             	sub    esp,0xc
c000c3f3:	ba e8 0b 02 c0       	mov    edx,0xc0020be8
c000c3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3fc:	89 10                	mov    DWORD PTR [eax],edx
c000c3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c402:	83 ec 0c             	sub    esp,0xc
c000c405:	50                   	push   eax
c000c406:	e8 6b fb ff ff       	call   c000bf76 <Device::~Device()>
c000c40b:	83 c4 10             	add    esp,0x10
c000c40e:	90                   	nop
c000c40f:	83 c4 0c             	add    esp,0xc
c000c412:	c3                   	ret    
c000c413:	90                   	nop

c000c414 <HardDiskController::~HardDiskController()>:
c000c414:	83 ec 0c             	sub    esp,0xc
c000c417:	83 ec 0c             	sub    esp,0xc
c000c41a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c41e:	e8 cd ff ff ff       	call   c000c3f0 <HardDiskController::~HardDiskController()>
c000c423:	83 c4 10             	add    esp,0x10
c000c426:	83 ec 08             	sub    esp,0x8
c000c429:	68 58 01 00 00       	push   0x158
c000c42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c432:	e8 07 e4 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000c437:	83 c4 10             	add    esp,0x10
c000c43a:	83 c4 0c             	add    esp,0xc
c000c43d:	c3                   	ret    

c000c43e <PhysicalDisk::eject()>:
c000c43e:	83 c8 ff             	or     eax,0xffffffff
c000c441:	c3                   	ret    

c000c442 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c442:	83 ec 0c             	sub    esp,0xc
c000c445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c449:	83 ec 08             	sub    esp,0x8
c000c44c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c450:	50                   	push   eax
c000c451:	e8 b6 fd ff ff       	call   c000c20c <Device::Device(char const*)>
c000c456:	83 c4 10             	add    esp,0x10
c000c459:	ba 14 0c 02 c0       	mov    edx,0xc0020c14
c000c45e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c462:	89 10                	mov    DWORD PTR [eax],edx
c000c464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c468:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c473:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c47e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c48c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c490:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c49a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c4a4:	90                   	nop
c000c4a5:	83 c4 0c             	add    esp,0xc
c000c4a8:	c3                   	ret    
c000c4a9:	90                   	nop

c000c4aa <PhysicalDisk::startCache()>:
c000c4aa:	56                   	push   esi
c000c4ab:	53                   	push   ebx
c000c4ac:	83 ec 10             	sub    esp,0x10
c000c4af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4b3:	6a 44                	push   0x44
c000c4b5:	e8 11 b6 ff ff       	call   c0007acb <malloc>
c000c4ba:	89 c6                	mov    esi,eax
c000c4bc:	58                   	pop    eax
c000c4bd:	5a                   	pop    edx
c000c4be:	53                   	push   ebx
c000c4bf:	56                   	push   esi
c000c4c0:	e8 83 17 00 00       	call   c000dc48 <VCache::VCache(PhysicalDisk*)>
c000c4c5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c4cb:	83 c4 14             	add    esp,0x14
c000c4ce:	5b                   	pop    ebx
c000c4cf:	5e                   	pop    esi
c000c4d0:	c3                   	ret    
c000c4d1:	90                   	nop

c000c4d2 <PhysicalDisk::~PhysicalDisk()>:
c000c4d2:	83 ec 0c             	sub    esp,0xc
c000c4d5:	ba 14 0c 02 c0       	mov    edx,0xc0020c14
c000c4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4de:	89 10                	mov    DWORD PTR [eax],edx
c000c4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4e4:	83 ec 0c             	sub    esp,0xc
c000c4e7:	50                   	push   eax
c000c4e8:	e8 89 fa ff ff       	call   c000bf76 <Device::~Device()>
c000c4ed:	83 c4 10             	add    esp,0x10
c000c4f0:	90                   	nop
c000c4f1:	83 c4 0c             	add    esp,0xc
c000c4f4:	c3                   	ret    
c000c4f5:	90                   	nop

c000c4f6 <PhysicalDisk::~PhysicalDisk()>:
c000c4f6:	83 ec 0c             	sub    esp,0xc
c000c4f9:	83 ec 0c             	sub    esp,0xc
c000c4fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c500:	e8 cd ff ff ff       	call   c000c4d2 <PhysicalDisk::~PhysicalDisk()>
c000c505:	83 c4 10             	add    esp,0x10
c000c508:	83 ec 08             	sub    esp,0x8
c000c50b:	68 6c 01 00 00       	push   0x16c
c000c510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c514:	e8 25 e3 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000c519:	83 c4 10             	add    esp,0x10
c000c51c:	83 c4 0c             	add    esp,0xc
c000c51f:	c3                   	ret    

c000c520 <int_handler>:
c000c520:	55                   	push   ebp
c000c521:	57                   	push   edi
c000c522:	56                   	push   esi
c000c523:	53                   	push   ebx
c000c524:	83 ec 0c             	sub    esp,0xc
c000c527:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c52e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c532:	74 0b                	je     c000c53f <int_handler+0x1f>
c000c534:	fa                   	cli    
c000c535:	f4                   	hlt    
c000c536:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c53d:	75 f5                	jne    c000c534 <int_handler+0x14>
c000c53f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c542:	8d 46 e0             	lea    eax,[esi-0x20]
c000c545:	83 f8 17             	cmp    eax,0x17
c000c548:	76 40                	jbe    c000c58a <int_handler+0x6a>
c000c54a:	c1 e6 04             	shl    esi,0x4
c000c54d:	31 db                	xor    ebx,ebx
c000c54f:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c555:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c55b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c55f:	85 c0                	test   eax,eax
c000c561:	74 13                	je     c000c576 <int_handler+0x56>
c000c563:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c567:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c56a:	74 2c                	je     c000c598 <int_handler+0x78>
c000c56c:	83 ec 08             	sub    esp,0x8
c000c56f:	52                   	push   edx
c000c570:	57                   	push   edi
c000c571:	ff d0                	call   eax
c000c573:	83 c4 10             	add    esp,0x10
c000c576:	83 c3 01             	add    ebx,0x1
c000c579:	83 fb 04             	cmp    ebx,0x4
c000c57c:	75 dd                	jne    c000c55b <int_handler+0x3b>
c000c57e:	83 c4 0c             	add    esp,0xc
c000c581:	31 c0                	xor    eax,eax
c000c583:	5b                   	pop    ebx
c000c584:	31 d2                	xor    edx,edx
c000c586:	5e                   	pop    esi
c000c587:	5f                   	pop    edi
c000c588:	5d                   	pop    ebp
c000c589:	c3                   	ret    
c000c58a:	83 ec 0c             	sub    esp,0xc
c000c58d:	50                   	push   eax
c000c58e:	e8 8b b0 00 00       	call   c001761e <HalEndOfInterrupt(int)>
c000c593:	83 c4 10             	add    esp,0x10
c000c596:	eb b2                	jmp    c000c54a <int_handler+0x2a>
c000c598:	83 ec 08             	sub    esp,0x8
c000c59b:	52                   	push   edx
c000c59c:	57                   	push   edi
c000c59d:	ff d0                	call   eax
c000c59f:	83 c4 10             	add    esp,0x10
c000c5a2:	83 c4 0c             	add    esp,0xc
c000c5a5:	5b                   	pop    ebx
c000c5a6:	5e                   	pop    esi
c000c5a7:	5f                   	pop    edi
c000c5a8:	5d                   	pop    ebp
c000c5a9:	c3                   	ret    

c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c5aa:	56                   	push   esi
c000c5ab:	31 c0                	xor    eax,eax
c000c5ad:	53                   	push   ebx
c000c5ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c5b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c5b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5ba:	89 ca                	mov    edx,ecx
c000c5bc:	c1 e2 04             	shl    edx,0x4
c000c5bf:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c5c7:	74 17                	je     c000c5e0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c5c9:	83 c0 01             	add    eax,0x1
c000c5cc:	83 f8 04             	cmp    eax,0x4
c000c5cf:	75 ee                	jne    c000c5bf <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c5d1:	c7 44 24 0c 44 0c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020c44
c000c5d9:	5b                   	pop    ebx
c000c5da:	5e                   	pop    esi
c000c5db:	e9 5d 45 00 00       	jmp    c0010b3d <KePanic(char const*)>
c000c5e0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c5e3:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c5ea:	5b                   	pop    ebx
c000c5eb:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c5f2:	5e                   	pop    esi
c000c5f3:	c3                   	ret    

c000c5f4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5f4:	55                   	push   ebp
c000c5f5:	57                   	push   edi
c000c5f6:	56                   	push   esi
c000c5f7:	53                   	push   ebx
c000c5f8:	83 ec 0c             	sub    esp,0xc
c000c5fb:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c601:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c605:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c609:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c610:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c613:	74 57                	je     c000c66c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c615:	84 c0                	test   al,al
c000c617:	89 c7                	mov    edi,eax
c000c619:	74 1d                	je     c000c638 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c61b:	83 fe 0f             	cmp    esi,0xf
c000c61e:	0f 8f d9 00 00 00    	jg     c000c6fd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c624:	0f b6 b6 68 27 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd898]
c000c62b:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c633:	d1 ef                	shr    edi,1
c000c635:	83 e7 01             	and    edi,0x1
c000c638:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c63d:	83 ec 08             	sub    esp,0x8
c000c640:	31 db                	xor    ebx,ebx
c000c642:	50                   	push   eax
c000c643:	68 51 0c 02 c0       	push   0xc0020c51
c000c648:	e8 ef e2 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000c64d:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c652:	83 c4 10             	add    esp,0x10
c000c655:	85 c0                	test   eax,eax
c000c657:	7f 59                	jg     c000c6b2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c659:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c65c:	83 ec 0c             	sub    esp,0xc
c000c65f:	68 68 0c 02 c0       	push   0xc0020c68
c000c664:	e8 d4 44 00 00       	call   c0010b3d <KePanic(char const*)>
c000c669:	83 c4 10             	add    esp,0x10
c000c66c:	89 e8                	mov    eax,ebp
c000c66e:	31 d2                	xor    edx,edx
c000c670:	c1 e0 04             	shl    eax,0x4
c000c673:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c67a:	85 c9                	test   ecx,ecx
c000c67c:	0f 84 92 00 00 00    	je     c000c714 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c682:	83 c2 01             	add    edx,0x1
c000c685:	83 fa 04             	cmp    edx,0x4
c000c688:	75 e9                	jne    c000c673 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c68a:	83 ec 0c             	sub    esp,0xc
c000c68d:	68 bc 0c 02 c0       	push   0xc0020cbc
c000c692:	e8 a6 44 00 00       	call   c0010b3d <KePanic(char const*)>
c000c697:	83 c4 10             	add    esp,0x10
c000c69a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c69f:	83 c4 0c             	add    esp,0xc
c000c6a2:	5b                   	pop    ebx
c000c6a3:	5e                   	pop    esi
c000c6a4:	5f                   	pop    edi
c000c6a5:	5d                   	pop    ebp
c000c6a6:	c3                   	ret    
c000c6a7:	83 c3 01             	add    ebx,0x1
c000c6aa:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c6b0:	7e a7                	jle    c000c659 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c6b2:	8b 2c 9d 80 8b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd7480]
c000c6b9:	83 ec 08             	sub    esp,0x8
c000c6bc:	56                   	push   esi
c000c6bd:	55                   	push   ebp
c000c6be:	e8 d1 16 01 00       	call   c001dd94 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c6c3:	83 c4 10             	add    esp,0x10
c000c6c6:	84 c0                	test   al,al
c000c6c8:	74 dd                	je     c000c6a7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c6ca:	89 f8                	mov    eax,edi
c000c6cc:	83 ec 04             	sub    esp,0x4
c000c6cf:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c6d6:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c6d9:	0f b6 f8             	movzx  edi,al
c000c6dc:	57                   	push   edi
c000c6dd:	89 e8                	mov    eax,ebp
c000c6df:	6a 00                	push   0x0
c000c6e1:	0f b6 c0             	movzx  eax,al
c000c6e4:	50                   	push   eax
c000c6e5:	89 f0                	mov    eax,esi
c000c6e7:	6a 00                	push   0x0
c000c6e9:	0f b6 c0             	movzx  eax,al
c000c6ec:	6a 00                	push   0x0
c000c6ee:	50                   	push   eax
c000c6ef:	53                   	push   ebx
c000c6f0:	e8 0b 18 01 00       	call   c001df00 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c6f5:	83 c4 20             	add    esp,0x20
c000c6f8:	e9 6f ff ff ff       	jmp    c000c66c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c6fd:	83 ec 0c             	sub    esp,0xc
c000c700:	31 ff                	xor    edi,edi
c000c702:	68 84 0c 02 c0       	push   0xc0020c84
c000c707:	e8 31 44 00 00       	call   c0010b3d <KePanic(char const*)>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	e9 24 ff ff ff       	jmp    c000c638 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c714:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c717:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c71b:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c722:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c726:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c72d:	83 c4 0c             	add    esp,0xc
c000c730:	89 f0                	mov    eax,esi
c000c732:	5b                   	pop    ebx
c000c733:	5e                   	pop    esi
c000c734:	5f                   	pop    edi
c000c735:	5d                   	pop    ebp
c000c736:	c3                   	ret    

c000c737 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c737:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c73b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c73f:	c1 e0 04             	shl    eax,0x4
c000c742:	8d 50 10             	lea    edx,[eax+0x10]
c000c745:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c74b:	74 08                	je     c000c755 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c74d:	83 c0 04             	add    eax,0x4
c000c750:	39 d0                	cmp    eax,edx
c000c752:	75 f1                	jne    c000c745 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c754:	c3                   	ret    
c000c755:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c75f:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c769:	eb e2                	jmp    c000c74d <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c76b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c76b:	56                   	push   esi
c000c76c:	53                   	push   ebx
c000c76d:	83 ec 04             	sub    esp,0x4
c000c770:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c775:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c779:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c77d:	74 0e                	je     c000c78d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c77f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c784:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c78b:	75 34                	jne    c000c7c1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000c78d:	8d 43 20             	lea    eax,[ebx+0x20]
c000c790:	c1 e0 04             	shl    eax,0x4
c000c793:	8d 50 10             	lea    edx,[eax+0x10]
c000c796:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c79c:	74 0d                	je     c000c7ab <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c79e:	83 c0 04             	add    eax,0x4
c000c7a1:	39 d0                	cmp    eax,edx
c000c7a3:	75 f1                	jne    c000c796 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c7a5:	83 c4 04             	add    esp,0x4
c000c7a8:	5b                   	pop    ebx
c000c7a9:	5e                   	pop    esi
c000c7aa:	c3                   	ret    
c000c7ab:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c7b5:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c7bf:	eb dd                	jmp    c000c79e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c7c1:	83 fb 0f             	cmp    ebx,0xf
c000c7c4:	7f 09                	jg     c000c7cf <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000c7c6:	0f b6 9b 68 27 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd898]
c000c7cd:	eb be                	jmp    c000c78d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c7cf:	83 ec 0c             	sub    esp,0xc
c000c7d2:	68 75 0c 02 c0       	push   0xc0020c75
c000c7d7:	e8 61 43 00 00       	call   c0010b3d <KePanic(char const*)>
c000c7dc:	83 c4 10             	add    esp,0x10
c000c7df:	eb ac                	jmp    c000c78d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c7e1 <setupINTS()>:
c000c7e1:	31 c0                	xor    eax,eax
c000c7e3:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c7ed:	83 c0 10             	add    eax,0x10
c000c7f0:	c7 80 b0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb050],0x0
c000c7fa:	c7 80 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda04c],0x0
c000c804:	c7 80 b4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb04c],0x0
c000c80e:	c7 80 b8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda048],0x0
c000c818:	c7 80 b8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb048],0x0
c000c822:	c7 80 bc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda044],0x0
c000c82c:	c7 80 bc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb044],0x0
c000c836:	3d 00 10 00 00       	cmp    eax,0x1000
c000c83b:	75 a6                	jne    c000c7e3 <setupINTS()+0x2>
c000c83d:	c3                   	ret    

c000c83e <convertLegacyIRQNumber(int)>:
c000c83e:	83 ec 0c             	sub    esp,0xc
c000c841:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c84b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c852:	74 0c                	je     c000c860 <convertLegacyIRQNumber(int)+0x22>
c000c854:	83 f8 0f             	cmp    eax,0xf
c000c857:	7f 0b                	jg     c000c864 <convertLegacyIRQNumber(int)+0x26>
c000c859:	0f b6 80 68 27 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd898]
c000c860:	83 c4 0c             	add    esp,0xc
c000c863:	c3                   	ret    
c000c864:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c868:	83 ec 0c             	sub    esp,0xc
c000c86b:	68 84 0c 02 c0       	push   0xc0020c84
c000c870:	e8 c8 42 00 00       	call   c0010b3d <KePanic(char const*)>
c000c875:	83 c4 10             	add    esp,0x10
c000c878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c87c:	83 c4 0c             	add    esp,0xc
c000c87f:	c3                   	ret    

c000c880 <startGUI(void*)>:
c000c880:	55                   	push   ebp
c000c881:	89 e5                	mov    ebp,esp
c000c883:	53                   	push   ebx
c000c884:	83 ec 04             	sub    esp,0x4
c000c887:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c88c:	83 e8 01             	sub    eax,0x1
c000c88f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c894:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c899:	85 c0                	test   eax,eax
c000c89b:	75 01                	jne    c000c89e <startGUI(void*)+0x1e>
c000c89d:	fb                   	sti    
c000c89e:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c8a4:	83 ec 08             	sub    esp,0x8
c000c8a7:	6a 01                	push   0x1
c000c8a9:	68 e1 0c 02 c0       	push   0xc0020ce1
c000c8ae:	e8 4d 80 00 00       	call   c0014900 <Thr::loadDLL(char const*, bool)>
c000c8b3:	83 c4 10             	add    esp,0x10
c000c8b6:	83 ec 08             	sub    esp,0x8
c000c8b9:	53                   	push   ebx
c000c8ba:	50                   	push   eax
c000c8bb:	e8 80 82 00 00       	call   c0014b40 <Thr::executeDLL(unsigned long, void*)>
c000c8c0:	83 c4 10             	add    esp,0x10
c000c8c3:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c8c9:	83 ec 08             	sub    esp,0x8
c000c8cc:	6a 01                	push   0x1
c000c8ce:	68 fb 0c 02 c0       	push   0xc0020cfb
c000c8d3:	e8 28 80 00 00       	call   c0014900 <Thr::loadDLL(char const*, bool)>
c000c8d8:	83 c4 10             	add    esp,0x10
c000c8db:	83 ec 08             	sub    esp,0x8
c000c8de:	53                   	push   ebx
c000c8df:	50                   	push   eax
c000c8e0:	e8 5b 82 00 00       	call   c0014b40 <Thr::executeDLL(unsigned long, void*)>
c000c8e5:	83 c4 10             	add    esp,0x10
c000c8e8:	90                   	nop
c000c8e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c8ec:	c9                   	leave  
c000c8ed:	c3                   	ret    

c000c8ee <startGUIVESA(void*)>:
c000c8ee:	55                   	push   ebp
c000c8ef:	89 e5                	mov    ebp,esp
c000c8f1:	53                   	push   ebx
c000c8f2:	83 ec 04             	sub    esp,0x4
c000c8f5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c8fa:	83 e8 01             	sub    eax,0x1
c000c8fd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c902:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c907:	85 c0                	test   eax,eax
c000c909:	75 01                	jne    c000c90c <startGUIVESA(void*)+0x1e>
c000c90b:	fb                   	sti    
c000c90c:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c912:	83 ec 08             	sub    esp,0x8
c000c915:	6a 01                	push   0x1
c000c917:	68 19 0d 02 c0       	push   0xc0020d19
c000c91c:	e8 df 7f 00 00       	call   c0014900 <Thr::loadDLL(char const*, bool)>
c000c921:	83 c4 10             	add    esp,0x10
c000c924:	83 ec 08             	sub    esp,0x8
c000c927:	53                   	push   ebx
c000c928:	50                   	push   eax
c000c929:	e8 12 82 00 00       	call   c0014b40 <Thr::executeDLL(unsigned long, void*)>
c000c92e:	83 c4 10             	add    esp,0x10
c000c931:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c937:	83 ec 08             	sub    esp,0x8
c000c93a:	6a 01                	push   0x1
c000c93c:	68 fb 0c 02 c0       	push   0xc0020cfb
c000c941:	e8 ba 7f 00 00       	call   c0014900 <Thr::loadDLL(char const*, bool)>
c000c946:	83 c4 10             	add    esp,0x10
c000c949:	83 ec 08             	sub    esp,0x8
c000c94c:	53                   	push   ebx
c000c94d:	50                   	push   eax
c000c94e:	e8 ed 81 00 00       	call   c0014b40 <Thr::executeDLL(unsigned long, void*)>
c000c953:	83 c4 10             	add    esp,0x10
c000c956:	90                   	nop
c000c957:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c95a:	c9                   	leave  
c000c95b:	c3                   	ret    

c000c95c <sendKeyToTerminal(unsigned char)>:
c000c95c:	55                   	push   ebp
c000c95d:	89 e5                	mov    ebp,esp
c000c95f:	83 ec 28             	sub    esp,0x28
c000c962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c965:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c968:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c96d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c971:	83 ec 08             	sub    esp,0x8
c000c974:	52                   	push   edx
c000c975:	50                   	push   eax
c000c976:	e8 33 c4 ff ff       	call   c0008dae <VgaText::receiveKey(unsigned char)>
c000c97b:	83 c4 10             	add    esp,0x10
c000c97e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c982:	83 f8 0a             	cmp    eax,0xa
c000c985:	74 16                	je     c000c99d <sendKeyToTerminal(unsigned char)+0x41>
c000c987:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c98b:	83 f8 03             	cmp    eax,0x3
c000c98e:	74 0d                	je     c000c99d <sendKeyToTerminal(unsigned char)+0x41>
c000c990:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c994:	83 f8 1c             	cmp    eax,0x1c
c000c997:	0f 85 97 00 00 00    	jne    c000ca34 <sendKeyToTerminal(unsigned char)+0xd8>
c000c99d:	fa                   	cli    
c000c99e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c9a3:	83 c0 01             	add    eax,0x1
c000c9a6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c9ab:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c9b0:	83 c0 01             	add    eax,0x1
c000c9b3:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c9b8:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c9bd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c9c0:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c9ca:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c9ce:	74 1f                	je     c000c9ef <sendKeyToTerminal(unsigned char)+0x93>
c000c9d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9d3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c9d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c9d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c9dc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c9df:	83 ec 0c             	sub    esp,0xc
c000c9e2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c9e5:	e8 7a 8e 00 00       	call   c0015864 <unblockTask(ThreadControlBlock*)>
c000c9ea:	83 c4 10             	add    esp,0x10
c000c9ed:	eb db                	jmp    c000c9ca <sendKeyToTerminal(unsigned char)+0x6e>
c000c9ef:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c9f4:	83 e8 01             	sub    eax,0x1
c000c9f7:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c9fc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000ca01:	85 c0                	test   eax,eax
c000ca03:	75 18                	jne    c000ca1d <sendKeyToTerminal(unsigned char)+0xc1>
c000ca05:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000ca0a:	85 c0                	test   eax,eax
c000ca0c:	74 0f                	je     c000ca1d <sendKeyToTerminal(unsigned char)+0xc1>
c000ca0e:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000ca18:	e8 4f 89 00 00       	call   c001536c <schedule()>
c000ca1d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ca22:	83 e8 01             	sub    eax,0x1
c000ca25:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000ca2a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ca2f:	85 c0                	test   eax,eax
c000ca31:	75 01                	jne    c000ca34 <sendKeyToTerminal(unsigned char)+0xd8>
c000ca33:	fb                   	sti    
c000ca34:	90                   	nop
c000ca35:	c9                   	leave  
c000ca36:	c3                   	ret    

c000ca37 <sendKeyboardToken(KeyboardToken)>:
c000ca37:	55                   	push   ebp
c000ca38:	89 e5                	mov    ebp,esp
c000ca3a:	83 ec 18             	sub    esp,0x18
c000ca3d:	e8 4b 41 00 00       	call   c0010b8d <KeUserIOReceived()>
c000ca42:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ca45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca48:	0f b7 c0             	movzx  eax,ax
c000ca4b:	83 f2 01             	xor    edx,0x1
c000ca4e:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000ca54:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000ca59:	85 c0                	test   eax,eax
c000ca5b:	74 24                	je     c000ca81 <sendKeyboardToken(KeyboardToken)+0x4a>
c000ca5d:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000ca63:	83 ec 04             	sub    esp,0x4
c000ca66:	68 e0 6f 02 c0       	push   0xc0026fe0
c000ca6b:	83 ec 08             	sub    esp,0x8
c000ca6e:	89 e0                	mov    eax,esp
c000ca70:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000ca73:	89 08                	mov    DWORD PTR [eax],ecx
c000ca75:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000ca78:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000ca7c:	ff d2                	call   edx
c000ca7e:	83 c4 10             	add    esp,0x10
c000ca81:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca85:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca88:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000ca8d:	0f b6 d2             	movzx  edx,dl
c000ca90:	0f b6 c0             	movzx  eax,al
c000ca93:	39 c2                	cmp    edx,eax
c000ca95:	74 1c                	je     c000cab3 <sendKeyboardToken(KeyboardToken)+0x7c>
c000ca97:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ca9a:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000ca9f:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000caa4:	0f b6 c0             	movzx  eax,al
c000caa7:	83 ec 0c             	sub    esp,0xc
c000caaa:	50                   	push   eax
c000caab:	e8 5a ba ff ff       	call   c000850a <setTerminalScrollLock(bool)>
c000cab0:	83 c4 10             	add    esp,0x10
c000cab3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000cab6:	0f b6 c0             	movzx  eax,al
c000cab9:	85 c0                	test   eax,eax
c000cabb:	0f 84 da 00 00 00    	je     c000cb9b <sendKeyboardToken(KeyboardToken)+0x164>
c000cac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac4:	0f b7 c0             	movzx  eax,ax
c000cac7:	3d 18 03 00 00       	cmp    eax,0x318
c000cacc:	75 06                	jne    c000cad4 <sendKeyboardToken(KeyboardToken)+0x9d>
c000cace:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000cad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad7:	0f b7 c0             	movzx  eax,ax
c000cada:	3d 19 03 00 00       	cmp    eax,0x319
c000cadf:	75 06                	jne    c000cae7 <sendKeyboardToken(KeyboardToken)+0xb0>
c000cae1:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000cae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caea:	0f b7 c0             	movzx  eax,ax
c000caed:	3d 1a 03 00 00       	cmp    eax,0x31a
c000caf2:	75 06                	jne    c000cafa <sendKeyboardToken(KeyboardToken)+0xc3>
c000caf4:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000cafa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cafd:	0f b7 c0             	movzx  eax,ax
c000cb00:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cb05:	75 06                	jne    c000cb0d <sendKeyboardToken(KeyboardToken)+0xd6>
c000cb07:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000cb0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb10:	0f b7 c0             	movzx  eax,ax
c000cb13:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cb18:	75 06                	jne    c000cb20 <sendKeyboardToken(KeyboardToken)+0xe9>
c000cb1a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000cb20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb23:	0f b7 c0             	movzx  eax,ax
c000cb26:	3d 1d 03 00 00       	cmp    eax,0x31d
c000cb2b:	75 06                	jne    c000cb33 <sendKeyboardToken(KeyboardToken)+0xfc>
c000cb2d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb36:	0f b7 c0             	movzx  eax,ax
c000cb39:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cb3e:	75 06                	jne    c000cb46 <sendKeyboardToken(KeyboardToken)+0x10f>
c000cb40:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cb46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb49:	0f b7 c0             	movzx  eax,ax
c000cb4c:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cb51:	75 06                	jne    c000cb59 <sendKeyboardToken(KeyboardToken)+0x122>
c000cb53:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cb59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb5c:	0f b7 c0             	movzx  eax,ax
c000cb5f:	3d 20 03 00 00       	cmp    eax,0x320
c000cb64:	75 06                	jne    c000cb6c <sendKeyboardToken(KeyboardToken)+0x135>
c000cb66:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cb6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb6f:	0f b7 c0             	movzx  eax,ax
c000cb72:	3d 21 03 00 00       	cmp    eax,0x321
c000cb77:	75 06                	jne    c000cb7f <sendKeyboardToken(KeyboardToken)+0x148>
c000cb79:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cb7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb82:	0f b7 c0             	movzx  eax,ax
c000cb85:	3d 22 03 00 00       	cmp    eax,0x322
c000cb8a:	0f 85 f1 00 00 00    	jne    c000cc81 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cb90:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cb96:	e9 e6 00 00 00       	jmp    c000cc81 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cb9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9e:	0f b7 c0             	movzx  eax,ax
c000cba1:	3d 18 03 00 00       	cmp    eax,0x318
c000cba6:	75 0a                	jne    c000cbb2 <sendKeyboardToken(KeyboardToken)+0x17b>
c000cba8:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cbae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb5:	0f b7 c0             	movzx  eax,ax
c000cbb8:	3d 19 03 00 00       	cmp    eax,0x319
c000cbbd:	75 0a                	jne    c000cbc9 <sendKeyboardToken(KeyboardToken)+0x192>
c000cbbf:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cbc5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbcc:	0f b7 c0             	movzx  eax,ax
c000cbcf:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cbd4:	75 0a                	jne    c000cbe0 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000cbd6:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cbdc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbe3:	0f b7 c0             	movzx  eax,ax
c000cbe6:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cbeb:	75 0a                	jne    c000cbf7 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000cbed:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cbf3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbfa:	0f b7 c0             	movzx  eax,ax
c000cbfd:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cc02:	75 0a                	jne    c000cc0e <sendKeyboardToken(KeyboardToken)+0x1d7>
c000cc04:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cc0a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc11:	0f b7 c0             	movzx  eax,ax
c000cc14:	3d 1d 03 00 00       	cmp    eax,0x31d
c000cc19:	75 0a                	jne    c000cc25 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000cc1b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cc21:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc28:	0f b7 c0             	movzx  eax,ax
c000cc2b:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cc30:	75 0a                	jne    c000cc3c <sendKeyboardToken(KeyboardToken)+0x205>
c000cc32:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cc38:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc3f:	0f b7 c0             	movzx  eax,ax
c000cc42:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cc47:	75 0a                	jne    c000cc53 <sendKeyboardToken(KeyboardToken)+0x21c>
c000cc49:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cc4f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc56:	0f b7 c0             	movzx  eax,ax
c000cc59:	3d 20 03 00 00       	cmp    eax,0x320
c000cc5e:	75 0a                	jne    c000cc6a <sendKeyboardToken(KeyboardToken)+0x233>
c000cc60:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cc66:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc6d:	0f b7 c0             	movzx  eax,ax
c000cc70:	3d 21 03 00 00       	cmp    eax,0x321
c000cc75:	75 0a                	jne    c000cc81 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cc77:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cc7d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc84:	0f b7 c0             	movzx  eax,ax
c000cc87:	3d 00 02 00 00       	cmp    eax,0x200
c000cc8c:	75 2f                	jne    c000ccbd <sendKeyboardToken(KeyboardToken)+0x286>
c000cc8e:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000cc93:	83 f0 01             	xor    eax,0x1
c000cc96:	0f b6 c0             	movzx  eax,al
c000cc99:	85 c0                	test   eax,eax
c000cc9b:	74 20                	je     c000ccbd <sendKeyboardToken(KeyboardToken)+0x286>
c000cc9d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000cca2:	6a 01                	push   0x1
c000cca4:	6a 00                	push   0x0
c000cca6:	68 80 c8 00 c0       	push   0xc000c880
c000ccab:	50                   	push   eax
c000ccac:	e8 6f 84 00 00       	call   c0015120 <Process::createThread(void (*)(void*), void*, int)>
c000ccb1:	83 c4 10             	add    esp,0x10
c000ccb4:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ccbb:	eb 3a                	jmp    c000ccf7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ccbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccc0:	0f b7 c0             	movzx  eax,ax
c000ccc3:	3d 01 02 00 00       	cmp    eax,0x201
c000ccc8:	75 2d                	jne    c000ccf7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ccca:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000cccf:	83 f0 01             	xor    eax,0x1
c000ccd2:	0f b6 c0             	movzx  eax,al
c000ccd5:	85 c0                	test   eax,eax
c000ccd7:	74 1e                	je     c000ccf7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ccd9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ccde:	6a 01                	push   0x1
c000cce0:	6a 00                	push   0x0
c000cce2:	68 ee c8 00 c0       	push   0xc000c8ee
c000cce7:	50                   	push   eax
c000cce8:	e8 33 84 00 00       	call   c0015120 <Process::createThread(void (*)(void*), void*, int)>
c000cced:	83 c4 10             	add    esp,0x10
c000ccf0:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ccf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccfa:	0f b7 c0             	movzx  eax,ax
c000ccfd:	3d 25 03 00 00       	cmp    eax,0x325
c000cd02:	75 06                	jne    c000cd0a <sendKeyboardToken(KeyboardToken)+0x2d3>
c000cd04:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cd0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd0d:	0f b7 c0             	movzx  eax,ax
c000cd10:	3d 24 03 00 00       	cmp    eax,0x324
c000cd15:	75 06                	jne    c000cd1d <sendKeyboardToken(KeyboardToken)+0x2e6>
c000cd17:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cd1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd20:	0f b7 c0             	movzx  eax,ax
c000cd23:	3d 23 03 00 00       	cmp    eax,0x323
c000cd28:	75 06                	jne    c000cd30 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000cd2a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cd30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd33:	0f b7 c0             	movzx  eax,ax
c000cd36:	3d 26 03 00 00       	cmp    eax,0x326
c000cd3b:	75 06                	jne    c000cd43 <sendKeyboardToken(KeyboardToken)+0x30c>
c000cd3d:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cd43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd46:	0f b7 c0             	movzx  eax,ax
c000cd49:	3d 27 03 00 00       	cmp    eax,0x327
c000cd4e:	75 06                	jne    c000cd56 <sendKeyboardToken(KeyboardToken)+0x31f>
c000cd50:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cd56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd59:	0f b7 c0             	movzx  eax,ax
c000cd5c:	3d 22 03 00 00       	cmp    eax,0x322
c000cd61:	75 06                	jne    c000cd69 <sendKeyboardToken(KeyboardToken)+0x332>
c000cd63:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cd69:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cd6d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd70:	83 f0 01             	xor    eax,0x1
c000cd73:	0f b6 c0             	movzx  eax,al
c000cd76:	85 c0                	test   eax,eax
c000cd78:	74 7c                	je     c000cdf6 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cd7a:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cd7f:	0f b6 c0             	movzx  eax,al
c000cd82:	85 c0                	test   eax,eax
c000cd84:	74 43                	je     c000cdc9 <sendKeyboardToken(KeyboardToken)+0x392>
c000cd86:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd8a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cd8e:	85 c0                	test   eax,eax
c000cd90:	74 2b                	je     c000cdbd <sendKeyboardToken(KeyboardToken)+0x386>
c000cd92:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cd98:	89 d0                	mov    eax,edx
c000cd9a:	c1 e0 02             	shl    eax,0x2
c000cd9d:	01 d0                	add    eax,edx
c000cd9f:	d1 e0                	shl    eax,1
c000cda1:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cda6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cda9:	0f b7 c0             	movzx  eax,ax
c000cdac:	8d 50 d0             	lea    edx,[eax-0x30]
c000cdaf:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cdb4:	01 d0                	add    eax,edx
c000cdb6:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cdbb:	eb 71                	jmp    c000ce2e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdbd:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cdc7:	eb 65                	jmp    c000ce2e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdc9:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cdce:	85 c0                	test   eax,eax
c000cdd0:	74 18                	je     c000cdea <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cdd2:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cdd7:	0f b6 c0             	movzx  eax,al
c000cdda:	83 ec 0c             	sub    esp,0xc
c000cddd:	50                   	push   eax
c000cdde:	e8 79 fb ff ff       	call   c000c95c <sendKeyToTerminal(unsigned char)>
c000cde3:	83 c4 10             	add    esp,0x10
c000cde6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cdea:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cdf4:	eb 38                	jmp    c000ce2e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdf9:	0f b7 c0             	movzx  eax,ax
c000cdfc:	3d 01 01 00 00       	cmp    eax,0x101
c000ce01:	75 2b                	jne    c000ce2e <sendKeyboardToken(KeyboardToken)+0x3f7>
c000ce03:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000ce08:	85 c0                	test   eax,eax
c000ce0a:	74 18                	je     c000ce24 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000ce0c:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000ce11:	0f b6 c0             	movzx  eax,al
c000ce14:	83 ec 0c             	sub    esp,0xc
c000ce17:	50                   	push   eax
c000ce18:	e8 3f fb ff ff       	call   c000c95c <sendKeyToTerminal(unsigned char)>
c000ce1d:	83 c4 10             	add    esp,0x10
c000ce20:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ce24:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000ce2e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ce31:	83 f0 01             	xor    eax,0x1
c000ce34:	0f b6 c0             	movzx  eax,al
c000ce37:	85 c0                	test   eax,eax
c000ce39:	74 5a                	je     c000ce95 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce3b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce3e:	83 f0 01             	xor    eax,0x1
c000ce41:	0f b6 c0             	movzx  eax,al
c000ce44:	85 c0                	test   eax,eax
c000ce46:	74 4d                	je     c000ce95 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce48:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000ce4d:	83 f0 01             	xor    eax,0x1
c000ce50:	0f b6 c0             	movzx  eax,al
c000ce53:	85 c0                	test   eax,eax
c000ce55:	74 3e                	je     c000ce95 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce5a:	0f b7 c0             	movzx  eax,ax
c000ce5d:	83 f8 1f             	cmp    eax,0x1f
c000ce60:	76 0b                	jbe    c000ce6d <sendKeyboardToken(KeyboardToken)+0x436>
c000ce62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce65:	0f b7 c0             	movzx  eax,ax
c000ce68:	83 f8 7e             	cmp    eax,0x7e
c000ce6b:	76 16                	jbe    c000ce83 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce70:	0f b7 c0             	movzx  eax,ax
c000ce73:	83 f8 0a             	cmp    eax,0xa
c000ce76:	74 0b                	je     c000ce83 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce7b:	0f b7 c0             	movzx  eax,ax
c000ce7e:	83 f8 08             	cmp    eax,0x8
c000ce81:	75 12                	jne    c000ce95 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce86:	0f b6 c0             	movzx  eax,al
c000ce89:	83 ec 0c             	sub    esp,0xc
c000ce8c:	50                   	push   eax
c000ce8d:	e8 ca fa ff ff       	call   c000c95c <sendKeyToTerminal(unsigned char)>
c000ce92:	83 c4 10             	add    esp,0x10
c000ce95:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ce98:	83 f0 01             	xor    eax,0x1
c000ce9b:	0f b6 c0             	movzx  eax,al
c000ce9e:	85 c0                	test   eax,eax
c000cea0:	74 5d                	je     c000ceff <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cea2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cea5:	83 f0 01             	xor    eax,0x1
c000cea8:	0f b6 c0             	movzx  eax,al
c000ceab:	85 c0                	test   eax,eax
c000cead:	74 50                	je     c000ceff <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ceaf:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000ceb4:	0f b6 c0             	movzx  eax,al
c000ceb7:	85 c0                	test   eax,eax
c000ceb9:	74 44                	je     c000ceff <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cebe:	0f b7 c0             	movzx  eax,ax
c000cec1:	83 f8 3f             	cmp    eax,0x3f
c000cec4:	76 39                	jbe    c000ceff <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cec9:	0f b7 c0             	movzx  eax,ax
c000cecc:	83 f8 7f             	cmp    eax,0x7f
c000cecf:	77 2e                	ja     c000ceff <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ced1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ced4:	88 c2                	mov    dl,al
c000ced6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ced9:	0f b7 c0             	movzx  eax,ax
c000cedc:	83 f8 5f             	cmp    eax,0x5f
c000cedf:	76 04                	jbe    c000cee5 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cee1:	b0 20                	mov    al,0x20
c000cee3:	eb 02                	jmp    c000cee7 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cee5:	b0 00                	mov    al,0x0
c000cee7:	89 d1                	mov    ecx,edx
c000cee9:	29 c1                	sub    ecx,eax
c000ceeb:	89 c8                	mov    eax,ecx
c000ceed:	83 e8 40             	sub    eax,0x40
c000cef0:	0f b6 c0             	movzx  eax,al
c000cef3:	83 ec 0c             	sub    esp,0xc
c000cef6:	50                   	push   eax
c000cef7:	e8 60 fa ff ff       	call   c000c95c <sendKeyToTerminal(unsigned char)>
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf02:	0f b7 c0             	movzx  eax,ax
c000cf05:	3d 00 03 00 00       	cmp    eax,0x300
c000cf0a:	75 12                	jne    c000cf1e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cf0c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cf0f:	83 f0 01             	xor    eax,0x1
c000cf12:	0f b6 c0             	movzx  eax,al
c000cf15:	85 c0                	test   eax,eax
c000cf17:	74 05                	je     c000cf1e <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cf19:	e8 ed b5 ff ff       	call   c000850b <doTerminalCycle()>
c000cf1e:	90                   	nop
c000cf1f:	c9                   	leave  
c000cf20:	c3                   	ret    

c000cf21 <clearInternalKeybuffer(VgaText*)>:
c000cf21:	55                   	push   ebp
c000cf22:	89 e5                	mov    ebp,esp
c000cf24:	83 ec 08             	sub    esp,0x8
c000cf27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf2a:	05 02 01 00 00       	add    eax,0x102
c000cf2f:	83 ec 0c             	sub    esp,0xc
c000cf32:	50                   	push   eax
c000cf33:	e8 48 36 ff ff       	call   c0000580 <strlen>
c000cf38:	83 c4 10             	add    esp,0x10
c000cf3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf3e:	81 c2 02 01 00 00    	add    edx,0x102
c000cf44:	83 ec 04             	sub    esp,0x4
c000cf47:	50                   	push   eax
c000cf48:	6a 00                	push   0x0
c000cf4a:	52                   	push   edx
c000cf4b:	e8 a0 35 ff ff       	call   c00004f0 <memset>
c000cf50:	83 c4 10             	add    esp,0x10
c000cf53:	90                   	nop
c000cf54:	c9                   	leave  
c000cf55:	c3                   	ret    

c000cf56 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cf56:	55                   	push   ebp
c000cf57:	89 e5                	mov    ebp,esp
c000cf59:	83 ec 18             	sub    esp,0x18
c000cf5c:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cf61:	85 c0                	test   eax,eax
c000cf63:	74 2a                	je     c000cf8f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cf65:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cf6b:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000cf71:	83 ec 04             	sub    esp,0x4
c000cf74:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cf79:	83 ec 08             	sub    esp,0x8
c000cf7c:	89 e0                	mov    eax,esp
c000cf7e:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000cf81:	89 08                	mov    DWORD PTR [eax],ecx
c000cf83:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000cf86:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000cf8a:	ff d2                	call   edx
c000cf8c:	83 c4 10             	add    esp,0x10
c000cf8f:	fb                   	sti    
c000cf90:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cf97:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cf9b:	0f 84 0d 01 00 00    	je     c000d0ae <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cfa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfa4:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cfaa:	0f be c0             	movsx  eax,al
c000cfad:	85 c0                	test   eax,eax
c000cfaf:	75 2c                	jne    c000cfdd <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cfb1:	fa                   	cli    
c000cfb2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cfb7:	83 c0 01             	add    eax,0x1
c000cfba:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cfbf:	e8 a8 83 00 00       	call   c001536c <schedule()>
c000cfc4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cfc9:	83 e8 01             	sub    eax,0x1
c000cfcc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cfd1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cfd6:	85 c0                	test   eax,eax
c000cfd8:	75 c7                	jne    c000cfa1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cfda:	fb                   	sti    
c000cfdb:	eb c4                	jmp    c000cfa1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cfdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cfe0:	8d 50 01             	lea    edx,[eax+0x1]
c000cfe3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfe6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cfe9:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cfef:	88 10                	mov    BYTE PTR [eax],dl
c000cff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cff4:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cffa:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cffd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d001:	83 f8 03             	cmp    eax,0x3
c000d004:	75 1e                	jne    c000d024 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d006:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d00b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d00d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d010:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d016:	83 ec 08             	sub    esp,0x8
c000d019:	6a 02                	push   0x2
c000d01b:	50                   	push   eax
c000d01c:	e8 ba 3f 00 00       	call   c0010fdb <KeRaiseSignal(SigHandlerBlock*, int)>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d028:	83 f8 1c             	cmp    eax,0x1c
c000d02b:	75 1e                	jne    c000d04b <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d02d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d032:	8b 00                	mov    eax,DWORD PTR [eax]
c000d034:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d037:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d03d:	83 ec 08             	sub    esp,0x8
c000d040:	6a 09                	push   0x9
c000d042:	50                   	push   eax
c000d043:	e8 93 3f 00 00       	call   c0010fdb <KeRaiseSignal(SigHandlerBlock*, int)>
c000d048:	83 c4 10             	add    esp,0x10
c000d04b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d04e:	05 02 01 00 00       	add    eax,0x102
c000d053:	83 ec 0c             	sub    esp,0xc
c000d056:	50                   	push   eax
c000d057:	e8 24 35 ff ff       	call   c0000580 <strlen>
c000d05c:	83 c4 10             	add    esp,0x10
c000d05f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d062:	81 c2 02 01 00 00    	add    edx,0x102
c000d068:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d06b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d06e:	81 c2 02 01 00 00    	add    edx,0x102
c000d074:	83 ec 04             	sub    esp,0x4
c000d077:	50                   	push   eax
c000d078:	51                   	push   ecx
c000d079:	52                   	push   edx
c000d07a:	e8 51 33 ff ff       	call   c00003d0 <memmove>
c000d07f:	83 c4 10             	add    esp,0x10
c000d082:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d086:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d08a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d08e:	83 f8 0a             	cmp    eax,0xa
c000d091:	74 16                	je     c000d0a9 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d093:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d097:	83 f8 03             	cmp    eax,0x3
c000d09a:	74 0d                	je     c000d0a9 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d09c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d0a0:	83 f8 1c             	cmp    eax,0x1c
c000d0a3:	0f 85 ee fe ff ff    	jne    c000cf97 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d0a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0ac:	eb 03                	jmp    c000d0b1 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d0ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0b1:	c9                   	leave  
c000d0b2:	c3                   	ret    
c000d0b3:	90                   	nop

c000d0b4 <Keyboard::Keyboard(char const*)>:
c000d0b4:	83 ec 0c             	sub    esp,0xc
c000d0b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0bb:	83 ec 08             	sub    esp,0x8
c000d0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0c2:	50                   	push   eax
c000d0c3:	e8 44 f1 ff ff       	call   c000c20c <Device::Device(char const*)>
c000d0c8:	83 c4 10             	add    esp,0x10
c000d0cb:	ba 3c 0d 02 c0       	mov    edx,0xc0020d3c
c000d0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0d4:	89 10                	mov    DWORD PTR [eax],edx
c000d0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0da:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d0e4:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000d0eb:	90                   	nop
c000d0ec:	83 c4 0c             	add    esp,0xc
c000d0ef:	c3                   	ret    

c000d0f0 <Keyboard::~Keyboard()>:
c000d0f0:	83 ec 0c             	sub    esp,0xc
c000d0f3:	ba 3c 0d 02 c0       	mov    edx,0xc0020d3c
c000d0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0fc:	89 10                	mov    DWORD PTR [eax],edx
c000d0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d102:	83 ec 0c             	sub    esp,0xc
c000d105:	50                   	push   eax
c000d106:	e8 6b ee ff ff       	call   c000bf76 <Device::~Device()>
c000d10b:	83 c4 10             	add    esp,0x10
c000d10e:	90                   	nop
c000d10f:	83 c4 0c             	add    esp,0xc
c000d112:	c3                   	ret    
c000d113:	90                   	nop

c000d114 <Keyboard::~Keyboard()>:
c000d114:	83 ec 0c             	sub    esp,0xc
c000d117:	83 ec 0c             	sub    esp,0xc
c000d11a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d11e:	e8 cd ff ff ff       	call   c000d0f0 <Keyboard::~Keyboard()>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	83 ec 08             	sub    esp,0x8
c000d129:	68 5c 01 00 00       	push   0x15c
c000d12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d132:	e8 07 d7 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000d137:	83 c4 10             	add    esp,0x10
c000d13a:	83 c4 0c             	add    esp,0xc
c000d13d:	c3                   	ret    

c000d13e <LogicalDisk::close(int, int, void*)>:
c000d13e:	83 c8 ff             	or     eax,0xffffffff
c000d141:	c3                   	ret    

c000d142 <LogicalDisk::~LogicalDisk()>:
c000d142:	83 ec 0c             	sub    esp,0xc
c000d145:	ba b4 0d 02 c0       	mov    edx,0xc0020db4
c000d14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d14e:	89 10                	mov    DWORD PTR [eax],edx
c000d150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d154:	83 ec 0c             	sub    esp,0xc
c000d157:	50                   	push   eax
c000d158:	e8 19 ee ff ff       	call   c000bf76 <Device::~Device()>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	90                   	nop
c000d161:	83 c4 0c             	add    esp,0xc
c000d164:	c3                   	ret    
c000d165:	90                   	nop

c000d166 <LogicalDisk::~LogicalDisk()>:
c000d166:	83 ec 0c             	sub    esp,0xc
c000d169:	83 ec 0c             	sub    esp,0xc
c000d16c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d170:	e8 cd ff ff ff       	call   c000d142 <LogicalDisk::~LogicalDisk()>
c000d175:	83 c4 10             	add    esp,0x10
c000d178:	83 ec 08             	sub    esp,0x8
c000d17b:	68 78 01 00 00       	push   0x178
c000d180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d184:	e8 b5 d6 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	83 c4 0c             	add    esp,0xc
c000d18f:	c3                   	ret    

c000d190 <LogicalDisk::open(int, int, void*)>:
c000d190:	83 ec 18             	sub    esp,0x18
c000d193:	68 68 0d 02 c0       	push   0xc0020d68
c000d198:	e8 a0 39 00 00       	call   c0010b3d <KePanic(char const*)>
c000d19d:	83 c8 ff             	or     eax,0xffffffff
c000d1a0:	83 c4 1c             	add    esp,0x1c
c000d1a3:	c3                   	ret    

c000d1a4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d1a4:	53                   	push   ebx
c000d1a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d1ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1b1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d1b7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d1bd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d1c3:	77 10                	ja     c000d1d5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d1c5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d1cb:	89 d3                	mov    ebx,edx
c000d1cd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d1d3:	72 05                	jb     c000d1da <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d1d5:	83 c8 ff             	or     eax,0xffffffff
c000d1d8:	89 c2                	mov    edx,eax
c000d1da:	5b                   	pop    ebx
c000d1db:	c3                   	ret    

c000d1dc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d1dc:	56                   	push   esi
c000d1dd:	83 c8 ff             	or     eax,0xffffffff
c000d1e0:	53                   	push   ebx
c000d1e1:	89 c2                	mov    edx,eax
c000d1e3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d1e7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d1eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d1ef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1f5:	77 27                	ja     c000d21e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d1f7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d1fd:	89 d8                	mov    eax,ebx
c000d1ff:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d205:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d20a:	89 c2                	mov    edx,eax
c000d20c:	73 10                	jae    c000d21e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d20e:	89 c8                	mov    eax,ecx
c000d210:	89 da                	mov    edx,ebx
c000d212:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d218:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d21e:	5b                   	pop    ebx
c000d21f:	5e                   	pop    esi
c000d220:	c3                   	ret    
c000d221:	90                   	nop

c000d222 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d222:	83 ec 1c             	sub    esp,0x1c
c000d225:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d229:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d22d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d235:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d239:	89 04 24             	mov    DWORD PTR [esp],eax
c000d23c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d240:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d248:	83 ec 08             	sub    esp,0x8
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	50                   	push   eax
c000d250:	e8 b7 ef ff ff       	call   c000c20c <Device::Device(char const*)>
c000d255:	83 c4 10             	add    esp,0x10
c000d258:	ba b4 0d 02 c0       	mov    edx,0xc0020db4
c000d25d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d261:	89 10                	mov    DWORD PTR [eax],edx
c000d263:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d267:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d272:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d27d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d288:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d292:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d29a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d29e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d2a4:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d2aa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d2ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d2b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d2b5:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d2bb:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d2c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d2c9:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d2cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2d3:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d2dd:	90                   	nop
c000d2de:	83 c4 1c             	add    esp,0x1c
c000d2e1:	c3                   	ret    

c000d2e2 <LogicalDisk::assignDriveLetter()>:
c000d2e2:	55                   	push   ebp
c000d2e3:	57                   	push   edi
c000d2e4:	56                   	push   esi
c000d2e5:	53                   	push   ebx
c000d2e6:	83 ec 14             	sub    esp,0x14
c000d2e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d2ed:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d2f3:	b0 41                	mov    al,0x41
c000d2f5:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d2fb:	84 d2                	test   dl,dl
c000d2fd:	75 02                	jne    c000d301 <LogicalDisk::assignDriveLetter()+0x1f>
c000d2ff:	b0 43                	mov    al,0x43
c000d301:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d307:	0f b6 ca             	movzx  ecx,dl
c000d30a:	0f be e8             	movsx  ebp,al
c000d30d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d311:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d315:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d31b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d31f:	3c 43                	cmp    al,0x43
c000d321:	75 10                	jne    c000d333 <LogicalDisk::assignDriveLetter()+0x51>
c000d323:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d32a:	75 5a                	jne    c000d386 <LogicalDisk::assignDriveLetter()+0xa4>
c000d32c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d331:	75 53                	jne    c000d386 <LogicalDisk::assignDriveLetter()+0xa4>
c000d333:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d336:	ba 01 00 00 00       	mov    edx,0x1
c000d33b:	89 34 24             	mov    DWORD PTR [esp],esi
c000d33e:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d341:	d3 e2                	shl    edx,cl
c000d343:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d347:	89 d7                	mov    edi,edx
c000d349:	89 d6                	mov    esi,edx
c000d34b:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d34f:	c1 ff 1f             	sar    edi,0x1f
c000d352:	21 f9                	and    ecx,edi
c000d354:	09 d1                	or     ecx,edx
c000d356:	75 2e                	jne    c000d386 <LogicalDisk::assignDriveLetter()+0xa4>
c000d358:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d35c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d360:	09 f2                	or     edx,esi
c000d362:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d365:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d36b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d36f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d375:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d37c:	09 fa                	or     edx,edi
c000d37e:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d384:	eb 0d                	jmp    c000d393 <LogicalDisk::assignDriveLetter()+0xb1>
c000d386:	8d 50 01             	lea    edx,[eax+0x1]
c000d389:	45                   	inc    ebp
c000d38a:	80 fa 5b             	cmp    dl,0x5b
c000d38d:	88 d0                	mov    al,dl
c000d38f:	75 8e                	jne    c000d31f <LogicalDisk::assignDriveLetter()+0x3d>
c000d391:	31 c0                	xor    eax,eax
c000d393:	83 c4 14             	add    esp,0x14
c000d396:	5b                   	pop    ebx
c000d397:	5e                   	pop    esi
c000d398:	5f                   	pop    edi
c000d399:	5d                   	pop    ebp
c000d39a:	c3                   	ret    
c000d39b:	90                   	nop

c000d39c <LogicalDisk::mount()>:
c000d39c:	56                   	push   esi
c000d39d:	53                   	push   ebx
c000d39e:	53                   	push   ebx
c000d39f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d3a3:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d3a9:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d3b3:	85 db                	test   ebx,ebx
c000d3b5:	74 27                	je     c000d3de <LogicalDisk::mount()+0x42>
c000d3b7:	51                   	push   ecx
c000d3b8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d3bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d3c1:	83 e8 41             	sub    eax,0x41
c000d3c4:	50                   	push   eax
c000d3c5:	56                   	push   esi
c000d3c6:	53                   	push   ebx
c000d3c7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	84 c0                	test   al,al
c000d3cf:	74 08                	je     c000d3d9 <LogicalDisk::mount()+0x3d>
c000d3d1:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d3d7:	eb 07                	jmp    c000d3e0 <LogicalDisk::mount()+0x44>
c000d3d9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d3dc:	eb d5                	jmp    c000d3b3 <LogicalDisk::mount()+0x17>
c000d3de:	31 c0                	xor    eax,eax
c000d3e0:	5a                   	pop    edx
c000d3e1:	5b                   	pop    ebx
c000d3e2:	5e                   	pop    esi
c000d3e3:	c3                   	ret    

c000d3e4 <LogicalDisk::unmount()>:
c000d3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3e8:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d3f2:	c3                   	ret    
c000d3f3:	90                   	nop

c000d3f4 <LogicalDisk::eject()>:
c000d3f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3f8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d3fe:	8b 10                	mov    edx,DWORD PTR [eax]
c000d400:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d404:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d407:	90                   	nop

c000d408 <LogicalDisk::unassignDriveLetter()>:
c000d408:	57                   	push   edi
c000d409:	56                   	push   esi
c000d40a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d40e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d415:	85 c9                	test   ecx,ecx
c000d417:	75 0f                	jne    c000d428 <LogicalDisk::unassignDriveLetter()+0x20>
c000d419:	c7 44 24 0c 8c 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020d8c
c000d421:	5e                   	pop    esi
c000d422:	5f                   	pop    edi
c000d423:	e9 15 37 00 00       	jmp    c0010b3d <KePanic(char const*)>
c000d428:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d42f:	83 e9 41             	sub    ecx,0x41
c000d432:	b8 01 00 00 00       	mov    eax,0x1
c000d437:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d442:	d3 e0                	shl    eax,cl
c000d444:	89 c7                	mov    edi,eax
c000d446:	f7 d0                	not    eax
c000d448:	c1 ff 1f             	sar    edi,0x1f
c000d44b:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d451:	89 fe                	mov    esi,edi
c000d453:	f7 d6                	not    esi
c000d455:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d45b:	5e                   	pop    esi
c000d45c:	5f                   	pop    edi
c000d45d:	c3                   	ret    

c000d45e <LogicalDisk::read(unsigned long long, int, void*)>:
c000d45e:	57                   	push   edi
c000d45f:	56                   	push   esi
c000d460:	53                   	push   ebx
c000d461:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d465:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d469:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d46d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d471:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d477:	77 41                	ja     c000d4ba <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d479:	99                   	cdq    
c000d47a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d480:	01 c8                	add    eax,ecx
c000d482:	11 da                	adc    edx,ebx
c000d484:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d48a:	19 d7                	sbb    edi,edx
c000d48c:	72 33                	jb     c000d4c1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d48e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d494:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d49a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d49e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d4a2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d4a8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d4ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4b2:	5b                   	pop    ebx
c000d4b3:	5e                   	pop    esi
c000d4b4:	5f                   	pop    edi
c000d4b5:	e9 d4 0a 00 00       	jmp    c000df8e <VCache::read(unsigned long long, int, void*)>
c000d4ba:	b8 05 00 00 00       	mov    eax,0x5
c000d4bf:	eb 05                	jmp    c000d4c6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d4c1:	b8 07 00 00 00       	mov    eax,0x7
c000d4c6:	5b                   	pop    ebx
c000d4c7:	5e                   	pop    esi
c000d4c8:	5f                   	pop    edi
c000d4c9:	c3                   	ret    

c000d4ca <LogicalDisk::write(unsigned long long, int, void*)>:
c000d4ca:	57                   	push   edi
c000d4cb:	56                   	push   esi
c000d4cc:	53                   	push   ebx
c000d4cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d4d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d4d5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d4d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d4dd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d4e3:	77 41                	ja     c000d526 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d4e5:	99                   	cdq    
c000d4e6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d4ec:	01 c8                	add    eax,ecx
c000d4ee:	11 da                	adc    edx,ebx
c000d4f0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d4f6:	19 d7                	sbb    edi,edx
c000d4f8:	72 33                	jb     c000d52d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d4fa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d500:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d506:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d50a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d50e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d514:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d51a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d51e:	5b                   	pop    ebx
c000d51f:	5e                   	pop    esi
c000d520:	5f                   	pop    edi
c000d521:	e9 6e 09 00 00       	jmp    c000de94 <VCache::write(unsigned long long, int, void*)>
c000d526:	b8 05 00 00 00       	mov    eax,0x5
c000d52b:	eb 05                	jmp    c000d532 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d52d:	b8 07 00 00 00       	mov    eax,0x7
c000d532:	5b                   	pop    ebx
c000d533:	5e                   	pop    esi
c000d534:	5f                   	pop    edi
c000d535:	c3                   	ret    
c000d536:	66 90                	xchg   ax,ax

c000d538 <Mouse::Mouse(char const*)>:
c000d538:	83 ec 0c             	sub    esp,0xc
c000d53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d53f:	83 ec 08             	sub    esp,0x8
c000d542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d546:	50                   	push   eax
c000d547:	e8 c0 ec ff ff       	call   c000c20c <Device::Device(char const*)>
c000d54c:	83 c4 10             	add    esp,0x10
c000d54f:	ba e0 0d 02 c0       	mov    edx,0xc0020de0
c000d554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d558:	89 10                	mov    DWORD PTR [eax],edx
c000d55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d55e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d568:	90                   	nop
c000d569:	83 c4 0c             	add    esp,0xc
c000d56c:	c3                   	ret    
c000d56d:	90                   	nop
c000d56e:	66 90                	xchg   ax,ax

c000d570 <Mouse::~Mouse()>:
c000d570:	83 ec 0c             	sub    esp,0xc
c000d573:	ba e0 0d 02 c0       	mov    edx,0xc0020de0
c000d578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d57c:	89 10                	mov    DWORD PTR [eax],edx
c000d57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d582:	83 ec 0c             	sub    esp,0xc
c000d585:	50                   	push   eax
c000d586:	e8 eb e9 ff ff       	call   c000bf76 <Device::~Device()>
c000d58b:	83 c4 10             	add    esp,0x10
c000d58e:	90                   	nop
c000d58f:	83 c4 0c             	add    esp,0xc
c000d592:	c3                   	ret    
c000d593:	90                   	nop

c000d594 <Mouse::~Mouse()>:
c000d594:	83 ec 0c             	sub    esp,0xc
c000d597:	83 ec 0c             	sub    esp,0xc
c000d59a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59e:	e8 cd ff ff ff       	call   c000d570 <Mouse::~Mouse()>
c000d5a3:	83 c4 10             	add    esp,0x10
c000d5a6:	83 ec 08             	sub    esp,0x8
c000d5a9:	68 58 01 00 00       	push   0x158
c000d5ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5b2:	e8 87 d2 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000d5b7:	83 c4 10             	add    esp,0x10
c000d5ba:	83 c4 0c             	add    esp,0xc
c000d5bd:	c3                   	ret    

c000d5be <NIC::getMAC()>:
c000d5be:	31 c0                	xor    eax,eax
c000d5c0:	31 d2                	xor    edx,edx
c000d5c2:	c3                   	ret    
c000d5c3:	90                   	nop

c000d5c4 <NIC::write(int, unsigned char*, int*)>:
c000d5c4:	b8 01 00 00 00       	mov    eax,0x1
c000d5c9:	c3                   	ret    

c000d5ca <NIC::NIC(char const*)>:
c000d5ca:	83 ec 0c             	sub    esp,0xc
c000d5cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d1:	83 ec 08             	sub    esp,0x8
c000d5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5d8:	50                   	push   eax
c000d5d9:	e8 2e ec ff ff       	call   c000c20c <Device::Device(char const*)>
c000d5de:	83 c4 10             	add    esp,0x10
c000d5e1:	ba 0c 0e 02 c0       	mov    edx,0xc0020e0c
c000d5e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5ea:	89 10                	mov    DWORD PTR [eax],edx
c000d5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d5fa:	90                   	nop
c000d5fb:	83 c4 0c             	add    esp,0xc
c000d5fe:	c3                   	ret    
c000d5ff:	90                   	nop

c000d600 <NIC::~NIC()>:
c000d600:	83 ec 0c             	sub    esp,0xc
c000d603:	ba 0c 0e 02 c0       	mov    edx,0xc0020e0c
c000d608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d60c:	89 10                	mov    DWORD PTR [eax],edx
c000d60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d612:	83 ec 0c             	sub    esp,0xc
c000d615:	50                   	push   eax
c000d616:	e8 5b e9 ff ff       	call   c000bf76 <Device::~Device()>
c000d61b:	83 c4 10             	add    esp,0x10
c000d61e:	90                   	nop
c000d61f:	83 c4 0c             	add    esp,0xc
c000d622:	c3                   	ret    
c000d623:	90                   	nop

c000d624 <NIC::~NIC()>:
c000d624:	83 ec 0c             	sub    esp,0xc
c000d627:	83 ec 0c             	sub    esp,0xc
c000d62a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d62e:	e8 cd ff ff ff       	call   c000d600 <NIC::~NIC()>
c000d633:	83 c4 10             	add    esp,0x10
c000d636:	83 ec 08             	sub    esp,0x8
c000d639:	68 58 01 00 00       	push   0x158
c000d63e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d642:	e8 f7 d1 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000d647:	83 c4 10             	add    esp,0x10
c000d64a:	83 c4 0c             	add    esp,0xc
c000d64d:	c3                   	ret    

c000d64e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d64e:	55                   	push   ebp
c000d64f:	57                   	push   edi
c000d650:	56                   	push   esi
c000d651:	53                   	push   ebx
c000d652:	81 ec 28 01 00 00    	sub    esp,0x128
c000d658:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d65f:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d666:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d66d:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d674:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d678:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d67c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d683:	e8 80 ec ff ff       	call   c000c308 <Device::getName()>
c000d688:	5a                   	pop    edx
c000d689:	59                   	pop    ecx
c000d68a:	50                   	push   eax
c000d68b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d68f:	55                   	push   ebp
c000d690:	e8 bb 2f ff ff       	call   c0000650 <strcpy>
c000d695:	5b                   	pop    ebx
c000d696:	58                   	pop    eax
c000d697:	68 38 0e 02 c0       	push   0xc0020e38
c000d69c:	55                   	push   ebp
c000d69d:	e8 ce 31 ff ff       	call   c0000870 <strcat>
c000d6a2:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d6a9:	e8 1d a4 ff ff       	call   c0007acb <malloc>
c000d6ae:	83 c4 0c             	add    esp,0xc
c000d6b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d6b5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d6b9:	89 c3                	mov    ebx,eax
c000d6bb:	57                   	push   edi
c000d6bc:	56                   	push   esi
c000d6bd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d6c4:	55                   	push   ebp
c000d6c5:	50                   	push   eax
c000d6c6:	e8 57 fb ff ff       	call   c000d222 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6cb:	83 c4 14             	add    esp,0x14
c000d6ce:	53                   	push   ebx
c000d6cf:	e8 0e fc ff ff       	call   c000d2e2 <LogicalDisk::assignDriveLetter()>
c000d6d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d6d7:	e8 c0 fc ff ff       	call   c000d39c <LogicalDisk::mount()>
c000d6dc:	58                   	pop    eax
c000d6dd:	5a                   	pop    edx
c000d6de:	53                   	push   ebx
c000d6df:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d6e6:	e8 89 e9 ff ff       	call   c000c074 <Device::addChild(Device*)>
c000d6eb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d6f1:	5b                   	pop    ebx
c000d6f2:	5e                   	pop    esi
c000d6f3:	5f                   	pop    edi
c000d6f4:	5d                   	pop    ebp
c000d6f5:	c3                   	ret    

c000d6f6 <createPartitionsForDisk(PhysicalDisk*)>:
c000d6f6:	55                   	push   ebp
c000d6f7:	57                   	push   edi
c000d6f8:	56                   	push   esi
c000d6f9:	53                   	push   ebx
c000d6fa:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d700:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d707:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d70d:	3d 00 02 00 00       	cmp    eax,0x200
c000d712:	74 27                	je     c000d73b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d714:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d71a:	83 ec 10             	sub    esp,0x10
c000d71d:	99                   	cdq    
c000d71e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d724:	52                   	push   edx
c000d725:	50                   	push   eax
c000d726:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d72a:	c1 e6 0a             	shl    esi,0xa
c000d72d:	89 fd                	mov    ebp,edi
c000d72f:	55                   	push   ebp
c000d730:	56                   	push   esi
c000d731:	e8 7a 12 01 00       	call   c001e9b0 <__udivdi3>
c000d736:	e9 b9 00 00 00       	jmp    c000d7f4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d73b:	83 ec 0c             	sub    esp,0xc
c000d73e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d740:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d744:	56                   	push   esi
c000d745:	6a 01                	push   0x1
c000d747:	6a 00                	push   0x0
c000d749:	6a 00                	push   0x0
c000d74b:	53                   	push   ebx
c000d74c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d74f:	83 c4 20             	add    esp,0x20
c000d752:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d75a:	75 0a                	jne    c000d766 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d75c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d764:	74 2c                	je     c000d792 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d766:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d76c:	83 ec 10             	sub    esp,0x10
c000d76f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d775:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d77b:	89 f7                	mov    edi,esi
c000d77d:	c1 ff 1f             	sar    edi,0x1f
c000d780:	57                   	push   edi
c000d781:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d785:	56                   	push   esi
c000d786:	c1 e0 0a             	shl    eax,0xa
c000d789:	52                   	push   edx
c000d78a:	50                   	push   eax
c000d78b:	e8 20 12 01 00       	call   c001e9b0 <__udivdi3>
c000d790:	eb 62                	jmp    c000d7f4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d792:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d799:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d7a0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d7a7:	89 cf                	mov    edi,ecx
c000d7a9:	83 e2 7f             	and    edx,0x7f
c000d7ac:	83 e7 7f             	and    edi,0x7f
c000d7af:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d7b2:	83 e0 7f             	and    eax,0x7f
c000d7b5:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d7b8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d7bf:	83 e0 7f             	and    eax,0x7f
c000d7c2:	01 d0                	add    eax,edx
c000d7c4:	84 c0                	test   al,al
c000d7c6:	89 c5                	mov    ebp,eax
c000d7c8:	74 41                	je     c000d80b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d7ca:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d7d0:	83 ec 10             	sub    esp,0x10
c000d7d3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d7d9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d7df:	89 f7                	mov    edi,esi
c000d7e1:	c1 ff 1f             	sar    edi,0x1f
c000d7e4:	57                   	push   edi
c000d7e5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d7e9:	56                   	push   esi
c000d7ea:	c1 e0 0a             	shl    eax,0xa
c000d7ed:	52                   	push   edx
c000d7ee:	50                   	push   eax
c000d7ef:	e8 bc 11 01 00       	call   c001e9b0 <__udivdi3>
c000d7f4:	83 c4 14             	add    esp,0x14
c000d7f7:	52                   	push   edx
c000d7f8:	50                   	push   eax
c000d7f9:	6a 00                	push   0x0
c000d7fb:	6a 00                	push   0x0
c000d7fd:	53                   	push   ebx
c000d7fe:	e8 4b fe ff ff       	call   c000d64e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d803:	83 c4 20             	add    esp,0x20
c000d806:	e9 73 01 00 00       	jmp    c000d97e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d80b:	89 f0                	mov    eax,esi
c000d80d:	31 c9                	xor    ecx,ecx
c000d80f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d816:	75 02                	jne    c000d81a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d818:	89 cd                	mov    ebp,ecx
c000d81a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d822:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d829:	83 c0 10             	add    eax,0x10
c000d82c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d834:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000d83b:	c1 e2 08             	shl    edx,0x8
c000d83e:	c1 e6 10             	shl    esi,0x10
c000d841:	09 f2                	or     edx,esi
c000d843:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d84a:	09 f2                	or     edx,esi
c000d84c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d853:	c1 e6 18             	shl    esi,0x18
c000d856:	09 f2                	or     edx,esi
c000d858:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d85f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d863:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d86a:	c1 e6 10             	shl    esi,0x10
c000d86d:	c1 e2 08             	shl    edx,0x8
c000d870:	09 f2                	or     edx,esi
c000d872:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d879:	09 f2                	or     edx,esi
c000d87b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d882:	c1 e6 18             	shl    esi,0x18
c000d885:	09 f2                	or     edx,esi
c000d887:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d88b:	41                   	inc    ecx
c000d88c:	83 f9 04             	cmp    ecx,0x4
c000d88f:	0f 85 7a ff ff ff    	jne    c000d80f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d899:	83 f0 01             	xor    eax,0x1
c000d89c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d8a0:	75 4f                	jne    c000d8f1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d8a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8a6:	83 f0 01             	xor    eax,0x1
c000d8a9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d8ad:	75 42                	jne    c000d8f1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d8af:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d8b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d8bd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d8c3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d8cb:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d8d1:	89 f7                	mov    edi,esi
c000d8d3:	c1 ff 1f             	sar    edi,0x1f
c000d8d6:	57                   	push   edi
c000d8d7:	56                   	push   esi
c000d8d8:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d8dc:	52                   	push   edx
c000d8dd:	c1 e0 0a             	shl    eax,0xa
c000d8e0:	50                   	push   eax
c000d8e1:	e8 ca 10 01 00       	call   c001e9b0 <__udivdi3>
c000d8e6:	83 c4 10             	add    esp,0x10
c000d8e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8ed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f1:	89 e8                	mov    eax,ebp
c000d8f3:	0f b6 e8             	movzx  ebp,al
c000d8f6:	85 ed                	test   ebp,ebp
c000d8f8:	74 50                	je     c000d94a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d8fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8fe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d902:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d906:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d90a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d90e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d912:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d916:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d91a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d91e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d922:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d926:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d92a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d92e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d932:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d936:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d93a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d93e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d942:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d946:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d94a:	31 ed                	xor    ebp,ebp
c000d94c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d950:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d954:	89 f8                	mov    eax,edi
c000d956:	09 f0                	or     eax,esi
c000d958:	74 1e                	je     c000d978 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d95a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d95e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d962:	89 d1                	mov    ecx,edx
c000d964:	09 c1                	or     ecx,eax
c000d966:	74 10                	je     c000d978 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	57                   	push   edi
c000d96c:	56                   	push   esi
c000d96d:	52                   	push   edx
c000d96e:	50                   	push   eax
c000d96f:	53                   	push   ebx
c000d970:	e8 d9 fc ff ff       	call   c000d64e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d975:	83 c4 20             	add    esp,0x20
c000d978:	45                   	inc    ebp
c000d979:	83 fd 04             	cmp    ebp,0x4
c000d97c:	75 ce                	jne    c000d94c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d97e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d984:	5b                   	pop    ebx
c000d985:	5e                   	pop    esi
c000d986:	5f                   	pop    edi
c000d987:	5d                   	pop    ebp
c000d988:	c3                   	ret    
c000d989:	66 90                	xchg   ax,ax
c000d98b:	90                   	nop

c000d98c <Serial::Serial(char const*)>:
c000d98c:	83 ec 0c             	sub    esp,0xc
c000d98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d993:	83 ec 08             	sub    esp,0x8
c000d996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d99a:	50                   	push   eax
c000d99b:	e8 6c e8 ff ff       	call   c000c20c <Device::Device(char const*)>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	ba 4c 0e 02 c0       	mov    edx,0xc0020e4c
c000d9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ac:	89 10                	mov    DWORD PTR [eax],edx
c000d9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9b2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d9bc:	90                   	nop
c000d9bd:	83 c4 0c             	add    esp,0xc
c000d9c0:	c3                   	ret    
c000d9c1:	90                   	nop
c000d9c2:	66 90                	xchg   ax,ax

c000d9c4 <Serial::~Serial()>:
c000d9c4:	83 ec 0c             	sub    esp,0xc
c000d9c7:	ba 4c 0e 02 c0       	mov    edx,0xc0020e4c
c000d9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9d0:	89 10                	mov    DWORD PTR [eax],edx
c000d9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9d6:	83 ec 0c             	sub    esp,0xc
c000d9d9:	50                   	push   eax
c000d9da:	e8 97 e5 ff ff       	call   c000bf76 <Device::~Device()>
c000d9df:	83 c4 10             	add    esp,0x10
c000d9e2:	90                   	nop
c000d9e3:	83 c4 0c             	add    esp,0xc
c000d9e6:	c3                   	ret    
c000d9e7:	90                   	nop

c000d9e8 <Serial::~Serial()>:
c000d9e8:	83 ec 0c             	sub    esp,0xc
c000d9eb:	83 ec 0c             	sub    esp,0xc
c000d9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9f2:	e8 cd ff ff ff       	call   c000d9c4 <Serial::~Serial()>
c000d9f7:	83 c4 10             	add    esp,0x10
c000d9fa:	83 ec 08             	sub    esp,0x8
c000d9fd:	68 58 01 00 00       	push   0x158
c000da02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da06:	e8 33 ce ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	83 c4 0c             	add    esp,0xc
c000da11:	c3                   	ret    
c000da12:	66 90                	xchg   ax,ax

c000da14 <Timer::Timer(char const*)>:
c000da14:	83 ec 0c             	sub    esp,0xc
c000da17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da1b:	83 ec 08             	sub    esp,0x8
c000da1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da22:	50                   	push   eax
c000da23:	e8 e4 e7 ff ff       	call   c000c20c <Device::Device(char const*)>
c000da28:	83 c4 10             	add    esp,0x10
c000da2b:	ba 90 0e 02 c0       	mov    edx,0xc0020e90
c000da30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da34:	89 10                	mov    DWORD PTR [eax],edx
c000da36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da3a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000da44:	90                   	nop
c000da45:	83 c4 0c             	add    esp,0xc
c000da48:	c3                   	ret    
c000da49:	90                   	nop
c000da4a:	66 90                	xchg   ax,ax

c000da4c <Timer::~Timer()>:
c000da4c:	83 ec 0c             	sub    esp,0xc
c000da4f:	ba 90 0e 02 c0       	mov    edx,0xc0020e90
c000da54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da58:	89 10                	mov    DWORD PTR [eax],edx
c000da5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da5e:	83 ec 0c             	sub    esp,0xc
c000da61:	50                   	push   eax
c000da62:	e8 0f e5 ff ff       	call   c000bf76 <Device::~Device()>
c000da67:	83 c4 10             	add    esp,0x10
c000da6a:	90                   	nop
c000da6b:	83 c4 0c             	add    esp,0xc
c000da6e:	c3                   	ret    
c000da6f:	90                   	nop

c000da70 <Timer::~Timer()>:
c000da70:	83 ec 0c             	sub    esp,0xc
c000da73:	83 ec 0c             	sub    esp,0xc
c000da76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da7a:	e8 cd ff ff ff       	call   c000da4c <Timer::~Timer()>
c000da7f:	83 c4 10             	add    esp,0x10
c000da82:	83 ec 08             	sub    esp,0x8
c000da85:	68 5c 01 00 00       	push   0x15c
c000da8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da8e:	e8 ab cd ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000da93:	83 c4 10             	add    esp,0x10
c000da96:	83 c4 0c             	add    esp,0xc
c000da99:	c3                   	ret    

c000da9a <Timer::read()>:
c000da9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000daa4:	c3                   	ret    

c000daa5 <setupTimer(int)>:
c000daa5:	53                   	push   ebx
c000daa6:	83 ec 14             	sub    esp,0x14
c000daa9:	68 5c 01 00 00       	push   0x15c
c000daae:	e8 18 a0 ff ff       	call   c0007acb <malloc>
c000dab3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dab6:	89 c3                	mov    ebx,eax
c000dab8:	e8 5f 07 01 00       	call   c001e21c <PIT::PIT()>
c000dabd:	58                   	pop    eax
c000dabe:	5a                   	pop    edx
c000dabf:	53                   	push   ebx
c000dac0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000dac6:	e8 a9 e5 ff ff       	call   c000c074 <Device::addChild(Device*)>
c000dacb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dacd:	6a 00                	push   0x0
c000dacf:	6a 00                	push   0x0
c000dad1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dad5:	53                   	push   ebx
c000dad6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dad9:	83 c4 28             	add    esp,0x28
c000dadc:	89 d8                	mov    eax,ebx
c000dade:	5b                   	pop    ebx
c000dadf:	c3                   	ret    

c000dae0 <timerHandler(unsigned int)>:
c000dae0:	56                   	push   esi
c000dae1:	53                   	push   ebx
c000dae2:	51                   	push   ecx
c000dae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae7:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000daed:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000daf4:	0f 84 4a 01 00 00    	je     c000dc44 <timerHandler(unsigned int)+0x164>
c000dafa:	fa                   	cli    
c000dafb:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000db01:	83 ec 0c             	sub    esp,0xc
c000db04:	68 78 81 02 c0       	push   0xc0028178
c000db09:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000db0f:	e8 6c 14 01 00       	call   c001ef80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000db14:	83 c4 10             	add    esp,0x10
c000db17:	84 c0                	test   al,al
c000db19:	0f 85 a1 00 00 00    	jne    c000dbc0 <timerHandler(unsigned int)+0xe0>
c000db1f:	83 ec 0c             	sub    esp,0xc
c000db22:	68 78 81 02 c0       	push   0xc0028178
c000db27:	e8 70 14 01 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db2c:	83 c4 10             	add    esp,0x10
c000db2f:	89 c6                	mov    esi,eax
c000db31:	8d 76 00             	lea    esi,[esi+0x0]
c000db34:	83 ec 0c             	sub    esp,0xc
c000db37:	68 78 81 02 c0       	push   0xc0028178
c000db3c:	e8 5b 14 01 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db41:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000db48:	89 c3                	mov    ebx,eax
c000db4a:	e8 55 14 01 00       	call   c001efa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000db4f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000db52:	83 c4 10             	add    esp,0x10
c000db55:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000db5b:	77 23                	ja     c000db80 <timerHandler(unsigned int)+0xa0>
c000db5d:	83 ec 0c             	sub    esp,0xc
c000db60:	53                   	push   ebx
c000db61:	e8 fe 7c 00 00       	call   c0015864 <unblockTask(ThreadControlBlock*)>
c000db66:	83 c4 10             	add    esp,0x10
c000db69:	39 de                	cmp    esi,ebx
c000db6b:	75 27                	jne    c000db94 <timerHandler(unsigned int)+0xb4>
c000db6d:	83 ec 0c             	sub    esp,0xc
c000db70:	68 78 81 02 c0       	push   0xc0028178
c000db75:	e8 22 14 01 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db7a:	89 c6                	mov    esi,eax
c000db7c:	eb 12                	jmp    c000db90 <timerHandler(unsigned int)+0xb0>
c000db7e:	66 90                	xchg   ax,ax
c000db80:	52                   	push   edx
c000db81:	52                   	push   edx
c000db82:	53                   	push   ebx
c000db83:	68 78 81 02 c0       	push   0xc0028178
c000db88:	e8 d3 14 01 00       	call   c001f060 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000db8d:	8d 76 00             	lea    esi,[esi+0x0]
c000db90:	83 c4 10             	add    esp,0x10
c000db93:	90                   	nop
c000db94:	83 ec 0c             	sub    esp,0xc
c000db97:	68 78 81 02 c0       	push   0xc0028178
c000db9c:	e8 df 13 01 00       	call   c001ef80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000dba1:	83 c4 10             	add    esp,0x10
c000dba4:	84 c0                	test   al,al
c000dba6:	75 18                	jne    c000dbc0 <timerHandler(unsigned int)+0xe0>
c000dba8:	83 ec 0c             	sub    esp,0xc
c000dbab:	68 78 81 02 c0       	push   0xc0028178
c000dbb0:	e8 e7 13 01 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000dbb5:	83 c4 10             	add    esp,0x10
c000dbb8:	39 f0                	cmp    eax,esi
c000dbba:	0f 85 74 ff ff ff    	jne    c000db34 <timerHandler(unsigned int)+0x54>
c000dbc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dbc5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000dbc9:	74 41                	je     c000dc0c <timerHandler(unsigned int)+0x12c>
c000dbcb:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000dbd2:	74 38                	je     c000dc0c <timerHandler(unsigned int)+0x12c>
c000dbd4:	fa                   	cli    
c000dbd5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000dbdb:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000dbe0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dbe6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000dbe9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dbef:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000dbf2:	72 08                	jb     c000dbfc <timerHandler(unsigned int)+0x11c>
c000dbf4:	e8 73 77 00 00       	call   c001536c <schedule()>
c000dbf9:	8d 76 00             	lea    esi,[esi+0x0]
c000dbfc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000dc01:	48                   	dec    eax
c000dc02:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000dc07:	75 03                	jne    c000dc0c <timerHandler(unsigned int)+0x12c>
c000dc09:	fb                   	sti    
c000dc0a:	66 90                	xchg   ax,ax
c000dc0c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000dc11:	48                   	dec    eax
c000dc12:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000dc17:	75 1b                	jne    c000dc34 <timerHandler(unsigned int)+0x154>
c000dc19:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000dc20:	74 12                	je     c000dc34 <timerHandler(unsigned int)+0x154>
c000dc22:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000dc2c:	e8 3b 77 00 00       	call   c001536c <schedule()>
c000dc31:	8d 76 00             	lea    esi,[esi+0x0]
c000dc34:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000dc39:	48                   	dec    eax
c000dc3a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000dc3f:	75 03                	jne    c000dc44 <timerHandler(unsigned int)+0x164>
c000dc41:	fb                   	sti    
c000dc42:	66 90                	xchg   ax,ax
c000dc44:	58                   	pop    eax
c000dc45:	5b                   	pop    ebx
c000dc46:	5e                   	pop    esi
c000dc47:	c3                   	ret    

c000dc48 <VCache::VCache(PhysicalDisk*)>:
c000dc48:	53                   	push   ebx
c000dc49:	83 ec 18             	sub    esp,0x18
c000dc4c:	ba c0 0e 02 c0       	mov    edx,0xc0020ec0
c000dc51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc55:	89 10                	mov    DWORD PTR [eax],edx
c000dc57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000dc62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc66:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000dc6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc71:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000dc78:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000dc7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc83:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000dc8a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000dc91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc95:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000dc9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000dcaf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000dcb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcba:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dcbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcc2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000dcc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcca:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dcce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dcd9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dce1:	83 ec 0c             	sub    esp,0xc
c000dce4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dce8:	e8 de 9d ff ff       	call   c0007acb <malloc>
c000dced:	83 c4 10             	add    esp,0x10
c000dcf0:	89 c3                	mov    ebx,eax
c000dcf2:	83 ec 0c             	sub    esp,0xc
c000dcf5:	53                   	push   ebx
c000dcf6:	e8 11 74 00 00       	call   c001510c <Mutex::Mutex()>
c000dcfb:	83 c4 10             	add    esp,0x10
c000dcfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd02:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dd05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd09:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dd0d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dd10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd14:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dd1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd1f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dd25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd29:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd30:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dd36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dd3c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd40:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dd43:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dd46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd4a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dd4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd52:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dd58:	05 00 02 00 00       	add    eax,0x200
c000dd5d:	c1 e0 03             	shl    eax,0x3
c000dd60:	83 ec 0c             	sub    esp,0xc
c000dd63:	50                   	push   eax
c000dd64:	e8 62 9d ff ff       	call   c0007acb <malloc>
c000dd69:	83 c4 10             	add    esp,0x10
c000dd6c:	89 c2                	mov    edx,eax
c000dd6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd72:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dd75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd79:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dd80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd84:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dd88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd8c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dd92:	89 d0                	mov    eax,edx
c000dd94:	c1 e0 02             	shl    eax,0x2
c000dd97:	01 d0                	add    eax,edx
c000dd99:	c1 e0 04             	shl    eax,0x4
c000dd9c:	83 ec 0c             	sub    esp,0xc
c000dd9f:	50                   	push   eax
c000dda0:	e8 26 9d ff ff       	call   c0007acb <malloc>
c000dda5:	83 c4 10             	add    esp,0x10
c000dda8:	89 c2                	mov    edx,eax
c000ddaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddae:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ddb1:	90                   	nop
c000ddb2:	83 c4 18             	add    esp,0x18
c000ddb5:	5b                   	pop    ebx
c000ddb6:	c3                   	ret    
c000ddb7:	90                   	nop

c000ddb8 <VCache::invalidateReadBuffer()>:
c000ddb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddbc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000ddc2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000ddc6:	c3                   	ret    
c000ddc7:	90                   	nop

c000ddc8 <VCache::writeWriteBuffer()>:
c000ddc8:	53                   	push   ebx
c000ddc9:	83 ec 08             	sub    esp,0x8
c000ddcc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ddd0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ddd4:	74 1e                	je     c000ddf4 <VCache::writeWriteBuffer()+0x2c>
c000ddd6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ddd9:	83 ec 0c             	sub    esp,0xc
c000dddc:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddde:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dde1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dde4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000dde7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ddea:	50                   	push   eax
c000ddeb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ddee:	83 c4 20             	add    esp,0x20
c000ddf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ddfb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000de02:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000de06:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000de0d:	83 c4 08             	add    esp,0x8
c000de10:	5b                   	pop    ebx
c000de11:	c3                   	ret    
c000de12:	66 90                	xchg   ax,ax

c000de14 <VCache::~VCache()>:
c000de14:	83 ec 0c             	sub    esp,0xc
c000de17:	ba c0 0e 02 c0       	mov    edx,0xc0020ec0
c000de1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de20:	89 10                	mov    DWORD PTR [eax],edx
c000de22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de26:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000de29:	0f b6 c0             	movzx  eax,al
c000de2c:	85 c0                	test   eax,eax
c000de2e:	74 10                	je     c000de40 <VCache::~VCache()+0x2c>
c000de30:	83 ec 0c             	sub    esp,0xc
c000de33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de37:	e8 8c ff ff ff       	call   c000ddc8 <VCache::writeWriteBuffer()>
c000de3c:	83 c4 10             	add    esp,0x10
c000de3f:	90                   	nop
c000de40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de44:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de47:	83 ec 0c             	sub    esp,0xc
c000de4a:	50                   	push   eax
c000de4b:	e8 8b 9c ff ff       	call   c0007adb <free>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de57:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000de5a:	83 ec 0c             	sub    esp,0xc
c000de5d:	50                   	push   eax
c000de5e:	e8 78 9c ff ff       	call   c0007adb <free>
c000de63:	83 c4 10             	add    esp,0x10
c000de66:	90                   	nop
c000de67:	83 c4 0c             	add    esp,0xc
c000de6a:	c3                   	ret    
c000de6b:	90                   	nop

c000de6c <VCache::~VCache()>:
c000de6c:	83 ec 0c             	sub    esp,0xc
c000de6f:	83 ec 0c             	sub    esp,0xc
c000de72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de76:	e8 99 ff ff ff       	call   c000de14 <VCache::~VCache()>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	83 ec 08             	sub    esp,0x8
c000de81:	6a 44                	push   0x44
c000de83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de87:	e8 b2 c9 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000de8c:	83 c4 10             	add    esp,0x10
c000de8f:	83 c4 0c             	add    esp,0xc
c000de92:	c3                   	ret    
c000de93:	90                   	nop

c000de94 <VCache::write(unsigned long long, int, void*)>:
c000de94:	55                   	push   ebp
c000de95:	57                   	push   edi
c000de96:	56                   	push   esi
c000de97:	53                   	push   ebx
c000de98:	83 ec 1c             	sub    esp,0x1c
c000de9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000de9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dea3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dea7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000deab:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000deaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000deb3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000deb7:	74 0f                	je     c000dec8 <VCache::write(unsigned long long, int, void*)+0x34>
c000deb9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000debd:	53                   	push   ebx
c000debe:	e8 f5 fe ff ff       	call   c000ddb8 <VCache::invalidateReadBuffer()>
c000dec3:	58                   	pop    eax
c000dec4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dec8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000decc:	74 66                	je     c000df34 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dece:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ded1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ded5:	99                   	cdq    
c000ded6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ded9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dedc:	89 c6                	mov    esi,eax
c000dede:	31 ce                	xor    esi,ecx
c000dee0:	89 d0                	mov    eax,edx
c000dee2:	31 e8                	xor    eax,ebp
c000dee4:	09 c6                	or     esi,eax
c000dee6:	75 38                	jne    c000df20 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dee8:	83 ff 01             	cmp    edi,0x1
c000deeb:	75 33                	jne    c000df20 <VCache::write(unsigned long long, int, void*)+0x8c>
c000deed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000def0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000def4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000def8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000defe:	0f af f9             	imul   edi,ecx
c000df01:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000df04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df06:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000df09:	40                   	inc    eax
c000df0a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000df0d:	83 f8 50             	cmp    eax,0x50
c000df10:	75 72                	jne    c000df84 <VCache::write(unsigned long long, int, void*)+0xf0>
c000df12:	83 ec 0c             	sub    esp,0xc
c000df15:	53                   	push   ebx
c000df16:	e8 ad fe ff ff       	call   c000ddc8 <VCache::writeWriteBuffer()>
c000df1b:	83 c4 10             	add    esp,0x10
c000df1e:	eb 64                	jmp    c000df84 <VCache::write(unsigned long long, int, void*)+0xf0>
c000df20:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000df24:	83 ec 0c             	sub    esp,0xc
c000df27:	53                   	push   ebx
c000df28:	e8 9b fe ff ff       	call   c000ddc8 <VCache::writeWriteBuffer()>
c000df2d:	83 c4 10             	add    esp,0x10
c000df30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000df34:	83 ff 4f             	cmp    edi,0x4f
c000df37:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000df3a:	7f 20                	jg     c000df5c <VCache::write(unsigned long long, int, void*)+0xc8>
c000df3c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000df3f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000df43:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000df46:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000df49:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000df4c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000df50:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000df56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df58:	eb 2a                	jmp    c000df84 <VCache::write(unsigned long long, int, void*)+0xf0>
c000df5a:	66 90                	xchg   ax,ax
c000df5c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000df60:	8b 10                	mov    edx,DWORD PTR [eax]
c000df62:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000df66:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000df6a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000df6e:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000df72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df76:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000df79:	83 c4 1c             	add    esp,0x1c
c000df7c:	5b                   	pop    ebx
c000df7d:	5e                   	pop    esi
c000df7e:	5f                   	pop    edi
c000df7f:	5d                   	pop    ebp
c000df80:	ff e0                	jmp    eax
c000df82:	66 90                	xchg   ax,ax
c000df84:	83 c4 1c             	add    esp,0x1c
c000df87:	31 c0                	xor    eax,eax
c000df89:	5b                   	pop    ebx
c000df8a:	5e                   	pop    esi
c000df8b:	5f                   	pop    edi
c000df8c:	5d                   	pop    ebp
c000df8d:	c3                   	ret    

c000df8e <VCache::read(unsigned long long, int, void*)>:
c000df8e:	55                   	push   ebp
c000df8f:	57                   	push   edi
c000df90:	56                   	push   esi
c000df91:	53                   	push   ebx
c000df92:	83 ec 1c             	sub    esp,0x1c
c000df95:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000df99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df9d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dfa1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dfa5:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dfa9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dfad:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dfb1:	74 0d                	je     c000dfc0 <VCache::read(unsigned long long, int, void*)+0x32>
c000dfb3:	83 ec 0c             	sub    esp,0xc
c000dfb6:	57                   	push   edi
c000dfb7:	e8 0c fe ff ff       	call   c000ddc8 <VCache::writeWriteBuffer()>
c000dfbc:	83 c4 10             	add    esp,0x10
c000dfbf:	90                   	nop
c000dfc0:	83 fd 01             	cmp    ebp,0x1
c000dfc3:	0f 85 93 00 00 00    	jne    c000e05c <VCache::read(unsigned long long, int, void*)+0xce>
c000dfc9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dfcc:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dfd3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfd6:	0f 85 80 00 00 00    	jne    c000e05c <VCache::read(unsigned long long, int, void*)+0xce>
c000dfdc:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dfdf:	89 cd                	mov    ebp,ecx
c000dfe1:	f7 dd                	neg    ebp
c000dfe3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dfe7:	89 e8                	mov    eax,ebp
c000dfe9:	21 dd                	and    ebp,ebx
c000dfeb:	c1 f8 1f             	sar    eax,0x1f
c000dfee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dff2:	89 e8                	mov    eax,ebp
c000dff4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dff8:	21 f5                	and    ebp,esi
c000dffa:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dffe:	89 ea                	mov    edx,ebp
c000e000:	74 2e                	je     c000e030 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e002:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e005:	75 29                	jne    c000e030 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e007:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e00a:	75 24                	jne    c000e030 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e00c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e00f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e015:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e018:	8d 70 ff             	lea    esi,[eax-0x1]
c000e01b:	21 f3                	and    ebx,esi
c000e01d:	0f af d9             	imul   ebx,ecx
c000e020:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e023:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e027:	89 de                	mov    esi,ebx
c000e029:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e02b:	31 c0                	xor    eax,eax
c000e02d:	eb 61                	jmp    c000e090 <VCache::read(unsigned long long, int, void*)+0x102>
c000e02f:	90                   	nop
c000e030:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e03a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e03e:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e041:	8b 36                	mov    esi,DWORD PTR [esi]
c000e043:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e046:	51                   	push   ecx
c000e047:	52                   	push   edx
c000e048:	50                   	push   eax
c000e049:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04d:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e050:	83 c4 20             	add    esp,0x20
c000e053:	85 c0                	test   eax,eax
c000e055:	75 39                	jne    c000e090 <VCache::read(unsigned long long, int, void*)+0x102>
c000e057:	eb b3                	jmp    c000e00c <VCache::read(unsigned long long, int, void*)+0x7e>
c000e059:	8d 76 00             	lea    esi,[esi+0x0]
c000e05c:	83 ec 0c             	sub    esp,0xc
c000e05f:	57                   	push   edi
c000e060:	e8 53 fd ff ff       	call   c000ddb8 <VCache::invalidateReadBuffer()>
c000e065:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e068:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e06c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e06e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e072:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e076:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e07a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e07e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e082:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e085:	83 c4 2c             	add    esp,0x2c
c000e088:	5b                   	pop    ebx
c000e089:	5e                   	pop    esi
c000e08a:	5f                   	pop    edi
c000e08b:	5d                   	pop    ebp
c000e08c:	ff e0                	jmp    eax
c000e08e:	66 90                	xchg   ax,ax
c000e090:	83 c4 1c             	add    esp,0x1c
c000e093:	5b                   	pop    ebx
c000e094:	5e                   	pop    esi
c000e095:	5f                   	pop    edi
c000e096:	5d                   	pop    ebp
c000e097:	c3                   	ret    

c000e098 <Video::putrect(int, int, int, int, unsigned int)>:
c000e098:	55                   	push   ebp
c000e099:	57                   	push   edi
c000e09a:	56                   	push   esi
c000e09b:	53                   	push   ebx
c000e09c:	83 ec 1c             	sub    esp,0x1c
c000e09f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e0a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e0a7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e0ab:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e0af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e0b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0b7:	01 df                	add    edi,ebx
c000e0b9:	39 fb                	cmp    ebx,edi
c000e0bb:	7d 1f                	jge    c000e0dc <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e0bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e0c1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e0c5:	7d 12                	jge    c000e0d9 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e0c7:	8b 16                	mov    edx,DWORD PTR [esi]
c000e0c9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e0cd:	53                   	push   ebx
c000e0ce:	55                   	push   ebp
c000e0cf:	45                   	inc    ebp
c000e0d0:	56                   	push   esi
c000e0d1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e0d4:	83 c4 10             	add    esp,0x10
c000e0d7:	eb e8                	jmp    c000e0c1 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e0d9:	43                   	inc    ebx
c000e0da:	eb dd                	jmp    c000e0b9 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e0dc:	83 c4 1c             	add    esp,0x1c
c000e0df:	5b                   	pop    ebx
c000e0e0:	5e                   	pop    esi
c000e0e1:	5f                   	pop    edi
c000e0e2:	5d                   	pop    ebp
c000e0e3:	c3                   	ret    

c000e0e4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e0e4:	55                   	push   ebp
c000e0e5:	57                   	push   edi
c000e0e6:	31 ff                	xor    edi,edi
c000e0e8:	56                   	push   esi
c000e0e9:	53                   	push   ebx
c000e0ea:	83 ec 1c             	sub    esp,0x1c
c000e0ed:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e0f1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e0f5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e0fc:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e101:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e105:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e109:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e10d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e110:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e114:	01 f9                	add    ecx,edi
c000e116:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e11a:	7d 2f                	jge    c000e14b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e11c:	31 f6                	xor    esi,esi
c000e11e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e122:	01 f2                	add    edx,esi
c000e124:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e128:	7d 1a                	jge    c000e144 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e12a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e12d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e130:	46                   	inc    esi
c000e131:	51                   	push   ecx
c000e132:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e136:	52                   	push   edx
c000e137:	55                   	push   ebp
c000e138:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e13b:	83 c4 10             	add    esp,0x10
c000e13e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e142:	eb da                	jmp    c000e11e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e144:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e148:	47                   	inc    edi
c000e149:	eb c5                	jmp    c000e110 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e14b:	83 c4 1c             	add    esp,0x1c
c000e14e:	5b                   	pop    ebx
c000e14f:	5e                   	pop    esi
c000e150:	5f                   	pop    edi
c000e151:	5d                   	pop    ebp
c000e152:	c3                   	ret    
c000e153:	90                   	nop

c000e154 <Video::blit(unsigned int*, int, int, int, int)>:
c000e154:	55                   	push   ebp
c000e155:	ba 00 00 00 00       	mov    edx,0x0
c000e15a:	57                   	push   edi
c000e15b:	56                   	push   esi
c000e15c:	53                   	push   ebx
c000e15d:	83 ec 1c             	sub    esp,0x1c
c000e160:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e164:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e168:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e16c:	85 c0                	test   eax,eax
c000e16e:	0f 49 d0             	cmovns edx,eax
c000e171:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e178:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e17c:	89 eb                	mov    ebx,ebp
c000e17e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e182:	01 ea                	add    edx,ebp
c000e184:	39 da                	cmp    edx,ebx
c000e186:	7e 54                	jle    c000e1dc <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e188:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e18e:	7c 4c                	jl     c000e1dc <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e190:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e194:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e198:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e19c:	01 c1                	add    ecx,eax
c000e19e:	39 f9                	cmp    ecx,edi
c000e1a0:	7e 2f                	jle    c000e1d1 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e1a2:	83 c2 04             	add    edx,0x4
c000e1a5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e1ab:	7c 21                	jl     c000e1ce <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e1ad:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1b1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e1b3:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e1b6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e1ba:	55                   	push   ebp
c000e1bb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e1bf:	56                   	push   esi
c000e1c0:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e1c3:	83 c4 10             	add    esp,0x10
c000e1c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e1ce:	47                   	inc    edi
c000e1cf:	eb c7                	jmp    c000e198 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e1d1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e1d5:	43                   	inc    ebx
c000e1d6:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e1da:	eb a2                	jmp    c000e17e <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e1dc:	83 c4 1c             	add    esp,0x1c
c000e1df:	5b                   	pop    ebx
c000e1e0:	5e                   	pop    esi
c000e1e1:	5f                   	pop    edi
c000e1e2:	5d                   	pop    ebp
c000e1e3:	c3                   	ret    

c000e1e4 <Video::clearScreen(unsigned int)>:
c000e1e4:	57                   	push   edi
c000e1e5:	56                   	push   esi
c000e1e6:	53                   	push   ebx
c000e1e7:	31 db                	xor    ebx,ebx
c000e1e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1ed:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e1f3:	7e 1f                	jle    c000e214 <Video::clearScreen(unsigned int)+0x30>
c000e1f5:	31 ff                	xor    edi,edi
c000e1f7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e1fd:	7e 12                	jle    c000e211 <Video::clearScreen(unsigned int)+0x2d>
c000e1ff:	8b 06                	mov    eax,DWORD PTR [esi]
c000e201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e205:	53                   	push   ebx
c000e206:	57                   	push   edi
c000e207:	47                   	inc    edi
c000e208:	56                   	push   esi
c000e209:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e20c:	83 c4 10             	add    esp,0x10
c000e20f:	eb e6                	jmp    c000e1f7 <Video::clearScreen(unsigned int)+0x13>
c000e211:	43                   	inc    ebx
c000e212:	eb d9                	jmp    c000e1ed <Video::clearScreen(unsigned int)+0x9>
c000e214:	5b                   	pop    ebx
c000e215:	5e                   	pop    esi
c000e216:	5f                   	pop    edi
c000e217:	c3                   	ret    

c000e218 <Video::putpixel(int, int, unsigned int)>:
c000e218:	c7 44 24 04 c8 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020ec8
c000e220:	e9 18 29 00 00       	jmp    c0010b3d <KePanic(char const*)>
c000e225:	90                   	nop

c000e226 <Video::readPixelApprox(int, int)>:
c000e226:	83 ec 18             	sub    esp,0x18
c000e229:	68 e9 0e 02 c0       	push   0xc0020ee9
c000e22e:	e8 0a 29 00 00       	call   c0010b3d <KePanic(char const*)>
c000e233:	31 c0                	xor    eax,eax
c000e235:	83 c4 1c             	add    esp,0x1c
c000e238:	c3                   	ret    
c000e239:	90                   	nop

c000e23a <Video::Video(char const*)>:
c000e23a:	83 ec 0c             	sub    esp,0xc
c000e23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e241:	83 ec 08             	sub    esp,0x8
c000e244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e248:	50                   	push   eax
c000e249:	e8 be df ff ff       	call   c000c20c <Device::Device(char const*)>
c000e24e:	83 c4 10             	add    esp,0x10
c000e251:	ba 64 0f 02 c0       	mov    edx,0xc0020f64
c000e256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e25a:	89 10                	mov    DWORD PTR [eax],edx
c000e25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e260:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e26a:	90                   	nop
c000e26b:	83 c4 0c             	add    esp,0xc
c000e26e:	c3                   	ret    
c000e26f:	90                   	nop

c000e270 <Video::~Video()>:
c000e270:	83 ec 0c             	sub    esp,0xc
c000e273:	ba 64 0f 02 c0       	mov    edx,0xc0020f64
c000e278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e27c:	89 10                	mov    DWORD PTR [eax],edx
c000e27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e282:	83 ec 0c             	sub    esp,0xc
c000e285:	50                   	push   eax
c000e286:	e8 eb dc ff ff       	call   c000bf76 <Device::~Device()>
c000e28b:	83 c4 10             	add    esp,0x10
c000e28e:	90                   	nop
c000e28f:	83 c4 0c             	add    esp,0xc
c000e292:	c3                   	ret    
c000e293:	90                   	nop

c000e294 <Video::~Video()>:
c000e294:	83 ec 0c             	sub    esp,0xc
c000e297:	83 ec 0c             	sub    esp,0xc
c000e29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e29e:	e8 cd ff ff ff       	call   c000e270 <Video::~Video()>
c000e2a3:	83 c4 10             	add    esp,0x10
c000e2a6:	83 ec 08             	sub    esp,0x8
c000e2a9:	68 64 01 00 00       	push   0x164
c000e2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b2:	e8 87 c5 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c000e2b7:	83 c4 10             	add    esp,0x10
c000e2ba:	83 c4 0c             	add    esp,0xc
c000e2bd:	c3                   	ret    

c000e2be <Video::isMonochrome()>:
c000e2be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2c2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e2c8:	c3                   	ret    
c000e2c9:	90                   	nop

c000e2ca <Video::getWidth()>:
c000e2ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e2d4:	c3                   	ret    
c000e2d5:	90                   	nop

c000e2d6 <Video::getHeight()>:
c000e2d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2da:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2e0:	c3                   	ret    
c000e2e1:	90                   	nop

c000e2e2 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e2e2:	55                   	push   ebp
c000e2e3:	57                   	push   edi
c000e2e4:	56                   	push   esi
c000e2e5:	53                   	push   ebx
c000e2e6:	83 ec 2c             	sub    esp,0x2c
c000e2e9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e2ed:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e2f1:	83 f8 01             	cmp    eax,0x1
c000e2f4:	19 c9                	sbb    ecx,ecx
c000e2f6:	31 db                	xor    ebx,ebx
c000e2f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e2fc:	89 ce                	mov    esi,ecx
c000e2fe:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e306:	f7 d6                	not    esi
c000e308:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e30e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e312:	01 d8                	add    eax,ebx
c000e314:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e318:	57                   	push   edi
c000e319:	e8 b8 ff ff ff       	call   c000e2d6 <Video::getHeight()>
c000e31e:	59                   	pop    ecx
c000e31f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e323:	7e 70                	jle    c000e395 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e325:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e329:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e32d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e330:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e334:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e338:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e33f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e343:	89 e8                	mov    eax,ebp
c000e345:	83 c0 20             	add    eax,0x20
c000e348:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e34c:	57                   	push   edi
c000e34d:	e8 78 ff ff ff       	call   c000e2ca <Video::getWidth()>
c000e352:	5a                   	pop    edx
c000e353:	39 c5                	cmp    ebp,eax
c000e355:	7d 34                	jge    c000e38b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e357:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e35c:	74 05                	je     c000e363 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e35e:	8b 07                	mov    eax,DWORD PTR [edi]
c000e360:	56                   	push   esi
c000e361:	eb 0d                	jmp    c000e370 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e363:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e368:	74 12                	je     c000e37c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e36a:	8b 07                	mov    eax,DWORD PTR [edi]
c000e36c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e370:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e374:	55                   	push   ebp
c000e375:	57                   	push   edi
c000e376:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e379:	83 c4 10             	add    esp,0x10
c000e37c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e380:	45                   	inc    ebp
c000e381:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e385:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e389:	75 c1                	jne    c000e34c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e38b:	43                   	inc    ebx
c000e38c:	83 fb 20             	cmp    ebx,0x20
c000e38f:	0f 85 79 ff ff ff    	jne    c000e30e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e395:	83 c4 2c             	add    esp,0x2c
c000e398:	5b                   	pop    ebx
c000e399:	5e                   	pop    esi
c000e39a:	5f                   	pop    edi
c000e39b:	5d                   	pop    ebp
c000e39c:	c3                   	ret    
c000e39d:	90                   	nop

c000e39e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e39e:	55                   	push   ebp
c000e39f:	57                   	push   edi
c000e3a0:	56                   	push   esi
c000e3a1:	53                   	push   ebx
c000e3a2:	83 ec 28             	sub    esp,0x28
c000e3a5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e3a9:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e3ad:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e3b1:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e3b5:	c1 e7 08             	shl    edi,0x8
c000e3b8:	01 c7                	add    edi,eax
c000e3ba:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e3be:	c1 e6 08             	shl    esi,0x8
c000e3c1:	01 f0                	add    eax,esi
c000e3c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3cb:	0f af c7             	imul   eax,edi
c000e3ce:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e3d5:	50                   	push   eax
c000e3d6:	e8 f0 96 ff ff       	call   c0007acb <malloc>
c000e3db:	83 c4 10             	add    esp,0x10
c000e3de:	85 c0                	test   eax,eax
c000e3e0:	89 c5                	mov    ebp,eax
c000e3e2:	75 10                	jne    c000e3f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e3e4:	83 ec 0c             	sub    esp,0xc
c000e3e7:	68 14 0f 02 c0       	push   0xc0020f14
c000e3ec:	e8 4c 27 00 00       	call   c0010b3d <KePanic(char const*)>
c000e3f1:	83 c4 10             	add    esp,0x10
c000e3f4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e3f8:	ba 12 00 00 00       	mov    edx,0x12
c000e3fd:	85 c0                	test   eax,eax
c000e3ff:	74 11                	je     c000e412 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e401:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e405:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e409:	c1 fa 03             	sar    edx,0x3
c000e40c:	0f af d1             	imul   edx,ecx
c000e40f:	83 c2 12             	add    edx,0x12
c000e412:	85 ff                	test   edi,edi
c000e414:	74 06                	je     c000e41c <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e416:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e41a:	75 12                	jne    c000e42e <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e41c:	83 ec 0c             	sub    esp,0xc
c000e41f:	68 24 0f 02 c0       	push   0xc0020f24
c000e424:	e8 13 c5 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000e429:	e9 b8 00 00 00       	jmp    c000e4e6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e42e:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e432:	83 f9 02             	cmp    ecx,0x2
c000e435:	0f 85 96 00 00 00    	jne    c000e4d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e43b:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e440:	75 0e                	jne    c000e450 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e442:	85 c0                	test   eax,eax
c000e444:	75 0a                	jne    c000e450 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e446:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e449:	83 e8 18             	sub    eax,0x18
c000e44c:	a8 f7                	test   al,0xf7
c000e44e:	74 0a                	je     c000e45a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e450:	83 ec 0c             	sub    esp,0xc
c000e453:	68 39 0f 02 c0       	push   0xc0020f39
c000e458:	eb 7f                	jmp    c000e4d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e45a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e462:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e46a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e46e:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e472:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e47a:	75 0c                	jne    c000e488 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e47c:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000e481:	c1 e1 18             	shl    ecx,0x18
c000e484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e488:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e48d:	46                   	inc    esi
c000e48e:	89 c8                	mov    eax,ecx
c000e490:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e495:	c1 e0 10             	shl    eax,0x10
c000e498:	c1 e1 08             	shl    ecx,0x8
c000e49b:	09 c1                	or     ecx,eax
c000e49d:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e4a1:	09 c1                	or     ecx,eax
c000e4a3:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e4a7:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000e4ab:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e4af:	c1 f8 03             	sar    eax,0x3
c000e4b2:	01 c2                	add    edx,eax
c000e4b4:	89 f0                	mov    eax,esi
c000e4b6:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e4ba:	39 c7                	cmp    edi,eax
c000e4bc:	7f b0                	jg     c000e46e <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e4be:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e4c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4c6:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e4c9:	7e 22                	jle    c000e4ed <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e4cb:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000e4cf:	eb 99                	jmp    c000e46a <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e4d1:	50                   	push   eax
c000e4d2:	50                   	push   eax
c000e4d3:	51                   	push   ecx
c000e4d4:	68 47 0f 02 c0       	push   0xc0020f47
c000e4d9:	e8 5e c4 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c000e4de:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e4e1:	e8 f5 95 ff ff       	call   c0007adb <free>
c000e4e6:	83 c4 10             	add    esp,0x10
c000e4e9:	31 ed                	xor    ebp,ebp
c000e4eb:	eb 0f                	jmp    c000e4fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e4ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4f1:	89 38                	mov    DWORD PTR [eax],edi
c000e4f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4f7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000e4fa:	89 38                	mov    DWORD PTR [eax],edi
c000e4fc:	83 c4 1c             	add    esp,0x1c
c000e4ff:	89 e8                	mov    eax,ebp
c000e501:	5b                   	pop    ebx
c000e502:	5e                   	pop    esi
c000e503:	5f                   	pop    edi
c000e504:	5d                   	pop    ebp
c000e505:	c3                   	ret    

c000e506 <Video::putTGA(int, int, unsigned char*, int)>:
c000e506:	55                   	push   ebp
c000e507:	57                   	push   edi
c000e508:	56                   	push   esi
c000e509:	53                   	push   ebx
c000e50a:	83 ec 28             	sub    esp,0x28
c000e50d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e511:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e515:	50                   	push   eax
c000e516:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e51a:	50                   	push   eax
c000e51b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e51f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e523:	57                   	push   edi
c000e524:	e8 75 fe ff ff       	call   c000e39e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e529:	83 c4 20             	add    esp,0x20
c000e52c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e530:	85 c0                	test   eax,eax
c000e532:	74 35                	je     c000e569 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e534:	89 c6                	mov    esi,eax
c000e536:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e53a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e53e:	39 d8                	cmp    eax,ebx
c000e540:	7e 27                	jle    c000e569 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e542:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e546:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e54a:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e54e:	39 e9                	cmp    ecx,ebp
c000e550:	7e 14                	jle    c000e566 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e552:	83 c6 04             	add    esi,0x4
c000e555:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e557:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e55a:	53                   	push   ebx
c000e55b:	55                   	push   ebp
c000e55c:	45                   	inc    ebp
c000e55d:	57                   	push   edi
c000e55e:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e561:	83 c4 10             	add    esp,0x10
c000e564:	eb e0                	jmp    c000e546 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e566:	43                   	inc    ebx
c000e567:	eb cd                	jmp    c000e536 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e569:	83 c4 1c             	add    esp,0x1c
c000e56c:	5b                   	pop    ebx
c000e56d:	5e                   	pop    esi
c000e56e:	5f                   	pop    edi
c000e56f:	5d                   	pop    ebp
c000e570:	c3                   	ret    
c000e571:	66 90                	xchg   ax,ax
c000e573:	90                   	nop

c000e574 <ACPI::close(int, int, void*)>:
c000e574:	83 ec 1c             	sub    esp,0x1c
c000e577:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e57f:	74 0b                	je     c000e58c <ACPI::close(int, int, void*)+0x18>
c000e581:	b8 00 00 00 00       	mov    eax,0x0
c000e586:	e9 99 00 00 00       	jmp    c000e624 <ACPI::close(int, int, void*)+0xb0>
c000e58b:	90                   	nop
c000e58c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e591:	75 29                	jne    c000e5bc <ACPI::close(int, int, void*)+0x48>
c000e593:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e598:	85 c0                	test   eax,eax
c000e59a:	74 08                	je     c000e5a4 <ACPI::close(int, int, void*)+0x30>
c000e59c:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e5a1:	ff d0                	call   eax
c000e5a3:	90                   	nop
c000e5a4:	83 ec 0c             	sub    esp,0xc
c000e5a7:	68 a8 0f 02 c0       	push   0xc0020fa8
c000e5ac:	e8 8c 25 00 00       	call   c0010b3d <KePanic(char const*)>
c000e5b1:	83 c4 10             	add    esp,0x10
c000e5b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5b9:	eb 69                	jmp    c000e624 <ACPI::close(int, int, void*)+0xb0>
c000e5bb:	90                   	nop
c000e5bc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e5c1:	75 59                	jne    c000e61c <ACPI::close(int, int, void*)+0xa8>
c000e5c3:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e5c8:	85 c0                	test   eax,eax
c000e5ca:	74 08                	je     c000e5d4 <ACPI::close(int, int, void*)+0x60>
c000e5cc:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e5d1:	ff d0                	call   eax
c000e5d3:	90                   	nop
c000e5d4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e5d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5dc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e5e1:	83 e0 02             	and    eax,0x2
c000e5e4:	74 1e                	je     c000e604 <ACPI::close(int, int, void*)+0x90>
c000e5e6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e5ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5f1:	89 c2                	mov    edx,eax
c000e5f3:	ec                   	in     al,dx
c000e5f4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e5f8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e5fc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e600:	eb da                	jmp    c000e5dc <ACPI::close(int, int, void*)+0x68>
c000e602:	66 90                	xchg   ax,ax
c000e604:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e60b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e610:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e618:	ee                   	out    dx,al
c000e619:	8d 76 00             	lea    esi,[esi+0x0]
c000e61c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e621:	8d 76 00             	lea    esi,[esi+0x0]
c000e624:	83 c4 1c             	add    esp,0x1c
c000e627:	c3                   	ret    

c000e628 <findRSDP()>:
c000e628:	83 ec 1c             	sub    esp,0x1c
c000e62b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e630:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e636:	83 e0 04             	and    eax,0x4
c000e639:	0f b6 c0             	movzx  eax,al
c000e63c:	85 c0                	test   eax,eax
c000e63e:	75 08                	jne    c000e648 <findRSDP()+0x20>
c000e640:	b8 00 00 00 00       	mov    eax,0x0
c000e645:	eb 75                	jmp    c000e6bc <findRSDP()+0x94>
c000e647:	90                   	nop
c000e648:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e64d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e652:	7f 1c                	jg     c000e670 <findRSDP()+0x48>
c000e654:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e659:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e65f:	83 e2 fb             	and    edx,0xfffffffb
c000e662:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e668:	b8 00 00 00 00       	mov    eax,0x0
c000e66d:	eb 4d                	jmp    c000e6bc <findRSDP()+0x94>
c000e66f:	90                   	nop
c000e670:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e678:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e680:	77 32                	ja     c000e6b4 <findRSDP()+0x8c>
c000e682:	83 ec 04             	sub    esp,0x4
c000e685:	6a 08                	push   0x8
c000e687:	68 43 10 02 c0       	push   0xc0021043
c000e68c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e690:	e8 eb 1c ff ff       	call   c0000380 <memcmp>
c000e695:	83 c4 10             	add    esp,0x10
c000e698:	85 c0                	test   eax,eax
c000e69a:	0f 94 c0             	sete   al
c000e69d:	0f b6 c0             	movzx  eax,al
c000e6a0:	85 c0                	test   eax,eax
c000e6a2:	74 08                	je     c000e6ac <findRSDP()+0x84>
c000e6a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6a8:	eb 12                	jmp    c000e6bc <findRSDP()+0x94>
c000e6aa:	66 90                	xchg   ax,ax
c000e6ac:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e6b1:	eb c5                	jmp    c000e678 <findRSDP()+0x50>
c000e6b3:	90                   	nop
c000e6b4:	b8 00 00 00 00       	mov    eax,0x0
c000e6b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6bc:	83 c4 1c             	add    esp,0x1c
c000e6bf:	c3                   	ret    

c000e6c0 <loadACPITables(unsigned char*)>:
c000e6c0:	57                   	push   edi
c000e6c1:	56                   	push   esi
c000e6c2:	53                   	push   ebx
c000e6c3:	83 ec 60             	sub    esp,0x60
c000e6c6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e6cb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6d1:	83 e0 04             	and    eax,0x4
c000e6d4:	0f b6 c0             	movzx  eax,al
c000e6d7:	85 c0                	test   eax,eax
c000e6d9:	0f 84 41 02 00 00    	je     c000e920 <loadACPITables(unsigned char*)+0x260>
c000e6df:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e6e4:	0f b6 c0             	movzx  eax,al
c000e6e7:	85 c0                	test   eax,eax
c000e6e9:	74 79                	je     c000e764 <loadACPITables(unsigned char*)+0xa4>
c000e6eb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e6ef:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e6f3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e6f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6fa:	83 e8 24             	sub    eax,0x24
c000e6fd:	c1 e8 03             	shr    eax,0x3
c000e700:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e704:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e70c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e710:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e714:	0f 8d ba 00 00 00    	jge    c000e7d4 <loadACPITables(unsigned char*)+0x114>
c000e71a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e71e:	83 c0 24             	add    eax,0x24
c000e721:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e725:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e729:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e72d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e731:	c1 e0 03             	shl    eax,0x3
c000e734:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e738:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e73c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e73f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e741:	89 c1                	mov    ecx,eax
c000e743:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e748:	8d 50 01             	lea    edx,[eax+0x1]
c000e74b:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e751:	89 ca                	mov    edx,ecx
c000e753:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e75a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e75f:	eb ab                	jmp    c000e70c <loadACPITables(unsigned char*)+0x4c>
c000e761:	8d 76 00             	lea    esi,[esi+0x0]
c000e764:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e768:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e76c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e770:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e773:	83 e8 24             	sub    eax,0x24
c000e776:	c1 e8 02             	shr    eax,0x2
c000e779:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e77d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e785:	8d 76 00             	lea    esi,[esi+0x0]
c000e788:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e78c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e790:	7d 42                	jge    c000e7d4 <loadACPITables(unsigned char*)+0x114>
c000e792:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e796:	83 c0 24             	add    eax,0x24
c000e799:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e79d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e7a1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e7a5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e7a9:	c1 e0 02             	shl    eax,0x2
c000e7ac:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e7b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7b4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e7b6:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e7bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e7be:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e7c4:	89 ca                	mov    edx,ecx
c000e7c6:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e7cd:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e7d2:	eb b4                	jmp    c000e788 <loadACPITables(unsigned char*)+0xc8>
c000e7d4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e7dc:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e7e1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e7e5:	0f 8d 39 01 00 00    	jge    c000e924 <loadACPITables(unsigned char*)+0x264>
c000e7eb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e7ef:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e7f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e7fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e806:	25 ff 0f 00 00       	and    eax,0xfff
c000e80b:	89 c6                	mov    esi,eax
c000e80d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e813:	83 ec 0c             	sub    esp,0xc
c000e816:	6a 01                	push   0x1
c000e818:	e8 cc ad ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e81d:	83 c4 10             	add    esp,0x10
c000e820:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e824:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e82a:	83 ec 0c             	sub    esp,0xc
c000e82d:	6a 01                	push   0x1
c000e82f:	6a 01                	push   0x1
c000e831:	50                   	push   eax
c000e832:	52                   	push   edx
c000e833:	53                   	push   ebx
c000e834:	e8 df b6 ff ff       	call   c0009f18 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e839:	83 c4 20             	add    esp,0x20
c000e83c:	09 f0                	or     eax,esi
c000e83e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e842:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e846:	c1 e0 03             	shl    eax,0x3
c000e849:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e84e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e852:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e856:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e85a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e86a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e86e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e872:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e876:	89 c6                	mov    esi,eax
c000e878:	89 d7                	mov    edi,edx
c000e87a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e87c:	89 c8                	mov    eax,ecx
c000e87e:	89 fa                	mov    edx,edi
c000e880:	89 f3                	mov    ebx,esi
c000e882:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e886:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e88a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e88e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e892:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e895:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e899:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e89d:	05 00 10 00 00       	add    eax,0x1000
c000e8a2:	c1 e8 0c             	shr    eax,0xc
c000e8a5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e8a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e8b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8b5:	25 ff 0f 00 00       	and    eax,0xfff
c000e8ba:	89 c6                	mov    esi,eax
c000e8bc:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e8c2:	83 ec 0c             	sub    esp,0xc
c000e8c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e8c9:	e8 1b ad ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e8ce:	83 c4 10             	add    esp,0x10
c000e8d1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e8d5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e8db:	83 ec 0c             	sub    esp,0xc
c000e8de:	6a 01                	push   0x1
c000e8e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e8e4:	50                   	push   eax
c000e8e5:	52                   	push   edx
c000e8e6:	53                   	push   ebx
c000e8e7:	e8 2c b6 ff ff       	call   c0009f18 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8ec:	83 c4 20             	add    esp,0x20
c000e8ef:	09 f0                	or     eax,esi
c000e8f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8f9:	83 ec 0c             	sub    esp,0xc
c000e8fc:	50                   	push   eax
c000e8fd:	e8 f9 af ff ff       	call   c00098fb <Virt::freeKernelVirtualPages(unsigned long)>
c000e902:	83 c4 10             	add    esp,0x10
c000e905:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e909:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e90d:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e914:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e919:	e9 be fe ff ff       	jmp    c000e7dc <loadACPITables(unsigned char*)+0x11c>
c000e91e:	66 90                	xchg   ax,ax
c000e920:	90                   	nop
c000e921:	8d 76 00             	lea    esi,[esi+0x0]
c000e924:	83 c4 60             	add    esp,0x60
c000e927:	5b                   	pop    ebx
c000e928:	5e                   	pop    esi
c000e929:	5f                   	pop    edi
c000e92a:	c3                   	ret    
c000e92b:	90                   	nop

c000e92c <findRSDT(unsigned char*)>:
c000e92c:	57                   	push   edi
c000e92d:	56                   	push   esi
c000e92e:	53                   	push   ebx
c000e92f:	83 ec 50             	sub    esp,0x50
c000e932:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e937:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e93d:	83 e0 04             	and    eax,0x4
c000e940:	0f b6 c0             	movzx  eax,al
c000e943:	85 c0                	test   eax,eax
c000e945:	75 0d                	jne    c000e954 <findRSDT(unsigned char*)+0x28>
c000e947:	b8 00 00 00 00       	mov    eax,0x0
c000e94c:	e9 2b 01 00 00       	jmp    c000ea7c <findRSDT(unsigned char*)+0x150>
c000e951:	8d 76 00             	lea    esi,[esi+0x0]
c000e954:	89 e0                	mov    eax,esp
c000e956:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e95a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e95e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e962:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e96a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e96e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e972:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e976:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e97a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e97e:	89 c6                	mov    esi,eax
c000e980:	89 d7                	mov    edi,edx
c000e982:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e984:	89 c8                	mov    eax,ecx
c000e986:	89 fa                	mov    edx,edi
c000e988:	89 f3                	mov    ebx,esi
c000e98a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e98e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e992:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e996:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e99a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e99e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e9a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9ae:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9ba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e9be:	25 ff 0f 00 00       	and    eax,0xfff
c000e9c3:	89 c6                	mov    esi,eax
c000e9c5:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e9cb:	83 ec 0c             	sub    esp,0xc
c000e9ce:	6a 02                	push   0x2
c000e9d0:	e8 14 ac ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e9d5:	83 c4 10             	add    esp,0x10
c000e9d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e9dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e9e2:	83 ec 0c             	sub    esp,0xc
c000e9e5:	6a 01                	push   0x1
c000e9e7:	6a 02                	push   0x2
c000e9e9:	50                   	push   eax
c000e9ea:	52                   	push   edx
c000e9eb:	53                   	push   ebx
c000e9ec:	e8 27 b5 ff ff       	call   c0009f18 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9f1:	83 c4 20             	add    esp,0x20
c000e9f4:	09 f0                	or     eax,esi
c000e9f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e9fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e9fe:	25 ff 0f 00 00       	and    eax,0xfff
c000ea03:	89 c6                	mov    esi,eax
c000ea05:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	6a 02                	push   0x2
c000ea10:	e8 d4 ab ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000ea15:	83 c4 10             	add    esp,0x10
c000ea18:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ea1c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ea22:	83 ec 0c             	sub    esp,0xc
c000ea25:	6a 01                	push   0x1
c000ea27:	6a 02                	push   0x2
c000ea29:	50                   	push   eax
c000ea2a:	52                   	push   edx
c000ea2b:	53                   	push   ebx
c000ea2c:	e8 e7 b4 ff ff       	call   c0009f18 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ea31:	83 c4 20             	add    esp,0x20
c000ea34:	09 f0                	or     eax,esi
c000ea36:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea3a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ea3f:	85 c0                	test   eax,eax
c000ea41:	75 11                	jne    c000ea54 <findRSDT(unsigned char*)+0x128>
c000ea43:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000ea4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea4e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ea52:	eb 24                	jmp    c000ea78 <findRSDT(unsigned char*)+0x14c>
c000ea54:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ea59:	83 f8 02             	cmp    eax,0x2
c000ea5c:	75 12                	jne    c000ea70 <findRSDT(unsigned char*)+0x144>
c000ea5e:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000ea65:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea69:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ea6d:	eb 09                	jmp    c000ea78 <findRSDT(unsigned char*)+0x14c>
c000ea6f:	90                   	nop
c000ea70:	b8 00 00 00 00       	mov    eax,0x0
c000ea75:	eb 05                	jmp    c000ea7c <findRSDT(unsigned char*)+0x150>
c000ea77:	90                   	nop
c000ea78:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea7c:	83 c4 50             	add    esp,0x50
c000ea7f:	5b                   	pop    ebx
c000ea80:	5e                   	pop    esi
c000ea81:	5f                   	pop    edi
c000ea82:	c3                   	ret    
c000ea83:	90                   	nop

c000ea84 <findDataTable(unsigned char*, char*)>:
c000ea84:	83 ec 1c             	sub    esp,0x1c
c000ea87:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ea8c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ea92:	83 e0 04             	and    eax,0x4
c000ea95:	0f b6 c0             	movzx  eax,al
c000ea98:	85 c0                	test   eax,eax
c000ea9a:	75 08                	jne    c000eaa4 <findDataTable(unsigned char*, char*)+0x20>
c000ea9c:	b8 00 00 00 00       	mov    eax,0x0
c000eaa1:	eb 5d                	jmp    c000eb00 <findDataTable(unsigned char*, char*)+0x7c>
c000eaa3:	90                   	nop
c000eaa4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eaac:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000eab1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000eab5:	7d 41                	jge    c000eaf8 <findDataTable(unsigned char*, char*)+0x74>
c000eab7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eabb:	c1 e0 03             	shl    eax,0x3
c000eabe:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000eac3:	83 ec 04             	sub    esp,0x4
c000eac6:	6a 04                	push   0x4
c000eac8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eacc:	50                   	push   eax
c000eacd:	e8 ae 18 ff ff       	call   c0000380 <memcmp>
c000ead2:	83 c4 10             	add    esp,0x10
c000ead5:	85 c0                	test   eax,eax
c000ead7:	0f 94 c0             	sete   al
c000eada:	0f b6 c0             	movzx  eax,al
c000eadd:	85 c0                	test   eax,eax
c000eadf:	74 0f                	je     c000eaf0 <findDataTable(unsigned char*, char*)+0x6c>
c000eae1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eae5:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000eaec:	eb 12                	jmp    c000eb00 <findDataTable(unsigned char*, char*)+0x7c>
c000eaee:	66 90                	xchg   ax,ax
c000eaf0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000eaf5:	eb b5                	jmp    c000eaac <findDataTable(unsigned char*, char*)+0x28>
c000eaf7:	90                   	nop
c000eaf8:	b8 00 00 00 00       	mov    eax,0x0
c000eafd:	8d 76 00             	lea    esi,[esi+0x0]
c000eb00:	83 c4 1c             	add    esp,0x1c
c000eb03:	c3                   	ret    

c000eb04 <scanMADT()>:
c000eb04:	53                   	push   ebx
c000eb05:	83 ec 38             	sub    esp,0x38
c000eb08:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000eb0d:	25 00 04 00 00       	and    eax,0x400
c000eb12:	74 14                	je     c000eb28 <scanMADT()+0x24>
c000eb14:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eb19:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb1f:	83 e2 fb             	and    edx,0xfffffffb
c000eb22:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb28:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eb2d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eb33:	83 e0 04             	and    eax,0x4
c000eb36:	0f b6 c0             	movzx  eax,al
c000eb39:	85 c0                	test   eax,eax
c000eb3b:	0f 84 6b 04 00 00    	je     c000efac <scanMADT()+0x4a8>
c000eb41:	e8 e2 fa ff ff       	call   c000e628 <findRSDP()>
c000eb46:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000eb4b:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000eb50:	85 c0                	test   eax,eax
c000eb52:	75 1c                	jne    c000eb70 <scanMADT()+0x6c>
c000eb54:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eb59:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb5f:	83 e2 fb             	and    edx,0xfffffffb
c000eb62:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb68:	e9 47 04 00 00       	jmp    c000efb4 <scanMADT()+0x4b0>
c000eb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb70:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000eb75:	83 ec 0c             	sub    esp,0xc
c000eb78:	50                   	push   eax
c000eb79:	e8 ae fd ff ff       	call   c000e92c <findRSDT(unsigned char*)>
c000eb7e:	83 c4 10             	add    esp,0x10
c000eb81:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000eb86:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000eb8b:	85 c0                	test   eax,eax
c000eb8d:	75 19                	jne    c000eba8 <scanMADT()+0xa4>
c000eb8f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eb94:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb9a:	83 e2 fb             	and    edx,0xfffffffb
c000eb9d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eba3:	e9 0c 04 00 00       	jmp    c000efb4 <scanMADT()+0x4b0>
c000eba8:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ebad:	83 ec 0c             	sub    esp,0xc
c000ebb0:	50                   	push   eax
c000ebb1:	e8 0a fb ff ff       	call   c000e6c0 <loadACPITables(unsigned char*)>
c000ebb6:	83 c4 10             	add    esp,0x10
c000ebb9:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	68 4c 10 02 c0       	push   0xc002104c
c000ebc6:	50                   	push   eax
c000ebc7:	e8 b8 fe ff ff       	call   c000ea84 <findDataTable(unsigned char*, char*)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ebd3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ebd8:	75 1a                	jne    c000ebf4 <scanMADT()+0xf0>
c000ebda:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ebdf:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebe5:	83 e2 fe             	and    edx,0xfffffffe
c000ebe8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ebee:	e9 c1 03 00 00       	jmp    c000efb4 <scanMADT()+0x4b0>
c000ebf3:	90                   	nop
c000ebf4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ebfc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec03:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ec07:	0f 87 a7 03 00 00    	ja     c000efb4 <scanMADT()+0x4b0>
c000ec0d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000ec15:	0f 87 99 03 00 00    	ja     c000efb4 <scanMADT()+0x4b0>
c000ec1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec1f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ec23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec27:	8d 50 01             	lea    edx,[eax+0x1]
c000ec2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec32:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec36:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000ec3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec3e:	8d 50 01             	lea    edx,[eax+0x1]
c000ec41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec45:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec49:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec4d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000ec51:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000ec56:	83 f8 02             	cmp    eax,0x2
c000ec59:	0f 86 51 03 00 00    	jbe    c000efb0 <scanMADT()+0x4ac>
c000ec5f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec64:	85 c0                	test   eax,eax
c000ec66:	75 58                	jne    c000ecc0 <scanMADT()+0x1bc>
c000ec68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec6c:	8d 50 01             	lea    edx,[eax+0x1]
c000ec6f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec73:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ec79:	0f b6 d2             	movzx  edx,dl
c000ec7c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec80:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec84:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000ec8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec8e:	8d 50 01             	lea    edx,[eax+0x1]
c000ec91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec95:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ec9b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec9e:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000eca4:	0f b6 d2             	movzx  edx,dl
c000eca7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ecab:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ecaf:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ecb5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ecba:	e9 d9 02 00 00       	jmp    c000ef98 <scanMADT()+0x494>
c000ecbf:	90                   	nop
c000ecc0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ecc5:	83 f8 01             	cmp    eax,0x1
c000ecc8:	0f 85 1a 01 00 00    	jne    c000ede8 <scanMADT()+0x2e4>
c000ecce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecd2:	8d 50 01             	lea    edx,[eax+0x1]
c000ecd5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecd9:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ecdf:	0f b6 d2             	movzx  edx,dl
c000ece2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ece6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ecea:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ecf0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ecf5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecfd:	01 d0                	add    eax,edx
c000ecff:	83 c0 2c             	add    eax,0x2c
c000ed02:	8a 00                	mov    al,BYTE PTR [eax]
c000ed04:	0f b6 d0             	movzx  edx,al
c000ed07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed0b:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed12:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ed16:	0f b6 c0             	movzx  eax,al
c000ed19:	c1 e0 08             	shl    eax,0x8
c000ed1c:	89 d1                	mov    ecx,edx
c000ed1e:	09 c1                	or     ecx,eax
c000ed20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed24:	8d 50 02             	lea    edx,[eax+0x2]
c000ed27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed2b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed2f:	0f b6 c0             	movzx  eax,al
c000ed32:	c1 e0 10             	shl    eax,0x10
c000ed35:	09 c1                	or     ecx,eax
c000ed37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed3b:	8d 50 03             	lea    edx,[eax+0x3]
c000ed3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed42:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed46:	0f b6 c0             	movzx  eax,al
c000ed49:	c1 e0 18             	shl    eax,0x18
c000ed4c:	09 c1                	or     ecx,eax
c000ed4e:	89 ca                	mov    edx,ecx
c000ed50:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ed55:	0f b6 c0             	movzx  eax,al
c000ed58:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000ed5f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ed64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed6c:	01 d0                	add    eax,edx
c000ed6e:	83 c0 2c             	add    eax,0x2c
c000ed71:	8a 00                	mov    al,BYTE PTR [eax]
c000ed73:	0f b6 d0             	movzx  edx,al
c000ed76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed7a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed81:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ed85:	0f b6 c0             	movzx  eax,al
c000ed88:	c1 e0 08             	shl    eax,0x8
c000ed8b:	89 d1                	mov    ecx,edx
c000ed8d:	09 c1                	or     ecx,eax
c000ed8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed93:	8d 50 02             	lea    edx,[eax+0x2]
c000ed96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed9a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed9e:	0f b6 c0             	movzx  eax,al
c000eda1:	c1 e0 10             	shl    eax,0x10
c000eda4:	09 c1                	or     ecx,eax
c000eda6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edaa:	8d 50 03             	lea    edx,[eax+0x3]
c000edad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000edb1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000edb5:	0f b6 c0             	movzx  eax,al
c000edb8:	c1 e0 18             	shl    eax,0x18
c000edbb:	09 c1                	or     ecx,eax
c000edbd:	89 ca                	mov    edx,ecx
c000edbf:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000edc4:	0f b6 c0             	movzx  eax,al
c000edc7:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000edce:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000edd3:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000edd8:	83 c0 01             	add    eax,0x1
c000eddb:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000ede0:	e9 b3 01 00 00       	jmp    c000ef98 <scanMADT()+0x494>
c000ede5:	8d 76 00             	lea    esi,[esi+0x0]
c000ede8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eded:	83 f8 02             	cmp    eax,0x2
c000edf0:	0f 85 ea 00 00 00    	jne    c000eee0 <scanMADT()+0x3dc>
c000edf6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edfa:	8d 50 01             	lea    edx,[eax+0x1]
c000edfd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ee01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee05:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ee09:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000ee0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee11:	8d 50 01             	lea    edx,[eax+0x1]
c000ee14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ee18:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee1c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ee20:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ee24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee2c:	01 d0                	add    eax,edx
c000ee2e:	83 c0 2c             	add    eax,0x2c
c000ee31:	8a 00                	mov    al,BYTE PTR [eax]
c000ee33:	0f b6 d0             	movzx  edx,al
c000ee36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee3a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ee3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee41:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ee45:	0f b6 c0             	movzx  eax,al
c000ee48:	c1 e0 08             	shl    eax,0x8
c000ee4b:	89 d1                	mov    ecx,edx
c000ee4d:	09 c1                	or     ecx,eax
c000ee4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee53:	8d 50 02             	lea    edx,[eax+0x2]
c000ee56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee5a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee5e:	0f b6 c0             	movzx  eax,al
c000ee61:	c1 e0 10             	shl    eax,0x10
c000ee64:	09 c1                	or     ecx,eax
c000ee66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee6a:	8d 50 03             	lea    edx,[eax+0x3]
c000ee6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee71:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee75:	0f b6 c0             	movzx  eax,al
c000ee78:	c1 e0 18             	shl    eax,0x18
c000ee7b:	09 c8                	or     eax,ecx
c000ee7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee81:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ee86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee8e:	01 d0                	add    eax,edx
c000ee90:	83 c0 2c             	add    eax,0x2c
c000ee93:	8a 00                	mov    al,BYTE PTR [eax]
c000ee95:	0f b6 d0             	movzx  edx,al
c000ee98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee9c:	8d 48 01             	lea    ecx,[eax+0x1]
c000ee9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eea3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eea7:	0f b6 c0             	movzx  eax,al
c000eeaa:	c1 e0 08             	shl    eax,0x8
c000eead:	09 d0                	or     eax,edx
c000eeaf:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000eeb4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000eeb9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000eebe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eec2:	88 90 68 27 02 c0    	mov    BYTE PTR [eax-0x3ffdd898],dl
c000eec8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000eecd:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000eed2:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000eeda:	e9 b9 00 00 00       	jmp    c000ef98 <scanMADT()+0x494>
c000eedf:	90                   	nop
c000eee0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eee5:	83 f8 04             	cmp    eax,0x4
c000eee8:	0f 85 9a 00 00 00    	jne    c000ef88 <scanMADT()+0x484>
c000eeee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eef2:	8d 50 01             	lea    edx,[eax+0x1]
c000eef5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eef9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eefd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ef01:	0f b6 c0             	movzx  eax,al
c000ef04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ef08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ef0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ef10:	01 d0                	add    eax,edx
c000ef12:	83 c0 2c             	add    eax,0x2c
c000ef15:	8a 00                	mov    al,BYTE PTR [eax]
c000ef17:	0f b6 d0             	movzx  edx,al
c000ef1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ef1e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef25:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ef29:	0f b6 c0             	movzx  eax,al
c000ef2c:	c1 e0 08             	shl    eax,0x8
c000ef2f:	09 d0                	or     eax,edx
c000ef31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef35:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ef3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ef3e:	8d 50 01             	lea    edx,[eax+0x1]
c000ef41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ef45:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ef49:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ef4d:	0f b6 c0             	movzx  eax,al
c000ef50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ef54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef58:	c1 e0 08             	shl    eax,0x8
c000ef5b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ef5f:	89 c1                	mov    ecx,eax
c000ef61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef65:	c1 e0 18             	shl    eax,0x18
c000ef68:	89 c3                	mov    ebx,eax
c000ef6a:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ef6f:	8d 50 01             	lea    edx,[eax+0x1]
c000ef72:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ef78:	09 d9                	or     ecx,ebx
c000ef7a:	89 ca                	mov    edx,ecx
c000ef7c:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ef83:	eb 13                	jmp    c000ef98 <scanMADT()+0x494>
c000ef85:	8d 76 00             	lea    esi,[esi+0x0]
c000ef88:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ef8d:	83 f8 05             	cmp    eax,0x5
c000ef90:	75 06                	jne    c000ef98 <scanMADT()+0x494>
c000ef92:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ef97:	90                   	nop
c000ef98:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ef9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efa1:	01 d0                	add    eax,edx
c000efa3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000efa7:	e9 50 fc ff ff       	jmp    c000ebfc <scanMADT()+0xf8>
c000efac:	90                   	nop
c000efad:	eb 05                	jmp    c000efb4 <scanMADT()+0x4b0>
c000efaf:	90                   	nop
c000efb0:	90                   	nop
c000efb1:	8d 76 00             	lea    esi,[esi+0x0]
c000efb4:	83 c4 38             	add    esp,0x38
c000efb7:	5b                   	pop    ebx
c000efb8:	c3                   	ret    
c000efb9:	90                   	nop
c000efba:	66 90                	xchg   ax,ax

c000efbc <ACPI::ACPI()>:
c000efbc:	83 ec 0c             	sub    esp,0xc
c000efbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efc3:	83 ec 08             	sub    esp,0x8
c000efc6:	68 51 10 02 c0       	push   0xc0021051
c000efcb:	50                   	push   eax
c000efcc:	e8 3b d2 ff ff       	call   c000c20c <Device::Device(char const*)>
c000efd1:	83 c4 10             	add    esp,0x10
c000efd4:	ba c0 11 02 c0       	mov    edx,0xc00211c0
c000efd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efdd:	89 10                	mov    DWORD PTR [eax],edx
c000efdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efe3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000efea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efee:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000eff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000effc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f006:	e8 f9 fa ff ff       	call   c000eb04 <scanMADT()>
c000f00b:	90                   	nop
c000f00c:	83 c4 0c             	add    esp,0xc
c000f00f:	c3                   	ret    

c000f010 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f010:	83 ec 2c             	sub    esp,0x2c
c000f013:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f017:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f01b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f01f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f023:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f028:	88 c8                	mov    al,cl
c000f02a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f02e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f033:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f03b:	90                   	nop
c000f03c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f040:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f046:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f04a:	0f 8d b0 00 00 00    	jge    c000f100 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f050:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f054:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f058:	83 c2 2a             	add    edx,0x2a
c000f05b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f05f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f064:	0f b7 c0             	movzx  eax,ax
c000f067:	39 c2                	cmp    edx,eax
c000f069:	0f 85 85 00 00 00    	jne    c000f0f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f06f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f073:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f077:	83 c2 2a             	add    edx,0x2a
c000f07a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f07e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f083:	0f b6 c0             	movzx  eax,al
c000f086:	39 c2                	cmp    edx,eax
c000f088:	75 6a                	jne    c000f0f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f08a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f08f:	85 c0                	test   eax,eax
c000f091:	74 3d                	je     c000f0d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f093:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f097:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f09b:	83 c2 2a             	add    edx,0x2a
c000f09e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0a9:	39 c2                	cmp    edx,eax
c000f0ab:	74 13                	je     c000f0c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f0ad:	83 ec 0c             	sub    esp,0xc
c000f0b0:	68 cc 0f 02 c0       	push   0xc0020fcc
c000f0b5:	e8 83 1a 00 00       	call   c0010b3d <KePanic(char const*)>
c000f0ba:	83 c4 10             	add    esp,0x10
c000f0bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c0:	83 ec 0c             	sub    esp,0xc
c000f0c3:	68 56 10 02 c0       	push   0xc0021056
c000f0c8:	e8 70 1a 00 00       	call   c0010b3d <KePanic(char const*)>
c000f0cd:	83 c4 10             	add    esp,0x10
c000f0d0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f0d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f0d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f0dc:	83 c2 2a             	add    edx,0x2a
c000f0df:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f0e3:	8b 02                	mov    eax,DWORD PTR [edx]
c000f0e5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f0e8:	89 01                	mov    DWORD PTR [ecx],eax
c000f0ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f0ed:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f0f2:	66 90                	xchg   ax,ax
c000f0f4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f0f9:	e9 3e ff ff ff       	jmp    c000f03c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f0fe:	66 90                	xchg   ax,ax
c000f100:	90                   	nop
c000f101:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f105:	83 c4 2c             	add    esp,0x2c
c000f108:	c2 04 00             	ret    0x4
c000f10b:	90                   	nop

c000f10c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f10c:	83 ec 1c             	sub    esp,0x1c
c000f10f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f113:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f117:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f11b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f120:	88 c8                	mov    al,cl
c000f122:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f126:	88 d0                	mov    al,dl
c000f128:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f12c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f130:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f13a:	83 c2 2a             	add    edx,0x2a
c000f13d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f141:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f149:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f14f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f153:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f15a:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f15f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f163:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f169:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f16d:	83 c0 01             	add    eax,0x1
c000f170:	88 c1                	mov    cl,al
c000f172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f176:	83 c2 2a             	add    edx,0x2a
c000f179:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f17d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f181:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f18b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f18e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f192:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f19a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f1a0:	8d 50 01             	lea    edx,[eax+0x1]
c000f1a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1a7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f1ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1b1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f1b7:	3d 00 02 00 00       	cmp    eax,0x200
c000f1bc:	75 12                	jne    c000f1d0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f1be:	83 ec 0c             	sub    esp,0xc
c000f1c1:	68 65 10 02 c0       	push   0xc0021065
c000f1c6:	e8 72 19 00 00       	call   c0010b3d <KePanic(char const*)>
c000f1cb:	83 c4 10             	add    esp,0x10
c000f1ce:	66 90                	xchg   ax,ax
c000f1d0:	90                   	nop
c000f1d1:	83 c4 1c             	add    esp,0x1c
c000f1d4:	c3                   	ret    
c000f1d5:	90                   	nop
c000f1d6:	66 90                	xchg   ax,ax

c000f1d8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f1d8:	b8 00 00 00 00       	mov    eax,0x0
c000f1dd:	c3                   	ret    
c000f1de:	66 90                	xchg   ax,ax

c000f1e0 <ACPI::detectPCI()>:
c000f1e0:	53                   	push   ebx
c000f1e1:	83 ec 28             	sub    esp,0x28
c000f1e4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f1e9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f1ee:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f1f3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1f9:	83 e0 04             	and    eax,0x4
c000f1fc:	0f b6 c0             	movzx  eax,al
c000f1ff:	85 c0                	test   eax,eax
c000f201:	74 2d                	je     c000f230 <ACPI::detectPCI()+0x50>
c000f203:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f208:	83 ec 08             	sub    esp,0x8
c000f20b:	68 82 10 02 c0       	push   0xc0021082
c000f210:	50                   	push   eax
c000f211:	e8 6e f8 ff ff       	call   c000ea84 <findDataTable(unsigned char*, char*)>
c000f216:	83 c4 10             	add    esp,0x10
c000f219:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f21d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f222:	74 0c                	je     c000f230 <ACPI::detectPCI()+0x50>
c000f224:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f229:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f22e:	66 90                	xchg   ax,ax
c000f230:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f238:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f23c:	8a 00                	mov    al,BYTE PTR [eax]
c000f23e:	0f b6 c0             	movzx  eax,al
c000f241:	83 f8 01             	cmp    eax,0x1
c000f244:	75 0e                	jne    c000f254 <ACPI::detectPCI()+0x74>
c000f246:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f24b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f250:	eb 2e                	jmp    c000f280 <ACPI::detectPCI()+0xa0>
c000f252:	66 90                	xchg   ax,ax
c000f254:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f258:	8a 00                	mov    al,BYTE PTR [eax]
c000f25a:	0f b6 c0             	movzx  eax,al
c000f25d:	83 f8 02             	cmp    eax,0x2
c000f260:	75 1e                	jne    c000f280 <ACPI::detectPCI()+0xa0>
c000f262:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f267:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f26c:	85 c0                	test   eax,eax
c000f26e:	74 10                	je     c000f280 <ACPI::detectPCI()+0xa0>
c000f270:	83 ec 0c             	sub    esp,0xc
c000f273:	68 fc 0f 02 c0       	push   0xc0020ffc
c000f278:	e8 c0 18 00 00       	call   c0010b3d <KePanic(char const*)>
c000f27d:	83 c4 10             	add    esp,0x10
c000f280:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f284:	83 f0 01             	xor    eax,0x1
c000f287:	0f b6 c0             	movzx  eax,al
c000f28a:	85 c0                	test   eax,eax
c000f28c:	74 46                	je     c000f2d4 <ACPI::detectPCI()+0xf4>
c000f28e:	e8 9d 0e ff ff       	call   c0000130 <manualPCIProbe>
c000f293:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f297:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f29c:	75 0e                	jne    c000f2ac <ACPI::detectPCI()+0xcc>
c000f29e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f2a3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f2a8:	eb 2a                	jmp    c000f2d4 <ACPI::detectPCI()+0xf4>
c000f2aa:	66 90                	xchg   ax,ax
c000f2ac:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f2b1:	75 21                	jne    c000f2d4 <ACPI::detectPCI()+0xf4>
c000f2b3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f2b8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f2bd:	85 c0                	test   eax,eax
c000f2bf:	74 13                	je     c000f2d4 <ACPI::detectPCI()+0xf4>
c000f2c1:	83 ec 0c             	sub    esp,0xc
c000f2c4:	68 fc 0f 02 c0       	push   0xc0020ffc
c000f2c9:	e8 6f 18 00 00       	call   c0010b3d <KePanic(char const*)>
c000f2ce:	83 c4 10             	add    esp,0x10
c000f2d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2d4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f2d9:	85 c0                	test   eax,eax
c000f2db:	0f 84 87 00 00 00    	je     c000f368 <ACPI::detectPCI()+0x188>
c000f2e1:	83 ec 0c             	sub    esp,0xc
c000f2e4:	68 87 10 02 c0       	push   0xc0021087
c000f2e9:	e8 99 11 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c000f2ee:	83 c4 10             	add    esp,0x10
c000f2f1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f2f9:	83 ec 0c             	sub    esp,0xc
c000f2fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f300:	e8 c6 87 ff ff       	call   c0007acb <malloc>
c000f305:	83 c4 10             	add    esp,0x10
c000f308:	89 c3                	mov    ebx,eax
c000f30a:	83 ec 0c             	sub    esp,0xc
c000f30d:	53                   	push   ebx
c000f30e:	e8 d3 b0 00 00       	call   c001a3e6 <PCI::PCI()>
c000f313:	83 c4 10             	add    esp,0x10
c000f316:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f31a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f31e:	83 ec 08             	sub    esp,0x8
c000f321:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f325:	50                   	push   eax
c000f326:	e8 49 cd ff ff       	call   c000c074 <Device::addChild(Device*)>
c000f32b:	83 c4 10             	add    esp,0x10
c000f32e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f332:	8b 00                	mov    eax,DWORD PTR [eax]
c000f334:	83 c0 08             	add    eax,0x8
c000f337:	8b 00                	mov    eax,DWORD PTR [eax]
c000f339:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f33e:	85 d2                	test   edx,edx
c000f340:	74 0a                	je     c000f34c <ACPI::detectPCI()+0x16c>
c000f342:	ba 01 00 00 00       	mov    edx,0x1
c000f347:	eb 0b                	jmp    c000f354 <ACPI::detectPCI()+0x174>
c000f349:	8d 76 00             	lea    esi,[esi+0x0]
c000f34c:	ba 02 00 00 00       	mov    edx,0x2
c000f351:	8d 76 00             	lea    esi,[esi+0x0]
c000f354:	6a 00                	push   0x0
c000f356:	6a 00                	push   0x0
c000f358:	52                   	push   edx
c000f359:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f35d:	ff d0                	call   eax
c000f35f:	83 c4 10             	add    esp,0x10
c000f362:	e9 91 00 00 00       	jmp    c000f3f8 <ACPI::detectPCI()+0x218>
c000f367:	90                   	nop
c000f368:	83 ec 0c             	sub    esp,0xc
c000f36b:	68 9f 10 02 c0       	push   0xc002109f
c000f370:	e8 12 11 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c000f375:	83 c4 10             	add    esp,0x10
c000f378:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f37f:	83 ec 0c             	sub    esp,0xc
c000f382:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f386:	e8 40 87 ff ff       	call   c0007acb <malloc>
c000f38b:	83 c4 10             	add    esp,0x10
c000f38e:	89 c3                	mov    ebx,eax
c000f390:	83 ec 0c             	sub    esp,0xc
c000f393:	53                   	push   ebx
c000f394:	e8 f5 bb 00 00       	call   c001af8e <IDE::IDE()>
c000f399:	83 c4 10             	add    esp,0x10
c000f39c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f3a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f3a4:	83 ec 08             	sub    esp,0x8
c000f3a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f3ab:	50                   	push   eax
c000f3ac:	e8 c3 cc ff ff       	call   c000c074 <Device::addChild(Device*)>
c000f3b1:	83 c4 10             	add    esp,0x10
c000f3b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3b8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f3c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3c6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f3cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3d3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f3dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3e2:	83 c0 08             	add    eax,0x8
c000f3e5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3e7:	6a 00                	push   0x0
c000f3e9:	6a 00                	push   0x0
c000f3eb:	6a 00                	push   0x0
c000f3ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f3f1:	ff d0                	call   eax
c000f3f3:	83 c4 10             	add    esp,0x10
c000f3f6:	66 90                	xchg   ax,ax
c000f3f8:	90                   	nop
c000f3f9:	83 c4 28             	add    esp,0x28
c000f3fc:	5b                   	pop    ebx
c000f3fd:	c3                   	ret    
c000f3fe:	66 90                	xchg   ax,ax

c000f400 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f400:	83 ec 1c             	sub    esp,0x1c
c000f403:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f407:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f40a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f40e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f413:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f418:	83 ec 08             	sub    esp,0x8
c000f41b:	52                   	push   edx
c000f41c:	50                   	push   eax
c000f41d:	e8 70 7d ff ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c000f422:	83 c4 10             	add    esp,0x10
c000f425:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f429:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f42e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f433:	83 ec 04             	sub    esp,0x4
c000f436:	6a 01                	push   0x1
c000f438:	52                   	push   edx
c000f439:	50                   	push   eax
c000f43a:	e8 6b 7e ff ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c000f43f:	83 c4 10             	add    esp,0x10
c000f442:	90                   	nop
c000f443:	83 c4 1c             	add    esp,0x1c
c000f446:	c3                   	ret    
c000f447:	90                   	nop

c000f448 <ACPI::sleep()>:
c000f448:	83 ec 0c             	sub    esp,0xc
c000f44b:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f450:	85 c0                	test   eax,eax
c000f452:	74 08                	je     c000f45c <ACPI::sleep()+0x14>
c000f454:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f459:	ff d0                	call   eax
c000f45b:	90                   	nop
c000f45c:	90                   	nop
c000f45d:	83 c4 0c             	add    esp,0xc
c000f460:	c3                   	ret    
c000f461:	90                   	nop
c000f462:	66 90                	xchg   ax,ax

c000f464 <ACPI::open(int, int, void*)>:
c000f464:	55                   	push   ebp
c000f465:	89 e5                	mov    ebp,esp
c000f467:	53                   	push   ebx
c000f468:	81 ec 74 01 00 00    	sub    esp,0x174
c000f46e:	83 ec 0c             	sub    esp,0xc
c000f471:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f474:	e8 67 fd ff ff       	call   c000f1e0 <ACPI::detectPCI()>
c000f479:	83 c4 10             	add    esp,0x10
c000f47c:	83 ec 0c             	sub    esp,0xc
c000f47f:	68 24 10 02 c0       	push   0xc0021024
c000f484:	e8 fe 0f 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c000f489:	83 c4 10             	add    esp,0x10
c000f48c:	b8 4c 05 00 00       	mov    eax,0x54c
c000f491:	8a 00                	mov    al,BYTE PTR [eax]
c000f493:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000f496:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f49a:	83 f8 01             	cmp    eax,0x1
c000f49d:	75 15                	jne    c000f4b4 <ACPI::open(int, int, void*)+0x50>
c000f49f:	83 ec 0c             	sub    esp,0xc
c000f4a2:	68 b4 10 02 c0       	push   0xc00210b4
c000f4a7:	e8 aa 49 00 00       	call   c0013e56 <Thr::loadKernelSymbolTable(char const*)>
c000f4ac:	83 c4 10             	add    esp,0x10
c000f4af:	eb 33                	jmp    c000f4e4 <ACPI::open(int, int, void*)+0x80>
c000f4b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4b4:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f4b8:	3d bb 00 00 00       	cmp    eax,0xbb
c000f4bd:	75 15                	jne    c000f4d4 <ACPI::open(int, int, void*)+0x70>
c000f4bf:	83 ec 0c             	sub    esp,0xc
c000f4c2:	68 d2 10 02 c0       	push   0xc00210d2
c000f4c7:	e8 8a 49 00 00       	call   c0013e56 <Thr::loadKernelSymbolTable(char const*)>
c000f4cc:	83 c4 10             	add    esp,0x10
c000f4cf:	eb 13                	jmp    c000f4e4 <ACPI::open(int, int, void*)+0x80>
c000f4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4d4:	83 ec 0c             	sub    esp,0xc
c000f4d7:	68 f0 10 02 c0       	push   0xc00210f0
c000f4dc:	e8 5c 16 00 00       	call   c0010b3d <KePanic(char const*)>
c000f4e1:	83 c4 10             	add    esp,0x10
c000f4e4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f4e8:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000f4ef:	83 ec 0c             	sub    esp,0xc
c000f4f2:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000f4f5:	e8 d1 85 ff ff       	call   c0007acb <malloc>
c000f4fa:	83 c4 10             	add    esp,0x10
c000f4fd:	89 c3                	mov    ebx,eax
c000f4ff:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f504:	83 ec 04             	sub    esp,0x4
c000f507:	50                   	push   eax
c000f508:	68 0a 11 02 c0       	push   0xc002110a
c000f50d:	53                   	push   ebx
c000f50e:	e8 a7 bc ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c000f513:	83 c4 10             	add    esp,0x10
c000f516:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f519:	83 ec 08             	sub    esp,0x8
c000f51c:	6a 01                	push   0x1
c000f51e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f521:	e8 50 bd ff ff       	call   c000b276 <File::open(FileOpenMode)>
c000f526:	83 c4 10             	add    esp,0x10
c000f529:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f52c:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000f530:	75 12                	jne    c000f544 <ACPI::open(int, int, void*)+0xe0>
c000f532:	83 ec 0c             	sub    esp,0xc
c000f535:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f538:	e8 97 bd ff ff       	call   c000b2d4 <File::close()>
c000f53d:	83 c4 10             	add    esp,0x10
c000f540:	eb 06                	jmp    c000f548 <ACPI::open(int, int, void*)+0xe4>
c000f542:	66 90                	xchg   ax,ax
c000f544:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f548:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000f54c:	74 16                	je     c000f564 <ACPI::open(int, int, void*)+0x100>
c000f54e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f551:	8b 00                	mov    eax,DWORD PTR [eax]
c000f553:	83 c0 08             	add    eax,0x8
c000f556:	8b 00                	mov    eax,DWORD PTR [eax]
c000f558:	83 ec 0c             	sub    esp,0xc
c000f55b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f55e:	ff d0                	call   eax
c000f560:	83 c4 10             	add    esp,0x10
c000f563:	90                   	nop
c000f564:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000f567:	83 f0 01             	xor    eax,0x1
c000f56a:	0f b6 c0             	movzx  eax,al
c000f56d:	85 c0                	test   eax,eax
c000f56f:	74 3b                	je     c000f5ac <ACPI::open(int, int, void*)+0x148>
c000f571:	83 ec 0c             	sub    esp,0xc
c000f574:	68 28 11 02 c0       	push   0xc0021128
c000f579:	e8 09 0f 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	83 ec 04             	sub    esp,0x4
c000f584:	6a 0c                	push   0xc
c000f586:	68 43 11 02 c0       	push   0xc0021143
c000f58b:	68 54 11 02 c0       	push   0xc0021154
c000f590:	e8 69 3c 00 00       	call   c00131fe <Reg::readIntWithDefault(char*, char*, int)>
c000f595:	83 c4 10             	add    esp,0x10
c000f598:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f59b:	83 ec 0c             	sub    esp,0xc
c000f59e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f5a1:	e8 68 a2 ff ff       	call   c000980e <Virt::setupPageSwapping(int)>
c000f5a6:	83 c4 10             	add    esp,0x10
c000f5a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f5ac:	83 ec 0c             	sub    esp,0xc
c000f5af:	68 95 fd 01 c0       	push   0xc001fd95
c000f5b4:	e8 ce 0e 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c000f5b9:	83 c4 10             	add    esp,0x10
c000f5bc:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f5bf:	83 ec 08             	sub    esp,0x8
c000f5c2:	6a 13                	push   0x13
c000f5c4:	50                   	push   eax
c000f5c5:	e8 c2 cd ff ff       	call   c000c38c <getDevicesOfType(DeviceType)>
c000f5ca:	83 c4 0c             	add    esp,0xc
c000f5cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d0:	83 ec 0c             	sub    esp,0xc
c000f5d3:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f5d6:	50                   	push   eax
c000f5d7:	e8 b4 fb 00 00       	call   c001f190 <LinkedList<Device>::isEmpty()>
c000f5dc:	83 c4 10             	add    esp,0x10
c000f5df:	83 f0 01             	xor    eax,0x1
c000f5e2:	0f b6 c0             	movzx  eax,al
c000f5e5:	85 c0                	test   eax,eax
c000f5e7:	0f 84 1f 01 00 00    	je     c000f70c <ACPI::open(int, int, void*)+0x2a8>
c000f5ed:	83 ec 0c             	sub    esp,0xc
c000f5f0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f5f3:	50                   	push   eax
c000f5f4:	e8 b3 fb 00 00       	call   c001f1ac <LinkedList<Device>::getFirstElement()>
c000f5f9:	83 c4 10             	add    esp,0x10
c000f5fc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000f5ff:	83 ec 0c             	sub    esp,0xc
c000f602:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f605:	50                   	push   eax
c000f606:	e8 a9 fb 00 00       	call   c001f1b4 <LinkedList<Device>::removeFirst()>
c000f60b:	83 c4 10             	add    esp,0x10
c000f60e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000f611:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f614:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000f617:	b8 24 00 00 00       	mov    eax,0x24
c000f61c:	83 e0 fc             	and    eax,0xfffffffc
c000f61f:	89 c3                	mov    ebx,eax
c000f621:	b8 00 00 00 00       	mov    eax,0x0
c000f626:	66 90                	xchg   ax,ax
c000f628:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f62f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000f636:	83 c0 04             	add    eax,0x4
c000f639:	39 d8                	cmp    eax,ebx
c000f63b:	72 eb                	jb     c000f628 <ACPI::open(int, int, void*)+0x1c4>
c000f63d:	83 ec 08             	sub    esp,0x8
c000f640:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000f646:	50                   	push   eax
c000f647:	83 ec 24             	sub    esp,0x24
c000f64a:	89 e1                	mov    ecx,esp
c000f64c:	b8 24 00 00 00       	mov    eax,0x24
c000f651:	83 e0 fc             	and    eax,0xfffffffc
c000f654:	89 c3                	mov    ebx,eax
c000f656:	b8 00 00 00 00       	mov    eax,0x0
c000f65b:	90                   	nop
c000f65c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000f663:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000f666:	83 c0 04             	add    eax,0x4
c000f669:	39 d8                	cmp    eax,ebx
c000f66b:	72 ef                	jb     c000f65c <ACPI::open(int, int, void*)+0x1f8>
c000f66d:	e8 5c b2 00 00       	call   c001a8ce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f672:	83 c4 30             	add    esp,0x30
c000f675:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000f678:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000f67c:	0f 84 4e ff ff ff    	je     c000f5d0 <ACPI::open(int, int, void*)+0x16c>
c000f682:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000f689:	83 ec 0c             	sub    esp,0xc
c000f68c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000f68f:	e8 37 84 ff ff       	call   c0007acb <malloc>
c000f694:	83 c4 10             	add    esp,0x10
c000f697:	89 c3                	mov    ebx,eax
c000f699:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f69e:	83 ec 04             	sub    esp,0x4
c000f6a1:	50                   	push   eax
c000f6a2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f6a5:	53                   	push   ebx
c000f6a6:	e8 0f bb ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c000f6ab:	83 c4 10             	add    esp,0x10
c000f6ae:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000f6b1:	83 ec 0c             	sub    esp,0xc
c000f6b4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f6b7:	e8 28 be ff ff       	call   c000b4e4 <File::exists()>
c000f6bc:	83 c4 10             	add    esp,0x10
c000f6bf:	0f b6 c0             	movzx  eax,al
c000f6c2:	85 c0                	test   eax,eax
c000f6c4:	74 22                	je     c000f6e8 <ACPI::open(int, int, void*)+0x284>
c000f6c6:	83 ec 08             	sub    esp,0x8
c000f6c9:	6a 01                	push   0x1
c000f6cb:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f6ce:	e8 2d 52 00 00       	call   c0014900 <Thr::loadDLL(char const*, bool)>
c000f6d3:	83 c4 10             	add    esp,0x10
c000f6d6:	83 ec 08             	sub    esp,0x8
c000f6d9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f6dc:	50                   	push   eax
c000f6dd:	e8 5e 54 00 00       	call   c0014b40 <Thr::executeDLL(unsigned long, void*)>
c000f6e2:	83 c4 10             	add    esp,0x10
c000f6e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f6e8:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000f6ec:	0f 84 de fe ff ff    	je     c000f5d0 <ACPI::open(int, int, void*)+0x16c>
c000f6f2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f6f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6f7:	83 c0 08             	add    eax,0x8
c000f6fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6fc:	83 ec 0c             	sub    esp,0xc
c000f6ff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f702:	ff d0                	call   eax
c000f704:	83 c4 10             	add    esp,0x10
c000f707:	e9 c4 fe ff ff       	jmp    c000f5d0 <ACPI::open(int, int, void*)+0x16c>
c000f70c:	83 ec 0c             	sub    esp,0xc
c000f70f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f712:	50                   	push   eax
c000f713:	e8 74 fa 00 00       	call   c001f18c <LinkedList<Device>::~LinkedList()>
c000f718:	83 c4 10             	add    esp,0x10
c000f71b:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f721:	83 ec 08             	sub    esp,0x8
c000f724:	6a 01                	push   0x1
c000f726:	68 5b 11 02 c0       	push   0xc002115b
c000f72b:	e8 d0 51 00 00       	call   c0014900 <Thr::loadDLL(char const*, bool)>
c000f730:	83 c4 10             	add    esp,0x10
c000f733:	83 ec 08             	sub    esp,0x8
c000f736:	53                   	push   ebx
c000f737:	50                   	push   eax
c000f738:	e8 03 54 00 00       	call   c0014b40 <Thr::executeDLL(unsigned long, void*)>
c000f73d:	83 c4 10             	add    esp,0x10
c000f740:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f745:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f74b:	83 e0 04             	and    eax,0x4
c000f74e:	0f b6 c0             	movzx  eax,al
c000f751:	85 c0                	test   eax,eax
c000f753:	0f 84 e3 00 00 00    	je     c000f83c <ACPI::open(int, int, void*)+0x3d8>
c000f759:	83 ec 0c             	sub    esp,0xc
c000f75c:	68 78 11 02 c0       	push   0xc0021178
c000f761:	e8 21 0d 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c000f766:	83 c4 10             	add    esp,0x10
c000f769:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000f770:	83 ec 0c             	sub    esp,0xc
c000f773:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000f776:	e8 50 83 ff ff       	call   c0007acb <malloc>
c000f77b:	83 c4 10             	add    esp,0x10
c000f77e:	89 c3                	mov    ebx,eax
c000f780:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f785:	83 ec 04             	sub    esp,0x4
c000f788:	50                   	push   eax
c000f789:	68 95 11 02 c0       	push   0xc0021195
c000f78e:	53                   	push   ebx
c000f78f:	e8 26 ba ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c000f794:	83 c4 10             	add    esp,0x10
c000f797:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000f79a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f79e:	74 1c                	je     c000f7bc <ACPI::open(int, int, void*)+0x358>
c000f7a0:	83 ec 0c             	sub    esp,0xc
c000f7a3:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f7a6:	e8 39 bd ff ff       	call   c000b4e4 <File::exists()>
c000f7ab:	83 c4 10             	add    esp,0x10
c000f7ae:	0f b6 c0             	movzx  eax,al
c000f7b1:	85 c0                	test   eax,eax
c000f7b3:	74 07                	je     c000f7bc <ACPI::open(int, int, void*)+0x358>
c000f7b5:	b0 01                	mov    al,0x1
c000f7b7:	eb 07                	jmp    c000f7c0 <ACPI::open(int, int, void*)+0x35c>
c000f7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f7bc:	b0 00                	mov    al,0x0
c000f7be:	66 90                	xchg   ax,ax
c000f7c0:	0f b6 c0             	movzx  eax,al
c000f7c3:	85 c0                	test   eax,eax
c000f7c5:	74 21                	je     c000f7e8 <ACPI::open(int, int, void*)+0x384>
c000f7c7:	83 ec 08             	sub    esp,0x8
c000f7ca:	6a 01                	push   0x1
c000f7cc:	68 95 11 02 c0       	push   0xc0021195
c000f7d1:	e8 2a 51 00 00       	call   c0014900 <Thr::loadDLL(char const*, bool)>
c000f7d6:	83 c4 10             	add    esp,0x10
c000f7d9:	83 ec 08             	sub    esp,0x8
c000f7dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f7df:	50                   	push   eax
c000f7e0:	e8 5b 53 00 00       	call   c0014b40 <Thr::executeDLL(unsigned long, void*)>
c000f7e5:	83 c4 10             	add    esp,0x10
c000f7e8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f7ec:	74 1e                	je     c000f80c <ACPI::open(int, int, void*)+0x3a8>
c000f7ee:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f7f2:	74 18                	je     c000f80c <ACPI::open(int, int, void*)+0x3a8>
c000f7f4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000f7f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f9:	83 c0 08             	add    eax,0x8
c000f7fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7fe:	83 ec 0c             	sub    esp,0xc
c000f801:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f804:	ff d0                	call   eax
c000f806:	83 c4 10             	add    esp,0x10
c000f809:	8d 76 00             	lea    esi,[esi+0x0]
c000f80c:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f811:	83 ec 08             	sub    esp,0x8
c000f814:	68 b2 11 02 c0       	push   0xc00211b2
c000f819:	50                   	push   eax
c000f81a:	e8 65 f2 ff ff       	call   c000ea84 <findDataTable(unsigned char*, char*)>
c000f81f:	83 c4 10             	add    esp,0x10
c000f822:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f825:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000f829:	74 11                	je     c000f83c <ACPI::open(int, int, void*)+0x3d8>
c000f82b:	83 ec 08             	sub    esp,0x8
c000f82e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000f831:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f834:	e8 c7 fb ff ff       	call   c000f400 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f839:	83 c4 10             	add    esp,0x10
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f844:	c9                   	leave  
c000f845:	c3                   	ret    

c000f846 <CPU::close(int, int, void*)>:
c000f846:	31 c0                	xor    eax,eax
c000f848:	c3                   	ret    
c000f849:	90                   	nop

c000f84a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f84a:	60                   	pusha  
c000f84b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f84f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f853:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f857:	9c                   	pushf  
c000f858:	fa                   	cli    
c000f859:	0f 09                	wbinvd 
c000f85b:	0f 30                	wrmsr  
c000f85d:	9d                   	popf   
c000f85e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f862:	89 02                	mov    DWORD PTR [edx],eax
c000f864:	61                   	popa   
c000f865:	c3                   	ret    

c000f866 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f866:	60                   	pusha  
c000f867:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f86b:	9c                   	pushf  
c000f86c:	fa                   	cli    
c000f86d:	0f 09                	wbinvd 
c000f86f:	31 c0                	xor    eax,eax
c000f871:	31 d2                	xor    edx,edx
c000f873:	0f 32                	rdmsr  
c000f875:	9d                   	popf   
c000f876:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f87a:	89 02                	mov    DWORD PTR [edx],eax
c000f87c:	61                   	popa   
c000f87d:	c3                   	ret    

c000f87e <CPU::AMD_K6_writeback(int, int, int)>:
c000f87e:	56                   	push   esi
c000f87f:	53                   	push   ebx
c000f880:	83 ec 10             	sub    esp,0x10
c000f883:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f888:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f88c:	75 5d                	jne    c000f8eb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f88e:	83 f8 08             	cmp    eax,0x8
c000f891:	75 09                	jne    c000f89c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f893:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f898:	7e 13                	jle    c000f8ad <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f89a:	eb 30                	jmp    c000f8cc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f89c:	83 f8 06             	cmp    eax,0x6
c000f89f:	7c 4a                	jl     c000f8eb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f8a1:	83 f8 07             	cmp    eax,0x7
c000f8a4:	7e 07                	jle    c000f8ad <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f8a6:	83 f8 09             	cmp    eax,0x9
c000f8a9:	74 21                	je     c000f8cc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f8ab:	eb 3e                	jmp    c000f8eb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f8ad:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f8b3:	89 e6                	mov    esi,esp
c000f8b5:	56                   	push   esi
c000f8b6:	68 82 00 00 c0       	push   0xc0000082
c000f8bb:	e8 a6 ff ff ff       	call   c000f866 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f8c0:	c1 eb 15             	shr    ebx,0x15
c000f8c3:	56                   	push   esi
c000f8c4:	83 e3 7e             	and    ebx,0x7e
c000f8c7:	6a 00                	push   0x0
c000f8c9:	53                   	push   ebx
c000f8ca:	eb 12                	jmp    c000f8de <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f8cc:	89 e3                	mov    ebx,esp
c000f8ce:	53                   	push   ebx
c000f8cf:	68 82 00 00 c0       	push   0xc0000082
c000f8d4:	e8 8d ff ff ff       	call   c000f866 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f8d9:	53                   	push   ebx
c000f8da:	6a 00                	push   0x0
c000f8dc:	6a 00                	push   0x0
c000f8de:	68 82 00 00 c0       	push   0xc0000082
c000f8e3:	e8 62 ff ff ff       	call   c000f84a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f8e8:	83 c4 18             	add    esp,0x18
c000f8eb:	83 c4 10             	add    esp,0x10
c000f8ee:	5b                   	pop    ebx
c000f8ef:	5e                   	pop    esi
c000f8f0:	c3                   	ret    
c000f8f1:	90                   	nop

c000f8f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f8f2:	55                   	push   ebp
c000f8f3:	57                   	push   edi
c000f8f4:	56                   	push   esi
c000f8f5:	53                   	push   ebx
c000f8f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8fa:	39 05 78 27 02 c0    	cmp    DWORD PTR ds:0xc0022778,eax
c000f900:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f904:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f908:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f90c:	75 23                	jne    c000f931 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f90e:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f913:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f917:	89 06                	mov    DWORD PTR [esi],eax
c000f919:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f91e:	89 07                	mov    DWORD PTR [edi],eax
c000f920:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f925:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f928:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f92d:	89 02                	mov    DWORD PTR [edx],eax
c000f92f:	eb 3f                	jmp    c000f970 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f931:	31 c9                	xor    ecx,ecx
c000f933:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f937:	0f a2                	cpuid  
c000f939:	89 06                	mov    DWORD PTR [esi],eax
c000f93b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f93f:	89 1f                	mov    DWORD PTR [edi],ebx
c000f941:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f944:	89 10                	mov    DWORD PTR [eax],edx
c000f946:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f94a:	a3 78 27 02 c0       	mov    ds:0xc0022778,eax
c000f94f:	8b 06                	mov    eax,DWORD PTR [esi]
c000f951:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f956:	8b 07                	mov    eax,DWORD PTR [edi]
c000f958:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f95d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f960:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f965:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f969:	8b 00                	mov    eax,DWORD PTR [eax]
c000f96b:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f970:	5b                   	pop    ebx
c000f971:	5e                   	pop    esi
c000f972:	5f                   	pop    edi
c000f973:	5d                   	pop    ebp
c000f974:	c3                   	ret    
c000f975:	90                   	nop

c000f976 <CPU::cpuidCheckEDX(unsigned int)>:
c000f976:	83 ec 10             	sub    esp,0x10
c000f979:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f97d:	50                   	push   eax
c000f97e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f982:	50                   	push   eax
c000f983:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f987:	50                   	push   eax
c000f988:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f98c:	50                   	push   eax
c000f98d:	6a 01                	push   0x1
c000f98f:	e8 5e ff ff ff       	call   c000f8f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f994:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f998:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f99c:	0f 95 c0             	setne  al
c000f99f:	83 c4 24             	add    esp,0x24
c000f9a2:	c3                   	ret    
c000f9a3:	90                   	nop

c000f9a4 <CPU::cpuidCheckECX(unsigned int)>:
c000f9a4:	83 ec 10             	sub    esp,0x10
c000f9a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9ab:	50                   	push   eax
c000f9ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9b0:	50                   	push   eax
c000f9b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9b5:	50                   	push   eax
c000f9b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9ba:	50                   	push   eax
c000f9bb:	6a 01                	push   0x1
c000f9bd:	e8 30 ff ff ff       	call   c000f8f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9c6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f9ca:	0f 95 c0             	setne  al
c000f9cd:	83 c4 24             	add    esp,0x24
c000f9d0:	c3                   	ret    
c000f9d1:	90                   	nop

c000f9d2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f9d2:	83 ec 10             	sub    esp,0x10
c000f9d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9d9:	50                   	push   eax
c000f9da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9de:	50                   	push   eax
c000f9df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9e3:	50                   	push   eax
c000f9e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9e8:	50                   	push   eax
c000f9e9:	6a 07                	push   0x7
c000f9eb:	e8 02 ff ff ff       	call   c000f8f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9f4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f9f8:	0f 95 c0             	setne  al
c000f9fb:	83 c4 24             	add    esp,0x24
c000f9fe:	c3                   	ret    
c000f9ff:	90                   	nop

c000fa00 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000fa00:	83 ec 10             	sub    esp,0x10
c000fa03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa07:	50                   	push   eax
c000fa08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa0c:	50                   	push   eax
c000fa0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa11:	50                   	push   eax
c000fa12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa16:	50                   	push   eax
c000fa17:	6a 07                	push   0x7
c000fa19:	e8 d4 fe ff ff       	call   c000f8f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa22:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000fa26:	0f 95 c0             	setne  al
c000fa29:	83 c4 24             	add    esp,0x24
c000fa2c:	c3                   	ret    
c000fa2d:	90                   	nop

c000fa2e <CPU::CPU()>:
c000fa2e:	83 ec 0c             	sub    esp,0xc
c000fa31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa35:	83 ec 08             	sub    esp,0x8
c000fa38:	68 d5 12 02 c0       	push   0xc00212d5
c000fa3d:	50                   	push   eax
c000fa3e:	e8 c9 c7 ff ff       	call   c000c20c <Device::Device(char const*)>
c000fa43:	83 c4 10             	add    esp,0x10
c000fa46:	ba 68 13 02 c0       	mov    edx,0xc0021368
c000fa4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa4f:	89 10                	mov    DWORD PTR [eax],edx
c000fa51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa55:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000fa5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa63:	05 78 01 00 00       	add    eax,0x178
c000fa68:	83 ec 0c             	sub    esp,0xc
c000fa6b:	50                   	push   eax
c000fa6c:	e8 03 79 ff ff       	call   c0007374 <GDT::GDT()>
c000fa71:	83 c4 10             	add    esp,0x10
c000fa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa78:	05 7c 09 00 00       	add    eax,0x97c
c000fa7d:	83 ec 0c             	sub    esp,0xc
c000fa80:	50                   	push   eax
c000fa81:	e8 3e 7b ff ff       	call   c00075c4 <IDT::IDT()>
c000fa86:	83 c4 10             	add    esp,0x10
c000fa89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa8d:	05 7c 11 00 00       	add    eax,0x117c
c000fa92:	83 ec 0c             	sub    esp,0xc
c000fa95:	50                   	push   eax
c000fa96:	e8 85 94 ff ff       	call   c0008f20 <TSS::TSS()>
c000fa9b:	83 c4 10             	add    esp,0x10
c000fa9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faa2:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000faa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faad:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000fab7:	90                   	nop
c000fab8:	83 c4 0c             	add    esp,0xc
c000fabb:	c3                   	ret    

c000fabc <CPU::displayFeatures()>:
c000fabc:	c3                   	ret    
c000fabd:	90                   	nop

c000fabe <CPU::detectFeatures()>:
c000fabe:	55                   	push   ebp
c000fabf:	57                   	push   edi
c000fac0:	56                   	push   esi
c000fac1:	53                   	push   ebx
c000fac2:	83 ec 30             	sub    esp,0x30
c000fac5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fac9:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000fad3:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000fad9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000fae0:	6a 0d                	push   0xd
c000fae2:	6a 00                	push   0x0
c000fae4:	55                   	push   ebp
c000fae5:	e8 06 0a ff ff       	call   c00004f0 <memset>
c000faea:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000faef:	83 c4 10             	add    esp,0x10
c000faf2:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000faf9:	0f 84 db 05 00 00    	je     c00100da <CPU::detectFeatures()+0x61c>
c000faff:	83 ec 0c             	sub    esp,0xc
c000fb02:	89 ef                	mov    edi,ebp
c000fb04:	6a 10                	push   0x10
c000fb06:	e8 6b fe ff ff       	call   c000f976 <CPU::cpuidCheckEDX(unsigned int)>
c000fb0b:	83 e0 01             	and    eax,0x1
c000fb0e:	8d 14 00             	lea    edx,[eax+eax*1]
c000fb11:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb17:	83 e0 fd             	and    eax,0xfffffffd
c000fb1a:	09 d0                	or     eax,edx
c000fb1c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb22:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000fb29:	e8 48 fe ff ff       	call   c000f976 <CPU::cpuidCheckEDX(unsigned int)>
c000fb2e:	83 e0 01             	and    eax,0x1
c000fb31:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fb38:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb3e:	83 e0 fb             	and    eax,0xfffffffb
c000fb41:	09 d0                	or     eax,edx
c000fb43:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb49:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000fb50:	e8 21 fe ff ff       	call   c000f976 <CPU::cpuidCheckEDX(unsigned int)>
c000fb55:	83 e0 01             	and    eax,0x1
c000fb58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fb5f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb65:	83 e0 f7             	and    eax,0xfffffff7
c000fb68:	09 d0                	or     eax,edx
c000fb6a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb70:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000fb77:	e8 fa fd ff ff       	call   c000f976 <CPU::cpuidCheckEDX(unsigned int)>
c000fb7c:	83 e0 01             	and    eax,0x1
c000fb7f:	c1 e0 04             	shl    eax,0x4
c000fb82:	89 c2                	mov    edx,eax
c000fb84:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb8a:	83 e0 ef             	and    eax,0xffffffef
c000fb8d:	09 d0                	or     eax,edx
c000fb8f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb95:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000fb9c:	e8 d5 fd ff ff       	call   c000f976 <CPU::cpuidCheckEDX(unsigned int)>
c000fba1:	83 e0 01             	and    eax,0x1
c000fba4:	c1 e0 05             	shl    eax,0x5
c000fba7:	89 c2                	mov    edx,eax
c000fba9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbaf:	83 e0 df             	and    eax,0xffffffdf
c000fbb2:	09 d0                	or     eax,edx
c000fbb4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbba:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000fbc1:	e8 b0 fd ff ff       	call   c000f976 <CPU::cpuidCheckEDX(unsigned int)>
c000fbc6:	83 e0 01             	and    eax,0x1
c000fbc9:	8d 14 00             	lea    edx,[eax+eax*1]
c000fbcc:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fbd2:	83 e0 fd             	and    eax,0xfffffffd
c000fbd5:	09 d0                	or     eax,edx
c000fbd7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fbdd:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000fbe4:	e8 8d fd ff ff       	call   c000f976 <CPU::cpuidCheckEDX(unsigned int)>
c000fbe9:	83 e0 01             	and    eax,0x1
c000fbec:	c1 e0 06             	shl    eax,0x6
c000fbef:	89 c2                	mov    edx,eax
c000fbf1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fbf7:	83 e0 bf             	and    eax,0xffffffbf
c000fbfa:	09 d0                	or     eax,edx
c000fbfc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc02:	58                   	pop    eax
c000fc03:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc07:	50                   	push   eax
c000fc08:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc0c:	50                   	push   eax
c000fc0d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fc11:	56                   	push   esi
c000fc12:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc16:	50                   	push   eax
c000fc17:	6a 00                	push   0x0
c000fc19:	e8 d4 fc ff ff       	call   c000f8f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fc1e:	b8 04 00 00 00       	mov    eax,0x4
c000fc23:	89 c1                	mov    ecx,eax
c000fc25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc27:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fc2d:	89 c1                	mov    ecx,eax
c000fc2f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fc33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc35:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fc3b:	89 c1                	mov    ecx,eax
c000fc3d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fc41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc43:	83 c4 18             	add    esp,0x18
c000fc46:	68 e4 11 02 c0       	push   0xc00211e4
c000fc4b:	55                   	push   ebp
c000fc4c:	e8 2f 0b ff ff       	call   c0000780 <strcmp>
c000fc51:	83 c4 10             	add    esp,0x10
c000fc54:	85 c0                	test   eax,eax
c000fc56:	75 0f                	jne    c000fc67 <CPU::detectFeatures()+0x1a9>
c000fc58:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fc62:	e9 22 02 00 00       	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fc67:	50                   	push   eax
c000fc68:	50                   	push   eax
c000fc69:	68 f1 11 02 c0       	push   0xc00211f1
c000fc6e:	55                   	push   ebp
c000fc6f:	e8 0c 0b ff ff       	call   c0000780 <strcmp>
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	85 c0                	test   eax,eax
c000fc79:	74 dd                	je     c000fc58 <CPU::detectFeatures()+0x19a>
c000fc7b:	50                   	push   eax
c000fc7c:	50                   	push   eax
c000fc7d:	68 fe 11 02 c0       	push   0xc00211fe
c000fc82:	55                   	push   ebp
c000fc83:	e8 f8 0a ff ff       	call   c0000780 <strcmp>
c000fc88:	83 c4 10             	add    esp,0x10
c000fc8b:	85 c0                	test   eax,eax
c000fc8d:	74 2a                	je     c000fcb9 <CPU::detectFeatures()+0x1fb>
c000fc8f:	50                   	push   eax
c000fc90:	50                   	push   eax
c000fc91:	68 0b 12 02 c0       	push   0xc002120b
c000fc96:	55                   	push   ebp
c000fc97:	e8 e4 0a ff ff       	call   c0000780 <strcmp>
c000fc9c:	83 c4 10             	add    esp,0x10
c000fc9f:	85 c0                	test   eax,eax
c000fca1:	74 16                	je     c000fcb9 <CPU::detectFeatures()+0x1fb>
c000fca3:	50                   	push   eax
c000fca4:	50                   	push   eax
c000fca5:	68 18 12 02 c0       	push   0xc0021218
c000fcaa:	55                   	push   ebp
c000fcab:	e8 d0 0a ff ff       	call   c0000780 <strcmp>
c000fcb0:	83 c4 10             	add    esp,0x10
c000fcb3:	85 c0                	test   eax,eax
c000fcb5:	74 48                	je     c000fcff <CPU::detectFeatures()+0x241>
c000fcb7:	eb 0f                	jmp    c000fcc8 <CPU::detectFeatures()+0x20a>
c000fcb9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fcc3:	e9 c1 01 00 00       	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fcc8:	50                   	push   eax
c000fcc9:	50                   	push   eax
c000fcca:	68 25 12 02 c0       	push   0xc0021225
c000fccf:	55                   	push   ebp
c000fcd0:	e8 ab 0a ff ff       	call   c0000780 <strcmp>
c000fcd5:	83 c4 10             	add    esp,0x10
c000fcd8:	85 c0                	test   eax,eax
c000fcda:	74 23                	je     c000fcff <CPU::detectFeatures()+0x241>
c000fcdc:	57                   	push   edi
c000fcdd:	57                   	push   edi
c000fcde:	68 32 12 02 c0       	push   0xc0021232
c000fce3:	55                   	push   ebp
c000fce4:	e8 97 0a ff ff       	call   c0000780 <strcmp>
c000fce9:	83 c4 10             	add    esp,0x10
c000fcec:	85 c0                	test   eax,eax
c000fcee:	75 1e                	jne    c000fd0e <CPU::detectFeatures()+0x250>
c000fcf0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fcfa:	e9 8a 01 00 00       	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fcff:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fd09:	e9 7b 01 00 00       	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fd0e:	56                   	push   esi
c000fd0f:	56                   	push   esi
c000fd10:	68 3f 12 02 c0       	push   0xc002123f
c000fd15:	55                   	push   ebp
c000fd16:	e8 65 0a ff ff       	call   c0000780 <strcmp>
c000fd1b:	83 c4 10             	add    esp,0x10
c000fd1e:	85 c0                	test   eax,eax
c000fd20:	75 0f                	jne    c000fd31 <CPU::detectFeatures()+0x273>
c000fd22:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fd2c:	e9 58 01 00 00       	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fd31:	51                   	push   ecx
c000fd32:	51                   	push   ecx
c000fd33:	68 fe 11 02 c0       	push   0xc00211fe
c000fd38:	55                   	push   ebp
c000fd39:	e8 42 0a ff ff       	call   c0000780 <strcmp>
c000fd3e:	83 c4 10             	add    esp,0x10
c000fd41:	85 c0                	test   eax,eax
c000fd43:	75 0f                	jne    c000fd54 <CPU::detectFeatures()+0x296>
c000fd45:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fd4f:	e9 35 01 00 00       	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fd54:	52                   	push   edx
c000fd55:	52                   	push   edx
c000fd56:	68 4c 12 02 c0       	push   0xc002124c
c000fd5b:	55                   	push   ebp
c000fd5c:	e8 1f 0a ff ff       	call   c0000780 <strcmp>
c000fd61:	83 c4 10             	add    esp,0x10
c000fd64:	85 c0                	test   eax,eax
c000fd66:	75 0f                	jne    c000fd77 <CPU::detectFeatures()+0x2b9>
c000fd68:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fd72:	e9 12 01 00 00       	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fd77:	50                   	push   eax
c000fd78:	50                   	push   eax
c000fd79:	68 59 12 02 c0       	push   0xc0021259
c000fd7e:	55                   	push   ebp
c000fd7f:	e8 fc 09 ff ff       	call   c0000780 <strcmp>
c000fd84:	83 c4 10             	add    esp,0x10
c000fd87:	85 c0                	test   eax,eax
c000fd89:	75 0f                	jne    c000fd9a <CPU::detectFeatures()+0x2dc>
c000fd8b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fd95:	e9 ef 00 00 00       	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fd9a:	50                   	push   eax
c000fd9b:	50                   	push   eax
c000fd9c:	68 66 12 02 c0       	push   0xc0021266
c000fda1:	55                   	push   ebp
c000fda2:	e8 d9 09 ff ff       	call   c0000780 <strcmp>
c000fda7:	83 c4 10             	add    esp,0x10
c000fdaa:	85 c0                	test   eax,eax
c000fdac:	75 0f                	jne    c000fdbd <CPU::detectFeatures()+0x2ff>
c000fdae:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fdb8:	e9 cc 00 00 00       	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fdbd:	50                   	push   eax
c000fdbe:	50                   	push   eax
c000fdbf:	68 73 12 02 c0       	push   0xc0021273
c000fdc4:	55                   	push   ebp
c000fdc5:	e8 b6 09 ff ff       	call   c0000780 <strcmp>
c000fdca:	83 c4 10             	add    esp,0x10
c000fdcd:	85 c0                	test   eax,eax
c000fdcf:	75 0f                	jne    c000fde0 <CPU::detectFeatures()+0x322>
c000fdd1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fddb:	e9 a9 00 00 00       	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fde0:	50                   	push   eax
c000fde1:	50                   	push   eax
c000fde2:	68 80 12 02 c0       	push   0xc0021280
c000fde7:	55                   	push   ebp
c000fde8:	e8 93 09 ff ff       	call   c0000780 <strcmp>
c000fded:	83 c4 10             	add    esp,0x10
c000fdf0:	85 c0                	test   eax,eax
c000fdf2:	75 0f                	jne    c000fe03 <CPU::detectFeatures()+0x345>
c000fdf4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fdfe:	e9 86 00 00 00       	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fe03:	50                   	push   eax
c000fe04:	50                   	push   eax
c000fe05:	68 8d 12 02 c0       	push   0xc002128d
c000fe0a:	55                   	push   ebp
c000fe0b:	e8 70 09 ff ff       	call   c0000780 <strcmp>
c000fe10:	83 c4 10             	add    esp,0x10
c000fe13:	85 c0                	test   eax,eax
c000fe15:	75 0c                	jne    c000fe23 <CPU::detectFeatures()+0x365>
c000fe17:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fe21:	eb 66                	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fe23:	50                   	push   eax
c000fe24:	50                   	push   eax
c000fe25:	68 9a 12 02 c0       	push   0xc002129a
c000fe2a:	55                   	push   ebp
c000fe2b:	e8 50 09 ff ff       	call   c0000780 <strcmp>
c000fe30:	83 c4 10             	add    esp,0x10
c000fe33:	85 c0                	test   eax,eax
c000fe35:	75 0c                	jne    c000fe43 <CPU::detectFeatures()+0x385>
c000fe37:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fe41:	eb 46                	jmp    c000fe89 <CPU::detectFeatures()+0x3cb>
c000fe43:	57                   	push   edi
c000fe44:	57                   	push   edi
c000fe45:	68 a7 12 02 c0       	push   0xc00212a7
c000fe4a:	55                   	push   ebp
c000fe4b:	e8 30 09 ff ff       	call   c0000780 <strcmp>
c000fe50:	83 c4 10             	add    esp,0x10
c000fe53:	85 c0                	test   eax,eax
c000fe55:	74 e0                	je     c000fe37 <CPU::detectFeatures()+0x379>
c000fe57:	56                   	push   esi
c000fe58:	56                   	push   esi
c000fe59:	68 b4 12 02 c0       	push   0xc00212b4
c000fe5e:	55                   	push   ebp
c000fe5f:	e8 1c 09 ff ff       	call   c0000780 <strcmp>
c000fe64:	83 c4 10             	add    esp,0x10
c000fe67:	85 c0                	test   eax,eax
c000fe69:	74 cc                	je     c000fe37 <CPU::detectFeatures()+0x379>
c000fe6b:	51                   	push   ecx
c000fe6c:	51                   	push   ecx
c000fe6d:	68 c1 12 02 c0       	push   0xc00212c1
c000fe72:	55                   	push   ebp
c000fe73:	e8 08 09 ff ff       	call   c0000780 <strcmp>
c000fe78:	83 c4 10             	add    esp,0x10
c000fe7b:	85 c0                	test   eax,eax
c000fe7d:	74 b8                	je     c000fe37 <CPU::detectFeatures()+0x379>
c000fe7f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fe89:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fe8e:	0f 86 be 00 00 00    	jbe    c000ff52 <CPU::detectFeatures()+0x494>
c000fe94:	83 ec 0c             	sub    esp,0xc
c000fe97:	68 80 00 00 00       	push   0x80
c000fe9c:	e8 31 fb ff ff       	call   c000f9d2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fea1:	83 e0 01             	and    eax,0x1
c000fea4:	c1 e0 06             	shl    eax,0x6
c000fea7:	89 c2                	mov    edx,eax
c000fea9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000feaf:	83 e0 bf             	and    eax,0xffffffbf
c000feb2:	09 d0                	or     eax,edx
c000feb4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000feba:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fec1:	e8 0c fb ff ff       	call   c000f9d2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fec6:	83 e0 01             	and    eax,0x1
c000fec9:	c1 e0 04             	shl    eax,0x4
c000fecc:	89 c2                	mov    edx,eax
c000fece:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fed4:	83 e0 ef             	and    eax,0xffffffef
c000fed7:	09 d0                	or     eax,edx
c000fed9:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fedf:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fee6:	e8 e7 fa ff ff       	call   c000f9d2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000feeb:	89 c2                	mov    edx,eax
c000feed:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fef3:	c1 e2 07             	shl    edx,0x7
c000fef6:	83 e0 7f             	and    eax,0x7f
c000fef9:	09 d0                	or     eax,edx
c000fefb:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ff01:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ff08:	e8 f3 fa ff ff       	call   c000fa00 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ff0d:	83 e0 01             	and    eax,0x1
c000ff10:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ff17:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff1d:	83 e0 f7             	and    eax,0xfffffff7
c000ff20:	09 d0                	or     eax,edx
c000ff22:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff28:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000ff2f:	e8 cc fa ff ff       	call   c000fa00 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ff34:	83 c4 10             	add    esp,0x10
c000ff37:	83 e0 01             	and    eax,0x1
c000ff3a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff41:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff47:	83 e0 fb             	and    eax,0xfffffffb
c000ff4a:	09 d0                	or     eax,edx
c000ff4c:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff52:	83 ec 0c             	sub    esp,0xc
c000ff55:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ff59:	50                   	push   eax
c000ff5a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ff5e:	50                   	push   eax
c000ff5f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000ff63:	57                   	push   edi
c000ff64:	8d 74 24 28          	lea    esi,[esp+0x28]
c000ff68:	56                   	push   esi
c000ff69:	6a 01                	push   0x1
c000ff6b:	e8 82 f9 ff ff       	call   c000f8f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff74:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000ff7a:	89 c1                	mov    ecx,eax
c000ff7c:	83 e1 0f             	and    ecx,0xf
c000ff7f:	83 e2 f0             	and    edx,0xfffffff0
c000ff82:	09 ca                	or     edx,ecx
c000ff84:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000ff8a:	89 c2                	mov    edx,eax
c000ff8c:	c1 ea 04             	shr    edx,0x4
c000ff8f:	83 e2 0f             	and    edx,0xf
c000ff92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ff96:	89 d1                	mov    ecx,edx
c000ff98:	83 c4 20             	add    esp,0x20
c000ff9b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000ffa1:	c1 e1 06             	shl    ecx,0x6
c000ffa4:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000ffaa:	09 ca                	or     edx,ecx
c000ffac:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000ffb3:	89 c2                	mov    edx,eax
c000ffb5:	c1 ea 08             	shr    edx,0x8
c000ffb8:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000ffbe:	83 e2 0f             	and    edx,0xf
c000ffc1:	89 d5                	mov    ebp,edx
c000ffc3:	83 e5 03             	and    ebp,0x3
c000ffc6:	c1 e5 06             	shl    ebp,0x6
c000ffc9:	83 e1 3f             	and    ecx,0x3f
c000ffcc:	09 e9                	or     ecx,ebp
c000ffce:	89 d5                	mov    ebp,edx
c000ffd0:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000ffd6:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000ffdc:	c1 ed 02             	shr    ebp,0x2
c000ffdf:	83 e1 c0             	and    ecx,0xffffffc0
c000ffe2:	09 e9                	or     ecx,ebp
c000ffe4:	89 c5                	mov    ebp,eax
c000ffe6:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000ffec:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fff2:	c1 ed 08             	shr    ebp,0x8
c000fff5:	83 e5 30             	and    ebp,0x30
c000fff8:	83 e1 cf             	and    ecx,0xffffffcf
c000fffb:	09 e9                	or     ecx,ebp
c000fffd:	83 fa 06             	cmp    edx,0x6
c0010000:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010006:	74 05                	je     c001000d <CPU::detectFeatures()+0x54f>
c0010008:	83 fa 0f             	cmp    edx,0xf
c001000b:	75 64                	jne    c0010071 <CPU::detectFeatures()+0x5b3>
c001000d:	89 c1                	mov    ecx,eax
c001000f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010015:	c1 e9 10             	shr    ecx,0x10
c0010018:	c1 e1 04             	shl    ecx,0x4
c001001b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001001f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010025:	0f b6 c9             	movzx  ecx,cl
c0010028:	c1 e1 06             	shl    ecx,0x6
c001002b:	09 e9                	or     ecx,ebp
c001002d:	83 fa 0f             	cmp    edx,0xf
c0010030:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010037:	75 38                	jne    c0010071 <CPU::detectFeatures()+0x5b3>
c0010039:	c1 e8 14             	shr    eax,0x14
c001003c:	83 c0 0f             	add    eax,0xf
c001003f:	0f b6 c0             	movzx  eax,al
c0010042:	89 c2                	mov    edx,eax
c0010044:	c1 e8 02             	shr    eax,0x2
c0010047:	83 e2 03             	and    edx,0x3
c001004a:	89 d1                	mov    ecx,edx
c001004c:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010052:	c1 e1 06             	shl    ecx,0x6
c0010055:	83 e2 3f             	and    edx,0x3f
c0010058:	09 ca                	or     edx,ecx
c001005a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010060:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010066:	83 e2 c0             	and    edx,0xffffffc0
c0010069:	09 d0                	or     eax,edx
c001006b:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010071:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010077:	83 ec 0c             	sub    esp,0xc
c001007a:	83 c8 07             	or     eax,0x7
c001007d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010083:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010087:	50                   	push   eax
c0010088:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001008c:	55                   	push   ebp
c001008d:	57                   	push   edi
c001008e:	56                   	push   esi
c001008f:	68 00 00 00 80       	push   0x80000000
c0010094:	e8 59 f8 ff ff       	call   c000f8f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010099:	83 c4 20             	add    esp,0x20
c001009c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00100a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00100a8:	76 1e                	jbe    c00100c8 <CPU::detectFeatures()+0x60a>
c00100aa:	83 ec 0c             	sub    esp,0xc
c00100ad:	50                   	push   eax
c00100ae:	55                   	push   ebp
c00100af:	57                   	push   edi
c00100b0:	56                   	push   esi
c00100b1:	68 01 00 00 80       	push   0x80000001
c00100b6:	e8 37 f8 ff ff       	call   c000f8f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100bb:	83 c4 20             	add    esp,0x20
c00100be:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00100c8:	52                   	push   edx
c00100c9:	52                   	push   edx
c00100ca:	68 cd 12 02 c0       	push   0xc00212cd
c00100cf:	53                   	push   ebx
c00100d0:	e8 29 c1 ff ff       	call   c000c1fe <Device::setName(char const*)>
c00100d5:	83 c4 10             	add    esp,0x10
c00100d8:	eb 69                	jmp    c0010143 <CPU::detectFeatures()+0x685>
c00100da:	50                   	push   eax
c00100db:	50                   	push   eax
c00100dc:	68 32 12 02 c0       	push   0xc0021232
c00100e1:	55                   	push   ebp
c00100e2:	e8 69 05 ff ff       	call   c0000650 <strcpy>
c00100e7:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00100f1:	e8 cd 00 ff ff       	call   c00001c3 <is486>
c00100f6:	83 c4 10             	add    esp,0x10
c00100f9:	85 c0                	test   eax,eax
c00100fb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010101:	74 1f                	je     c0010122 <CPU::detectFeatures()+0x664>
c0010103:	83 c8 07             	or     eax,0x7
c0010106:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001010c:	0f 20 c0             	mov    eax,cr0
c001010f:	83 e0 14             	and    eax,0x14
c0010112:	83 f8 04             	cmp    eax,0x4
c0010115:	75 10                	jne    c0010127 <CPU::detectFeatures()+0x669>
c0010117:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001011d:	83 e0 fd             	and    eax,0xfffffffd
c0010120:	eb 1b                	jmp    c001013d <CPU::detectFeatures()+0x67f>
c0010122:	83 e0 f8             	and    eax,0xfffffff8
c0010125:	eb df                	jmp    c0010106 <CPU::detectFeatures()+0x648>
c0010127:	e8 72 00 ff ff       	call   c000019e <hasLegacyFPU>
c001012c:	83 e0 01             	and    eax,0x1
c001012f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010132:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010138:	83 e0 fd             	and    eax,0xfffffffd
c001013b:	09 d0                	or     eax,edx
c001013d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010143:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001014a:	74 17                	je     c0010163 <CPU::detectFeatures()+0x6a5>
c001014c:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c0010152:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010158:	83 c8 10             	or     eax,0x10
c001015b:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010161:	eb 20                	jmp    c0010183 <CPU::detectFeatures()+0x6c5>
c0010163:	e8 36 00 ff ff       	call   c000019e <hasLegacyFPU>
c0010168:	83 e0 01             	and    eax,0x1
c001016b:	8d 14 00             	lea    edx,[eax+eax*1]
c001016e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010174:	83 e0 fd             	and    eax,0xfffffffd
c0010177:	09 d0                	or     eax,edx
c0010179:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001017f:	a8 02                	test   al,0x2
c0010181:	75 c9                	jne    c001014c <CPU::detectFeatures()+0x68e>
c0010183:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001018a:	83 c4 2c             	add    esp,0x2c
c001018d:	5b                   	pop    ebx
c001018e:	5e                   	pop    esi
c001018f:	5f                   	pop    edi
c0010190:	5d                   	pop    ebp
c0010191:	c3                   	ret    

c0010192 <CPU::setupSMEP()>:
c0010192:	0f 20 e0             	mov    eax,cr4
c0010195:	0d 00 00 10 00       	or     eax,0x100000
c001019a:	0f 22 e0             	mov    cr4,eax
c001019d:	c3                   	ret    

c001019e <CPU::setupUMIP()>:
c001019e:	0f 20 e0             	mov    eax,cr4
c00101a1:	80 cc 08             	or     ah,0x8
c00101a4:	0f 22 e0             	mov    cr4,eax
c00101a7:	c3                   	ret    

c00101a8 <CPU::setupTSC()>:
c00101a8:	0f 20 e0             	mov    eax,cr4
c00101ab:	83 c8 04             	or     eax,0x4
c00101ae:	0f 22 e0             	mov    cr4,eax
c00101b1:	c3                   	ret    

c00101b2 <CPU::setupLargePages()>:
c00101b2:	0f 20 e0             	mov    eax,cr4
c00101b5:	83 c8 10             	or     eax,0x10
c00101b8:	0f 22 e0             	mov    cr4,eax
c00101bb:	c3                   	ret    

c00101bc <CPU::setupPAT()>:
c00101bc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00101c1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00101c8:	74 2c                	je     c00101f6 <CPU::setupPAT()+0x3a>
c00101ca:	53                   	push   ebx
c00101cb:	83 ec 10             	sub    esp,0x10
c00101ce:	68 77 02 00 00       	push   0x277
c00101d3:	50                   	push   eax
c00101d4:	e8 01 6f ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c00101d9:	83 e2 f8             	and    edx,0xfffffff8
c00101dc:	83 ca 01             	or     edx,0x1
c00101df:	52                   	push   edx
c00101e0:	50                   	push   eax
c00101e1:	68 77 02 00 00       	push   0x277
c00101e6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00101ec:	e8 15 6f ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c00101f1:	83 c4 28             	add    esp,0x28
c00101f4:	5b                   	pop    ebx
c00101f5:	c3                   	ret    
c00101f6:	c3                   	ret    
c00101f7:	90                   	nop

c00101f8 <CPU::setupMTRR()>:
c00101f8:	c3                   	ret    
c00101f9:	90                   	nop

c00101fa <CPU::setupGlobalPages()>:
c00101fa:	0f 20 e0             	mov    eax,cr4
c00101fd:	0c 80                	or     al,0x80
c00101ff:	0f 22 e0             	mov    cr4,eax
c0010202:	c3                   	ret    
c0010203:	90                   	nop

c0010204 <CPU::allowUsermodeDataAccess()>:
c0010204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010208:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001020f:	74 03                	je     c0010214 <CPU::allowUsermodeDataAccess()+0x10>
c0010211:	0f 01 cb             	stac   
c0010214:	c3                   	ret    
c0010215:	90                   	nop

c0010216 <CPU::prohibitUsermodeDataAccess()>:
c0010216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001021a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010221:	74 03                	je     c0010226 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010223:	0f 01 ca             	clac   
c0010226:	c3                   	ret    
c0010227:	90                   	nop

c0010228 <CPU::setupSMAP()>:
c0010228:	0f 20 e0             	mov    eax,cr4
c001022b:	0d 00 00 20 00       	or     eax,0x200000
c0010230:	0f 22 e0             	mov    cr4,eax
c0010233:	eb e1                	jmp    c0010216 <CPU::prohibitUsermodeDataAccess()>
c0010235:	90                   	nop

c0010236 <CPU::setupFeatures()>:
c0010236:	53                   	push   ebx
c0010237:	83 ec 08             	sub    esp,0x8
c001023a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001023e:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010245:	74 18                	je     c001025f <CPU::setupFeatures()+0x29>
c0010247:	83 ec 0c             	sub    esp,0xc
c001024a:	68 d9 12 02 c0       	push   0xc00212d9
c001024f:	e8 e8 a6 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0010254:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010257:	e8 42 ff ff ff       	call   c001019e <CPU::setupUMIP()>
c001025c:	83 c4 10             	add    esp,0x10
c001025f:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010266:	74 18                	je     c0010280 <CPU::setupFeatures()+0x4a>
c0010268:	83 ec 0c             	sub    esp,0xc
c001026b:	68 e3 12 02 c0       	push   0xc00212e3
c0010270:	e8 c7 a6 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0010275:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010278:	e8 2b ff ff ff       	call   c00101a8 <CPU::setupTSC()>
c001027d:	83 c4 10             	add    esp,0x10
c0010280:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010287:	74 18                	je     c00102a1 <CPU::setupFeatures()+0x6b>
c0010289:	83 ec 0c             	sub    esp,0xc
c001028c:	68 ec 12 02 c0       	push   0xc00212ec
c0010291:	e8 a6 a6 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0010296:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010299:	e8 14 ff ff ff       	call   c00101b2 <CPU::setupLargePages()>
c001029e:	83 c4 10             	add    esp,0x10
c00102a1:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00102a8:	74 18                	je     c00102c2 <CPU::setupFeatures()+0x8c>
c00102aa:	83 ec 0c             	sub    esp,0xc
c00102ad:	68 f5 12 02 c0       	push   0xc00212f5
c00102b2:	e8 85 a6 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00102b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102ba:	e8 3b ff ff ff       	call   c00101fa <CPU::setupGlobalPages()>
c00102bf:	83 c4 10             	add    esp,0x10
c00102c2:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00102c9:	74 18                	je     c00102e3 <CPU::setupFeatures()+0xad>
c00102cb:	83 ec 0c             	sub    esp,0xc
c00102ce:	68 07 13 02 c0       	push   0xc0021307
c00102d3:	e8 64 a6 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00102d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102db:	e8 dc fe ff ff       	call   c00101bc <CPU::setupPAT()>
c00102e0:	83 c4 10             	add    esp,0x10
c00102e3:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00102ea:	74 11                	je     c00102fd <CPU::setupFeatures()+0xc7>
c00102ec:	c7 44 24 10 10 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021310
c00102f4:	83 c4 08             	add    esp,0x8
c00102f7:	5b                   	pop    ebx
c00102f8:	e9 3f a6 ff ff       	jmp    c000a93c <Dbg::kprintf(char const*, ...)>
c00102fd:	83 c4 08             	add    esp,0x8
c0010300:	5b                   	pop    ebx
c0010301:	c3                   	ret    

c0010302 <CPU::open(int, int, void*)>:
c0010302:	55                   	push   ebp
c0010303:	57                   	push   edi
c0010304:	56                   	push   esi
c0010305:	53                   	push   ebx
c0010306:	83 ec 18             	sub    esp,0x18
c0010309:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001030d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010311:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010315:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001031b:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010321:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010327:	50                   	push   eax
c0010328:	e8 a9 70 ff ff       	call   c00073d6 <GDT::setup()>
c001032d:	83 c4 0c             	add    esp,0xc
c0010330:	6a 00                	push   0x0
c0010332:	68 ef be ad de       	push   0xdeadbeef
c0010337:	55                   	push   ebp
c0010338:	e8 27 8c ff ff       	call   c0008f64 <TSS::setup(unsigned long, unsigned long)>
c001033d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010340:	e8 ff 8b ff ff       	call   c0008f44 <TSS::flush()>
c0010345:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001034b:	89 04 24             	mov    DWORD PTR [esp],eax
c001034e:	e8 e7 72 ff ff       	call   c000763a <IDT::setup()>
c0010353:	b8 00 04 00 00       	mov    eax,0x400
c0010358:	0f 23 f8             	mov    db7,eax
c001035b:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010365:	e8 6b 7a ff ff       	call   c0007dd5 <Phys::allocatePage()>
c001036a:	83 c4 10             	add    esp,0x10
c001036d:	85 f6                	test   esi,esi
c001036f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010375:	89 38                	mov    DWORD PTR [eax],edi
c0010377:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001037d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010380:	74 10                	je     c0010392 <CPU::open(int, int, void*)+0x90>
c0010382:	50                   	push   eax
c0010383:	50                   	push   eax
c0010384:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001038a:	56                   	push   esi
c001038b:	e8 6a 9b ff ff       	call   c0009efa <VAS::setCPUSpecific(unsigned long)>
c0010390:	eb 0d                	jmp    c001039f <CPU::open(int, int, void*)+0x9d>
c0010392:	83 ec 0c             	sub    esp,0xc
c0010395:	68 1a 13 02 c0       	push   0xc002131a
c001039a:	e8 9e 07 00 00       	call   c0010b3d <KePanic(char const*)>
c001039f:	83 c4 10             	add    esp,0x10
c00103a2:	83 ec 0c             	sub    esp,0xc
c00103a5:	68 28 13 02 c0       	push   0xc0021328
c00103aa:	e8 d8 00 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c00103af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103b2:	e8 07 f7 ff ff       	call   c000fabe <CPU::detectFeatures()>
c00103b7:	c7 04 24 4b 13 02 c0 	mov    DWORD PTR [esp],0xc002134b
c00103be:	e8 c4 00 00 00       	call   c0010487 <KeSetBootMessage(char const*)>
c00103c3:	e8 63 70 00 00       	call   c001742b <HalInitialise()>
c00103c8:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c00103cd:	83 e0 10             	and    eax,0x10
c00103d0:	83 f8 01             	cmp    eax,0x1
c00103d3:	19 c0                	sbb    eax,eax
c00103d5:	83 e0 46             	and    eax,0x46
c00103d8:	83 c0 1e             	add    eax,0x1e
c00103db:	89 04 24             	mov    DWORD PTR [esp],eax
c00103de:	e8 c2 d6 ff ff       	call   c000daa5 <setupTimer(int)>
c00103e3:	83 c4 10             	add    esp,0x10
c00103e6:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c00103ed:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00103f3:	74 0c                	je     c0010401 <CPU::open(int, int, void*)+0xff>
c00103f5:	83 ec 0c             	sub    esp,0xc
c00103f8:	53                   	push   ebx
c00103f9:	e8 38 fe ff ff       	call   c0010236 <CPU::setupFeatures()>
c00103fe:	83 c4 10             	add    esp,0x10
c0010401:	83 c4 0c             	add    esp,0xc
c0010404:	31 c0                	xor    eax,eax
c0010406:	5b                   	pop    ebx
c0010407:	5e                   	pop    esi
c0010408:	5f                   	pop    edi
c0010409:	5d                   	pop    ebp
c001040a:	c3                   	ret    

c001040b <KeDisplaySplashScreen()>:
c001040b:	55                   	push   ebp
c001040c:	bd 05 00 00 00       	mov    ebp,0x5
c0010411:	57                   	push   edi
c0010412:	bf 0a 00 00 00       	mov    edi,0xa
c0010417:	56                   	push   esi
c0010418:	31 f6                	xor    esi,esi
c001041a:	53                   	push   ebx
c001041b:	31 db                	xor    ebx,ebx
c001041d:	83 ec 0c             	sub    esp,0xc
c0010420:	0f b6 96 80 27 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd880]
c0010427:	85 d2                	test   edx,edx
c0010429:	89 d0                	mov    eax,edx
c001042b:	74 52                	je     c001047f <KeDisplaySplashScreen()+0x74>
c001042d:	80 bb b6 27 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdd84a],0xdb
c0010434:	75 13                	jne    c0010449 <KeDisplaySplashScreen()+0x3e>
c0010436:	0f b6 8b b5 27 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdd84b]
c001043d:	83 e1 fe             	and    ecx,0xfffffffe
c0010440:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010446:	75 01                	jne    c0010449 <KeDisplaySplashScreen()+0x3e>
c0010448:	47                   	inc    edi
c0010449:	83 fa 0d             	cmp    edx,0xd
c001044c:	74 28                	je     c0010476 <KeDisplaySplashScreen()+0x6b>
c001044e:	83 fa 0a             	cmp    edx,0xa
c0010451:	75 0a                	jne    c001045d <KeDisplaySplashScreen()+0x52>
c0010453:	45                   	inc    ebp
c0010454:	bf 0a 00 00 00       	mov    edi,0xa
c0010459:	31 db                	xor    ebx,ebx
c001045b:	eb 19                	jmp    c0010476 <KeDisplaySplashScreen()+0x6b>
c001045d:	83 ec 0c             	sub    esp,0xc
c0010460:	0f be c0             	movsx  eax,al
c0010463:	55                   	push   ebp
c0010464:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010467:	43                   	inc    ebx
c0010468:	52                   	push   edx
c0010469:	6a 00                	push   0x0
c001046b:	6a 0e                	push   0xe
c001046d:	50                   	push   eax
c001046e:	e8 35 7c 00 00       	call   c00180a8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010473:	83 c4 20             	add    esp,0x20
c0010476:	46                   	inc    esi
c0010477:	81 fe 42 01 00 00    	cmp    esi,0x142
c001047d:	75 a1                	jne    c0010420 <KeDisplaySplashScreen()+0x15>
c001047f:	83 c4 0c             	add    esp,0xc
c0010482:	5b                   	pop    ebx
c0010483:	5e                   	pop    esi
c0010484:	5f                   	pop    edi
c0010485:	5d                   	pop    ebp
c0010486:	c3                   	ret    

c0010487 <KeSetBootMessage(char const*)>:
c0010487:	57                   	push   edi
c0010488:	56                   	push   esi
c0010489:	53                   	push   ebx
c001048a:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010490:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010497:	68 9e 00 00 00       	push   0x9e
c001049c:	6a 00                	push   0x0
c001049e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00104a2:	56                   	push   esi
c00104a3:	e8 48 00 ff ff       	call   c00004f0 <memset>
c00104a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104ab:	e8 d0 00 ff ff       	call   c0000580 <strlen>
c00104b0:	ba 50 00 00 00       	mov    edx,0x50
c00104b5:	83 c4 10             	add    esp,0x10
c00104b8:	31 c9                	xor    ecx,ecx
c00104ba:	29 c2                	sub    edx,eax
c00104bc:	83 e2 fe             	and    edx,0xfffffffe
c00104bf:	01 f2                	add    edx,esi
c00104c1:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00104c6:	84 c0                	test   al,al
c00104c8:	74 0a                	je     c00104d4 <KeSetBootMessage(char const*)+0x4d>
c00104ca:	80 cc 0f             	or     ah,0xf
c00104cd:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c00104d1:	41                   	inc    ecx
c00104d2:	eb ed                	jmp    c00104c1 <KeSetBootMessage(char const*)+0x3a>
c00104d4:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c00104d9:	b9 9e 00 00 00       	mov    ecx,0x9e
c00104de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104e0:	81 c4 a0 00 00 00    	add    esp,0xa0
c00104e6:	5b                   	pop    ebx
c00104e7:	5e                   	pop    esi
c00104e8:	5f                   	pop    edi
c00104e9:	c3                   	ret    

c00104ea <EnvVarContainer::getEnv(char const*)>:
c00104ea:	57                   	push   edi
c00104eb:	56                   	push   esi
c00104ec:	53                   	push   ebx
c00104ed:	31 db                	xor    ebx,ebx
c00104ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00104f3:	39 1e                	cmp    DWORD PTR [esi],ebx
c00104f5:	7e 2b                	jle    c0010522 <EnvVarContainer::getEnv(char const*)+0x38>
c00104f7:	50                   	push   eax
c00104f8:	50                   	push   eax
c00104f9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00104fc:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010503:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010506:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001050a:	e8 71 02 ff ff       	call   c0000780 <strcmp>
c001050f:	83 c4 10             	add    esp,0x10
c0010512:	85 c0                	test   eax,eax
c0010514:	75 09                	jne    c001051f <EnvVarContainer::getEnv(char const*)+0x35>
c0010516:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010519:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001051d:	eb 05                	jmp    c0010524 <EnvVarContainer::getEnv(char const*)+0x3a>
c001051f:	43                   	inc    ebx
c0010520:	eb d1                	jmp    c00104f3 <EnvVarContainer::getEnv(char const*)+0x9>
c0010522:	31 c0                	xor    eax,eax
c0010524:	5b                   	pop    ebx
c0010525:	5e                   	pop    esi
c0010526:	5f                   	pop    edi
c0010527:	c3                   	ret    

c0010528 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010528:	55                   	push   ebp
c0010529:	57                   	push   edi
c001052a:	56                   	push   esi
c001052b:	53                   	push   ebx
c001052c:	83 ec 28             	sub    esp,0x28
c001052f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010533:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010537:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001053b:	56                   	push   esi
c001053c:	e8 3f 00 ff ff       	call   c0000580 <strlen>
c0010541:	40                   	inc    eax
c0010542:	89 04 24             	mov    DWORD PTR [esp],eax
c0010545:	e8 81 75 ff ff       	call   c0007acb <malloc>
c001054a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001054d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010551:	e8 2a 00 ff ff       	call   c0000580 <strlen>
c0010556:	40                   	inc    eax
c0010557:	89 04 24             	mov    DWORD PTR [esp],eax
c001055a:	e8 6c 75 ff ff       	call   c0007acb <malloc>
c001055f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010562:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010566:	e8 15 00 ff ff       	call   c0000580 <strlen>
c001056b:	83 c4 0c             	add    esp,0xc
c001056e:	40                   	inc    eax
c001056f:	50                   	push   eax
c0010570:	6a 00                	push   0x0
c0010572:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010576:	e8 75 ff fe ff       	call   c00004f0 <memset>
c001057b:	89 34 24             	mov    DWORD PTR [esp],esi
c001057e:	e8 fd ff fe ff       	call   c0000580 <strlen>
c0010583:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010587:	8d 48 01             	lea    ecx,[eax+0x1]
c001058a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001058c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001058f:	89 de                	mov    esi,ebx
c0010591:	e8 ea ff fe ff       	call   c0000580 <strlen>
c0010596:	83 c4 0c             	add    esp,0xc
c0010599:	40                   	inc    eax
c001059a:	50                   	push   eax
c001059b:	6a 00                	push   0x0
c001059d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105a1:	e8 4a ff fe ff       	call   c00004f0 <memset>
c00105a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105a9:	e8 d2 ff fe ff       	call   c0000580 <strlen>
c00105ae:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00105b2:	8d 48 01             	lea    ecx,[eax+0x1]
c00105b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00105ba:	40                   	inc    eax
c00105bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00105be:	c1 e0 03             	shl    eax,0x3
c00105c1:	5a                   	pop    edx
c00105c2:	59                   	pop    ecx
c00105c3:	50                   	push   eax
c00105c4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00105c7:	e8 eb 74 ff ff       	call   c0007ab7 <realloc>
c00105cc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00105cf:	8d 74 24 18          	lea    esi,[esp+0x18]
c00105d3:	b9 08 00 00 00       	mov    ecx,0x8
c00105d8:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00105db:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00105df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105e1:	83 c4 2c             	add    esp,0x2c
c00105e4:	5b                   	pop    ebx
c00105e5:	5e                   	pop    esi
c00105e6:	5f                   	pop    edi
c00105e7:	5d                   	pop    ebp
c00105e8:	c3                   	ret    
c00105e9:	90                   	nop

c00105ea <EnvVarContainer::deleteEnv(char const*)>:
c00105ea:	c3                   	ret    
c00105eb:	90                   	nop

c00105ec <EnvVarContainer::loadFrom(char const*, char const*)>:
c00105ec:	55                   	push   ebp
c00105ed:	57                   	push   edi
c00105ee:	56                   	push   esi
c00105ef:	53                   	push   ebx
c00105f0:	81 ec 38 01 00 00    	sub    esp,0x138
c00105f6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00105fd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010604:	68 14 01 00 00       	push   0x114
c0010609:	e8 bd 74 ff ff       	call   c0007acb <malloc>
c001060e:	83 c4 0c             	add    esp,0xc
c0010611:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010614:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001061b:	89 c3                	mov    ebx,eax
c001061d:	50                   	push   eax
c001061e:	e8 97 ab ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c0010623:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010626:	e8 b9 ae ff ff       	call   c000b4e4 <File::exists()>
c001062b:	83 c4 10             	add    esp,0x10
c001062e:	84 c0                	test   al,al
c0010630:	75 31                	jne    c0010663 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010632:	50                   	push   eax
c0010633:	50                   	push   eax
c0010634:	6a 12                	push   0x12
c0010636:	53                   	push   ebx
c0010637:	e8 3a ac ff ff       	call   c000b276 <File::open(FileOpenMode)>
c001063c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001063e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010641:	89 34 24             	mov    DWORD PTR [esp],esi
c0010644:	e8 37 ff fe ff       	call   c0000580 <strlen>
c0010649:	5a                   	pop    edx
c001064a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001064e:	52                   	push   edx
c001064f:	31 d2                	xor    edx,edx
c0010651:	56                   	push   esi
c0010652:	52                   	push   edx
c0010653:	50                   	push   eax
c0010654:	53                   	push   ebx
c0010655:	ff d7                	call   edi
c0010657:	83 c4 14             	add    esp,0x14
c001065a:	53                   	push   ebx
c001065b:	e8 74 ac ff ff       	call   c000b2d4 <File::close()>
c0010660:	83 c4 10             	add    esp,0x10
c0010663:	56                   	push   esi
c0010664:	31 f6                	xor    esi,esi
c0010666:	68 00 01 00 00       	push   0x100
c001066b:	6a 00                	push   0x0
c001066d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010671:	50                   	push   eax
c0010672:	e8 79 fe fe ff       	call   c00004f0 <memset>
c0010677:	5f                   	pop    edi
c0010678:	58                   	pop    eax
c0010679:	6a 01                	push   0x1
c001067b:	53                   	push   ebx
c001067c:	e8 f5 ab ff ff       	call   c000b276 <File::open(FileOpenMode)>
c0010681:	83 c4 10             	add    esp,0x10
c0010684:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001068c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010694:	83 ec 0c             	sub    esp,0xc
c0010697:	8d 54 24 20          	lea    edx,[esp+0x20]
c001069b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001069d:	52                   	push   edx
c001069e:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c00106a2:	51                   	push   ecx
c00106a3:	6a 00                	push   0x0
c00106a5:	6a 01                	push   0x1
c00106a7:	53                   	push   ebx
c00106a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106ab:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c00106b0:	83 c4 20             	add    esp,0x20
c00106b3:	85 c0                	test   eax,eax
c00106b5:	89 c1                	mov    ecx,eax
c00106b7:	0f 84 36 01 00 00    	je     c00107f3 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c00106bd:	83 f8 0d             	cmp    eax,0xd
c00106c0:	0f 84 22 01 00 00    	je     c00107e8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00106c6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00106cb:	0f 84 f0 00 00 00    	je     c00107c1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00106d1:	83 f8 0a             	cmp    eax,0xa
c00106d4:	74 13                	je     c00106e9 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00106d6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00106db:	74 0c                	je     c00106e9 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00106dd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00106e3:	0f 8e f6 00 00 00    	jle    c00107df <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00106e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00106ed:	83 ec 0c             	sub    esp,0xc
c00106f0:	8d 78 01             	lea    edi,[eax+0x1]
c00106f3:	57                   	push   edi
c00106f4:	e8 d2 73 ff ff       	call   c0007acb <malloc>
c00106f9:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00106fd:	8d 56 04             	lea    edx,[esi+0x4]
c0010700:	89 14 24             	mov    DWORD PTR [esp],edx
c0010703:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010707:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001070b:	e8 bb 73 ff ff       	call   c0007acb <malloc>
c0010710:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010714:	83 c4 0c             	add    esp,0xc
c0010717:	57                   	push   edi
c0010718:	6a 00                	push   0x0
c001071a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001071e:	e8 cd fd fe ff       	call   c00004f0 <memset>
c0010723:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010727:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001072b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001072f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010731:	83 c4 0c             	add    esp,0xc
c0010734:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010738:	52                   	push   edx
c0010739:	6a 00                	push   0x0
c001073b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001073f:	e8 ac fd fe ff       	call   c00004f0 <memset>
c0010744:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010748:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001074c:	89 34 24             	mov    DWORD PTR [esp],esi
c001074f:	e8 2c fe fe ff       	call   c0000580 <strlen>
c0010754:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010758:	89 c1                	mov    ecx,eax
c001075a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001075c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001075f:	83 c4 10             	add    esp,0x10
c0010762:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010765:	40                   	inc    eax
c0010766:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010769:	85 d2                	test   edx,edx
c001076b:	75 0c                	jne    c0010779 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001076d:	83 ec 0c             	sub    esp,0xc
c0010770:	6a 08                	push   0x8
c0010772:	e8 54 73 ff ff       	call   c0007acb <malloc>
c0010777:	eb 0c                	jmp    c0010785 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010779:	51                   	push   ecx
c001077a:	51                   	push   ecx
c001077b:	c1 e0 03             	shl    eax,0x3
c001077e:	50                   	push   eax
c001077f:	52                   	push   edx
c0010780:	e8 32 73 ff ff       	call   c0007ab7 <realloc>
c0010785:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010788:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001078b:	83 c4 10             	add    esp,0x10
c001078e:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010791:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010795:	b9 08 00 00 00       	mov    ecx,0x8
c001079a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001079e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107a0:	50                   	push   eax
c00107a1:	31 f6                	xor    esi,esi
c00107a3:	68 00 01 00 00       	push   0x100
c00107a8:	6a 00                	push   0x0
c00107aa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00107ae:	50                   	push   eax
c00107af:	e8 3c fd fe ff       	call   c00004f0 <memset>
c00107b4:	83 c4 10             	add    esp,0x10
c00107b7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00107bf:	eb 27                	jmp    c00107e8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00107c1:	83 f8 3d             	cmp    eax,0x3d
c00107c4:	74 1e                	je     c00107e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00107c6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00107cc:	7f 07                	jg     c00107d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00107ce:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c00107d2:	46                   	inc    esi
c00107d3:	eb 13                	jmp    c00107e8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00107d5:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00107dd:	eb 09                	jmp    c00107e8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00107df:	83 f8 3d             	cmp    eax,0x3d
c00107e2:	75 ea                	jne    c00107ce <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00107e4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00107e8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00107ed:	0f 85 99 fe ff ff    	jne    c001068c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00107f3:	83 ec 0c             	sub    esp,0xc
c00107f6:	53                   	push   ebx
c00107f7:	e8 d8 aa ff ff       	call   c000b2d4 <File::close()>
c00107fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010801:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010804:	81 c4 3c 01 00 00    	add    esp,0x13c
c001080a:	5b                   	pop    ebx
c001080b:	5e                   	pop    esi
c001080c:	5f                   	pop    edi
c001080d:	5d                   	pop    ebp
c001080e:	c3                   	ret    
c001080f:	90                   	nop

c0010810 <EnvVarContainer::__loadSystem()>:
c0010810:	83 ec 10             	sub    esp,0x10
c0010813:	68 e0 28 02 c0       	push   0xc00228e0
c0010818:	68 8c 13 02 c0       	push   0xc002138c
c001081d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010821:	e8 c6 fd ff ff       	call   c00105ec <EnvVarContainer::loadFrom(char const*, char const*)>
c0010826:	83 c4 1c             	add    esp,0x1c
c0010829:	c3                   	ret    

c001082a <EnvVarContainer::__loadUser()>:
c001082a:	c3                   	ret    
c001082b:	90                   	nop

c001082c <EnvVarContainer::EnvVarContainer(Process*)>:
c001082c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010830:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001083a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001083e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010845:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001084c:	90                   	nop
c001084d:	c3                   	ret    

c001084e <EnvVarContainer::~EnvVarContainer()>:
c001084e:	83 ec 0c             	sub    esp,0xc
c0010851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010855:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010858:	85 c0                	test   eax,eax
c001085a:	74 1d                	je     c0010879 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001085c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010860:	8b 00                	mov    eax,DWORD PTR [eax]
c0010862:	85 c0                	test   eax,eax
c0010864:	74 13                	je     c0010879 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001086d:	83 ec 0c             	sub    esp,0xc
c0010870:	50                   	push   eax
c0010871:	e8 65 72 ff ff       	call   c0007adb <free>
c0010876:	83 c4 10             	add    esp,0x10
c0010879:	90                   	nop
c001087a:	83 c4 0c             	add    esp,0xc
c001087d:	c3                   	ret    

c001087e <KeGetEnv(Process*, char const*)>:
c001087e:	53                   	push   ebx
c001087f:	83 ec 08             	sub    esp,0x8
c0010882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010886:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c001088c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010890:	74 04                	je     c0010896 <KeGetEnv(Process*, char const*)+0x18>
c0010892:	85 c0                	test   eax,eax
c0010894:	75 0b                	jne    c00108a1 <KeGetEnv(Process*, char const*)+0x23>
c0010896:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c001089b:	85 c0                	test   eax,eax
c001089d:	75 19                	jne    c00108b8 <KeGetEnv(Process*, char const*)+0x3a>
c001089f:	eb 27                	jmp    c00108c8 <KeGetEnv(Process*, char const*)+0x4a>
c00108a1:	52                   	push   edx
c00108a2:	52                   	push   edx
c00108a3:	53                   	push   ebx
c00108a4:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00108aa:	e8 3b fc ff ff       	call   c00104ea <EnvVarContainer::getEnv(char const*)>
c00108af:	83 c4 10             	add    esp,0x10
c00108b2:	85 c0                	test   eax,eax
c00108b4:	75 28                	jne    c00108de <KeGetEnv(Process*, char const*)+0x60>
c00108b6:	eb de                	jmp    c0010896 <KeGetEnv(Process*, char const*)+0x18>
c00108b8:	52                   	push   edx
c00108b9:	52                   	push   edx
c00108ba:	53                   	push   ebx
c00108bb:	50                   	push   eax
c00108bc:	e8 29 fc ff ff       	call   c00104ea <EnvVarContainer::getEnv(char const*)>
c00108c1:	83 c4 10             	add    esp,0x10
c00108c4:	85 c0                	test   eax,eax
c00108c6:	75 16                	jne    c00108de <KeGetEnv(Process*, char const*)+0x60>
c00108c8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108cc:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00108d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108d5:	83 c4 08             	add    esp,0x8
c00108d8:	5b                   	pop    ebx
c00108d9:	e9 0c fc ff ff       	jmp    c00104ea <EnvVarContainer::getEnv(char const*)>
c00108de:	83 c4 08             	add    esp,0x8
c00108e1:	5b                   	pop    ebx
c00108e2:	c3                   	ret    

c00108e3 <KeSetEnvSystem(char const*, char const*)>:
c00108e3:	83 ec 10             	sub    esp,0x10
c00108e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108ee:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00108f4:	e8 2f fc ff ff       	call   c0010528 <EnvVarContainer::setEnv(char const*, char const*)>
c00108f9:	83 c4 1c             	add    esp,0x1c
c00108fc:	c3                   	ret    

c00108fd <KeSetEnvUser(char const*, char const*)>:
c00108fd:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010902:	85 c0                	test   eax,eax
c0010904:	74 15                	je     c001091b <KeSetEnvUser(char const*, char const*)+0x1e>
c0010906:	83 ec 10             	sub    esp,0x10
c0010909:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001090d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010911:	50                   	push   eax
c0010912:	e8 11 fc ff ff       	call   c0010528 <EnvVarContainer::setEnv(char const*, char const*)>
c0010917:	83 c4 1c             	add    esp,0x1c
c001091a:	c3                   	ret    
c001091b:	c3                   	ret    

c001091c <KeSetEnvProcess(Process*, char const*, char const*)>:
c001091c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010920:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010926:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001092a:	e9 f9 fb ff ff       	jmp    c0010528 <EnvVarContainer::setEnv(char const*, char const*)>

c001092f <KeDeleteEnvSystem(char const*)>:
c001092f:	c3                   	ret    

c0010930 <KeDeleteEnvUser(char const*)>:
c0010930:	c3                   	ret    

c0010931 <KeDeleteEnvProcess(Process*, char const*)>:
c0010931:	c3                   	ret    

c0010932 <KeNewProcessEnv(Process*)>:
c0010932:	83 ec 28             	sub    esp,0x28
c0010935:	6a 0c                	push   0xc
c0010937:	e8 8f 71 ff ff       	call   c0007acb <malloc>
c001093c:	5a                   	pop    edx
c001093d:	59                   	pop    ecx
c001093e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010942:	50                   	push   eax
c0010943:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010947:	e8 e0 fe ff ff       	call   c001082c <EnvVarContainer::EnvVarContainer(Process*)>
c001094c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010950:	83 c4 2c             	add    esp,0x2c
c0010953:	c3                   	ret    

c0010954 <KeCopyProcessEnv(Process*, Process*)>:
c0010954:	57                   	push   edi
c0010955:	56                   	push   esi
c0010956:	53                   	push   ebx
c0010957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095b:	83 ec 0c             	sub    esp,0xc
c001095e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010964:	6a 0c                	push   0xc
c0010966:	e8 60 71 ff ff       	call   c0007acb <malloc>
c001096b:	89 c3                	mov    ebx,eax
c001096d:	58                   	pop    eax
c001096e:	5a                   	pop    edx
c001096f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010973:	53                   	push   ebx
c0010974:	e8 b3 fe ff ff       	call   c001082c <EnvVarContainer::EnvVarContainer(Process*)>
c0010979:	8b 07                	mov    eax,DWORD PTR [edi]
c001097b:	89 03                	mov    DWORD PTR [ebx],eax
c001097d:	c1 e0 03             	shl    eax,0x3
c0010980:	89 04 24             	mov    DWORD PTR [esp],eax
c0010983:	e8 43 71 ff ff       	call   c0007acb <malloc>
c0010988:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001098b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001098d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010990:	89 c7                	mov    edi,eax
c0010992:	c1 e1 03             	shl    ecx,0x3
c0010995:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010997:	83 c4 10             	add    esp,0x10
c001099a:	89 d8                	mov    eax,ebx
c001099c:	5b                   	pop    ebx
c001099d:	5e                   	pop    esi
c001099e:	5f                   	pop    edi
c001099f:	c3                   	ret    

c00109a0 <KeLoadSystemEnv()>:
c00109a0:	53                   	push   ebx
c00109a1:	83 ec 14             	sub    esp,0x14
c00109a4:	6a 0c                	push   0xc
c00109a6:	e8 20 71 ff ff       	call   c0007acb <malloc>
c00109ab:	89 c3                	mov    ebx,eax
c00109ad:	58                   	pop    eax
c00109ae:	5a                   	pop    edx
c00109af:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00109b5:	53                   	push   ebx
c00109b6:	e8 71 fe ff ff       	call   c001082c <EnvVarContainer::EnvVarContainer(Process*)>
c00109bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109be:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00109c4:	e8 47 fe ff ff       	call   c0010810 <EnvVarContainer::__loadSystem()>
c00109c9:	83 c4 18             	add    esp,0x18
c00109cc:	5b                   	pop    ebx
c00109cd:	c3                   	ret    

c00109ce <KeLoadUserEnv()>:
c00109ce:	53                   	push   ebx
c00109cf:	83 ec 14             	sub    esp,0x14
c00109d2:	6a 0c                	push   0xc
c00109d4:	e8 f2 70 ff ff       	call   c0007acb <malloc>
c00109d9:	89 c3                	mov    ebx,eax
c00109db:	58                   	pop    eax
c00109dc:	5a                   	pop    edx
c00109dd:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00109e3:	53                   	push   ebx
c00109e4:	e8 43 fe ff ff       	call   c001082c <EnvVarContainer::EnvVarContainer(Process*)>
c00109e9:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00109ef:	83 c4 18             	add    esp,0x18
c00109f2:	5b                   	pop    ebx
c00109f3:	c3                   	ret    

c00109f4 <KeFlushEnv()>:
c00109f4:	c3                   	ret    

c00109f5 <KeGetProcessTotalEnvCount(Process*)>:
c00109f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109f9:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00109ff:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010a05:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010a0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a0c:	03 01                	add    eax,DWORD PTR [ecx]
c0010a0e:	85 d2                	test   edx,edx
c0010a10:	74 02                	je     c0010a14 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0010a12:	03 02                	add    eax,DWORD PTR [edx]
c0010a14:	c3                   	ret    

c0010a15 <KeGetProcessEnvPair(Process*, int)>:
c0010a15:	57                   	push   edi
c0010a16:	56                   	push   esi
c0010a17:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c0010a1d:	53                   	push   ebx
c0010a1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a26:	85 f6                	test   esi,esi
c0010a28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a2c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010a32:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010a34:	75 16                	jne    c0010a4c <KeGetProcessEnvPair(Process*, int)+0x37>
c0010a36:	39 c2                	cmp    edx,eax
c0010a38:	7c 16                	jl     c0010a50 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010a3a:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010a40:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010a42:	01 c6                	add    esi,eax
c0010a44:	39 d6                	cmp    esi,edx
c0010a46:	7e 3c                	jle    c0010a84 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010a48:	29 c2                	sub    edx,eax
c0010a4a:	eb 04                	jmp    c0010a50 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010a4c:	39 c2                	cmp    edx,eax
c0010a4e:	7d 05                	jge    c0010a55 <KeGetProcessEnvPair(Process*, int)+0x40>
c0010a50:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010a53:	eb 20                	jmp    c0010a75 <KeGetProcessEnvPair(Process*, int)+0x60>
c0010a55:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010a57:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010a5a:	39 d1                	cmp    ecx,edx
c0010a5c:	7e 04                	jle    c0010a62 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0010a5e:	29 c2                	sub    edx,eax
c0010a60:	eb 10                	jmp    c0010a72 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0010a62:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010a68:	03 0e                	add    ecx,DWORD PTR [esi]
c0010a6a:	39 d1                	cmp    ecx,edx
c0010a6c:	7e 16                	jle    c0010a84 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010a6e:	29 c2                	sub    edx,eax
c0010a70:	29 fa                	sub    edx,edi
c0010a72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010a75:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010a78:	8b 02                	mov    eax,DWORD PTR [edx]
c0010a7a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010a7d:	89 03                	mov    DWORD PTR [ebx],eax
c0010a7f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010a82:	eb 1d                	jmp    c0010aa1 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0010a84:	83 ec 0c             	sub    esp,0xc
c0010a87:	68 ae 13 02 c0       	push   0xc00213ae
c0010a8c:	e8 ac 00 00 00       	call   c0010b3d <KePanic(char const*)>
c0010a91:	83 c4 10             	add    esp,0x10
c0010a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010aa1:	89 d8                	mov    eax,ebx
c0010aa3:	5b                   	pop    ebx
c0010aa4:	5e                   	pop    esi
c0010aa5:	5f                   	pop    edi
c0010aa6:	c2 04 00             	ret    0x4

c0010aa9 <CPU::current()>:
c0010aa9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010aae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ab4:	c3                   	ret    

c0010ab5 <operator new(unsigned long)>:
c0010ab5:	e9 11 70 ff ff       	jmp    c0007acb <malloc>

c0010aba <operator delete(void*)>:
c0010aba:	e9 2c 70 ff ff       	jmp    c0007aeb <rfree>

c0010abf <disableIRQs()>:
c0010abf:	fa                   	cli    
c0010ac0:	c3                   	ret    

c0010ac1 <enableIRQs()>:
c0010ac1:	fb                   	sti    
c0010ac2:	c3                   	ret    

c0010ac3 <lockScheduler()>:
c0010ac3:	fa                   	cli    
c0010ac4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010aca:	c3                   	ret    

c0010acb <unlockScheduler()>:
c0010acb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010ad0:	48                   	dec    eax
c0010ad1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010ad6:	75 01                	jne    c0010ad9 <unlockScheduler()+0xe>
c0010ad8:	fb                   	sti    
c0010ad9:	c3                   	ret    

c0010ada <lockStuff()>:
c0010ada:	fa                   	cli    
c0010adb:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010ae1:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0010ae7:	c3                   	ret    

c0010ae8 <unlockStuff()>:
c0010ae8:	83 ec 0c             	sub    esp,0xc
c0010aeb:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0010af0:	48                   	dec    eax
c0010af1:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0010af6:	75 18                	jne    c0010b10 <unlockStuff()+0x28>
c0010af8:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0010aff:	74 0f                	je     c0010b10 <unlockStuff()+0x28>
c0010b01:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0010b0b:	e8 5c 48 00 00       	call   c001536c <schedule()>
c0010b10:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010b15:	48                   	dec    eax
c0010b16:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010b1b:	75 01                	jne    c0010b1e <unlockStuff()+0x36>
c0010b1d:	fb                   	sti    
c0010b1e:	83 c4 0c             	add    esp,0xc
c0010b21:	c3                   	ret    

c0010b22 <Virt::getAKernelVAS()>:
c0010b22:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010b27:	c3                   	ret    

c0010b28 <__not_memcpy>:
c0010b28:	57                   	push   edi
c0010b29:	56                   	push   esi
c0010b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010b36:	89 c7                	mov    edi,eax
c0010b38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b3a:	5e                   	pop    esi
c0010b3b:	5f                   	pop    edi
c0010b3c:	c3                   	ret    

c0010b3d <KePanic(char const*)>:
c0010b3d:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c0010b44:	e9 b3 67 00 00       	jmp    c00172fc <HalPanic(char const*)>

c0010b49 <KePowerThread(void*)>:
c0010b49:	83 ec 0c             	sub    esp,0xc
c0010b4c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010b51:	48                   	dec    eax
c0010b52:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010b57:	75 01                	jne    c0010b5a <KePowerThread(void*)+0x11>
c0010b59:	fb                   	sti    
c0010b5a:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010b61:	83 ec 0c             	sub    esp,0xc
c0010b64:	6a 0a                	push   0xa
c0010b66:	e8 31 4b 00 00       	call   c001569c <sleep(unsigned int)>
c0010b6b:	83 c4 10             	add    esp,0x10
c0010b6e:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c0010b75:	eb e3                	jmp    c0010b5a <KePowerThread(void*)+0x11>

c0010b77 <KeChangePowerSettings(PowerSettings)>:
c0010b77:	57                   	push   edi
c0010b78:	b9 09 00 00 00       	mov    ecx,0x9
c0010b7d:	56                   	push   esi
c0010b7e:	bf 60 79 02 c0       	mov    edi,0xc0027960
c0010b83:	fc                   	cld    
c0010b84:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010b88:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b8a:	5e                   	pop    esi
c0010b8b:	5f                   	pop    edi
c0010b8c:	c3                   	ret    

c0010b8d <KeUserIOReceived()>:
c0010b8d:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010b97:	c3                   	ret    

c0010b98 <KeHandlePowerButton()>:
c0010b98:	83 ec 0c             	sub    esp,0xc
c0010b9b:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010ba0:	83 f8 02             	cmp    eax,0x2
c0010ba3:	75 10                	jne    c0010bb5 <KeHandlePowerButton()+0x1d>
c0010ba5:	83 ec 0c             	sub    esp,0xc
c0010ba8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010bae:	e8 8f 65 ff ff       	call   c0007142 <Computer::shutdown()>
c0010bb3:	eb 11                	jmp    c0010bc6 <KeHandlePowerButton()+0x2e>
c0010bb5:	48                   	dec    eax
c0010bb6:	75 11                	jne    c0010bc9 <KeHandlePowerButton()+0x31>
c0010bb8:	83 ec 0c             	sub    esp,0xc
c0010bbb:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010bc1:	e8 ac 65 ff ff       	call   c0007172 <Computer::sleep()>
c0010bc6:	83 c4 10             	add    esp,0x10
c0010bc9:	83 c4 0c             	add    esp,0xc
c0010bcc:	c3                   	ret    

c0010bcd <KeHandleSleepButton()>:
c0010bcd:	83 ec 0c             	sub    esp,0xc
c0010bd0:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c0010bd5:	83 f8 02             	cmp    eax,0x2
c0010bd8:	75 10                	jne    c0010bea <KeHandleSleepButton()+0x1d>
c0010bda:	83 ec 0c             	sub    esp,0xc
c0010bdd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010be3:	e8 5a 65 ff ff       	call   c0007142 <Computer::shutdown()>
c0010be8:	eb 11                	jmp    c0010bfb <KeHandleSleepButton()+0x2e>
c0010bea:	48                   	dec    eax
c0010beb:	75 11                	jne    c0010bfe <KeHandleSleepButton()+0x31>
c0010bed:	83 ec 0c             	sub    esp,0xc
c0010bf0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010bf6:	e8 77 65 ff ff       	call   c0007172 <Computer::sleep()>
c0010bfb:	83 c4 10             	add    esp,0x10
c0010bfe:	83 c4 0c             	add    esp,0xc
c0010c01:	c3                   	ret    

c0010c02 <KeSetupPowerManager()>:
c0010c02:	83 ec 0c             	sub    esp,0xc
c0010c05:	68 f0 00 00 00       	push   0xf0
c0010c0a:	6a 00                	push   0x0
c0010c0c:	68 49 0b 01 c0       	push   0xc0010b49
c0010c11:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010c17:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010c21:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010c28:	e8 f3 44 00 00       	call   c0015120 <Process::createThread(void (*)(void*), void*, int)>
c0010c2d:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010c37:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010c41:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010c4b:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010c55:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010c5f:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010c69:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c0010c73:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010c7d:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010c87:	83 c4 1c             	add    esp,0x1c
c0010c8a:	c3                   	ret    

c0010c8b <KeRand()>:
c0010c8b:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c0010c95:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010c9f:	53                   	push   ebx
c0010ca0:	01 c1                	add    ecx,eax
c0010ca2:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010ca7:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010cad:	01 ca                	add    edx,ecx
c0010caf:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010cb4:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010cb9:	83 d2 00             	adc    edx,0x0
c0010cbc:	0f b7 da             	movzx  ebx,dx
c0010cbf:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c0010cc5:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0010cc9:	5b                   	pop    ebx
c0010cca:	c3                   	ret    

c0010ccb <KeSeedRand(unsigned int)>:
c0010ccb:	53                   	push   ebx
c0010ccc:	83 ec 08             	sub    esp,0x8
c0010ccf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cd3:	e8 43 69 00 00       	call   c001761b <HalGetRand()>
c0010cd8:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010ce2:	31 d8                	xor    eax,ebx
c0010ce4:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010ce9:	e8 9d ff ff ff       	call   c0010c8b <KeRand()>
c0010cee:	83 c4 08             	add    esp,0x8
c0010cf1:	5b                   	pop    ebx
c0010cf2:	eb 97                	jmp    c0010c8b <KeRand()>

c0010cf4 <KeInitRand()>:
c0010cf4:	83 ec 0c             	sub    esp,0xc
c0010cf7:	e8 14 67 00 00       	call   c0017410 <HalQueryPerformanceCounter()>
c0010cfc:	0f 20 da             	mov    edx,cr3
c0010cff:	0f 22 da             	mov    cr3,edx
c0010d02:	0f 20 da             	mov    edx,cr3
c0010d05:	0f 22 da             	mov    cr3,edx
c0010d08:	0f 20 da             	mov    edx,cr3
c0010d0b:	0f 22 da             	mov    cr3,edx
c0010d0e:	0f 20 da             	mov    edx,cr3
c0010d11:	0f 22 da             	mov    cr3,edx
c0010d14:	83 ec 0c             	sub    esp,0xc
c0010d17:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010d1c:	50                   	push   eax
c0010d1d:	e8 a9 ff ff ff       	call   c0010ccb <KeSeedRand(unsigned int)>
c0010d22:	83 c4 1c             	add    esp,0x1c
c0010d25:	c3                   	ret    
c0010d26:	66 90                	xchg   ax,ax

c0010d28 <KeResolveCompatibilitySymbol(char*)>:
c0010d28:	83 ec 0c             	sub    esp,0xc
c0010d2b:	83 ec 08             	sub    esp,0x8
c0010d2e:	68 c8 13 02 c0       	push   0xc00213c8
c0010d33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d37:	e8 44 fa fe ff       	call   c0000780 <strcmp>
c0010d3c:	83 c4 10             	add    esp,0x10
c0010d3f:	85 c0                	test   eax,eax
c0010d41:	0f 94 c0             	sete   al
c0010d44:	0f b6 c0             	movzx  eax,al
c0010d47:	85 c0                	test   eax,eax
c0010d49:	74 0d                	je     c0010d58 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010d4b:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010d50:	e9 8b 01 00 00       	jmp    c0010ee0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010d55:	8d 76 00             	lea    esi,[esi+0x0]
c0010d58:	83 ec 08             	sub    esp,0x8
c0010d5b:	68 d1 13 02 c0       	push   0xc00213d1
c0010d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d64:	e8 17 fa fe ff       	call   c0000780 <strcmp>
c0010d69:	83 c4 10             	add    esp,0x10
c0010d6c:	85 c0                	test   eax,eax
c0010d6e:	0f 94 c0             	sete   al
c0010d71:	0f b6 c0             	movzx  eax,al
c0010d74:	85 c0                	test   eax,eax
c0010d76:	74 0c                	je     c0010d84 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010d78:	b8 b0 e9 01 c0       	mov    eax,0xc001e9b0
c0010d7d:	e9 5e 01 00 00       	jmp    c0010ee0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010d82:	66 90                	xchg   ax,ax
c0010d84:	83 ec 08             	sub    esp,0x8
c0010d87:	68 db 13 02 c0       	push   0xc00213db
c0010d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d90:	e8 eb f9 fe ff       	call   c0000780 <strcmp>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	85 c0                	test   eax,eax
c0010d9a:	0f 94 c0             	sete   al
c0010d9d:	0f b6 c0             	movzx  eax,al
c0010da0:	85 c0                	test   eax,eax
c0010da2:	74 0c                	je     c0010db0 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010da4:	b8 e4 e6 01 c0       	mov    eax,0xc001e6e4
c0010da9:	e9 32 01 00 00       	jmp    c0010ee0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010dae:	66 90                	xchg   ax,ax
c0010db0:	83 ec 08             	sub    esp,0x8
c0010db3:	68 e4 13 02 c0       	push   0xc00213e4
c0010db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dbc:	e8 bf f9 fe ff       	call   c0000780 <strcmp>
c0010dc1:	83 c4 10             	add    esp,0x10
c0010dc4:	85 c0                	test   eax,eax
c0010dc6:	0f 94 c0             	sete   al
c0010dc9:	0f b6 c0             	movzx  eax,al
c0010dcc:	85 c0                	test   eax,eax
c0010dce:	74 0c                	je     c0010ddc <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010dd0:	b8 3d 0b 01 c0       	mov    eax,0xc0010b3d
c0010dd5:	e9 06 01 00 00       	jmp    c0010ee0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010dda:	66 90                	xchg   ax,ax
c0010ddc:	83 ec 08             	sub    esp,0x8
c0010ddf:	68 f7 13 02 c0       	push   0xc00213f7
c0010de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010de8:	e8 93 f9 fe ff       	call   c0000780 <strcmp>
c0010ded:	83 c4 10             	add    esp,0x10
c0010df0:	85 c0                	test   eax,eax
c0010df2:	0f 94 c0             	sete   al
c0010df5:	0f b6 c0             	movzx  eax,al
c0010df8:	85 c0                	test   eax,eax
c0010dfa:	74 0c                	je     c0010e08 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010dfc:	b8 87 04 01 c0       	mov    eax,0xc0010487
c0010e01:	e9 da 00 00 00       	jmp    c0010ee0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e06:	66 90                	xchg   ax,ax
c0010e08:	83 ec 08             	sub    esp,0x8
c0010e0b:	68 14 14 02 c0       	push   0xc0021414
c0010e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e14:	e8 67 f9 fe ff       	call   c0000780 <strcmp>
c0010e19:	83 c4 10             	add    esp,0x10
c0010e1c:	85 c0                	test   eax,eax
c0010e1e:	0f 94 c0             	sete   al
c0010e21:	0f b6 c0             	movzx  eax,al
c0010e24:	85 c0                	test   eax,eax
c0010e26:	74 0c                	je     c0010e34 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010e28:	b8 b0 ea 01 c0       	mov    eax,0xc001eab0
c0010e2d:	e9 ae 00 00 00       	jmp    c0010ee0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e32:	66 90                	xchg   ax,ax
c0010e34:	83 ec 08             	sub    esp,0x8
c0010e37:	68 1e 14 02 c0       	push   0xc002141e
c0010e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e40:	e8 3b f9 fe ff       	call   c0000780 <strcmp>
c0010e45:	83 c4 10             	add    esp,0x10
c0010e48:	85 c0                	test   eax,eax
c0010e4a:	0f 94 c0             	sete   al
c0010e4d:	0f b6 c0             	movzx  eax,al
c0010e50:	85 c0                	test   eax,eax
c0010e52:	74 0c                	je     c0010e60 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010e54:	b8 30 e8 01 c0       	mov    eax,0xc001e830
c0010e59:	e9 82 00 00 00       	jmp    c0010ee0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e5e:	66 90                	xchg   ax,ax
c0010e60:	83 ec 08             	sub    esp,0x8
c0010e63:	68 27 14 02 c0       	push   0xc0021427
c0010e68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e6c:	e8 0f f9 fe ff       	call   c0000780 <strcmp>
c0010e71:	83 c4 10             	add    esp,0x10
c0010e74:	85 c0                	test   eax,eax
c0010e76:	0f 94 c0             	sete   al
c0010e79:	0f b6 c0             	movzx  eax,al
c0010e7c:	85 c0                	test   eax,eax
c0010e7e:	74 08                	je     c0010e88 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010e80:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010e85:	eb 59                	jmp    c0010ee0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e87:	90                   	nop
c0010e88:	83 ec 08             	sub    esp,0x8
c0010e8b:	68 3f 14 02 c0       	push   0xc002143f
c0010e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e94:	e8 e7 f8 fe ff       	call   c0000780 <strcmp>
c0010e99:	83 c4 10             	add    esp,0x10
c0010e9c:	85 c0                	test   eax,eax
c0010e9e:	0f 94 c0             	sete   al
c0010ea1:	0f b6 c0             	movzx  eax,al
c0010ea4:	85 c0                	test   eax,eax
c0010ea6:	74 08                	je     c0010eb0 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010ea8:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010ead:	eb 31                	jmp    c0010ee0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010eaf:	90                   	nop
c0010eb0:	83 ec 08             	sub    esp,0x8
c0010eb3:	68 4c 14 02 c0       	push   0xc002144c
c0010eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ebc:	e8 bf f8 fe ff       	call   c0000780 <strcmp>
c0010ec1:	83 c4 10             	add    esp,0x10
c0010ec4:	85 c0                	test   eax,eax
c0010ec6:	0f 94 c0             	sete   al
c0010ec9:	0f b6 c0             	movzx  eax,al
c0010ecc:	85 c0                	test   eax,eax
c0010ece:	74 08                	je     c0010ed8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010ed0:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010ed5:	eb 09                	jmp    c0010ee0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ed7:	90                   	nop
c0010ed8:	b8 00 00 00 00       	mov    eax,0x0
c0010edd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ee0:	83 c4 0c             	add    esp,0xc
c0010ee3:	c3                   	ret    

c0010ee4 <KiSigKill(int)>:
c0010ee4:	83 ec 0c             	sub    esp,0xc
c0010ee7:	6a 00                	push   0x0
c0010ee9:	6a 00                	push   0x0
c0010eeb:	6a ff                	push   0xffffffff
c0010eed:	6a 01                	push   0x1
c0010eef:	e8 5e 21 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ef4:	83 c4 1c             	add    esp,0x1c
c0010ef7:	c3                   	ret    

c0010ef8 <KiDefaultSignalHandlerIgnore(int)>:
c0010ef8:	c3                   	ret    

c0010ef9 <KiDefaultSignalHandlerPause(int)>:
c0010ef9:	57                   	push   edi
c0010efa:	b9 07 00 00 00       	mov    ecx,0x7
c0010eff:	56                   	push   esi
c0010f00:	be 95 14 02 c0       	mov    esi,0xc0021495
c0010f05:	83 ec 24             	sub    esp,0x24
c0010f08:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010f0c:	fc                   	cld    
c0010f0d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010f0f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010f13:	50                   	push   eax
c0010f14:	6a 00                	push   0x0
c0010f16:	6a 00                	push   0x0
c0010f18:	6a 27                	push   0x27
c0010f1a:	e8 33 21 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f1f:	83 c4 34             	add    esp,0x34
c0010f22:	5e                   	pop    esi
c0010f23:	5f                   	pop    edi
c0010f24:	c3                   	ret    

c0010f25 <KiDefaultSignalHandlerResume(int)>:
c0010f25:	57                   	push   edi
c0010f26:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010f2b:	56                   	push   esi
c0010f2c:	be b1 14 02 c0       	mov    esi,0xc00214b1
c0010f31:	83 ec 24             	sub    esp,0x24
c0010f34:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010f38:	fc                   	cld    
c0010f39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f3b:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010f3f:	50                   	push   eax
c0010f40:	6a 00                	push   0x0
c0010f42:	6a 00                	push   0x0
c0010f44:	6a 27                	push   0x27
c0010f46:	e8 07 21 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f4b:	83 c4 34             	add    esp,0x34
c0010f4e:	5e                   	pop    esi
c0010f4f:	5f                   	pop    edi
c0010f50:	c3                   	ret    

c0010f51 <KeDeinitSignals(SigHandlerBlock*)>:
c0010f51:	e9 85 6b ff ff       	jmp    c0007adb <free>

c0010f56 <KeInitSignals()>:
c0010f56:	53                   	push   ebx
c0010f57:	83 ec 14             	sub    esp,0x14
c0010f5a:	68 c8 00 00 00       	push   0xc8
c0010f5f:	e8 67 6b ff ff       	call   c0007acb <malloc>
c0010f64:	83 c4 0c             	add    esp,0xc
c0010f67:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010f71:	89 c3                	mov    ebx,eax
c0010f73:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010f7d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010f83:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0010f87:	6a 20                	push   0x20
c0010f89:	6a 00                	push   0x0
c0010f8b:	50                   	push   eax
c0010f8c:	e8 5f f5 fe ff       	call   c00004f0 <memset>
c0010f91:	83 c4 0c             	add    esp,0xc
c0010f94:	6a 44                	push   0x44
c0010f96:	6a 00                	push   0x0
c0010f98:	53                   	push   ebx
c0010f99:	e8 52 f5 fe ff       	call   c00004f0 <memset>
c0010f9e:	83 c4 18             	add    esp,0x18
c0010fa1:	89 d8                	mov    eax,ebx
c0010fa3:	5b                   	pop    ebx
c0010fa4:	c3                   	ret    

c0010fa5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010fa5:	53                   	push   ebx
c0010fa6:	b8 01 00 00 00       	mov    eax,0x1
c0010fab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010faf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fb3:	83 f9 10             	cmp    ecx,0x10
c0010fb6:	7f 21                	jg     c0010fd9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fbc:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010fbf:	89 03                	mov    DWORD PTR [ebx],eax
c0010fc1:	b8 01 00 00 00       	mov    eax,0x1
c0010fc6:	d3 e0                	shl    eax,cl
c0010fc8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010fcc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010fcf:	31 c0                	xor    eax,eax
c0010fd1:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010fd9:	5b                   	pop    ebx
c0010fda:	c3                   	ret    

c0010fdb <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010fdb:	55                   	push   ebp
c0010fdc:	57                   	push   edi
c0010fdd:	bf 08 00 00 00       	mov    edi,0x8
c0010fe2:	56                   	push   esi
c0010fe3:	53                   	push   ebx
c0010fe4:	83 ec 18             	sub    esp,0x18
c0010fe7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010feb:	68 ce 14 02 c0       	push   0xc00214ce
c0010ff0:	e8 47 99 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0010ff5:	83 c4 10             	add    esp,0x10
c0010ff8:	31 c9                	xor    ecx,ecx
c0010ffa:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011001:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011007:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001100b:	99                   	cdq    
c001100c:	f7 ff                	idiv   edi
c001100e:	8d 42 24             	lea    eax,[edx+0x24]
c0011011:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011015:	85 f6                	test   esi,esi
c0011017:	75 1a                	jne    c0011033 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011019:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001101d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011021:	50                   	push   eax
c0011022:	50                   	push   eax
c0011023:	52                   	push   edx
c0011024:	68 df 14 02 c0       	push   0xc00214df
c0011029:	e8 0e 99 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001102e:	83 c4 10             	add    esp,0x10
c0011031:	eb 1b                	jmp    c001104e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011033:	41                   	inc    ecx
c0011034:	83 f9 08             	cmp    ecx,0x8
c0011037:	75 ce                	jne    c0011007 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011039:	83 ec 0c             	sub    esp,0xc
c001103c:	be 01 00 00 00       	mov    esi,0x1
c0011041:	68 00 15 02 c0       	push   0xc0021500
c0011046:	e8 f1 98 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001104b:	83 c4 10             	add    esp,0x10
c001104e:	83 c4 0c             	add    esp,0xc
c0011051:	89 f0                	mov    eax,esi
c0011053:	5b                   	pop    ebx
c0011054:	5e                   	pop    esi
c0011055:	5f                   	pop    edi
c0011056:	5d                   	pop    ebp
c0011057:	c3                   	ret    

c0011058 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011058:	55                   	push   ebp
c0011059:	57                   	push   edi
c001105a:	56                   	push   esi
c001105b:	53                   	push   ebx
c001105c:	51                   	push   ecx
c001105d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011061:	85 db                	test   ebx,ebx
c0011063:	0f 84 bc 00 00 00    	je     c0011125 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011069:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011070:	0f 84 af 00 00 00    	je     c0011125 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011076:	31 c9                	xor    ecx,ecx
c0011078:	bf 08 00 00 00       	mov    edi,0x8
c001107d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011083:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011086:	99                   	cdq    
c0011087:	f7 ff                	idiv   edi
c0011089:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011090:	85 ed                	test   ebp,ebp
c0011092:	0f 84 9e 00 00 00    	je     c0011136 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011098:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001109e:	89 e9                	mov    ecx,ebp
c00110a0:	bf 01 00 00 00       	mov    edi,0x1
c00110a5:	d3 e7                	shl    edi,cl
c00110a7:	31 c9                	xor    ecx,ecx
c00110a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00110ac:	b8 01 00 00 00       	mov    eax,0x1
c00110b1:	d3 e0                	shl    eax,cl
c00110b3:	85 04 24             	test   DWORD PTR [esp],eax
c00110b6:	74 06                	je     c00110be <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00110b8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00110bc:	75 67                	jne    c0011125 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00110be:	41                   	inc    ecx
c00110bf:	83 f9 11             	cmp    ecx,0x11
c00110c2:	75 e8                	jne    c00110ac <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00110c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00110c7:	46                   	inc    esi
c00110c8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00110ce:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00110d9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00110e0:	09 f8                	or     eax,edi
c00110e2:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00110e8:	31 c0                	xor    eax,eax
c00110ea:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00110f2:	74 09                	je     c00110fd <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00110f4:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00110fb:	eb 06                	jmp    c0011103 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00110fd:	40                   	inc    eax
c00110fe:	83 f8 08             	cmp    eax,0x8
c0011101:	75 e7                	jne    c00110ea <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011103:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011107:	83 fd 09             	cmp    ebp,0x9
c001110a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001110d:	89 2a                	mov    DWORD PTR [edx],ebp
c001110f:	75 07                	jne    c0011118 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011111:	b8 e4 0e 01 c0       	mov    eax,0xc0010ee4
c0011116:	eb 31                	jmp    c0011149 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011118:	83 f8 01             	cmp    eax,0x1
c001111b:	75 0c                	jne    c0011129 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c001111d:	f7 d7                	not    edi
c001111f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011125:	31 c0                	xor    eax,eax
c0011127:	eb 20                	jmp    c0011149 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011129:	85 c0                	test   eax,eax
c001112b:	75 1c                	jne    c0011149 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001112d:	8b 04 ad 40 29 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdd6c0]
c0011134:	eb 13                	jmp    c0011149 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011136:	41                   	inc    ecx
c0011137:	46                   	inc    esi
c0011138:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001113e:	83 f9 08             	cmp    ecx,0x8
c0011141:	0f 85 36 ff ff ff    	jne    c001107d <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011147:	eb dc                	jmp    c0011125 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011149:	5a                   	pop    edx
c001114a:	5b                   	pop    ebx
c001114b:	5e                   	pop    esi
c001114c:	5f                   	pop    edi
c001114d:	5d                   	pop    ebp
c001114e:	c3                   	ret    

c001114f <KiCheckSignalZ>:
c001114f:	83 ec 10             	sub    esp,0x10
c0011152:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011156:	50                   	push   eax
c0011157:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001115c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001115f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011165:	e8 ee fe ff ff       	call   c0011058 <KeCheckSignal(SigHandlerBlock*, int*)>
c001116a:	5a                   	pop    edx
c001116b:	31 d2                	xor    edx,edx
c001116d:	59                   	pop    ecx
c001116e:	85 c0                	test   eax,eax
c0011170:	74 19                	je     c001118b <KiCheckSignalZ+0x3c>
c0011172:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011178:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001117b:	89 02                	mov    DWORD PTR [edx],eax
c001117d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011188:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001118b:	89 d0                	mov    eax,edx
c001118d:	83 c4 10             	add    esp,0x10
c0011190:	c3                   	ret    

c0011191 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011191:	56                   	push   esi
c0011192:	53                   	push   ebx
c0011193:	bb 01 00 00 00       	mov    ebx,0x1
c0011198:	52                   	push   edx
c0011199:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001119d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111a1:	d3 e3                	shl    ebx,cl
c00111a3:	83 f9 10             	cmp    ecx,0x10
c00111a6:	7f 08                	jg     c00111b0 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00111a8:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00111ae:	75 10                	jne    c00111c0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00111b0:	83 ec 0c             	sub    esp,0xc
c00111b3:	68 11 15 02 c0       	push   0xc0021511
c00111b8:	e8 80 f9 ff ff       	call   c0010b3d <KePanic(char const*)>
c00111bd:	83 c4 10             	add    esp,0x10
c00111c0:	f7 d3                	not    ebx
c00111c2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00111c8:	58                   	pop    eax
c00111c9:	5b                   	pop    ebx
c00111ca:	5e                   	pop    esi
c00111cb:	c3                   	ret    

c00111cc <KiFinishSignalZ>:
c00111cc:	53                   	push   ebx
c00111cd:	83 ec 10             	sub    esp,0x10
c00111d0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00111d4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00111d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111df:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00111e5:	e8 a7 ff ff ff       	call   c0011191 <KeCompleteSignal(SigHandlerBlock*, int)>
c00111ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00111f0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00111f7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00111fe:	83 c4 18             	add    esp,0x18
c0011201:	5b                   	pop    ebx
c0011202:	c3                   	ret    

c0011203 <SysSeekDir(regs*)>:
c0011203:	31 c0                	xor    eax,eax
c0011205:	31 d2                	xor    edx,edx
c0011207:	c3                   	ret    

c0011208 <SysTellDir(regs*)>:
c0011208:	31 c0                	xor    eax,eax
c001120a:	31 d2                	xor    edx,edx
c001120c:	c3                   	ret    

c001120d <SysVerify(regs*)>:
c001120d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011211:	31 d2                	xor    edx,edx
c0011213:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011216:	c3                   	ret    

c0011217 <SysGetArgc(regs*)>:
c0011217:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001121c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001121f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011225:	89 c2                	mov    edx,eax
c0011227:	c1 fa 1f             	sar    edx,0x1f
c001122a:	c3                   	ret    

c001122b <SysTTYName(regs*)>:
c001122b:	b8 01 00 00 00       	mov    eax,0x1
c0011230:	31 d2                	xor    edx,edx
c0011232:	c3                   	ret    

c0011233 <SysFormatDisk(regs*)>:
c0011233:	56                   	push   esi
c0011234:	53                   	push   ebx
c0011235:	83 ec 04             	sub    esp,0x4
c0011238:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001123c:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0011242:	eb 2a                	jmp    c001126e <SysFormatDisk(regs*)+0x3b>
c0011244:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011247:	83 ec 0c             	sub    esp,0xc
c001124a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001124d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001124f:	51                   	push   ecx
c0011250:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011253:	51                   	push   ecx
c0011254:	50                   	push   eax
c0011255:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c001125c:	50                   	push   eax
c001125d:	53                   	push   ebx
c001125e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0011261:	83 c4 20             	add    esp,0x20
c0011264:	83 f8 08             	cmp    eax,0x8
c0011267:	89 c1                	mov    ecx,eax
c0011269:	75 14                	jne    c001127f <SysFormatDisk(regs*)+0x4c>
c001126b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001126e:	85 db                	test   ebx,ebx
c0011270:	75 d2                	jne    c0011244 <SysFormatDisk(regs*)+0x11>
c0011272:	b8 03 00 00 00       	mov    eax,0x3
c0011277:	31 d2                	xor    edx,edx
c0011279:	83 c4 04             	add    esp,0x4
c001127c:	5b                   	pop    ebx
c001127d:	5e                   	pop    esi
c001127e:	c3                   	ret    
c001127f:	85 c0                	test   eax,eax
c0011281:	74 13                	je     c0011296 <SysFormatDisk(regs*)+0x63>
c0011283:	31 d2                	xor    edx,edx
c0011285:	83 f9 09             	cmp    ecx,0x9
c0011288:	b8 01 00 00 00       	mov    eax,0x1
c001128d:	74 ea                	je     c0011279 <SysFormatDisk(regs*)+0x46>
c001128f:	b8 02 00 00 00       	mov    eax,0x2
c0011294:	eb e1                	jmp    c0011277 <SysFormatDisk(regs*)+0x44>
c0011296:	31 c0                	xor    eax,eax
c0011298:	eb dd                	jmp    c0011277 <SysFormatDisk(regs*)+0x44>

c001129a <SysSetDiskVolumeLabel(regs*)>:
c001129a:	56                   	push   esi
c001129b:	53                   	push   ebx
c001129c:	83 ec 04             	sub    esp,0x4
c001129f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00112a3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00112a6:	83 f8 19             	cmp    eax,0x19
c00112a9:	77 33                	ja     c00112de <SysSetDiskVolumeLabel(regs*)+0x44>
c00112ab:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00112b2:	85 c9                	test   ecx,ecx
c00112b4:	74 28                	je     c00112de <SysSetDiskVolumeLabel(regs*)+0x44>
c00112b6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00112b9:	85 db                	test   ebx,ebx
c00112bb:	74 21                	je     c00112de <SysSetDiskVolumeLabel(regs*)+0x44>
c00112bd:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00112c3:	85 d2                	test   edx,edx
c00112c5:	74 17                	je     c00112de <SysSetDiskVolumeLabel(regs*)+0x44>
c00112c7:	8b 32                	mov    esi,DWORD PTR [edx]
c00112c9:	53                   	push   ebx
c00112ca:	50                   	push   eax
c00112cb:	51                   	push   ecx
c00112cc:	52                   	push   edx
c00112cd:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00112d0:	83 c4 10             	add    esp,0x10
c00112d3:	83 c4 04             	add    esp,0x4
c00112d6:	5b                   	pop    ebx
c00112d7:	5e                   	pop    esi
c00112d8:	89 c2                	mov    edx,eax
c00112da:	c1 fa 1f             	sar    edx,0x1f
c00112dd:	c3                   	ret    
c00112de:	83 c4 04             	add    esp,0x4
c00112e1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00112e6:	5b                   	pop    ebx
c00112e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112ec:	5e                   	pop    esi
c00112ed:	c3                   	ret    

c00112ee <SysGetDiskVolumeLabel(regs*)>:
c00112ee:	57                   	push   edi
c00112ef:	56                   	push   esi
c00112f0:	53                   	push   ebx
c00112f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00112f8:	83 fa 19             	cmp    edx,0x19
c00112fb:	77 3c                	ja     c0011339 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00112fd:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0011304:	85 c9                	test   ecx,ecx
c0011306:	74 31                	je     c0011339 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011308:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001130b:	85 db                	test   ebx,ebx
c001130d:	74 2a                	je     c0011339 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001130f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011312:	85 f6                	test   esi,esi
c0011314:	74 23                	je     c0011339 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011316:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001131c:	85 c0                	test   eax,eax
c001131e:	74 19                	je     c0011339 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011320:	83 ec 0c             	sub    esp,0xc
c0011323:	8b 38                	mov    edi,DWORD PTR [eax]
c0011325:	56                   	push   esi
c0011326:	53                   	push   ebx
c0011327:	52                   	push   edx
c0011328:	51                   	push   ecx
c0011329:	50                   	push   eax
c001132a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001132d:	83 c4 20             	add    esp,0x20
c0011330:	5b                   	pop    ebx
c0011331:	5e                   	pop    esi
c0011332:	89 c2                	mov    edx,eax
c0011334:	c1 fa 1f             	sar    edx,0x1f
c0011337:	5f                   	pop    edi
c0011338:	c3                   	ret    
c0011339:	5b                   	pop    ebx
c001133a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001133f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011344:	5e                   	pop    esi
c0011345:	5f                   	pop    edi
c0011346:	c3                   	ret    

c0011347 <SysShutdown(regs*)>:
c0011347:	57                   	push   edi
c0011348:	56                   	push   esi
c0011349:	83 ec 04             	sub    esp,0x4
c001134c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011350:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011353:	85 c0                	test   eax,eax
c0011355:	74 1e                	je     c0011375 <SysShutdown(regs*)+0x2e>
c0011357:	83 f8 01             	cmp    eax,0x1
c001135a:	74 5f                	je     c00113bb <SysShutdown(regs*)+0x74>
c001135c:	83 f8 02             	cmp    eax,0x2
c001135f:	be ff ff ff ff       	mov    esi,0xffffffff
c0011364:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011369:	74 32                	je     c001139d <SysShutdown(regs*)+0x56>
c001136b:	83 c4 04             	add    esp,0x4
c001136e:	89 f0                	mov    eax,esi
c0011370:	5e                   	pop    esi
c0011371:	89 fa                	mov    edx,edi
c0011373:	5f                   	pop    edi
c0011374:	c3                   	ret    
c0011375:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001137a:	be ff ff ff ff       	mov    esi,0xffffffff
c001137f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011384:	8b 10                	mov    edx,DWORD PTR [eax]
c0011386:	6a 00                	push   0x0
c0011388:	6a 00                	push   0x0
c001138a:	6a 00                	push   0x0
c001138c:	50                   	push   eax
c001138d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011390:	83 c4 10             	add    esp,0x10
c0011393:	89 f0                	mov    eax,esi
c0011395:	83 c4 04             	add    esp,0x4
c0011398:	89 fa                	mov    edx,edi
c001139a:	5e                   	pop    esi
c001139b:	5f                   	pop    edi
c001139c:	c3                   	ret    
c001139d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00113a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00113a4:	6a 00                	push   0x0
c00113a6:	6a 00                	push   0x0
c00113a8:	6a 01                	push   0x1
c00113aa:	50                   	push   eax
c00113ab:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00113ae:	83 c4 10             	add    esp,0x10
c00113b1:	89 f0                	mov    eax,esi
c00113b3:	83 c4 04             	add    esp,0x4
c00113b6:	89 fa                	mov    edx,edi
c00113b8:	5e                   	pop    esi
c00113b9:	5f                   	pop    edi
c00113ba:	c3                   	ret    
c00113bb:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00113c0:	85 c0                	test   eax,eax
c00113c2:	74 02                	je     c00113c6 <SysShutdown(regs*)+0x7f>
c00113c4:	ff d0                	call   eax
c00113c6:	31 f6                	xor    esi,esi
c00113c8:	83 c4 04             	add    esp,0x4
c00113cb:	89 f0                	mov    eax,esi
c00113cd:	31 ff                	xor    edi,edi
c00113cf:	5e                   	pop    esi
c00113d0:	89 fa                	mov    edx,edi
c00113d2:	5f                   	pop    edi
c00113d3:	c3                   	ret    

c00113d4 <SysRealpath(regs*)>:
c00113d4:	53                   	push   ebx
c00113d5:	83 ec 08             	sub    esp,0x8
c00113d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113dc:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00113df:	85 c9                	test   ecx,ecx
c00113e1:	74 37                	je     c001141a <SysRealpath(regs*)+0x46>
c00113e3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00113e6:	31 d2                	xor    edx,edx
c00113e8:	b8 01 00 00 00       	mov    eax,0x1
c00113ed:	85 db                	test   ebx,ebx
c00113ef:	75 05                	jne    c00113f6 <SysRealpath(regs*)+0x22>
c00113f1:	83 c4 08             	add    esp,0x8
c00113f4:	5b                   	pop    ebx
c00113f5:	c3                   	ret    
c00113f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113fb:	83 ec 04             	sub    esp,0x4
c00113fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011401:	05 0c 01 00 00       	add    eax,0x10c
c0011406:	50                   	push   eax
c0011407:	51                   	push   ecx
c0011408:	53                   	push   ebx
c0011409:	e8 d0 9b ff ff       	call   c000afde <Fs::standardiseFiles(char*, char const*, char const*)>
c001140e:	83 c4 10             	add    esp,0x10
c0011411:	31 c0                	xor    eax,eax
c0011413:	31 d2                	xor    edx,edx
c0011415:	83 c4 08             	add    esp,0x8
c0011418:	5b                   	pop    ebx
c0011419:	c3                   	ret    
c001141a:	b8 01 00 00 00       	mov    eax,0x1
c001141f:	31 d2                	xor    edx,edx
c0011421:	eb f2                	jmp    c0011415 <SysRealpath(regs*)+0x41>

c0011423 <SysReadDir(regs*)>:
c0011423:	53                   	push   ebx
c0011424:	83 ec 18             	sub    esp,0x18
c0011427:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001142b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001142e:	83 f8 02             	cmp    eax,0x2
c0011431:	76 4f                	jbe    c0011482 <SysReadDir(regs*)+0x5f>
c0011433:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001143a:	77 52                	ja     c001148e <SysReadDir(regs*)+0x6b>
c001143c:	83 ec 0c             	sub    esp,0xc
c001143f:	50                   	push   eax
c0011440:	e8 4a 80 ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0011445:	83 c4 10             	add    esp,0x10
c0011448:	85 c0                	test   eax,eax
c001144a:	74 42                	je     c001148e <SysReadDir(regs*)+0x6b>
c001144c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011454:	83 ec 0c             	sub    esp,0xc
c0011457:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001145b:	8b 10                	mov    edx,DWORD PTR [eax]
c001145d:	51                   	push   ecx
c001145e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011461:	51                   	push   ecx
c0011462:	6a 00                	push   0x0
c0011464:	68 10 01 00 00       	push   0x110
c0011469:	50                   	push   eax
c001146a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001146d:	83 c4 20             	add    esp,0x20
c0011470:	85 c0                	test   eax,eax
c0011472:	89 c1                	mov    ecx,eax
c0011474:	74 27                	je     c001149d <SysReadDir(regs*)+0x7a>
c0011476:	31 d2                	xor    edx,edx
c0011478:	83 f9 07             	cmp    ecx,0x7
c001147b:	b8 02 00 00 00       	mov    eax,0x2
c0011480:	75 16                	jne    c0011498 <SysReadDir(regs*)+0x75>
c0011482:	b8 01 00 00 00       	mov    eax,0x1
c0011487:	31 d2                	xor    edx,edx
c0011489:	83 c4 18             	add    esp,0x18
c001148c:	5b                   	pop    ebx
c001148d:	c3                   	ret    
c001148e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011493:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011498:	83 c4 18             	add    esp,0x18
c001149b:	5b                   	pop    ebx
c001149c:	c3                   	ret    
c001149d:	31 c0                	xor    eax,eax
c001149f:	31 d2                	xor    edx,edx
c00114a1:	eb e6                	jmp    c0011489 <SysReadDir(regs*)+0x66>

c00114a3 <SysIsATTY(regs*)>:
c00114a3:	83 ec 0c             	sub    esp,0xc
c00114a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114aa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00114ad:	83 f8 02             	cmp    eax,0x2
c00114b0:	76 07                	jbe    c00114b9 <SysIsATTY(regs*)+0x16>
c00114b2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00114b7:	75 26                	jne    c00114df <SysIsATTY(regs*)+0x3c>
c00114b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114c1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00114c7:	85 c0                	test   eax,eax
c00114c9:	74 24                	je     c00114ef <SysIsATTY(regs*)+0x4c>
c00114cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00114cd:	83 ec 0c             	sub    esp,0xc
c00114d0:	50                   	push   eax
c00114d1:	ff 12                	call   DWORD PTR [edx]
c00114d3:	83 c4 10             	add    esp,0x10
c00114d6:	31 d2                	xor    edx,edx
c00114d8:	83 c4 0c             	add    esp,0xc
c00114db:	0f b6 c0             	movzx  eax,al
c00114de:	c3                   	ret    
c00114df:	83 ec 0c             	sub    esp,0xc
c00114e2:	50                   	push   eax
c00114e3:	e8 a7 7f ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c00114e8:	83 c4 10             	add    esp,0x10
c00114eb:	85 c0                	test   eax,eax
c00114ed:	75 dc                	jne    c00114cb <SysIsATTY(regs*)+0x28>
c00114ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114f9:	83 c4 0c             	add    esp,0xc
c00114fc:	c3                   	ret    

c00114fd <SysSeek(regs*)>:
c00114fd:	56                   	push   esi
c00114fe:	53                   	push   ebx
c00114ff:	83 ec 04             	sub    esp,0x4
c0011502:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011506:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011509:	8d 71 fd             	lea    esi,[ecx-0x3]
c001150c:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011512:	77 33                	ja     c0011547 <SysSeek(regs*)+0x4a>
c0011514:	83 ec 0c             	sub    esp,0xc
c0011517:	51                   	push   ecx
c0011518:	e8 72 7f ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c001151d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011520:	83 c4 0c             	add    esp,0xc
c0011523:	31 db                	xor    ebx,ebx
c0011525:	53                   	push   ebx
c0011526:	51                   	push   ecx
c0011527:	50                   	push   eax
c0011528:	e8 07 9e ff ff       	call   c000b334 <File::seek(unsigned long long)>
c001152d:	83 c4 10             	add    esp,0x10
c0011530:	85 c0                	test   eax,eax
c0011532:	0f 95 c0             	setne  al
c0011535:	31 d2                	xor    edx,edx
c0011537:	0f b6 c0             	movzx  eax,al
c001153a:	f7 d8                	neg    eax
c001153c:	83 d2 00             	adc    edx,0x0
c001153f:	83 c4 04             	add    esp,0x4
c0011542:	5b                   	pop    ebx
c0011543:	f7 da                	neg    edx
c0011545:	5e                   	pop    esi
c0011546:	c3                   	ret    
c0011547:	83 c4 04             	add    esp,0x4
c001154a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001154f:	5b                   	pop    ebx
c0011550:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011555:	5e                   	pop    esi
c0011556:	c3                   	ret    

c0011557 <SysTell(regs*)>:
c0011557:	53                   	push   ebx
c0011558:	83 ec 08             	sub    esp,0x8
c001155b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001155f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011562:	83 f8 02             	cmp    eax,0x2
c0011565:	76 4e                	jbe    c00115b5 <SysTell(regs*)+0x5e>
c0011567:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001156c:	76 19                	jbe    c0011587 <SysTell(regs*)+0x30>
c001156e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011571:	31 d2                	xor    edx,edx
c0011573:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011579:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011580:	83 c4 08             	add    esp,0x8
c0011583:	31 c0                	xor    eax,eax
c0011585:	5b                   	pop    ebx
c0011586:	c3                   	ret    
c0011587:	83 ec 0c             	sub    esp,0xc
c001158a:	50                   	push   eax
c001158b:	e8 ff 7e ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0011590:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011593:	5a                   	pop    edx
c0011594:	59                   	pop    ecx
c0011595:	53                   	push   ebx
c0011596:	50                   	push   eax
c0011597:	e8 ee 9d ff ff       	call   c000b38a <File::tell(unsigned long long*)>
c001159c:	83 c4 10             	add    esp,0x10
c001159f:	85 c0                	test   eax,eax
c00115a1:	0f 95 c0             	setne  al
c00115a4:	31 d2                	xor    edx,edx
c00115a6:	0f b6 c0             	movzx  eax,al
c00115a9:	f7 d8                	neg    eax
c00115ab:	83 d2 00             	adc    edx,0x0
c00115ae:	83 c4 08             	add    esp,0x8
c00115b1:	5b                   	pop    ebx
c00115b2:	f7 da                	neg    edx
c00115b4:	c3                   	ret    
c00115b5:	83 c4 08             	add    esp,0x8
c00115b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115bd:	5b                   	pop    ebx
c00115be:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115c3:	c3                   	ret    

c00115c4 <SysSize(regs*)>:
c00115c4:	53                   	push   ebx
c00115c5:	83 ec 18             	sub    esp,0x18
c00115c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115cf:	83 f8 02             	cmp    eax,0x2
c00115d2:	76 54                	jbe    c0011628 <SysSize(regs*)+0x64>
c00115d4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115d9:	76 19                	jbe    c00115f4 <SysSize(regs*)+0x30>
c00115db:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115de:	31 d2                	xor    edx,edx
c00115e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115ed:	83 c4 18             	add    esp,0x18
c00115f0:	31 c0                	xor    eax,eax
c00115f2:	5b                   	pop    ebx
c00115f3:	c3                   	ret    
c00115f4:	83 ec 0c             	sub    esp,0xc
c00115f7:	50                   	push   eax
c00115f8:	e8 92 7e ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c00115fd:	83 c4 0c             	add    esp,0xc
c0011600:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011604:	52                   	push   edx
c0011605:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011608:	52                   	push   edx
c0011609:	50                   	push   eax
c001160a:	e8 13 9f ff ff       	call   c000b522 <File::stat(unsigned long long*, bool*)>
c001160f:	83 c4 10             	add    esp,0x10
c0011612:	85 c0                	test   eax,eax
c0011614:	0f 95 c0             	setne  al
c0011617:	31 d2                	xor    edx,edx
c0011619:	0f b6 c0             	movzx  eax,al
c001161c:	f7 d8                	neg    eax
c001161e:	83 d2 00             	adc    edx,0x0
c0011621:	83 c4 18             	add    esp,0x18
c0011624:	5b                   	pop    ebx
c0011625:	f7 da                	neg    edx
c0011627:	c3                   	ret    
c0011628:	83 c4 18             	add    esp,0x18
c001162b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011630:	5b                   	pop    ebx
c0011631:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011636:	c3                   	ret    

c0011637 <SysSizeFromFilename(regs*)>:
c0011637:	57                   	push   edi
c0011638:	56                   	push   esi
c0011639:	53                   	push   ebx
c001163a:	83 ec 10             	sub    esp,0x10
c001163d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011641:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011644:	83 fb 02             	cmp    ebx,0x2
c0011647:	0f 86 83 00 00 00    	jbe    c00116d0 <SysSizeFromFilename(regs*)+0x99>
c001164d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011653:	76 1b                	jbe    c0011670 <SysSizeFromFilename(regs*)+0x39>
c0011655:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011658:	31 d2                	xor    edx,edx
c001165a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011660:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011667:	83 c4 10             	add    esp,0x10
c001166a:	31 c0                	xor    eax,eax
c001166c:	5b                   	pop    ebx
c001166d:	5e                   	pop    esi
c001166e:	5f                   	pop    edi
c001166f:	c3                   	ret    
c0011670:	83 ec 0c             	sub    esp,0xc
c0011673:	68 14 01 00 00       	push   0x114
c0011678:	e8 4e 64 ff ff       	call   c0007acb <malloc>
c001167d:	83 c4 0c             	add    esp,0xc
c0011680:	89 c7                	mov    edi,eax
c0011682:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011687:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001168a:	50                   	push   eax
c001168b:	53                   	push   ebx
c001168c:	57                   	push   edi
c001168d:	e8 28 9b ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c0011692:	83 c4 0c             	add    esp,0xc
c0011695:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011699:	50                   	push   eax
c001169a:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001169d:	52                   	push   edx
c001169e:	57                   	push   edi
c001169f:	e8 7e 9e ff ff       	call   c000b522 <File::stat(unsigned long long*, bool*)>
c00116a4:	83 c4 10             	add    esp,0x10
c00116a7:	85 ff                	test   edi,edi
c00116a9:	89 c3                	mov    ebx,eax
c00116ab:	74 0c                	je     c00116b9 <SysSizeFromFilename(regs*)+0x82>
c00116ad:	8b 07                	mov    eax,DWORD PTR [edi]
c00116af:	83 ec 0c             	sub    esp,0xc
c00116b2:	57                   	push   edi
c00116b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116b6:	83 c4 10             	add    esp,0x10
c00116b9:	31 c0                	xor    eax,eax
c00116bb:	85 db                	test   ebx,ebx
c00116bd:	0f 95 c0             	setne  al
c00116c0:	31 d2                	xor    edx,edx
c00116c2:	f7 d8                	neg    eax
c00116c4:	83 d2 00             	adc    edx,0x0
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	5b                   	pop    ebx
c00116cb:	f7 da                	neg    edx
c00116cd:	5e                   	pop    esi
c00116ce:	5f                   	pop    edi
c00116cf:	c3                   	ret    
c00116d0:	83 c4 10             	add    esp,0x10
c00116d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116d8:	5b                   	pop    ebx
c00116d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116de:	5e                   	pop    esi
c00116df:	5f                   	pop    edi
c00116e0:	c3                   	ret    

c00116e1 <SysClose(regs*)>:
c00116e1:	53                   	push   ebx
c00116e2:	83 ec 08             	sub    esp,0x8
c00116e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116e9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116ec:	83 f8 02             	cmp    eax,0x2
c00116ef:	76 41                	jbe    c0011732 <SysClose(regs*)+0x51>
c00116f1:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00116f7:	83 fa 01             	cmp    edx,0x1
c00116fa:	76 2d                	jbe    c0011729 <SysClose(regs*)+0x48>
c00116fc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011701:	77 2f                	ja     c0011732 <SysClose(regs*)+0x51>
c0011703:	83 ec 0c             	sub    esp,0xc
c0011706:	50                   	push   eax
c0011707:	e8 83 7d ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c001170c:	89 04 24             	mov    DWORD PTR [esp],eax
c001170f:	89 c3                	mov    ebx,eax
c0011711:	e8 be 9b ff ff       	call   c000b2d4 <File::close()>
c0011716:	83 c4 10             	add    esp,0x10
c0011719:	85 db                	test   ebx,ebx
c001171b:	74 0c                	je     c0011729 <SysClose(regs*)+0x48>
c001171d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	53                   	push   ebx
c0011723:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011726:	83 c4 10             	add    esp,0x10
c0011729:	83 c4 08             	add    esp,0x8
c001172c:	31 c0                	xor    eax,eax
c001172e:	5b                   	pop    ebx
c001172f:	31 d2                	xor    edx,edx
c0011731:	c3                   	ret    
c0011732:	83 c4 08             	add    esp,0x8
c0011735:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001173a:	5b                   	pop    ebx
c001173b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011740:	c3                   	ret    

c0011741 <SysOpenDir(regs*)>:
c0011741:	56                   	push   esi
c0011742:	53                   	push   ebx
c0011743:	83 ec 04             	sub    esp,0x4
c0011746:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001174a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001174d:	85 c9                	test   ecx,ecx
c001174f:	74 5d                	je     c00117ae <SysOpenDir(regs*)+0x6d>
c0011751:	83 ec 0c             	sub    esp,0xc
c0011754:	68 14 01 00 00       	push   0x114
c0011759:	e8 6d 63 ff ff       	call   c0007acb <malloc>
c001175e:	83 c4 0c             	add    esp,0xc
c0011761:	89 c6                	mov    esi,eax
c0011763:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011768:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001176b:	50                   	push   eax
c001176c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001176f:	52                   	push   edx
c0011770:	56                   	push   esi
c0011771:	e8 6a 9f ff ff       	call   c000b6e0 <Directory::Directory(char const*, Process*)>
c0011776:	83 c4 10             	add    esp,0x10
c0011779:	85 f6                	test   esi,esi
c001177b:	74 31                	je     c00117ae <SysOpenDir(regs*)+0x6d>
c001177d:	83 ec 0c             	sub    esp,0xc
c0011780:	56                   	push   esi
c0011781:	e8 16 a0 ff ff       	call   c000b79c <Directory::open()>
c0011786:	83 c4 10             	add    esp,0x10
c0011789:	85 c0                	test   eax,eax
c001178b:	75 21                	jne    c00117ae <SysOpenDir(regs*)+0x6d>
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	56                   	push   esi
c0011791:	e8 fc 79 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011796:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011799:	83 c4 10             	add    esp,0x10
c001179c:	89 02                	mov    DWORD PTR [edx],eax
c001179e:	c1 f8 1f             	sar    eax,0x1f
c00117a1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117a4:	83 c4 04             	add    esp,0x4
c00117a7:	31 c0                	xor    eax,eax
c00117a9:	5b                   	pop    ebx
c00117aa:	31 d2                	xor    edx,edx
c00117ac:	5e                   	pop    esi
c00117ad:	c3                   	ret    
c00117ae:	83 c4 04             	add    esp,0x4
c00117b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117b6:	5b                   	pop    ebx
c00117b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117bc:	5e                   	pop    esi
c00117bd:	c3                   	ret    

c00117be <SysMakeDir(regs*)>:
c00117be:	56                   	push   esi
c00117bf:	53                   	push   ebx
c00117c0:	83 ec 10             	sub    esp,0x10
c00117c3:	68 14 01 00 00       	push   0x114
c00117c8:	e8 fe 62 ff ff       	call   c0007acb <malloc>
c00117cd:	83 c4 0c             	add    esp,0xc
c00117d0:	89 c3                	mov    ebx,eax
c00117d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117da:	50                   	push   eax
c00117db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117df:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00117e2:	52                   	push   edx
c00117e3:	53                   	push   ebx
c00117e4:	e8 f7 9e ff ff       	call   c000b6e0 <Directory::Directory(char const*, Process*)>
c00117e9:	83 c4 10             	add    esp,0x10
c00117ec:	85 db                	test   ebx,ebx
c00117ee:	74 2c                	je     c001181c <SysMakeDir(regs*)+0x5e>
c00117f0:	83 ec 0c             	sub    esp,0xc
c00117f3:	53                   	push   ebx
c00117f4:	e8 83 a1 ff ff       	call   c000b97c <Directory::create()>
c00117f9:	89 c6                	mov    esi,eax
c00117fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011800:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011803:	83 c4 10             	add    esp,0x10
c0011806:	31 c0                	xor    eax,eax
c0011808:	85 f6                	test   esi,esi
c001180a:	0f 95 c0             	setne  al
c001180d:	31 d2                	xor    edx,edx
c001180f:	f7 d8                	neg    eax
c0011811:	83 d2 00             	adc    edx,0x0
c0011814:	83 c4 04             	add    esp,0x4
c0011817:	5b                   	pop    ebx
c0011818:	f7 da                	neg    edx
c001181a:	5e                   	pop    esi
c001181b:	c3                   	ret    
c001181c:	83 c4 04             	add    esp,0x4
c001181f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011824:	5b                   	pop    ebx
c0011825:	ba ff ff ff ff       	mov    edx,0xffffffff
c001182a:	5e                   	pop    esi
c001182b:	c3                   	ret    

c001182c <SysCloseDir(regs*)>:
c001182c:	53                   	push   ebx
c001182d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011832:	83 ec 08             	sub    esp,0x8
c0011835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011839:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001183c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011841:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011844:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001184a:	77 2a                	ja     c0011876 <SysCloseDir(regs*)+0x4a>
c001184c:	83 ec 0c             	sub    esp,0xc
c001184f:	51                   	push   ecx
c0011850:	e8 3a 7c ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0011855:	89 04 24             	mov    DWORD PTR [esp],eax
c0011858:	89 c3                	mov    ebx,eax
c001185a:	e8 99 9f ff ff       	call   c000b7f8 <Directory::close()>
c001185f:	83 c4 10             	add    esp,0x10
c0011862:	85 db                	test   ebx,ebx
c0011864:	74 0c                	je     c0011872 <SysCloseDir(regs*)+0x46>
c0011866:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011868:	83 ec 0c             	sub    esp,0xc
c001186b:	53                   	push   ebx
c001186c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001186f:	83 c4 10             	add    esp,0x10
c0011872:	31 c0                	xor    eax,eax
c0011874:	31 d2                	xor    edx,edx
c0011876:	83 c4 08             	add    esp,0x8
c0011879:	5b                   	pop    ebx
c001187a:	c3                   	ret    

c001187b <SysWait(regs*)>:
c001187b:	83 ec 10             	sub    esp,0x10
c001187e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011882:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011885:	52                   	push   edx
c0011886:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011889:	51                   	push   ecx
c001188a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001188d:	50                   	push   eax
c001188e:	e8 11 3d 00 00       	call   c00155a4 <waitTask(int, int*, int)>
c0011893:	83 c4 1c             	add    esp,0x1c
c0011896:	89 c2                	mov    edx,eax
c0011898:	c1 fa 1f             	sar    edx,0x1f
c001189b:	c3                   	ret    

c001189c <SysNotImpl(regs*)>:
c001189c:	83 ec 18             	sub    esp,0x18
c001189f:	68 22 15 02 c0       	push   0xc0021522
c00118a4:	e8 94 f2 ff ff       	call   c0010b3d <KePanic(char const*)>
c00118a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118b3:	83 c4 1c             	add    esp,0x1c
c00118b6:	c3                   	ret    

c00118b7 <SysPanic(regs*)>:
c00118b7:	83 ec 18             	sub    esp,0x18
c00118ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118be:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00118c1:	50                   	push   eax
c00118c2:	e8 76 f2 ff ff       	call   c0010b3d <KePanic(char const*)>
c00118c7:	b8 01 00 00 00       	mov    eax,0x1
c00118cc:	31 d2                	xor    edx,edx
c00118ce:	83 c4 1c             	add    esp,0x1c
c00118d1:	c3                   	ret    

c00118d2 <SysRmdir(regs*)>:
c00118d2:	56                   	push   esi
c00118d3:	53                   	push   ebx
c00118d4:	83 ec 10             	sub    esp,0x10
c00118d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118db:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00118de:	68 14 01 00 00       	push   0x114
c00118e3:	e8 e3 61 ff ff       	call   c0007acb <malloc>
c00118e8:	83 c4 0c             	add    esp,0xc
c00118eb:	89 c3                	mov    ebx,eax
c00118ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118f5:	50                   	push   eax
c00118f6:	56                   	push   esi
c00118f7:	53                   	push   ebx
c00118f8:	e8 bd 98 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c00118fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011900:	e8 e9 9a ff ff       	call   c000b3ee <File::unlink()>
c0011905:	83 c4 10             	add    esp,0x10
c0011908:	85 db                	test   ebx,ebx
c001190a:	89 c6                	mov    esi,eax
c001190c:	74 0c                	je     c001191a <SysRmdir(regs*)+0x48>
c001190e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011910:	83 ec 0c             	sub    esp,0xc
c0011913:	53                   	push   ebx
c0011914:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011917:	83 c4 10             	add    esp,0x10
c001191a:	31 c0                	xor    eax,eax
c001191c:	85 f6                	test   esi,esi
c001191e:	0f 95 c0             	setne  al
c0011921:	31 d2                	xor    edx,edx
c0011923:	f7 d8                	neg    eax
c0011925:	83 d2 00             	adc    edx,0x0
c0011928:	83 c4 04             	add    esp,0x4
c001192b:	5b                   	pop    ebx
c001192c:	f7 da                	neg    edx
c001192e:	5e                   	pop    esi
c001192f:	c3                   	ret    

c0011930 <SysUnlink(regs*)>:
c0011930:	56                   	push   esi
c0011931:	53                   	push   ebx
c0011932:	83 ec 10             	sub    esp,0x10
c0011935:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011939:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001193c:	68 14 01 00 00       	push   0x114
c0011941:	e8 85 61 ff ff       	call   c0007acb <malloc>
c0011946:	83 c4 0c             	add    esp,0xc
c0011949:	89 c3                	mov    ebx,eax
c001194b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011950:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011953:	50                   	push   eax
c0011954:	56                   	push   esi
c0011955:	53                   	push   ebx
c0011956:	e8 5f 98 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c001195b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001195e:	e8 8b 9a ff ff       	call   c000b3ee <File::unlink()>
c0011963:	83 c4 10             	add    esp,0x10
c0011966:	85 db                	test   ebx,ebx
c0011968:	89 c6                	mov    esi,eax
c001196a:	74 0c                	je     c0011978 <SysUnlink(regs*)+0x48>
c001196c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001196e:	83 ec 0c             	sub    esp,0xc
c0011971:	53                   	push   ebx
c0011972:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	31 c0                	xor    eax,eax
c001197a:	85 f6                	test   esi,esi
c001197c:	0f 95 c0             	setne  al
c001197f:	31 d2                	xor    edx,edx
c0011981:	f7 d8                	neg    eax
c0011983:	83 d2 00             	adc    edx,0x0
c0011986:	83 c4 04             	add    esp,0x4
c0011989:	5b                   	pop    ebx
c001198a:	f7 da                	neg    edx
c001198c:	5e                   	pop    esi
c001198d:	c3                   	ret    

c001198e <SysGetArgv(regs*)>:
c001198e:	83 ec 0c             	sub    esp,0xc
c0011991:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011995:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011998:	85 c0                	test   eax,eax
c001199a:	78 2c                	js     c00119c8 <SysGetArgv(regs*)+0x3a>
c001199c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00119a2:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00119a5:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00119ab:	7d 1b                	jge    c00119c8 <SysGetArgv(regs*)+0x3a>
c00119ad:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00119b4:	85 c0                	test   eax,eax
c00119b6:	74 18                	je     c00119d0 <SysGetArgv(regs*)+0x42>
c00119b8:	83 ec 08             	sub    esp,0x8
c00119bb:	50                   	push   eax
c00119bc:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00119bf:	50                   	push   eax
c00119c0:	e8 8b ec fe ff       	call   c0000650 <strcpy>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	31 c0                	xor    eax,eax
c00119ca:	31 d2                	xor    edx,edx
c00119cc:	83 c4 0c             	add    esp,0xc
c00119cf:	c3                   	ret    
c00119d0:	b8 01 00 00 00       	mov    eax,0x1
c00119d5:	31 d2                	xor    edx,edx
c00119d7:	83 c4 0c             	add    esp,0xc
c00119da:	c3                   	ret    

c00119db <SysUSleep(regs*)>:
c00119db:	83 ec 1c             	sub    esp,0x1c
c00119de:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00119e2:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00119e5:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00119e8:	6a 00                	push   0x0
c00119ea:	6a 64                	push   0x64
c00119ec:	52                   	push   edx
c00119ed:	50                   	push   eax
c00119ee:	e8 bd cf 00 00       	call   c001e9b0 <__udivdi3>
c00119f3:	83 c4 14             	add    esp,0x14
c00119f6:	50                   	push   eax
c00119f7:	e8 8c 3c 00 00       	call   c0015688 <milliTenthSleep(unsigned int)>
c00119fc:	31 c0                	xor    eax,eax
c00119fe:	31 d2                	xor    edx,edx
c0011a00:	83 c4 1c             	add    esp,0x1c
c0011a03:	c3                   	ret    

c0011a04 <SysSpawn(regs*)>:
c0011a04:	56                   	push   esi
c0011a05:	53                   	push   ebx
c0011a06:	83 ec 04             	sub    esp,0x4
c0011a09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a0d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a10:	85 f6                	test   esi,esi
c0011a12:	75 0a                	jne    c0011a1e <SysSpawn(regs*)+0x1a>
c0011a14:	83 c4 04             	add    esp,0x4
c0011a17:	31 c0                	xor    eax,eax
c0011a19:	5b                   	pop    ebx
c0011a1a:	31 d2                	xor    edx,edx
c0011a1c:	5e                   	pop    esi
c0011a1d:	c3                   	ret    
c0011a1e:	83 ec 0c             	sub    esp,0xc
c0011a21:	68 24 07 00 00       	push   0x724
c0011a26:	e8 a0 60 ff ff       	call   c0007acb <malloc>
c0011a2b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011a34:	89 c6                	mov    esi,eax
c0011a36:	31 c0                	xor    eax,eax
c0011a38:	85 c9                	test   ecx,ecx
c0011a3a:	75 08                	jne    c0011a44 <SysSpawn(regs*)+0x40>
c0011a3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a44:	52                   	push   edx
c0011a45:	50                   	push   eax
c0011a46:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a49:	50                   	push   eax
c0011a4a:	56                   	push   esi
c0011a4b:	e8 a0 32 00 00       	call   c0014cf0 <Process::Process(char const*, Process*, char**)>
c0011a50:	83 c4 10             	add    esp,0x10
c0011a53:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011a5a:	75 b8                	jne    c0011a14 <SysSpawn(regs*)+0x10>
c0011a5c:	83 ec 0c             	sub    esp,0xc
c0011a5f:	56                   	push   esi
c0011a60:	e8 c3 37 00 00       	call   c0015228 <Process::createUserThread()>
c0011a65:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a67:	83 c4 10             	add    esp,0x10
c0011a6a:	83 c4 04             	add    esp,0x4
c0011a6d:	5b                   	pop    ebx
c0011a6e:	89 c2                	mov    edx,eax
c0011a70:	c1 fa 1f             	sar    edx,0x1f
c0011a73:	5e                   	pop    esi
c0011a74:	c3                   	ret    

c0011a75 <SysGetEnv(regs*)>:
c0011a75:	57                   	push   edi
c0011a76:	56                   	push   esi
c0011a77:	53                   	push   ebx
c0011a78:	83 ec 1c             	sub    esp,0x1c
c0011a7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a80:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a84:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011a87:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a8a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a8d:	51                   	push   ecx
c0011a8e:	e8 62 ef ff ff       	call   c00109f5 <KeGetProcessTotalEnvCount(Process*)>
c0011a93:	83 c4 10             	add    esp,0x10
c0011a96:	39 c7                	cmp    edi,eax
c0011a98:	7c 12                	jl     c0011aac <SysGetEnv(regs*)+0x37>
c0011a9a:	31 c0                	xor    eax,eax
c0011a9c:	31 d2                	xor    edx,edx
c0011a9e:	85 f6                	test   esi,esi
c0011aa0:	74 03                	je     c0011aa5 <SysGetEnv(regs*)+0x30>
c0011aa2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011aa5:	83 c4 10             	add    esp,0x10
c0011aa8:	5b                   	pop    ebx
c0011aa9:	5e                   	pop    esi
c0011aaa:	5f                   	pop    edi
c0011aab:	c3                   	ret    
c0011aac:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011ab0:	83 ec 04             	sub    esp,0x4
c0011ab3:	57                   	push   edi
c0011ab4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011aba:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011abd:	57                   	push   edi
c0011abe:	50                   	push   eax
c0011abf:	e8 51 ef ff ff       	call   c0010a15 <KeGetProcessEnvPair(Process*, int)>
c0011ac4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ac7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011acb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011acf:	83 c4 0c             	add    esp,0xc
c0011ad2:	85 d2                	test   edx,edx
c0011ad4:	75 23                	jne    c0011af9 <SysGetEnv(regs*)+0x84>
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	50                   	push   eax
c0011ada:	e8 a1 ea fe ff       	call   c0000580 <strlen>
c0011adf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ae2:	89 c3                	mov    ebx,eax
c0011ae4:	e8 97 ea fe ff       	call   c0000580 <strlen>
c0011ae9:	83 c4 10             	add    esp,0x10
c0011aec:	31 d2                	xor    edx,edx
c0011aee:	83 c4 10             	add    esp,0x10
c0011af1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011af5:	5b                   	pop    ebx
c0011af6:	5e                   	pop    esi
c0011af7:	5f                   	pop    edi
c0011af8:	c3                   	ret    
c0011af9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011afc:	83 ec 08             	sub    esp,0x8
c0011aff:	50                   	push   eax
c0011b00:	56                   	push   esi
c0011b01:	e8 4a eb fe ff       	call   c0000650 <strcpy>
c0011b06:	58                   	pop    eax
c0011b07:	5a                   	pop    edx
c0011b08:	68 3c 15 02 c0       	push   0xc002153c
c0011b0d:	56                   	push   esi
c0011b0e:	e8 5d ed fe ff       	call   c0000870 <strcat>
c0011b13:	59                   	pop    ecx
c0011b14:	5b                   	pop    ebx
c0011b15:	57                   	push   edi
c0011b16:	56                   	push   esi
c0011b17:	e8 54 ed fe ff       	call   c0000870 <strcat>
c0011b1c:	83 c4 10             	add    esp,0x10
c0011b1f:	31 c0                	xor    eax,eax
c0011b21:	83 c4 10             	add    esp,0x10
c0011b24:	31 d2                	xor    edx,edx
c0011b26:	5b                   	pop    ebx
c0011b27:	5e                   	pop    esi
c0011b28:	5f                   	pop    edi
c0011b29:	c3                   	ret    

c0011b2a <SysSetFatAttrib(regs*)>:
c0011b2a:	57                   	push   edi
c0011b2b:	56                   	push   esi
c0011b2c:	53                   	push   ebx
c0011b2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b31:	83 ec 0c             	sub    esp,0xc
c0011b34:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011b37:	68 14 01 00 00       	push   0x114
c0011b3c:	e8 8a 5f ff ff       	call   c0007acb <malloc>
c0011b41:	83 c4 0c             	add    esp,0xc
c0011b44:	89 c3                	mov    ebx,eax
c0011b46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b4b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b4e:	50                   	push   eax
c0011b4f:	57                   	push   edi
c0011b50:	53                   	push   ebx
c0011b51:	e8 64 96 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c0011b56:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011b59:	83 c4 0c             	add    esp,0xc
c0011b5c:	0f b6 d4             	movzx  edx,ah
c0011b5f:	0f b6 c0             	movzx  eax,al
c0011b62:	52                   	push   edx
c0011b63:	50                   	push   eax
c0011b64:	53                   	push   ebx
c0011b65:	e8 1e 99 ff ff       	call   c000b488 <File::chfatattr(unsigned char, unsigned char)>
c0011b6a:	83 c4 10             	add    esp,0x10
c0011b6d:	85 db                	test   ebx,ebx
c0011b6f:	89 c6                	mov    esi,eax
c0011b71:	74 0c                	je     c0011b7f <SysSetFatAttrib(regs*)+0x55>
c0011b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b75:	83 ec 0c             	sub    esp,0xc
c0011b78:	53                   	push   ebx
c0011b79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b7c:	83 c4 10             	add    esp,0x10
c0011b7f:	5b                   	pop    ebx
c0011b80:	31 c0                	xor    eax,eax
c0011b82:	85 f6                	test   esi,esi
c0011b84:	0f 95 c0             	setne  al
c0011b87:	31 d2                	xor    edx,edx
c0011b89:	5e                   	pop    esi
c0011b8a:	f7 d8                	neg    eax
c0011b8c:	83 d2 00             	adc    edx,0x0
c0011b8f:	f7 da                	neg    edx
c0011b91:	5f                   	pop    edi
c0011b92:	c3                   	ret    

c0011b93 <SysPipe(regs*)>:
c0011b93:	57                   	push   edi
c0011b94:	56                   	push   esi
c0011b95:	53                   	push   ebx
c0011b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b9a:	83 ec 0c             	sub    esp,0xc
c0011b9d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011ba0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011ba3:	6a 20                	push   0x20
c0011ba5:	e8 21 5f ff ff       	call   c0007acb <malloc>
c0011baa:	89 c3                	mov    ebx,eax
c0011bac:	58                   	pop    eax
c0011bad:	5a                   	pop    edx
c0011bae:	68 00 50 00 00       	push   0x5000
c0011bb3:	53                   	push   ebx
c0011bb4:	e8 77 68 ff ff       	call   c0008430 <Pipe::Pipe(int)>
c0011bb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bbc:	e8 d1 75 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011bc1:	89 07                	mov    DWORD PTR [edi],eax
c0011bc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bc6:	e8 c7 75 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011bcb:	83 c4 10             	add    esp,0x10
c0011bce:	31 d2                	xor    edx,edx
c0011bd0:	89 06                	mov    DWORD PTR [esi],eax
c0011bd2:	31 c0                	xor    eax,eax
c0011bd4:	5b                   	pop    ebx
c0011bd5:	5e                   	pop    esi
c0011bd6:	5f                   	pop    edi
c0011bd7:	c3                   	ret    

c0011bd8 <SysGetUnixTime(regs*)>:
c0011bd8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011bdd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011be3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011be7:	e9 d6 9f ff ff       	jmp    c000bbc2 <Clock::timeInSecondsLocal()>

c0011bec <string_ends_with(char const*, char const*)>:
c0011bec:	57                   	push   edi
c0011bed:	56                   	push   esi
c0011bee:	53                   	push   ebx
c0011bef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011bf3:	83 ec 0c             	sub    esp,0xc
c0011bf6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011bfa:	53                   	push   ebx
c0011bfb:	e8 80 e9 fe ff       	call   c0000580 <strlen>
c0011c00:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c03:	89 c6                	mov    esi,eax
c0011c05:	e8 76 e9 fe ff       	call   c0000580 <strlen>
c0011c0a:	83 c4 10             	add    esp,0x10
c0011c0d:	31 d2                	xor    edx,edx
c0011c0f:	39 c6                	cmp    esi,eax
c0011c11:	7d 06                	jge    c0011c19 <string_ends_with(char const*, char const*)+0x2d>
c0011c13:	5b                   	pop    ebx
c0011c14:	89 d0                	mov    eax,edx
c0011c16:	5e                   	pop    esi
c0011c17:	5f                   	pop    edi
c0011c18:	c3                   	ret    
c0011c19:	83 ec 08             	sub    esp,0x8
c0011c1c:	29 c6                	sub    esi,eax
c0011c1e:	57                   	push   edi
c0011c1f:	01 f3                	add    ebx,esi
c0011c21:	53                   	push   ebx
c0011c22:	e8 59 eb fe ff       	call   c0000780 <strcmp>
c0011c27:	83 c4 10             	add    esp,0x10
c0011c2a:	31 d2                	xor    edx,edx
c0011c2c:	5b                   	pop    ebx
c0011c2d:	5e                   	pop    esi
c0011c2e:	85 c0                	test   eax,eax
c0011c30:	5f                   	pop    edi
c0011c31:	0f 94 c2             	sete   dl
c0011c34:	89 d0                	mov    eax,edx
c0011c36:	c3                   	ret    

c0011c37 <SysOpen(regs*)>:
c0011c37:	56                   	push   esi
c0011c38:	53                   	push   ebx
c0011c39:	81 ec 04 01 00 00    	sub    esp,0x104
c0011c3f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011c46:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c49:	85 c0                	test   eax,eax
c0011c4b:	0f 84 c5 01 00 00    	je     c0011e16 <SysOpen(regs*)+0x1df>
c0011c51:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c54:	85 c0                	test   eax,eax
c0011c56:	0f 84 ba 01 00 00    	je     c0011e16 <SysOpen(regs*)+0x1df>
c0011c5c:	83 ec 04             	sub    esp,0x4
c0011c5f:	68 3e 15 02 c0       	push   0xc002153e
c0011c64:	50                   	push   eax
c0011c65:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011c69:	56                   	push   esi
c0011c6a:	e8 6f 93 ff ff       	call   c000afde <Fs::standardiseFiles(char*, char const*, char const*)>
c0011c6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011c72:	e8 09 e9 fe ff       	call   c0000580 <strlen>
c0011c77:	83 c4 10             	add    esp,0x10
c0011c7a:	83 e8 01             	sub    eax,0x1
c0011c7d:	74 29                	je     c0011ca8 <SysOpen(regs*)+0x71>
c0011c7f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011c83:	83 fa 2e             	cmp    edx,0x2e
c0011c86:	74 1c                	je     c0011ca4 <SysOpen(regs*)+0x6d>
c0011c88:	83 fa 3a             	cmp    edx,0x3a
c0011c8b:	74 17                	je     c0011ca4 <SysOpen(regs*)+0x6d>
c0011c8d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011c91:	83 e8 01             	sub    eax,0x1
c0011c94:	74 12                	je     c0011ca8 <SysOpen(regs*)+0x71>
c0011c96:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011c9a:	83 fa 3a             	cmp    edx,0x3a
c0011c9d:	74 05                	je     c0011ca4 <SysOpen(regs*)+0x6d>
c0011c9f:	83 fa 2e             	cmp    edx,0x2e
c0011ca2:	75 e9                	jne    c0011c8d <SysOpen(regs*)+0x56>
c0011ca4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011ca8:	83 ec 08             	sub    esp,0x8
c0011cab:	68 42 15 02 c0       	push   0xc0021542
c0011cb0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011cb3:	50                   	push   eax
c0011cb4:	e8 33 ff ff ff       	call   c0011bec <string_ends_with(char const*, char const*)>
c0011cb9:	83 c4 10             	add    esp,0x10
c0011cbc:	85 c0                	test   eax,eax
c0011cbe:	74 1d                	je     c0011cdd <SysOpen(regs*)+0xa6>
c0011cc0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cc3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011cc9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cd0:	81 c4 04 01 00 00    	add    esp,0x104
c0011cd6:	31 c0                	xor    eax,eax
c0011cd8:	5b                   	pop    ebx
c0011cd9:	31 d2                	xor    edx,edx
c0011cdb:	5e                   	pop    esi
c0011cdc:	c3                   	ret    
c0011cdd:	83 ec 08             	sub    esp,0x8
c0011ce0:	68 47 15 02 c0       	push   0xc0021547
c0011ce5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ce8:	50                   	push   eax
c0011ce9:	e8 fe fe ff ff       	call   c0011bec <string_ends_with(char const*, char const*)>
c0011cee:	83 c4 10             	add    esp,0x10
c0011cf1:	85 c0                	test   eax,eax
c0011cf3:	75 cb                	jne    c0011cc0 <SysOpen(regs*)+0x89>
c0011cf5:	83 ec 08             	sub    esp,0x8
c0011cf8:	68 43 15 02 c0       	push   0xc0021543
c0011cfd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d00:	50                   	push   eax
c0011d01:	e8 7a ea fe ff       	call   c0000780 <strcmp>
c0011d06:	83 c4 10             	add    esp,0x10
c0011d09:	85 c0                	test   eax,eax
c0011d0b:	74 b3                	je     c0011cc0 <SysOpen(regs*)+0x89>
c0011d0d:	83 ec 08             	sub    esp,0x8
c0011d10:	68 42 15 02 c0       	push   0xc0021542
c0011d15:	56                   	push   esi
c0011d16:	e8 d1 fe ff ff       	call   c0011bec <string_ends_with(char const*, char const*)>
c0011d1b:	83 c4 10             	add    esp,0x10
c0011d1e:	85 c0                	test   eax,eax
c0011d20:	75 9e                	jne    c0011cc0 <SysOpen(regs*)+0x89>
c0011d22:	83 ec 08             	sub    esp,0x8
c0011d25:	68 4c 15 02 c0       	push   0xc002154c
c0011d2a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d2d:	50                   	push   eax
c0011d2e:	e8 b9 fe ff ff       	call   c0011bec <string_ends_with(char const*, char const*)>
c0011d33:	83 c4 10             	add    esp,0x10
c0011d36:	85 c0                	test   eax,eax
c0011d38:	0f 85 eb 00 00 00    	jne    c0011e29 <SysOpen(regs*)+0x1f2>
c0011d3e:	83 ec 08             	sub    esp,0x8
c0011d41:	68 51 15 02 c0       	push   0xc0021551
c0011d46:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d49:	50                   	push   eax
c0011d4a:	e8 9d fe ff ff       	call   c0011bec <string_ends_with(char const*, char const*)>
c0011d4f:	83 c4 10             	add    esp,0x10
c0011d52:	85 c0                	test   eax,eax
c0011d54:	0f 85 cf 00 00 00    	jne    c0011e29 <SysOpen(regs*)+0x1f2>
c0011d5a:	83 ec 08             	sub    esp,0x8
c0011d5d:	68 4d 15 02 c0       	push   0xc002154d
c0011d62:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011d65:	51                   	push   ecx
c0011d66:	e8 15 ea fe ff       	call   c0000780 <strcmp>
c0011d6b:	83 c4 10             	add    esp,0x10
c0011d6e:	85 c0                	test   eax,eax
c0011d70:	0f 84 b3 00 00 00    	je     c0011e29 <SysOpen(regs*)+0x1f2>
c0011d76:	83 ec 08             	sub    esp,0x8
c0011d79:	68 4c 15 02 c0       	push   0xc002154c
c0011d7e:	56                   	push   esi
c0011d7f:	e8 68 fe ff ff       	call   c0011bec <string_ends_with(char const*, char const*)>
c0011d84:	83 c4 10             	add    esp,0x10
c0011d87:	85 c0                	test   eax,eax
c0011d89:	0f 85 9a 00 00 00    	jne    c0011e29 <SysOpen(regs*)+0x1f2>
c0011d8f:	83 ec 0c             	sub    esp,0xc
c0011d92:	68 14 01 00 00       	push   0x114
c0011d97:	e8 2f 5d ff ff       	call   c0007acb <malloc>
c0011d9c:	83 c4 0c             	add    esp,0xc
c0011d9f:	89 c6                	mov    esi,eax
c0011da1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011da6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011da9:	50                   	push   eax
c0011daa:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011dad:	52                   	push   edx
c0011dae:	56                   	push   esi
c0011daf:	e8 06 94 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c0011db4:	83 c4 10             	add    esp,0x10
c0011db7:	85 f6                	test   esi,esi
c0011db9:	74 5b                	je     c0011e16 <SysOpen(regs*)+0x1df>
c0011dbb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011dbe:	0f b6 c2             	movzx  eax,dl
c0011dc1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011dc4:	89 d0                	mov    eax,edx
c0011dc6:	83 e0 01             	and    eax,0x1
c0011dc9:	f6 c2 02             	test   dl,0x2
c0011dcc:	74 03                	je     c0011dd1 <SysOpen(regs*)+0x19a>
c0011dce:	83 c8 02             	or     eax,0x2
c0011dd1:	f6 c2 04             	test   dl,0x4
c0011dd4:	74 03                	je     c0011dd9 <SysOpen(regs*)+0x1a2>
c0011dd6:	83 c8 04             	or     eax,0x4
c0011dd9:	f6 c2 08             	test   dl,0x8
c0011ddc:	74 03                	je     c0011de1 <SysOpen(regs*)+0x1aa>
c0011dde:	83 c8 0a             	or     eax,0xa
c0011de1:	80 e2 10             	and    dl,0x10
c0011de4:	74 03                	je     c0011de9 <SysOpen(regs*)+0x1b2>
c0011de6:	83 c8 12             	or     eax,0x12
c0011de9:	83 ec 08             	sub    esp,0x8
c0011dec:	50                   	push   eax
c0011ded:	56                   	push   esi
c0011dee:	e8 83 94 ff ff       	call   c000b276 <File::open(FileOpenMode)>
c0011df3:	83 c4 10             	add    esp,0x10
c0011df6:	85 c0                	test   eax,eax
c0011df8:	75 1c                	jne    c0011e16 <SysOpen(regs*)+0x1df>
c0011dfa:	83 ec 0c             	sub    esp,0xc
c0011dfd:	56                   	push   esi
c0011dfe:	e8 8f 73 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011e03:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e06:	83 c4 10             	add    esp,0x10
c0011e09:	89 02                	mov    DWORD PTR [edx],eax
c0011e0b:	c1 f8 1f             	sar    eax,0x1f
c0011e0e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e11:	e9 ba fe ff ff       	jmp    c0011cd0 <SysOpen(regs*)+0x99>
c0011e16:	81 c4 04 01 00 00    	add    esp,0x104
c0011e1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e21:	5b                   	pop    ebx
c0011e22:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e27:	5e                   	pop    esi
c0011e28:	c3                   	ret    
c0011e29:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e2c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011e32:	e9 92 fe ff ff       	jmp    c0011cc9 <SysOpen(regs*)+0x92>

c0011e37 <KeSystemCall(regs*, void*)>:
c0011e37:	53                   	push   ebx
c0011e38:	83 ec 08             	sub    esp,0x8
c0011e3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e3f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011e42:	83 f8 3b             	cmp    eax,0x3b
c0011e45:	77 16                	ja     c0011e5d <KeSystemCall(regs*, void*)+0x26>
c0011e47:	8b 14 85 a0 29 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd660]
c0011e4e:	85 d2                	test   edx,edx
c0011e50:	74 0b                	je     c0011e5d <KeSystemCall(regs*, void*)+0x26>
c0011e52:	83 ec 0c             	sub    esp,0xc
c0011e55:	53                   	push   ebx
c0011e56:	ff d2                	call   edx
c0011e58:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011e5b:	eb 0d                	jmp    c0011e6a <KeSystemCall(regs*, void*)+0x33>
c0011e5d:	52                   	push   edx
c0011e5e:	52                   	push   edx
c0011e5f:	50                   	push   eax
c0011e60:	68 56 15 02 c0       	push   0xc0021556
c0011e65:	e8 d2 8a ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0011e6a:	83 c4 10             	add    esp,0x10
c0011e6d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011e72:	83 c4 08             	add    esp,0x8
c0011e75:	31 d2                	xor    edx,edx
c0011e77:	5b                   	pop    ebx
c0011e78:	c3                   	ret    
c0011e79:	66 90                	xchg   ax,ax
c0011e7b:	90                   	nop

c0011e7c <KeSwitchEndian16(unsigned short)>:
c0011e7c:	83 ec 04             	sub    esp,0x4
c0011e7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e83:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011e87:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011e8b:	c1 f8 08             	sar    eax,0x8
c0011e8e:	89 c2                	mov    edx,eax
c0011e90:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011e94:	c1 e0 08             	shl    eax,0x8
c0011e97:	09 d0                	or     eax,edx
c0011e99:	83 c4 04             	add    esp,0x4
c0011e9c:	c3                   	ret    
c0011e9d:	8d 76 00             	lea    esi,[esi+0x0]

c0011ea0 <KeSwitchEndian32(unsigned int)>:
c0011ea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ea4:	c1 e8 18             	shr    eax,0x18
c0011ea7:	89 c2                	mov    edx,eax
c0011ea9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ead:	c1 e0 08             	shl    eax,0x8
c0011eb0:	25 00 00 ff 00       	and    eax,0xff0000
c0011eb5:	09 c2                	or     edx,eax
c0011eb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ebb:	c1 e8 08             	shr    eax,0x8
c0011ebe:	25 00 ff 00 00       	and    eax,0xff00
c0011ec3:	09 c2                	or     edx,eax
c0011ec5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ec9:	c1 e0 18             	shl    eax,0x18
c0011ecc:	09 d0                	or     eax,edx
c0011ece:	c3                   	ret    
c0011ecf:	90                   	nop

c0011ed0 <EthernetCRC32(unsigned char*, int)>:
c0011ed0:	83 ec 10             	sub    esp,0x10
c0011ed3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011ed8:	75 0a                	jne    c0011ee4 <EthernetCRC32(unsigned char*, int)+0x14>
c0011eda:	b8 00 00 00 00       	mov    eax,0x0
c0011edf:	e9 8c 00 00 00       	jmp    c0011f70 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011ee4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011ee9:	7f 09                	jg     c0011ef4 <EthernetCRC32(unsigned char*, int)+0x24>
c0011eeb:	b8 00 00 00 00       	mov    eax,0x0
c0011ef0:	eb 7e                	jmp    c0011f70 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011ef2:	66 90                	xchg   ax,ax
c0011ef4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011efc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011f04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011f0c:	7d 5a                	jge    c0011f68 <EthernetCRC32(unsigned char*, int)+0x98>
c0011f0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f16:	01 d0                	add    eax,edx
c0011f18:	8a 00                	mov    al,BYTE PTR [eax]
c0011f1a:	0f b6 c0             	movzx  eax,al
c0011f1d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011f21:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f29:	8d 76 00             	lea    esi,[esi+0x0]
c0011f2c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011f31:	7f 2d                	jg     c0011f60 <EthernetCRC32(unsigned char*, int)+0x90>
c0011f33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f37:	83 e0 01             	and    eax,0x1
c0011f3a:	74 10                	je     c0011f4c <EthernetCRC32(unsigned char*, int)+0x7c>
c0011f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f40:	d1 e8                	shr    eax,1
c0011f42:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011f47:	eb 0b                	jmp    c0011f54 <EthernetCRC32(unsigned char*, int)+0x84>
c0011f49:	8d 76 00             	lea    esi,[esi+0x0]
c0011f4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f50:	d1 e8                	shr    eax,1
c0011f52:	66 90                	xchg   ax,ax
c0011f54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f58:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011f5d:	eb cd                	jmp    c0011f2c <EthernetCRC32(unsigned char*, int)+0x5c>
c0011f5f:	90                   	nop
c0011f60:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011f65:	eb 9d                	jmp    c0011f04 <EthernetCRC32(unsigned char*, int)+0x34>
c0011f67:	90                   	nop
c0011f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6c:	f7 d0                	not    eax
c0011f6e:	66 90                	xchg   ax,ax
c0011f70:	83 c4 10             	add    esp,0x10
c0011f73:	c3                   	ret    

c0011f74 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011f74:	83 ec 2c             	sub    esp,0x2c
c0011f77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f7b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011f80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f8f:	0f b7 c0             	movzx  eax,ax
c0011f92:	3d 06 08 00 00       	cmp    eax,0x806
c0011f97:	75 13                	jne    c0011fac <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011f99:	83 ec 0c             	sub    esp,0xc
c0011f9c:	68 6a 15 02 c0       	push   0xc002156a
c0011fa1:	e8 96 89 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0011fa6:	83 c4 10             	add    esp,0x10
c0011fa9:	eb 25                	jmp    c0011fd0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011fab:	90                   	nop
c0011fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fb0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fb3:	0f b7 c0             	movzx  eax,ax
c0011fb6:	3d 00 08 00 00       	cmp    eax,0x800
c0011fbb:	75 13                	jne    c0011fd0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011fbd:	83 ec 0c             	sub    esp,0xc
c0011fc0:	68 80 15 02 c0       	push   0xc0021580
c0011fc5:	e8 72 89 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0011fca:	83 c4 10             	add    esp,0x10
c0011fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0011fd0:	90                   	nop
c0011fd1:	83 c4 2c             	add    esp,0x2c
c0011fd4:	c3                   	ret    

c0011fd5 <CmOpen(char const*)>:
c0011fd5:	57                   	push   edi
c0011fd6:	56                   	push   esi
c0011fd7:	53                   	push   ebx
c0011fd8:	83 ec 1c             	sub    esp,0x1c
c0011fdb:	6a 30                	push   0x30
c0011fdd:	e8 e9 5a ff ff       	call   c0007acb <malloc>
c0011fe2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011fe9:	89 c3                	mov    ebx,eax
c0011feb:	e8 db 5a ff ff       	call   c0007acb <malloc>
c0011ff0:	83 c4 0c             	add    esp,0xc
c0011ff3:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011ff9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011ffd:	89 c6                	mov    esi,eax
c0011fff:	50                   	push   eax
c0012000:	e8 b5 91 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c0012005:	83 c4 0c             	add    esp,0xc
c0012008:	89 33                	mov    DWORD PTR [ebx],esi
c001200a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001200e:	50                   	push   eax
c001200f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012013:	50                   	push   eax
c0012014:	56                   	push   esi
c0012015:	e8 08 95 ff ff       	call   c000b522 <File::stat(unsigned long long*, bool*)>
c001201a:	5a                   	pop    edx
c001201b:	59                   	pop    ecx
c001201c:	6a 01                	push   0x1
c001201e:	ff 33                	push   DWORD PTR [ebx]
c0012020:	e8 51 92 ff ff       	call   c000b276 <File::open(FileOpenMode)>
c0012025:	5e                   	pop    esi
c0012026:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001202a:	e8 9c 5a ff ff       	call   c0007acb <malloc>
c001202f:	5a                   	pop    edx
c0012030:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012034:	89 c7                	mov    edi,eax
c0012036:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012038:	8b 10                	mov    edx,DWORD PTR [eax]
c001203a:	56                   	push   esi
c001203b:	57                   	push   edi
c001203c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012040:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012044:	50                   	push   eax
c0012045:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012048:	83 c4 14             	add    esp,0x14
c001204b:	ff 33                	push   DWORD PTR [ebx]
c001204d:	e8 82 92 ff ff       	call   c000b2d4 <File::close()>
c0012052:	59                   	pop    ecx
c0012053:	58                   	pop    eax
c0012054:	6a 13                	push   0x13
c0012056:	ff 33                	push   DWORD PTR [ebx]
c0012058:	e8 19 92 ff ff       	call   c000b276 <File::open(FileOpenMode)>
c001205d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001205f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012061:	89 34 24             	mov    DWORD PTR [esp],esi
c0012064:	57                   	push   edi
c0012065:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012069:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001206d:	50                   	push   eax
c001206e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012071:	83 c4 14             	add    esp,0x14
c0012074:	57                   	push   edi
c0012075:	e8 61 5a ff ff       	call   c0007adb <free>
c001207a:	83 c4 10             	add    esp,0x10
c001207d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012080:	75 10                	jne    c0012092 <CmOpen(char const*)+0xbd>
c0012082:	83 ec 0c             	sub    esp,0xc
c0012085:	68 95 15 02 c0       	push   0xc0021595
c001208a:	e8 ae ea ff ff       	call   c0010b3d <KePanic(char const*)>
c001208f:	83 c4 10             	add    esp,0x10
c0012092:	50                   	push   eax
c0012093:	6a 00                	push   0x0
c0012095:	6a 00                	push   0x0
c0012097:	ff 33                	push   DWORD PTR [ebx]
c0012099:	8d 7b 05             	lea    edi,[ebx+0x5]
c001209c:	e8 93 92 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c00120a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00120a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00120a8:	57                   	push   edi
c00120a9:	6a 00                	push   0x0
c00120ab:	6a 2b                	push   0x2b
c00120ad:	50                   	push   eax
c00120ae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00120b1:	83 c4 1c             	add    esp,0x1c
c00120b4:	6a 00                	push   0x0
c00120b6:	6a 00                	push   0x0
c00120b8:	ff 33                	push   DWORD PTR [ebx]
c00120ba:	e8 75 92 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c00120bf:	83 c4 0c             	add    esp,0xc
c00120c2:	6a 08                	push   0x8
c00120c4:	68 a6 15 02 c0       	push   0xc00215a6
c00120c9:	57                   	push   edi
c00120ca:	e8 b1 e2 fe ff       	call   c0000380 <memcmp>
c00120cf:	83 c4 10             	add    esp,0x10
c00120d2:	85 c0                	test   eax,eax
c00120d4:	74 10                	je     c00120e6 <CmOpen(char const*)+0x111>
c00120d6:	83 ec 0c             	sub    esp,0xc
c00120d9:	68 af 15 02 c0       	push   0xc00215af
c00120de:	e8 5a ea ff ff       	call   c0010b3d <KePanic(char const*)>
c00120e3:	83 c4 10             	add    esp,0x10
c00120e6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00120ea:	83 c4 10             	add    esp,0x10
c00120ed:	89 d8                	mov    eax,ebx
c00120ef:	5b                   	pop    ebx
c00120f0:	5e                   	pop    esi
c00120f1:	5f                   	pop    edi
c00120f2:	c3                   	ret    

c00120f3 <CmClose(Reghive_Tag*)>:
c00120f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120f7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00120fb:	74 0b                	je     c0012108 <CmClose(Reghive_Tag*)+0x15>
c00120fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00120ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012103:	e9 cc 91 ff ff       	jmp    c000b2d4 <File::close()>
c0012108:	c3                   	ret    

c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012109:	53                   	push   ebx
c001210a:	83 ec 18             	sub    esp,0x18
c001210d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012111:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012115:	74 29                	je     c0012140 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012117:	50                   	push   eax
c0012118:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001211d:	99                   	cdq    
c001211e:	52                   	push   edx
c001211f:	50                   	push   eax
c0012120:	ff 33                	push   DWORD PTR [ebx]
c0012122:	e8 0d 92 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c0012127:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012129:	5a                   	pop    edx
c001212a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001212e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012130:	51                   	push   ecx
c0012131:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012135:	6a 00                	push   0x0
c0012137:	6a 2b                	push   0x2b
c0012139:	50                   	push   eax
c001213a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001213d:	83 c4 20             	add    esp,0x20
c0012140:	83 c4 18             	add    esp,0x18
c0012143:	5b                   	pop    ebx
c0012144:	c3                   	ret    

c0012145 <CmGetString(Reghive_Tag*, int, char*)>:
c0012145:	55                   	push   ebp
c0012146:	57                   	push   edi
c0012147:	56                   	push   esi
c0012148:	53                   	push   ebx
c0012149:	31 db                	xor    ebx,ebx
c001214b:	83 ec 70             	sub    esp,0x70
c001214e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012152:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012159:	50                   	push   eax
c001215a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012161:	55                   	push   ebp
c0012162:	e8 a2 ff ff ff       	call   c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012167:	83 c4 10             	add    esp,0x10
c001216a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001216f:	c1 e0 08             	shl    eax,0x8
c0012172:	89 c2                	mov    edx,eax
c0012174:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012179:	09 d0                	or     eax,edx
c001217b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012180:	c1 e0 08             	shl    eax,0x8
c0012183:	09 d0                	or     eax,edx
c0012185:	74 25                	je     c00121ac <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012187:	52                   	push   edx
c0012188:	8d 54 24 39          	lea    edx,[esp+0x39]
c001218c:	52                   	push   edx
c001218d:	6b fb 0d             	imul   edi,ebx,0xd
c0012190:	50                   	push   eax
c0012191:	55                   	push   ebp
c0012192:	e8 72 ff ff ff       	call   c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012197:	8d 74 24 49          	lea    esi,[esp+0x49]
c001219b:	b9 27 00 00 00       	mov    ecx,0x27
c00121a0:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00121a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121a9:	83 c4 10             	add    esp,0x10
c00121ac:	83 c3 03             	add    ebx,0x3
c00121af:	83 fb 15             	cmp    ebx,0x15
c00121b2:	75 b6                	jne    c001216a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00121b4:	83 c4 6c             	add    esp,0x6c
c00121b7:	5b                   	pop    ebx
c00121b8:	5e                   	pop    esi
c00121b9:	5f                   	pop    edi
c00121ba:	5d                   	pop    ebp
c00121bb:	c3                   	ret    

c00121bc <CmEnterDirectory(Reghive_Tag*, int)>:
c00121bc:	83 ec 40             	sub    esp,0x40
c00121bf:	8d 44 24 09          	lea    eax,[esp+0x9]
c00121c3:	50                   	push   eax
c00121c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00121c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00121cc:	e8 38 ff ff ff       	call   c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121d1:	83 c4 10             	add    esp,0x10
c00121d4:	83 c8 ff             	or     eax,0xffffffff
c00121d7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00121dc:	75 19                	jne    c00121f7 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00121de:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00121e3:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00121e8:	c1 e0 08             	shl    eax,0x8
c00121eb:	09 c2                	or     edx,eax
c00121ed:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00121f2:	c1 e0 10             	shl    eax,0x10
c00121f5:	09 d0                	or     eax,edx
c00121f7:	83 c4 3c             	add    esp,0x3c
c00121fa:	c3                   	ret    

c00121fb <CmGetNext(Reghive_Tag*, int)>:
c00121fb:	83 ec 40             	sub    esp,0x40
c00121fe:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012202:	50                   	push   eax
c0012203:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012207:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001220b:	e8 f9 fe ff ff       	call   c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012210:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012215:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001221a:	c1 e0 08             	shl    eax,0x8
c001221d:	09 c2                	or     edx,eax
c001221f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012224:	83 c4 4c             	add    esp,0x4c
c0012227:	c1 e0 10             	shl    eax,0x10
c001222a:	09 d0                	or     eax,edx
c001222c:	c3                   	ret    

c001222d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c001222d:	53                   	push   ebx
c001222e:	83 ec 18             	sub    esp,0x18
c0012231:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012235:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012239:	74 29                	je     c0012264 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001223b:	50                   	push   eax
c001223c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012241:	99                   	cdq    
c0012242:	52                   	push   edx
c0012243:	50                   	push   eax
c0012244:	ff 33                	push   DWORD PTR [ebx]
c0012246:	e8 e9 90 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c001224b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001224d:	5a                   	pop    edx
c001224e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012252:	8b 10                	mov    edx,DWORD PTR [eax]
c0012254:	51                   	push   ecx
c0012255:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012259:	6a 00                	push   0x0
c001225b:	6a 2b                	push   0x2b
c001225d:	50                   	push   eax
c001225e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012261:	83 c4 20             	add    esp,0x20
c0012264:	83 c4 18             	add    esp,0x18
c0012267:	5b                   	pop    ebx
c0012268:	c3                   	ret    

c0012269 <CmFreeExtent(Reghive_Tag*, int)>:
c0012269:	53                   	push   ebx
c001226a:	83 ec 3c             	sub    esp,0x3c
c001226d:	6a 2b                	push   0x2b
c001226f:	6a 00                	push   0x0
c0012271:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012275:	53                   	push   ebx
c0012276:	e8 75 e2 fe ff       	call   c00004f0 <memset>
c001227b:	83 c4 0c             	add    esp,0xc
c001227e:	53                   	push   ebx
c001227f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012283:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012287:	e8 a1 ff ff ff       	call   c001222d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001228c:	83 c4 48             	add    esp,0x48
c001228f:	5b                   	pop    ebx
c0012290:	c3                   	ret    

c0012291 <CmUpdateHeader(Reghive_Tag*)>:
c0012291:	83 ec 0c             	sub    esp,0xc
c0012294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012298:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001229c:	74 10                	je     c00122ae <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001229e:	52                   	push   edx
c001229f:	8d 50 05             	lea    edx,[eax+0x5]
c00122a2:	52                   	push   edx
c00122a3:	6a 00                	push   0x0
c00122a5:	50                   	push   eax
c00122a6:	e8 82 ff ff ff       	call   c001222d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122ab:	83 c4 10             	add    esp,0x10
c00122ae:	83 c4 0c             	add    esp,0xc
c00122b1:	c3                   	ret    

c00122b2 <CmExpand(Reghive_Tag*, int)>:
c00122b2:	55                   	push   ebp
c00122b3:	57                   	push   edi
c00122b4:	83 cf ff             	or     edi,0xffffffff
c00122b7:	56                   	push   esi
c00122b8:	53                   	push   ebx
c00122b9:	83 ec 3c             	sub    esp,0x3c
c00122bc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00122c0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00122c4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00122c8:	74 59                	je     c0012323 <CmExpand(Reghive_Tag*, int)+0x71>
c00122ca:	50                   	push   eax
c00122cb:	31 d2                	xor    edx,edx
c00122cd:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00122d1:	31 ff                	xor    edi,edi
c00122d3:	52                   	push   edx
c00122d4:	50                   	push   eax
c00122d5:	ff 33                	push   DWORD PTR [ebx]
c00122d7:	e8 58 90 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c00122dc:	83 c4 0c             	add    esp,0xc
c00122df:	6a 2b                	push   0x2b
c00122e1:	6a 00                	push   0x0
c00122e3:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c00122e7:	55                   	push   ebp
c00122e8:	e8 03 e2 fe ff       	call   c00004f0 <memset>
c00122ed:	83 c4 10             	add    esp,0x10
c00122f0:	39 f7                	cmp    edi,esi
c00122f2:	7d 1b                	jge    c001230f <CmExpand(Reghive_Tag*, int)+0x5d>
c00122f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122f6:	83 ec 0c             	sub    esp,0xc
c00122f9:	47                   	inc    edi
c00122fa:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00122fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0012300:	51                   	push   ecx
c0012301:	55                   	push   ebp
c0012302:	6a 00                	push   0x0
c0012304:	6a 2b                	push   0x2b
c0012306:	50                   	push   eax
c0012307:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001230a:	83 c4 20             	add    esp,0x20
c001230d:	eb e1                	jmp    c00122f0 <CmExpand(Reghive_Tag*, int)+0x3e>
c001230f:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012312:	83 ec 0c             	sub    esp,0xc
c0012315:	01 fe                	add    esi,edi
c0012317:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c001231a:	53                   	push   ebx
c001231b:	e8 71 ff ff ff       	call   c0012291 <CmUpdateHeader(Reghive_Tag*)>
c0012320:	83 c4 10             	add    esp,0x10
c0012323:	83 c4 3c             	add    esp,0x3c
c0012326:	89 f8                	mov    eax,edi
c0012328:	5b                   	pop    ebx
c0012329:	5e                   	pop    esi
c001232a:	5f                   	pop    edi
c001232b:	5d                   	pop    ebp
c001232c:	c3                   	ret    

c001232d <CmFindUnusedExtent(Reghive_Tag*)>:
c001232d:	55                   	push   ebp
c001232e:	57                   	push   edi
c001232f:	56                   	push   esi
c0012330:	53                   	push   ebx
c0012331:	83 cb ff             	or     ebx,0xffffffff
c0012334:	83 ec 1c             	sub    esp,0x1c
c0012337:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001233b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001233f:	74 68                	je     c00123a9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012341:	51                   	push   ecx
c0012342:	be 2b 00 00 00       	mov    esi,0x2b
c0012347:	6a 00                	push   0x0
c0012349:	31 ff                	xor    edi,edi
c001234b:	6a 00                	push   0x0
c001234d:	31 db                	xor    ebx,ebx
c001234f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012352:	e8 dd 8f ff ff       	call   c000b334 <File::seek(unsigned long long)>
c0012357:	83 c4 10             	add    esp,0x10
c001235a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001235d:	76 3b                	jbe    c001239a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001235f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012362:	83 ec 0c             	sub    esp,0xc
c0012365:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012369:	8b 10                	mov    edx,DWORD PTR [eax]
c001236b:	51                   	push   ecx
c001236c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012370:	51                   	push   ecx
c0012371:	6a 00                	push   0x0
c0012373:	6a 01                	push   0x1
c0012375:	50                   	push   eax
c0012376:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012379:	83 c4 20             	add    esp,0x20
c001237c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012381:	74 26                	je     c00123a9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012383:	52                   	push   edx
c0012384:	43                   	inc    ebx
c0012385:	57                   	push   edi
c0012386:	56                   	push   esi
c0012387:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001238a:	e8 a5 8f ff ff       	call   c000b334 <File::seek(unsigned long long)>
c001238f:	83 c6 2b             	add    esi,0x2b
c0012392:	83 d7 00             	adc    edi,0x0
c0012395:	83 c4 10             	add    esp,0x10
c0012398:	eb c0                	jmp    c001235a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001239a:	50                   	push   eax
c001239b:	50                   	push   eax
c001239c:	6a 40                	push   0x40
c001239e:	55                   	push   ebp
c001239f:	e8 0e ff ff ff       	call   c00122b2 <CmExpand(Reghive_Tag*, int)>
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	89 c3                	mov    ebx,eax
c00123a9:	83 c4 1c             	add    esp,0x1c
c00123ac:	89 d8                	mov    eax,ebx
c00123ae:	5b                   	pop    ebx
c00123af:	5e                   	pop    esi
c00123b0:	5f                   	pop    edi
c00123b1:	5d                   	pop    ebp
c00123b2:	c3                   	ret    

c00123b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00123b3:	55                   	push   ebp
c00123b4:	57                   	push   edi
c00123b5:	56                   	push   esi
c00123b6:	53                   	push   ebx
c00123b7:	81 ec 88 00 00 00    	sub    esp,0x88
c00123bd:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00123c4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00123cb:	e8 5d ff ff ff       	call   c001232d <CmFindUnusedExtent(Reghive_Tag*)>
c00123d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123d4:	83 c4 0c             	add    esp,0xc
c00123d7:	6a 2b                	push   0x2b
c00123d9:	6a 00                	push   0x0
c00123db:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00123df:	55                   	push   ebp
c00123e0:	e8 0b e1 fe ff       	call   c00004f0 <memset>
c00123e5:	83 c4 10             	add    esp,0x10
c00123e8:	85 db                	test   ebx,ebx
c00123ea:	74 12                	je     c00123fe <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00123ec:	51                   	push   ecx
c00123ed:	55                   	push   ebp
c00123ee:	53                   	push   ebx
c00123ef:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00123f6:	e8 0e fd ff ff       	call   c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123fb:	83 c4 10             	add    esp,0x10
c00123fe:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012402:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012409:	b9 2b 00 00 00       	mov    ecx,0x2b
c001240e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012410:	85 db                	test   ebx,ebx
c0012412:	74 49                	je     c001245d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012414:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012419:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c001241e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012422:	c1 e0 08             	shl    eax,0x8
c0012425:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001242b:	09 c8                	or     eax,ecx
c001242d:	74 11                	je     c0012440 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001242f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012433:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012437:	c1 e8 10             	shr    eax,0x10
c001243a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001243e:	eb 0f                	jmp    c001244f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012440:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012445:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001244a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001244f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012453:	c1 ea 08             	shr    edx,0x8
c0012456:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001245b:	eb 0f                	jmp    c001246c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c001245d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012462:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012467:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001246c:	52                   	push   edx
c001246d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012471:	50                   	push   eax
c0012472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012476:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001247d:	e8 ab fd ff ff       	call   c001222d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012482:	83 c4 10             	add    esp,0x10
c0012485:	85 db                	test   ebx,ebx
c0012487:	74 12                	je     c001249b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012489:	50                   	push   eax
c001248a:	55                   	push   ebp
c001248b:	53                   	push   ebx
c001248c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012493:	e8 95 fd ff ff       	call   c001222d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012498:	83 c4 10             	add    esp,0x10
c001249b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001249f:	83 c4 7c             	add    esp,0x7c
c00124a2:	5b                   	pop    ebx
c00124a3:	5e                   	pop    esi
c00124a4:	5f                   	pop    edi
c00124a5:	5d                   	pop    ebp
c00124a6:	c3                   	ret    

c00124a7 <CmSetString(Reghive_Tag*, int, char const*)>:
c00124a7:	55                   	push   ebp
c00124a8:	57                   	push   edi
c00124a9:	56                   	push   esi
c00124aa:	53                   	push   ebx
c00124ab:	bb 27 00 00 00       	mov    ebx,0x27
c00124b0:	81 ec 88 00 00 00    	sub    esp,0x88
c00124b6:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c00124bd:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00124c4:	e8 b7 e0 fe ff       	call   c0000580 <strlen>
c00124c9:	8d 48 26             	lea    ecx,[eax+0x26]
c00124cc:	89 c8                	mov    eax,ecx
c00124ce:	99                   	cdq    
c00124cf:	f7 fb                	idiv   ebx
c00124d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124d5:	83 c4 10             	add    esp,0x10
c00124d8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00124de:	7e 10                	jle    c00124f0 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	68 c0 15 02 c0       	push   0xc00215c0
c00124e8:	e8 50 e6 ff ff       	call   c0010b3d <KePanic(char const*)>
c00124ed:	83 c4 10             	add    esp,0x10
c00124f0:	53                   	push   ebx
c00124f1:	31 ed                	xor    ebp,ebp
c00124f3:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00124f7:	53                   	push   ebx
c00124f8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00124ff:	57                   	push   edi
c0012500:	e8 04 fc ff ff       	call   c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012505:	83 c4 10             	add    esp,0x10
c0012508:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c001250c:	89 f0                	mov    eax,esi
c001250e:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012512:	c1 e0 08             	shl    eax,0x8
c0012515:	09 c6                	or     esi,eax
c0012517:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001251b:	c1 e6 08             	shl    esi,0x8
c001251e:	09 c6                	or     esi,eax
c0012520:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012524:	7e 72                	jle    c0012598 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012526:	85 f6                	test   esi,esi
c0012528:	75 25                	jne    c001254f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001252a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001252f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012533:	50                   	push   eax
c0012534:	6a 00                	push   0x0
c0012536:	6a 00                	push   0x0
c0012538:	57                   	push   edi
c0012539:	e8 75 fe ff ff       	call   c00123b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001253e:	83 c4 10             	add    esp,0x10
c0012541:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012544:	89 c6                	mov    esi,eax
c0012546:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012549:	c1 f8 10             	sar    eax,0x10
c001254c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001254f:	51                   	push   ecx
c0012550:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012554:	52                   	push   edx
c0012555:	56                   	push   esi
c0012556:	57                   	push   edi
c0012557:	e8 ad fb ff ff       	call   c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001255c:	83 c4 0c             	add    esp,0xc
c001255f:	6a 27                	push   0x27
c0012561:	6a 00                	push   0x0
c0012563:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012567:	51                   	push   ecx
c0012568:	e8 83 df fe ff       	call   c00004f0 <memset>
c001256d:	6b c5 27             	imul   eax,ebp,0x27
c0012570:	83 c4 0c             	add    esp,0xc
c0012573:	6a 27                	push   0x27
c0012575:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c001257c:	50                   	push   eax
c001257d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012581:	51                   	push   ecx
c0012582:	e8 09 e1 fe ff       	call   c0000690 <strncpy>
c0012587:	83 c4 0c             	add    esp,0xc
c001258a:	8d 54 24 49          	lea    edx,[esp+0x49]
c001258e:	52                   	push   edx
c001258f:	56                   	push   esi
c0012590:	57                   	push   edi
c0012591:	e8 97 fc ff ff       	call   c001222d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012596:	eb 19                	jmp    c00125b1 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012598:	85 f6                	test   esi,esi
c001259a:	74 18                	je     c00125b4 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c001259c:	52                   	push   edx
c001259d:	52                   	push   edx
c001259e:	56                   	push   esi
c001259f:	57                   	push   edi
c00125a0:	e8 c4 fc ff ff       	call   c0012269 <CmFreeExtent(Reghive_Tag*, int)>
c00125a5:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00125a9:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00125ad:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	45                   	inc    ebp
c00125b5:	83 c3 03             	add    ebx,0x3
c00125b8:	83 fd 07             	cmp    ebp,0x7
c00125bb:	0f 85 47 ff ff ff    	jne    c0012508 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00125c1:	50                   	push   eax
c00125c2:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00125c6:	50                   	push   eax
c00125c7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00125ce:	57                   	push   edi
c00125cf:	e8 59 fc ff ff       	call   c001222d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00125d4:	81 c4 8c 00 00 00    	add    esp,0x8c
c00125da:	5b                   	pop    ebx
c00125db:	5e                   	pop    esi
c00125dc:	5f                   	pop    edi
c00125dd:	5d                   	pop    ebp
c00125de:	c3                   	ret    

c00125df <CmGetMatch(char*, char*, bool, bool*)>:
c00125df:	56                   	push   esi
c00125e0:	53                   	push   ebx
c00125e1:	50                   	push   eax
c00125e2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00125e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00125eb:	74 25                	je     c0012612 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00125ed:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00125f0:	31 db                	xor    ebx,ebx
c00125f2:	50                   	push   eax
c00125f3:	50                   	push   eax
c00125f4:	8d 04 9d a0 2a 02 c0 	lea    eax,[ebx*4-0x3ffdd560]
c00125fb:	50                   	push   eax
c00125fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012600:	e8 7b e1 fe ff       	call   c0000780 <strcmp>
c0012605:	83 c4 10             	add    esp,0x10
c0012608:	85 c0                	test   eax,eax
c001260a:	74 2e                	je     c001263a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001260c:	43                   	inc    ebx
c001260d:	83 fb 3f             	cmp    ebx,0x3f
c0012610:	75 e0                	jne    c00125f2 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012612:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012615:	31 db                	xor    ebx,ebx
c0012617:	51                   	push   ecx
c0012618:	51                   	push   ecx
c0012619:	8d 04 9d a0 2a 02 c0 	lea    eax,[ebx*4-0x3ffdd560]
c0012620:	50                   	push   eax
c0012621:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012625:	e8 56 e1 fe ff       	call   c0000780 <strcmp>
c001262a:	83 c4 10             	add    esp,0x10
c001262d:	85 c0                	test   eax,eax
c001262f:	74 09                	je     c001263a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012631:	43                   	inc    ebx
c0012632:	83 fb 3f             	cmp    ebx,0x3f
c0012635:	75 e0                	jne    c0012617 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012637:	83 cb ff             	or     ebx,0xffffffff
c001263a:	5a                   	pop    edx
c001263b:	89 d8                	mov    eax,ebx
c001263d:	5b                   	pop    ebx
c001263e:	5e                   	pop    esi
c001263f:	c3                   	ret    

c0012640 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012640:	55                   	push   ebp
c0012641:	31 c0                	xor    eax,eax
c0012643:	57                   	push   edi
c0012644:	56                   	push   esi
c0012645:	53                   	push   ebx
c0012646:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001264a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001264e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012652:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012656:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012658:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001265b:	83 fd 1f             	cmp    ebp,0x1f
c001265e:	7f 0b                	jg     c001266b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012660:	0f b6 c2             	movzx  eax,dl
c0012663:	d3 e0                	shl    eax,cl
c0012665:	09 07                	or     DWORD PTR [edi],eax
c0012667:	b0 01                	mov    al,0x1
c0012669:	01 33                	add    DWORD PTR [ebx],esi
c001266b:	5b                   	pop    ebx
c001266c:	5e                   	pop    esi
c001266d:	5f                   	pop    edi
c001266e:	5d                   	pop    ebp
c001266f:	c3                   	ret    

c0012670 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012670:	57                   	push   edi
c0012671:	56                   	push   esi
c0012672:	53                   	push   ebx
c0012673:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012677:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001267b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001267f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012683:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012685:	7c 17                	jl     c001269e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012687:	8b 17                	mov    edx,DWORD PTR [edi]
c0012689:	b8 01 00 00 00       	mov    eax,0x1
c001268e:	d3 e0                	shl    eax,cl
c0012690:	48                   	dec    eax
c0012691:	21 d0                	and    eax,edx
c0012693:	d3 ea                	shr    edx,cl
c0012695:	89 17                	mov    DWORD PTR [edi],edx
c0012697:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012699:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001269c:	eb 05                	jmp    c00126a3 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001269e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126a1:	31 c0                	xor    eax,eax
c00126a3:	5b                   	pop    ebx
c00126a4:	5e                   	pop    esi
c00126a5:	5f                   	pop    edi
c00126a6:	c3                   	ret    

c00126a7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00126a7:	83 ec 40             	sub    esp,0x40
c00126aa:	8d 44 24 09          	lea    eax,[esp+0x9]
c00126ae:	50                   	push   eax
c00126af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00126b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00126b7:	e8 4d fa ff ff       	call   c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00126bc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00126c0:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00126c4:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00126c8:	89 10                	mov    DWORD PTR [eax],edx
c00126ca:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00126cd:	83 c4 4c             	add    esp,0x4c
c00126d0:	c3                   	ret    

c00126d1 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00126d1:	55                   	push   ebp
c00126d2:	57                   	push   edi
c00126d3:	56                   	push   esi
c00126d4:	53                   	push   ebx
c00126d5:	83 ec 40             	sub    esp,0x40
c00126d8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00126dc:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00126e0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00126e4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00126e8:	53                   	push   ebx
c00126e9:	56                   	push   esi
c00126ea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126ee:	e8 16 fa ff ff       	call   c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00126f3:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00126f7:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00126fb:	83 c4 0c             	add    esp,0xc
c00126fe:	53                   	push   ebx
c00126ff:	56                   	push   esi
c0012700:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012704:	e8 24 fb ff ff       	call   c001222d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012709:	83 c4 4c             	add    esp,0x4c
c001270c:	5b                   	pop    ebx
c001270d:	5e                   	pop    esi
c001270e:	5f                   	pop    edi
c001270f:	5d                   	pop    ebp
c0012710:	c3                   	ret    

c0012711 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012711:	55                   	push   ebp
c0012712:	57                   	push   edi
c0012713:	56                   	push   esi
c0012714:	31 f6                	xor    esi,esi
c0012716:	53                   	push   ebx
c0012717:	31 db                	xor    ebx,ebx
c0012719:	83 ec 40             	sub    esp,0x40
c001271c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012724:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001272c:	6a 12                	push   0x12
c001272e:	68 ee 00 00 00       	push   0xee
c0012733:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012737:	e8 b4 dd fe ff       	call   c00004f0 <memset>
c001273c:	83 c4 10             	add    esp,0x10
c001273f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012743:	6a 08                	push   0x8
c0012745:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012749:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c001274d:	50                   	push   eax
c001274e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012752:	55                   	push   ebp
c0012753:	57                   	push   edi
c0012754:	e8 e7 fe ff ff       	call   c0012640 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012759:	83 c4 10             	add    esp,0x10
c001275c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012760:	50                   	push   eax
c0012761:	6a 06                	push   0x6
c0012763:	55                   	push   ebp
c0012764:	57                   	push   edi
c0012765:	e8 06 ff ff ff       	call   c0012670 <CmGetShift(unsigned int*, int*, int, bool*)>
c001276a:	83 c4 10             	add    esp,0x10
c001276d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012772:	74 07                	je     c001277b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012774:	46                   	inc    esi
c0012775:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012779:	eb e1                	jmp    c001275c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001277b:	43                   	inc    ebx
c001277c:	83 fb 12             	cmp    ebx,0x12
c001277f:	75 c2                	jne    c0012743 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012781:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012785:	31 f6                	xor    esi,esi
c0012787:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001278a:	50                   	push   eax
c001278b:	50                   	push   eax
c001278c:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012791:	46                   	inc    esi
c0012792:	8d 04 85 a0 2a 02 c0 	lea    eax,[eax*4-0x3ffdd560]
c0012799:	50                   	push   eax
c001279a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001279e:	e8 cd e0 fe ff       	call   c0000870 <strcat>
c00127a3:	83 c4 10             	add    esp,0x10
c00127a6:	83 fe 18             	cmp    esi,0x18
c00127a9:	75 df                	jne    c001278a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00127ab:	83 c4 3c             	add    esp,0x3c
c00127ae:	31 c0                	xor    eax,eax
c00127b0:	5b                   	pop    ebx
c00127b1:	5e                   	pop    esi
c00127b2:	5f                   	pop    edi
c00127b3:	5d                   	pop    ebp
c00127b4:	c3                   	ret    

c00127b5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00127b5:	83 ec 40             	sub    esp,0x40
c00127b8:	8d 44 24 09          	lea    eax,[esp+0x9]
c00127bc:	50                   	push   eax
c00127bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00127c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00127c5:	e8 3f f9 ff ff       	call   c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127ca:	58                   	pop    eax
c00127cb:	5a                   	pop    edx
c00127cc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00127d0:	8d 44 24 15          	lea    eax,[esp+0x15]
c00127d4:	50                   	push   eax
c00127d5:	e8 37 ff ff ff       	call   c0012711 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00127da:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00127df:	83 c4 4c             	add    esp,0x4c
c00127e2:	c3                   	ret    

c00127e3 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00127e3:	55                   	push   ebp
c00127e4:	57                   	push   edi
c00127e5:	56                   	push   esi
c00127e6:	53                   	push   ebx
c00127e7:	31 db                	xor    ebx,ebx
c00127e9:	83 ec 70             	sub    esp,0x70
c00127ec:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00127f3:	6a 30                	push   0x30
c00127f5:	6a 00                	push   0x0
c00127f7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00127fb:	56                   	push   esi
c00127fc:	e8 ef dc fe ff       	call   c00004f0 <memset>
c0012801:	83 c4 10             	add    esp,0x10
c0012804:	83 ec 0c             	sub    esp,0xc
c0012807:	57                   	push   edi
c0012808:	e8 73 dd fe ff       	call   c0000580 <strlen>
c001280d:	83 c4 10             	add    esp,0x10
c0012810:	39 d8                	cmp    eax,ebx
c0012812:	76 16                	jbe    c001282a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012814:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012818:	83 ec 0c             	sub    esp,0xc
c001281b:	50                   	push   eax
c001281c:	e8 3f e1 fe ff       	call   c0000960 <toupper>
c0012821:	83 c4 10             	add    esp,0x10
c0012824:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012827:	43                   	inc    ebx
c0012828:	eb da                	jmp    c0012804 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001282a:	52                   	push   edx
c001282b:	31 db                	xor    ebx,ebx
c001282d:	6a 18                	push   0x18
c001282f:	31 ff                	xor    edi,edi
c0012831:	6a 3f                	push   0x3f
c0012833:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012837:	50                   	push   eax
c0012838:	e8 b3 dc fe ff       	call   c00004f0 <memset>
c001283d:	83 c4 10             	add    esp,0x10
c0012840:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012844:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012848:	84 c0                	test   al,al
c001284a:	0f 84 af 00 00 00    	je     c00128ff <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012850:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012854:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012857:	83 ec 0c             	sub    esp,0xc
c001285a:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c001285f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012863:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012867:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c001286c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012870:	56                   	push   esi
c0012871:	e8 0a dd fe ff       	call   c0000580 <strlen>
c0012876:	83 c4 10             	add    esp,0x10
c0012879:	85 c0                	test   eax,eax
c001287b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001287f:	74 0b                	je     c001288c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012881:	50                   	push   eax
c0012882:	6a 01                	push   0x1
c0012884:	56                   	push   esi
c0012885:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012889:	50                   	push   eax
c001288a:	eb 0a                	jmp    c0012896 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001288c:	50                   	push   eax
c001288d:	6a 00                	push   0x0
c001288f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012893:	50                   	push   eax
c0012894:	6a 00                	push   0x0
c0012896:	e8 44 fd ff ff       	call   c00125df <CmGetMatch(char*, char*, bool, bool*)>
c001289b:	83 c4 10             	add    esp,0x10
c001289e:	83 f8 ff             	cmp    eax,0xffffffff
c00128a1:	75 1a                	jne    c00128bd <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00128a3:	83 ec 0c             	sub    esp,0xc
c00128a6:	68 d5 15 02 c0       	push   0xc00215d5
c00128ab:	e8 8d e2 ff ff       	call   c0010b3d <KePanic(char const*)>
c00128b0:	83 c4 10             	add    esp,0x10
c00128b3:	b8 02 00 00 00       	mov    eax,0x2
c00128b8:	e9 bb 00 00 00       	jmp    c0012978 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00128bd:	83 ff 18             	cmp    edi,0x18
c00128c0:	75 1a                	jne    c00128dc <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00128c2:	83 ec 0c             	sub    esp,0xc
c00128c5:	68 ea 15 02 c0       	push   0xc00215ea
c00128ca:	e8 6e e2 ff ff       	call   c0010b3d <KePanic(char const*)>
c00128cf:	83 c4 10             	add    esp,0x10
c00128d2:	b8 01 00 00 00       	mov    eax,0x1
c00128d7:	e9 9c 00 00 00       	jmp    c0012978 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00128dc:	47                   	inc    edi
c00128dd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00128e2:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00128e6:	0f 45 dd             	cmovne ebx,ebp
c00128e9:	83 ec 0c             	sub    esp,0xc
c00128ec:	56                   	push   esi
c00128ed:	e8 8e dc fe ff       	call   c0000580 <strlen>
c00128f2:	83 c4 10             	add    esp,0x10
c00128f5:	85 c0                	test   eax,eax
c00128f7:	74 06                	je     c00128ff <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00128f9:	43                   	inc    ebx
c00128fa:	e9 41 ff ff ff       	jmp    c0012840 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00128ff:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012907:	31 db                	xor    ebx,ebx
c0012909:	31 ff                	xor    edi,edi
c001290b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012913:	50                   	push   eax
c0012914:	6a 12                	push   0x12
c0012916:	68 ee 00 00 00       	push   0xee
c001291b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012922:	e8 c9 db fe ff       	call   c00004f0 <memset>
c0012927:	83 c4 10             	add    esp,0x10
c001292a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001292e:	83 fb 17             	cmp    ebx,0x17
c0012931:	7e 26                	jle    c0012959 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012933:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012937:	50                   	push   eax
c0012938:	6a 08                	push   0x8
c001293a:	55                   	push   ebp
c001293b:	56                   	push   esi
c001293c:	e8 2f fd ff ff       	call   c0012670 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012941:	83 c4 10             	add    esp,0x10
c0012944:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012949:	74 26                	je     c0012971 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001294b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012952:	4b                   	dec    ebx
c0012953:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012956:	47                   	inc    edi
c0012957:	eb 1c                	jmp    c0012975 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012959:	6a 06                	push   0x6
c001295b:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012960:	50                   	push   eax
c0012961:	55                   	push   ebp
c0012962:	56                   	push   esi
c0012963:	e8 d8 fc ff ff       	call   c0012640 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012968:	83 c4 10             	add    esp,0x10
c001296b:	84 c0                	test   al,al
c001296d:	75 06                	jne    c0012975 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001296f:	eb c2                	jmp    c0012933 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012971:	31 c0                	xor    eax,eax
c0012973:	eb 03                	jmp    c0012978 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012975:	43                   	inc    ebx
c0012976:	eb b2                	jmp    c001292a <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012978:	83 c4 6c             	add    esp,0x6c
c001297b:	5b                   	pop    ebx
c001297c:	5e                   	pop    esi
c001297d:	5f                   	pop    edi
c001297e:	5d                   	pop    ebp
c001297f:	c3                   	ret    

c0012980 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012980:	53                   	push   ebx
c0012981:	83 ec 3c             	sub    esp,0x3c
c0012984:	6a 2b                	push   0x2b
c0012986:	6a 00                	push   0x0
c0012988:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001298c:	53                   	push   ebx
c001298d:	e8 5e db fe ff       	call   c00004f0 <memset>
c0012992:	58                   	pop    eax
c0012993:	5a                   	pop    edx
c0012994:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012998:	50                   	push   eax
c0012999:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001299d:	e8 41 fe ff ff       	call   c00127e3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00129a2:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00129a7:	83 c4 0c             	add    esp,0xc
c00129aa:	6a 15                	push   0x15
c00129ac:	6a 00                	push   0x0
c00129ae:	8d 44 24 27          	lea    eax,[esp+0x27]
c00129b2:	50                   	push   eax
c00129b3:	e8 38 db fe ff       	call   c00004f0 <memset>
c00129b8:	53                   	push   ebx
c00129b9:	6a 00                	push   0x0
c00129bb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00129bf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00129c3:	e8 eb f9 ff ff       	call   c00123b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00129c8:	83 c4 58             	add    esp,0x58
c00129cb:	5b                   	pop    ebx
c00129cc:	c3                   	ret    

c00129cd <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00129cd:	56                   	push   esi
c00129ce:	53                   	push   ebx
c00129cf:	83 ec 48             	sub    esp,0x48
c00129d2:	6a 12                	push   0x12
c00129d4:	68 ff 00 00 00       	push   0xff
c00129d9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00129dd:	56                   	push   esi
c00129de:	e8 0d db fe ff       	call   c00004f0 <memset>
c00129e3:	5a                   	pop    edx
c00129e4:	59                   	pop    ecx
c00129e5:	56                   	push   esi
c00129e6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00129ea:	e8 f4 fd ff ff       	call   c00127e3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00129f6:	85 db                	test   ebx,ebx
c00129f8:	74 42                	je     c0012a3c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00129fa:	50                   	push   eax
c00129fb:	8d 44 24 19          	lea    eax,[esp+0x19]
c00129ff:	50                   	push   eax
c0012a00:	53                   	push   ebx
c0012a01:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a05:	e8 ff f6 ff ff       	call   c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a0a:	83 c4 0c             	add    esp,0xc
c0012a0d:	6a 12                	push   0x12
c0012a0f:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012a13:	50                   	push   eax
c0012a14:	56                   	push   esi
c0012a15:	e8 66 d9 fe ff       	call   c0000380 <memcmp>
c0012a1a:	83 c4 10             	add    esp,0x10
c0012a1d:	85 c0                	test   eax,eax
c0012a1f:	74 1e                	je     c0012a3f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012a21:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012a26:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012a2b:	c1 e3 08             	shl    ebx,0x8
c0012a2e:	09 d8                	or     eax,ebx
c0012a30:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012a35:	c1 e3 10             	shl    ebx,0x10
c0012a38:	09 c3                	or     ebx,eax
c0012a3a:	eb ba                	jmp    c00129f6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012a3c:	83 cb ff             	or     ebx,0xffffffff
c0012a3f:	83 c4 44             	add    esp,0x44
c0012a42:	89 d8                	mov    eax,ebx
c0012a44:	5b                   	pop    ebx
c0012a45:	5e                   	pop    esi
c0012a46:	c3                   	ret    

c0012a47 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012a47:	57                   	push   edi
c0012a48:	56                   	push   esi
c0012a49:	53                   	push   ebx
c0012a4a:	83 ec 34             	sub    esp,0x34
c0012a4d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012a51:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012a55:	6a 2b                	push   0x2b
c0012a57:	6a 00                	push   0x0
c0012a59:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012a5d:	53                   	push   ebx
c0012a5e:	e8 8d da fe ff       	call   c00004f0 <memset>
c0012a63:	58                   	pop    eax
c0012a64:	5a                   	pop    edx
c0012a65:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012a69:	50                   	push   eax
c0012a6a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012a6e:	e8 70 fd ff ff       	call   c00127e3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012a73:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0012a77:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012a7b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012a7f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012a83:	53                   	push   ebx
c0012a84:	6a 00                	push   0x0
c0012a86:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a8a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a8e:	e8 20 f9 ff ff       	call   c00123b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012a93:	83 c4 50             	add    esp,0x50
c0012a96:	5b                   	pop    ebx
c0012a97:	5e                   	pop    esi
c0012a98:	5f                   	pop    edi
c0012a99:	c3                   	ret    

c0012a9a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012a9a:	55                   	push   ebp
c0012a9b:	57                   	push   edi
c0012a9c:	56                   	push   esi
c0012a9d:	53                   	push   ebx
c0012a9e:	83 ec 40             	sub    esp,0x40
c0012aa1:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012aa5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012aa9:	6a 2b                	push   0x2b
c0012aab:	6a 00                	push   0x0
c0012aad:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012ab1:	56                   	push   esi
c0012ab2:	e8 39 da fe ff       	call   c00004f0 <memset>
c0012ab7:	5f                   	pop    edi
c0012ab8:	89 ef                	mov    edi,ebp
c0012aba:	58                   	pop    eax
c0012abb:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012abf:	50                   	push   eax
c0012ac0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012ac4:	e8 1a fd ff ff       	call   c00127e3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012ac9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012ace:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012ad3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012ad8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012add:	83 c4 10             	add    esp,0x10
c0012ae0:	85 ed                	test   ebp,ebp
c0012ae2:	74 14                	je     c0012af8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012ae4:	51                   	push   ecx
c0012ae5:	51                   	push   ecx
c0012ae6:	57                   	push   edi
c0012ae7:	53                   	push   ebx
c0012ae8:	e8 0e f7 ff ff       	call   c00121fb <CmGetNext(Reghive_Tag*, int)>
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	85 c0                	test   eax,eax
c0012af2:	74 04                	je     c0012af8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012af4:	89 c7                	mov    edi,eax
c0012af6:	eb e8                	jmp    c0012ae0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012af8:	56                   	push   esi
c0012af9:	6a 00                	push   0x0
c0012afb:	57                   	push   edi
c0012afc:	53                   	push   ebx
c0012afd:	e8 b1 f8 ff ff       	call   c00123b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012b02:	83 c4 0c             	add    esp,0xc
c0012b05:	56                   	push   esi
c0012b06:	50                   	push   eax
c0012b07:	89 c7                	mov    edi,eax
c0012b09:	53                   	push   ebx
c0012b0a:	e8 fa f5 ff ff       	call   c0012109 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b0f:	58                   	pop    eax
c0012b10:	5a                   	pop    edx
c0012b11:	6a 6c                	push   0x6c
c0012b13:	6a 00                	push   0x0
c0012b15:	6a 00                	push   0x0
c0012b17:	68 fb 15 02 c0       	push   0xc00215fb
c0012b1c:	57                   	push   edi
c0012b1d:	53                   	push   ebx
c0012b1e:	e8 24 ff ff ff       	call   c0012a47 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012b23:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012b27:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012b2b:	c1 e8 10             	shr    eax,0x10
c0012b2e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012b32:	83 c4 1c             	add    esp,0x1c
c0012b35:	56                   	push   esi
c0012b36:	57                   	push   edi
c0012b37:	53                   	push   ebx
c0012b38:	e8 f0 f6 ff ff       	call   c001222d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012b42:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012b47:	c1 e0 08             	shl    eax,0x8
c0012b4a:	09 c2                	or     edx,eax
c0012b4c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012b51:	83 c4 4c             	add    esp,0x4c
c0012b54:	5b                   	pop    ebx
c0012b55:	5e                   	pop    esi
c0012b56:	c1 e0 10             	shl    eax,0x10
c0012b59:	09 d0                	or     eax,edx
c0012b5b:	5f                   	pop    edi
c0012b5c:	5d                   	pop    ebp
c0012b5d:	c3                   	ret    

c0012b5e <zStrtok(char*, char const*)>:
c0012b5e:	55                   	push   ebp
c0012b5f:	57                   	push   edi
c0012b60:	56                   	push   esi
c0012b61:	53                   	push   ebx
c0012b62:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012b66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b6a:	85 db                	test   ebx,ebx
c0012b6c:	74 2f                	je     c0012b9d <zStrtok(char*, char const*)+0x3f>
c0012b6e:	85 c0                	test   eax,eax
c0012b70:	75 09                	jne    c0012b7b <zStrtok(char*, char const*)+0x1d>
c0012b72:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012b77:	85 c0                	test   eax,eax
c0012b79:	74 50                	je     c0012bcb <zStrtok(char*, char const*)+0x6d>
c0012b7b:	31 c9                	xor    ecx,ecx
c0012b7d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012b81:	74 03                	je     c0012b86 <zStrtok(char*, char const*)+0x28>
c0012b83:	41                   	inc    ecx
c0012b84:	eb f7                	jmp    c0012b7d <zStrtok(char*, char const*)+0x1f>
c0012b86:	31 d2                	xor    edx,edx
c0012b88:	39 ca                	cmp    edx,ecx
c0012b8a:	74 15                	je     c0012ba1 <zStrtok(char*, char const*)+0x43>
c0012b8c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012b90:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012b93:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012b96:	39 ee                	cmp    esi,ebp
c0012b98:	74 13                	je     c0012bad <zStrtok(char*, char const*)+0x4f>
c0012b9a:	42                   	inc    edx
c0012b9b:	eb eb                	jmp    c0012b88 <zStrtok(char*, char const*)+0x2a>
c0012b9d:	31 c0                	xor    eax,eax
c0012b9f:	eb 2a                	jmp    c0012bcb <zStrtok(char*, char const*)+0x6d>
c0012ba1:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012bab:	eb 1e                	jmp    c0012bcb <zStrtok(char*, char const*)+0x6d>
c0012bad:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012bb0:	39 ce                	cmp    esi,ecx
c0012bb2:	75 0a                	jne    c0012bbe <zStrtok(char*, char const*)+0x60>
c0012bb4:	40                   	inc    eax
c0012bb5:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c0012bba:	89 d8                	mov    eax,ebx
c0012bbc:	eb 0d                	jmp    c0012bcb <zStrtok(char*, char const*)+0x6d>
c0012bbe:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012bc1:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012bc5:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c0012bcb:	5b                   	pop    ebx
c0012bcc:	5e                   	pop    esi
c0012bcd:	5f                   	pop    edi
c0012bce:	5d                   	pop    ebp
c0012bcf:	c3                   	ret    

c0012bd0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012bd0:	57                   	push   edi
c0012bd1:	56                   	push   esi
c0012bd2:	53                   	push   ebx
c0012bd3:	81 ec 08 01 00 00    	sub    esp,0x108
c0012bd9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012be0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012be7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012beb:	53                   	push   ebx
c0012bec:	e8 5f da fe ff       	call   c0000650 <strcpy>
c0012bf1:	59                   	pop    ecx
c0012bf2:	5e                   	pop    esi
c0012bf3:	68 91 19 02 c0       	push   0xc0021991
c0012bf8:	53                   	push   ebx
c0012bf9:	bb 01 00 00 00       	mov    ebx,0x1
c0012bfe:	e8 5b ff ff ff       	call   c0012b5e <zStrtok(char*, char const*)>
c0012c03:	83 c4 10             	add    esp,0x10
c0012c06:	85 c0                	test   eax,eax
c0012c08:	74 3b                	je     c0012c45 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c0a:	52                   	push   edx
c0012c0b:	50                   	push   eax
c0012c0c:	6a 01                	push   0x1
c0012c0e:	57                   	push   edi
c0012c0f:	e8 b9 fd ff ff       	call   c00129cd <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012c14:	59                   	pop    ecx
c0012c15:	5e                   	pop    esi
c0012c16:	89 c3                	mov    ebx,eax
c0012c18:	68 91 19 02 c0       	push   0xc0021991
c0012c1d:	6a 00                	push   0x0
c0012c1f:	e8 3a ff ff ff       	call   c0012b5e <zStrtok(char*, char const*)>
c0012c24:	83 c4 10             	add    esp,0x10
c0012c27:	85 c0                	test   eax,eax
c0012c29:	89 c6                	mov    esi,eax
c0012c2b:	74 18                	je     c0012c45 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c2d:	52                   	push   edx
c0012c2e:	52                   	push   edx
c0012c2f:	53                   	push   ebx
c0012c30:	57                   	push   edi
c0012c31:	e8 86 f5 ff ff       	call   c00121bc <CmEnterDirectory(Reghive_Tag*, int)>
c0012c36:	83 c4 10             	add    esp,0x10
c0012c39:	83 f8 ff             	cmp    eax,0xffffffff
c0012c3c:	89 c3                	mov    ebx,eax
c0012c3e:	74 05                	je     c0012c45 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c40:	50                   	push   eax
c0012c41:	56                   	push   esi
c0012c42:	53                   	push   ebx
c0012c43:	eb c9                	jmp    c0012c0e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012c45:	81 c4 00 01 00 00    	add    esp,0x100
c0012c4b:	89 d8                	mov    eax,ebx
c0012c4d:	5b                   	pop    ebx
c0012c4e:	5e                   	pop    esi
c0012c4f:	5f                   	pop    edi
c0012c50:	c3                   	ret    

c0012c51 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012c51:	55                   	push   ebp
c0012c52:	57                   	push   edi
c0012c53:	56                   	push   esi
c0012c54:	53                   	push   ebx
c0012c55:	83 ec 5c             	sub    esp,0x5c
c0012c58:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012c5c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012c60:	85 db                	test   ebx,ebx
c0012c62:	0f 8e 84 00 00 00    	jle    c0012cec <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012c68:	57                   	push   edi
c0012c69:	31 ed                	xor    ebp,ebp
c0012c6b:	6a 32                	push   0x32
c0012c6d:	6a 00                	push   0x0
c0012c6f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012c73:	57                   	push   edi
c0012c74:	e8 77 d8 fe ff       	call   c00004f0 <memset>
c0012c79:	83 c4 0c             	add    esp,0xc
c0012c7c:	57                   	push   edi
c0012c7d:	53                   	push   ebx
c0012c7e:	56                   	push   esi
c0012c7f:	e8 31 fb ff ff       	call   c00127b5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012c84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c88:	83 c4 10             	add    esp,0x10
c0012c8b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012c8f:	7d 13                	jge    c0012ca4 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012c91:	83 ec 0c             	sub    esp,0xc
c0012c94:	45                   	inc    ebp
c0012c95:	68 37 1d 02 c0       	push   0xc0021d37
c0012c9a:	e8 9d 7c ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0012c9f:	83 c4 10             	add    esp,0x10
c0012ca2:	eb e7                	jmp    c0012c8b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012ca4:	51                   	push   ecx
c0012ca5:	57                   	push   edi
c0012ca6:	53                   	push   ebx
c0012ca7:	68 01 16 02 c0       	push   0xc0021601
c0012cac:	e8 8b 7c ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0012cb1:	83 c4 10             	add    esp,0x10
c0012cb4:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012cb9:	75 1e                	jne    c0012cd9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012cbb:	52                   	push   edx
c0012cbc:	52                   	push   edx
c0012cbd:	53                   	push   ebx
c0012cbe:	56                   	push   esi
c0012cbf:	e8 f8 f4 ff ff       	call   c00121bc <CmEnterDirectory(Reghive_Tag*, int)>
c0012cc4:	83 c4 0c             	add    esp,0xc
c0012cc7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012ccb:	8d 51 04             	lea    edx,[ecx+0x4]
c0012cce:	52                   	push   edx
c0012ccf:	50                   	push   eax
c0012cd0:	56                   	push   esi
c0012cd1:	e8 7b ff ff ff       	call   c0012c51 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012cd6:	83 c4 10             	add    esp,0x10
c0012cd9:	50                   	push   eax
c0012cda:	50                   	push   eax
c0012cdb:	53                   	push   ebx
c0012cdc:	56                   	push   esi
c0012cdd:	e8 19 f5 ff ff       	call   c00121fb <CmGetNext(Reghive_Tag*, int)>
c0012ce2:	83 c4 10             	add    esp,0x10
c0012ce5:	89 c3                	mov    ebx,eax
c0012ce7:	e9 74 ff ff ff       	jmp    c0012c60 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012cec:	83 c4 5c             	add    esp,0x5c
c0012cef:	5b                   	pop    ebx
c0012cf0:	5e                   	pop    esi
c0012cf1:	5f                   	pop    edi
c0012cf2:	5d                   	pop    ebp
c0012cf3:	c3                   	ret    

c0012cf4 <CmSplitFinalSlashInPlace(char*)>:
c0012cf4:	53                   	push   ebx
c0012cf5:	83 ec 14             	sub    esp,0x14
c0012cf8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012cfc:	53                   	push   ebx
c0012cfd:	e8 7e d8 fe ff       	call   c0000580 <strlen>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	48                   	dec    eax
c0012d06:	85 c0                	test   eax,eax
c0012d08:	74 15                	je     c0012d1f <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012d0a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d0e:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012d11:	75 09                	jne    c0012d1c <CmSplitFinalSlashInPlace(char*)+0x28>
c0012d13:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012d16:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012d1a:	eb 05                	jmp    c0012d21 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012d1c:	48                   	dec    eax
c0012d1d:	eb e7                	jmp    c0012d06 <CmSplitFinalSlashInPlace(char*)+0x12>
c0012d1f:	31 c0                	xor    eax,eax
c0012d21:	83 c4 08             	add    esp,0x8
c0012d24:	5b                   	pop    ebx
c0012d25:	c3                   	ret    

c0012d26 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012d26:	55                   	push   ebp
c0012d27:	57                   	push   edi
c0012d28:	56                   	push   esi
c0012d29:	53                   	push   ebx
c0012d2a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012d30:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012d37:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0012d3a:	8d 43 01             	lea    eax,[ebx+0x1]
c0012d3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d41:	89 f0                	mov    eax,esi
c0012d43:	3c 40                	cmp    al,0x40
c0012d45:	75 1b                	jne    c0012d62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0012d47:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d4a:	85 c0                	test   eax,eax
c0012d4c:	74 08                	je     c0012d56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012d4e:	83 f8 3a             	cmp    eax,0x3a
c0012d51:	74 03                	je     c0012d56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012d53:	43                   	inc    ebx
c0012d54:	eb f1                	jmp    c0012d47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0012d56:	85 c0                	test   eax,eax
c0012d58:	0f 84 45 01 00 00    	je     c0012ea3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012d5e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012d61:	43                   	inc    ebx
c0012d62:	50                   	push   eax
c0012d63:	6a 40                	push   0x40
c0012d65:	6a 00                	push   0x0
c0012d67:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012d6b:	50                   	push   eax
c0012d6c:	e8 7f d7 fe ff       	call   c00004f0 <memset>
c0012d71:	89 f1                	mov    ecx,esi
c0012d73:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012d7a:	31 c0                	xor    eax,eax
c0012d7c:	83 c4 10             	add    esp,0x10
c0012d7f:	0f be f1             	movsx  esi,cl
c0012d82:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012d85:	85 d2                	test   edx,edx
c0012d87:	89 d1                	mov    ecx,edx
c0012d89:	0f 84 14 01 00 00    	je     c0012ea3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012d8f:	3d c7 00 00 00       	cmp    eax,0xc7
c0012d94:	0f 8f 09 01 00 00    	jg     c0012ea3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012d9a:	83 fa 0a             	cmp    edx,0xa
c0012d9d:	0f 85 f1 00 00 00    	jne    c0012e94 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0012da3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012da8:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012dad:	89 c8                	mov    eax,ecx
c0012daf:	a8 df                	test   al,0xdf
c0012db1:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012db6:	83 f9 23             	cmp    ecx,0x23
c0012db9:	0f 94 c2             	sete   dl
c0012dbc:	89 d5                	mov    ebp,edx
c0012dbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012dc2:	09 ea                	or     edx,ebp
c0012dc4:	80 e2 01             	and    dl,0x1
c0012dc7:	75 47                	jne    c0012e10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012dc9:	83 e8 09             	sub    eax,0x9
c0012dcc:	3c 01                	cmp    al,0x1
c0012dce:	76 40                	jbe    c0012e10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012dd0:	83 f9 5b             	cmp    ecx,0x5b
c0012dd3:	75 42                	jne    c0012e17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012dd5:	83 fe 40             	cmp    esi,0x40
c0012dd8:	75 36                	jne    c0012e10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012dda:	83 ec 0c             	sub    esp,0xc
c0012ddd:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012de1:	55                   	push   ebp
c0012de2:	e8 99 d7 fe ff       	call   c0000580 <strlen>
c0012de7:	83 c4 10             	add    esp,0x10
c0012dea:	83 f8 3f             	cmp    eax,0x3f
c0012ded:	0f 87 b0 00 00 00    	ja     c0012ea3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012df3:	50                   	push   eax
c0012df4:	50                   	push   eax
c0012df5:	55                   	push   ebp
c0012df6:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012dfa:	55                   	push   ebp
c0012dfb:	e8 50 d8 fe ff       	call   c0000650 <strcpy>
c0012e00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e03:	e8 78 d7 fe ff       	call   c0000580 <strlen>
c0012e08:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012e0d:	83 c4 10             	add    esp,0x10
c0012e10:	31 d2                	xor    edx,edx
c0012e12:	e9 84 00 00 00       	jmp    c0012e9b <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0012e17:	83 fe 40             	cmp    esi,0x40
c0012e1a:	74 06                	je     c0012e22 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0012e1c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012e20:	eb 19                	jmp    c0012e3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012e22:	51                   	push   ecx
c0012e23:	51                   	push   ecx
c0012e24:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e2c:	50                   	push   eax
c0012e2d:	e8 4e d9 fe ff       	call   c0000780 <strcmp>
c0012e32:	83 c4 10             	add    esp,0x10
c0012e35:	85 c0                	test   eax,eax
c0012e37:	75 d7                	jne    c0012e10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012e39:	eb e1                	jmp    c0012e1c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0012e3b:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012e3e:	85 c9                	test   ecx,ecx
c0012e40:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012e45:	83 f9 3d             	cmp    ecx,0x3d
c0012e48:	0f 94 c0             	sete   al
c0012e4b:	89 c5                	mov    ebp,eax
c0012e4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e51:	09 e8                	or     eax,ebp
c0012e53:	a8 01                	test   al,0x1
c0012e55:	89 c5                	mov    ebp,eax
c0012e57:	75 03                	jne    c0012e5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0012e59:	42                   	inc    edx
c0012e5a:	eb df                	jmp    c0012e3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012e5c:	85 c9                	test   ecx,ecx
c0012e5e:	74 43                	je     c0012ea3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012e60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012e64:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012e67:	52                   	push   edx
c0012e68:	52                   	push   edx
c0012e69:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012e6d:	50                   	push   eax
c0012e6e:	53                   	push   ebx
c0012e6f:	e8 0c d9 fe ff       	call   c0000780 <strcmp>
c0012e74:	83 c4 10             	add    esp,0x10
c0012e77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012e7b:	85 c0                	test   eax,eax
c0012e7d:	75 91                	jne    c0012e10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012e7f:	50                   	push   eax
c0012e80:	42                   	inc    edx
c0012e81:	50                   	push   eax
c0012e82:	52                   	push   edx
c0012e83:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012e8a:	e8 c1 d7 fe ff       	call   c0000650 <strcpy>
c0012e8f:	83 c4 10             	add    esp,0x10
c0012e92:	eb 11                	jmp    c0012ea5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012e94:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012e98:	8d 50 01             	lea    edx,[eax+0x1]
c0012e9b:	47                   	inc    edi
c0012e9c:	89 d0                	mov    eax,edx
c0012e9e:	e9 df fe ff ff       	jmp    c0012d82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0012ea3:	31 ed                	xor    ebp,ebp
c0012ea5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012eab:	89 e8                	mov    eax,ebp
c0012ead:	5b                   	pop    ebx
c0012eae:	5e                   	pop    esi
c0012eaf:	5f                   	pop    edi
c0012eb0:	5d                   	pop    ebp
c0012eb1:	c3                   	ret    

c0012eb2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012eb2:	57                   	push   edi
c0012eb3:	56                   	push   esi
c0012eb4:	53                   	push   ebx
c0012eb5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012ebb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012ec2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012ec9:	53                   	push   ebx
c0012eca:	e8 b1 d6 fe ff       	call   c0000580 <strlen>
c0012ecf:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ed2:	89 c7                	mov    edi,eax
c0012ed4:	e8 a7 d6 fe ff       	call   c0000580 <strlen>
c0012ed9:	83 c4 10             	add    esp,0x10
c0012edc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012ee0:	3d ff 00 00 00       	cmp    eax,0xff
c0012ee5:	0f 87 d3 00 00 00    	ja     c0012fbe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012eeb:	57                   	push   edi
c0012eec:	57                   	push   edi
c0012eed:	56                   	push   esi
c0012eee:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012ef2:	56                   	push   esi
c0012ef3:	e8 58 d7 fe ff       	call   c0000650 <strcpy>
c0012ef8:	58                   	pop    eax
c0012ef9:	5a                   	pop    edx
c0012efa:	68 91 19 02 c0       	push   0xc0021991
c0012eff:	56                   	push   esi
c0012f00:	e8 6b d9 fe ff       	call   c0000870 <strcat>
c0012f05:	59                   	pop    ecx
c0012f06:	5f                   	pop    edi
c0012f07:	53                   	push   ebx
c0012f08:	56                   	push   esi
c0012f09:	e8 62 d9 fe ff       	call   c0000870 <strcat>
c0012f0e:	58                   	pop    eax
c0012f0f:	5a                   	pop    edx
c0012f10:	68 0b 16 02 c0       	push   0xc002160b
c0012f15:	56                   	push   esi
c0012f16:	e8 55 d9 fe ff       	call   c0000870 <strcat>
c0012f1b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012f22:	e8 a4 4b ff ff       	call   c0007acb <malloc>
c0012f27:	83 c4 0c             	add    esp,0xc
c0012f2a:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012f30:	56                   	push   esi
c0012f31:	50                   	push   eax
c0012f32:	89 c3                	mov    ebx,eax
c0012f34:	e8 81 82 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c0012f39:	83 c4 10             	add    esp,0x10
c0012f3c:	85 db                	test   ebx,ebx
c0012f3e:	74 7e                	je     c0012fbe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012f40:	51                   	push   ecx
c0012f41:	51                   	push   ecx
c0012f42:	6a 01                	push   0x1
c0012f44:	53                   	push   ebx
c0012f45:	e8 2c 83 ff ff       	call   c000b276 <File::open(FileOpenMode)>
c0012f4a:	83 c4 10             	add    esp,0x10
c0012f4d:	85 c0                	test   eax,eax
c0012f4f:	74 08                	je     c0012f59 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012f51:	83 ec 0c             	sub    esp,0xc
c0012f54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f56:	53                   	push   ebx
c0012f57:	eb 5f                	jmp    c0012fb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012f59:	52                   	push   edx
c0012f5a:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012f5e:	50                   	push   eax
c0012f5f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012f63:	50                   	push   eax
c0012f64:	53                   	push   ebx
c0012f65:	e8 b8 85 ff ff       	call   c000b522 <File::stat(unsigned long long*, bool*)>
c0012f6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012f6e:	83 c4 10             	add    esp,0x10
c0012f71:	89 c1                	mov    ecx,eax
c0012f73:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012f77:	74 31                	je     c0012faa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012f79:	83 ec 0c             	sub    esp,0xc
c0012f7c:	50                   	push   eax
c0012f7d:	e8 49 4b ff ff       	call   c0007acb <malloc>
c0012f82:	89 c6                	mov    esi,eax
c0012f84:	58                   	pop    eax
c0012f85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f87:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012f8b:	52                   	push   edx
c0012f8c:	56                   	push   esi
c0012f8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012f91:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012f95:	53                   	push   ebx
c0012f96:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f99:	83 c4 20             	add    esp,0x20
c0012f9c:	85 c0                	test   eax,eax
c0012f9e:	75 0a                	jne    c0012faa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012fa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fa4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012fa8:	74 18                	je     c0012fc2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012faa:	83 ec 0c             	sub    esp,0xc
c0012fad:	53                   	push   ebx
c0012fae:	e8 21 83 ff ff       	call   c000b2d4 <File::close()>
c0012fb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012fb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fbb:	83 c4 10             	add    esp,0x10
c0012fbe:	31 c0                	xor    eax,eax
c0012fc0:	eb 3b                	jmp    c0012ffd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012fc2:	83 ec 0c             	sub    esp,0xc
c0012fc5:	53                   	push   ebx
c0012fc6:	e8 09 83 ff ff       	call   c000b2d4 <File::close()>
c0012fcb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fcd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012fd0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fd3:	83 c4 0c             	add    esp,0xc
c0012fd6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012fdd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012fe4:	56                   	push   esi
c0012fe5:	e8 3c fd ff ff       	call   c0012d26 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012fea:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fed:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012ff1:	e8 e5 4a ff ff       	call   c0007adb <free>
c0012ff6:	83 c4 10             	add    esp,0x10
c0012ff9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012ffd:	81 c4 20 01 00 00    	add    esp,0x120
c0013003:	5b                   	pop    ebx
c0013004:	5e                   	pop    esi
c0013005:	5f                   	pop    edi
c0013006:	c3                   	ret    

c0013007 <Reg::getLine(char*, char*, char*)>:
c0013007:	57                   	push   edi
c0013008:	56                   	push   esi
c0013009:	53                   	push   ebx
c001300a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001300e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013012:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013016:	57                   	push   edi
c0013017:	56                   	push   esi
c0013018:	53                   	push   ebx
c0013019:	68 10 16 02 c0       	push   0xc0021610
c001301e:	e8 8f fe ff ff       	call   c0012eb2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013023:	83 c4 10             	add    esp,0x10
c0013026:	84 c0                	test   al,al
c0013028:	75 10                	jne    c001303a <Reg::getLine(char*, char*, char*)+0x33>
c001302a:	57                   	push   edi
c001302b:	56                   	push   esi
c001302c:	53                   	push   ebx
c001302d:	68 35 16 02 c0       	push   0xc0021635
c0013032:	e8 7b fe ff ff       	call   c0012eb2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013037:	83 c4 10             	add    esp,0x10
c001303a:	5b                   	pop    ebx
c001303b:	5e                   	pop    esi
c001303c:	5f                   	pop    edi
c001303d:	c3                   	ret    

c001303e <Reg::readInt(char*, char*, int*)>:
c001303e:	55                   	push   ebp
c001303f:	57                   	push   edi
c0013040:	56                   	push   esi
c0013041:	53                   	push   ebx
c0013042:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013048:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001304c:	55                   	push   ebp
c001304d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013054:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001305b:	e8 a7 ff ff ff       	call   c0013007 <Reg::getLine(char*, char*, char*)>
c0013060:	83 c4 10             	add    esp,0x10
c0013063:	84 c0                	test   al,al
c0013065:	0f 84 b6 00 00 00    	je     c0013121 <Reg::readInt(char*, char*, int*)+0xe3>
c001306b:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013070:	83 fa 2b             	cmp    edx,0x2b
c0013073:	74 0c                	je     c0013081 <Reg::readInt(char*, char*, int*)+0x43>
c0013075:	83 fa 2d             	cmp    edx,0x2d
c0013078:	75 0e                	jne    c0013088 <Reg::readInt(char*, char*, int*)+0x4a>
c001307a:	ba 01 00 00 00       	mov    edx,0x1
c001307f:	eb 0b                	jmp    c001308c <Reg::readInt(char*, char*, int*)+0x4e>
c0013081:	ba 01 00 00 00       	mov    edx,0x1
c0013086:	eb 02                	jmp    c001308a <Reg::readInt(char*, char*, int*)+0x4c>
c0013088:	31 d2                	xor    edx,edx
c001308a:	31 c0                	xor    eax,eax
c001308c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013091:	be 0a 00 00 00       	mov    esi,0xa
c0013096:	75 21                	jne    c00130b9 <Reg::readInt(char*, char*, int*)+0x7b>
c0013098:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c001309d:	83 f9 78             	cmp    ecx,0x78
c00130a0:	75 0a                	jne    c00130ac <Reg::readInt(char*, char*, int*)+0x6e>
c00130a2:	83 c2 02             	add    edx,0x2
c00130a5:	be 10 00 00 00       	mov    esi,0x10
c00130aa:	eb 0d                	jmp    c00130b9 <Reg::readInt(char*, char*, int*)+0x7b>
c00130ac:	83 f9 62             	cmp    ecx,0x62
c00130af:	75 08                	jne    c00130b9 <Reg::readInt(char*, char*, int*)+0x7b>
c00130b1:	83 c2 02             	add    edx,0x2
c00130b4:	be 02 00 00 00       	mov    esi,0x2
c00130b9:	01 d5                	add    ebp,edx
c00130bb:	31 d2                	xor    edx,edx
c00130bd:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00130c1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00130c5:	85 c9                	test   ecx,ecx
c00130c7:	0f 94 c3             	sete   bl
c00130ca:	83 f9 0d             	cmp    ecx,0xd
c00130cd:	89 df                	mov    edi,ebx
c00130cf:	0f 94 c3             	sete   bl
c00130d2:	09 df                	or     edi,ebx
c00130d4:	89 fb                	mov    ebx,edi
c00130d6:	83 e7 01             	and    edi,0x1
c00130d9:	75 35                	jne    c0013110 <Reg::readInt(char*, char*, int*)+0xd2>
c00130db:	0f af d6             	imul   edx,esi
c00130de:	83 fe 10             	cmp    esi,0x10
c00130e1:	75 26                	jne    c0013109 <Reg::readInt(char*, char*, int*)+0xcb>
c00130e3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00130e7:	83 ef 41             	sub    edi,0x41
c00130ea:	89 fb                	mov    ebx,edi
c00130ec:	80 fb 05             	cmp    bl,0x5
c00130ef:	77 06                	ja     c00130f7 <Reg::readInt(char*, char*, int*)+0xb9>
c00130f1:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00130f5:	eb 16                	jmp    c001310d <Reg::readInt(char*, char*, int*)+0xcf>
c00130f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130fb:	83 eb 61             	sub    ebx,0x61
c00130fe:	80 fb 05             	cmp    bl,0x5
c0013101:	77 06                	ja     c0013109 <Reg::readInt(char*, char*, int*)+0xcb>
c0013103:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013107:	eb 04                	jmp    c001310d <Reg::readInt(char*, char*, int*)+0xcf>
c0013109:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c001310d:	45                   	inc    ebp
c001310e:	eb ad                	jmp    c00130bd <Reg::readInt(char*, char*, int*)+0x7f>
c0013110:	84 c0                	test   al,al
c0013112:	74 02                	je     c0013116 <Reg::readInt(char*, char*, int*)+0xd8>
c0013114:	f7 da                	neg    edx
c0013116:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001311d:	89 10                	mov    DWORD PTR [eax],edx
c001311f:	88 d8                	mov    al,bl
c0013121:	81 c4 ec 00 00 00    	add    esp,0xec
c0013127:	5b                   	pop    ebx
c0013128:	5e                   	pop    esi
c0013129:	5f                   	pop    edi
c001312a:	5d                   	pop    ebp
c001312b:	c3                   	ret    

c001312c <Reg::readString(char*, char*, char*, int)>:
c001312c:	57                   	push   edi
c001312d:	56                   	push   esi
c001312e:	53                   	push   ebx
c001312f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013135:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013139:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013140:	57                   	push   edi
c0013141:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013148:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001314f:	e8 b3 fe ff ff       	call   c0013007 <Reg::getLine(char*, char*, char*)>
c0013154:	83 c4 10             	add    esp,0x10
c0013157:	84 c0                	test   al,al
c0013159:	89 c6                	mov    esi,eax
c001315b:	74 44                	je     c00131a1 <Reg::readString(char*, char*, char*, int)+0x75>
c001315d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013164:	31 c0                	xor    eax,eax
c0013166:	4a                   	dec    edx
c0013167:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001316a:	84 c9                	test   cl,cl
c001316c:	74 0f                	je     c001317d <Reg::readString(char*, char*, char*, int)+0x51>
c001316e:	39 c2                	cmp    edx,eax
c0013170:	7e 0b                	jle    c001317d <Reg::readString(char*, char*, char*, int)+0x51>
c0013172:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013175:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001317a:	40                   	inc    eax
c001317b:	eb ea                	jmp    c0013167 <Reg::readString(char*, char*, char*, int)+0x3b>
c001317d:	83 ec 0c             	sub    esp,0xc
c0013180:	53                   	push   ebx
c0013181:	e8 fa d3 fe ff       	call   c0000580 <strlen>
c0013186:	83 c4 10             	add    esp,0x10
c0013189:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001318e:	75 11                	jne    c00131a1 <Reg::readString(char*, char*, char*, int)+0x75>
c0013190:	83 ec 0c             	sub    esp,0xc
c0013193:	53                   	push   ebx
c0013194:	e8 e7 d3 fe ff       	call   c0000580 <strlen>
c0013199:	83 c4 10             	add    esp,0x10
c001319c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00131a1:	81 c4 d0 00 00 00    	add    esp,0xd0
c00131a7:	89 f0                	mov    eax,esi
c00131a9:	5b                   	pop    ebx
c00131aa:	5e                   	pop    esi
c00131ab:	5f                   	pop    edi
c00131ac:	c3                   	ret    

c00131ad <Reg::readBool(char*, char*, bool*)>:
c00131ad:	83 ec 20             	sub    esp,0x20
c00131b0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00131b4:	50                   	push   eax
c00131b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131bd:	e8 7c fe ff ff       	call   c001303e <Reg::readInt(char*, char*, int*)>
c00131c2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00131c6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00131cb:	0f 95 02             	setne  BYTE PTR [edx]
c00131ce:	83 c4 2c             	add    esp,0x2c
c00131d1:	c3                   	ret    

c00131d2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00131d2:	53                   	push   ebx
c00131d3:	83 ec 1c             	sub    esp,0x1c
c00131d6:	8d 44 24 13          	lea    eax,[esp+0x13]
c00131da:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00131de:	50                   	push   eax
c00131df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131e7:	e8 c1 ff ff ff       	call   c00131ad <Reg::readBool(char*, char*, bool*)>
c00131ec:	83 c4 10             	add    esp,0x10
c00131ef:	84 c0                	test   al,al
c00131f1:	74 04                	je     c00131f7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00131f3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00131f7:	83 c4 18             	add    esp,0x18
c00131fa:	88 d8                	mov    al,bl
c00131fc:	5b                   	pop    ebx
c00131fd:	c3                   	ret    

c00131fe <Reg::readIntWithDefault(char*, char*, int)>:
c00131fe:	53                   	push   ebx
c00131ff:	83 ec 1c             	sub    esp,0x1c
c0013202:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013206:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001320a:	50                   	push   eax
c001320b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001320f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013213:	e8 26 fe ff ff       	call   c001303e <Reg::readInt(char*, char*, int*)>
c0013218:	83 c4 10             	add    esp,0x10
c001321b:	84 c0                	test   al,al
c001321d:	74 04                	je     c0013223 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001321f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013223:	83 c4 18             	add    esp,0x18
c0013226:	89 d8                	mov    eax,ebx
c0013228:	5b                   	pop    ebx
c0013229:	c3                   	ret    

c001322a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001322a:	57                   	push   edi
c001322b:	56                   	push   esi
c001322c:	53                   	push   ebx
c001322d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013231:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013235:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013239:	56                   	push   esi
c001323a:	57                   	push   edi
c001323b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001323f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013243:	e8 e4 fe ff ff       	call   c001312c <Reg::readString(char*, char*, char*, int)>
c0013248:	83 c4 10             	add    esp,0x10
c001324b:	84 c0                	test   al,al
c001324d:	75 16                	jne    c0013265 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001324f:	50                   	push   eax
c0013250:	56                   	push   esi
c0013251:	6a 00                	push   0x0
c0013253:	57                   	push   edi
c0013254:	e8 97 d2 fe ff       	call   c00004f0 <memset>
c0013259:	8d 4e ff             	lea    ecx,[esi-0x1]
c001325c:	89 de                	mov    esi,ebx
c001325e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013260:	83 c4 10             	add    esp,0x10
c0013263:	89 df                	mov    edi,ebx
c0013265:	5b                   	pop    ebx
c0013266:	89 f8                	mov    eax,edi
c0013268:	5e                   	pop    esi
c0013269:	5f                   	pop    edi
c001326a:	c3                   	ret    

c001326b <SysEject(regs*)>:
c001326b:	83 ec 0c             	sub    esp,0xc
c001326e:	83 ca ff             	or     edx,0xffffffff
c0013271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013275:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013278:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001327d:	83 e9 41             	sub    ecx,0x41
c0013280:	83 f9 19             	cmp    ecx,0x19
c0013283:	77 18                	ja     c001329d <SysEject(regs*)+0x32>
c0013285:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c001328c:	85 c9                	test   ecx,ecx
c001328e:	74 0d                	je     c001329d <SysEject(regs*)+0x32>
c0013290:	83 ec 0c             	sub    esp,0xc
c0013293:	51                   	push   ecx
c0013294:	e8 5b a1 ff ff       	call   c000d3f4 <LogicalDisk::eject()>
c0013299:	83 c4 10             	add    esp,0x10
c001329c:	99                   	cdq    
c001329d:	83 c4 0c             	add    esp,0xc
c00132a0:	c3                   	ret    

c00132a1 <SysExit(regs*)>:
c00132a1:	83 ec 18             	sub    esp,0x18
c00132a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132a8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00132ab:	e8 3c 2a 00 00       	call   c0015cec <terminateTask(int)>
c00132b0:	83 c8 ff             	or     eax,0xffffffff
c00132b3:	83 c4 1c             	add    esp,0x1c
c00132b6:	89 c2                	mov    edx,eax
c00132b8:	c3                   	ret    

c00132b9 <SysGetCwd(regs*)>:
c00132b9:	83 ec 10             	sub    esp,0x10
c00132bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132c0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00132c3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00132c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132cb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00132ce:	e8 b7 7c ff ff       	call   c000af8a <Fs::getcwd(Process*, char*, int)>
c00132d3:	83 c4 1c             	add    esp,0x1c
c00132d6:	99                   	cdq    
c00132d7:	c3                   	ret    

c00132d8 <SysGetPID(regs*)>:
c00132d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00132e2:	99                   	cdq    
c00132e3:	c3                   	ret    

c00132e4 <SysGetRAMData(regs*)>:
c00132e4:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c00132ee:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c00132f4:	99                   	cdq    
c00132f5:	f7 f9                	idiv   ecx
c00132f7:	c1 e0 18             	shl    eax,0x18
c00132fa:	09 c8                	or     eax,ecx
c00132fc:	99                   	cdq    
c00132fd:	c3                   	ret    

c00132fe <SysGetVGAPtr(regs*)>:
c00132fe:	55                   	push   ebp
c00132ff:	57                   	push   edi
c0013300:	56                   	push   esi
c0013301:	53                   	push   ebx
c0013302:	83 ec 18             	sub    esp,0x18
c0013305:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013309:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001330c:	e8 a7 24 00 00       	call   c00157b8 <Thr::processFromPID(int)>
c0013311:	83 c4 10             	add    esp,0x10
c0013314:	89 c1                	mov    ecx,eax
c0013316:	b8 01 00 00 00       	mov    eax,0x1
c001331b:	85 c9                	test   ecx,ecx
c001331d:	74 57                	je     c0013376 <SysGetVGAPtr(regs*)+0x78>
c001331f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013323:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013329:	74 0c                	je     c0013337 <SysGetVGAPtr(regs*)+0x39>
c001332b:	83 ec 0c             	sub    esp,0xc
c001332e:	55                   	push   ebp
c001332f:	e8 2d 54 ff ff       	call   c0008761 <setActiveTerminal(VgaText*)>
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001333a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001333f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013342:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013344:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013347:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001334a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013350:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013353:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013356:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001335c:	50                   	push   eax
c001335d:	50                   	push   eax
c001335e:	68 50 16 02 c0       	push   0xc0021650
c0013363:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013366:	05 a8 0f 00 00       	add    eax,0xfa8
c001336b:	50                   	push   eax
c001336c:	e8 df d2 fe ff       	call   c0000650 <strcpy>
c0013371:	83 c4 10             	add    esp,0x10
c0013374:	31 c0                	xor    eax,eax
c0013376:	83 c4 0c             	add    esp,0xc
c0013379:	31 d2                	xor    edx,edx
c001337b:	5b                   	pop    ebx
c001337c:	5e                   	pop    esi
c001337d:	5f                   	pop    edi
c001337e:	5d                   	pop    ebp
c001337f:	c3                   	ret    

c0013380 <SysKill(regs*)>:
c0013380:	53                   	push   ebx
c0013381:	83 ec 08             	sub    esp,0x8
c0013384:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013388:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001338c:	75 16                	jne    c00133a4 <SysKill(regs*)+0x24>
c001338e:	83 ec 0c             	sub    esp,0xc
c0013391:	68 5a 16 02 c0       	push   0xc002165a
c0013396:	e8 a2 d7 ff ff       	call   c0010b3d <KePanic(char const*)>
c001339b:	83 c4 10             	add    esp,0x10
c001339e:	e9 89 00 00 00       	jmp    c001342c <SysKill(regs*)+0xac>
c00133a3:	90                   	nop
c00133a4:	83 ec 0c             	sub    esp,0xc
c00133a7:	68 84 81 02 c0       	push   0xc0028184
c00133ac:	e8 eb bb 00 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00133b1:	8d 76 00             	lea    esi,[esi+0x0]
c00133b4:	83 c4 10             	add    esp,0x10
c00133b7:	85 c0                	test   eax,eax
c00133b9:	74 19                	je     c00133d4 <SysKill(regs*)+0x54>
c00133bb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00133be:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00133c1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00133c3:	74 33                	je     c00133f8 <SysKill(regs*)+0x78>
c00133c5:	52                   	push   edx
c00133c6:	52                   	push   edx
c00133c7:	50                   	push   eax
c00133c8:	68 84 81 02 c0       	push   0xc0028184
c00133cd:	e8 ea be 00 00       	call   c001f2bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00133d2:	eb e0                	jmp    c00133b4 <SysKill(regs*)+0x34>
c00133d4:	83 ec 0c             	sub    esp,0xc
c00133d7:	68 78 81 02 c0       	push   0xc0028178
c00133dc:	e8 bb bb 00 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00133e1:	8d 76 00             	lea    esi,[esi+0x0]
c00133e4:	83 c4 10             	add    esp,0x10
c00133e7:	85 c0                	test   eax,eax
c00133e9:	74 41                	je     c001342c <SysKill(regs*)+0xac>
c00133eb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00133ee:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00133f1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00133f3:	75 27                	jne    c001341c <SysKill(regs*)+0x9c>
c00133f5:	8d 76 00             	lea    esi,[esi+0x0]
c00133f8:	51                   	push   ecx
c00133f9:	51                   	push   ecx
c00133fa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013402:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013405:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001340b:	e8 cb db ff ff       	call   c0010fdb <KeRaiseSignal(SigHandlerBlock*, int)>
c0013410:	83 c4 10             	add    esp,0x10
c0013413:	31 c0                	xor    eax,eax
c0013415:	31 d2                	xor    edx,edx
c0013417:	eb 1b                	jmp    c0013434 <SysKill(regs*)+0xb4>
c0013419:	8d 76 00             	lea    esi,[esi+0x0]
c001341c:	52                   	push   edx
c001341d:	52                   	push   edx
c001341e:	50                   	push   eax
c001341f:	68 78 81 02 c0       	push   0xc0028178
c0013424:	e8 93 be 00 00       	call   c001f2bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013429:	eb b9                	jmp    c00133e4 <SysKill(regs*)+0x64>
c001342b:	90                   	nop
c001342c:	83 c8 ff             	or     eax,0xffffffff
c001342f:	89 c2                	mov    edx,eax
c0013431:	8d 76 00             	lea    esi,[esi+0x0]
c0013434:	83 c4 08             	add    esp,0x8
c0013437:	5b                   	pop    ebx
c0013438:	c3                   	ret    

c0013439 <SysLoadDLL(regs*)>:
c0013439:	56                   	push   esi
c001343a:	31 d2                	xor    edx,edx
c001343c:	53                   	push   ebx
c001343d:	b8 01 00 00 00       	mov    eax,0x1
c0013442:	51                   	push   ecx
c0013443:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013447:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001344b:	0f 84 8c 00 00 00    	je     c00134dd <SysLoadDLL(regs*)+0xa4>
c0013451:	83 ec 0c             	sub    esp,0xc
c0013454:	68 14 01 00 00       	push   0x114
c0013459:	e8 6d 46 ff ff       	call   c0007acb <malloc>
c001345e:	83 c4 0c             	add    esp,0xc
c0013461:	89 c3                	mov    ebx,eax
c0013463:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013468:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001346b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001346e:	53                   	push   ebx
c001346f:	e8 46 7d ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c0013474:	83 c4 10             	add    esp,0x10
c0013477:	31 d2                	xor    edx,edx
c0013479:	85 db                	test   ebx,ebx
c001347b:	b8 02 00 00 00       	mov    eax,0x2
c0013480:	74 5b                	je     c00134dd <SysLoadDLL(regs*)+0xa4>
c0013482:	83 ec 0c             	sub    esp,0xc
c0013485:	53                   	push   ebx
c0013486:	e8 59 80 ff ff       	call   c000b4e4 <File::exists()>
c001348b:	83 c4 10             	add    esp,0x10
c001348e:	84 c0                	test   al,al
c0013490:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013492:	75 11                	jne    c00134a5 <SysLoadDLL(regs*)+0x6c>
c0013494:	83 ec 0c             	sub    esp,0xc
c0013497:	53                   	push   ebx
c0013498:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001349b:	83 c4 10             	add    esp,0x10
c001349e:	b8 03 00 00 00       	mov    eax,0x3
c00134a3:	eb 36                	jmp    c00134db <SysLoadDLL(regs*)+0xa2>
c00134a5:	83 ec 0c             	sub    esp,0xc
c00134a8:	53                   	push   ebx
c00134a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134ac:	58                   	pop    eax
c00134ad:	5a                   	pop    edx
c00134ae:	6a 00                	push   0x0
c00134b0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134b3:	e8 48 14 00 00       	call   c0014900 <Thr::loadDLL(char const*, bool)>
c00134b8:	83 c4 10             	add    esp,0x10
c00134bb:	31 d2                	xor    edx,edx
c00134bd:	89 c1                	mov    ecx,eax
c00134bf:	b8 04 00 00 00       	mov    eax,0x4
c00134c4:	85 c9                	test   ecx,ecx
c00134c6:	74 15                	je     c00134dd <SysLoadDLL(regs*)+0xa4>
c00134c8:	53                   	push   ebx
c00134c9:	53                   	push   ebx
c00134ca:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00134d0:	51                   	push   ecx
c00134d1:	e8 6a 16 00 00       	call   c0014b40 <Thr::executeDLL(unsigned long, void*)>
c00134d6:	83 c4 10             	add    esp,0x10
c00134d9:	31 c0                	xor    eax,eax
c00134db:	31 d2                	xor    edx,edx
c00134dd:	59                   	pop    ecx
c00134de:	5b                   	pop    ebx
c00134df:	5e                   	pop    esi
c00134e0:	c3                   	ret    

c00134e1 <SysRead(regs*)>:
c00134e1:	57                   	push   edi
c00134e2:	56                   	push   esi
c00134e3:	53                   	push   ebx
c00134e4:	83 ec 10             	sub    esp,0x10
c00134e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00134eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00134ee:	83 f8 02             	cmp    eax,0x2
c00134f1:	77 10                	ja     c0013503 <SysRead(regs*)+0x22>
c00134f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00134fb:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013501:	eb 0e                	jmp    c0013511 <SysRead(regs*)+0x30>
c0013503:	83 ec 0c             	sub    esp,0xc
c0013506:	50                   	push   eax
c0013507:	e8 83 5f ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c001350c:	83 c4 10             	add    esp,0x10
c001350f:	89 c1                	mov    ecx,eax
c0013511:	83 c8 ff             	or     eax,0xffffffff
c0013514:	85 c9                	test   ecx,ecx
c0013516:	89 c2                	mov    edx,eax
c0013518:	74 28                	je     c0013542 <SysRead(regs*)+0x61>
c001351a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013522:	83 ec 0c             	sub    esp,0xc
c0013525:	31 ff                	xor    edi,edi
c0013527:	8d 54 24 18          	lea    edx,[esp+0x18]
c001352b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001352d:	52                   	push   edx
c001352e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013531:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013534:	57                   	push   edi
c0013535:	56                   	push   esi
c0013536:	51                   	push   ecx
c0013537:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001353a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001353e:	83 c4 20             	add    esp,0x20
c0013541:	99                   	cdq    
c0013542:	83 c4 10             	add    esp,0x10
c0013545:	5b                   	pop    ebx
c0013546:	5e                   	pop    esi
c0013547:	5f                   	pop    edi
c0013548:	c3                   	ret    

c0013549 <SysRegisterSignal(regs*)>:
c0013549:	83 ec 18             	sub    esp,0x18
c001354c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013550:	6a 00                	push   0x0
c0013552:	6a 00                	push   0x0
c0013554:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013557:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001355a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001355f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013562:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013568:	e8 38 da ff ff       	call   c0010fa5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c001356d:	83 c4 2c             	add    esp,0x2c
c0013570:	99                   	cdq    
c0013571:	c3                   	ret    

c0013572 <SysRegistryGetTypeFromPath(regs*)>:
c0013572:	57                   	push   edi
c0013573:	56                   	push   esi
c0013574:	53                   	push   ebx
c0013575:	81 ec 38 01 00 00    	sub    esp,0x138
c001357b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013582:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013585:	68 7b 16 02 c0       	push   0xc002167b
c001358a:	e8 ad 73 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001358f:	5a                   	pop    edx
c0013590:	59                   	pop    ecx
c0013591:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013594:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013597:	e8 34 f6 ff ff       	call   c0012bd0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001359c:	5f                   	pop    edi
c001359d:	5a                   	pop    edx
c001359e:	89 c6                	mov    esi,eax
c00135a0:	50                   	push   eax
c00135a1:	68 9b 16 02 c0       	push   0xc002169b
c00135a6:	e8 91 73 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00135ab:	83 c4 10             	add    esp,0x10
c00135ae:	85 f6                	test   esi,esi
c00135b0:	74 28                	je     c00135da <SysRegistryGetTypeFromPath(regs*)+0x68>
c00135b2:	50                   	push   eax
c00135b3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00135b7:	57                   	push   edi
c00135b8:	56                   	push   esi
c00135b9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00135bc:	e8 f4 f1 ff ff       	call   c00127b5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00135c1:	83 c4 0c             	add    esp,0xc
c00135c4:	57                   	push   edi
c00135c5:	50                   	push   eax
c00135c6:	89 c3                	mov    ebx,eax
c00135c8:	68 a3 16 02 c0       	push   0xc00216a3
c00135cd:	e8 6a 73 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00135d2:	89 d8                	mov    eax,ebx
c00135d4:	83 c4 10             	add    esp,0x10
c00135d7:	99                   	cdq    
c00135d8:	eb 05                	jmp    c00135df <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00135da:	83 c8 ff             	or     eax,0xffffffff
c00135dd:	89 c2                	mov    edx,eax
c00135df:	81 c4 30 01 00 00    	add    esp,0x130
c00135e5:	5b                   	pop    ebx
c00135e6:	5e                   	pop    esi
c00135e7:	5f                   	pop    edi
c00135e8:	c3                   	ret    

c00135e9 <SysRegistryReadExtent(regs*)>:
c00135e9:	83 ec 1c             	sub    esp,0x1c
c00135ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00135f0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00135f3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00135f6:	85 c0                	test   eax,eax
c00135f8:	79 1f                	jns    c0013619 <SysRegistryReadExtent(regs*)+0x30>
c00135fa:	52                   	push   edx
c00135fb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013600:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013604:	52                   	push   edx
c0013605:	50                   	push   eax
c0013606:	51                   	push   ecx
c0013607:	e8 9b f0 ff ff       	call   c00126a7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001360c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013610:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013614:	83 c4 10             	add    esp,0x10
c0013617:	eb 14                	jmp    c001362d <SysRegistryReadExtent(regs*)+0x44>
c0013619:	83 ec 04             	sub    esp,0x4
c001361c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001361f:	50                   	push   eax
c0013620:	51                   	push   ecx
c0013621:	e8 1f eb ff ff       	call   c0012145 <CmGetString(Reghive_Tag*, int, char*)>
c0013626:	83 c4 10             	add    esp,0x10
c0013629:	31 c0                	xor    eax,eax
c001362b:	31 d2                	xor    edx,edx
c001362d:	83 c4 1c             	add    esp,0x1c
c0013630:	c3                   	ret    

c0013631 <SysRegistryPathToExtentLookup(regs*)>:
c0013631:	53                   	push   ebx
c0013632:	83 ec 10             	sub    esp,0x10
c0013635:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013639:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001363c:	68 b9 16 02 c0       	push   0xc00216b9
c0013641:	e8 f6 72 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0013646:	58                   	pop    eax
c0013647:	5a                   	pop    edx
c0013648:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001364b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001364e:	e8 7d f5 ff ff       	call   c0012bd0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013653:	83 c4 18             	add    esp,0x18
c0013656:	5b                   	pop    ebx
c0013657:	99                   	cdq    
c0013658:	c3                   	ret    

c0013659 <SysRegistryEnterDirectory(regs*)>:
c0013659:	53                   	push   ebx
c001365a:	83 ec 10             	sub    esp,0x10
c001365d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013661:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013664:	68 dc 16 02 c0       	push   0xc00216dc
c0013669:	e8 ce 72 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001366e:	58                   	pop    eax
c001366f:	5a                   	pop    edx
c0013670:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013673:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013676:	e8 41 eb ff ff       	call   c00121bc <CmEnterDirectory(Reghive_Tag*, int)>
c001367b:	83 c4 18             	add    esp,0x18
c001367e:	5b                   	pop    ebx
c001367f:	99                   	cdq    
c0013680:	c3                   	ret    

c0013681 <SysRegistryGetNext(regs*)>:
c0013681:	53                   	push   ebx
c0013682:	83 ec 10             	sub    esp,0x10
c0013685:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013689:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001368c:	68 fa 16 02 c0       	push   0xc00216fa
c0013691:	e8 a6 72 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0013696:	58                   	pop    eax
c0013697:	5a                   	pop    edx
c0013698:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001369b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001369e:	e8 58 eb ff ff       	call   c00121fb <CmGetNext(Reghive_Tag*, int)>
c00136a3:	83 c4 18             	add    esp,0x18
c00136a6:	5b                   	pop    ebx
c00136a7:	99                   	cdq    
c00136a8:	c3                   	ret    

c00136a9 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00136a9:	57                   	push   edi
c00136aa:	56                   	push   esi
c00136ab:	53                   	push   ebx
c00136ac:	81 ec 34 01 00 00    	sub    esp,0x134
c00136b2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00136b9:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00136bd:	57                   	push   edi
c00136be:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00136c1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00136c4:	e8 ec f0 ff ff       	call   c00127b5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00136c9:	89 c3                	mov    ebx,eax
c00136cb:	58                   	pop    eax
c00136cc:	5a                   	pop    edx
c00136cd:	57                   	push   edi
c00136ce:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00136d1:	e8 7a cf fe ff       	call   c0000650 <strcpy>
c00136d6:	81 c4 40 01 00 00    	add    esp,0x140
c00136dc:	89 d8                	mov    eax,ebx
c00136de:	5b                   	pop    ebx
c00136df:	99                   	cdq    
c00136e0:	5e                   	pop    esi
c00136e1:	5f                   	pop    edi
c00136e2:	c3                   	ret    

c00136e3 <SysRegistryOpen(regs*)>:
c00136e3:	83 ec 18             	sub    esp,0x18
c00136e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136ea:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00136ed:	e8 e3 e8 ff ff       	call   c0011fd5 <CmOpen(char const*)>
c00136f2:	83 c4 1c             	add    esp,0x1c
c00136f5:	99                   	cdq    
c00136f6:	c3                   	ret    

c00136f7 <SysRegistryClose(regs*)>:
c00136f7:	83 ec 18             	sub    esp,0x18
c00136fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136fe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013701:	e8 ed e9 ff ff       	call   c00120f3 <CmClose(Reghive_Tag*)>
c0013706:	31 c0                	xor    eax,eax
c0013708:	31 d2                	xor    edx,edx
c001370a:	83 c4 1c             	add    esp,0x1c
c001370d:	c3                   	ret    

c001370e <SysSbrk(regs*)>:
c001370e:	56                   	push   esi
c001370f:	53                   	push   ebx
c0013710:	50                   	push   eax
c0013711:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013716:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001371a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001371d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013720:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013726:	85 db                	test   ebx,ebx
c0013728:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001372b:	74 02                	je     c001372f <SysSbrk(regs*)+0x21>
c001372d:	79 06                	jns    c0013735 <SysSbrk(regs*)+0x27>
c001372f:	89 f0                	mov    eax,esi
c0013731:	31 d2                	xor    edx,edx
c0013733:	eb 2a                	jmp    c001375f <SysSbrk(regs*)+0x51>
c0013735:	83 c8 ff             	or     eax,0xffffffff
c0013738:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001373e:	89 c2                	mov    edx,eax
c0013740:	77 1d                	ja     c001375f <SysSbrk(regs*)+0x51>
c0013742:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013748:	50                   	push   eax
c0013749:	68 07 0c 00 00       	push   0xc07
c001374e:	c1 ea 0c             	shr    edx,0xc
c0013751:	52                   	push   edx
c0013752:	51                   	push   ecx
c0013753:	e8 a0 66 ff ff       	call   c0009df8 <VAS::allocatePages(int, int)>
c0013758:	89 f0                	mov    eax,esi
c001375a:	31 d2                	xor    edx,edx
c001375c:	83 c4 10             	add    esp,0x10
c001375f:	59                   	pop    ecx
c0013760:	5b                   	pop    ebx
c0013761:	5e                   	pop    esi
c0013762:	c3                   	ret    

c0013763 <SysSetCwd(regs*)>:
c0013763:	83 ec 14             	sub    esp,0x14
c0013766:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001376a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001376d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013772:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013775:	e8 09 7e ff ff       	call   c000b583 <Fs::setcwd(Process*, char*)>
c001377a:	83 c4 1c             	add    esp,0x1c
c001377d:	99                   	cdq    
c001377e:	c3                   	ret    

c001377f <SysSetTime(regs*)>:
c001377f:	55                   	push   ebp
c0013780:	31 c9                	xor    ecx,ecx
c0013782:	57                   	push   edi
c0013783:	bd 0c 00 00 00       	mov    ebp,0xc
c0013788:	56                   	push   esi
c0013789:	53                   	push   ebx
c001378a:	31 db                	xor    ebx,ebx
c001378c:	83 ec 10             	sub    esp,0x10
c001378f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013793:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013796:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013799:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001379c:	89 c2                	mov    edx,eax
c001379e:	c1 e8 05             	shr    eax,0x5
c00137a1:	83 e2 1f             	and    edx,0x1f
c00137a4:	42                   	inc    edx
c00137a5:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00137ab:	c1 e7 10             	shl    edi,0x10
c00137ae:	88 d1                	mov    cl,dl
c00137b0:	31 d2                	xor    edx,edx
c00137b2:	f7 f5                	div    ebp
c00137b4:	89 dd                	mov    ebp,ebx
c00137b6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00137bc:	88 d5                	mov    ch,dl
c00137be:	31 d2                	xor    edx,edx
c00137c0:	0f b7 c1             	movzx  eax,cx
c00137c3:	09 f8                	or     eax,edi
c00137c5:	bf 3c 00 00 00       	mov    edi,0x3c
c00137ca:	89 c1                	mov    ecx,eax
c00137cc:	89 f0                	mov    eax,esi
c00137ce:	f7 f7                	div    edi
c00137d0:	c1 e2 10             	shl    edx,0x10
c00137d3:	09 d5                	or     ebp,edx
c00137d5:	31 d2                	xor    edx,edx
c00137d7:	f7 f7                	div    edi
c00137d9:	89 eb                	mov    ebx,ebp
c00137db:	bf 10 0e 00 00       	mov    edi,0xe10
c00137e0:	89 f0                	mov    eax,esi
c00137e2:	88 d7                	mov    bh,dl
c00137e4:	31 d2                	xor    edx,edx
c00137e6:	f7 f7                	div    edi
c00137e8:	bf 18 00 00 00       	mov    edi,0x18
c00137ed:	31 d2                	xor    edx,edx
c00137ef:	f7 f7                	div    edi
c00137f1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00137f6:	88 d3                	mov    bl,dl
c00137f8:	53                   	push   ebx
c00137f9:	51                   	push   ecx
c00137fa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013800:	e8 83 85 ff ff       	call   c000bd88 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013805:	83 c4 1c             	add    esp,0x1c
c0013808:	31 d2                	xor    edx,edx
c001380a:	5b                   	pop    ebx
c001380b:	5e                   	pop    esi
c001380c:	83 f0 01             	xor    eax,0x1
c001380f:	5f                   	pop    edi
c0013810:	0f b6 c0             	movzx  eax,al
c0013813:	5d                   	pop    ebp
c0013814:	c3                   	ret    

c0013815 <SysTimezone(regs*)>:
c0013815:	53                   	push   ebx
c0013816:	83 ec 08             	sub    esp,0x8
c0013819:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001381d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013821:	75 17                	jne    c001383a <SysTimezone(regs*)+0x25>
c0013823:	83 ec 0c             	sub    esp,0xc
c0013826:	68 11 17 02 c0       	push   0xc0021711
c001382b:	e8 0c 71 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0013830:	83 c8 ff             	or     eax,0xffffffff
c0013833:	83 c4 10             	add    esp,0x10
c0013836:	89 c2                	mov    edx,eax
c0013838:	eb 20                	jmp    c001385a <SysTimezone(regs*)+0x45>
c001383a:	83 ec 0c             	sub    esp,0xc
c001383d:	68 26 17 02 c0       	push   0xc0021726
c0013842:	e8 f5 70 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0013847:	58                   	pop    eax
c0013848:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001384b:	e8 9c 82 ff ff       	call   c000baec <User::loadClockSettings(int)>
c0013850:	83 c4 10             	add    esp,0x10
c0013853:	b8 01 00 00 00       	mov    eax,0x1
c0013858:	31 d2                	xor    edx,edx
c001385a:	83 c4 08             	add    esp,0x8
c001385d:	5b                   	pop    ebx
c001385e:	c3                   	ret    

c001385f <SysWrite(regs*)>:
c001385f:	57                   	push   edi
c0013860:	56                   	push   esi
c0013861:	53                   	push   ebx
c0013862:	83 ec 10             	sub    esp,0x10
c0013865:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013869:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001386c:	83 f8 02             	cmp    eax,0x2
c001386f:	77 10                	ja     c0013881 <SysWrite(regs*)+0x22>
c0013871:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013876:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013879:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001387f:	eb 0e                	jmp    c001388f <SysWrite(regs*)+0x30>
c0013881:	83 ec 0c             	sub    esp,0xc
c0013884:	50                   	push   eax
c0013885:	e8 05 5c ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c001388a:	83 c4 10             	add    esp,0x10
c001388d:	89 c1                	mov    ecx,eax
c001388f:	83 c8 ff             	or     eax,0xffffffff
c0013892:	85 c9                	test   ecx,ecx
c0013894:	89 c2                	mov    edx,eax
c0013896:	74 28                	je     c00138c0 <SysWrite(regs*)+0x61>
c0013898:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00138a0:	83 ec 0c             	sub    esp,0xc
c00138a3:	31 ff                	xor    edi,edi
c00138a5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00138a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138ab:	52                   	push   edx
c00138ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00138af:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00138b2:	57                   	push   edi
c00138b3:	56                   	push   esi
c00138b4:	51                   	push   ecx
c00138b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00138b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00138bc:	83 c4 20             	add    esp,0x20
c00138bf:	99                   	cdq    
c00138c0:	83 c4 10             	add    esp,0x10
c00138c3:	5b                   	pop    ebx
c00138c4:	5e                   	pop    esi
c00138c5:	5f                   	pop    edi
c00138c6:	c3                   	ret    

c00138c7 <SysWsbe(regs*)>:
c00138c7:	57                   	push   edi
c00138c8:	b9 0b 00 00 00       	mov    ecx,0xb
c00138cd:	56                   	push   esi
c00138ce:	be 65 17 02 c0       	mov    esi,0xc0021765
c00138d3:	53                   	push   ebx
c00138d4:	83 ec 30             	sub    esp,0x30
c00138d7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00138db:	fc                   	cld    
c00138dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00138de:	83 ec 0c             	sub    esp,0xc
c00138e1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00138e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138ed:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00138f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00138f5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00138f8:	57                   	push   edi
c00138f9:	e8 82 cc fe ff       	call   c0000580 <strlen>
c00138fe:	5a                   	pop    edx
c00138ff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013903:	52                   	push   edx
c0013904:	31 d2                	xor    edx,edx
c0013906:	57                   	push   edi
c0013907:	52                   	push   edx
c0013908:	50                   	push   eax
c0013909:	56                   	push   esi
c001390a:	ff d3                	call   ebx
c001390c:	83 c4 14             	add    esp,0x14
c001390f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013913:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013916:	e8 d1 23 00 00       	call   c0015cec <terminateTask(int)>
c001391b:	83 c4 40             	add    esp,0x40
c001391e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013923:	5b                   	pop    ebx
c0013924:	31 d2                	xor    edx,edx
c0013926:	5e                   	pop    esi
c0013927:	5f                   	pop    edi
c0013928:	c3                   	ret    

c0013929 <SysYield(regs*)>:
c0013929:	83 ec 0c             	sub    esp,0xc
c001392c:	fa                   	cli    
c001392d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013933:	e8 34 1a 00 00       	call   c001536c <schedule()>
c0013938:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001393d:	48                   	dec    eax
c001393e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013943:	75 01                	jne    c0013946 <SysYield(regs*)+0x1d>
c0013945:	fb                   	sti    
c0013946:	31 c0                	xor    eax,eax
c0013948:	31 d2                	xor    edx,edx
c001394a:	83 c4 0c             	add    esp,0xc
c001394d:	c3                   	ret    

c001394e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001394e:	55                   	push   ebp
c001394f:	57                   	push   edi
c0013950:	56                   	push   esi
c0013951:	53                   	push   ebx
c0013952:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013958:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013963:	74 3b                	je     c00139a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013965:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001396d:	74 31                	je     c00139a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001396f:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013977:	75 27                	jne    c00139a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013979:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013980:	05 00 10 00 00       	add    eax,0x1000
c0013985:	89 c2                	mov    edx,eax
c0013987:	25 00 f0 ff ff       	and    eax,0xfffff000
c001398c:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013993:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0013999:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00139a0:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00139a7:	83 ec 0c             	sub    esp,0xc
c00139aa:	6a 01                	push   0x1
c00139ac:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00139b2:	e8 32 5c ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c00139b7:	83 c4 10             	add    esp,0x10
c00139ba:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00139c0:	89 c3                	mov    ebx,eax
c00139c2:	0f 86 26 01 00 00    	jbe    c0013aee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00139c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00139d0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00139d7:	c1 ee 0c             	shr    esi,0xc
c00139da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00139de:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00139e5:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00139ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00139f0:	29 ef                	sub    edi,ebp
c00139f2:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00139f6:	0f 83 f9 00 00 00    	jae    c0013af5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00139fc:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013a02:	b8 00 10 00 00       	mov    eax,0x1000
c0013a07:	0f 47 f8             	cmova  edi,eax
c0013a0a:	83 ec 0c             	sub    esp,0xc
c0013a0d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013a14:	31 d2                	xor    edx,edx
c0013a16:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a18:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013a1c:	50                   	push   eax
c0013a1d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013a21:	56                   	push   esi
c0013a22:	52                   	push   edx
c0013a23:	57                   	push   edi
c0013a24:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013a2b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a2e:	83 c4 20             	add    esp,0x20
c0013a31:	85 c0                	test   eax,eax
c0013a33:	75 06                	jne    c0013a3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013a35:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013a39:	74 13                	je     c0013a4e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013a3b:	83 ec 0c             	sub    esp,0xc
c0013a3e:	53                   	push   ebx
c0013a3f:	e8 b7 5e ff ff       	call   c00098fb <Virt::freeKernelVirtualPages(unsigned long)>
c0013a44:	83 c4 10             	add    esp,0x10
c0013a47:	31 c0                	xor    eax,eax
c0013a49:	e9 7c 01 00 00       	jmp    c0013bca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013a4e:	fa                   	cli    
c0013a4f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013a55:	e8 7b 43 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0013a5a:	6a 07                	push   0x7
c0013a5c:	53                   	push   ebx
c0013a5d:	50                   	push   eax
c0013a5e:	89 c7                	mov    edi,eax
c0013a60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a68:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a6e:	e8 7d 62 ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a73:	83 c4 0c             	add    esp,0xc
c0013a76:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013a7d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a83:	6a 00                	push   0x0
c0013a85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a8d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a93:	e8 be 60 ff ff       	call   c0009b56 <VAS::mapOtherVASIn(bool, VAS*)>
c0013a98:	58                   	pop    eax
c0013a99:	5a                   	pop    edx
c0013a9a:	68 07 0c 00 00       	push   0xc07
c0013a9f:	55                   	push   ebp
c0013aa0:	57                   	push   edi
c0013aa1:	89 df                	mov    edi,ebx
c0013aa3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013aaa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ab0:	6a 00                	push   0x0
c0013ab2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ab7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013aba:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ac0:	e8 ad 64 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013ac5:	b9 00 10 00 00       	mov    ecx,0x1000
c0013aca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013acc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013ad1:	83 c4 20             	add    esp,0x20
c0013ad4:	48                   	dec    eax
c0013ad5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013ada:	85 c0                	test   eax,eax
c0013adc:	75 01                	jne    c0013adf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0013ade:	fb                   	sti    
c0013adf:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013ae3:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013ae9:	e9 f0 fe ff ff       	jmp    c00139de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013aee:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013af5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013afc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013b02:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013b08:	0f 86 ae 00 00 00    	jbe    c0013bbc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013b0e:	fa                   	cli    
c0013b0f:	51                   	push   ecx
c0013b10:	31 ff                	xor    edi,edi
c0013b12:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013b19:	c1 ee 0c             	shr    esi,0xc
c0013b1c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013b22:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b28:	6a 00                	push   0x0
c0013b2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b2f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b32:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b38:	e8 19 60 ff ff       	call   c0009b56 <VAS::mapOtherVASIn(bool, VAS*)>
c0013b3d:	83 c4 10             	add    esp,0x10
c0013b40:	e8 90 42 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0013b45:	47                   	inc    edi
c0013b46:	6a 07                	push   0x7
c0013b48:	53                   	push   ebx
c0013b49:	50                   	push   eax
c0013b4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b4e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b54:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013b57:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013b5d:	e8 8e 61 ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b62:	58                   	pop    eax
c0013b63:	5a                   	pop    edx
c0013b64:	68 07 0c 00 00       	push   0xc07
c0013b69:	55                   	push   ebp
c0013b6a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013b70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b74:	50                   	push   eax
c0013b75:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013b7c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b82:	6a 00                	push   0x0
c0013b84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b89:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b8c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b92:	e8 db 63 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013b97:	83 c4 1c             	add    esp,0x1c
c0013b9a:	68 00 10 00 00       	push   0x1000
c0013b9f:	6a 00                	push   0x0
c0013ba1:	53                   	push   ebx
c0013ba2:	e8 49 c9 fe ff       	call   c00004f0 <memset>
c0013ba7:	83 c4 10             	add    esp,0x10
c0013baa:	39 fe                	cmp    esi,edi
c0013bac:	77 92                	ja     c0013b40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013bae:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013bb3:	48                   	dec    eax
c0013bb4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013bb9:	75 01                	jne    c0013bbc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013bbb:	fb                   	sti    
c0013bbc:	83 ec 0c             	sub    esp,0xc
c0013bbf:	53                   	push   ebx
c0013bc0:	e8 36 5d ff ff       	call   c00098fb <Virt::freeKernelVirtualPages(unsigned long)>
c0013bc5:	83 c4 10             	add    esp,0x10
c0013bc8:	b0 01                	mov    al,0x1
c0013bca:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013bd0:	5b                   	pop    ebx
c0013bd1:	5e                   	pop    esi
c0013bd2:	5f                   	pop    edi
c0013bd3:	5d                   	pop    ebp
c0013bd4:	c3                   	ret    

c0013bd5 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013bd5:	55                   	push   ebp
c0013bd6:	57                   	push   edi
c0013bd7:	56                   	push   esi
c0013bd8:	53                   	push   ebx
c0013bd9:	83 ec 48             	sub    esp,0x48
c0013bdc:	68 14 01 00 00       	push   0x114
c0013be1:	e8 e5 3e ff ff       	call   c0007acb <malloc>
c0013be6:	83 c4 0c             	add    esp,0xc
c0013be9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013bed:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013bf1:	89 c7                	mov    edi,eax
c0013bf3:	50                   	push   eax
c0013bf4:	e8 c1 75 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c0013bf9:	58                   	pop    eax
c0013bfa:	5a                   	pop    edx
c0013bfb:	6a 01                	push   0x1
c0013bfd:	57                   	push   edi
c0013bfe:	e8 73 76 ff ff       	call   c000b276 <File::open(FileOpenMode)>
c0013c03:	83 c4 10             	add    esp,0x10
c0013c06:	85 c0                	test   eax,eax
c0013c08:	0f 85 4c 01 00 00    	jne    c0013d5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c0e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013c16:	83 ec 0c             	sub    esp,0xc
c0013c19:	6a 34                	push   0x34
c0013c1b:	e8 ab 3e ff ff       	call   c0007acb <malloc>
c0013c20:	89 c3                	mov    ebx,eax
c0013c22:	58                   	pop    eax
c0013c23:	8b 07                	mov    eax,DWORD PTR [edi]
c0013c25:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013c29:	56                   	push   esi
c0013c2a:	53                   	push   ebx
c0013c2b:	6a 00                	push   0x0
c0013c2d:	6a 34                	push   0x34
c0013c2f:	57                   	push   edi
c0013c30:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c33:	83 c4 20             	add    esp,0x20
c0013c36:	85 c0                	test   eax,eax
c0013c38:	0f 85 1c 01 00 00    	jne    c0013d5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c3e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013c44:	0f 85 10 01 00 00    	jne    c0013d5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c4a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c4d:	85 c0                	test   eax,eax
c0013c4f:	0f 84 05 01 00 00    	je     c0013d5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c55:	31 d2                	xor    edx,edx
c0013c57:	55                   	push   ebp
c0013c58:	52                   	push   edx
c0013c59:	50                   	push   eax
c0013c5a:	57                   	push   edi
c0013c5b:	e8 d4 76 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c0013c60:	83 c4 10             	add    esp,0x10
c0013c63:	85 c0                	test   eax,eax
c0013c65:	0f 85 ef 00 00 00    	jne    c0013d5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c6e:	83 ec 0c             	sub    esp,0xc
c0013c71:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013c75:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013c79:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013c7d:	0f af c2             	imul   eax,edx
c0013c80:	50                   	push   eax
c0013c81:	e8 45 3e ff ff       	call   c0007acb <malloc>
c0013c86:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013c88:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013c8f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c93:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013c97:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013c9b:	0f af c2             	imul   eax,edx
c0013c9e:	99                   	cdq    
c0013c9f:	52                   	push   edx
c0013ca0:	50                   	push   eax
c0013ca1:	57                   	push   edi
c0013ca2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ca5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013ca8:	83 c4 20             	add    esp,0x20
c0013cab:	85 c0                	test   eax,eax
c0013cad:	0f 84 a7 00 00 00    	je     c0013d5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013cb3:	31 d2                	xor    edx,edx
c0013cb5:	51                   	push   ecx
c0013cb6:	52                   	push   edx
c0013cb7:	50                   	push   eax
c0013cb8:	57                   	push   edi
c0013cb9:	e8 76 76 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c0013cbe:	83 c4 10             	add    esp,0x10
c0013cc1:	85 c0                	test   eax,eax
c0013cc3:	0f 85 91 00 00 00    	jne    c0013d5a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013cc9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013ccd:	83 ec 0c             	sub    esp,0xc
c0013cd0:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013cd4:	0f af c2             	imul   eax,edx
c0013cd7:	50                   	push   eax
c0013cd8:	e8 ee 3d ff ff       	call   c0007acb <malloc>
c0013cdd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013cdf:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ce2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cea:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013cee:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013cf2:	0f af c2             	imul   eax,edx
c0013cf5:	99                   	cdq    
c0013cf6:	52                   	push   edx
c0013cf7:	50                   	push   eax
c0013cf8:	57                   	push   edi
c0013cf9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013cfc:	83 c4 20             	add    esp,0x20
c0013cff:	31 c9                	xor    ecx,ecx
c0013d01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013d09:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013d0d:	0f b7 e9             	movzx  ebp,cx
c0013d10:	0f 83 86 00 00 00    	jae    c0013d9c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013d16:	c1 e5 05             	shl    ebp,0x5
c0013d19:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013d1d:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013d21:	75 73                	jne    c0013d96 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013d23:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013d27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013d2a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013d2d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d31:	52                   	push   edx
c0013d32:	31 d2                	xor    edx,edx
c0013d34:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013d37:	52                   	push   edx
c0013d38:	50                   	push   eax
c0013d39:	57                   	push   edi
c0013d3a:	e8 f5 75 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c0013d3f:	83 c4 10             	add    esp,0x10
c0013d42:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d46:	85 c0                	test   eax,eax
c0013d48:	74 17                	je     c0013d61 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013d4a:	83 ec 0c             	sub    esp,0xc
c0013d4d:	68 91 17 02 c0       	push   0xc0021791
c0013d52:	e8 e5 6b ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0013d57:	83 c4 10             	add    esp,0x10
c0013d5a:	31 c0                	xor    eax,eax
c0013d5c:	e9 8b 00 00 00       	jmp    c0013dec <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013d61:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013d65:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013d68:	83 ec 0c             	sub    esp,0xc
c0013d6b:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013d6e:	50                   	push   eax
c0013d6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013d73:	56                   	push   esi
c0013d74:	57                   	push   edi
c0013d75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013d79:	e8 d0 fb ff ff       	call   c001394e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013d7e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013d82:	83 c4 20             	add    esp,0x20
c0013d85:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013d89:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d8d:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013d92:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013d96:	41                   	inc    ecx
c0013d97:	e9 6d ff ff ff       	jmp    c0013d09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013d9c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013da0:	83 ec 0c             	sub    esp,0xc
c0013da3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013da7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dab:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013db1:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013db7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013dbc:	05 00 10 00 00       	add    eax,0x1000
c0013dc1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dc8:	e8 0e 3d ff ff       	call   c0007adb <free>
c0013dcd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dd0:	e8 06 3d ff ff       	call   c0007adb <free>
c0013dd5:	58                   	pop    eax
c0013dd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013dda:	e8 fc 3c ff ff       	call   c0007adb <free>
c0013ddf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013de2:	e8 ed 74 ff ff       	call   c000b2d4 <File::close()>
c0013de7:	83 c4 10             	add    esp,0x10
c0013dea:	b0 01                	mov    al,0x1
c0013dec:	83 c4 3c             	add    esp,0x3c
c0013def:	5b                   	pop    ebx
c0013df0:	5e                   	pop    esi
c0013df1:	5f                   	pop    edi
c0013df2:	5d                   	pop    ebp
c0013df3:	c3                   	ret    

c0013df4 <Thr::runtimeReferenceHelper()>:
c0013df4:	83 ec 18             	sub    esp,0x18
c0013df7:	68 99 17 02 c0       	push   0xc0021799
c0013dfc:	e8 3b 6b ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0013e01:	fa                   	cli    
c0013e02:	83 c4 10             	add    esp,0x10
c0013e05:	eb fe                	jmp    c0013e05 <Thr::runtimeReferenceHelper()+0x11>

c0013e07 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013e07:	57                   	push   edi
c0013e08:	56                   	push   esi
c0013e09:	53                   	push   ebx
c0013e0a:	31 db                	xor    ebx,ebx
c0013e0c:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013e12:	7e 3c                	jle    c0013e50 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013e14:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013e1b:	31 ff                	xor    edi,edi
c0013e1d:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013e24:	7e 27                	jle    c0013e4d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013e26:	50                   	push   eax
c0013e27:	50                   	push   eax
c0013e28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e2c:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e2e:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013e35:	50                   	push   eax
c0013e36:	e8 45 c9 fe ff       	call   c0000780 <strcmp>
c0013e3b:	83 c4 10             	add    esp,0x10
c0013e3e:	85 c0                	test   eax,eax
c0013e40:	75 05                	jne    c0013e47 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013e42:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e45:	eb 0b                	jmp    c0013e52 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013e47:	83 c6 10             	add    esi,0x10
c0013e4a:	47                   	inc    edi
c0013e4b:	eb d0                	jmp    c0013e1d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013e4d:	43                   	inc    ebx
c0013e4e:	eb bc                	jmp    c0013e0c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013e50:	31 c0                	xor    eax,eax
c0013e52:	5b                   	pop    ebx
c0013e53:	5e                   	pop    esi
c0013e54:	5f                   	pop    edi
c0013e55:	c3                   	ret    

c0013e56 <Thr::loadKernelSymbolTable(char const*)>:
c0013e56:	55                   	push   ebp
c0013e57:	57                   	push   edi
c0013e58:	56                   	push   esi
c0013e59:	53                   	push   ebx
c0013e5a:	83 ec 68             	sub    esp,0x68
c0013e5d:	68 14 01 00 00       	push   0x114
c0013e62:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013e68:	e8 5e 3c ff ff       	call   c0007acb <malloc>
c0013e6d:	83 c4 0c             	add    esp,0xc
c0013e70:	56                   	push   esi
c0013e71:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013e75:	89 c3                	mov    ebx,eax
c0013e77:	50                   	push   eax
c0013e78:	e8 3d 73 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c0013e7d:	5e                   	pop    esi
c0013e7e:	5f                   	pop    edi
c0013e7f:	6a 01                	push   0x1
c0013e81:	53                   	push   ebx
c0013e82:	e8 ef 73 ff ff       	call   c000b276 <File::open(FileOpenMode)>
c0013e87:	83 c4 10             	add    esp,0x10
c0013e8a:	85 c0                	test   eax,eax
c0013e8c:	74 0a                	je     c0013e98 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013e8e:	83 ec 0c             	sub    esp,0xc
c0013e91:	68 bb 17 02 c0       	push   0xc00217bb
c0013e96:	eb 34                	jmp    c0013ecc <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013e98:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013ea0:	83 ec 0c             	sub    esp,0xc
c0013ea3:	6a 34                	push   0x34
c0013ea5:	e8 21 3c ff ff       	call   c0007acb <malloc>
c0013eaa:	59                   	pop    ecx
c0013eab:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013eaf:	89 c7                	mov    edi,eax
c0013eb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013eb3:	56                   	push   esi
c0013eb4:	57                   	push   edi
c0013eb5:	6a 00                	push   0x0
c0013eb7:	6a 34                	push   0x34
c0013eb9:	53                   	push   ebx
c0013eba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ebd:	83 c4 20             	add    esp,0x20
c0013ec0:	85 c0                	test   eax,eax
c0013ec2:	74 17                	je     c0013edb <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013ec4:	83 ec 0c             	sub    esp,0xc
c0013ec7:	68 d2 17 02 c0       	push   0xc00217d2
c0013ecc:	e8 6c cc ff ff       	call   c0010b3d <KePanic(char const*)>
c0013ed1:	83 c4 10             	add    esp,0x10
c0013ed4:	31 c0                	xor    eax,eax
c0013ed6:	e9 31 02 00 00       	jmp    c001410c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013edb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013ee1:	75 e1                	jne    c0013ec4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013ee3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013ee6:	85 c0                	test   eax,eax
c0013ee8:	74 da                	je     c0013ec4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013eea:	52                   	push   edx
c0013eeb:	31 d2                	xor    edx,edx
c0013eed:	52                   	push   edx
c0013eee:	50                   	push   eax
c0013eef:	53                   	push   ebx
c0013ef0:	e8 3f 74 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c0013ef5:	83 c4 10             	add    esp,0x10
c0013ef8:	85 c0                	test   eax,eax
c0013efa:	75 c8                	jne    c0013ec4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013efc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f00:	83 ec 0c             	sub    esp,0xc
c0013f03:	31 ed                	xor    ebp,ebp
c0013f05:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f09:	0f af c2             	imul   eax,edx
c0013f0c:	50                   	push   eax
c0013f0d:	e8 b9 3b ff ff       	call   c0007acb <malloc>
c0013f12:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f14:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f1f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f23:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f27:	0f af c2             	imul   eax,edx
c0013f2a:	99                   	cdq    
c0013f2b:	52                   	push   edx
c0013f2c:	50                   	push   eax
c0013f2d:	53                   	push   ebx
c0013f2e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f31:	83 c4 20             	add    esp,0x20
c0013f34:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013f3c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013f44:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013f4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013f54:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013f58:	0f b7 f5             	movzx  esi,bp
c0013f5b:	0f 83 a7 00 00 00    	jae    c0014008 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013f61:	6b f6 28             	imul   esi,esi,0x28
c0013f64:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013f68:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013f6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f6f:	50                   	push   eax
c0013f70:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013f74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f78:	8b 16                	mov    edx,DWORD PTR [esi]
c0013f7a:	6b c0 28             	imul   eax,eax,0x28
c0013f7d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013f81:	89 d0                	mov    eax,edx
c0013f83:	31 d2                	xor    edx,edx
c0013f85:	52                   	push   edx
c0013f86:	50                   	push   eax
c0013f87:	53                   	push   ebx
c0013f88:	e8 a7 73 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c0013f8d:	83 c4 0c             	add    esp,0xc
c0013f90:	6a 20                	push   0x20
c0013f92:	6a 00                	push   0x0
c0013f94:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013f98:	52                   	push   edx
c0013f99:	e8 52 c5 fe ff       	call   c00004f0 <memset>
c0013f9e:	58                   	pop    eax
c0013f9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fa1:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013fa5:	51                   	push   ecx
c0013fa6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013faa:	52                   	push   edx
c0013fab:	6a 00                	push   0x0
c0013fad:	6a 1f                	push   0x1f
c0013faf:	53                   	push   ebx
c0013fb0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fb3:	83 c4 18             	add    esp,0x18
c0013fb6:	68 e9 17 02 c0       	push   0xc00217e9
c0013fbb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013fbf:	52                   	push   edx
c0013fc0:	e8 bb c7 fe ff       	call   c0000780 <strcmp>
c0013fc5:	83 c4 10             	add    esp,0x10
c0013fc8:	85 c0                	test   eax,eax
c0013fca:	75 0f                	jne    c0013fdb <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013fcc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013fcf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013fdb:	50                   	push   eax
c0013fdc:	50                   	push   eax
c0013fdd:	68 f1 17 02 c0       	push   0xc00217f1
c0013fe2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013fe6:	50                   	push   eax
c0013fe7:	e8 94 c7 fe ff       	call   c0000780 <strcmp>
c0013fec:	83 c4 10             	add    esp,0x10
c0013fef:	85 c0                	test   eax,eax
c0013ff1:	75 0f                	jne    c0014002 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013ff3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ff6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ffa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014002:	45                   	inc    ebp
c0014003:	e9 4c ff ff ff       	jmp    c0013f54 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014008:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001400d:	75 10                	jne    c001401f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001400f:	83 ec 0c             	sub    esp,0xc
c0014012:	68 f9 17 02 c0       	push   0xc00217f9
c0014017:	e8 21 cb ff ff       	call   c0010b3d <KePanic(char const*)>
c001401c:	83 c4 10             	add    esp,0x10
c001401f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014024:	75 10                	jne    c0014036 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014026:	83 ec 0c             	sub    esp,0xc
c0014029:	68 f9 17 02 c0       	push   0xc00217f9
c001402e:	e8 0a cb ff ff       	call   c0010b3d <KePanic(char const*)>
c0014033:	83 c4 10             	add    esp,0x10
c0014036:	50                   	push   eax
c0014037:	31 d2                	xor    edx,edx
c0014039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001403d:	52                   	push   edx
c001403e:	50                   	push   eax
c001403f:	53                   	push   ebx
c0014040:	e8 ef 72 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c0014045:	5a                   	pop    edx
c0014046:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001404a:	e8 7c 3a ff ff       	call   c0007acb <malloc>
c001404f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014053:	31 c9                	xor    ecx,ecx
c0014055:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014059:	8b 03                	mov    eax,DWORD PTR [ebx]
c001405b:	5e                   	pop    esi
c001405c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014060:	55                   	push   ebp
c0014061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014065:	51                   	push   ecx
c0014066:	52                   	push   edx
c0014067:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001406b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001406f:	53                   	push   ebx
c0014070:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014073:	83 c4 14             	add    esp,0x14
c0014076:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001407a:	e8 4c 3a ff ff       	call   c0007acb <malloc>
c001407f:	89 c6                	mov    esi,eax
c0014081:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014083:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014086:	56                   	push   esi
c0014087:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001408b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001408f:	51                   	push   ecx
c0014090:	52                   	push   edx
c0014091:	53                   	push   ebx
c0014092:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014095:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014099:	83 c4 1c             	add    esp,0x1c
c001409c:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c00140a2:	c1 e8 04             	shr    eax,0x4
c00140a5:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c00140ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140b0:	31 d2                	xor    edx,edx
c00140b2:	52                   	push   edx
c00140b3:	50                   	push   eax
c00140b4:	53                   	push   ebx
c00140b5:	e8 7a 72 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c00140ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00140bc:	31 d2                	xor    edx,edx
c00140be:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140c1:	56                   	push   esi
c00140c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00140c6:	52                   	push   edx
c00140c7:	50                   	push   eax
c00140c8:	53                   	push   ebx
c00140c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140cc:	83 c4 14             	add    esp,0x14
c00140cf:	53                   	push   ebx
c00140d0:	e8 ff 71 ff ff       	call   c000b2d4 <File::close()>
c00140d5:	5d                   	pop    ebp
c00140d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140da:	e8 fc 39 ff ff       	call   c0007adb <free>
c00140df:	89 3c 24             	mov    DWORD PTR [esp],edi
c00140e2:	e8 f4 39 ff ff       	call   c0007adb <free>
c00140e7:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c00140ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c00140fa:	8d 50 01             	lea    edx,[eax+0x1]
c00140fd:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0014104:	b0 01                	mov    al,0x1
c0014106:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c001410c:	83 c4 5c             	add    esp,0x5c
c001410f:	5b                   	pop    ebx
c0014110:	5e                   	pop    esi
c0014111:	5f                   	pop    edi
c0014112:	5d                   	pop    ebp
c0014113:	c3                   	ret    

c0014114 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014114:	55                   	push   ebp
c0014115:	57                   	push   edi
c0014116:	56                   	push   esi
c0014117:	53                   	push   ebx
c0014118:	81 ec 68 03 00 00    	sub    esp,0x368
c001411e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014125:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c001412b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001412f:	68 14 01 00 00       	push   0x114
c0014134:	e8 92 39 ff ff       	call   c0007acb <malloc>
c0014139:	83 c4 0c             	add    esp,0xc
c001413c:	56                   	push   esi
c001413d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014144:	50                   	push   eax
c0014145:	89 c3                	mov    ebx,eax
c0014147:	e8 6e 70 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c001414c:	5f                   	pop    edi
c001414d:	5d                   	pop    ebp
c001414e:	6a 01                	push   0x1
c0014150:	53                   	push   ebx
c0014151:	e8 20 71 ff ff       	call   c000b276 <File::open(FileOpenMode)>
c0014156:	83 c4 10             	add    esp,0x10
c0014159:	85 c0                	test   eax,eax
c001415b:	0f 85 db 06 00 00    	jne    c001483c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x728>
c0014161:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014169:	83 ec 0c             	sub    esp,0xc
c001416c:	6a 34                	push   0x34
c001416e:	e8 58 39 ff ff       	call   c0007acb <malloc>
c0014173:	5e                   	pop    esi
c0014174:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014178:	89 c5                	mov    ebp,eax
c001417a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001417c:	56                   	push   esi
c001417d:	55                   	push   ebp
c001417e:	6a 00                	push   0x0
c0014180:	6a 34                	push   0x34
c0014182:	53                   	push   ebx
c0014183:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014186:	83 c4 20             	add    esp,0x20
c0014189:	85 c0                	test   eax,eax
c001418b:	0f 85 ab 06 00 00    	jne    c001483c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x728>
c0014191:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014198:	0f 85 9e 06 00 00    	jne    c001483c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x728>
c001419e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00141a1:	85 c0                	test   eax,eax
c00141a3:	0f 84 93 06 00 00    	je     c001483c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x728>
c00141a9:	31 d2                	xor    edx,edx
c00141ab:	51                   	push   ecx
c00141ac:	52                   	push   edx
c00141ad:	50                   	push   eax
c00141ae:	53                   	push   ebx
c00141af:	e8 80 71 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c00141b4:	83 c4 10             	add    esp,0x10
c00141b7:	85 c0                	test   eax,eax
c00141b9:	0f 85 7d 06 00 00    	jne    c001483c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x728>
c00141bf:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00141c2:	83 ec 0c             	sub    esp,0xc
c00141c5:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00141c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00141cd:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00141d1:	0f af c2             	imul   eax,edx
c00141d4:	50                   	push   eax
c00141d5:	e8 f1 38 ff ff       	call   c0007acb <malloc>
c00141da:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141dc:	89 34 24             	mov    DWORD PTR [esp],esi
c00141df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141e7:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00141eb:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00141ef:	0f af c2             	imul   eax,edx
c00141f2:	99                   	cdq    
c00141f3:	52                   	push   edx
c00141f4:	50                   	push   eax
c00141f5:	53                   	push   ebx
c00141f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141f9:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00141fc:	83 c4 20             	add    esp,0x20
c00141ff:	85 c0                	test   eax,eax
c0014201:	0f 84 35 06 00 00    	je     c001483c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x728>
c0014207:	52                   	push   edx
c0014208:	31 d2                	xor    edx,edx
c001420a:	52                   	push   edx
c001420b:	50                   	push   eax
c001420c:	53                   	push   ebx
c001420d:	e8 22 71 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c0014212:	83 c4 10             	add    esp,0x10
c0014215:	85 c0                	test   eax,eax
c0014217:	0f 85 1f 06 00 00    	jne    c001483c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x728>
c001421d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014221:	83 ec 0c             	sub    esp,0xc
c0014224:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014228:	0f af c2             	imul   eax,edx
c001422b:	50                   	push   eax
c001422c:	e8 9a 38 ff ff       	call   c0007acb <malloc>
c0014231:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014233:	89 34 24             	mov    DWORD PTR [esp],esi
c0014236:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001423a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001423e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014242:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014246:	0f af c2             	imul   eax,edx
c0014249:	99                   	cdq    
c001424a:	52                   	push   edx
c001424b:	50                   	push   eax
c001424c:	53                   	push   ebx
c001424d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014250:	83 c4 20             	add    esp,0x20
c0014253:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014259:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001425c:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014260:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014264:	73 78                	jae    c00142de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014266:	c1 e7 05             	shl    edi,0x5
c0014269:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001426d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014270:	75 63                	jne    c00142d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014272:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014275:	31 d2                	xor    edx,edx
c0014277:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c001427a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001427e:	50                   	push   eax
c001427f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014282:	52                   	push   edx
c0014283:	50                   	push   eax
c0014284:	53                   	push   ebx
c0014285:	e8 aa 70 ff ff       	call   c000b334 <File::seek(unsigned long long)>
c001428a:	83 c4 10             	add    esp,0x10
c001428d:	85 c0                	test   eax,eax
c001428f:	0f 85 a7 05 00 00    	jne    c001483c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x728>
c0014295:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001429c:	83 ec 0c             	sub    esp,0xc
c001429f:	31 d2                	xor    edx,edx
c00142a1:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00142a5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00142a7:	01 c6                	add    esi,eax
c00142a9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00142b0:	50                   	push   eax
c00142b1:	56                   	push   esi
c00142b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142b6:	52                   	push   edx
c00142b7:	50                   	push   eax
c00142b8:	53                   	push   ebx
c00142b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142bc:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00142bf:	83 c4 1c             	add    esp,0x1c
c00142c2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00142c5:	50                   	push   eax
c00142c6:	6a 00                	push   0x0
c00142c8:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00142cc:	56                   	push   esi
c00142cd:	e8 1e c2 fe ff       	call   c00004f0 <memset>
c00142d2:	83 c4 10             	add    esp,0x10
c00142d5:	66 ff 04 24          	inc    WORD PTR [esp]
c00142d9:	e9 7b ff ff ff       	jmp    c0014259 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00142de:	50                   	push   eax
c00142df:	68 00 01 00 00       	push   0x100
c00142e4:	6a 00                	push   0x0
c00142e6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00142ea:	50                   	push   eax
c00142eb:	e8 00 c2 fe ff       	call   c00004f0 <memset>
c00142f0:	83 c4 0c             	add    esp,0xc
c00142f3:	68 00 01 00 00       	push   0x100
c00142f8:	6a 00                	push   0x0
c00142fa:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014301:	50                   	push   eax
c0014302:	e8 e9 c1 fe ff       	call   c00004f0 <memset>
c0014307:	83 c4 10             	add    esp,0x10
c001430a:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014311:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014318:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014320:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014328:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014330:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014338:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001433c:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014340:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014345:	0f 83 16 01 00 00    	jae    c0014461 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001434b:	6b ff 28             	imul   edi,edi,0x28
c001434e:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014352:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014355:	51                   	push   ecx
c0014356:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001435a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001435e:	8b 07                	mov    eax,DWORD PTR [edi]
c0014360:	6b d2 28             	imul   edx,edx,0x28
c0014363:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014367:	31 d2                	xor    edx,edx
c0014369:	52                   	push   edx
c001436a:	50                   	push   eax
c001436b:	53                   	push   ebx
c001436c:	e8 c3 6f ff ff       	call   c000b334 <File::seek(unsigned long long)>
c0014371:	83 c4 0c             	add    esp,0xc
c0014374:	6a 20                	push   0x20
c0014376:	6a 00                	push   0x0
c0014378:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001437f:	51                   	push   ecx
c0014380:	e8 6b c1 fe ff       	call   c00004f0 <memset>
c0014385:	58                   	pop    eax
c0014386:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014388:	8d 54 24 58          	lea    edx,[esp+0x58]
c001438c:	52                   	push   edx
c001438d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014394:	51                   	push   ecx
c0014395:	6a 00                	push   0x0
c0014397:	6a 1f                	push   0x1f
c0014399:	53                   	push   ebx
c001439a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001439d:	83 c4 1c             	add    esp,0x1c
c00143a0:	6a 09                	push   0x9
c00143a2:	68 13 18 02 c0       	push   0xc0021813
c00143a7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00143ae:	51                   	push   ecx
c00143af:	e8 cc bf fe ff       	call   c0000380 <memcmp>
c00143b4:	83 c4 10             	add    esp,0x10
c00143b7:	85 c0                	test   eax,eax
c00143b9:	75 1a                	jne    c00143d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00143bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00143be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00143c1:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00143c5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00143c8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00143cf:	89 d0                	mov    eax,edx
c00143d1:	40                   	inc    eax
c00143d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00143d5:	52                   	push   edx
c00143d6:	6a 09                	push   0x9
c00143d8:	68 1d 18 02 c0       	push   0xc002181d
c00143dd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143e4:	50                   	push   eax
c00143e5:	e8 96 bf fe ff       	call   c0000380 <memcmp>
c00143ea:	83 c4 10             	add    esp,0x10
c00143ed:	85 c0                	test   eax,eax
c00143ef:	75 1a                	jne    c001440b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00143f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00143f4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00143f7:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00143fb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00143fe:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014405:	89 d0                	mov    eax,edx
c0014407:	40                   	inc    eax
c0014408:	89 04 24             	mov    DWORD PTR [esp],eax
c001440b:	50                   	push   eax
c001440c:	50                   	push   eax
c001440d:	68 e9 17 02 c0       	push   0xc00217e9
c0014412:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014419:	50                   	push   eax
c001441a:	e8 61 c3 fe ff       	call   c0000780 <strcmp>
c001441f:	83 c4 10             	add    esp,0x10
c0014422:	85 c0                	test   eax,eax
c0014424:	75 0b                	jne    c0014431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014426:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001442a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001442d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014431:	50                   	push   eax
c0014432:	50                   	push   eax
c0014433:	68 f1 17 02 c0       	push   0xc00217f1
c0014438:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001443f:	50                   	push   eax
c0014440:	e8 3b c3 fe ff       	call   c0000780 <strcmp>
c0014445:	83 c4 10             	add    esp,0x10
c0014448:	85 c0                	test   eax,eax
c001444a:	75 0b                	jne    c0014457 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c001444c:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014450:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014453:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014457:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c001445c:	e9 d7 fe ff ff       	jmp    c0014338 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014461:	50                   	push   eax
c0014462:	31 d2                	xor    edx,edx
c0014464:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014468:	52                   	push   edx
c0014469:	50                   	push   eax
c001446a:	53                   	push   ebx
c001446b:	e8 c4 6e ff ff       	call   c000b334 <File::seek(unsigned long long)>
c0014470:	58                   	pop    eax
c0014471:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014475:	e8 51 36 ff ff       	call   c0007acb <malloc>
c001447a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001447c:	31 d2                	xor    edx,edx
c001447e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014482:	58                   	pop    eax
c0014483:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014487:	56                   	push   esi
c0014488:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001448c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014490:	52                   	push   edx
c0014491:	50                   	push   eax
c0014492:	53                   	push   ebx
c0014493:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014496:	83 c4 14             	add    esp,0x14
c0014499:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001449d:	e8 29 36 ff ff       	call   c0007acb <malloc>
c00144a2:	31 d2                	xor    edx,edx
c00144a4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00144a8:	83 c4 0c             	add    esp,0xc
c00144ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144af:	52                   	push   edx
c00144b0:	50                   	push   eax
c00144b1:	53                   	push   ebx
c00144b2:	e8 7d 6e ff ff       	call   c000b334 <File::seek(unsigned long long)>
c00144b7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00144b9:	31 d2                	xor    edx,edx
c00144bb:	89 34 24             	mov    DWORD PTR [esp],esi
c00144be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00144c6:	52                   	push   edx
c00144c7:	50                   	push   eax
c00144c8:	53                   	push   ebx
c00144c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144cc:	83 c4 20             	add    esp,0x20
c00144cf:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00144d4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00144dc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00144e0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00144e4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00144e7:	0f 84 53 03 00 00    	je     c0014840 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72c>
c00144ed:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00144f4:	31 d2                	xor    edx,edx
c00144f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00144fa:	c1 e8 03             	shr    eax,0x3
c00144fd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014501:	51                   	push   ecx
c0014502:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014506:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001450a:	52                   	push   edx
c001450b:	50                   	push   eax
c001450c:	53                   	push   ebx
c001450d:	e8 22 6e ff ff       	call   c000b334 <File::seek(unsigned long long)>
c0014512:	5e                   	pop    esi
c0014513:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014517:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001451e:	e8 a8 35 ff ff       	call   c0007acb <malloc>
c0014523:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014525:	31 d2                	xor    edx,edx
c0014527:	89 c7                	mov    edi,eax
c0014529:	58                   	pop    eax
c001452a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001452e:	50                   	push   eax
c001452f:	57                   	push   edi
c0014530:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014534:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001453b:	52                   	push   edx
c001453c:	50                   	push   eax
c001453d:	53                   	push   ebx
c001453e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014541:	83 c4 20             	add    esp,0x20
c0014544:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001454c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014550:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
c0014554:	0f 8d cd 02 00 00    	jge    c0014827 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x713>
c001455a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001455e:	83 ec 0c             	sub    esp,0xc
c0014561:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014564:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014568:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001456c:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014570:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014574:	c1 e8 08             	shr    eax,0x8
c0014577:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001457b:	89 c2                	mov    edx,eax
c001457d:	c1 e2 04             	shl    edx,0x4
c0014580:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
c0014584:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014587:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001458b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001458f:	56                   	push   esi
c0014590:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014594:	03 02                	add    eax,DWORD PTR [edx]
c0014596:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c001459a:	50                   	push   eax
c001459b:	68 27 18 02 c0       	push   0xc0021827
c00145a0:	e8 97 63 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00145a5:	83 c4 20             	add    esp,0x20
c00145a8:	85 f6                	test   esi,esi
c00145aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00145ae:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c00145b3:	0f 85 cf 00 00 00    	jne    c0014688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x574>
c00145b9:	83 ec 0c             	sub    esp,0xc
c00145bc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00145c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c4:	03 02                	add    eax,DWORD PTR [edx]
c00145c6:	50                   	push   eax
c00145c7:	e8 3b f8 ff ff       	call   c0013e07 <Thr::getAddressOfKernelSymbol(char const*)>
c00145cc:	83 c4 10             	add    esp,0x10
c00145cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00145d3:	c6 44 24 20 01       	mov    BYTE PTR [esp+0x20],0x1
c00145d8:	85 c0                	test   eax,eax
c00145da:	89 c6                	mov    esi,eax
c00145dc:	0f 85 a6 00 00 00    	jne    c0014688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x574>
c00145e2:	83 ec 0c             	sub    esp,0xc
c00145e5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00145e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ed:	03 02                	add    eax,DWORD PTR [edx]
c00145ef:	50                   	push   eax
c00145f0:	e8 33 c7 ff ff       	call   c0010d28 <KeResolveCompatibilitySymbol(char*)>
c00145f5:	83 c4 10             	add    esp,0x10
c00145f8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00145fc:	85 c0                	test   eax,eax
c00145fe:	89 c6                	mov    esi,eax
c0014600:	0f 85 82 00 00 00    	jne    c0014688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x574>
c0014606:	50                   	push   eax
c0014607:	50                   	push   eax
c0014608:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001460c:	03 02                	add    eax,DWORD PTR [edx]
c001460e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0014612:	50                   	push   eax
c0014613:	68 59 18 02 c0       	push   0xc0021859
c0014618:	e8 1f 63 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001461d:	58                   	pop    eax
c001461e:	5a                   	pop    edx
c001461f:	68 73 18 02 c0       	push   0xc0021873
c0014624:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001462b:	51                   	push   ecx
c001462c:	e8 1f c0 fe ff       	call   c0000650 <strcpy>
c0014631:	59                   	pop    ecx
c0014632:	58                   	pop    eax
c0014633:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014637:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001463b:	03 02                	add    eax,DWORD PTR [edx]
c001463d:	50                   	push   eax
c001463e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014645:	51                   	push   ecx
c0014646:	e8 25 c2 fe ff       	call   c0000870 <strcat>
c001464b:	58                   	pop    eax
c001464c:	5a                   	pop    edx
c001464d:	68 09 19 02 c0       	push   0xc0021909
c0014652:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014659:	51                   	push   ecx
c001465a:	e8 11 c2 fe ff       	call   c0000870 <strcat>
c001465f:	83 c4 10             	add    esp,0x10
c0014662:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014667:	0f 84 77 01 00 00    	je     c00147e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d0>
c001466d:	83 ec 0c             	sub    esp,0xc
c0014670:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014677:	51                   	push   ecx
c0014678:	e8 c0 c4 ff ff       	call   c0010b3d <KePanic(char const*)>
c001467d:	83 c4 10             	add    esp,0x10
c0014680:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014684:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0014688:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001468d:	83 f8 01             	cmp    eax,0x1
c0014690:	0f 85 9b 00 00 00    	jne    c0014731 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61d>
c0014696:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001469a:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00146a1:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00146a5:	01 d0                	add    eax,edx
c00146a7:	81 7c 24 0c 01 01 00 00 	cmp    DWORD PTR [esp+0xc],0x101
c00146af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146b3:	0f 94 c0             	sete   al
c00146b6:	81 7c 24 0c 01 04 00 00 	cmp    DWORD PTR [esp+0xc],0x401
c00146be:	0f 94 c1             	sete   cl
c00146c1:	09 c1                	or     ecx,eax
c00146c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00146c7:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c00146cc:	0f b6 c9             	movzx  ecx,cl
c00146cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00146d1:	74 41                	je     c0014714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x600>
c00146d3:	8d 14 06             	lea    edx,[esi+eax*1]
c00146d6:	85 c9                	test   ecx,ecx
c00146d8:	75 15                	jne    c00146ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00146da:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00146de:	66 83 f8 0c          	cmp    ax,0xc
c00146e2:	76 05                	jbe    c00146e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d5>
c00146e4:	b8 0c 00 00 00       	mov    eax,0xc
c00146e9:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00146ed:	76 37                	jbe    c0014726 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x612>
c00146ef:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00146f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00146f8:	0f 84 e6 00 00 00    	je     c00147e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d0>
c00146fe:	83 ec 0c             	sub    esp,0xc
c0014701:	68 8a 18 02 c0       	push   0xc002188a
c0014706:	e8 32 c4 ff ff       	call   c0010b3d <KePanic(char const*)>
c001470b:	83 c4 10             	add    esp,0x10
c001470e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014712:	eb 12                	jmp    c0014726 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x612>
c0014714:	01 c2                	add    edx,eax
c0014716:	85 c9                	test   ecx,ecx
c0014718:	75 0c                	jne    c0014726 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x612>
c001471a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001471e:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014722:	77 02                	ja     c0014726 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x612>
c0014724:	01 f2                	add    edx,esi
c0014726:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001472a:	89 10                	mov    DWORD PTR [eax],edx
c001472c:	e9 ed 00 00 00       	jmp    c001481e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70a>
c0014731:	83 f8 02             	cmp    eax,0x2
c0014734:	0f 85 81 00 00 00    	jne    c00147bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a7>
c001473a:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014741:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014745:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014749:	81 7c 24 0c 01 01 00 00 	cmp    DWORD PTR [esp+0xc],0x101
c0014751:	74 21                	je     c0014774 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0014753:	81 7c 24 0c 01 04 00 00 	cmp    DWORD PTR [esp+0xc],0x401
c001475b:	74 17                	je     c0014774 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001475d:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014761:	ba 0a 00 00 00       	mov    edx,0xa
c0014766:	83 f9 0e             	cmp    ecx,0xe
c0014769:	77 03                	ja     c001476e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65a>
c001476b:	8d 51 fc             	lea    edx,[ecx-0x4]
c001476e:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014772:	76 1f                	jbe    c0014793 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014774:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014779:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001477d:	74 65                	je     c00147e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d0>
c001477f:	83 ec 0c             	sub    esp,0xc
c0014782:	68 a6 18 02 c0       	push   0xc00218a6
c0014787:	e8 b1 c3 ff ff       	call   c0010b3d <KePanic(char const*)>
c001478c:	83 c4 10             	add    esp,0x10
c001478f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014793:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c0014798:	8b 10                	mov    edx,DWORD PTR [eax]
c001479a:	74 15                	je     c00147b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x69d>
c001479c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00147a0:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00147a7:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00147ab:	01 d1                	add    ecx,edx
c00147ad:	01 ce                	add    esi,ecx
c00147af:	eb 06                	jmp    c00147b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a3>
c00147b1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00147b5:	01 d6                	add    esi,edx
c00147b7:	89 30                	mov    DWORD PTR [eax],esi
c00147b9:	eb 63                	jmp    c001481e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70a>
c00147bb:	56                   	push   esi
c00147bc:	56                   	push   esi
c00147bd:	50                   	push   eax
c00147be:	68 c2 18 02 c0       	push   0xc00218c2
c00147c3:	e8 74 61 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00147c8:	83 c4 10             	add    esp,0x10
c00147cb:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00147d0:	74 12                	je     c00147e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d0>
c00147d2:	83 ec 0c             	sub    esp,0xc
c00147d5:	68 cd 18 02 c0       	push   0xc00218cd
c00147da:	e8 5e c3 ff ff       	call   c0010b3d <KePanic(char const*)>
c00147df:	83 c4 10             	add    esp,0x10
c00147e2:	eb 3a                	jmp    c001481e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70a>
c00147e4:	83 ec 0c             	sub    esp,0xc
c00147e7:	53                   	push   ebx
c00147e8:	e8 e7 6a ff ff       	call   c000b2d4 <File::close()>
c00147ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00147f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147f8:	e8 de 32 ff ff       	call   c0007adb <free>
c00147fd:	59                   	pop    ecx
c00147fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014802:	e8 d4 32 ff ff       	call   c0007adb <free>
c0014807:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001480a:	e8 cc 32 ff ff       	call   c0007adb <free>
c001480f:	5b                   	pop    ebx
c0014810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014814:	e8 c2 32 ff ff       	call   c0007adb <free>
c0014819:	83 c4 10             	add    esp,0x10
c001481c:	eb 1e                	jmp    c001483c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x728>
c001481e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014822:	e9 25 fd ff ff       	jmp    c001454c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014827:	83 ec 0c             	sub    esp,0xc
c001482a:	57                   	push   edi
c001482b:	e8 ab 32 ff ff       	call   c0007adb <free>
c0014830:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014834:	83 c4 10             	add    esp,0x10
c0014837:	e9 a4 fc ff ff       	jmp    c00144e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c001483c:	31 c0                	xor    eax,eax
c001483e:	eb 32                	jmp    c0014872 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75e>
c0014840:	83 ec 0c             	sub    esp,0xc
c0014843:	53                   	push   ebx
c0014844:	e8 8b 6a ff ff       	call   c000b2d4 <File::close()>
c0014849:	8b 03                	mov    eax,DWORD PTR [ebx]
c001484b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001484e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014851:	58                   	pop    eax
c0014852:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014856:	e8 80 32 ff ff       	call   c0007adb <free>
c001485b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001485e:	e8 78 32 ff ff       	call   c0007adb <free>
c0014863:	5a                   	pop    edx
c0014864:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014868:	e8 6e 32 ff ff       	call   c0007adb <free>
c001486d:	83 c4 10             	add    esp,0x10
c0014870:	b0 01                	mov    al,0x1
c0014872:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014878:	5b                   	pop    ebx
c0014879:	5e                   	pop    esi
c001487a:	5f                   	pop    edi
c001487b:	5d                   	pop    ebp
c001487c:	c3                   	ret    

c001487d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001487d:	56                   	push   esi
c001487e:	31 d2                	xor    edx,edx
c0014880:	53                   	push   ebx
c0014881:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014887:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001488b:	39 d3                	cmp    ebx,edx
c001488d:	7e 1b                	jle    c00148aa <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001488f:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014896:	39 c8                	cmp    eax,ecx
c0014898:	77 0d                	ja     c00148a7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001489a:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c00148a1:	01 c6                	add    esi,eax
c00148a3:	39 ce                	cmp    esi,ecx
c00148a5:	77 05                	ja     c00148ac <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00148a7:	42                   	inc    edx
c00148a8:	eb e1                	jmp    c001488b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00148aa:	31 c0                	xor    eax,eax
c00148ac:	5b                   	pop    ebx
c00148ad:	5e                   	pop    esi
c00148ae:	c3                   	ret    

c00148af <Thr::getDriverNameFromAddress(unsigned long)>:
c00148af:	53                   	push   ebx
c00148b0:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c00148b6:	31 c0                	xor    eax,eax
c00148b8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00148bc:	39 c3                	cmp    ebx,eax
c00148be:	7e 22                	jle    c00148e2 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00148c0:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c00148c7:	39 ca                	cmp    edx,ecx
c00148c9:	77 14                	ja     c00148df <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00148cb:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c00148d2:	39 ca                	cmp    edx,ecx
c00148d4:	76 09                	jbe    c00148df <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00148d6:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c00148dd:	eb 05                	jmp    c00148e4 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00148df:	40                   	inc    eax
c00148e0:	eb da                	jmp    c00148bc <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00148e2:	31 c0                	xor    eax,eax
c00148e4:	5b                   	pop    ebx
c00148e5:	c3                   	ret    

c00148e6 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00148e6:	53                   	push   ebx
c00148e7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00148eb:	53                   	push   ebx
c00148ec:	e8 8c ff ff ff       	call   c001487d <Thr::getDriverBaseFromAddress(unsigned long)>
c00148f1:	5a                   	pop    edx
c00148f2:	31 d2                	xor    edx,edx
c00148f4:	85 c0                	test   eax,eax
c00148f6:	74 04                	je     c00148fc <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00148f8:	89 da                	mov    edx,ebx
c00148fa:	29 c2                	sub    edx,eax
c00148fc:	5b                   	pop    ebx
c00148fd:	89 d0                	mov    eax,edx
c00148ff:	c3                   	ret    

c0014900 <Thr::loadDLL(char const*, bool)>:
c0014900:	55                   	push   ebp
c0014901:	57                   	push   edi
c0014902:	56                   	push   esi
c0014903:	53                   	push   ebx
c0014904:	81 ec 34 01 00 00    	sub    esp,0x134
c001490a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014911:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014918:	56                   	push   esi
c0014919:	68 e5 18 02 c0       	push   0xc00218e5
c001491e:	e8 19 60 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0014923:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001492a:	e8 9c 31 ff ff       	call   c0007acb <malloc>
c001492f:	83 c4 0c             	add    esp,0xc
c0014932:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014938:	56                   	push   esi
c0014939:	50                   	push   eax
c001493a:	89 c3                	mov    ebx,eax
c001493c:	e8 79 68 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c0014941:	83 c4 10             	add    esp,0x10
c0014944:	85 db                	test   ebx,ebx
c0014946:	75 3c                	jne    c0014984 <Thr::loadDLL(char const*, bool)+0x84>
c0014948:	89 e8                	mov    eax,ebp
c001494a:	84 c0                	test   al,al
c001494c:	0f 84 e1 01 00 00    	je     c0014b33 <Thr::loadDLL(char const*, bool)+0x233>
c0014952:	50                   	push   eax
c0014953:	50                   	push   eax
c0014954:	68 f6 18 02 c0       	push   0xc00218f6
c0014959:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001495d:	57                   	push   edi
c001495e:	e8 ed bc fe ff       	call   c0000650 <strcpy>
c0014963:	58                   	pop    eax
c0014964:	5a                   	pop    edx
c0014965:	56                   	push   esi
c0014966:	57                   	push   edi
c0014967:	e8 04 bf fe ff       	call   c0000870 <strcat>
c001496c:	59                   	pop    ecx
c001496d:	58                   	pop    eax
c001496e:	68 09 19 02 c0       	push   0xc0021909
c0014973:	57                   	push   edi
c0014974:	e8 f7 be fe ff       	call   c0000870 <strcat>
c0014979:	89 3c 24             	mov    DWORD PTR [esp],edi
c001497c:	e8 bc c1 ff ff       	call   c0010b3d <KePanic(char const*)>
c0014981:	83 c4 10             	add    esp,0x10
c0014984:	50                   	push   eax
c0014985:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014989:	50                   	push   eax
c001498a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001498e:	50                   	push   eax
c001498f:	53                   	push   ebx
c0014990:	e8 8d 6b ff ff       	call   c000b522 <File::stat(unsigned long long*, bool*)>
c0014995:	83 c4 10             	add    esp,0x10
c0014998:	85 db                	test   ebx,ebx
c001499a:	74 0c                	je     c00149a8 <Thr::loadDLL(char const*, bool)+0xa8>
c001499c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001499e:	83 ec 0c             	sub    esp,0xc
c00149a1:	53                   	push   ebx
c00149a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00149a5:	83 c4 10             	add    esp,0x10
c00149a8:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00149ad:	75 0a                	jne    c00149b9 <Thr::loadDLL(char const*, bool)+0xb9>
c00149af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149b3:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00149b7:	75 3e                	jne    c00149f7 <Thr::loadDLL(char const*, bool)+0xf7>
c00149b9:	89 e8                	mov    eax,ebp
c00149bb:	31 db                	xor    ebx,ebx
c00149bd:	84 c0                	test   al,al
c00149bf:	0f 84 6e 01 00 00    	je     c0014b33 <Thr::loadDLL(char const*, bool)+0x233>
c00149c5:	50                   	push   eax
c00149c6:	50                   	push   eax
c00149c7:	68 f6 18 02 c0       	push   0xc00218f6
c00149cc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00149d0:	53                   	push   ebx
c00149d1:	e8 7a bc fe ff       	call   c0000650 <strcpy>
c00149d6:	58                   	pop    eax
c00149d7:	5a                   	pop    edx
c00149d8:	56                   	push   esi
c00149d9:	53                   	push   ebx
c00149da:	e8 91 be fe ff       	call   c0000870 <strcat>
c00149df:	59                   	pop    ecx
c00149e0:	5f                   	pop    edi
c00149e1:	68 09 19 02 c0       	push   0xc0021909
c00149e6:	53                   	push   ebx
c00149e7:	e8 84 be fe ff       	call   c0000870 <strcat>
c00149ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149ef:	e8 49 c1 ff ff       	call   c0010b3d <KePanic(char const*)>
c00149f4:	83 c4 10             	add    esp,0x10
c00149f7:	53                   	push   ebx
c00149f8:	6a 03                	push   0x3
c00149fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014a02:	05 ff 0f 00 00       	add    eax,0xfff
c0014a07:	83 d2 00             	adc    edx,0x0
c0014a0a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014a0e:	50                   	push   eax
c0014a0f:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014a15:	e8 de 53 ff ff       	call   c0009df8 <VAS::allocatePages(int, int)>
c0014a1a:	89 c3                	mov    ebx,eax
c0014a1c:	58                   	pop    eax
c0014a1d:	5a                   	pop    edx
c0014a1e:	53                   	push   ebx
c0014a1f:	68 32 00 02 c0       	push   0xc0020032
c0014a24:	e8 13 5f ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0014a29:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a2c:	e8 4f bb fe ff       	call   c0000580 <strlen>
c0014a31:	8b 3d a0 79 02 c0    	mov    edi,DWORD PTR ds:0xc00279a0
c0014a37:	40                   	inc    eax
c0014a38:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a3b:	e8 8b 30 ff ff       	call   c0007acb <malloc>
c0014a40:	59                   	pop    ecx
c0014a41:	89 04 bd c0 7d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8240],eax
c0014a48:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014a4d:	5f                   	pop    edi
c0014a4e:	56                   	push   esi
c0014a4f:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c0014a56:	e8 f5 bb fe ff       	call   c0000650 <strcpy>
c0014a5b:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014a60:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c0014a67:	8d 50 01             	lea    edx,[eax+0x1]
c0014a6a:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c0014a70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a74:	83 c4 0c             	add    esp,0xc
c0014a77:	6a 01                	push   0x1
c0014a79:	53                   	push   ebx
c0014a7a:	56                   	push   esi
c0014a7b:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c0014a82:	e8 8d f6 ff ff       	call   c0014114 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014a87:	83 c4 10             	add    esp,0x10
c0014a8a:	89 c7                	mov    edi,eax
c0014a8c:	89 f8                	mov    eax,edi
c0014a8e:	83 f0 01             	xor    eax,0x1
c0014a91:	84 c0                	test   al,al
c0014a93:	74 18                	je     c0014aad <Thr::loadDLL(char const*, bool)+0x1ad>
c0014a95:	89 e8                	mov    eax,ebp
c0014a97:	84 c0                	test   al,al
c0014a99:	74 12                	je     c0014aad <Thr::loadDLL(char const*, bool)+0x1ad>
c0014a9b:	83 ec 0c             	sub    esp,0xc
c0014a9e:	68 0b 19 02 c0       	push   0xc002190b
c0014aa3:	e8 95 c0 ff ff       	call   c0010b3d <KePanic(char const*)>
c0014aa8:	83 c4 10             	add    esp,0x10
c0014aab:	eb 06                	jmp    c0014ab3 <Thr::loadDLL(char const*, bool)+0x1b3>
c0014aad:	89 f8                	mov    eax,edi
c0014aaf:	84 c0                	test   al,al
c0014ab1:	75 10                	jne    c0014ac3 <Thr::loadDLL(char const*, bool)+0x1c3>
c0014ab3:	83 ec 0c             	sub    esp,0xc
c0014ab6:	68 2a 19 02 c0       	push   0xc002192a
c0014abb:	e8 7d c0 ff ff       	call   c0010b3d <KePanic(char const*)>
c0014ac0:	83 c4 10             	add    esp,0x10
c0014ac3:	31 f6                	xor    esi,esi
c0014ac5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ac9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014acd:	05 ff 0f 00 00       	add    eax,0xfff
c0014ad2:	83 d2 00             	adc    edx,0x0
c0014ad5:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014ad9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014add:	c1 ea 0c             	shr    edx,0xc
c0014ae0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014ae4:	ba 00 00 00 00       	mov    edx,0x0
c0014ae9:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0014aed:	89 d0                	mov    eax,edx
c0014aef:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014af3:	73 32                	jae    c0014b27 <Thr::loadDLL(char const*, bool)+0x227>
c0014af5:	50                   	push   eax
c0014af6:	50                   	push   eax
c0014af7:	89 f0                	mov    eax,esi
c0014af9:	c1 e0 0c             	shl    eax,0xc
c0014afc:	01 d8                	add    eax,ebx
c0014afe:	50                   	push   eax
c0014aff:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014b05:	e8 d2 4d ff ff       	call   c00098dc <VAS::getPageTableEntry(unsigned long)>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b0f:	a8 60                	test   al,0x60
c0014b11:	75 11                	jne    c0014b24 <Thr::loadDLL(char const*, bool)+0x224>
c0014b13:	83 ec 0c             	sub    esp,0xc
c0014b16:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b1b:	50                   	push   eax
c0014b1c:	e8 4b 32 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c0014b21:	83 c4 10             	add    esp,0x10
c0014b24:	46                   	inc    esi
c0014b25:	eb 9e                	jmp    c0014ac5 <Thr::loadDLL(char const*, bool)+0x1c5>
c0014b27:	89 f8                	mov    eax,edi
c0014b29:	84 c0                	test   al,al
c0014b2b:	b8 00 00 00 00       	mov    eax,0x0
c0014b30:	0f 44 d8             	cmove  ebx,eax
c0014b33:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014b39:	89 d8                	mov    eax,ebx
c0014b3b:	5b                   	pop    ebx
c0014b3c:	5e                   	pop    esi
c0014b3d:	5f                   	pop    edi
c0014b3e:	5d                   	pop    ebp
c0014b3f:	c3                   	ret    

c0014b40 <Thr::executeDLL(unsigned long, void*)>:
c0014b40:	56                   	push   esi
c0014b41:	53                   	push   ebx
c0014b42:	52                   	push   edx
c0014b43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b47:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b4b:	85 db                	test   ebx,ebx
c0014b4d:	75 10                	jne    c0014b5f <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014b4f:	83 ec 0c             	sub    esp,0xc
c0014b52:	68 46 19 02 c0       	push   0xc0021946
c0014b57:	e8 e1 bf ff ff       	call   c0010b3d <KePanic(char const*)>
c0014b5c:	83 c4 10             	add    esp,0x10
c0014b5f:	50                   	push   eax
c0014b60:	50                   	push   eax
c0014b61:	53                   	push   ebx
c0014b62:	68 70 19 02 c0       	push   0xc0021970
c0014b67:	e8 d0 5d ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0014b6c:	89 d8                	mov    eax,ebx
c0014b6e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014b72:	83 c4 14             	add    esp,0x14
c0014b75:	5b                   	pop    ebx
c0014b76:	5e                   	pop    esi
c0014b77:	ff e0                	jmp    eax
c0014b79:	66 90                	xchg   ax,ax
c0014b7b:	90                   	nop

c0014b7c <userModeEntryPoint(void*)>:
c0014b7c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014b81:	83 e8 01             	sub    eax,0x1
c0014b84:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0014b89:	75 01                	jne    c0014b8c <userModeEntryPoint(void*)+0x10>
c0014b8b:	fb                   	sti    
c0014b8c:	fb                   	sti    
c0014b8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014b95:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014b9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b9f:	e9 9b b6 fe ff       	jmp    c000023f <goToUsermode>

c0014ba4 <changeTSS>:
c0014ba4:	83 ec 14             	sub    esp,0x14
c0014ba7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bac:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014baf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014bb4:	c1 e2 15             	shl    edx,0x15
c0014bb7:	29 d0                	sub    eax,edx
c0014bb9:	50                   	push   eax
c0014bba:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014bbf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bc5:	05 7c 11 00 00       	add    eax,0x117c
c0014bca:	50                   	push   eax
c0014bcb:	e8 60 43 ff ff       	call   c0008f30 <TSS::setESP(unsigned long)>
c0014bd0:	83 c4 1c             	add    esp,0x1c
c0014bd3:	c3                   	ret    

c0014bd4 <switchToThread(ThreadControlBlock*)>:
c0014bd4:	57                   	push   edi
c0014bd5:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0014bdb:	56                   	push   esi
c0014bdc:	53                   	push   ebx
c0014bdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014be1:	85 c9                	test   ecx,ecx
c0014be3:	0f 85 8b 00 00 00    	jne    c0014c74 <switchToThread(ThreadControlBlock*)+0xa0>
c0014be9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014bed:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014bf3:	74 7b                	je     c0014c70 <switchToThread(ThreadControlBlock*)+0x9c>
c0014bf5:	b8 00 04 00 00       	mov    eax,0x400
c0014bfa:	29 d0                	sub    eax,edx
c0014bfc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014bff:	d1 f8                	sar    eax,1
c0014c01:	01 d0                	add    eax,edx
c0014c03:	90                   	nop
c0014c04:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014c07:	e8 04 28 00 00       	call   c0017410 <HalQueryPerformanceCounter()>
c0014c0c:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c0014c11:	89 c6                	mov    esi,eax
c0014c13:	89 d7                	mov    edi,edx
c0014c15:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c0014c1b:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c0014c20:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014c26:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014c2c:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c0014c32:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014c38:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c0014c3e:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014c44:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014c47:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014c4a:	01 c6                	add    esi,eax
c0014c4c:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014c4f:	11 d7                	adc    edi,edx
c0014c51:	83 ec 0c             	sub    esp,0xc
c0014c54:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014c57:	53                   	push   ebx
c0014c58:	e8 1a b6 fe ff       	call   c0000277 <switchToThreadASM>
c0014c5d:	0f 20 c0             	mov    eax,cr0
c0014c60:	83 c8 08             	or     eax,0x8
c0014c63:	0f 22 c0             	mov    cr0,eax
c0014c66:	83 c4 10             	add    esp,0x10
c0014c69:	5b                   	pop    ebx
c0014c6a:	5e                   	pop    esi
c0014c6b:	5f                   	pop    edi
c0014c6c:	c3                   	ret    
c0014c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c70:	31 c0                	xor    eax,eax
c0014c72:	eb 90                	jmp    c0014c04 <switchToThread(ThreadControlBlock*)+0x30>
c0014c74:	5b                   	pop    ebx
c0014c75:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014c7f:	5e                   	pop    esi
c0014c80:	5f                   	pop    edi
c0014c81:	c3                   	ret    
c0014c82:	66 90                	xchg   ax,ax

c0014c84 <Process::addArgs(char**)>:
c0014c84:	57                   	push   edi
c0014c85:	56                   	push   esi
c0014c86:	53                   	push   ebx
c0014c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014c8b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0014c8f:	85 f6                	test   esi,esi
c0014c91:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014c9b:	74 4f                	je     c0014cec <Process::addArgs(char**)+0x68>
c0014c9d:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c9f:	85 c0                	test   eax,eax
c0014ca1:	74 49                	je     c0014cec <Process::addArgs(char**)+0x68>
c0014ca3:	31 db                	xor    ebx,ebx
c0014ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ca8:	83 ec 0c             	sub    esp,0xc
c0014cab:	50                   	push   eax
c0014cac:	e8 cf b8 fe ff       	call   c0000580 <strlen>
c0014cb1:	83 c0 01             	add    eax,0x1
c0014cb4:	89 04 24             	mov    DWORD PTR [esp],eax
c0014cb7:	e8 0f 2e ff ff       	call   c0007acb <malloc>
c0014cbc:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0014cc3:	5a                   	pop    edx
c0014cc4:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0014cc7:	83 c3 01             	add    ebx,0x1
c0014cca:	59                   	pop    ecx
c0014ccb:	52                   	push   edx
c0014ccc:	50                   	push   eax
c0014ccd:	e8 7e b9 fe ff       	call   c0000650 <strcpy>
c0014cd2:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0014cd8:	83 c4 10             	add    esp,0x10
c0014cdb:	83 c1 01             	add    ecx,0x1
c0014cde:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0014ce4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0014ce7:	85 c0                	test   eax,eax
c0014ce9:	75 bd                	jne    c0014ca8 <Process::addArgs(char**)+0x24>
c0014ceb:	90                   	nop
c0014cec:	5b                   	pop    ebx
c0014ced:	5e                   	pop    esi
c0014cee:	5f                   	pop    edi
c0014cef:	c3                   	ret    

c0014cf0 <Process::Process(char const*, Process*, char**)>:
c0014cf0:	56                   	push   esi
c0014cf1:	53                   	push   ebx
c0014cf2:	83 ec 14             	sub    esp,0x14
c0014cf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cf9:	05 0c 02 00 00       	add    eax,0x20c
c0014cfe:	bb 07 00 00 00       	mov    ebx,0x7
c0014d03:	89 c6                	mov    esi,eax
c0014d05:	8d 76 00             	lea    esi,[esi+0x0]
c0014d08:	85 db                	test   ebx,ebx
c0014d0a:	78 14                	js     c0014d20 <Process::Process(char const*, Process*, char**)+0x30>
c0014d0c:	83 ec 0c             	sub    esp,0xc
c0014d0f:	56                   	push   esi
c0014d10:	e8 b3 a5 00 00       	call   c001f2c8 <ThreadControlBlock::ThreadControlBlock()>
c0014d15:	83 c4 10             	add    esp,0x10
c0014d18:	83 c6 5f             	add    esi,0x5f
c0014d1b:	83 eb 01             	sub    ebx,0x1
c0014d1e:	eb e8                	jmp    c0014d08 <Process::Process(char const*, Process*, char**)+0x18>
c0014d20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d24:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014d2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d2f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014d36:	83 ec 0c             	sub    esp,0xc
c0014d39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d3d:	e8 f0 bb ff ff       	call   c0010932 <KeNewProcessEnv(Process*)>
c0014d42:	83 c4 10             	add    esp,0x10
c0014d45:	89 c2                	mov    edx,eax
c0014d47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d4b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d55:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014d5e:	a1 a0 2b 02 c0       	mov    eax,ds:0xc0022ba0
c0014d63:	8d 50 01             	lea    edx,[eax+0x1]
c0014d66:	89 15 a0 2b 02 c0    	mov    DWORD PTR ds:0xc0022ba0,edx
c0014d6c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d70:	89 02                	mov    DWORD PTR [edx],eax
c0014d72:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014d7a:	83 ec 0c             	sub    esp,0xc
c0014d7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d81:	e8 45 2d ff ff       	call   c0007acb <malloc>
c0014d86:	83 c4 10             	add    esp,0x10
c0014d89:	89 c3                	mov    ebx,eax
c0014d8b:	83 ec 08             	sub    esp,0x8
c0014d8e:	6a 00                	push   0x0
c0014d90:	53                   	push   ebx
c0014d91:	e8 cc 52 ff ff       	call   c000a062 <VAS::VAS(bool)>
c0014d96:	83 c4 10             	add    esp,0x10
c0014d99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d9d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014da7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014db1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014db5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014db9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014dbf:	e8 92 c1 ff ff       	call   c0010f56 <KeInitSignals()>
c0014dc4:	89 c2                	mov    edx,eax
c0014dc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dca:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014dd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dd4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014dda:	85 c0                	test   eax,eax
c0014ddc:	74 42                	je     c0014e20 <Process::Process(char const*, Process*, char**)+0x130>
c0014dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014de2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014de8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014dee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014df2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014df8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dfc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e02:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014e08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e0c:	05 0c 01 00 00       	add    eax,0x10c
c0014e11:	83 ec 08             	sub    esp,0x8
c0014e14:	52                   	push   edx
c0014e15:	50                   	push   eax
c0014e16:	e8 35 b8 fe ff       	call   c0000650 <strcpy>
c0014e1b:	83 c4 10             	add    esp,0x10
c0014e1e:	eb 64                	jmp    c0014e84 <Process::Process(char const*, Process*, char**)+0x194>
c0014e20:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014e28:	83 ec 0c             	sub    esp,0xc
c0014e2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e2f:	e8 97 2c ff ff       	call   c0007acb <malloc>
c0014e34:	83 c4 10             	add    esp,0x10
c0014e37:	89 c3                	mov    ebx,eax
c0014e39:	83 ec 08             	sub    esp,0x8
c0014e3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e40:	53                   	push   ebx
c0014e41:	e8 18 3e ff ff       	call   c0008c5e <VgaText::VgaText(char const*)>
c0014e46:	83 c4 10             	add    esp,0x10
c0014e49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e4d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e5d:	83 ec 0c             	sub    esp,0xc
c0014e60:	50                   	push   eax
c0014e61:	e8 a6 36 ff ff       	call   c000850c <addToTerminalCycle(VgaText*)>
c0014e66:	83 c4 10             	add    esp,0x10
c0014e69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e6d:	05 0c 01 00 00       	add    eax,0x10c
c0014e72:	83 ec 08             	sub    esp,0x8
c0014e75:	68 8f 19 02 c0       	push   0xc002198f
c0014e7a:	50                   	push   eax
c0014e7b:	e8 d0 b7 fe ff       	call   c0000650 <strcpy>
c0014e80:	83 c4 10             	add    esp,0x10
c0014e83:	90                   	nop
c0014e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e88:	83 c0 0c             	add    eax,0xc
c0014e8b:	83 ec 08             	sub    esp,0x8
c0014e8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e92:	50                   	push   eax
c0014e93:	e8 b8 b7 fe ff       	call   c0000650 <strcpy>
c0014e98:	83 c4 10             	add    esp,0x10
c0014e9b:	83 ec 08             	sub    esp,0x8
c0014e9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014ea2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ea6:	e8 d9 fd ff ff       	call   c0014c84 <Process::addArgs(char**)>
c0014eab:	83 c4 10             	add    esp,0x10
c0014eae:	83 ec 08             	sub    esp,0x8
c0014eb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014eb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014eb9:	e8 17 ed ff ff       	call   c0013bd5 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014ebe:	83 c4 10             	add    esp,0x10
c0014ec1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014ec5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014ec9:	83 f0 01             	xor    eax,0x1
c0014ecc:	88 c2                	mov    dl,al
c0014ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ed2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014ed8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014edd:	83 ec 04             	sub    esp,0x4
c0014ee0:	50                   	push   eax
c0014ee1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ee5:	68 e8 19 02 c0       	push   0xc00219e8
c0014eea:	e8 4d 5a ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0014eef:	83 c4 10             	add    esp,0x10
c0014ef2:	90                   	nop
c0014ef3:	83 c4 14             	add    esp,0x14
c0014ef6:	5b                   	pop    ebx
c0014ef7:	5e                   	pop    esi
c0014ef8:	c3                   	ret    
c0014ef9:	90                   	nop
c0014efa:	66 90                	xchg   ax,ax

c0014efc <Process::Process(bool, char const*, Process*, char**)>:
c0014efc:	56                   	push   esi
c0014efd:	53                   	push   ebx
c0014efe:	83 ec 24             	sub    esp,0x24
c0014f01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f05:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014f09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f0d:	05 0c 02 00 00       	add    eax,0x20c
c0014f12:	bb 07 00 00 00       	mov    ebx,0x7
c0014f17:	89 c6                	mov    esi,eax
c0014f19:	8d 76 00             	lea    esi,[esi+0x0]
c0014f1c:	85 db                	test   ebx,ebx
c0014f1e:	78 14                	js     c0014f34 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014f20:	83 ec 0c             	sub    esp,0xc
c0014f23:	56                   	push   esi
c0014f24:	e8 9f a3 00 00       	call   c001f2c8 <ThreadControlBlock::ThreadControlBlock()>
c0014f29:	83 c4 10             	add    esp,0x10
c0014f2c:	83 c6 5f             	add    esi,0x5f
c0014f2f:	83 eb 01             	sub    ebx,0x1
c0014f32:	eb e8                	jmp    c0014f1c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014f34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f38:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014f3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f43:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014f4a:	83 ec 0c             	sub    esp,0xc
c0014f4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014f51:	e8 dc b9 ff ff       	call   c0010932 <KeNewProcessEnv(Process*)>
c0014f56:	83 c4 10             	add    esp,0x10
c0014f59:	89 c2                	mov    edx,eax
c0014f5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f5f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014f65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f69:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014f72:	a1 a0 2b 02 c0       	mov    eax,ds:0xc0022ba0
c0014f77:	8d 50 01             	lea    edx,[eax+0x1]
c0014f7a:	89 15 a0 2b 02 c0    	mov    DWORD PTR ds:0xc0022ba0,edx
c0014f80:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014f84:	89 02                	mov    DWORD PTR [edx],eax
c0014f86:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014f8e:	83 ec 0c             	sub    esp,0xc
c0014f91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014f95:	e8 31 2b ff ff       	call   c0007acb <malloc>
c0014f9a:	83 c4 10             	add    esp,0x10
c0014f9d:	89 c3                	mov    ebx,eax
c0014f9f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014fa4:	83 ec 08             	sub    esp,0x8
c0014fa7:	50                   	push   eax
c0014fa8:	53                   	push   ebx
c0014fa9:	e8 b4 50 ff ff       	call   c000a062 <VAS::VAS(bool)>
c0014fae:	83 c4 10             	add    esp,0x10
c0014fb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fb5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014fbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fbf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014fc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fcd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014fd1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014fd7:	e8 7a bf ff ff       	call   c0010f56 <KeInitSignals()>
c0014fdc:	89 c2                	mov    edx,eax
c0014fde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fe2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014fe8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ff2:	85 c0                	test   eax,eax
c0014ff4:	74 42                	je     c0015038 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014ff6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ffa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015000:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015006:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001500a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015010:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015014:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001501a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015020:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015024:	05 0c 01 00 00       	add    eax,0x10c
c0015029:	83 ec 08             	sub    esp,0x8
c001502c:	52                   	push   edx
c001502d:	50                   	push   eax
c001502e:	e8 1d b6 fe ff       	call   c0000650 <strcpy>
c0015033:	83 c4 10             	add    esp,0x10
c0015036:	eb 64                	jmp    c001509c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015038:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015040:	83 ec 0c             	sub    esp,0xc
c0015043:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015047:	e8 7f 2a ff ff       	call   c0007acb <malloc>
c001504c:	83 c4 10             	add    esp,0x10
c001504f:	89 c3                	mov    ebx,eax
c0015051:	83 ec 08             	sub    esp,0x8
c0015054:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015058:	53                   	push   ebx
c0015059:	e8 00 3c ff ff       	call   c0008c5e <VgaText::VgaText(char const*)>
c001505e:	83 c4 10             	add    esp,0x10
c0015061:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015065:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001506b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001506f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015075:	83 ec 0c             	sub    esp,0xc
c0015078:	50                   	push   eax
c0015079:	e8 8e 34 ff ff       	call   c000850c <addToTerminalCycle(VgaText*)>
c001507e:	83 c4 10             	add    esp,0x10
c0015081:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015085:	05 0c 01 00 00       	add    eax,0x10c
c001508a:	83 ec 08             	sub    esp,0x8
c001508d:	68 8f 19 02 c0       	push   0xc002198f
c0015092:	50                   	push   eax
c0015093:	e8 b8 b5 fe ff       	call   c0000650 <strcpy>
c0015098:	83 c4 10             	add    esp,0x10
c001509b:	90                   	nop
c001509c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150a0:	83 c0 0c             	add    eax,0xc
c00150a3:	83 ec 08             	sub    esp,0x8
c00150a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00150aa:	50                   	push   eax
c00150ab:	e8 a0 b5 fe ff       	call   c0000650 <strcpy>
c00150b0:	83 c4 10             	add    esp,0x10
c00150b3:	83 ec 08             	sub    esp,0x8
c00150b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00150ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00150be:	e8 c1 fb ff ff       	call   c0014c84 <Process::addArgs(char**)>
c00150c3:	83 c4 10             	add    esp,0x10
c00150c6:	90                   	nop
c00150c7:	83 c4 24             	add    esp,0x24
c00150ca:	5b                   	pop    ebx
c00150cb:	5e                   	pop    esi
c00150cc:	c3                   	ret    
c00150cd:	8d 76 00             	lea    esi,[esi+0x0]

c00150d0 <taskStartupFunction>:
c00150d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150d5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00150d8:	c3                   	ret    
c00150d9:	90                   	nop
c00150da:	66 90                	xchg   ax,ax

c00150dc <Semaphore::Semaphore(int)>:
c00150dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00150e4:	89 10                	mov    DWORD PTR [eax],edx
c00150e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150ea:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00150f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00150fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015100:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015107:	90                   	nop
c0015108:	c3                   	ret    
c0015109:	90                   	nop
c001510a:	66 90                	xchg   ax,ax

c001510c <Mutex::Mutex()>:
c001510c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015110:	6a 01                	push   0x1
c0015112:	50                   	push   eax
c0015113:	e8 c4 ff ff ff       	call   c00150dc <Semaphore::Semaphore(int)>
c0015118:	83 c4 08             	add    esp,0x8
c001511b:	90                   	nop
c001511c:	c3                   	ret    
c001511d:	90                   	nop
c001511e:	66 90                	xchg   ax,ax

c0015120 <Process::createThread(void (*)(void*), void*, int)>:
c0015120:	57                   	push   edi
c0015121:	31 c9                	xor    ecx,ecx
c0015123:	56                   	push   esi
c0015124:	53                   	push   ebx
c0015125:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015129:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015130:	89 f2                	mov    edx,esi
c0015132:	66 90                	xchg   ax,ax
c0015134:	0f b7 c2             	movzx  eax,dx
c0015137:	80 e2 01             	and    dl,0x1
c001513a:	74 14                	je     c0015150 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001513c:	d1 f8                	sar    eax,1
c001513e:	83 c1 01             	add    ecx,0x1
c0015141:	83 f9 10             	cmp    ecx,0x10
c0015144:	89 c2                	mov    edx,eax
c0015146:	75 ec                	jne    c0015134 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015148:	31 db                	xor    ebx,ebx
c001514a:	89 d8                	mov    eax,ebx
c001514c:	5b                   	pop    ebx
c001514d:	5e                   	pop    esi
c001514e:	5f                   	pop    edi
c001514f:	c3                   	ret    
c0015150:	b8 01 00 00 00       	mov    eax,0x1
c0015155:	d3 e0                	shl    eax,cl
c0015157:	09 c6                	or     esi,eax
c0015159:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015160:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015163:	c1 e0 05             	shl    eax,0x5
c0015166:	29 c8                	sub    eax,ecx
c0015168:	01 d8                	add    eax,ebx
c001516a:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015171:	75 0d                	jne    c0015180 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015173:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001517d:	8d 76 00             	lea    esi,[esi+0x0]
c0015180:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015186:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015189:	83 ec 0c             	sub    esp,0xc
c001518c:	c1 e6 05             	shl    esi,0x5
c001518f:	29 ce                	sub    esi,ecx
c0015191:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015194:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015197:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001519d:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c00151a3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00151a9:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c00151b0:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00151b6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00151ba:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00151c0:	89 ca                	mov    edx,ecx
c00151c2:	f7 da                	neg    edx
c00151c4:	c1 e2 15             	shl    edx,0x15
c00151c7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00151cd:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00151d3:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00151d7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00151e1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00151e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151eb:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00151f1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00151fb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015205:	68 00 01 00 00       	push   0x100
c001520a:	e8 bc 28 ff ff       	call   c0007acb <malloc>
c001520f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015212:	58                   	pop    eax
c0015213:	5a                   	pop    edx
c0015214:	53                   	push   ebx
c0015215:	68 84 81 02 c0       	push   0xc0028184
c001521a:	e8 41 9e 00 00       	call   c001f060 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001521f:	83 c4 10             	add    esp,0x10
c0015222:	89 d8                	mov    eax,ebx
c0015224:	5b                   	pop    ebx
c0015225:	5e                   	pop    esi
c0015226:	5f                   	pop    edi
c0015227:	c3                   	ret    

c0015228 <Process::createUserThread()>:
c0015228:	83 ec 0c             	sub    esp,0xc
c001522b:	68 80 00 00 00       	push   0x80
c0015230:	6a 00                	push   0x0
c0015232:	68 7c 4b 01 c0       	push   0xc0014b7c
c0015237:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001523b:	50                   	push   eax
c001523c:	e8 df fe ff ff       	call   c0015120 <Process::createThread(void (*)(void*), void*, int)>
c0015241:	83 c4 1c             	add    esp,0x1c
c0015244:	c3                   	ret    
c0015245:	8d 76 00             	lea    esi,[esi+0x0]

c0015248 <setupMultitasking(void (*)())>:
c0015248:	56                   	push   esi
c0015249:	53                   	push   ebx
c001524a:	83 ec 04             	sub    esp,0x4
c001524d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015251:	eb 11                	jmp    c0015264 <setupMultitasking(void (*)())+0x1c>
c0015253:	90                   	nop
c0015254:	83 ec 0c             	sub    esp,0xc
c0015257:	68 84 81 02 c0       	push   0xc0028184
c001525c:	e8 43 9d 00 00       	call   c001efa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015261:	83 c4 10             	add    esp,0x10
c0015264:	83 ec 0c             	sub    esp,0xc
c0015267:	68 84 81 02 c0       	push   0xc0028184
c001526c:	e8 0f 9d 00 00       	call   c001ef80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015271:	83 c4 10             	add    esp,0x10
c0015274:	84 c0                	test   al,al
c0015276:	74 dc                	je     c0015254 <setupMultitasking(void (*)())+0xc>
c0015278:	83 ec 0c             	sub    esp,0xc
c001527b:	68 24 07 00 00       	push   0x724
c0015280:	e8 46 28 ff ff       	call   c0007acb <malloc>
c0015285:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001528c:	6a 00                	push   0x0
c001528e:	68 93 19 02 c0       	push   0xc0021993
c0015293:	6a 01                	push   0x1
c0015295:	50                   	push   eax
c0015296:	89 c3                	mov    ebx,eax
c0015298:	e8 5f fc ff ff       	call   c0014efc <Process::Process(bool, char const*, Process*, char**)>
c001529d:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00152a3:	83 c4 14             	add    esp,0x14
c00152a6:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c00152ac:	50                   	push   eax
c00152ad:	e8 af 34 ff ff       	call   c0008761 <setActiveTerminal(VgaText*)>
c00152b2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00152b9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00152c3:	83 c8 01             	or     eax,0x1
c00152c6:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00152cd:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00152d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00152d6:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00152e0:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00152e6:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00152f0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00152f6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015300:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001530a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015310:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015316:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015320:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001532a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015331:	e8 95 27 ff ff       	call   c0007acb <malloc>
c0015336:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001533c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015342:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015348:	5a                   	pop    edx
c0015349:	59                   	pop    ecx
c001534a:	68 8f 19 02 c0       	push   0xc002198f
c001534f:	50                   	push   eax
c0015350:	e8 fb b2 fe ff       	call   c0000650 <strcpy>
c0015355:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001535c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015360:	83 c4 14             	add    esp,0x14
c0015363:	5b                   	pop    ebx
c0015364:	5e                   	pop    esi
c0015365:	e9 ff ae fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001536a:	66 90                	xchg   ax,ax

c001536c <schedule()>:
c001536c:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015372:	85 d2                	test   edx,edx
c0015374:	74 0e                	je     c0015384 <schedule()+0x18>
c0015376:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0015380:	c3                   	ret    
c0015381:	8d 76 00             	lea    esi,[esi+0x0]
c0015384:	53                   	push   ebx
c0015385:	83 ec 14             	sub    esp,0x14
c0015388:	68 84 81 02 c0       	push   0xc0028184
c001538d:	e8 ee 9b 00 00       	call   c001ef80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015392:	83 c4 10             	add    esp,0x10
c0015395:	84 c0                	test   al,al
c0015397:	75 3f                	jne    c00153d8 <schedule()+0x6c>
c0015399:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001539e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00153a1:	83 fa 01             	cmp    edx,0x1
c00153a4:	74 3a                	je     c00153e0 <schedule()+0x74>
c00153a6:	66 90                	xchg   ax,ax
c00153a8:	83 ec 0c             	sub    esp,0xc
c00153ab:	68 84 81 02 c0       	push   0xc0028184
c00153b0:	e8 e7 9b 00 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00153b5:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00153bc:	89 c3                	mov    ebx,eax
c00153be:	e8 e1 9b 00 00       	call   c001efa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00153c3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00153ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153cd:	e8 02 f8 ff ff       	call   c0014bd4 <switchToThread(ThreadControlBlock*)>
c00153d2:	83 c4 10             	add    esp,0x10
c00153d5:	8d 76 00             	lea    esi,[esi+0x0]
c00153d8:	83 c4 08             	add    esp,0x8
c00153db:	5b                   	pop    ebx
c00153dc:	c3                   	ret    
c00153dd:	8d 76 00             	lea    esi,[esi+0x0]
c00153e0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00153e7:	83 ec 08             	sub    esp,0x8
c00153ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153ef:	50                   	push   eax
c00153f0:	68 84 81 02 c0       	push   0xc0028184
c00153f5:	e8 66 9c 00 00       	call   c001f060 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00153fa:	83 c4 10             	add    esp,0x10
c00153fd:	eb a9                	jmp    c00153a8 <schedule()+0x3c>
c00153ff:	90                   	nop

c0015400 <Semaphore::tryAcquire()>:
c0015400:	53                   	push   ebx
c0015401:	83 ec 08             	sub    esp,0x8
c0015404:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015408:	fa                   	cli    
c0015409:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001540f:	8d 42 01             	lea    eax,[edx+0x1]
c0015412:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015417:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001541c:	8d 58 01             	lea    ebx,[eax+0x1]
c001541f:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015425:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015428:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001542a:	7c 2c                	jl     c0015458 <Semaphore::tryAcquire()+0x58>
c001542c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015431:	85 c0                	test   eax,eax
c0015433:	75 0b                	jne    c0015440 <Semaphore::tryAcquire()+0x40>
c0015435:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001543a:	85 c0                	test   eax,eax
c001543c:	75 5a                	jne    c0015498 <Semaphore::tryAcquire()+0x98>
c001543e:	66 90                	xchg   ax,ax
c0015440:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015446:	31 c0                	xor    eax,eax
c0015448:	85 d2                	test   edx,edx
c001544a:	75 04                	jne    c0015450 <Semaphore::tryAcquire()+0x50>
c001544c:	fb                   	sti    
c001544d:	8d 76 00             	lea    esi,[esi+0x0]
c0015450:	83 c4 08             	add    esp,0x8
c0015453:	5b                   	pop    ebx
c0015454:	c3                   	ret    
c0015455:	8d 76 00             	lea    esi,[esi+0x0]
c0015458:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001545d:	83 c3 01             	add    ebx,0x1
c0015460:	85 c0                	test   eax,eax
c0015462:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015465:	75 21                	jne    c0015488 <Semaphore::tryAcquire()+0x88>
c0015467:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c001546d:	85 c9                	test   ecx,ecx
c001546f:	74 17                	je     c0015488 <Semaphore::tryAcquire()+0x88>
c0015471:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001547b:	e8 ec fe ff ff       	call   c001536c <schedule()>
c0015480:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015485:	8d 50 ff             	lea    edx,[eax-0x1]
c0015488:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001548e:	85 d2                	test   edx,edx
c0015490:	b0 01                	mov    al,0x1
c0015492:	75 bc                	jne    c0015450 <Semaphore::tryAcquire()+0x50>
c0015494:	eb b6                	jmp    c001544c <Semaphore::tryAcquire()+0x4c>
c0015496:	66 90                	xchg   ax,ax
c0015498:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00154a2:	e8 c5 fe ff ff       	call   c001536c <schedule()>
c00154a7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154ac:	8d 50 ff             	lea    edx,[eax-0x1]
c00154af:	31 c0                	xor    eax,eax
c00154b1:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00154b7:	85 d2                	test   edx,edx
c00154b9:	75 95                	jne    c0015450 <Semaphore::tryAcquire()+0x50>
c00154bb:	eb 8f                	jmp    c001544c <Semaphore::tryAcquire()+0x4c>
c00154bd:	90                   	nop
c00154be:	66 90                	xchg   ax,ax

c00154c0 <Semaphore::assertLocked(char const*)>:
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154c7:	fa                   	cli    
c00154c8:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00154ce:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00154d3:	83 c1 01             	add    ecx,0x1
c00154d6:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00154dc:	8d 48 01             	lea    ecx,[eax+0x1]
c00154df:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00154e5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00154e7:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00154ea:	7c 28                	jl     c0015514 <Semaphore::assertLocked(char const*)+0x54>
c00154ec:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00154f1:	85 c0                	test   eax,eax
c00154f3:	75 0b                	jne    c0015500 <Semaphore::assertLocked(char const*)+0x40>
c00154f5:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00154fa:	85 c0                	test   eax,eax
c00154fc:	75 32                	jne    c0015530 <Semaphore::assertLocked(char const*)+0x70>
c00154fe:	66 90                	xchg   ax,ax
c0015500:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015505:	83 e8 01             	sub    eax,0x1
c0015508:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001550d:	75 01                	jne    c0015510 <Semaphore::assertLocked(char const*)+0x50>
c001550f:	fb                   	sti    
c0015510:	83 c4 0c             	add    esp,0xc
c0015513:	c3                   	ret    
c0015514:	83 ec 0c             	sub    esp,0xc
c0015517:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001551b:	52                   	push   edx
c001551c:	e8 1c b6 ff ff       	call   c0010b3d <KePanic(char const*)>
c0015521:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015526:	83 c4 10             	add    esp,0x10
c0015529:	83 e8 01             	sub    eax,0x1
c001552c:	eb be                	jmp    c00154ec <Semaphore::assertLocked(char const*)+0x2c>
c001552e:	66 90                	xchg   ax,ax
c0015530:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001553a:	e8 2d fe ff ff       	call   c001536c <schedule()>
c001553f:	eb bf                	jmp    c0015500 <Semaphore::assertLocked(char const*)+0x40>
c0015541:	8d 76 00             	lea    esi,[esi+0x0]

c0015544 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015544:	83 ec 0c             	sub    esp,0xc
c0015547:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001554c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015550:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015553:	e8 14 fe ff ff       	call   c001536c <schedule()>
c0015558:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001555d:	83 e8 01             	sub    eax,0x1
c0015560:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015565:	75 01                	jne    c0015568 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015567:	fb                   	sti    
c0015568:	83 c4 0c             	add    esp,0xc
c001556b:	c3                   	ret    

c001556c <blockTask(TaskState)>:
c001556c:	83 ec 0c             	sub    esp,0xc
c001556f:	fa                   	cli    
c0015570:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015575:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015579:	83 c0 01             	add    eax,0x1
c001557c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015581:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015586:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015589:	e8 de fd ff ff       	call   c001536c <schedule()>
c001558e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015593:	83 e8 01             	sub    eax,0x1
c0015596:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001559b:	75 03                	jne    c00155a0 <blockTask(TaskState)+0x34>
c001559d:	fb                   	sti    
c001559e:	66 90                	xchg   ax,ax
c00155a0:	83 c4 0c             	add    esp,0xc
c00155a3:	c3                   	ret    

c00155a4 <waitTask(int, int*, int)>:
c00155a4:	83 ec 18             	sub    esp,0x18
c00155a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00155b0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00155b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155bc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00155bf:	6a 07                	push   0x7
c00155c1:	e8 a6 ff ff ff       	call   c001556c <blockTask(TaskState)>
c00155c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155cb:	83 c4 10             	add    esp,0x10
c00155ce:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00155d1:	85 d2                	test   edx,edx
c00155d3:	74 0b                	je     c00155e0 <waitTask(int, int*, int)+0x3c>
c00155d5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00155d8:	89 02                	mov    DWORD PTR [edx],eax
c00155da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155df:	90                   	nop
c00155e0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00155e3:	83 c4 0c             	add    esp,0xc
c00155e6:	c3                   	ret    
c00155e7:	90                   	nop

c00155e8 <milliTenthSleepUntil(unsigned int)>:
c00155e8:	83 ec 0c             	sub    esp,0xc
c00155eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155ef:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00155f5:	76 05                	jbe    c00155fc <milliTenthSleepUntil(unsigned int)+0x14>
c00155f7:	90                   	nop
c00155f8:	83 c4 0c             	add    esp,0xc
c00155fb:	c3                   	ret    
c00155fc:	fa                   	cli    
c00155fd:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015603:	83 ec 08             	sub    esp,0x8
c0015606:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c001560c:	83 c2 01             	add    edx,0x1
c001560f:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015615:	83 c1 01             	add    ecx,0x1
c0015618:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001561e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015624:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015627:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001562c:	50                   	push   eax
c001562d:	68 78 81 02 c0       	push   0xc0028178
c0015632:	e8 29 9a 00 00       	call   c001f060 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015637:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001563e:	e8 29 ff ff ff       	call   c001556c <blockTask(TaskState)>
c0015643:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015648:	83 c4 10             	add    esp,0x10
c001564b:	83 e8 01             	sub    eax,0x1
c001564e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015653:	85 c0                	test   eax,eax
c0015655:	75 09                	jne    c0015660 <milliTenthSleepUntil(unsigned int)+0x78>
c0015657:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001565c:	85 c0                	test   eax,eax
c001565e:	75 14                	jne    c0015674 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015660:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015665:	83 e8 01             	sub    eax,0x1
c0015668:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001566d:	75 89                	jne    c00155f8 <milliTenthSleepUntil(unsigned int)+0x10>
c001566f:	fb                   	sti    
c0015670:	83 c4 0c             	add    esp,0xc
c0015673:	c3                   	ret    
c0015674:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001567e:	e8 e9 fc ff ff       	call   c001536c <schedule()>
c0015683:	eb db                	jmp    c0015660 <milliTenthSleepUntil(unsigned int)+0x78>
c0015685:	8d 76 00             	lea    esi,[esi+0x0]

c0015688 <milliTenthSleep(unsigned int)>:
c0015688:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001568c:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015691:	01 c2                	add    edx,eax
c0015693:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015697:	e9 4c ff ff ff       	jmp    c00155e8 <milliTenthSleepUntil(unsigned int)>

c001569c <sleep(unsigned int)>:
c001569c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00156a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156a8:	eb de                	jmp    c0015688 <milliTenthSleep(unsigned int)>
c00156aa:	66 90                	xchg   ax,ax

c00156ac <Semaphore::acquire()>:
c00156ac:	83 ec 0c             	sub    esp,0xc
c00156af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00156b3:	fa                   	cli    
c00156b4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00156b9:	83 c0 01             	add    eax,0x1
c00156bc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00156c1:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00156c6:	8d 48 01             	lea    ecx,[eax+0x1]
c00156c9:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00156cf:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00156d2:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00156d4:	7d 2e                	jge    c0015704 <Semaphore::acquire()+0x58>
c00156d6:	83 c1 01             	add    ecx,0x1
c00156d9:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00156dc:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00156e1:	85 c0                	test   eax,eax
c00156e3:	75 0b                	jne    c00156f0 <Semaphore::acquire()+0x44>
c00156e5:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00156ea:	85 c0                	test   eax,eax
c00156ec:	75 66                	jne    c0015754 <Semaphore::acquire()+0xa8>
c00156ee:	66 90                	xchg   ax,ax
c00156f0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00156f5:	83 e8 01             	sub    eax,0x1
c00156f8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00156fd:	75 01                	jne    c0015700 <Semaphore::acquire()+0x54>
c00156ff:	fb                   	sti    
c0015700:	83 c4 0c             	add    esp,0xc
c0015703:	c3                   	ret    
c0015704:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015709:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015710:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015713:	85 c9                	test   ecx,ecx
c0015715:	74 51                	je     c0015768 <Semaphore::acquire()+0xbc>
c0015717:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001571a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015720:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015723:	90                   	nop
c0015724:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015729:	83 ec 0c             	sub    esp,0xc
c001572c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001572f:	68 14 1a 02 c0       	push   0xc0021a14
c0015734:	e8 03 52 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0015739:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015740:	e8 27 fe ff ff       	call   c001556c <blockTask(TaskState)>
c0015745:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001574a:	83 c4 10             	add    esp,0x10
c001574d:	83 e8 01             	sub    eax,0x1
c0015750:	eb 8a                	jmp    c00156dc <Semaphore::acquire()+0x30>
c0015752:	66 90                	xchg   ax,ax
c0015754:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001575e:	e8 09 fc ff ff       	call   c001536c <schedule()>
c0015763:	eb 8b                	jmp    c00156f0 <Semaphore::acquire()+0x44>
c0015765:	8d 76 00             	lea    esi,[esi+0x0]
c0015768:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001576d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015770:	eb b2                	jmp    c0015724 <Semaphore::acquire()+0x78>
c0015772:	66 90                	xchg   ax,ax

c0015774 <taskReturned>:
c0015774:	83 ec 18             	sub    esp,0x18
c0015777:	68 34 1a 02 c0       	push   0xc0021a34
c001577c:	e8 bc b3 ff ff       	call   c0010b3d <KePanic(char const*)>
c0015781:	83 c4 10             	add    esp,0x10
c0015784:	83 ec 0c             	sub    esp,0xc
c0015787:	6a 02                	push   0x2
c0015789:	e8 de fd ff ff       	call   c001556c <blockTask(TaskState)>
c001578e:	fa                   	cli    
c001578f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015794:	83 c0 01             	add    eax,0x1
c0015797:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001579c:	e8 cb fb ff ff       	call   c001536c <schedule()>
c00157a1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00157a6:	83 c4 10             	add    esp,0x10
c00157a9:	83 e8 01             	sub    eax,0x1
c00157ac:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00157b1:	85 c0                	test   eax,eax
c00157b3:	75 cf                	jne    c0015784 <taskReturned+0x10>
c00157b5:	fb                   	sti    
c00157b6:	eb cc                	jmp    c0015784 <taskReturned+0x10>

c00157b8 <Thr::processFromPID(int)>:
c00157b8:	57                   	push   edi
c00157b9:	56                   	push   esi
c00157ba:	53                   	push   ebx
c00157bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157bf:	fa                   	cli    
c00157c0:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00157c6:	83 ec 0c             	sub    esp,0xc
c00157c9:	68 84 81 02 c0       	push   0xc0028184
c00157ce:	83 c1 01             	add    ecx,0x1
c00157d1:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00157d7:	e8 c0 97 00 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157dc:	83 c4 10             	add    esp,0x10
c00157df:	89 c7                	mov    edi,eax
c00157e1:	eb 15                	jmp    c00157f8 <Thr::processFromPID(int)+0x40>
c00157e3:	90                   	nop
c00157e4:	83 ec 0c             	sub    esp,0xc
c00157e7:	68 84 81 02 c0       	push   0xc0028184
c00157ec:	e8 ab 97 00 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157f1:	83 c4 10             	add    esp,0x10
c00157f4:	39 f8                	cmp    eax,edi
c00157f6:	74 50                	je     c0015848 <Thr::processFromPID(int)+0x90>
c00157f8:	83 ec 0c             	sub    esp,0xc
c00157fb:	68 84 81 02 c0       	push   0xc0028184
c0015800:	e8 97 97 00 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015805:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001580c:	89 c3                	mov    ebx,eax
c001580e:	e8 91 97 00 00       	call   c001efa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015813:	58                   	pop    eax
c0015814:	5a                   	pop    edx
c0015815:	53                   	push   ebx
c0015816:	68 84 81 02 c0       	push   0xc0028184
c001581b:	e8 40 98 00 00       	call   c001f060 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015820:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015823:	83 c4 10             	add    esp,0x10
c0015826:	39 30                	cmp    DWORD PTR [eax],esi
c0015828:	75 ba                	jne    c00157e4 <Thr::processFromPID(int)+0x2c>
c001582a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001582f:	83 e8 01             	sub    eax,0x1
c0015832:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015837:	74 0b                	je     c0015844 <Thr::processFromPID(int)+0x8c>
c0015839:	8d 76 00             	lea    esi,[esi+0x0]
c001583c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001583f:	90                   	nop
c0015840:	5b                   	pop    ebx
c0015841:	5e                   	pop    esi
c0015842:	5f                   	pop    edi
c0015843:	c3                   	ret    
c0015844:	fb                   	sti    
c0015845:	eb f5                	jmp    c001583c <Thr::processFromPID(int)+0x84>
c0015847:	90                   	nop
c0015848:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001584d:	8d 50 ff             	lea    edx,[eax-0x1]
c0015850:	31 c0                	xor    eax,eax
c0015852:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015858:	85 d2                	test   edx,edx
c001585a:	75 e4                	jne    c0015840 <Thr::processFromPID(int)+0x88>
c001585c:	fb                   	sti    
c001585d:	5b                   	pop    ebx
c001585e:	5e                   	pop    esi
c001585f:	5f                   	pop    edi
c0015860:	c3                   	ret    
c0015861:	8d 76 00             	lea    esi,[esi+0x0]

c0015864 <unblockTask(ThreadControlBlock*)>:
c0015864:	53                   	push   ebx
c0015865:	83 ec 08             	sub    esp,0x8
c0015868:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001586c:	fa                   	cli    
c001586d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015872:	83 c0 01             	add    eax,0x1
c0015875:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001587a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001587d:	85 c0                	test   eax,eax
c001587f:	74 67                	je     c00158e8 <unblockTask(ThreadControlBlock*)+0x84>
c0015881:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015884:	83 f8 01             	cmp    eax,0x1
c0015887:	74 37                	je     c00158c0 <unblockTask(ThreadControlBlock*)+0x5c>
c0015889:	83 ec 0c             	sub    esp,0xc
c001588c:	68 84 81 02 c0       	push   0xc0028184
c0015891:	e8 06 97 00 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015896:	83 c4 10             	add    esp,0x10
c0015899:	85 c0                	test   eax,eax
c001589b:	75 1b                	jne    c00158b8 <unblockTask(ThreadControlBlock*)+0x54>
c001589d:	eb 5d                	jmp    c00158fc <unblockTask(ThreadControlBlock*)+0x98>
c001589f:	90                   	nop
c00158a0:	83 ec 08             	sub    esp,0x8
c00158a3:	50                   	push   eax
c00158a4:	68 84 81 02 c0       	push   0xc0028184
c00158a9:	e8 0e 9a 00 00       	call   c001f2bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00158ae:	83 c4 10             	add    esp,0x10
c00158b1:	85 c0                	test   eax,eax
c00158b3:	74 47                	je     c00158fc <unblockTask(ThreadControlBlock*)+0x98>
c00158b5:	8d 76 00             	lea    esi,[esi+0x0]
c00158b8:	39 c3                	cmp    ebx,eax
c00158ba:	75 e4                	jne    c00158a0 <unblockTask(ThreadControlBlock*)+0x3c>
c00158bc:	eb 12                	jmp    c00158d0 <unblockTask(ThreadControlBlock*)+0x6c>
c00158be:	66 90                	xchg   ax,ax
c00158c0:	83 ec 0c             	sub    esp,0xc
c00158c3:	68 b1 19 02 c0       	push   0xc00219b1
c00158c8:	e8 6f 50 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00158cd:	83 c4 10             	add    esp,0x10
c00158d0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158d5:	83 e8 01             	sub    eax,0x1
c00158d8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158dd:	75 01                	jne    c00158e0 <unblockTask(ThreadControlBlock*)+0x7c>
c00158df:	fb                   	sti    
c00158e0:	83 c4 08             	add    esp,0x8
c00158e3:	5b                   	pop    ebx
c00158e4:	c3                   	ret    
c00158e5:	8d 76 00             	lea    esi,[esi+0x0]
c00158e8:	83 ec 0c             	sub    esp,0xc
c00158eb:	68 9a 19 02 c0       	push   0xc002199a
c00158f0:	e8 47 50 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00158f5:	83 c4 10             	add    esp,0x10
c00158f8:	eb d6                	jmp    c00158d0 <unblockTask(ThreadControlBlock*)+0x6c>
c00158fa:	66 90                	xchg   ax,ax
c00158fc:	83 ec 08             	sub    esp,0x8
c00158ff:	53                   	push   ebx
c0015900:	68 84 81 02 c0       	push   0xc0028184
c0015905:	e8 56 97 00 00       	call   c001f060 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001590a:	83 c4 10             	add    esp,0x10
c001590d:	eb c1                	jmp    c00158d0 <unblockTask(ThreadControlBlock*)+0x6c>
c001590f:	90                   	nop

c0015910 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015910:	55                   	push   ebp
c0015911:	57                   	push   edi
c0015912:	56                   	push   esi
c0015913:	53                   	push   ebx
c0015914:	83 ec 1c             	sub    esp,0x1c
c0015917:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001591b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001591e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015924:	85 ed                	test   ebp,ebp
c0015926:	7e 28                	jle    c0015950 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015928:	31 f6                	xor    esi,esi
c001592a:	66 90                	xchg   ax,ax
c001592c:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015933:	83 ec 0c             	sub    esp,0xc
c0015936:	83 c6 01             	add    esi,0x1
c0015939:	57                   	push   edi
c001593a:	e8 9c 21 ff ff       	call   c0007adb <free>
c001593f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015942:	83 c4 10             	add    esp,0x10
c0015945:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001594b:	7f df                	jg     c001592c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001594d:	8d 76 00             	lea    esi,[esi+0x0]
c0015950:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001595a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001595f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015962:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015965:	d3 c0                	rol    eax,cl
c0015967:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001596e:	21 c8                	and    eax,ecx
c0015970:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015977:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001597a:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015982:	89 f7                	mov    edi,esi
c0015984:	0f 85 72 01 00 00    	jne    c0015afc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001598a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015990:	85 ed                	test   ebp,ebp
c0015992:	74 1c                	je     c00159b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015994:	83 ec 0c             	sub    esp,0xc
c0015997:	55                   	push   ebp
c0015998:	e8 b1 ae ff ff       	call   c001084e <EnvVarContainer::~EnvVarContainer()>
c001599d:	59                   	pop    ecx
c001599e:	5e                   	pop    esi
c001599f:	6a 0c                	push   0xc
c00159a1:	55                   	push   ebp
c00159a2:	e8 97 4e ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c00159a7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00159aa:	83 c4 10             	add    esp,0x10
c00159ad:	89 f7                	mov    edi,esi
c00159af:	90                   	nop
c00159b0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00159b6:	85 c0                	test   eax,eax
c00159b8:	0f 84 b2 00 00 00    	je     c0015a70 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00159be:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00159c1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00159c5:	31 c9                	xor    ecx,ecx
c00159c7:	eb 17                	jmp    c00159e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00159c9:	8d 76 00             	lea    esi,[esi+0x0]
c00159cc:	83 c1 01             	add    ecx,0x1
c00159cf:	83 f9 10             	cmp    ecx,0x10
c00159d2:	0f 84 98 00 00 00    	je     c0015a70 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00159d8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00159de:	66 90                	xchg   ax,ax
c00159e0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00159e7:	d3 fa                	sar    edx,cl
c00159e9:	80 e2 01             	and    dl,0x1
c00159ec:	74 de                	je     c00159cc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00159ee:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00159f1:	c1 e2 05             	shl    edx,0x5
c00159f4:	29 ca                	sub    edx,ecx
c00159f6:	01 d0                	add    eax,edx
c00159f8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00159fe:	83 fd 07             	cmp    ebp,0x7
c0015a01:	75 c9                	jne    c00159cc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a03:	05 40 02 00 00       	add    eax,0x240
c0015a08:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015a0b:	83 fd ff             	cmp    ebp,0xffffffff
c0015a0e:	0f 8c f0 00 00 00    	jl     c0015b04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015a14:	0f 84 ae 01 00 00    	je     c0015bc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015a1a:	85 ed                	test   ebp,ebp
c0015a1c:	0f 84 92 01 00 00    	je     c0015bb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015a22:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015a24:	75 a6                	jne    c00159cc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a26:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a2a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015a30:	01 d0                	add    eax,edx
c0015a32:	66 90                	xchg   ax,ax
c0015a34:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015a38:	83 ec 0c             	sub    esp,0xc
c0015a3b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015a41:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a44:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a4a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015a51:	50                   	push   eax
c0015a52:	e8 0d fe ff ff       	call   c0015864 <unblockTask(ThreadControlBlock*)>
c0015a57:	83 c4 10             	add    esp,0x10
c0015a5a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a5d:	89 f7                	mov    edi,esi
c0015a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a63:	83 c1 01             	add    ecx,0x1
c0015a66:	83 f9 10             	cmp    ecx,0x10
c0015a69:	0f 85 69 ff ff ff    	jne    c00159d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015a6f:	90                   	nop
c0015a70:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015a76:	85 c0                	test   eax,eax
c0015a78:	74 62                	je     c0015adc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015a7a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015a80:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015a86:	74 54                	je     c0015adc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015a88:	83 ec 0c             	sub    esp,0xc
c0015a8b:	68 84 81 02 c0       	push   0xc0028184
c0015a90:	e8 07 95 00 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a95:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015a9c:	89 c7                	mov    edi,eax
c0015a9e:	e8 dd 94 00 00       	call   c001ef80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015aa3:	83 c4 10             	add    esp,0x10
c0015aa6:	84 c0                	test   al,al
c0015aa8:	0f 84 ce 00 00 00    	je     c0015b7c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015aae:	66 90                	xchg   ax,ax
c0015ab0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ab3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015ab9:	85 d2                	test   edx,edx
c0015abb:	74 0f                	je     c0015acc <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015abd:	8b 02                	mov    eax,DWORD PTR [edx]
c0015abf:	83 ec 0c             	sub    esp,0xc
c0015ac2:	52                   	push   edx
c0015ac3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ac6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ac9:	83 c4 10             	add    esp,0x10
c0015acc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015ad6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0015adc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015ae2:	85 db                	test   ebx,ebx
c0015ae4:	74 16                	je     c0015afc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015ae6:	83 ec 0c             	sub    esp,0xc
c0015ae9:	53                   	push   ebx
c0015aea:	e8 93 40 ff ff       	call   c0009b82 <VAS::~VAS()>
c0015aef:	58                   	pop    eax
c0015af0:	5a                   	pop    edx
c0015af1:	6a 14                	push   0x14
c0015af3:	53                   	push   ebx
c0015af4:	e8 45 4d ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c0015af9:	83 c4 10             	add    esp,0x10
c0015afc:	83 c4 1c             	add    esp,0x1c
c0015aff:	5b                   	pop    ebx
c0015b00:	5e                   	pop    esi
c0015b01:	5f                   	pop    edi
c0015b02:	5d                   	pop    ebp
c0015b03:	c3                   	ret    
c0015b04:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b08:	83 ec 0c             	sub    esp,0xc
c0015b0b:	68 68 1a 02 c0       	push   0xc0021a68
c0015b10:	e8 28 b0 ff ff       	call   c0010b3d <KePanic(char const*)>
c0015b15:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015b18:	83 c4 10             	add    esp,0x10
c0015b1b:	89 f7                	mov    edi,esi
c0015b1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b21:	e9 a6 fe ff ff       	jmp    c00159cc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015b26:	66 90                	xchg   ax,ax
c0015b28:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b2e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015b34:	75 1e                	jne    c0015b54 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015b36:	83 ec 0c             	sub    esp,0xc
c0015b39:	68 d0 1a 02 c0       	push   0xc0021ad0
c0015b3e:	e8 f9 4d ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0015b43:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015b4a:	e8 1d fa ff ff       	call   c001556c <blockTask(TaskState)>
c0015b4f:	83 c4 10             	add    esp,0x10
c0015b52:	66 90                	xchg   ax,ax
c0015b54:	83 ec 08             	sub    esp,0x8
c0015b57:	56                   	push   esi
c0015b58:	68 84 81 02 c0       	push   0xc0028184
c0015b5d:	e8 fe 94 00 00       	call   c001f060 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b62:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015b69:	e8 2e 94 00 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b6e:	83 c4 10             	add    esp,0x10
c0015b71:	39 f8                	cmp    eax,edi
c0015b73:	0f 84 37 ff ff ff    	je     c0015ab0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015b79:	8d 76 00             	lea    esi,[esi+0x0]
c0015b7c:	83 ec 0c             	sub    esp,0xc
c0015b7f:	68 84 81 02 c0       	push   0xc0028184
c0015b84:	e8 13 94 00 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b89:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015b90:	89 c6                	mov    esi,eax
c0015b92:	e8 0d 94 00 00       	call   c001efa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	39 f3                	cmp    ebx,esi
c0015b9c:	74 b6                	je     c0015b54 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015b9e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015ba1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ba4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015baa:	75 a8                	jne    c0015b54 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015bac:	e9 77 ff ff ff       	jmp    c0015b28 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0015bb4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015bb8:	83 ec 0c             	sub    esp,0xc
c0015bbb:	68 9c 1a 02 c0       	push   0xc0021a9c
c0015bc0:	e9 4b ff ff ff       	jmp    c0015b10 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bc8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015bcc:	8b 36                	mov    esi,DWORD PTR [esi]
c0015bce:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015bd1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015bd4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015bda:	01 d7                	add    edi,edx
c0015bdc:	89 f8                	mov    eax,edi
c0015bde:	e9 51 fe ff ff       	jmp    c0015a34 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015be3:	90                   	nop

c0015be4 <cleanerTaskFunction(void*)>:
c0015be4:	53                   	push   ebx
c0015be5:	83 ec 08             	sub    esp,0x8
c0015be8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015bed:	83 e8 01             	sub    eax,0x1
c0015bf0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015bf5:	75 01                	jne    c0015bf8 <cleanerTaskFunction(void*)+0x14>
c0015bf7:	fb                   	sti    
c0015bf8:	fa                   	cli    
c0015bf9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015bfe:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015c05:	8d 50 01             	lea    edx,[eax+0x1]
c0015c08:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015c0e:	0f 84 c4 00 00 00    	je     c0015cd8 <cleanerTaskFunction(void*)+0xf4>
c0015c14:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015c19:	85 c0                	test   eax,eax
c0015c1b:	75 03                	jne    c0015c20 <cleanerTaskFunction(void*)+0x3c>
c0015c1d:	fb                   	sti    
c0015c1e:	66 90                	xchg   ax,ax
c0015c20:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c0015c27:	fa                   	cli    
c0015c28:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015c2e:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015c34:	83 c2 01             	add    edx,0x1
c0015c37:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015c3d:	83 c1 01             	add    ecx,0x1
c0015c40:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015c46:	fa                   	cli    
c0015c47:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c0015c4d:	83 c3 01             	add    ebx,0x1
c0015c50:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c0015c56:	eb 28                	jmp    c0015c80 <cleanerTaskFunction(void*)+0x9c>
c0015c58:	83 ec 0c             	sub    esp,0xc
c0015c5b:	68 6c 81 02 c0       	push   0xc002816c
c0015c60:	e8 37 93 00 00       	call   c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c65:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015c6c:	89 c3                	mov    ebx,eax
c0015c6e:	e8 31 93 00 00       	call   c001efa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c76:	e8 95 fc ff ff       	call   c0015910 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015c7b:	83 c4 10             	add    esp,0x10
c0015c7e:	66 90                	xchg   ax,ax
c0015c80:	83 ec 0c             	sub    esp,0xc
c0015c83:	68 6c 81 02 c0       	push   0xc002816c
c0015c88:	e8 f3 92 00 00       	call   c001ef80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c8d:	83 c4 10             	add    esp,0x10
c0015c90:	84 c0                	test   al,al
c0015c92:	74 c4                	je     c0015c58 <cleanerTaskFunction(void*)+0x74>
c0015c94:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c99:	83 e8 01             	sub    eax,0x1
c0015c9c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ca1:	75 01                	jne    c0015ca4 <cleanerTaskFunction(void*)+0xc0>
c0015ca3:	fb                   	sti    
c0015ca4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015ca9:	83 e8 01             	sub    eax,0x1
c0015cac:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015cb1:	0f 85 31 ff ff ff    	jne    c0015be8 <cleanerTaskFunction(void*)+0x4>
c0015cb7:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015cbc:	85 c0                	test   eax,eax
c0015cbe:	0f 84 24 ff ff ff    	je     c0015be8 <cleanerTaskFunction(void*)+0x4>
c0015cc4:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015cce:	e8 99 f6 ff ff       	call   c001536c <schedule()>
c0015cd3:	e9 10 ff ff ff       	jmp    c0015be8 <cleanerTaskFunction(void*)+0x4>
c0015cd8:	83 ec 0c             	sub    esp,0xc
c0015cdb:	6a 02                	push   0x2
c0015cdd:	e8 62 f8 ff ff       	call   c0015544 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015ce2:	83 c4 10             	add    esp,0x10
c0015ce5:	e9 36 ff ff ff       	jmp    c0015c20 <cleanerTaskFunction(void*)+0x3c>
c0015cea:	66 90                	xchg   ax,ax

c0015cec <terminateTask(int)>:
c0015cec:	83 ec 14             	sub    esp,0x14
c0015cef:	fa                   	cli    
c0015cf0:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015cf6:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015cfc:	83 c2 01             	add    edx,0x1
c0015cff:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d05:	83 c1 01             	add    ecx,0x1
c0015d08:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015d0e:	fa                   	cli    
c0015d0f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d18:	83 c0 01             	add    eax,0x1
c0015d1b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d25:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015d28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d2d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015d30:	50                   	push   eax
c0015d31:	68 6c 81 02 c0       	push   0xc002816c
c0015d36:	e8 25 93 00 00       	call   c001f060 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d40:	83 c4 10             	add    esp,0x10
c0015d43:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015d4a:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015d4f:	85 c0                	test   eax,eax
c0015d51:	74 65                	je     c0015db8 <terminateTask(int)+0xcc>
c0015d53:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015d5a:	83 ec 0c             	sub    esp,0xc
c0015d5d:	50                   	push   eax
c0015d5e:	e8 01 fb ff ff       	call   c0015864 <unblockTask(ThreadControlBlock*)>
c0015d63:	83 c4 10             	add    esp,0x10
c0015d66:	66 90                	xchg   ax,ax
c0015d68:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d6d:	83 e8 01             	sub    eax,0x1
c0015d70:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d75:	75 01                	jne    c0015d78 <terminateTask(int)+0x8c>
c0015d77:	fb                   	sti    
c0015d78:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015d7d:	83 e8 01             	sub    eax,0x1
c0015d80:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015d85:	75 09                	jne    c0015d90 <terminateTask(int)+0xa4>
c0015d87:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015d8e:	75 3c                	jne    c0015dcc <terminateTask(int)+0xe0>
c0015d90:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d95:	83 e8 01             	sub    eax,0x1
c0015d98:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d9d:	75 01                	jne    c0015da0 <terminateTask(int)+0xb4>
c0015d9f:	fb                   	sti    
c0015da0:	fa                   	cli    
c0015da1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015da6:	83 c0 01             	add    eax,0x1
c0015da9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dae:	66 90                	xchg   ax,ax
c0015db0:	e8 b7 f5 ff ff       	call   c001536c <schedule()>
c0015db5:	eb d9                	jmp    c0015d90 <terminateTask(int)+0xa4>
c0015db7:	90                   	nop
c0015db8:	83 ec 0c             	sub    esp,0xc
c0015dbb:	68 c8 19 02 c0       	push   0xc00219c8
c0015dc0:	e8 77 4b ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0015dc5:	83 c4 10             	add    esp,0x10
c0015dc8:	eb 9e                	jmp    c0015d68 <terminateTask(int)+0x7c>
c0015dca:	66 90                	xchg   ax,ax
c0015dcc:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015dd6:	eb d8                	jmp    c0015db0 <terminateTask(int)+0xc4>

c0015dd8 <Thr::terminateFromIRQ(int)>:
c0015dd8:	83 ec 18             	sub    esp,0x18
c0015ddb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ddf:	50                   	push   eax
c0015de0:	e8 07 ff ff ff       	call   c0015cec <terminateTask(int)>
c0015de5:	90                   	nop
c0015de6:	66 90                	xchg   ax,ax

c0015de8 <Semaphore::release()>:
c0015de8:	83 ec 0c             	sub    esp,0xc
c0015deb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015def:	fa                   	cli    
c0015df0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015df5:	83 c0 01             	add    eax,0x1
c0015df8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dfd:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015e02:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e05:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015e0b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015e0e:	85 c9                	test   ecx,ecx
c0015e10:	74 42                	je     c0015e54 <Semaphore::release()+0x6c>
c0015e12:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015e15:	83 ec 0c             	sub    esp,0xc
c0015e18:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015e1b:	51                   	push   ecx
c0015e1c:	e8 43 fa ff ff       	call   c0015864 <unblockTask(ThreadControlBlock*)>
c0015e21:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015e26:	83 c4 10             	add    esp,0x10
c0015e29:	83 e8 01             	sub    eax,0x1
c0015e2c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015e31:	85 c0                	test   eax,eax
c0015e33:	75 0b                	jne    c0015e40 <Semaphore::release()+0x58>
c0015e35:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015e3a:	85 c0                	test   eax,eax
c0015e3c:	75 22                	jne    c0015e60 <Semaphore::release()+0x78>
c0015e3e:	66 90                	xchg   ax,ax
c0015e40:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e45:	83 e8 01             	sub    eax,0x1
c0015e48:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e4d:	75 01                	jne    c0015e50 <Semaphore::release()+0x68>
c0015e4f:	fb                   	sti    
c0015e50:	83 c4 0c             	add    esp,0xc
c0015e53:	c3                   	ret    
c0015e54:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015e57:	83 e9 01             	sub    ecx,0x1
c0015e5a:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015e5d:	eb cd                	jmp    c0015e2c <Semaphore::release()+0x44>
c0015e5f:	90                   	nop
c0015e60:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015e6a:	e8 fd f4 ff ff       	call   c001536c <schedule()>
c0015e6f:	eb cf                	jmp    c0015e40 <Semaphore::release()+0x58>
c0015e71:	8d 76 00             	lea    esi,[esi+0x0]

c0015e74 <__static_initialization_and_destruction_0(int, int)>:
c0015e74:	83 ec 0c             	sub    esp,0xc
c0015e77:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015e7c:	0f 85 8e 00 00 00    	jne    c0015f10 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015e82:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015e8a:	0f 85 80 00 00 00    	jne    c0015f10 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015e90:	83 ec 0c             	sub    esp,0xc
c0015e93:	68 84 81 02 c0       	push   0xc0028184
c0015e98:	e8 77 94 00 00       	call   c001f314 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015e9d:	83 c4 10             	add    esp,0x10
c0015ea0:	83 ec 04             	sub    esp,0x4
c0015ea3:	68 98 26 02 c0       	push   0xc0022698
c0015ea8:	68 84 81 02 c0       	push   0xc0028184
c0015ead:	68 c4 f2 01 c0       	push   0xc001f2c4
c0015eb2:	e8 37 49 ff ff       	call   c000a7ee <__cxa_atexit>
c0015eb7:	83 c4 10             	add    esp,0x10
c0015eba:	83 ec 0c             	sub    esp,0xc
c0015ebd:	68 78 81 02 c0       	push   0xc0028178
c0015ec2:	e8 4d 94 00 00       	call   c001f314 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ec7:	83 c4 10             	add    esp,0x10
c0015eca:	83 ec 04             	sub    esp,0x4
c0015ecd:	68 98 26 02 c0       	push   0xc0022698
c0015ed2:	68 78 81 02 c0       	push   0xc0028178
c0015ed7:	68 c4 f2 01 c0       	push   0xc001f2c4
c0015edc:	e8 0d 49 ff ff       	call   c000a7ee <__cxa_atexit>
c0015ee1:	83 c4 10             	add    esp,0x10
c0015ee4:	83 ec 0c             	sub    esp,0xc
c0015ee7:	68 6c 81 02 c0       	push   0xc002816c
c0015eec:	e8 23 94 00 00       	call   c001f314 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ef1:	83 c4 10             	add    esp,0x10
c0015ef4:	83 ec 04             	sub    esp,0x4
c0015ef7:	68 98 26 02 c0       	push   0xc0022698
c0015efc:	68 6c 81 02 c0       	push   0xc002816c
c0015f01:	68 c4 f2 01 c0       	push   0xc001f2c4
c0015f06:	e8 e3 48 ff ff       	call   c000a7ee <__cxa_atexit>
c0015f0b:	83 c4 10             	add    esp,0x10
c0015f0e:	66 90                	xchg   ax,ax
c0015f10:	90                   	nop
c0015f11:	83 c4 0c             	add    esp,0xc
c0015f14:	c3                   	ret    
c0015f15:	8d 76 00             	lea    esi,[esi+0x0]

c0015f18 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015f18:	83 ec 0c             	sub    esp,0xc
c0015f1b:	83 ec 08             	sub    esp,0x8
c0015f1e:	68 ff ff 00 00       	push   0xffff
c0015f23:	6a 01                	push   0x1
c0015f25:	e8 4a ff ff ff       	call   c0015e74 <__static_initialization_and_destruction_0(int, int)>
c0015f2a:	83 c4 10             	add    esp,0x10
c0015f2d:	83 c4 0c             	add    esp,0xc
c0015f30:	c3                   	ret    

c0015f31 <Vm::inbv(unsigned short)>:
c0015f31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f35:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015f3a:	75 06                	jne    c0015f42 <Vm::inbv(unsigned short)+0x11>
c0015f3c:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015f41:	c3                   	ret    
c0015f42:	ec                   	in     al,dx
c0015f43:	c3                   	ret    

c0015f44 <Vm::outbv(unsigned short, unsigned char)>:
c0015f44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f4c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015f51:	75 25                	jne    c0015f78 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015f53:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015f59:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015f5f:	8d 51 01             	lea    edx,[ecx+0x1]
c0015f62:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015f68:	83 fa 20             	cmp    edx,0x20
c0015f6b:	75 0c                	jne    c0015f79 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015f6d:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015f77:	c3                   	ret    
c0015f78:	ee                   	out    dx,al
c0015f79:	c3                   	ret    

c0015f7a <Vm::realToLinear(unsigned short, unsigned short)>:
c0015f7a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015f7f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015f84:	c1 e0 04             	shl    eax,0x4
c0015f87:	01 d0                	add    eax,edx
c0015f89:	c3                   	ret    

c0015f8a <Vm::getSegment(unsigned int)>:
c0015f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f8e:	c1 e8 10             	shr    eax,0x10
c0015f91:	c3                   	ret    

c0015f92 <Vm::getOffset(unsigned int)>:
c0015f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f96:	c3                   	ret    

c0015f97 <Vm::mainloop2()>:
c0015f97:	83 ec 18             	sub    esp,0x18
c0015f9a:	fa                   	cli    
c0015f9b:	6a 02                	push   0x2
c0015f9d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015fa3:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015faa:	e8 95 f5 ff ff       	call   c0015544 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015faf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fb4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015fb8:	52                   	push   edx
c0015fb9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015fbd:	52                   	push   edx
c0015fbe:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015fc2:	52                   	push   edx
c0015fc3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015fc7:	50                   	push   eax
c0015fc8:	e8 42 a2 fe ff       	call   c000020f <goToVM86>
c0015fcd:	83 c4 2c             	add    esp,0x2c
c0015fd0:	c3                   	ret    

c0015fd1 <Vm::mainVm8086Loop(void*)>:
c0015fd1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fd6:	48                   	dec    eax
c0015fd7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fdc:	75 01                	jne    c0015fdf <Vm::mainVm8086Loop(void*)+0xe>
c0015fde:	fb                   	sti    
c0015fdf:	eb b6                	jmp    c0015f97 <Vm::mainloop2()>

c0015fe1 <Vm::mainloop3(unsigned long)>:
c0015fe1:	83 ec 18             	sub    esp,0x18
c0015fe4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fe8:	fa                   	cli    
c0015fe9:	6a 02                	push   0x2
c0015feb:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015ff1:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015ff8:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015ffd:	e8 42 f5 ff ff       	call   c0015544 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016002:	83 c4 1c             	add    esp,0x1c
c0016005:	eb 90                	jmp    c0015f97 <Vm::mainloop2()>

c0016007 <Vm::initialise8086()>:
c0016007:	83 ec 0c             	sub    esp,0xc
c001600a:	68 80 00 00 00       	push   0x80
c001600f:	6a 00                	push   0x0
c0016011:	68 d1 5f 01 c0       	push   0xc0015fd1
c0016016:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001601c:	e8 ff f0 ff ff       	call   c0015120 <Process::createThread(void (*)(void*), void*, int)>
c0016021:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016028:	68 00 01 00 00       	push   0x100
c001602d:	6a 00                	push   0x0
c001602f:	6a 00                	push   0x0
c0016031:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0016036:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001603b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016041:	e8 d2 3e ff ff       	call   c0009f18 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016046:	83 c4 2c             	add    esp,0x2c
c0016049:	c3                   	ret    

c001604a <Vm::finish8086()>:
c001604a:	53                   	push   ebx
c001604b:	83 ec 08             	sub    esp,0x8
c001604e:	fa                   	cli    
c001604f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0016055:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c001605c:	75 15                	jne    c0016073 <Vm::finish8086()+0x29>
c001605e:	e8 09 f3 ff ff       	call   c001536c <schedule()>
c0016063:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016068:	48                   	dec    eax
c0016069:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001606e:	75 de                	jne    c001604e <Vm::finish8086()+0x4>
c0016070:	fb                   	sti    
c0016071:	eb db                	jmp    c001604e <Vm::finish8086()+0x4>
c0016073:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c001607a:	83 ec 0c             	sub    esp,0xc
c001607d:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0016083:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0016089:	e8 d6 f7 ff ff       	call   c0015864 <unblockTask(ThreadControlBlock*)>
c001608e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016093:	83 c4 10             	add    esp,0x10
c0016096:	8d 50 ff             	lea    edx,[eax-0x1]
c0016099:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001609f:	85 d2                	test   edx,edx
c00160a1:	75 01                	jne    c00160a4 <Vm::finish8086()+0x5a>
c00160a3:	fb                   	sti    
c00160a4:	83 c4 08             	add    esp,0x8
c00160a7:	89 d8                	mov    eax,ebx
c00160a9:	5b                   	pop    ebx
c00160aa:	c3                   	ret    

c00160ab <Vm::getOutput8086(unsigned char*)>:
c00160ab:	57                   	push   edi
c00160ac:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c00160b2:	56                   	push   esi
c00160b3:	be e0 81 02 c0       	mov    esi,0xc00281e0
c00160b8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00160bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00160be:	5e                   	pop    esi
c00160bf:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c00160c4:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c00160ce:	5f                   	pop    edi
c00160cf:	c3                   	ret    

c00160d0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00160d0:	55                   	push   ebp
c00160d1:	57                   	push   edi
c00160d2:	56                   	push   esi
c00160d3:	53                   	push   ebx
c00160d4:	83 ec 0c             	sub    esp,0xc
c00160d7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00160db:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00160df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00160e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00160e7:	fa                   	cli    
c00160e8:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00160ee:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c00160f5:	75 15                	jne    c001610c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00160f7:	e8 70 f2 ff ff       	call   c001536c <schedule()>
c00160fc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016101:	48                   	dec    eax
c0016102:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016107:	75 de                	jne    c00160e7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016109:	fb                   	sti    
c001610a:	eb db                	jmp    c00160e7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001610c:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0016116:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c001611b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001611f:	0f b7 ff             	movzx  edi,di
c0016122:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016126:	0f b7 f6             	movzx  esi,si
c0016129:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001612d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016131:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016135:	50                   	push   eax
c0016136:	6a 20                	push   0x20
c0016138:	6a 00                	push   0x0
c001613a:	68 e0 81 02 c0       	push   0xc00281e0
c001613f:	e8 ac a3 fe ff       	call   c00004f0 <memset>
c0016144:	5a                   	pop    edx
c0016145:	59                   	pop    ecx
c0016146:	57                   	push   edi
c0016147:	56                   	push   esi
c0016148:	e8 2d fe ff ff       	call   c0015f7a <Vm::realToLinear(unsigned short, unsigned short)>
c001614d:	83 c4 10             	add    esp,0x10
c0016150:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016154:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016158:	89 c7                	mov    edi,eax
c001615a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001615c:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0016163:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016168:	48                   	dec    eax
c0016169:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001616e:	75 01                	jne    c0016171 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016170:	fb                   	sti    
c0016171:	83 ec 0c             	sub    esp,0xc
c0016174:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c001617a:	e8 e5 f6 ff ff       	call   c0015864 <unblockTask(ThreadControlBlock*)>
c001617f:	83 c4 1c             	add    esp,0x1c
c0016182:	b0 01                	mov    al,0x1
c0016184:	5b                   	pop    ebx
c0016185:	5e                   	pop    esi
c0016186:	5f                   	pop    edi
c0016187:	5d                   	pop    ebp
c0016188:	c3                   	ret    

c0016189 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016189:	55                   	push   ebp
c001618a:	57                   	push   edi
c001618b:	56                   	push   esi
c001618c:	53                   	push   ebx
c001618d:	83 ec 34             	sub    esp,0x34
c0016190:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016194:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016198:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001619c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00161a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161a8:	68 f8 1a 02 c0       	push   0xc0021af8
c00161ad:	e8 8a 47 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00161b2:	83 c4 10             	add    esp,0x10
c00161b5:	fa                   	cli    
c00161b6:	8a 1d c5 81 02 c0    	mov    bl,BYTE PTR ds:0xc00281c5
c00161bc:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00161c2:	84 db                	test   bl,bl
c00161c4:	75 15                	jne    c00161db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c00161c6:	e8 a1 f1 ff ff       	call   c001536c <schedule()>
c00161cb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00161d0:	48                   	dec    eax
c00161d1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00161d6:	75 dd                	jne    c00161b5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00161d8:	fb                   	sti    
c00161d9:	eb da                	jmp    c00161b5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00161db:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c00161e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161e9:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c00161ee:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00161f2:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00161f6:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00161fa:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00161fe:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016202:	50                   	push   eax
c0016203:	6a 20                	push   0x20
c0016205:	6a 00                	push   0x0
c0016207:	68 e0 81 02 c0       	push   0xc00281e0
c001620c:	e8 df a2 fe ff       	call   c00004f0 <memset>
c0016211:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016218:	e8 ae 18 ff ff       	call   c0007acb <malloc>
c001621d:	83 c4 0c             	add    esp,0xc
c0016220:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0016226:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001622a:	89 c5                	mov    ebp,eax
c001622c:	50                   	push   eax
c001622d:	e8 88 4f ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c0016232:	83 c4 10             	add    esp,0x10
c0016235:	85 ed                	test   ebp,ebp
c0016237:	75 0a                	jne    c0016243 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016239:	83 ec 0c             	sub    esp,0xc
c001623c:	68 1a 1b 02 c0       	push   0xc0021b1a
c0016241:	eb 2b                	jmp    c001626e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016243:	50                   	push   eax
c0016244:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016248:	50                   	push   eax
c0016249:	8d 44 24 20          	lea    eax,[esp+0x20]
c001624d:	50                   	push   eax
c001624e:	55                   	push   ebp
c001624f:	e8 ce 52 ff ff       	call   c000b522 <File::stat(unsigned long long*, bool*)>
c0016254:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016258:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001625c:	83 c4 10             	add    esp,0x10
c001625f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016264:	74 27                	je     c001628d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016266:	83 ec 0c             	sub    esp,0xc
c0016269:	68 2e 1b 02 c0       	push   0xc0021b2e
c001626e:	e8 ca a8 ff ff       	call   c0010b3d <KePanic(char const*)>
c0016273:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016278:	83 c4 10             	add    esp,0x10
c001627b:	48                   	dec    eax
c001627c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016281:	85 c0                	test   eax,eax
c0016283:	75 01                	jne    c0016286 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016285:	fb                   	sti    
c0016286:	31 db                	xor    ebx,ebx
c0016288:	e9 90 00 00 00       	jmp    c001631d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c001628d:	51                   	push   ecx
c001628e:	51                   	push   ecx
c001628f:	6a 01                	push   0x1
c0016291:	55                   	push   ebp
c0016292:	e8 df 4f ff ff       	call   c000b276 <File::open(FileOpenMode)>
c0016297:	83 c4 10             	add    esp,0x10
c001629a:	85 c0                	test   eax,eax
c001629c:	74 26                	je     c00162c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c001629e:	83 ec 0c             	sub    esp,0xc
c00162a1:	68 47 1b 02 c0       	push   0xc0021b47
c00162a6:	e8 92 a8 ff ff       	call   c0010b3d <KePanic(char const*)>
c00162ab:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00162b0:	83 c4 10             	add    esp,0x10
c00162b3:	48                   	dec    eax
c00162b4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00162b9:	85 c0                	test   eax,eax
c00162bb:	75 c9                	jne    c0016286 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00162bd:	fb                   	sti    
c00162be:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00162c2:	eb 59                	jmp    c001631d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00162c4:	50                   	push   eax
c00162c5:	0f b7 ff             	movzx  edi,di
c00162c8:	50                   	push   eax
c00162c9:	0f b7 f6             	movzx  esi,si
c00162cc:	57                   	push   edi
c00162cd:	56                   	push   esi
c00162ce:	e8 a7 fc ff ff       	call   c0015f7a <Vm::realToLinear(unsigned short, unsigned short)>
c00162d3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00162d6:	5a                   	pop    edx
c00162d7:	8d 74 24 20          	lea    esi,[esp+0x20]
c00162db:	56                   	push   esi
c00162dc:	50                   	push   eax
c00162dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00162e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00162e5:	55                   	push   ebp
c00162e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00162e9:	83 c4 14             	add    esp,0x14
c00162ec:	55                   	push   ebp
c00162ed:	e8 e2 4f ff ff       	call   c000b2d4 <File::close()>
c00162f2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00162f7:	83 c4 10             	add    esp,0x10
c00162fa:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0016301:	48                   	dec    eax
c0016302:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016307:	85 c0                	test   eax,eax
c0016309:	75 01                	jne    c001630c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001630b:	fb                   	sti    
c001630c:	83 ec 0c             	sub    esp,0xc
c001630f:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0016315:	e8 4a f5 ff ff       	call   c0015864 <unblockTask(ThreadControlBlock*)>
c001631a:	83 c4 10             	add    esp,0x10
c001631d:	83 c4 2c             	add    esp,0x2c
c0016320:	88 d8                	mov    al,bl
c0016322:	5b                   	pop    ebx
c0016323:	5e                   	pop    esi
c0016324:	5f                   	pop    edi
c0016325:	5d                   	pop    ebp
c0016326:	c3                   	ret    

c0016327 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016327:	57                   	push   edi
c0016328:	56                   	push   esi
c0016329:	53                   	push   ebx
c001632a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001632e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016332:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016336:	83 e8 06             	sub    eax,0x6
c0016339:	0f b7 c0             	movzx  eax,ax
c001633c:	50                   	push   eax
c001633d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016342:	50                   	push   eax
c0016343:	e8 32 fc ff ff       	call   c0015f7a <Vm::realToLinear(unsigned short, unsigned short)>
c0016348:	5a                   	pop    edx
c0016349:	59                   	pop    ecx
c001634a:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c001634d:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016350:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016353:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016359:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001635c:	8d 51 02             	lea    edx,[ecx+0x2]
c001635f:	66 89 10             	mov    WORD PTR [eax],dx
c0016362:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016366:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001636a:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c001636e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016371:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016375:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001637b:	89 f1                	mov    ecx,esi
c001637d:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016381:	89 f2                	mov    edx,esi
c0016383:	0f b6 d6             	movzx  edx,dh
c0016386:	0f b6 f1             	movzx  esi,cl
c0016389:	74 0a                	je     c0016395 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001638b:	c1 e2 08             	shl    edx,0x8
c001638e:	09 f2                	or     edx,esi
c0016390:	80 ce 02             	or     dh,0x2
c0016393:	eb 08                	jmp    c001639d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016395:	c1 e2 08             	shl    edx,0x8
c0016398:	09 f2                	or     edx,esi
c001639a:	80 e6 fd             	and    dh,0xfd
c001639d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00163a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163a6:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00163aa:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00163b2:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00163b5:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00163bd:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00163c0:	5b                   	pop    ebx
c00163c1:	5e                   	pop    esi
c00163c2:	5f                   	pop    edi
c00163c3:	c3                   	ret    

c00163c4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00163c4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163c9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163ce:	c1 e0 04             	shl    eax,0x4
c00163d1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00163d4:	c3                   	ret    

c00163d5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00163d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163da:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163df:	c1 e0 04             	shl    eax,0x4
c00163e2:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00163e6:	c3                   	ret    

c00163e7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00163e7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163ec:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163f1:	c1 e0 04             	shl    eax,0x4
c00163f4:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00163f7:	c3                   	ret    

c00163f8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00163f8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163fd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016402:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016406:	c1 e0 04             	shl    eax,0x4
c0016409:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001640c:	c3                   	ret    

c001640d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001640d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016412:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016417:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001641b:	c1 e0 04             	shl    eax,0x4
c001641e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016422:	c3                   	ret    

c0016423 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016423:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016428:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001642d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016431:	c1 e0 04             	shl    eax,0x4
c0016434:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016437:	c3                   	ret    

c0016438 <Vm::faultHandler(regs*)>:
c0016438:	55                   	push   ebp
c0016439:	57                   	push   edi
c001643a:	56                   	push   esi
c001643b:	53                   	push   ebx
c001643c:	83 ec 2c             	sub    esp,0x2c
c001643f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016443:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016446:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001644a:	0f b7 f8             	movzx  edi,ax
c001644d:	0f b7 c0             	movzx  eax,ax
c0016450:	52                   	push   edx
c0016451:	50                   	push   eax
c0016452:	e8 23 fb ff ff       	call   c0015f7a <Vm::realToLinear(unsigned short, unsigned short)>
c0016457:	5a                   	pop    edx
c0016458:	59                   	pop    ecx
c0016459:	89 c1                	mov    ecx,eax
c001645b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001645e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016462:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016467:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001646b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001646e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016472:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016477:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001647b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001647f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016483:	e8 f2 fa ff ff       	call   c0015f7a <Vm::realToLinear(unsigned short, unsigned short)>
c0016488:	5e                   	pop    esi
c0016489:	be 06 00 00 00       	mov    esi,0x6
c001648e:	5d                   	pop    ebp
c001648f:	31 ed                	xor    ebp,ebp
c0016491:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016496:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016499:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001649f:	0f 84 74 02 00 00    	je     c0016719 <Vm::faultHandler(regs*)+0x2e1>
c00164a5:	0f 87 94 00 00 00    	ja     c001653f <Vm::faultHandler(regs*)+0x107>
c00164ab:	83 fa 66             	cmp    edx,0x66
c00164ae:	0f 84 e2 01 00 00    	je     c0016696 <Vm::faultHandler(regs*)+0x25e>
c00164b4:	77 47                	ja     c00164fd <Vm::faultHandler(regs*)+0xc5>
c00164b6:	83 fa 36             	cmp    edx,0x36
c00164b9:	0f 84 ca 01 00 00    	je     c0016689 <Vm::faultHandler(regs*)+0x251>
c00164bf:	77 1a                	ja     c00164db <Vm::faultHandler(regs*)+0xa3>
c00164c1:	83 fa 26             	cmp    edx,0x26
c00164c4:	0f 84 98 01 00 00    	je     c0016662 <Vm::faultHandler(regs*)+0x22a>
c00164ca:	83 fa 2e             	cmp    edx,0x2e
c00164cd:	0f 85 27 06 00 00    	jne    c0016afa <Vm::faultHandler(regs*)+0x6c2>
c00164d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00164d6:	31 f6                	xor    esi,esi
c00164d8:	41                   	inc    ecx
c00164d9:	eb bb                	jmp    c0016496 <Vm::faultHandler(regs*)+0x5e>
c00164db:	83 fa 64             	cmp    edx,0x64
c00164de:	0f 84 8b 01 00 00    	je     c001666f <Vm::faultHandler(regs*)+0x237>
c00164e4:	0f 87 92 01 00 00    	ja     c001667c <Vm::faultHandler(regs*)+0x244>
c00164ea:	83 fa 3e             	cmp    edx,0x3e
c00164ed:	0f 85 07 06 00 00    	jne    c0016afa <Vm::faultHandler(regs*)+0x6c2>
c00164f3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00164f6:	be 01 00 00 00       	mov    esi,0x1
c00164fb:	eb db                	jmp    c00164d8 <Vm::faultHandler(regs*)+0xa0>
c00164fd:	83 fa 6d             	cmp    edx,0x6d
c0016500:	0f 84 34 03 00 00    	je     c001683a <Vm::faultHandler(regs*)+0x402>
c0016506:	77 17                	ja     c001651f <Vm::faultHandler(regs*)+0xe7>
c0016508:	83 fa 67             	cmp    edx,0x67
c001650b:	0f 84 92 01 00 00    	je     c00166a3 <Vm::faultHandler(regs*)+0x26b>
c0016511:	83 fa 6c             	cmp    edx,0x6c
c0016514:	0f 84 b1 02 00 00    	je     c00167cb <Vm::faultHandler(regs*)+0x393>
c001651a:	e9 db 05 00 00       	jmp    c0016afa <Vm::faultHandler(regs*)+0x6c2>
c001651f:	83 fa 6f             	cmp    edx,0x6f
c0016522:	0f 84 40 04 00 00    	je     c0016968 <Vm::faultHandler(regs*)+0x530>
c0016528:	0f 82 a2 03 00 00    	jb     c00168d0 <Vm::faultHandler(regs*)+0x498>
c001652e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016534:	0f 84 76 01 00 00    	je     c00166b0 <Vm::faultHandler(regs*)+0x278>
c001653a:	e9 bb 05 00 00       	jmp    c0016afa <Vm::faultHandler(regs*)+0x6c2>
c001653f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016545:	0f 84 57 05 00 00    	je     c0016aa2 <Vm::faultHandler(regs*)+0x66a>
c001654b:	0f 87 a9 00 00 00    	ja     c00165fa <Vm::faultHandler(regs*)+0x1c2>
c0016551:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016557:	0f 84 d6 04 00 00    	je     c0016a33 <Vm::faultHandler(regs*)+0x5fb>
c001655d:	77 78                	ja     c00165d7 <Vm::faultHandler(regs*)+0x19f>
c001655f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016565:	0f 84 0e 02 00 00    	je     c0016779 <Vm::faultHandler(regs*)+0x341>
c001656b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016571:	0f 85 83 05 00 00    	jne    c0016afa <Vm::faultHandler(regs*)+0x6c2>
c0016577:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001657b:	89 d1                	mov    ecx,edx
c001657d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016580:	c1 e1 08             	shl    ecx,0x8
c0016583:	09 ca                	or     edx,ecx
c0016585:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016588:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001658c:	89 d1                	mov    ecx,edx
c001658e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016592:	c1 e1 08             	shl    ecx,0x8
c0016595:	09 ca                	or     edx,ecx
c0016597:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001659a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001659e:	89 d1                	mov    ecx,edx
c00165a0:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00165a4:	c1 e1 08             	shl    ecx,0x8
c00165a7:	09 ca                	or     edx,ecx
c00165a9:	81 ca 00 02 02 00    	or     edx,0x20200
c00165af:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00165b2:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00165b6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00165bc:	d1 e8                	shr    eax,1
c00165be:	83 e0 01             	and    eax,0x1
c00165c1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00165c4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00165c7:	83 c0 06             	add    eax,0x6
c00165ca:	25 ff ff 00 00       	and    eax,0xffff
c00165cf:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00165d2:	e9 1f 05 00 00       	jmp    c0016af6 <Vm::faultHandler(regs*)+0x6be>
c00165d7:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00165dd:	0f 84 95 04 00 00    	je     c0016a78 <Vm::faultHandler(regs*)+0x640>
c00165e3:	0f 82 66 04 00 00    	jb     c0016a4f <Vm::faultHandler(regs*)+0x617>
c00165e9:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00165ef:	0f 84 9a 04 00 00    	je     c0016a8f <Vm::faultHandler(regs*)+0x657>
c00165f5:	e9 00 05 00 00       	jmp    c0016afa <Vm::faultHandler(regs*)+0x6c2>
c00165fa:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016600:	0f 84 dd 04 00 00    	je     c0016ae3 <Vm::faultHandler(regs*)+0x6ab>
c0016606:	77 2e                	ja     c0016636 <Vm::faultHandler(regs*)+0x1fe>
c0016608:	81 fa ed 00 00 00    	cmp    edx,0xed
c001660e:	0f 84 aa 04 00 00    	je     c0016abe <Vm::faultHandler(regs*)+0x686>
c0016614:	81 fa ee 00 00 00    	cmp    edx,0xee
c001661a:	0f 85 da 04 00 00    	jne    c0016afa <Vm::faultHandler(regs*)+0x6c2>
c0016620:	50                   	push   eax
c0016621:	50                   	push   eax
c0016622:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016626:	50                   	push   eax
c0016627:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001662b:	50                   	push   eax
c001662c:	e8 13 f9 ff ff       	call   c0015f44 <Vm::outbv(unsigned short, unsigned char)>
c0016631:	e9 a5 04 00 00       	jmp    c0016adb <Vm::faultHandler(regs*)+0x6a3>
c0016636:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001663c:	0f 84 6d 01 00 00    	je     c00167af <Vm::faultHandler(regs*)+0x377>
c0016642:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016648:	0f 84 6f 01 00 00    	je     c00167bd <Vm::faultHandler(regs*)+0x385>
c001664e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016654:	0f 85 a0 04 00 00    	jne    c0016afa <Vm::faultHandler(regs*)+0x6c2>
c001665a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001665d:	e9 76 fe ff ff       	jmp    c00164d8 <Vm::faultHandler(regs*)+0xa0>
c0016662:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016665:	be 02 00 00 00       	mov    esi,0x2
c001666a:	e9 69 fe ff ff       	jmp    c00164d8 <Vm::faultHandler(regs*)+0xa0>
c001666f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016672:	be 03 00 00 00       	mov    esi,0x3
c0016677:	e9 5c fe ff ff       	jmp    c00164d8 <Vm::faultHandler(regs*)+0xa0>
c001667c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001667f:	be 04 00 00 00       	mov    esi,0x4
c0016684:	e9 4f fe ff ff       	jmp    c00164d8 <Vm::faultHandler(regs*)+0xa0>
c0016689:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001668c:	be 05 00 00 00       	mov    esi,0x5
c0016691:	e9 42 fe ff ff       	jmp    c00164d8 <Vm::faultHandler(regs*)+0xa0>
c0016696:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016699:	bd 01 00 00 00       	mov    ebp,0x1
c001669e:	e9 35 fe ff ff       	jmp    c00164d8 <Vm::faultHandler(regs*)+0xa0>
c00166a3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166a6:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00166ab:	e9 28 fe ff ff       	jmp    c00164d8 <Vm::faultHandler(regs*)+0xa0>
c00166b0:	83 e5 01             	and    ebp,0x1
c00166b3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00166b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00166ba:	74 30                	je     c00166ec <Vm::faultHandler(regs*)+0x2b4>
c00166bc:	83 e9 04             	sub    ecx,0x4
c00166bf:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00166c5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00166cb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00166ce:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00166d1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00166d7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00166db:	0f 84 12 04 00 00    	je     c0016af3 <Vm::faultHandler(regs*)+0x6bb>
c00166e1:	80 ce 02             	or     dh,0x2
c00166e4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00166e7:	e9 07 04 00 00       	jmp    c0016af3 <Vm::faultHandler(regs*)+0x6bb>
c00166ec:	83 e9 02             	sub    ecx,0x2
c00166ef:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00166f5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00166f8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00166fc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016702:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016706:	74 05                	je     c001670d <Vm::faultHandler(regs*)+0x2d5>
c0016708:	80 ce 02             	or     dh,0x2
c001670b:	eb 03                	jmp    c0016710 <Vm::faultHandler(regs*)+0x2d8>
c001670d:	80 e6 fd             	and    dh,0xfd
c0016710:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016714:	e9 da 03 00 00       	jmp    c0016af3 <Vm::faultHandler(regs*)+0x6bb>
c0016719:	83 e5 01             	and    ebp,0x1
c001671c:	74 2a                	je     c0016748 <Vm::faultHandler(regs*)+0x310>
c001671e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016720:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016726:	81 ca 00 02 02 00    	or     edx,0x20200
c001672c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001672f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016731:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016737:	c1 e8 09             	shr    eax,0x9
c001673a:	83 e0 01             	and    eax,0x1
c001673d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016740:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016743:	83 c0 04             	add    eax,0x4
c0016746:	eb 24                	jmp    c001676c <Vm::faultHandler(regs*)+0x334>
c0016748:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001674b:	81 ca 00 02 02 00    	or     edx,0x20200
c0016751:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016754:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016757:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001675d:	c1 e8 09             	shr    eax,0x9
c0016760:	83 e0 01             	and    eax,0x1
c0016763:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016766:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016769:	83 c0 02             	add    eax,0x2
c001676c:	25 ff ff 00 00       	and    eax,0xffff
c0016771:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016774:	e9 7a 03 00 00       	jmp    c0016af3 <Vm::faultHandler(regs*)+0x6bb>
c0016779:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001677d:	3d ee 00 00 00       	cmp    eax,0xee
c0016782:	75 10                	jne    c0016794 <Vm::faultHandler(regs*)+0x35c>
c0016784:	83 ec 0c             	sub    esp,0xc
c0016787:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001678a:	e8 52 f8 ff ff       	call   c0015fe1 <Vm::mainloop3(unsigned long)>
c001678f:	e9 4a 03 00 00       	jmp    c0016ade <Vm::faultHandler(regs*)+0x6a6>
c0016794:	83 ec 0c             	sub    esp,0xc
c0016797:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001679b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001679f:	51                   	push   ecx
c00167a0:	50                   	push   eax
c00167a1:	53                   	push   ebx
c00167a2:	e8 80 fb ff ff       	call   c0016327 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00167a7:	83 c4 20             	add    esp,0x20
c00167aa:	e9 47 03 00 00       	jmp    c0016af6 <Vm::faultHandler(regs*)+0x6be>
c00167af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167b4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00167b8:	e9 36 03 00 00       	jmp    c0016af3 <Vm::faultHandler(regs*)+0x6bb>
c00167bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167c2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00167c6:	e9 28 03 00 00       	jmp    c0016af3 <Vm::faultHandler(regs*)+0x6bb>
c00167cb:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00167d0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00167d3:	74 2b                	je     c0016800 <Vm::faultHandler(regs*)+0x3c8>
c00167d5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00167dc:	76 22                	jbe    c0016800 <Vm::faultHandler(regs*)+0x3c8>
c00167de:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00167e2:	50                   	push   eax
c00167e3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00167e7:	50                   	push   eax
c00167e8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00167ec:	50                   	push   eax
c00167ed:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00167f1:	50                   	push   eax
c00167f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167f6:	50                   	push   eax
c00167f7:	6a 6c                	push   0x6c
c00167f9:	6a 6c                	push   0x6c
c00167fb:	e9 c0 01 00 00       	jmp    c00169c0 <Vm::faultHandler(regs*)+0x588>
c0016800:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016804:	83 ec 0c             	sub    esp,0xc
c0016807:	0f b7 f6             	movzx  esi,si
c001680a:	50                   	push   eax
c001680b:	e8 21 f7 ff ff       	call   c0015f31 <Vm::inbv(unsigned short)>
c0016810:	83 c4 0c             	add    esp,0xc
c0016813:	0f b6 c0             	movzx  eax,al
c0016816:	50                   	push   eax
c0016817:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001681b:	50                   	push   eax
c001681c:	56                   	push   esi
c001681d:	e8 d6 fb ff ff       	call   c00163f8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016822:	83 c4 10             	add    esp,0x10
c0016825:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016828:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001682c:	74 03                	je     c0016831 <Vm::faultHandler(regs*)+0x3f9>
c001682e:	48                   	dec    eax
c001682f:	eb 01                	jmp    c0016832 <Vm::faultHandler(regs*)+0x3fa>
c0016831:	40                   	inc    eax
c0016832:	0f b7 c0             	movzx  eax,ax
c0016835:	e9 8e 00 00 00       	jmp    c00168c8 <Vm::faultHandler(regs*)+0x490>
c001683a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001683f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016842:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016845:	74 29                	je     c0016870 <Vm::faultHandler(regs*)+0x438>
c0016847:	3d ff ff 00 00       	cmp    eax,0xffff
c001684c:	76 22                	jbe    c0016870 <Vm::faultHandler(regs*)+0x438>
c001684e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016852:	50                   	push   eax
c0016853:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016857:	50                   	push   eax
c0016858:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001685c:	50                   	push   eax
c001685d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016861:	50                   	push   eax
c0016862:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016866:	50                   	push   eax
c0016867:	6a 6d                	push   0x6d
c0016869:	6a 6d                	push   0x6d
c001686b:	e9 50 01 00 00       	jmp    c00169c0 <Vm::faultHandler(regs*)+0x588>
c0016870:	83 e5 01             	and    ebp,0x1
c0016873:	0f b7 c8             	movzx  ecx,ax
c0016876:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016879:	0f b7 f6             	movzx  esi,si
c001687c:	74 1e                	je     c001689c <Vm::faultHandler(regs*)+0x464>
c001687e:	ed                   	in     eax,dx
c001687f:	55                   	push   ebp
c0016880:	50                   	push   eax
c0016881:	51                   	push   ecx
c0016882:	56                   	push   esi
c0016883:	e8 9b fb ff ff       	call   c0016423 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016888:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001688b:	83 c4 10             	add    esp,0x10
c001688e:	8d 50 04             	lea    edx,[eax+0x4]
c0016891:	83 e8 04             	sub    eax,0x4
c0016894:	81 e2 ff ff 00 00    	and    edx,0xffff
c001689a:	eb 20                	jmp    c00168bc <Vm::faultHandler(regs*)+0x484>
c001689c:	66 ed                	in     ax,dx
c001689e:	57                   	push   edi
c001689f:	0f b7 c0             	movzx  eax,ax
c00168a2:	50                   	push   eax
c00168a3:	51                   	push   ecx
c00168a4:	56                   	push   esi
c00168a5:	e8 63 fb ff ff       	call   c001640d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00168aa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00168ad:	83 c4 10             	add    esp,0x10
c00168b0:	8d 50 02             	lea    edx,[eax+0x2]
c00168b3:	83 e8 02             	sub    eax,0x2
c00168b6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00168bc:	25 ff ff 00 00       	and    eax,0xffff
c00168c1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00168c5:	0f 44 c2             	cmove  eax,edx
c00168c8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00168cb:	e9 23 02 00 00       	jmp    c0016af3 <Vm::faultHandler(regs*)+0x6bb>
c00168d0:	8d 46 ff             	lea    eax,[esi-0x1]
c00168d3:	0f b6 f0             	movzx  esi,al
c00168d6:	83 fe 05             	cmp    esi,0x5
c00168d9:	77 23                	ja     c00168fe <Vm::faultHandler(regs*)+0x4c6>
c00168db:	ff 24 b5 bc 1b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde444]
c00168e2:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00168e7:	eb 15                	jmp    c00168fe <Vm::faultHandler(regs*)+0x4c6>
c00168e9:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00168ed:	eb 0f                	jmp    c00168fe <Vm::faultHandler(regs*)+0x4c6>
c00168ef:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00168f3:	eb 09                	jmp    c00168fe <Vm::faultHandler(regs*)+0x4c6>
c00168f5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00168f9:	eb 03                	jmp    c00168fe <Vm::faultHandler(regs*)+0x4c6>
c00168fb:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00168fe:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016903:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016906:	74 29                	je     c0016931 <Vm::faultHandler(regs*)+0x4f9>
c0016908:	3d ff ff 00 00       	cmp    eax,0xffff
c001690d:	76 22                	jbe    c0016931 <Vm::faultHandler(regs*)+0x4f9>
c001690f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016913:	50                   	push   eax
c0016914:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016918:	50                   	push   eax
c0016919:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001691d:	50                   	push   eax
c001691e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016922:	50                   	push   eax
c0016923:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016927:	50                   	push   eax
c0016928:	6a 6e                	push   0x6e
c001692a:	6a 6e                	push   0x6e
c001692c:	e9 8f 00 00 00       	jmp    c00169c0 <Vm::faultHandler(regs*)+0x588>
c0016931:	52                   	push   edx
c0016932:	0f b7 c0             	movzx  eax,ax
c0016935:	52                   	push   edx
c0016936:	50                   	push   eax
c0016937:	57                   	push   edi
c0016938:	e8 87 fa ff ff       	call   c00163c4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001693d:	59                   	pop    ecx
c001693e:	5e                   	pop    esi
c001693f:	0f b6 c0             	movzx  eax,al
c0016942:	50                   	push   eax
c0016943:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016947:	50                   	push   eax
c0016948:	e8 f7 f5 ff ff       	call   c0015f44 <Vm::outbv(unsigned short, unsigned char)>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016953:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016957:	74 03                	je     c001695c <Vm::faultHandler(regs*)+0x524>
c0016959:	48                   	dec    eax
c001695a:	eb 01                	jmp    c001695d <Vm::faultHandler(regs*)+0x525>
c001695c:	40                   	inc    eax
c001695d:	0f b7 c0             	movzx  eax,ax
c0016960:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016963:	e9 8b 01 00 00       	jmp    c0016af3 <Vm::faultHandler(regs*)+0x6bb>
c0016968:	8d 46 ff             	lea    eax,[esi-0x1]
c001696b:	0f b6 f0             	movzx  esi,al
c001696e:	83 fe 05             	cmp    esi,0x5
c0016971:	77 1e                	ja     c0016991 <Vm::faultHandler(regs*)+0x559>
c0016973:	ff 24 b5 d4 1b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde42c]
c001697a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001697e:	eb 11                	jmp    c0016991 <Vm::faultHandler(regs*)+0x559>
c0016980:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016983:	eb 0c                	jmp    c0016991 <Vm::faultHandler(regs*)+0x559>
c0016985:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016988:	eb 07                	jmp    c0016991 <Vm::faultHandler(regs*)+0x559>
c001698a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001698d:	eb 02                	jmp    c0016991 <Vm::faultHandler(regs*)+0x559>
c001698f:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016991:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016996:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016999:	74 37                	je     c00169d2 <Vm::faultHandler(regs*)+0x59a>
c001699b:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00169a1:	76 2f                	jbe    c00169d2 <Vm::faultHandler(regs*)+0x59a>
c00169a3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00169a7:	50                   	push   eax
c00169a8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00169ac:	50                   	push   eax
c00169ad:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00169b1:	50                   	push   eax
c00169b2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00169b6:	50                   	push   eax
c00169b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169bb:	50                   	push   eax
c00169bc:	6a 6f                	push   0x6f
c00169be:	6a 6f                	push   0x6f
c00169c0:	68 60 1b 02 c0       	push   0xc0021b60
c00169c5:	e8 72 3f ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00169ca:	83 c4 20             	add    esp,0x20
c00169cd:	e9 86 01 00 00       	jmp    c0016b58 <Vm::faultHandler(regs*)+0x720>
c00169d2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00169d5:	0f b7 d7             	movzx  edx,di
c00169d8:	0f b7 c6             	movzx  eax,si
c00169db:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00169de:	81 e1 00 04 00 00    	and    ecx,0x400
c00169e4:	83 e5 01             	and    ebp,0x1
c00169e7:	74 1c                	je     c0016a05 <Vm::faultHandler(regs*)+0x5cd>
c00169e9:	55                   	push   ebp
c00169ea:	55                   	push   ebp
c00169eb:	50                   	push   eax
c00169ec:	52                   	push   edx
c00169ed:	e8 f5 f9 ff ff       	call   c00163e7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00169f2:	83 c4 10             	add    esp,0x10
c00169f5:	89 fa                	mov    edx,edi
c00169f7:	ef                   	out    dx,eax
c00169f8:	8d 46 04             	lea    eax,[esi+0x4]
c00169fb:	83 ee 04             	sub    esi,0x4
c00169fe:	25 ff ff 00 00       	and    eax,0xffff
c0016a03:	eb 1b                	jmp    c0016a20 <Vm::faultHandler(regs*)+0x5e8>
c0016a05:	55                   	push   ebp
c0016a06:	55                   	push   ebp
c0016a07:	50                   	push   eax
c0016a08:	52                   	push   edx
c0016a09:	e8 c7 f9 ff ff       	call   c00163d5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	89 fa                	mov    edx,edi
c0016a13:	66 ef                	out    dx,ax
c0016a15:	8d 46 02             	lea    eax,[esi+0x2]
c0016a18:	83 ee 02             	sub    esi,0x2
c0016a1b:	25 ff ff 00 00       	and    eax,0xffff
c0016a20:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016a26:	85 c9                	test   ecx,ecx
c0016a28:	0f 44 f0             	cmove  esi,eax
c0016a2b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016a2e:	e9 c0 00 00 00       	jmp    c0016af3 <Vm::faultHandler(regs*)+0x6bb>
c0016a33:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016a3a:	83 ec 0c             	sub    esp,0xc
c0016a3d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a41:	50                   	push   eax
c0016a42:	e8 ea f4 ff ff       	call   c0015f31 <Vm::inbv(unsigned short)>
c0016a47:	0f b6 c0             	movzx  eax,al
c0016a4a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016a4d:	eb 3a                	jmp    c0016a89 <Vm::faultHandler(regs*)+0x651>
c0016a4f:	83 e5 01             	and    ebp,0x1
c0016a52:	74 07                	je     c0016a5b <Vm::faultHandler(regs*)+0x623>
c0016a54:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a58:	ed                   	in     eax,dx
c0016a59:	eb 14                	jmp    c0016a6f <Vm::faultHandler(regs*)+0x637>
c0016a5b:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016a5e:	66 31 f6             	xor    si,si
c0016a61:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016a64:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a68:	66 ed                	in     ax,dx
c0016a6a:	0f b7 c0             	movzx  eax,ax
c0016a6d:	09 f0                	or     eax,esi
c0016a6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016a72:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016a76:	eb 7e                	jmp    c0016af6 <Vm::faultHandler(regs*)+0x6be>
c0016a78:	52                   	push   edx
c0016a79:	52                   	push   edx
c0016a7a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016a7e:	50                   	push   eax
c0016a7f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a83:	50                   	push   eax
c0016a84:	e8 bb f4 ff ff       	call   c0015f44 <Vm::outbv(unsigned short, unsigned char)>
c0016a89:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016a8d:	eb 4f                	jmp    c0016ade <Vm::faultHandler(regs*)+0x6a6>
c0016a8f:	83 e5 01             	and    ebp,0x1
c0016a92:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016a95:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a99:	74 03                	je     c0016a9e <Vm::faultHandler(regs*)+0x666>
c0016a9b:	ef                   	out    dx,eax
c0016a9c:	eb d4                	jmp    c0016a72 <Vm::faultHandler(regs*)+0x63a>
c0016a9e:	66 ef                	out    dx,ax
c0016aa0:	eb d0                	jmp    c0016a72 <Vm::faultHandler(regs*)+0x63a>
c0016aa2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016aa6:	83 ec 0c             	sub    esp,0xc
c0016aa9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016ab0:	50                   	push   eax
c0016ab1:	e8 7b f4 ff ff       	call   c0015f31 <Vm::inbv(unsigned short)>
c0016ab6:	0f b6 c0             	movzx  eax,al
c0016ab9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016abc:	eb 1d                	jmp    c0016adb <Vm::faultHandler(regs*)+0x6a3>
c0016abe:	83 e5 01             	and    ebp,0x1
c0016ac1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016ac4:	74 03                	je     c0016ac9 <Vm::faultHandler(regs*)+0x691>
c0016ac6:	ed                   	in     eax,dx
c0016ac7:	eb 0d                	jmp    c0016ad6 <Vm::faultHandler(regs*)+0x69e>
c0016ac9:	66 ed                	in     ax,dx
c0016acb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016ace:	0f b7 c0             	movzx  eax,ax
c0016ad1:	66 31 d2             	xor    dx,dx
c0016ad4:	09 d0                	or     eax,edx
c0016ad6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016ad9:	eb 18                	jmp    c0016af3 <Vm::faultHandler(regs*)+0x6bb>
c0016adb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ade:	83 c4 10             	add    esp,0x10
c0016ae1:	eb 13                	jmp    c0016af6 <Vm::faultHandler(regs*)+0x6be>
c0016ae3:	83 e5 01             	and    ebp,0x1
c0016ae6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016ae9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016aec:	74 03                	je     c0016af1 <Vm::faultHandler(regs*)+0x6b9>
c0016aee:	ef                   	out    dx,eax
c0016aef:	eb 02                	jmp    c0016af3 <Vm::faultHandler(regs*)+0x6bb>
c0016af1:	66 ef                	out    dx,ax
c0016af3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016af6:	b0 01                	mov    al,0x1
c0016af8:	eb 60                	jmp    c0016b5a <Vm::faultHandler(regs*)+0x722>
c0016afa:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016afe:	50                   	push   eax
c0016aff:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016b03:	50                   	push   eax
c0016b04:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016b08:	50                   	push   eax
c0016b09:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016b0d:	50                   	push   eax
c0016b0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b12:	50                   	push   eax
c0016b13:	52                   	push   edx
c0016b14:	52                   	push   edx
c0016b15:	68 8d 1b 02 c0       	push   0xc0021b8d
c0016b1a:	e8 1d 3e ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0016b1f:	83 c4 20             	add    esp,0x20
c0016b22:	83 ec 0c             	sub    esp,0xc
c0016b25:	6a 60                	push   0x60
c0016b27:	e8 05 f4 ff ff       	call   c0015f31 <Vm::inbv(unsigned short)>
c0016b2c:	83 c4 10             	add    esp,0x10
c0016b2f:	0f b6 d0             	movzx  edx,al
c0016b32:	83 fa 1c             	cmp    edx,0x1c
c0016b35:	74 05                	je     c0016b3c <Vm::faultHandler(regs*)+0x704>
c0016b37:	83 fa 5a             	cmp    edx,0x5a
c0016b3a:	75 e6                	jne    c0016b22 <Vm::faultHandler(regs*)+0x6ea>
c0016b3c:	0f b6 c0             	movzx  eax,al
c0016b3f:	83 f8 1c             	cmp    eax,0x1c
c0016b42:	74 05                	je     c0016b49 <Vm::faultHandler(regs*)+0x711>
c0016b44:	83 f8 5a             	cmp    eax,0x5a
c0016b47:	75 0f                	jne    c0016b58 <Vm::faultHandler(regs*)+0x720>
c0016b49:	83 ec 0c             	sub    esp,0xc
c0016b4c:	6a 60                	push   0x60
c0016b4e:	e8 de f3 ff ff       	call   c0015f31 <Vm::inbv(unsigned short)>
c0016b53:	83 c4 10             	add    esp,0x10
c0016b56:	eb e4                	jmp    c0016b3c <Vm::faultHandler(regs*)+0x704>
c0016b58:	31 c0                	xor    eax,eax
c0016b5a:	83 c4 2c             	add    esp,0x2c
c0016b5d:	5b                   	pop    ebx
c0016b5e:	5e                   	pop    esi
c0016b5f:	5f                   	pop    edi
c0016b60:	5d                   	pop    ebp
c0016b61:	c3                   	ret    

c0016b62 <noCopro(unsigned long)>:
c0016b62:	c3                   	ret    

c0016b63 <nmiHandler(regs*, void*)>:
c0016b63:	83 ec 0c             	sub    esp,0xc
c0016b66:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b6b:	83 ec 0c             	sub    esp,0xc
c0016b6e:	50                   	push   eax
c0016b6f:	e8 5a 07 ff ff       	call   c00072ce <Computer::handleNMI()>
c0016b74:	83 c4 10             	add    esp,0x10
c0016b77:	90                   	nop
c0016b78:	83 c4 0c             	add    esp,0xc
c0016b7b:	c3                   	ret    

c0016b7c <doubleFault(regs*, void*)>:
c0016b7c:	55                   	push   ebp
c0016b7d:	89 e5                	mov    ebp,esp
c0016b7f:	83 ec 08             	sub    esp,0x8
c0016b82:	83 ec 0c             	sub    esp,0xc
c0016b85:	68 ec 1b 02 c0       	push   0xc0021bec
c0016b8a:	e8 ae 9f ff ff       	call   c0010b3d <KePanic(char const*)>
c0016b8f:	83 c4 10             	add    esp,0x10
c0016b92:	90                   	nop
c0016b93:	c9                   	leave  
c0016b94:	c3                   	ret    

c0016b95 <displayDebugInfo(regs*)>:
c0016b95:	83 ec 1c             	sub    esp,0x1c
c0016b98:	0f 20 c0             	mov    eax,cr0
c0016b9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b9f:	0f 20 d0             	mov    eax,cr2
c0016ba2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ba6:	0f 20 d8             	mov    eax,cr3
c0016ba9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bad:	0f 20 e0             	mov    eax,cr4
c0016bb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb7:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016bba:	83 ec 08             	sub    esp,0x8
c0016bbd:	50                   	push   eax
c0016bbe:	68 08 1c 02 c0       	push   0xc0021c08
c0016bc3:	e8 74 3d ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0016bc8:	83 c4 10             	add    esp,0x10
c0016bcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bcf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016bd2:	83 ec 08             	sub    esp,0x8
c0016bd5:	50                   	push   eax
c0016bd6:	68 f9 1b 02 c0       	push   0xc0021bf9
c0016bdb:	e8 5c 3d ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0016be0:	83 c4 10             	add    esp,0x10
c0016be3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016bea:	83 ec 08             	sub    esp,0x8
c0016bed:	50                   	push   eax
c0016bee:	68 04 1c 02 c0       	push   0xc0021c04
c0016bf3:	e8 44 3d ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0016bf8:	83 c4 10             	add    esp,0x10
c0016bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c02:	83 ec 08             	sub    esp,0x8
c0016c05:	50                   	push   eax
c0016c06:	68 13 1c 02 c0       	push   0xc0021c13
c0016c0b:	e8 2c 3d ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0016c10:	83 c4 10             	add    esp,0x10
c0016c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c17:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016c1a:	83 ec 08             	sub    esp,0x8
c0016c1d:	50                   	push   eax
c0016c1e:	68 1e 1c 02 c0       	push   0xc0021c1e
c0016c23:	e8 14 3d ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0016c28:	83 c4 10             	add    esp,0x10
c0016c2b:	83 ec 08             	sub    esp,0x8
c0016c2e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c32:	68 29 1c 02 c0       	push   0xc0021c29
c0016c37:	e8 00 3d ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0016c3c:	83 c4 10             	add    esp,0x10
c0016c3f:	83 ec 08             	sub    esp,0x8
c0016c42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016c46:	68 34 1c 02 c0       	push   0xc0021c34
c0016c4b:	e8 ec 3c ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0016c50:	83 c4 10             	add    esp,0x10
c0016c53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c57:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016c5a:	c1 e0 05             	shl    eax,0x5
c0016c5d:	8d 90 c0 2b 02 c0    	lea    edx,[eax-0x3ffdd440]
c0016c63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c67:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016c6a:	83 ec 04             	sub    esp,0x4
c0016c6d:	52                   	push   edx
c0016c6e:	50                   	push   eax
c0016c6f:	68 3f 1c 02 c0       	push   0xc0021c3f
c0016c74:	e8 c3 3c ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0016c79:	83 c4 10             	add    esp,0x10
c0016c7c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016c81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c87:	83 ec 0c             	sub    esp,0xc
c0016c8a:	50                   	push   eax
c0016c8b:	e8 d1 1a ff ff       	call   c0008761 <setActiveTerminal(VgaText*)>
c0016c90:	83 c4 10             	add    esp,0x10
c0016c93:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016c98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c9e:	83 ec 08             	sub    esp,0x8
c0016ca1:	68 4e 1c 02 c0       	push   0xc0021c4e
c0016ca6:	50                   	push   eax
c0016ca7:	e8 f2 1d ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016cac:	83 c4 10             	add    esp,0x10
c0016caf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016cb4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016cbe:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016cc1:	83 ec 08             	sub    esp,0x8
c0016cc4:	52                   	push   edx
c0016cc5:	50                   	push   eax
c0016cc6:	e8 8d 1d ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016ccb:	83 c4 10             	add    esp,0x10
c0016cce:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016cd3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cd9:	83 ec 08             	sub    esp,0x8
c0016cdc:	68 5c 1c 02 c0       	push   0xc0021c5c
c0016ce1:	50                   	push   eax
c0016ce2:	e8 b7 1d ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016ce7:	83 c4 10             	add    esp,0x10
c0016cea:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016cef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cf5:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016cfa:	8b 12                	mov    edx,DWORD PTR [edx]
c0016cfc:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016cff:	83 c2 0c             	add    edx,0xc
c0016d02:	83 ec 08             	sub    esp,0x8
c0016d05:	52                   	push   edx
c0016d06:	50                   	push   eax
c0016d07:	e8 92 1d ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016d0c:	83 c4 10             	add    esp,0x10
c0016d0f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d1a:	83 ec 08             	sub    esp,0x8
c0016d1d:	68 65 1c 02 c0       	push   0xc0021c65
c0016d22:	50                   	push   eax
c0016d23:	e8 76 1d ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016d28:	83 c4 10             	add    esp,0x10
c0016d2b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d30:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d36:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d3a:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016d3d:	83 ec 08             	sub    esp,0x8
c0016d40:	52                   	push   edx
c0016d41:	50                   	push   eax
c0016d42:	e8 11 1d ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016d47:	83 c4 10             	add    esp,0x10
c0016d4a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d55:	83 ec 08             	sub    esp,0x8
c0016d58:	68 6d 1c 02 c0       	push   0xc0021c6d
c0016d5d:	50                   	push   eax
c0016d5e:	e8 3b 1d ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016d63:	83 c4 10             	add    esp,0x10
c0016d66:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d75:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016d78:	83 ec 08             	sub    esp,0x8
c0016d7b:	52                   	push   edx
c0016d7c:	50                   	push   eax
c0016d7d:	e8 d6 1c ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016d82:	83 c4 10             	add    esp,0x10
c0016d85:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d90:	83 ec 08             	sub    esp,0x8
c0016d93:	68 75 1c 02 c0       	push   0xc0021c75
c0016d98:	50                   	push   eax
c0016d99:	e8 00 1d ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016d9e:	83 c4 10             	add    esp,0x10
c0016da1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016da6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016db0:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016db3:	83 ec 08             	sub    esp,0x8
c0016db6:	52                   	push   edx
c0016db7:	50                   	push   eax
c0016db8:	e8 9b 1c ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016dbd:	83 c4 10             	add    esp,0x10
c0016dc0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016dc5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dcb:	83 ec 08             	sub    esp,0x8
c0016dce:	68 7d 1c 02 c0       	push   0xc0021c7d
c0016dd3:	50                   	push   eax
c0016dd4:	e8 c5 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016dd9:	83 c4 10             	add    esp,0x10
c0016ddc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016de1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016de7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016deb:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016dee:	83 ec 08             	sub    esp,0x8
c0016df1:	52                   	push   edx
c0016df2:	50                   	push   eax
c0016df3:	e8 60 1c ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016df8:	83 c4 10             	add    esp,0x10
c0016dfb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e06:	83 ec 08             	sub    esp,0x8
c0016e09:	68 85 1c 02 c0       	push   0xc0021c85
c0016e0e:	50                   	push   eax
c0016e0f:	e8 8a 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016e14:	83 c4 10             	add    esp,0x10
c0016e17:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e22:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e26:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016e29:	83 ec 08             	sub    esp,0x8
c0016e2c:	52                   	push   edx
c0016e2d:	50                   	push   eax
c0016e2e:	e8 25 1c ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016e33:	83 c4 10             	add    esp,0x10
c0016e36:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e3b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e41:	83 ec 08             	sub    esp,0x8
c0016e44:	68 8d 1c 02 c0       	push   0xc0021c8d
c0016e49:	50                   	push   eax
c0016e4a:	e8 4f 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016e4f:	83 c4 10             	add    esp,0x10
c0016e52:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e5d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e61:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016e64:	83 ec 08             	sub    esp,0x8
c0016e67:	52                   	push   edx
c0016e68:	50                   	push   eax
c0016e69:	e8 ea 1b ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016e6e:	83 c4 10             	add    esp,0x10
c0016e71:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e76:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e7c:	83 ec 08             	sub    esp,0x8
c0016e7f:	68 95 1c 02 c0       	push   0xc0021c95
c0016e84:	50                   	push   eax
c0016e85:	e8 14 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016e8a:	83 c4 10             	add    esp,0x10
c0016e8d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e98:	83 ec 08             	sub    esp,0x8
c0016e9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e9f:	50                   	push   eax
c0016ea0:	e8 b3 1b ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016ea5:	83 c4 10             	add    esp,0x10
c0016ea8:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ead:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016eb3:	83 ec 08             	sub    esp,0x8
c0016eb6:	68 9e 1c 02 c0       	push   0xc0021c9e
c0016ebb:	50                   	push   eax
c0016ebc:	e8 dd 1b ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016ec1:	83 c4 10             	add    esp,0x10
c0016ec4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ec9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ecf:	83 ec 08             	sub    esp,0x8
c0016ed2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ed6:	50                   	push   eax
c0016ed7:	e8 7c 1b ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016edc:	83 c4 10             	add    esp,0x10
c0016edf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ee4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016eea:	83 ec 08             	sub    esp,0x8
c0016eed:	68 a6 1c 02 c0       	push   0xc0021ca6
c0016ef2:	50                   	push   eax
c0016ef3:	e8 a6 1b ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016ef8:	83 c4 10             	add    esp,0x10
c0016efb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016f00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f06:	83 ec 08             	sub    esp,0x8
c0016f09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016f0d:	50                   	push   eax
c0016f0e:	e8 45 1b ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016f13:	83 c4 10             	add    esp,0x10
c0016f16:	fa                   	cli    
c0016f17:	f4                   	hlt    
c0016f18:	eb fe                	jmp    c0016f18 <displayDebugInfo(regs*)+0x383>

c0016f1a <HalSystemIdle()>:
c0016f1a:	56                   	push   esi
c0016f1b:	53                   	push   ebx
c0016f1c:	83 ec 14             	sub    esp,0x14
c0016f1f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016f24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f2a:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016f30:	83 e0 04             	and    eax,0x4
c0016f33:	0f b6 c0             	movzx  eax,al
c0016f36:	85 c0                	test   eax,eax
c0016f38:	0f 95 c0             	setne  al
c0016f3b:	0f b6 c0             	movzx  eax,al
c0016f3e:	85 c0                	test   eax,eax
c0016f40:	74 4c                	je     c0016f8e <HalSystemIdle()+0x74>
c0016f42:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016f47:	83 ec 08             	sub    esp,0x8
c0016f4a:	68 e1 00 00 00       	push   0xe1
c0016f4f:	50                   	push   eax
c0016f50:	e8 85 01 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0016f55:	83 c4 10             	add    esp,0x10
c0016f58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016f60:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016f65:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f69:	83 e2 02             	and    edx,0x2
c0016f6c:	89 d3                	mov    ebx,edx
c0016f6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f72:	83 e2 00             	and    edx,0x0
c0016f75:	89 d6                	mov    esi,edx
c0016f77:	56                   	push   esi
c0016f78:	53                   	push   ebx
c0016f79:	68 e1 00 00 00       	push   0xe1
c0016f7e:	50                   	push   eax
c0016f7f:	e8 82 01 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016f84:	83 c4 10             	add    esp,0x10
c0016f87:	e8 08 92 fe ff       	call   c0000194 <doTPAUSE>
c0016f8c:	eb 01                	jmp    c0016f8f <HalSystemIdle()+0x75>
c0016f8e:	f4                   	hlt    
c0016f8f:	90                   	nop
c0016f90:	83 c4 14             	add    esp,0x14
c0016f93:	5b                   	pop    ebx
c0016f94:	5e                   	pop    esi
c0016f95:	c3                   	ret    

c0016f96 <displayProgramFault(char const*)>:
c0016f96:	83 ec 0c             	sub    esp,0xc
c0016f99:	83 ec 0c             	sub    esp,0xc
c0016f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fa0:	e8 97 39 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0016fa5:	83 c4 10             	add    esp,0x10
c0016fa8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016fad:	8b 00                	mov    eax,DWORD PTR [eax]
c0016faf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fb2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fb8:	85 c0                	test   eax,eax
c0016fba:	74 21                	je     c0016fdd <displayProgramFault(char const*)+0x47>
c0016fbc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016fc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016fc3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fc6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fcc:	6a 04                	push   0x4
c0016fce:	6a 0f                	push   0xf
c0016fd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fd4:	50                   	push   eax
c0016fd5:	e8 36 1b ff ff       	call   c0008b10 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016fda:	83 c4 10             	add    esp,0x10
c0016fdd:	90                   	nop
c0016fde:	83 c4 0c             	add    esp,0xc
c0016fe1:	c3                   	ret    

c0016fe2 <gpFault(regs*, void*)>:
c0016fe2:	83 ec 1c             	sub    esp,0x1c
c0016fe5:	c7 05 14 82 02 c0 38 64 01 c0 	mov    DWORD PTR ds:0xc0028214,0xc0016438
c0016fef:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016ff4:	85 c0                	test   eax,eax
c0016ff6:	74 1e                	je     c0017016 <gpFault(regs*, void*)+0x34>
c0016ff8:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016ffd:	83 ec 0c             	sub    esp,0xc
c0017000:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017004:	ff d0                	call   eax
c0017006:	83 c4 10             	add    esp,0x10
c0017009:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001700d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017012:	85 c0                	test   eax,eax
c0017014:	75 2e                	jne    c0017044 <gpFault(regs*, void*)+0x62>
c0017016:	83 ec 0c             	sub    esp,0xc
c0017019:	68 ae 1c 02 c0       	push   0xc0021cae
c001701e:	e8 73 ff ff ff       	call   c0016f96 <displayProgramFault(char const*)>
c0017023:	83 c4 10             	add    esp,0x10
c0017026:	83 ec 0c             	sub    esp,0xc
c0017029:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001702d:	e8 63 fb ff ff       	call   c0016b95 <displayDebugInfo(regs*)>
c0017032:	83 c4 10             	add    esp,0x10
c0017035:	83 ec 0c             	sub    esp,0xc
c0017038:	6a 00                	push   0x0
c001703a:	e8 99 ed ff ff       	call   c0015dd8 <Thr::terminateFromIRQ(int)>
c001703f:	83 c4 10             	add    esp,0x10
c0017042:	eb 01                	jmp    c0017045 <gpFault(regs*, void*)+0x63>
c0017044:	90                   	nop
c0017045:	83 c4 1c             	add    esp,0x1c
c0017048:	c3                   	ret    

c0017049 <pgFault(regs*, void*)>:
c0017049:	83 ec 1c             	sub    esp,0x1c
c001704c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017050:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017053:	0f 20 d0             	mov    eax,cr2
c0017056:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001705a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001705e:	83 ec 04             	sub    esp,0x4
c0017061:	52                   	push   edx
c0017062:	50                   	push   eax
c0017063:	68 8c 1d 02 c0       	push   0xc0021d8c
c0017068:	e8 cf 38 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001706d:	83 c4 10             	add    esp,0x10
c0017070:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017075:	8b 00                	mov    eax,DWORD PTR [eax]
c0017077:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001707a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017080:	0f 20 d2             	mov    edx,cr2
c0017083:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017087:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001708b:	83 ec 08             	sub    esp,0x8
c001708e:	52                   	push   edx
c001708f:	50                   	push   eax
c0017090:	e8 17 33 ff ff       	call   c000a3ac <VAS::tryLoadBackOffDisk(unsigned long)>
c0017095:	83 c4 10             	add    esp,0x10
c0017098:	0f b6 c0             	movzx  eax,al
c001709b:	85 c0                	test   eax,eax
c001709d:	75 2e                	jne    c00170cd <pgFault(regs*, void*)+0x84>
c001709f:	83 ec 0c             	sub    esp,0xc
c00170a2:	68 c7 1c 02 c0       	push   0xc0021cc7
c00170a7:	e8 ea fe ff ff       	call   c0016f96 <displayProgramFault(char const*)>
c00170ac:	83 c4 10             	add    esp,0x10
c00170af:	83 ec 0c             	sub    esp,0xc
c00170b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170b6:	e8 da fa ff ff       	call   c0016b95 <displayDebugInfo(regs*)>
c00170bb:	83 c4 10             	add    esp,0x10
c00170be:	83 ec 0c             	sub    esp,0xc
c00170c1:	6a 00                	push   0x0
c00170c3:	e8 10 ed ff ff       	call   c0015dd8 <Thr::terminateFromIRQ(int)>
c00170c8:	83 c4 10             	add    esp,0x10
c00170cb:	eb 01                	jmp    c00170ce <pgFault(regs*, void*)+0x85>
c00170cd:	90                   	nop
c00170ce:	83 c4 1c             	add    esp,0x1c
c00170d1:	c3                   	ret    

c00170d2 <otherISRHandler(regs*, void*)>:
c00170d2:	83 ec 0c             	sub    esp,0xc
c00170d5:	83 ec 0c             	sub    esp,0xc
c00170d8:	68 b4 1d 02 c0       	push   0xc0021db4
c00170dd:	e8 b4 fe ff ff       	call   c0016f96 <displayProgramFault(char const*)>
c00170e2:	83 c4 10             	add    esp,0x10
c00170e5:	83 ec 0c             	sub    esp,0xc
c00170e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170ec:	e8 a4 fa ff ff       	call   c0016b95 <displayDebugInfo(regs*)>
c00170f1:	83 c4 10             	add    esp,0x10
c00170f4:	83 ec 0c             	sub    esp,0xc
c00170f7:	6a 00                	push   0x0
c00170f9:	e8 da ec ff ff       	call   c0015dd8 <Thr::terminateFromIRQ(int)>
c00170fe:	83 c4 10             	add    esp,0x10
c0017101:	90                   	nop
c0017102:	83 c4 0c             	add    esp,0xc
c0017105:	c3                   	ret    

c0017106 <opcodeFault(regs*, void*)>:
c0017106:	55                   	push   ebp
c0017107:	89 e5                	mov    ebp,esp
c0017109:	83 ec 08             	sub    esp,0x8
c001710c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001710f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017112:	83 ec 08             	sub    esp,0x8
c0017115:	50                   	push   eax
c0017116:	68 d2 1c 02 c0       	push   0xc0021cd2
c001711b:	e8 1c 38 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0017120:	83 c4 10             	add    esp,0x10
c0017123:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017128:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001712e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017134:	0f b6 c0             	movzx  eax,al
c0017137:	85 c0                	test   eax,eax
c0017139:	74 21                	je     c001715c <opcodeFault(regs*, void*)+0x56>
c001713b:	83 ec 0c             	sub    esp,0xc
c001713e:	68 dc 1d 02 c0       	push   0xc0021ddc
c0017143:	e8 f4 37 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0017148:	83 c4 10             	add    esp,0x10
c001714b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001714e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017151:	8d 50 19             	lea    edx,[eax+0x19]
c0017154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017157:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001715a:	eb 2b                	jmp    c0017187 <opcodeFault(regs*, void*)+0x81>
c001715c:	83 ec 0c             	sub    esp,0xc
c001715f:	68 e0 1c 02 c0       	push   0xc0021ce0
c0017164:	e8 2d fe ff ff       	call   c0016f96 <displayProgramFault(char const*)>
c0017169:	83 c4 10             	add    esp,0x10
c001716c:	83 ec 0c             	sub    esp,0xc
c001716f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017172:	e8 1e fa ff ff       	call   c0016b95 <displayDebugInfo(regs*)>
c0017177:	83 c4 10             	add    esp,0x10
c001717a:	83 ec 0c             	sub    esp,0xc
c001717d:	6a 00                	push   0x0
c001717f:	e8 54 ec ff ff       	call   c0015dd8 <Thr::terminateFromIRQ(int)>
c0017184:	83 c4 10             	add    esp,0x10
c0017187:	c9                   	leave  
c0017188:	c3                   	ret    

c0017189 <i386SaveCoprocessor(void*)>:
c0017189:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001718d:	83 c0 3f             	add    eax,0x3f
c0017190:	83 e0 c0             	and    eax,0xffffffc0
c0017193:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017197:	ff 25 10 82 02 c0    	jmp    DWORD PTR ds:0xc0028210

c001719d <i386LoadCoprocessor(void*)>:
c001719d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171a1:	83 c0 3f             	add    eax,0x3f
c00171a4:	83 e0 c0             	and    eax,0xffffffc0
c00171a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00171ab:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c00171b1 <x87EmulHandler(regs*, void*)>:
c00171b1:	53                   	push   ebx
c00171b2:	83 ec 08             	sub    esp,0x8
c00171b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171ba:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00171be:	74 10                	je     c00171d0 <x87EmulHandler(regs*, void*)+0x1f>
c00171c0:	83 ec 0c             	sub    esp,0xc
c00171c3:	68 ed 1c 02 c0       	push   0xc0021ced
c00171c8:	e8 70 99 ff ff       	call   c0010b3d <KePanic(char const*)>
c00171cd:	83 c4 10             	add    esp,0x10
c00171d0:	0f 20 c0             	mov    eax,cr0
c00171d3:	a8 08                	test   al,0x8
c00171d5:	74 59                	je     c0017230 <x87EmulHandler(regs*, void*)+0x7f>
c00171d7:	0f 06                	clts   
c00171d9:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c00171de:	85 c0                	test   eax,eax
c00171e0:	74 0e                	je     c00171f0 <x87EmulHandler(regs*, void*)+0x3f>
c00171e2:	83 ec 0c             	sub    esp,0xc
c00171e5:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00171e8:	e8 9c ff ff ff       	call   c0017189 <i386SaveCoprocessor(void*)>
c00171ed:	83 c4 10             	add    esp,0x10
c00171f0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00171f6:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00171fa:	75 12                	jne    c001720e <x87EmulHandler(regs*, void*)+0x5d>
c00171fc:	83 ec 0c             	sub    esp,0xc
c00171ff:	68 40 02 00 00       	push   0x240
c0017204:	e8 c2 08 ff ff       	call   c0007acb <malloc>
c0017209:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001720c:	eb 10                	jmp    c001721e <x87EmulHandler(regs*, void*)+0x6d>
c001720e:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0017213:	83 ec 0c             	sub    esp,0xc
c0017216:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017219:	e8 7f ff ff ff       	call   c001719d <i386LoadCoprocessor(void*)>
c001721e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017223:	83 c4 10             	add    esp,0x10
c0017226:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c001722b:	83 c4 08             	add    esp,0x8
c001722e:	5b                   	pop    ebx
c001722f:	c3                   	ret    
c0017230:	83 ec 0c             	sub    esp,0xc
c0017233:	68 01 1d 02 c0       	push   0xc0021d01
c0017238:	e8 ff 36 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001723d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017245:	83 c4 18             	add    esp,0x18
c0017248:	5b                   	pop    ebx
c0017249:	e9 8a eb ff ff       	jmp    c0015dd8 <Thr::terminateFromIRQ(int)>

c001724e <HalInitialiseCoprocessor()>:
c001724e:	83 ec 10             	sub    esp,0x10
c0017251:	6a 00                	push   0x0
c0017253:	68 b1 71 01 c0       	push   0xc00171b1
c0017258:	6a 07                	push   0x7
c001725a:	c7 05 08 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028208,0x0
c0017264:	e8 41 53 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017269:	e8 32 70 00 00       	call   c001e2a0 <avxDetect>
c001726e:	83 c4 10             	add    esp,0x10
c0017271:	85 c0                	test   eax,eax
c0017273:	74 1c                	je     c0017291 <HalInitialiseCoprocessor()+0x43>
c0017275:	c7 05 10 82 02 c0 ca e2 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e2ca
c001727f:	c7 05 0c 82 02 c0 db e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e2db
c0017289:	83 c4 0c             	add    esp,0xc
c001728c:	e9 5b 70 00 00       	jmp    c001e2ec <avxInit>
c0017291:	e8 9a 73 00 00       	call   c001e630 <absolutelyNoChanceInHell>
c0017296:	85 c0                	test   eax,eax
c0017298:	74 1c                	je     c00172b6 <HalInitialiseCoprocessor()+0x68>
c001729a:	c7 05 10 82 02 c0 48 e6 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e648
c00172a4:	c7 05 0c 82 02 c0 50 e6 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e650
c00172ae:	83 c4 0c             	add    esp,0xc
c00172b1:	e9 a2 73 00 00       	jmp    c001e658 <sseInit>
c00172b6:	e8 bb 73 00 00       	call   c001e676 <x87Detect>
c00172bb:	85 c0                	test   eax,eax
c00172bd:	74 1c                	je     c00172db <HalInitialiseCoprocessor()+0x8d>
c00172bf:	c7 05 10 82 02 c0 91 e6 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e691
c00172c9:	c7 05 0c 82 02 c0 98 e6 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e698
c00172d3:	83 c4 0c             	add    esp,0xc
c00172d6:	e9 c4 73 00 00       	jmp    c001e69f <x87Init>
c00172db:	c7 05 10 82 02 c0 62 6b 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc0016b62
c00172e5:	c7 05 0c 82 02 c0 62 6b 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc0016b62
c00172ef:	0f 20 c0             	mov    eax,cr0
c00172f2:	83 c8 04             	or     eax,0x4
c00172f5:	0f 22 c0             	mov    cr0,eax
c00172f8:	83 c4 0c             	add    esp,0xc
c00172fb:	c3                   	ret    

c00172fc <HalPanic(char const*)>:
c00172fc:	53                   	push   ebx
c00172fd:	83 ec 10             	sub    esp,0x10
c0017300:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017304:	fa                   	cli    
c0017305:	53                   	push   ebx
c0017306:	68 17 1d 02 c0       	push   0xc0021d17
c001730b:	e8 2c 36 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0017310:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	85 c0                	test   eax,eax
c001731a:	74 09                	je     c0017325 <HalPanic(char const*)+0x29>
c001731c:	83 ec 0c             	sub    esp,0xc
c001731f:	53                   	push   ebx
c0017320:	ff d0                	call   eax
c0017322:	83 c4 10             	add    esp,0x10
c0017325:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c001732a:	85 c0                	test   eax,eax
c001732c:	0f 84 dc 00 00 00    	je     c001740e <HalPanic(char const*)+0x112>
c0017332:	52                   	push   edx
c0017333:	6a 01                	push   0x1
c0017335:	6a 0f                	push   0xf
c0017337:	50                   	push   eax
c0017338:	e8 7f 12 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001733d:	59                   	pop    ecx
c001733e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017344:	e8 63 14 ff ff       	call   c00087ac <VgaText::clearScreen()>
c0017349:	58                   	pop    eax
c001734a:	5a                   	pop    edx
c001734b:	68 e4 00 02 c0       	push   0xc00200e4
c0017350:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017356:	e8 99 12 ff ff       	call   c00085f4 <VgaText::setTitle(char*)>
c001735b:	83 c4 0c             	add    esp,0xc
c001735e:	6a 01                	push   0x1
c0017360:	6a 0f                	push   0xf
c0017362:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017368:	e8 4f 12 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001736d:	59                   	pop    ecx
c001736e:	58                   	pop    eax
c001736f:	68 30 1d 02 c0       	push   0xc0021d30
c0017374:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001737a:	e8 1f 17 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c001737f:	83 c4 0c             	add    esp,0xc
c0017382:	6a 0f                	push   0xf
c0017384:	6a 01                	push   0x1
c0017386:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001738c:	e8 2b 12 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017391:	58                   	pop    eax
c0017392:	5a                   	pop    edx
c0017393:	68 39 1d 02 c0       	push   0xc0021d39
c0017398:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001739e:	e8 fb 16 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c00173a3:	83 c4 0c             	add    esp,0xc
c00173a6:	6a 01                	push   0x1
c00173a8:	6a 0f                	push   0xf
c00173aa:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173b0:	e8 07 12 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00173b5:	59                   	pop    ecx
c00173b6:	58                   	pop    eax
c00173b7:	68 7d 1d 02 c0       	push   0xc0021d7d
c00173bc:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173c2:	e8 d7 16 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c00173c7:	58                   	pop    eax
c00173c8:	5a                   	pop    edx
c00173c9:	68 46 1d 02 c0       	push   0xc0021d46
c00173ce:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173d4:	e8 c5 16 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c00173d9:	59                   	pop    ecx
c00173da:	58                   	pop    eax
c00173db:	68 80 1d 02 c0       	push   0xc0021d80
c00173e0:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173e6:	e8 b3 16 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c00173eb:	58                   	pop    eax
c00173ec:	5a                   	pop    edx
c00173ed:	53                   	push   ebx
c00173ee:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173f4:	e8 a5 16 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c00173f9:	59                   	pop    ecx
c00173fa:	5b                   	pop    ebx
c00173fb:	68 7d 1d 02 c0       	push   0xc0021d7d
c0017400:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017406:	e8 93 16 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c001740b:	83 c4 10             	add    esp,0x10
c001740e:	eb fe                	jmp    c001740e <HalPanic(char const*)+0x112>

c0017410 <HalQueryPerformanceCounter()>:
c0017410:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017415:	31 d2                	xor    edx,edx
c0017417:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001741d:	31 c0                	xor    eax,eax
c001741f:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017426:	74 02                	je     c001742a <HalQueryPerformanceCounter()+0x1a>
c0017428:	0f 31                	rdtsc  
c001742a:	c3                   	ret    

c001742b <HalInitialise()>:
c001742b:	53                   	push   ebx
c001742c:	83 ec 08             	sub    esp,0x8
c001742f:	e8 ad 53 ff ff       	call   c000c7e1 <setupINTS()>
c0017434:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017439:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017440:	75 0f                	jne    c0017451 <HalInitialise()+0x26>
c0017442:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017448:	83 e2 fe             	and    edx,0xfffffffe
c001744b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017451:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c0017458:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001745e:	83 e2 fe             	and    edx,0xfffffffe
c0017461:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017467:	e8 a0 02 00 00       	call   c001770c <picOpen()>
c001746c:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017473:	74 0a                	je     c001747f <HalInitialise()+0x54>
c0017475:	e8 e2 01 00 00       	call   c001765c <picDisable()>
c001747a:	e8 99 67 00 00       	call   c001dc18 <apicOpen()>
c001747f:	50                   	push   eax
c0017480:	bb 0f 00 00 00       	mov    ebx,0xf
c0017485:	6a 00                	push   0x0
c0017487:	68 d2 70 01 c0       	push   0xc00170d2
c001748c:	6a 00                	push   0x0
c001748e:	e8 17 51 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017493:	83 c4 0c             	add    esp,0xc
c0017496:	6a 00                	push   0x0
c0017498:	68 d2 70 01 c0       	push   0xc00170d2
c001749d:	6a 01                	push   0x1
c001749f:	e8 06 51 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174a4:	83 c4 0c             	add    esp,0xc
c00174a7:	6a 00                	push   0x0
c00174a9:	68 63 6b 01 c0       	push   0xc0016b63
c00174ae:	6a 02                	push   0x2
c00174b0:	e8 f5 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174b5:	83 c4 0c             	add    esp,0xc
c00174b8:	6a 00                	push   0x0
c00174ba:	68 d2 70 01 c0       	push   0xc00170d2
c00174bf:	6a 03                	push   0x3
c00174c1:	e8 e4 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174c6:	83 c4 0c             	add    esp,0xc
c00174c9:	6a 00                	push   0x0
c00174cb:	68 d2 70 01 c0       	push   0xc00170d2
c00174d0:	6a 04                	push   0x4
c00174d2:	e8 d3 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174d7:	83 c4 0c             	add    esp,0xc
c00174da:	6a 00                	push   0x0
c00174dc:	68 d2 70 01 c0       	push   0xc00170d2
c00174e1:	6a 05                	push   0x5
c00174e3:	e8 c2 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174e8:	83 c4 0c             	add    esp,0xc
c00174eb:	6a 00                	push   0x0
c00174ed:	68 06 71 01 c0       	push   0xc0017106
c00174f2:	6a 06                	push   0x6
c00174f4:	e8 b1 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174f9:	83 c4 0c             	add    esp,0xc
c00174fc:	6a 00                	push   0x0
c00174fe:	68 7c 6b 01 c0       	push   0xc0016b7c
c0017503:	6a 08                	push   0x8
c0017505:	e8 a0 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c001750a:	83 c4 0c             	add    esp,0xc
c001750d:	6a 00                	push   0x0
c001750f:	68 d2 70 01 c0       	push   0xc00170d2
c0017514:	6a 09                	push   0x9
c0017516:	e8 8f 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c001751b:	83 c4 0c             	add    esp,0xc
c001751e:	6a 00                	push   0x0
c0017520:	68 d2 70 01 c0       	push   0xc00170d2
c0017525:	6a 0a                	push   0xa
c0017527:	e8 7e 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c001752c:	83 c4 0c             	add    esp,0xc
c001752f:	6a 00                	push   0x0
c0017531:	68 d2 70 01 c0       	push   0xc00170d2
c0017536:	6a 0b                	push   0xb
c0017538:	e8 6d 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c001753d:	83 c4 0c             	add    esp,0xc
c0017540:	6a 00                	push   0x0
c0017542:	68 e2 6f 01 c0       	push   0xc0016fe2
c0017547:	6a 0d                	push   0xd
c0017549:	e8 5c 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c001754e:	83 c4 0c             	add    esp,0xc
c0017551:	6a 00                	push   0x0
c0017553:	68 49 70 01 c0       	push   0xc0017049
c0017558:	6a 0e                	push   0xe
c001755a:	e8 4b 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c001755f:	83 c4 10             	add    esp,0x10
c0017562:	50                   	push   eax
c0017563:	6a 00                	push   0x0
c0017565:	68 d2 70 01 c0       	push   0xc00170d2
c001756a:	53                   	push   ebx
c001756b:	43                   	inc    ebx
c001756c:	e8 39 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017571:	83 c4 10             	add    esp,0x10
c0017574:	83 fb 1e             	cmp    ebx,0x1e
c0017577:	75 e9                	jne    c0017562 <HalInitialise()+0x137>
c0017579:	50                   	push   eax
c001757a:	6a 00                	push   0x0
c001757c:	68 37 1e 01 c0       	push   0xc0011e37
c0017581:	6a 60                	push   0x60
c0017583:	e8 22 50 ff ff       	call   c000c5aa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017588:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001758d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017597:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001759e:	e8 28 05 ff ff       	call   c0007acb <malloc>
c00175a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00175a6:	89 c3                	mov    ebx,eax
c00175a8:	e8 37 09 00 00       	call   c0017ee4 <RTC::RTC()>
c00175ad:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00175b7:	5a                   	pop    edx
c00175b8:	59                   	pop    ecx
c00175b9:	53                   	push   ebx
c00175ba:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175c0:	e8 af 4a ff ff       	call   c000c074 <Device::addChild(Device*)>
c00175c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175c7:	6a 00                	push   0x0
c00175c9:	6a 00                	push   0x0
c00175cb:	6a 00                	push   0x0
c00175cd:	53                   	push   ebx
c00175ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00175d1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00175d6:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00175dc:	83 c4 28             	add    esp,0x28
c00175df:	5b                   	pop    ebx
c00175e0:	c3                   	ret    

c00175e1 <HalMakeBeep(int)>:
c00175e1:	53                   	push   ebx
c00175e2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00175e6:	85 db                	test   ebx,ebx
c00175e8:	75 07                	jne    c00175f1 <HalMakeBeep(int)+0x10>
c00175ea:	e4 61                	in     al,0x61
c00175ec:	83 e0 fc             	and    eax,0xfffffffc
c00175ef:	eb 26                	jmp    c0017617 <HalMakeBeep(int)+0x36>
c00175f1:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00175f6:	99                   	cdq    
c00175f7:	f7 fb                	idiv   ebx
c00175f9:	89 c1                	mov    ecx,eax
c00175fb:	b0 b6                	mov    al,0xb6
c00175fd:	e6 43                	out    0x43,al
c00175ff:	88 c8                	mov    al,cl
c0017601:	e6 42                	out    0x42,al
c0017603:	89 c8                	mov    eax,ecx
c0017605:	c1 e8 08             	shr    eax,0x8
c0017608:	e6 42                	out    0x42,al
c001760a:	e4 61                	in     al,0x61
c001760c:	89 c2                	mov    edx,eax
c001760e:	83 ca 03             	or     edx,0x3
c0017611:	38 d0                	cmp    al,dl
c0017613:	74 04                	je     c0017619 <HalMakeBeep(int)+0x38>
c0017615:	88 d0                	mov    al,dl
c0017617:	e6 61                	out    0x61,al
c0017619:	5b                   	pop    ebx
c001761a:	c3                   	ret    

c001761b <HalGetRand()>:
c001761b:	31 c0                	xor    eax,eax
c001761d:	c3                   	ret    

c001761e <HalEndOfInterrupt(int)>:
c001761e:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017625:	74 23                	je     c001764a <HalEndOfInterrupt(int)+0x2c>
c0017627:	83 ec 14             	sub    esp,0x14
c001762a:	6a 1b                	push   0x1b
c001762c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017632:	e8 a3 fa fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0017637:	25 00 f0 ff ff       	and    eax,0xfffff000
c001763c:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017646:	83 c4 1c             	add    esp,0x1c
c0017649:	c3                   	ret    
c001764a:	e9 41 02 00 00       	jmp    c0017890 <picEOI(int)>

c001764f <HalRestart()>:
c001764f:	c3                   	ret    

c0017650 <HalShutdown()>:
c0017650:	c3                   	ret    

c0017651 <HalSleep()>:
c0017651:	c3                   	ret    
c0017652:	66 90                	xchg   ax,ax

c0017654 <picIoWait()>:
c0017654:	eb 00                	jmp    c0017656 <picIoWait()+0x2>
c0017656:	eb 00                	jmp    c0017658 <picIoWait()+0x4>
c0017658:	90                   	nop
c0017659:	c3                   	ret    
c001765a:	66 90                	xchg   ax,ax

c001765c <picDisable()>:
c001765c:	83 ec 10             	sub    esp,0x10
c001765f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017666:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001766b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001766f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017674:	ee                   	out    dx,al
c0017675:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001767c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017681:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017685:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001768a:	ee                   	out    dx,al
c001768b:	90                   	nop
c001768c:	83 c4 10             	add    esp,0x10
c001768f:	c3                   	ret    

c0017690 <picGetIRQReg(int)>:
c0017690:	83 ec 10             	sub    esp,0x10
c0017693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017697:	0f b6 c0             	movzx  eax,al
c001769a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00176a1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00176a5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00176a9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00176ae:	ee                   	out    dx,al
c00176af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176b3:	0f b6 c0             	movzx  eax,al
c00176b6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00176bd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00176c1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00176c5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00176ca:	ee                   	out    dx,al
c00176cb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00176d2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00176d7:	89 c2                	mov    edx,eax
c00176d9:	ec                   	in     al,dx
c00176da:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00176de:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00176e2:	0f b6 c0             	movzx  eax,al
c00176e5:	c1 e0 08             	shl    eax,0x8
c00176e8:	89 c1                	mov    ecx,eax
c00176ea:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00176f1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00176f6:	89 c2                	mov    edx,eax
c00176f8:	ec                   	in     al,dx
c00176f9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00176fd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017701:	0f b6 c0             	movzx  eax,al
c0017704:	09 c8                	or     eax,ecx
c0017706:	83 c4 10             	add    esp,0x10
c0017709:	c3                   	ret    
c001770a:	66 90                	xchg   ax,ax

c001770c <picOpen()>:
c001770c:	83 ec 50             	sub    esp,0x50
c001770f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017716:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001771b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001771f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017723:	ee                   	out    dx,al
c0017724:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001772b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017730:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017734:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017738:	ee                   	out    dx,al
c0017739:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017741:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017749:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017750:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017754:	89 c2                	mov    edx,eax
c0017756:	ec                   	in     al,dx
c0017757:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001775b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001775f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017763:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001776a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001776e:	89 c2                	mov    edx,eax
c0017770:	ec                   	in     al,dx
c0017771:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017775:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017779:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001777d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017784:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017789:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001778d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017791:	ee                   	out    dx,al
c0017792:	e8 bd fe ff ff       	call   c0017654 <picIoWait()>
c0017797:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001779e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00177a3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00177a7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00177ab:	ee                   	out    dx,al
c00177ac:	e8 a3 fe ff ff       	call   c0017654 <picIoWait()>
c00177b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00177b5:	0f b6 c0             	movzx  eax,al
c00177b8:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00177bf:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00177c3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00177c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177cb:	ee                   	out    dx,al
c00177cc:	e8 83 fe ff ff       	call   c0017654 <picIoWait()>
c00177d1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00177d5:	0f b6 c0             	movzx  eax,al
c00177d8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00177df:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00177e3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00177e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177eb:	ee                   	out    dx,al
c00177ec:	e8 63 fe ff ff       	call   c0017654 <picIoWait()>
c00177f1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00177f8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00177fd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017801:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017805:	ee                   	out    dx,al
c0017806:	e8 49 fe ff ff       	call   c0017654 <picIoWait()>
c001780b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017812:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017817:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001781b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001781f:	ee                   	out    dx,al
c0017820:	e8 2f fe ff ff       	call   c0017654 <picIoWait()>
c0017825:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001782c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017831:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017835:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017839:	ee                   	out    dx,al
c001783a:	e8 15 fe ff ff       	call   c0017654 <picIoWait()>
c001783f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017846:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001784b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001784f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017853:	ee                   	out    dx,al
c0017854:	e8 fb fd ff ff       	call   c0017654 <picIoWait()>
c0017859:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001785e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017865:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017869:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001786d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017871:	ee                   	out    dx,al
c0017872:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017877:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001787e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017882:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017886:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001788a:	ee                   	out    dx,al
c001788b:	90                   	nop
c001788c:	83 c4 50             	add    esp,0x50
c001788f:	c3                   	ret    

c0017890 <picEOI(int)>:
c0017890:	83 ec 10             	sub    esp,0x10
c0017893:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017898:	75 1e                	jne    c00178b8 <picEOI(int)+0x28>
c001789a:	6a 0b                	push   0xb
c001789c:	e8 ef fd ff ff       	call   c0017690 <picGetIRQReg(int)>
c00178a1:	83 c4 04             	add    esp,0x4
c00178a4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00178a9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00178ae:	25 80 00 00 00       	and    eax,0x80
c00178b3:	74 73                	je     c0017928 <picEOI(int)+0x98>
c00178b5:	8d 76 00             	lea    esi,[esi+0x0]
c00178b8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00178bd:	75 31                	jne    c00178f0 <picEOI(int)+0x60>
c00178bf:	6a 0b                	push   0xb
c00178c1:	e8 ca fd ff ff       	call   c0017690 <picGetIRQReg(int)>
c00178c6:	83 c4 04             	add    esp,0x4
c00178c9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00178ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178d2:	98                   	cwde   
c00178d3:	85 c0                	test   eax,eax
c00178d5:	78 19                	js     c00178f0 <picEOI(int)+0x60>
c00178d7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00178de:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00178e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00178e7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00178ec:	ee                   	out    dx,al
c00178ed:	eb 3d                	jmp    c001792c <picEOI(int)+0x9c>
c00178ef:	90                   	nop
c00178f0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00178f5:	7e 19                	jle    c0017910 <picEOI(int)+0x80>
c00178f7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00178fe:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017903:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017907:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001790c:	ee                   	out    dx,al
c001790d:	8d 76 00             	lea    esi,[esi+0x0]
c0017910:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017917:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001791c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017920:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017925:	ee                   	out    dx,al
c0017926:	eb 04                	jmp    c001792c <picEOI(int)+0x9c>
c0017928:	90                   	nop
c0017929:	8d 76 00             	lea    esi,[esi+0x0]
c001792c:	83 c4 10             	add    esp,0x10
c001792f:	c3                   	ret    

c0017930 <RTC::open(int, int, void*)>:
c0017930:	31 c0                	xor    eax,eax
c0017932:	c3                   	ret    
c0017933:	90                   	nop

c0017934 <RTC::close(int, int, void*)>:
c0017934:	31 c0                	xor    eax,eax
c0017936:	c3                   	ret    
c0017937:	90                   	nop

c0017938 <RTC::timeInSecondsUTC()>:
c0017938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001793c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017942:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017948:	c3                   	ret    
c0017949:	90                   	nop

c001794a <RTC::timeInDatetimeUTC()>:
c001794a:	53                   	push   ebx
c001794b:	83 ec 14             	sub    esp,0x14
c001794e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017952:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017956:	8b 10                	mov    edx,DWORD PTR [eax]
c0017958:	50                   	push   eax
c0017959:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001795c:	83 c4 0c             	add    esp,0xc
c001795f:	52                   	push   edx
c0017960:	50                   	push   eax
c0017961:	53                   	push   ebx
c0017962:	e8 81 44 ff ff       	call   c000bde8 <secondsToDatetime(unsigned long long)>
c0017967:	89 d8                	mov    eax,ebx
c0017969:	83 c4 14             	add    esp,0x14
c001796c:	5b                   	pop    ebx
c001796d:	c2 04 00             	ret    0x4

c0017970 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017970:	56                   	push   esi
c0017971:	53                   	push   ebx
c0017972:	83 ec 14             	sub    esp,0x14
c0017975:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017979:	8b 03                	mov    eax,DWORD PTR [ebx]
c001797b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001797e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017982:	52                   	push   edx
c0017983:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017987:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001798b:	50                   	push   eax
c001798c:	e8 57 44 ff ff       	call   c000bde8 <secondsToDatetime(unsigned long long)>
c0017991:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017999:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001799d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179a1:	89 f0                	mov    eax,esi
c00179a3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00179a7:	83 c4 20             	add    esp,0x20
c00179aa:	5b                   	pop    ebx
c00179ab:	5e                   	pop    esi
c00179ac:	ff e0                	jmp    eax

c00179ae <RTC::~RTC()>:
c00179ae:	83 ec 0c             	sub    esp,0xc
c00179b1:	ba 1c 1e 02 c0       	mov    edx,0xc0021e1c
c00179b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179ba:	89 10                	mov    DWORD PTR [eax],edx
c00179bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c0:	83 ec 0c             	sub    esp,0xc
c00179c3:	50                   	push   eax
c00179c4:	e8 ab 41 ff ff       	call   c000bb74 <Clock::~Clock()>
c00179c9:	83 c4 10             	add    esp,0x10
c00179cc:	90                   	nop
c00179cd:	83 c4 0c             	add    esp,0xc
c00179d0:	c3                   	ret    
c00179d1:	90                   	nop

c00179d2 <RTC::~RTC()>:
c00179d2:	83 ec 0c             	sub    esp,0xc
c00179d5:	83 ec 0c             	sub    esp,0xc
c00179d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179dc:	e8 cd ff ff ff       	call   c00179ae <RTC::~RTC()>
c00179e1:	83 c4 10             	add    esp,0x10
c00179e4:	83 ec 08             	sub    esp,0x8
c00179e7:	68 60 01 00 00       	push   0x160
c00179ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179f0:	e8 49 2e ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c00179f5:	83 c4 10             	add    esp,0x10
c00179f8:	83 c4 0c             	add    esp,0xc
c00179fb:	c3                   	ret    

c00179fc <RTC::get_update_in_progress_flag()>:
c00179fc:	83 ec 14             	sub    esp,0x14
c00179ff:	6a 0a                	push   0xa
c0017a01:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a07:	e8 86 f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a0c:	83 c4 1c             	add    esp,0x1c
c0017a0f:	0f b6 c0             	movzx  eax,al
c0017a12:	c1 e8 07             	shr    eax,0x7
c0017a15:	c3                   	ret    

c0017a16 <RTC::completeRTCRefresh()>:
c0017a16:	55                   	push   ebp
c0017a17:	57                   	push   edi
c0017a18:	56                   	push   esi
c0017a19:	53                   	push   ebx
c0017a1a:	83 ec 3c             	sub    esp,0x3c
c0017a1d:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017a23:	83 ec 0c             	sub    esp,0xc
c0017a26:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017a2a:	e8 cd ff ff ff       	call   c00179fc <RTC::get_update_in_progress_flag()>
c0017a2f:	83 c4 10             	add    esp,0x10
c0017a32:	84 c0                	test   al,al
c0017a34:	74 0e                	je     c0017a44 <RTC::completeRTCRefresh()+0x2e>
c0017a36:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017a3c:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017a42:	73 df                	jae    c0017a23 <RTC::completeRTCRefresh()+0xd>
c0017a44:	50                   	push   eax
c0017a45:	50                   	push   eax
c0017a46:	6a 00                	push   0x0
c0017a48:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a4e:	e8 3f f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a53:	89 c7                	mov    edi,eax
c0017a55:	58                   	pop    eax
c0017a56:	5a                   	pop    edx
c0017a57:	6a 02                	push   0x2
c0017a59:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a5f:	e8 2e f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a64:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0017a68:	59                   	pop    ecx
c0017a69:	5b                   	pop    ebx
c0017a6a:	6a 04                	push   0x4
c0017a6c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a72:	e8 1b f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a77:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017a7b:	5e                   	pop    esi
c0017a7c:	5d                   	pop    ebp
c0017a7d:	6a 07                	push   0x7
c0017a7f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a85:	e8 08 f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a8a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0017a8e:	58                   	pop    eax
c0017a8f:	5a                   	pop    edx
c0017a90:	6a 08                	push   0x8
c0017a92:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a98:	e8 f5 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a9d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017aa1:	59                   	pop    ecx
c0017aa2:	5b                   	pop    ebx
c0017aa3:	6a 09                	push   0x9
c0017aa5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aab:	e8 e2 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017ab0:	0f b6 c0             	movzx  eax,al
c0017ab3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ab7:	83 c4 10             	add    esp,0x10
c0017aba:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017ac0:	83 ec 0c             	sub    esp,0xc
c0017ac3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017ac7:	e8 30 ff ff ff       	call   c00179fc <RTC::get_update_in_progress_flag()>
c0017acc:	83 c4 10             	add    esp,0x10
c0017acf:	84 c0                	test   al,al
c0017ad1:	74 0e                	je     c0017ae1 <RTC::completeRTCRefresh()+0xcb>
c0017ad3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017ad9:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017adf:	73 df                	jae    c0017ac0 <RTC::completeRTCRefresh()+0xaa>
c0017ae1:	51                   	push   ecx
c0017ae2:	51                   	push   ecx
c0017ae3:	6a 00                	push   0x0
c0017ae5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aeb:	e8 a2 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017af0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017af4:	5b                   	pop    ebx
c0017af5:	5e                   	pop    esi
c0017af6:	6a 02                	push   0x2
c0017af8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017afe:	e8 8f f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b03:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017b07:	5d                   	pop    ebp
c0017b08:	58                   	pop    eax
c0017b09:	6a 04                	push   0x4
c0017b0b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b11:	e8 7c f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b16:	88 c3                	mov    bl,al
c0017b18:	58                   	pop    eax
c0017b19:	5a                   	pop    edx
c0017b1a:	6a 07                	push   0x7
c0017b1c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b22:	e8 6b f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b27:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017b2b:	59                   	pop    ecx
c0017b2c:	5e                   	pop    esi
c0017b2d:	6a 08                	push   0x8
c0017b2f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b35:	e8 58 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b3a:	5d                   	pop    ebp
c0017b3b:	89 c6                	mov    esi,eax
c0017b3d:	58                   	pop    eax
c0017b3e:	6a 09                	push   0x9
c0017b40:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b46:	e8 47 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b4b:	89 f9                	mov    ecx,edi
c0017b4d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017b51:	83 c4 10             	add    esp,0x10
c0017b54:	0f b6 e8             	movzx  ebp,al
c0017b57:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017b5c:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0017b60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b64:	74 27                	je     c0017b8d <RTC::completeRTCRefresh()+0x177>
c0017b66:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0017b6a:	89 f0                	mov    eax,esi
c0017b6c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017b70:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017b74:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017b78:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0017b7c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017b80:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017b84:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017b88:	e9 2d ff ff ff       	jmp    c0017aba <RTC::completeRTCRefresh()+0xa4>
c0017b8d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b92:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b96:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017b9a:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0017b9e:	75 c6                	jne    c0017b66 <RTC::completeRTCRefresh()+0x150>
c0017ba0:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017ba5:	89 f1                	mov    ecx,esi
c0017ba7:	0f b6 fb             	movzx  edi,bl
c0017baa:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0017bae:	0f b6 c9             	movzx  ecx,cl
c0017bb1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017bb5:	89 f1                	mov    ecx,esi
c0017bb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bbb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017bbf:	0f 94 c2             	sete   dl
c0017bc2:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0017bc6:	0f 94 c0             	sete   al
c0017bc9:	21 d0                	and    eax,edx
c0017bcb:	31 d2                	xor    edx,edx
c0017bcd:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017bd1:	0f 94 c2             	sete   dl
c0017bd4:	85 c2                	test   edx,eax
c0017bd6:	74 8e                	je     c0017b66 <RTC::completeRTCRefresh()+0x150>
c0017bd8:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0017bdc:	75 88                	jne    c0017b66 <RTC::completeRTCRefresh()+0x150>
c0017bde:	52                   	push   edx
c0017bdf:	52                   	push   edx
c0017be0:	6a 0b                	push   0xb
c0017be2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017be8:	e8 a5 f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017bed:	83 c4 10             	add    esp,0x10
c0017bf0:	a8 04                	test   al,0x4
c0017bf2:	75 7a                	jne    c0017c6e <RTC::completeRTCRefresh()+0x258>
c0017bf4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bf8:	c1 ef 04             	shr    edi,0x4
c0017bfb:	83 e6 0f             	and    esi,0xf
c0017bfe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017c02:	c1 ed 04             	shr    ebp,0x4
c0017c05:	6b ed 0a             	imul   ebp,ebp,0xa
c0017c08:	c1 ea 04             	shr    edx,0x4
c0017c0b:	6b d2 0a             	imul   edx,edx,0xa
c0017c0e:	83 e1 0f             	and    ecx,0xf
c0017c11:	01 d1                	add    ecx,edx
c0017c13:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c17:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0017c1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c1f:	c1 ea 04             	shr    edx,0x4
c0017c22:	6b d2 0a             	imul   edx,edx,0xa
c0017c25:	83 e1 0f             	and    ecx,0xf
c0017c28:	01 d1                	add    ecx,edx
c0017c2a:	89 fa                	mov    edx,edi
c0017c2c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017c30:	83 e2 07             	and    edx,0x7
c0017c33:	89 d9                	mov    ecx,ebx
c0017c35:	6b d2 0a             	imul   edx,edx,0xa
c0017c38:	83 e1 0f             	and    ecx,0xf
c0017c3b:	83 e3 80             	and    ebx,0xffffff80
c0017c3e:	01 d1                	add    ecx,edx
c0017c40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c44:	09 cb                	or     ebx,ecx
c0017c46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017c4a:	c1 ea 04             	shr    edx,0x4
c0017c4d:	6b d2 0a             	imul   edx,edx,0xa
c0017c50:	83 e1 0f             	and    ecx,0xf
c0017c53:	01 d1                	add    ecx,edx
c0017c55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c59:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017c5d:	c1 ea 04             	shr    edx,0x4
c0017c60:	6b d2 0a             	imul   edx,edx,0xa
c0017c63:	01 d6                	add    esi,edx
c0017c65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c69:	83 e2 0f             	and    edx,0xf
c0017c6c:	01 d5                	add    ebp,edx
c0017c6e:	a8 02                	test   al,0x2
c0017c70:	75 15                	jne    c0017c87 <RTC::completeRTCRefresh()+0x271>
c0017c72:	f6 c3 80             	test   bl,0x80
c0017c75:	74 10                	je     c0017c87 <RTC::completeRTCRefresh()+0x271>
c0017c77:	83 e3 7f             	and    ebx,0x7f
c0017c7a:	b9 18 00 00 00       	mov    ecx,0x18
c0017c7f:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017c82:	99                   	cdq    
c0017c83:	f7 f9                	idiv   ecx
c0017c85:	88 d3                	mov    bl,dl
c0017c87:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0017c8d:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0017c93:	77 06                	ja     c0017c9b <RTC::completeRTCRefresh()+0x285>
c0017c95:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0017c9b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017ca0:	31 c9                	xor    ecx,ecx
c0017ca2:	31 d2                	xor    edx,edx
c0017ca4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0017ca8:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017cac:	89 cd                	mov    ebp,ecx
c0017cae:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0017cb2:	c1 e7 10             	shl    edi,0x10
c0017cb5:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0017cbb:	c1 e0 10             	shl    eax,0x10
c0017cbe:	09 c5                	or     ebp,eax
c0017cc0:	89 e9                	mov    ecx,ebp
c0017cc2:	0f b7 c2             	movzx  eax,dx
c0017cc5:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0017cc9:	09 f8                	or     eax,edi
c0017ccb:	89 c2                	mov    edx,eax
c0017ccd:	50                   	push   eax
c0017cce:	50                   	push   eax
c0017ccf:	88 d9                	mov    cl,bl
c0017cd1:	51                   	push   ecx
c0017cd2:	52                   	push   edx
c0017cd3:	e8 8b 3f ff ff       	call   c000bc63 <datetimeToSeconds(datetime_t)>
c0017cd8:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0017cdc:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017ce2:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017ce8:	83 c4 4c             	add    esp,0x4c
c0017ceb:	5b                   	pop    ebx
c0017cec:	5e                   	pop    esi
c0017ced:	5f                   	pop    edi
c0017cee:	5d                   	pop    ebp
c0017cef:	c3                   	ret    

c0017cf0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017cf0:	55                   	push   ebp
c0017cf1:	57                   	push   edi
c0017cf2:	56                   	push   esi
c0017cf3:	53                   	push   ebx
c0017cf4:	83 ec 30             	sub    esp,0x30
c0017cf7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017cfb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017cff:	6a 00                	push   0x0
c0017d01:	6a 00                	push   0x0
c0017d03:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017d09:	e8 9c f5 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017d0e:	83 c4 0c             	add    esp,0xc
c0017d11:	6a 00                	push   0x0
c0017d13:	6a 02                	push   0x2
c0017d15:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017d1b:	e8 8a f5 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017d20:	89 f8                	mov    eax,edi
c0017d22:	89 f9                	mov    ecx,edi
c0017d24:	0f b6 c4             	movzx  eax,ah
c0017d27:	31 d2                	xor    edx,edx
c0017d29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d2d:	c1 e9 10             	shr    ecx,0x10
c0017d30:	89 f0                	mov    eax,esi
c0017d32:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017d36:	89 f0                	mov    eax,esi
c0017d38:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017d3c:	0f b6 c4             	movzx  eax,ah
c0017d3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d43:	89 f0                	mov    eax,esi
c0017d45:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017d49:	c1 e8 10             	shr    eax,0x10
c0017d4c:	b9 64 00 00 00       	mov    ecx,0x64
c0017d51:	f7 f1                	div    ecx
c0017d53:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017d57:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017d5b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017d5f:	59                   	pop    ecx
c0017d60:	5b                   	pop    ebx
c0017d61:	89 fb                	mov    ebx,edi
c0017d63:	6a 0b                	push   0xb
c0017d65:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017d6b:	e8 22 f4 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017d70:	83 c4 10             	add    esp,0x10
c0017d73:	a8 04                	test   al,0x4
c0017d75:	89 c5                	mov    ebp,eax
c0017d77:	75 6e                	jne    c0017de7 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017d79:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d7d:	31 d2                	xor    edx,edx
c0017d7f:	0f b6 c1             	movzx  eax,cl
c0017d82:	b9 0a 00 00 00       	mov    ecx,0xa
c0017d87:	f7 f1                	div    ecx
c0017d89:	c1 e0 04             	shl    eax,0x4
c0017d8c:	09 d0                	or     eax,edx
c0017d8e:	31 d2                	xor    edx,edx
c0017d90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d94:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017d99:	f7 f1                	div    ecx
c0017d9b:	c1 e0 04             	shl    eax,0x4
c0017d9e:	09 d0                	or     eax,edx
c0017da0:	31 d2                	xor    edx,edx
c0017da2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017da6:	0f b6 c3             	movzx  eax,bl
c0017da9:	f7 f1                	div    ecx
c0017dab:	c1 e0 04             	shl    eax,0x4
c0017dae:	09 d0                	or     eax,edx
c0017db0:	31 d2                	xor    edx,edx
c0017db2:	89 c3                	mov    ebx,eax
c0017db4:	89 f0                	mov    eax,esi
c0017db6:	0f b6 c0             	movzx  eax,al
c0017db9:	f7 f1                	div    ecx
c0017dbb:	c1 e0 04             	shl    eax,0x4
c0017dbe:	09 d0                	or     eax,edx
c0017dc0:	31 d2                	xor    edx,edx
c0017dc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017dc6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017dcb:	f7 f1                	div    ecx
c0017dcd:	c1 e0 04             	shl    eax,0x4
c0017dd0:	09 d0                	or     eax,edx
c0017dd2:	31 d2                	xor    edx,edx
c0017dd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017dd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ddc:	f7 f1                	div    ecx
c0017dde:	c1 e0 04             	shl    eax,0x4
c0017de1:	09 d0                	or     eax,edx
c0017de3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017de7:	83 e5 02             	and    ebp,0x2
c0017dea:	75 1e                	jne    c0017e0a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017dec:	0f b6 c3             	movzx  eax,bl
c0017def:	83 f8 0b             	cmp    eax,0xb
c0017df2:	76 10                	jbe    c0017e04 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017df4:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017df7:	84 d2                	test   dl,dl
c0017df9:	88 d3                	mov    bl,dl
c0017dfb:	75 02                	jne    c0017dff <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017dfd:	b3 0c                	mov    bl,0xc
c0017dff:	83 cb 80             	or     ebx,0xffffff80
c0017e02:	eb 06                	jmp    c0017e0a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017e04:	85 c0                	test   eax,eax
c0017e06:	75 02                	jne    c0017e0a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017e08:	b3 0c                	mov    bl,0xc
c0017e0a:	50                   	push   eax
c0017e0b:	0f b6 db             	movzx  ebx,bl
c0017e0e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017e13:	52                   	push   edx
c0017e14:	6a 00                	push   0x0
c0017e16:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e1c:	e8 89 f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e21:	83 c4 0c             	add    esp,0xc
c0017e24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017e29:	50                   	push   eax
c0017e2a:	6a 02                	push   0x2
c0017e2c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e32:	e8 73 f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e37:	83 c4 0c             	add    esp,0xc
c0017e3a:	53                   	push   ebx
c0017e3b:	6a 04                	push   0x4
c0017e3d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e43:	e8 62 f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e48:	83 c4 0c             	add    esp,0xc
c0017e4b:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017e50:	52                   	push   edx
c0017e51:	6a 07                	push   0x7
c0017e53:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e59:	e8 4c f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e5e:	83 c4 0c             	add    esp,0xc
c0017e61:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017e66:	50                   	push   eax
c0017e67:	6a 08                	push   0x8
c0017e69:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e6f:	e8 36 f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e74:	83 c4 0c             	add    esp,0xc
c0017e77:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017e7c:	55                   	push   ebp
c0017e7d:	6a 09                	push   0x9
c0017e7f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e85:	e8 20 f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e8a:	5a                   	pop    edx
c0017e8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017e8f:	e8 82 fb ff ff       	call   c0017a16 <RTC::completeRTCRefresh()>
c0017e94:	83 c4 3c             	add    esp,0x3c
c0017e97:	b0 01                	mov    al,0x1
c0017e99:	5b                   	pop    ebx
c0017e9a:	5e                   	pop    esi
c0017e9b:	5f                   	pop    edi
c0017e9c:	5d                   	pop    ebp
c0017e9d:	c3                   	ret    

c0017e9e <rtcIRQHandler(regs*, void*)>:
c0017e9e:	53                   	push   ebx
c0017e9f:	83 ec 10             	sub    esp,0x10
c0017ea2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017ea6:	6a 0c                	push   0xc
c0017ea8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017eae:	e8 df f2 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017eb3:	83 c4 10             	add    esp,0x10
c0017eb6:	a8 80                	test   al,0x80
c0017eb8:	74 24                	je     c0017ede <rtcIRQHandler(regs*, void*)+0x40>
c0017eba:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017ec1:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017ec8:	66 ff 05 18 82 02 c0 	inc    WORD PTR ds:0xc0028218
c0017ecf:	75 0d                	jne    c0017ede <rtcIRQHandler(regs*, void*)+0x40>
c0017ed1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017ed5:	83 c4 08             	add    esp,0x8
c0017ed8:	5b                   	pop    ebx
c0017ed9:	e9 38 fb ff ff       	jmp    c0017a16 <RTC::completeRTCRefresh()>
c0017ede:	83 c4 08             	add    esp,0x8
c0017ee1:	5b                   	pop    ebx
c0017ee2:	c3                   	ret    
c0017ee3:	90                   	nop

c0017ee4 <RTC::RTC()>:
c0017ee4:	83 ec 1c             	sub    esp,0x1c
c0017ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eeb:	83 ec 08             	sub    esp,0x8
c0017eee:	68 ff 1d 02 c0       	push   0xc0021dff
c0017ef3:	50                   	push   eax
c0017ef4:	e8 45 3c ff ff       	call   c000bb3e <Clock::Clock(char const*)>
c0017ef9:	83 c4 10             	add    esp,0x10
c0017efc:	ba 1c 1e 02 c0       	mov    edx,0xc0021e1c
c0017f01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f05:	89 10                	mov    DWORD PTR [eax],edx
c0017f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f0b:	83 ec 0c             	sub    esp,0xc
c0017f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f12:	6a 01                	push   0x1
c0017f14:	68 9e 7e 01 c0       	push   0xc0017e9e
c0017f19:	6a 08                	push   0x8
c0017f1b:	50                   	push   eax
c0017f1c:	e8 ff 40 ff ff       	call   c000c020 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017f21:	83 c4 20             	add    esp,0x20
c0017f24:	89 c2                	mov    edx,eax
c0017f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017f30:	fa                   	cli    
c0017f31:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017f36:	83 c0 01             	add    eax,0x1
c0017f39:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017f3e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017f43:	83 ec 08             	sub    esp,0x8
c0017f46:	6a 0b                	push   0xb
c0017f48:	50                   	push   eax
c0017f49:	e8 44 f2 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017f4e:	83 c4 10             	add    esp,0x10
c0017f51:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f55:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017f5a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017f5e:	83 ca 10             	or     edx,0x10
c0017f61:	0f b6 d2             	movzx  edx,dl
c0017f64:	83 ec 04             	sub    esp,0x4
c0017f67:	52                   	push   edx
c0017f68:	6a 0b                	push   0xb
c0017f6a:	50                   	push   eax
c0017f6b:	e8 3a f3 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f70:	83 c4 10             	add    esp,0x10
c0017f73:	83 ec 0c             	sub    esp,0xc
c0017f76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f7a:	e8 97 fa ff ff       	call   c0017a16 <RTC::completeRTCRefresh()>
c0017f7f:	83 c4 10             	add    esp,0x10
c0017f82:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017f87:	83 e8 01             	sub    eax,0x1
c0017f8a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017f8f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017f94:	85 c0                	test   eax,eax
c0017f96:	75 01                	jne    c0017f99 <RTC::RTC()+0xb5>
c0017f98:	fb                   	sti    
c0017f99:	90                   	nop
c0017f9a:	83 c4 1c             	add    esp,0x1c
c0017f9d:	c3                   	ret    
c0017f9e:	66 90                	xchg   ax,ax

c0017fa0 <HalConsoleScroll(int, int)>:
c0017fa0:	83 ec 10             	sub    esp,0x10
c0017fa3:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017fab:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017fb3:	90                   	nop
c0017fb4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017fb9:	0f 8f e1 00 00 00    	jg     c00180a0 <HalConsoleScroll(int, int)+0x100>
c0017fbf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017fc7:	90                   	nop
c0017fc8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017fd0:	0f 8f be 00 00 00    	jg     c0018094 <HalConsoleScroll(int, int)+0xf4>
c0017fd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017fda:	89 d0                	mov    eax,edx
c0017fdc:	c1 e0 02             	shl    eax,0x2
c0017fdf:	01 d0                	add    eax,edx
c0017fe1:	c1 e0 05             	shl    eax,0x5
c0017fe4:	89 c2                	mov    edx,eax
c0017fe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fea:	01 d0                	add    eax,edx
c0017fec:	89 c2                	mov    edx,eax
c0017fee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ff2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ff9:	89 d0                	mov    eax,edx
c0017ffb:	c1 e0 02             	shl    eax,0x2
c0017ffe:	01 d0                	add    eax,edx
c0018000:	c1 e0 05             	shl    eax,0x5
c0018003:	89 c2                	mov    edx,eax
c0018005:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018009:	01 d0                	add    eax,edx
c001800b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018011:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018015:	01 d0                	add    eax,edx
c0018017:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018019:	88 10                	mov    BYTE PTR [eax],dl
c001801b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018020:	75 66                	jne    c0018088 <HalConsoleScroll(int, int)+0xe8>
c0018022:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018026:	83 e0 01             	and    eax,0x1
c0018029:	74 39                	je     c0018064 <HalConsoleScroll(int, int)+0xc4>
c001802b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001802f:	83 e0 0f             	and    eax,0xf
c0018032:	88 c2                	mov    dl,al
c0018034:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018038:	c1 e0 04             	shl    eax,0x4
c001803b:	09 d0                	or     eax,edx
c001803d:	88 c1                	mov    cl,al
c001803f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018043:	89 d0                	mov    eax,edx
c0018045:	c1 e0 02             	shl    eax,0x2
c0018048:	01 d0                	add    eax,edx
c001804a:	c1 e0 05             	shl    eax,0x5
c001804d:	89 c2                	mov    edx,eax
c001804f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018053:	01 d0                	add    eax,edx
c0018055:	89 c2                	mov    edx,eax
c0018057:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001805b:	01 d0                	add    eax,edx
c001805d:	88 ca                	mov    dl,cl
c001805f:	88 10                	mov    BYTE PTR [eax],dl
c0018061:	eb 25                	jmp    c0018088 <HalConsoleScroll(int, int)+0xe8>
c0018063:	90                   	nop
c0018064:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018068:	89 d0                	mov    eax,edx
c001806a:	c1 e0 02             	shl    eax,0x2
c001806d:	01 d0                	add    eax,edx
c001806f:	c1 e0 05             	shl    eax,0x5
c0018072:	89 c2                	mov    edx,eax
c0018074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018078:	01 d0                	add    eax,edx
c001807a:	89 c2                	mov    edx,eax
c001807c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018080:	01 d0                	add    eax,edx
c0018082:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018085:	8d 76 00             	lea    esi,[esi+0x0]
c0018088:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001808d:	e9 36 ff ff ff       	jmp    c0017fc8 <HalConsoleScroll(int, int)+0x28>
c0018092:	66 90                	xchg   ax,ax
c0018094:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018099:	e9 16 ff ff ff       	jmp    c0017fb4 <HalConsoleScroll(int, int)+0x14>
c001809e:	66 90                	xchg   ax,ax
c00180a0:	90                   	nop
c00180a1:	83 c4 10             	add    esp,0x10
c00180a4:	c3                   	ret    
c00180a5:	8d 76 00             	lea    esi,[esi+0x0]

c00180a8 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00180a8:	83 ec 14             	sub    esp,0x14
c00180ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180af:	88 04 24             	mov    BYTE PTR [esp],al
c00180b2:	8a 04 24             	mov    al,BYTE PTR [esp]
c00180b5:	0f b6 c0             	movzx  eax,al
c00180b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180bc:	89 d1                	mov    ecx,edx
c00180be:	83 e1 0f             	and    ecx,0xf
c00180c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180c5:	c1 e2 04             	shl    edx,0x4
c00180c8:	0f b6 d2             	movzx  edx,dl
c00180cb:	09 ca                	or     edx,ecx
c00180cd:	c1 e2 08             	shl    edx,0x8
c00180d0:	09 d0                	or     eax,edx
c00180d2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00180d7:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00180df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180e3:	89 d0                	mov    eax,edx
c00180e5:	c1 e0 02             	shl    eax,0x2
c00180e8:	01 d0                	add    eax,edx
c00180ea:	c1 e0 04             	shl    eax,0x4
c00180ed:	89 c2                	mov    edx,eax
c00180ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180f3:	01 d0                	add    eax,edx
c00180f5:	d1 e0                	shl    eax,1
c00180f7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00180fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180ff:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018104:	66 89 10             	mov    WORD PTR [eax],dx
c0018107:	90                   	nop
c0018108:	83 c4 14             	add    esp,0x14
c001810b:	c3                   	ret    

c001810c <HalConsoleCursorUpdate(int, int)>:
c001810c:	83 ec 20             	sub    esp,0x20
c001810f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018113:	89 c2                	mov    edx,eax
c0018115:	c1 e2 02             	shl    edx,0x2
c0018118:	01 d0                	add    eax,edx
c001811a:	c1 e0 04             	shl    eax,0x4
c001811d:	89 c2                	mov    edx,eax
c001811f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018123:	01 d0                	add    eax,edx
c0018125:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001812a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018131:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018136:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001813a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001813e:	ee                   	out    dx,al
c001813f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018144:	0f b6 c0             	movzx  eax,al
c0018147:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001814e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018152:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018156:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001815a:	ee                   	out    dx,al
c001815b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018162:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018167:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001816b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001816f:	ee                   	out    dx,al
c0018170:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018175:	c1 e8 08             	shr    eax,0x8
c0018178:	0f b6 c0             	movzx  eax,al
c001817b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018182:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018186:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001818a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001818e:	ee                   	out    dx,al
c001818f:	90                   	nop
c0018190:	83 c4 20             	add    esp,0x20
c0018193:	c3                   	ret    

c0018194 <FAT::getName()>:
c0018194:	b8 50 1e 02 c0       	mov    eax,0xc0021e50
c0018199:	c3                   	ret    
c001819a:	66 90                	xchg   ax,ax

c001819c <FAT::tell(void*, unsigned long long*)>:
c001819c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00181a1:	75 09                	jne    c00181ac <FAT::tell(void*, unsigned long long*)+0x10>
c00181a3:	b8 04 00 00 00       	mov    eax,0x4
c00181a8:	c3                   	ret    
c00181a9:	8d 76 00             	lea    esi,[esi+0x0]
c00181ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00181b1:	75 09                	jne    c00181bc <FAT::tell(void*, unsigned long long*)+0x20>
c00181b3:	b8 04 00 00 00       	mov    eax,0x4
c00181b8:	c3                   	ret    
c00181b9:	8d 76 00             	lea    esi,[esi+0x0]
c00181bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181c0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00181c3:	ba 00 00 00 00       	mov    edx,0x0
c00181c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00181cc:	89 01                	mov    DWORD PTR [ecx],eax
c00181ce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00181d1:	b8 00 00 00 00       	mov    eax,0x0
c00181d6:	c3                   	ret    
c00181d7:	90                   	nop

c00181d8 <FAT::stat(void*, unsigned long long*)>:
c00181d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00181dd:	75 09                	jne    c00181e8 <FAT::stat(void*, unsigned long long*)+0x10>
c00181df:	b8 04 00 00 00       	mov    eax,0x4
c00181e4:	c3                   	ret    
c00181e5:	8d 76 00             	lea    esi,[esi+0x0]
c00181e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00181ed:	75 09                	jne    c00181f8 <FAT::stat(void*, unsigned long long*)+0x20>
c00181ef:	b8 04 00 00 00       	mov    eax,0x4
c00181f4:	c3                   	ret    
c00181f5:	8d 76 00             	lea    esi,[esi+0x0]
c00181f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00181ff:	ba 00 00 00 00       	mov    edx,0x0
c0018204:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018208:	89 01                	mov    DWORD PTR [ecx],eax
c001820a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001820d:	b8 00 00 00 00       	mov    eax,0x0
c0018212:	c3                   	ret    
c0018213:	90                   	nop

c0018214 <FAT::~FAT()>:
c0018214:	83 ec 0c             	sub    esp,0xc
c0018217:	ba 9c 1e 02 c0       	mov    edx,0xc0021e9c
c001821c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018220:	89 10                	mov    DWORD PTR [eax],edx
c0018222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018226:	83 ec 0c             	sub    esp,0xc
c0018229:	50                   	push   eax
c001822a:	e8 29 2d ff ff       	call   c000af58 <Filesystem::~Filesystem()>
c001822f:	83 c4 10             	add    esp,0x10
c0018232:	90                   	nop
c0018233:	83 c4 0c             	add    esp,0xc
c0018236:	c3                   	ret    
c0018237:	90                   	nop

c0018238 <FAT::~FAT()>:
c0018238:	83 ec 0c             	sub    esp,0xc
c001823b:	83 ec 0c             	sub    esp,0xc
c001823e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018242:	e8 cd ff ff ff       	call   c0018214 <FAT::~FAT()>
c0018247:	83 c4 10             	add    esp,0x10
c001824a:	83 ec 08             	sub    esp,0x8
c001824d:	6a 08                	push   0x8
c001824f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018253:	e8 e6 25 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c0018258:	83 c4 10             	add    esp,0x10
c001825b:	83 c4 0c             	add    esp,0xc
c001825e:	c3                   	ret    
c001825f:	90                   	nop

c0018260 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018260:	83 ec 1c             	sub    esp,0x1c
c0018263:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001826a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001826f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018273:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001827a:	83 f8 ff             	cmp    eax,0xffffffff
c001827d:	75 35                	jne    c00182b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001827f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018283:	88 c2                	mov    dl,al
c0018285:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001828a:	01 d0                	add    eax,edx
c001828c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018290:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018296:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001829a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00182a1:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182aa:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00182b1:	eb 19                	jmp    c00182cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00182b3:	90                   	nop
c00182b4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00182b8:	88 c2                	mov    dl,al
c00182ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182be:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00182c5:	01 d0                	add    eax,edx
c00182c7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00182cb:	90                   	nop
c00182cc:	83 ec 04             	sub    esp,0x4
c00182cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00182d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00182d7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00182db:	50                   	push   eax
c00182dc:	e8 12 cd fe ff       	call   c0004ff3 <f_getlabel>
c00182e1:	83 c4 10             	add    esp,0x10
c00182e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00182ed:	75 09                	jne    c00182f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00182ef:	b8 00 00 00 00       	mov    eax,0x0
c00182f4:	eb 0a                	jmp    c0018300 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00182f6:	66 90                	xchg   ax,ax
c00182f8:	b8 01 00 00 00       	mov    eax,0x1
c00182fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018300:	83 c4 1c             	add    esp,0x1c
c0018303:	c3                   	ret    

c0018304 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018304:	53                   	push   ebx
c0018305:	83 ec 58             	sub    esp,0x58
c0018308:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018310:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018314:	b9 00 00 00 00       	mov    ecx,0x0
c0018319:	b8 3c 00 00 00       	mov    eax,0x3c
c001831e:	83 e0 f8             	and    eax,0xfffffff8
c0018321:	89 c3                	mov    ebx,eax
c0018323:	b8 00 00 00 00       	mov    eax,0x0
c0018328:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001832c:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018330:	83 c0 08             	add    eax,0x8
c0018333:	39 d8                	cmp    eax,ebx
c0018335:	72 f1                	jb     c0018328 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018337:	01 c2                	add    edx,eax
c0018339:	89 0a                	mov    DWORD PTR [edx],ecx
c001833b:	83 c2 04             	add    edx,0x4
c001833e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018342:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018349:	83 f8 ff             	cmp    eax,0xffffffff
c001834c:	75 36                	jne    c0018384 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001834e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018352:	88 c2                	mov    dl,al
c0018354:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018359:	01 d0                	add    eax,edx
c001835b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001835f:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018365:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018369:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018370:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018375:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018379:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018380:	eb 1a                	jmp    c001839c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018382:	66 90                	xchg   ax,ax
c0018384:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018388:	88 c2                	mov    dl,al
c001838a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001838e:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018395:	01 d0                	add    eax,edx
c0018397:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001839b:	90                   	nop
c001839c:	83 ec 08             	sub    esp,0x8
c001839f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00183a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00183a7:	50                   	push   eax
c00183a8:	e8 c3 84 fe ff       	call   c0000870 <strcat>
c00183ad:	83 c4 10             	add    esp,0x10
c00183b0:	83 ec 0c             	sub    esp,0xc
c00183b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00183b7:	50                   	push   eax
c00183b8:	e8 8a cd fe ff       	call   c0005147 <f_setlabel>
c00183bd:	83 c4 10             	add    esp,0x10
c00183c0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00183c4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00183c9:	75 09                	jne    c00183d4 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c00183cb:	b8 00 00 00 00       	mov    eax,0x0
c00183d0:	eb 0a                	jmp    c00183dc <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c00183d2:	66 90                	xchg   ax,ax
c00183d4:	b8 01 00 00 00       	mov    eax,0x1
c00183d9:	8d 76 00             	lea    esi,[esi+0x0]
c00183dc:	83 c4 58             	add    esp,0x58
c00183df:	5b                   	pop    ebx
c00183e0:	c3                   	ret    
c00183e1:	90                   	nop
c00183e2:	66 90                	xchg   ax,ax

c00183e4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00183e4:	83 ec 2c             	sub    esp,0x2c
c00183e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00183ef:	83 ec 08             	sub    esp,0x8
c00183f2:	68 74 1e 02 c0       	push   0xc0021e74
c00183f7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00183fb:	e8 80 83 fe ff       	call   c0000780 <strcmp>
c0018400:	83 c4 10             	add    esp,0x10
c0018403:	85 c0                	test   eax,eax
c0018405:	0f 94 c0             	sete   al
c0018408:	0f b6 c0             	movzx  eax,al
c001840b:	85 c0                	test   eax,eax
c001840d:	74 0d                	je     c001841c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001840f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018417:	e9 c0 00 00 00       	jmp    c00184dc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001841c:	83 ec 08             	sub    esp,0x8
c001841f:	68 66 1e 02 c0       	push   0xc0021e66
c0018424:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018428:	e8 53 83 fe ff       	call   c0000780 <strcmp>
c001842d:	83 c4 10             	add    esp,0x10
c0018430:	85 c0                	test   eax,eax
c0018432:	0f 94 c0             	sete   al
c0018435:	0f b6 c0             	movzx  eax,al
c0018438:	85 c0                	test   eax,eax
c001843a:	74 10                	je     c001844c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001843c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018444:	e9 93 00 00 00       	jmp    c00184dc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018449:	8d 76 00             	lea    esi,[esi+0x0]
c001844c:	83 ec 08             	sub    esp,0x8
c001844f:	68 6c 1e 02 c0       	push   0xc0021e6c
c0018454:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018458:	e8 23 83 fe ff       	call   c0000780 <strcmp>
c001845d:	83 c4 10             	add    esp,0x10
c0018460:	85 c0                	test   eax,eax
c0018462:	0f 94 c0             	sete   al
c0018465:	0f b6 c0             	movzx  eax,al
c0018468:	85 c0                	test   eax,eax
c001846a:	74 0c                	je     c0018478 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001846c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018474:	eb 66                	jmp    c00184dc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018476:	66 90                	xchg   ax,ax
c0018478:	83 ec 08             	sub    esp,0x8
c001847b:	68 9c f7 01 c0       	push   0xc001f79c
c0018480:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018484:	e8 f7 82 fe ff       	call   c0000780 <strcmp>
c0018489:	83 c4 10             	add    esp,0x10
c001848c:	85 c0                	test   eax,eax
c001848e:	0f 94 c0             	sete   al
c0018491:	0f b6 c0             	movzx  eax,al
c0018494:	85 c0                	test   eax,eax
c0018496:	74 0c                	je     c00184a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018498:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00184a0:	eb 3a                	jmp    c00184dc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00184a2:	66 90                	xchg   ax,ax
c00184a4:	83 ec 08             	sub    esp,0x8
c00184a7:	68 72 1e 02 c0       	push   0xc0021e72
c00184ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00184b0:	e8 cb 82 fe ff       	call   c0000780 <strcmp>
c00184b5:	83 c4 10             	add    esp,0x10
c00184b8:	85 c0                	test   eax,eax
c00184ba:	0f 94 c0             	sete   al
c00184bd:	0f b6 c0             	movzx  eax,al
c00184c0:	85 c0                	test   eax,eax
c00184c2:	74 0c                	je     c00184d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00184c4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00184cc:	eb 0e                	jmp    c00184dc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00184ce:	66 90                	xchg   ax,ax
c00184d0:	b8 08 00 00 00       	mov    eax,0x8
c00184d5:	e9 ea 00 00 00       	jmp    c00185c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00184da:	66 90                	xchg   ax,ax
c00184dc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00184e3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00184e8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00184ec:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00184f3:	83 f8 ff             	cmp    eax,0xffffffff
c00184f6:	75 34                	jne    c001852c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00184f8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00184fc:	88 c2                	mov    dl,al
c00184fe:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018503:	01 d0                	add    eax,edx
c0018505:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018509:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001850f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018513:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001851a:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001851f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018523:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001852a:	eb 18                	jmp    c0018544 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001852c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018530:	88 c2                	mov    dl,al
c0018532:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018536:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001853d:	01 d0                	add    eax,edx
c001853f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018543:	90                   	nop
c0018544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018548:	88 04 24             	mov    BYTE PTR [esp],al
c001854b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001854f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018553:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001855b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018560:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018568:	83 ec 0c             	sub    esp,0xc
c001856b:	68 00 20 00 00       	push   0x2000
c0018570:	e8 56 f5 fe ff       	call   c0007acb <malloc>
c0018575:	83 c4 10             	add    esp,0x10
c0018578:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001857c:	68 00 20 00 00       	push   0x2000
c0018581:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018585:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018589:	50                   	push   eax
c001858a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001858e:	50                   	push   eax
c001858f:	e8 b0 ce fe ff       	call   c0005444 <f_mkfs>
c0018594:	83 c4 10             	add    esp,0x10
c0018597:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001859b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00185a0:	75 0a                	jne    c00185ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00185a2:	b8 00 00 00 00       	mov    eax,0x0
c00185a7:	eb 1b                	jmp    c00185c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00185a9:	8d 76 00             	lea    esi,[esi+0x0]
c00185ac:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00185b1:	75 09                	jne    c00185bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00185b3:	b8 09 00 00 00       	mov    eax,0x9
c00185b8:	eb 0a                	jmp    c00185c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00185ba:	66 90                	xchg   ax,ax
c00185bc:	b8 01 00 00 00       	mov    eax,0x1
c00185c1:	8d 76 00             	lea    esi,[esi+0x0]
c00185c4:	83 c4 2c             	add    esp,0x2c
c00185c7:	c3                   	ret    

c00185c8 <FAT::tryMount(LogicalDisk*, int)>:
c00185c8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00185ce:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00185d3:	83 f8 14             	cmp    eax,0x14
c00185d6:	75 18                	jne    c00185f0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00185d8:	83 ec 0c             	sub    esp,0xc
c00185db:	68 78 1e 02 c0       	push   0xc0021e78
c00185e0:	e8 58 85 ff ff       	call   c0010b3d <KePanic(char const*)>
c00185e5:	83 c4 10             	add    esp,0x10
c00185e8:	b0 00                	mov    al,0x0
c00185ea:	e9 ed 01 00 00       	jmp    c00187dc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00185ef:	90                   	nop
c00185f0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00185f7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00185fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018603:	3d 00 02 00 00       	cmp    eax,0x200
c0018608:	74 0a                	je     c0018614 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001860a:	b0 00                	mov    al,0x0
c001860c:	e9 cb 01 00 00       	jmp    c00187dc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018611:	8d 76 00             	lea    esi,[esi+0x0]
c0018614:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001861c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018623:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001862a:	83 f8 ff             	cmp    eax,0xffffffff
c001862d:	74 09                	je     c0018638 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001862f:	b0 01                	mov    al,0x1
c0018631:	e9 a6 01 00 00       	jmp    c00187dc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018636:	66 90                	xchg   ax,ax
c0018638:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018642:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001864a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018651:	88 c2                	mov    dl,al
c0018653:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018658:	01 d0                	add    eax,edx
c001865a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018661:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018667:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001866e:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018675:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001867a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018681:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018688:	83 ec 0c             	sub    esp,0xc
c001868b:	68 34 02 00 00       	push   0x234
c0018690:	e8 36 f4 fe ff       	call   c0007acb <malloc>
c0018695:	83 c4 10             	add    esp,0x10
c0018698:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001869f:	83 ec 04             	sub    esp,0x4
c00186a2:	6a 00                	push   0x0
c00186a4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00186ab:	50                   	push   eax
c00186ac:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00186b3:	e8 86 b5 fe ff       	call   c0003c3e <f_mount>
c00186b8:	83 c4 10             	add    esp,0x10
c00186bb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00186c2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00186ca:	74 1c                	je     c00186e8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00186cc:	83 ec 0c             	sub    esp,0xc
c00186cf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00186d6:	e8 10 f4 fe ff       	call   c0007aeb <rfree>
c00186db:	83 c4 10             	add    esp,0x10
c00186de:	b0 00                	mov    al,0x0
c00186e0:	e9 f7 00 00 00       	jmp    c00187dc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00186e5:	8d 76 00             	lea    esi,[esi+0x0]
c00186e8:	83 ec 04             	sub    esp,0x4
c00186eb:	68 00 01 00 00       	push   0x100
c00186f0:	6a 00                	push   0x0
c00186f2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00186f9:	50                   	push   eax
c00186fa:	e8 f1 7d fe ff       	call   c00004f0 <memset>
c00186ff:	83 c4 10             	add    esp,0x10
c0018702:	83 ec 08             	sub    esp,0x8
c0018705:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001870c:	50                   	push   eax
c001870d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018714:	50                   	push   eax
c0018715:	e8 56 81 fe ff       	call   c0000870 <strcat>
c001871a:	83 c4 10             	add    esp,0x10
c001871d:	83 ec 08             	sub    esp,0x8
c0018720:	68 86 1e 02 c0       	push   0xc0021e86
c0018725:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001872c:	50                   	push   eax
c001872d:	e8 3e 81 fe ff       	call   c0000870 <strcat>
c0018732:	83 c4 10             	add    esp,0x10
c0018735:	83 ec 04             	sub    esp,0x4
c0018738:	6a 01                	push   0x1
c001873a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018741:	50                   	push   eax
c0018742:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018746:	50                   	push   eax
c0018747:	e8 54 b5 fe ff       	call   c0003ca0 <f_open>
c001874c:	83 c4 10             	add    esp,0x10
c001874f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018756:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001875d:	85 c0                	test   eax,eax
c001875f:	74 0b                	je     c001876c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018761:	78 31                	js     c0018794 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018763:	83 e8 04             	sub    eax,0x4
c0018766:	83 f8 01             	cmp    eax,0x1
c0018769:	77 29                	ja     c0018794 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001876b:	90                   	nop
c001876c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018774:	83 ec 0c             	sub    esp,0xc
c0018777:	8d 44 24 14          	lea    eax,[esp+0x14]
c001877b:	50                   	push   eax
c001877c:	e8 cf bc fe ff       	call   c0004450 <f_close>
c0018781:	83 c4 10             	add    esp,0x10
c0018784:	90                   	nop
c0018785:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001878d:	85 c0                	test   eax,eax
c001878f:	74 43                	je     c00187d4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018791:	eb 31                	jmp    c00187c4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018793:	90                   	nop
c0018794:	83 ec 0c             	sub    esp,0xc
c0018797:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001879e:	e8 48 f3 fe ff       	call   c0007aeb <rfree>
c00187a3:	83 c4 10             	add    esp,0x10
c00187a6:	83 ec 04             	sub    esp,0x4
c00187a9:	6a 00                	push   0x0
c00187ab:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00187b2:	50                   	push   eax
c00187b3:	6a 00                	push   0x0
c00187b5:	e8 84 b4 fe ff       	call   c0003c3e <f_mount>
c00187ba:	83 c4 10             	add    esp,0x10
c00187bd:	b0 00                	mov    al,0x0
c00187bf:	eb 1b                	jmp    c00187dc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00187c1:	8d 76 00             	lea    esi,[esi+0x0]
c00187c4:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00187c9:	83 c0 01             	add    eax,0x1
c00187cc:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c00187d1:	8d 76 00             	lea    esi,[esi+0x0]
c00187d4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00187db:	90                   	nop
c00187dc:	81 c4 4c 03 00 00    	add    esp,0x34c
c00187e2:	c3                   	ret    
c00187e3:	90                   	nop

c00187e4 <FAT::allocateSwapfile(char const*, int)>:
c00187e4:	55                   	push   ebp
c00187e5:	57                   	push   edi
c00187e6:	56                   	push   esi
c00187e7:	53                   	push   ebx
c00187e8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00187ee:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00187f9:	83 ec 0c             	sub    esp,0xc
c00187fc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018803:	e8 c3 f2 fe ff       	call   c0007acb <malloc>
c0018808:	83 c4 10             	add    esp,0x10
c001880b:	89 c7                	mov    edi,eax
c001880d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0018812:	83 ec 04             	sub    esp,0x4
c0018815:	50                   	push   eax
c0018816:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001881d:	57                   	push   edi
c001881e:	e8 97 29 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c0018823:	83 c4 10             	add    esp,0x10
c0018826:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001882d:	83 ec 04             	sub    esp,0x4
c0018830:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018834:	50                   	push   eax
c0018835:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018839:	50                   	push   eax
c001883a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018841:	e8 dc 2c ff ff       	call   c000b522 <File::stat(unsigned long long*, bool*)>
c0018846:	83 c4 10             	add    esp,0x10
c0018849:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018850:	c1 e0 14             	shl    eax,0x14
c0018853:	89 c7                	mov    edi,eax
c0018855:	89 c5                	mov    ebp,eax
c0018857:	c1 fd 1f             	sar    ebp,0x1f
c001885a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001885e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018862:	89 f9                	mov    ecx,edi
c0018864:	31 c1                	xor    ecx,eax
c0018866:	89 cb                	mov    ebx,ecx
c0018868:	89 e9                	mov    ecx,ebp
c001886a:	31 d1                	xor    ecx,edx
c001886c:	89 ce                	mov    esi,ecx
c001886e:	89 f0                	mov    eax,esi
c0018870:	09 d8                	or     eax,ebx
c0018872:	0f 84 9c 00 00 00    	je     c0018914 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018878:	83 ec 0c             	sub    esp,0xc
c001887b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018882:	e8 67 2b ff ff       	call   c000b3ee <File::unlink()>
c0018887:	83 c4 10             	add    esp,0x10
c001888a:	83 ec 08             	sub    esp,0x8
c001888d:	6a 12                	push   0x12
c001888f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018896:	e8 db 29 ff ff       	call   c000b276 <File::open(FileOpenMode)>
c001889b:	83 c4 10             	add    esp,0x10
c001889e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00188a5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00188ab:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00188b2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00188b9:	c1 e0 14             	shl    eax,0x14
c00188bc:	83 ec 04             	sub    esp,0x4
c00188bf:	6a 01                	push   0x1
c00188c1:	50                   	push   eax
c00188c2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00188c9:	e8 09 ca fe ff       	call   c00052d7 <f_expand>
c00188ce:	83 c4 10             	add    esp,0x10
c00188d1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00188d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00188da:	83 c0 10             	add    eax,0x10
c00188dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00188df:	83 ec 0c             	sub    esp,0xc
c00188e2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00188e6:	52                   	push   edx
c00188e7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00188eb:	52                   	push   edx
c00188ec:	6a 00                	push   0x0
c00188ee:	68 00 04 00 00       	push   0x400
c00188f3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00188fa:	ff d0                	call   eax
c00188fc:	83 c4 20             	add    esp,0x20
c00188ff:	83 ec 0c             	sub    esp,0xc
c0018902:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018909:	e8 c6 29 ff ff       	call   c000b2d4 <File::close()>
c001890e:	83 c4 10             	add    esp,0x10
c0018911:	8d 76 00             	lea    esi,[esi+0x0]
c0018914:	83 ec 08             	sub    esp,0x8
c0018917:	6a 01                	push   0x1
c0018919:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018920:	e8 51 29 ff ff       	call   c000b276 <File::open(FileOpenMode)>
c0018925:	83 c4 10             	add    esp,0x10
c0018928:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001892f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018931:	83 c0 0c             	add    eax,0xc
c0018934:	8b 00                	mov    eax,DWORD PTR [eax]
c0018936:	83 ec 0c             	sub    esp,0xc
c0018939:	8d 54 24 24          	lea    edx,[esp+0x24]
c001893d:	52                   	push   edx
c001893e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0018942:	52                   	push   edx
c0018943:	6a 00                	push   0x0
c0018945:	6a 04                	push   0x4
c0018947:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001894e:	ff d0                	call   eax
c0018950:	83 c4 20             	add    esp,0x20
c0018953:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001895a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018960:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018967:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001896e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018971:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018978:	83 ec 0c             	sub    esp,0xc
c001897b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018982:	e8 4d 29 ff ff       	call   c000b2d4 <File::close()>
c0018987:	83 c4 10             	add    esp,0x10
c001898a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0018991:	ba 00 00 00 00       	mov    edx,0x0
c0018996:	81 c4 3c 04 00 00    	add    esp,0x43c
c001899c:	5b                   	pop    ebx
c001899d:	5e                   	pop    esi
c001899e:	5f                   	pop    edi
c001899f:	5d                   	pop    ebp
c00189a0:	c3                   	ret    
c00189a1:	90                   	nop
c00189a2:	66 90                	xchg   ax,ax

c00189a4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00189a4:	57                   	push   edi
c00189a5:	56                   	push   esi
c00189a6:	53                   	push   ebx
c00189a7:	81 ec 50 02 00 00    	sub    esp,0x250
c00189ad:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00189b5:	74 0d                	je     c00189c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00189b7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00189bf:	75 0f                	jne    c00189d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00189c1:	8d 76 00             	lea    esi,[esi+0x0]
c00189c4:	b8 04 00 00 00       	mov    eax,0x4
c00189c9:	e9 3a 01 00 00       	jmp    c0018b08 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00189ce:	66 90                	xchg   ax,ax
c00189d0:	83 ec 08             	sub    esp,0x8
c00189d3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00189da:	50                   	push   eax
c00189db:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00189e2:	e8 35 bd fe ff       	call   c000471c <f_readdir>
c00189e7:	83 c4 10             	add    esp,0x10
c00189ea:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00189f1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00189f8:	83 ec 0c             	sub    esp,0xc
c00189fb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018a02:	83 c0 16             	add    eax,0x16
c0018a05:	50                   	push   eax
c0018a06:	e8 75 7b fe ff       	call   c0000580 <strlen>
c0018a0b:	83 c4 10             	add    esp,0x10
c0018a0e:	ba 00 00 00 00       	mov    edx,0x0
c0018a13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a17:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018a1b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018a22:	0f b6 c0             	movzx  eax,al
c0018a25:	83 e0 10             	and    eax,0x10
c0018a28:	74 0a                	je     c0018a34 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018a2a:	b8 02 00 00 00       	mov    eax,0x2
c0018a2f:	eb 0b                	jmp    c0018a3c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018a31:	8d 76 00             	lea    esi,[esi+0x0]
c0018a34:	b8 01 00 00 00       	mov    eax,0x1
c0018a39:	8d 76 00             	lea    esi,[esi+0x0]
c0018a3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a40:	83 ec 08             	sub    esp,0x8
c0018a43:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018a4a:	83 c0 16             	add    eax,0x16
c0018a4d:	50                   	push   eax
c0018a4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018a52:	83 c0 10             	add    eax,0x10
c0018a55:	50                   	push   eax
c0018a56:	e8 f5 7b fe ff       	call   c0000650 <strcpy>
c0018a5b:	83 c4 10             	add    esp,0x10
c0018a5e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018a65:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018a6c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018a70:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018a77:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0018a7e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018a85:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018a8c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0018a93:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018a9a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018aa1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018aa8:	89 c6                	mov    esi,eax
c0018aaa:	89 d7                	mov    edi,edx
c0018aac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018aae:	89 c8                	mov    eax,ecx
c0018ab0:	89 fa                	mov    edx,edi
c0018ab2:	89 f3                	mov    ebx,esi
c0018ab4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018abb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018ac2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018ac9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018ad0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018ad6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018add:	0f be c0             	movsx  eax,al
c0018ae0:	85 c0                	test   eax,eax
c0018ae2:	75 08                	jne    c0018aec <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018ae4:	b8 07 00 00 00       	mov    eax,0x7
c0018ae9:	eb 1d                	jmp    c0018b08 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018aeb:	90                   	nop
c0018aec:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018af3:	85 c0                	test   eax,eax
c0018af5:	75 09                	jne    c0018b00 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018af7:	b8 00 00 00 00       	mov    eax,0x0
c0018afc:	eb 0a                	jmp    c0018b08 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018afe:	66 90                	xchg   ax,ax
c0018b00:	b8 01 00 00 00       	mov    eax,0x1
c0018b05:	8d 76 00             	lea    esi,[esi+0x0]
c0018b08:	81 c4 50 02 00 00    	add    esp,0x250
c0018b0e:	5b                   	pop    ebx
c0018b0f:	5e                   	pop    esi
c0018b10:	5f                   	pop    edi
c0018b11:	c3                   	ret    
c0018b12:	66 90                	xchg   ax,ax

c0018b14 <FAT::read(void*, unsigned long, void*, int*)>:
c0018b14:	83 ec 1c             	sub    esp,0x1c
c0018b17:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018b1c:	74 0a                	je     c0018b28 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018b1e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018b23:	75 0b                	jne    c0018b30 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018b25:	8d 76 00             	lea    esi,[esi+0x0]
c0018b28:	b8 04 00 00 00       	mov    eax,0x4
c0018b2d:	eb 41                	jmp    c0018b70 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018b2f:	90                   	nop
c0018b30:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b34:	50                   	push   eax
c0018b35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b41:	e8 1d b4 fe ff       	call   c0003f63 <f_read>
c0018b46:	83 c4 10             	add    esp,0x10
c0018b49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b51:	89 c2                	mov    edx,eax
c0018b53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b57:	89 10                	mov    DWORD PTR [eax],edx
c0018b59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b5d:	85 c0                	test   eax,eax
c0018b5f:	75 07                	jne    c0018b68 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018b61:	b8 00 00 00 00       	mov    eax,0x0
c0018b66:	eb 08                	jmp    c0018b70 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018b68:	b8 01 00 00 00       	mov    eax,0x1
c0018b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b70:	83 c4 1c             	add    esp,0x1c
c0018b73:	c3                   	ret    

c0018b74 <FAT::write(void*, unsigned long, void*, int*)>:
c0018b74:	83 ec 1c             	sub    esp,0x1c
c0018b77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018b7c:	74 0a                	je     c0018b88 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018b7e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018b83:	75 0b                	jne    c0018b90 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018b85:	8d 76 00             	lea    esi,[esi+0x0]
c0018b88:	b8 04 00 00 00       	mov    eax,0x4
c0018b8d:	eb 41                	jmp    c0018bd0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018b8f:	90                   	nop
c0018b90:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b94:	50                   	push   eax
c0018b95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018ba1:	e8 9e b5 fe ff       	call   c0004144 <f_write>
c0018ba6:	83 c4 10             	add    esp,0x10
c0018ba9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bb1:	89 c2                	mov    edx,eax
c0018bb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bb7:	89 10                	mov    DWORD PTR [eax],edx
c0018bb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018bbd:	85 c0                	test   eax,eax
c0018bbf:	75 07                	jne    c0018bc8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018bc1:	b8 00 00 00 00       	mov    eax,0x0
c0018bc6:	eb 08                	jmp    c0018bd0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018bc8:	b8 01 00 00 00       	mov    eax,0x1
c0018bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0018bd0:	83 c4 1c             	add    esp,0x1c
c0018bd3:	c3                   	ret    

c0018bd4 <FAT::close(void*)>:
c0018bd4:	83 ec 1c             	sub    esp,0x1c
c0018bd7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018bdc:	75 0a                	jne    c0018be8 <FAT::close(void*)+0x14>
c0018bde:	b8 04 00 00 00       	mov    eax,0x4
c0018be3:	eb 3f                	jmp    c0018c24 <FAT::close(void*)+0x50>
c0018be5:	8d 76 00             	lea    esi,[esi+0x0]
c0018be8:	83 ec 0c             	sub    esp,0xc
c0018beb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018bef:	e8 5c b8 fe ff       	call   c0004450 <f_close>
c0018bf4:	83 c4 10             	add    esp,0x10
c0018bf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bfb:	83 ec 0c             	sub    esp,0xc
c0018bfe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c02:	e8 d4 ee fe ff       	call   c0007adb <free>
c0018c07:	83 c4 10             	add    esp,0x10
c0018c0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c0e:	85 c0                	test   eax,eax
c0018c10:	75 0a                	jne    c0018c1c <FAT::close(void*)+0x48>
c0018c12:	b8 00 00 00 00       	mov    eax,0x0
c0018c17:	eb 0b                	jmp    c0018c24 <FAT::close(void*)+0x50>
c0018c19:	8d 76 00             	lea    esi,[esi+0x0]
c0018c1c:	b8 01 00 00 00       	mov    eax,0x1
c0018c21:	8d 76 00             	lea    esi,[esi+0x0]
c0018c24:	83 c4 1c             	add    esp,0x1c
c0018c27:	c3                   	ret    

c0018c28 <FAT::closeDir(void*)>:
c0018c28:	83 ec 1c             	sub    esp,0x1c
c0018c2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018c30:	75 0a                	jne    c0018c3c <FAT::closeDir(void*)+0x14>
c0018c32:	b8 04 00 00 00       	mov    eax,0x4
c0018c37:	eb 3f                	jmp    c0018c78 <FAT::closeDir(void*)+0x50>
c0018c39:	8d 76 00             	lea    esi,[esi+0x0]
c0018c3c:	83 ec 0c             	sub    esp,0xc
c0018c3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c43:	e8 b2 ba fe ff       	call   c00046fa <f_closedir>
c0018c48:	83 c4 10             	add    esp,0x10
c0018c4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c4f:	83 ec 0c             	sub    esp,0xc
c0018c52:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c56:	e8 80 ee fe ff       	call   c0007adb <free>
c0018c5b:	83 c4 10             	add    esp,0x10
c0018c5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c62:	85 c0                	test   eax,eax
c0018c64:	75 0a                	jne    c0018c70 <FAT::closeDir(void*)+0x48>
c0018c66:	b8 00 00 00 00       	mov    eax,0x0
c0018c6b:	eb 0b                	jmp    c0018c78 <FAT::closeDir(void*)+0x50>
c0018c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c70:	b8 01 00 00 00       	mov    eax,0x1
c0018c75:	8d 76 00             	lea    esi,[esi+0x0]
c0018c78:	83 c4 1c             	add    esp,0x1c
c0018c7b:	c3                   	ret    

c0018c7c <FAT::seek(void*, unsigned long long)>:
c0018c7c:	83 ec 2c             	sub    esp,0x2c
c0018c7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018c8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c8f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018c94:	75 0a                	jne    c0018ca0 <FAT::seek(void*, unsigned long long)+0x24>
c0018c96:	b8 04 00 00 00       	mov    eax,0x4
c0018c9b:	eb 33                	jmp    c0018cd0 <FAT::seek(void*, unsigned long long)+0x54>
c0018c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018ca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ca4:	83 ec 08             	sub    esp,0x8
c0018ca7:	50                   	push   eax
c0018ca8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018cac:	e8 ce b7 fe ff       	call   c000447f <f_lseek>
c0018cb1:	83 c4 10             	add    esp,0x10
c0018cb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018cb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018cbc:	85 c0                	test   eax,eax
c0018cbe:	75 08                	jne    c0018cc8 <FAT::seek(void*, unsigned long long)+0x4c>
c0018cc0:	b8 00 00 00 00       	mov    eax,0x0
c0018cc5:	eb 09                	jmp    c0018cd0 <FAT::seek(void*, unsigned long long)+0x54>
c0018cc7:	90                   	nop
c0018cc8:	b8 01 00 00 00       	mov    eax,0x1
c0018ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0018cd0:	83 c4 2c             	add    esp,0x2c
c0018cd3:	c3                   	ret    

c0018cd4 <fatWrapperReadDisk>:
c0018cd4:	53                   	push   ebx
c0018cd5:	83 ec 18             	sub    esp,0x18
c0018cd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cdc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ce0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ce5:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018cec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018cf0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cf4:	ba 00 00 00 00       	mov    edx,0x0
c0018cf9:	83 ec 0c             	sub    esp,0xc
c0018cfc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d00:	53                   	push   ebx
c0018d01:	52                   	push   edx
c0018d02:	50                   	push   eax
c0018d03:	51                   	push   ecx
c0018d04:	e8 55 47 ff ff       	call   c000d45e <LogicalDisk::read(unsigned long long, int, void*)>
c0018d09:	83 c4 20             	add    esp,0x20
c0018d0c:	83 c4 18             	add    esp,0x18
c0018d0f:	5b                   	pop    ebx
c0018d10:	c3                   	ret    
c0018d11:	8d 76 00             	lea    esi,[esi+0x0]

c0018d14 <fatWrapperWriteDisk>:
c0018d14:	53                   	push   ebx
c0018d15:	83 ec 18             	sub    esp,0x18
c0018d18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d1c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018d20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018d25:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018d2c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018d30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d34:	ba 00 00 00 00       	mov    edx,0x0
c0018d39:	83 ec 0c             	sub    esp,0xc
c0018d3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d40:	53                   	push   ebx
c0018d41:	52                   	push   edx
c0018d42:	50                   	push   eax
c0018d43:	51                   	push   ecx
c0018d44:	e8 81 47 ff ff       	call   c000d4ca <LogicalDisk::write(unsigned long long, int, void*)>
c0018d49:	83 c4 20             	add    esp,0x20
c0018d4c:	83 c4 18             	add    esp,0x18
c0018d4f:	5b                   	pop    ebx
c0018d50:	c3                   	ret    
c0018d51:	8d 76 00             	lea    esi,[esi+0x0]

c0018d54 <fatWrapperIoctl>:
c0018d54:	53                   	push   ebx
c0018d55:	83 ec 28             	sub    esp,0x28
c0018d58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d5c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018d60:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018d64:	88 d0                	mov    al,dl
c0018d66:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018d6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018d6f:	83 f8 02             	cmp    eax,0x2
c0018d72:	75 34                	jne    c0018da8 <fatWrapperIoctl+0x54>
c0018d74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018d81:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018d88:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018d8e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d94:	89 c2                	mov    edx,eax
c0018d96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d9a:	66 89 10             	mov    WORD PTR [eax],dx
c0018d9d:	b8 00 00 00 00       	mov    eax,0x0
c0018da2:	e9 c5 00 00 00       	jmp    c0018e6c <fatWrapperIoctl+0x118>
c0018da7:	90                   	nop
c0018da8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018dad:	83 f8 01             	cmp    eax,0x1
c0018db0:	75 6a                	jne    c0018e1c <fatWrapperIoctl+0xc8>
c0018db2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018db6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018dba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018dbf:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018dc6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018dcc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018dd2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018dd8:	89 c8                	mov    eax,ecx
c0018dda:	89 da                	mov    edx,ebx
c0018ddc:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018de0:	c1 e0 0a             	shl    eax,0xa
c0018de3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018de8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018def:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018df5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018dfb:	89 cb                	mov    ebx,ecx
c0018dfd:	c1 fb 1f             	sar    ebx,0x1f
c0018e00:	53                   	push   ebx
c0018e01:	51                   	push   ecx
c0018e02:	52                   	push   edx
c0018e03:	50                   	push   eax
c0018e04:	e8 a7 5b 00 00       	call   c001e9b0 <__udivdi3>
c0018e09:	83 c4 10             	add    esp,0x10
c0018e0c:	89 c2                	mov    edx,eax
c0018e0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e12:	89 10                	mov    DWORD PTR [eax],edx
c0018e14:	b8 00 00 00 00       	mov    eax,0x0
c0018e19:	eb 51                	jmp    c0018e6c <fatWrapperIoctl+0x118>
c0018e1b:	90                   	nop
c0018e1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018e21:	85 c0                	test   eax,eax
c0018e23:	75 07                	jne    c0018e2c <fatWrapperIoctl+0xd8>
c0018e25:	b8 00 00 00 00       	mov    eax,0x0
c0018e2a:	eb 40                	jmp    c0018e6c <fatWrapperIoctl+0x118>
c0018e2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018e31:	83 f8 03             	cmp    eax,0x3
c0018e34:	75 1a                	jne    c0018e50 <fatWrapperIoctl+0xfc>
c0018e36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e42:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018e48:	b8 00 00 00 00       	mov    eax,0x0
c0018e4d:	eb 1d                	jmp    c0018e6c <fatWrapperIoctl+0x118>
c0018e4f:	90                   	nop
c0018e50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018e55:	83 f8 04             	cmp    eax,0x4
c0018e58:	75 0a                	jne    c0018e64 <fatWrapperIoctl+0x110>
c0018e5a:	b8 00 00 00 00       	mov    eax,0x0
c0018e5f:	eb 0b                	jmp    c0018e6c <fatWrapperIoctl+0x118>
c0018e61:	8d 76 00             	lea    esi,[esi+0x0]
c0018e64:	b8 04 00 00 00       	mov    eax,0x4
c0018e69:	8d 76 00             	lea    esi,[esi+0x0]
c0018e6c:	83 c4 28             	add    esp,0x28
c0018e6f:	5b                   	pop    ebx
c0018e70:	c3                   	ret    
c0018e71:	90                   	nop
c0018e72:	66 90                	xchg   ax,ax

c0018e74 <FAT::FAT()>:
c0018e74:	83 ec 1c             	sub    esp,0x1c
c0018e77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e7b:	83 ec 0c             	sub    esp,0xc
c0018e7e:	50                   	push   eax
c0018e7f:	e8 b0 20 ff ff       	call   c000af34 <Filesystem::Filesystem()>
c0018e84:	83 c4 10             	add    esp,0x10
c0018e87:	ba 9c 1e 02 c0       	mov    edx,0xc0021e9c
c0018e8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e90:	89 10                	mov    DWORD PTR [eax],edx
c0018e92:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018e9c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018ea4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018ea9:	7f 19                	jg     c0018ec4 <FAT::FAT()+0x50>
c0018eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018eaf:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018eba:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018ebf:	eb e3                	jmp    c0018ea4 <FAT::FAT()+0x30>
c0018ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ec4:	90                   	nop
c0018ec5:	83 c4 1c             	add    esp,0x1c
c0018ec8:	c3                   	ret    
c0018ec9:	90                   	nop
c0018eca:	66 90                	xchg   ax,ax

c0018ecc <FAT::fixFilepath(char*)>:
c0018ecc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ed0:	8a 00                	mov    al,BYTE PTR [eax]
c0018ed2:	0f be c0             	movsx  eax,al
c0018ed5:	83 f8 40             	cmp    eax,0x40
c0018ed8:	7e 2e                	jle    c0018f08 <FAT::fixFilepath(char*)+0x3c>
c0018eda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ede:	8a 00                	mov    al,BYTE PTR [eax]
c0018ee0:	83 e8 41             	sub    eax,0x41
c0018ee3:	88 c2                	mov    dl,al
c0018ee5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ee9:	88 10                	mov    BYTE PTR [eax],dl
c0018eeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018eef:	8a 00                	mov    al,BYTE PTR [eax]
c0018ef1:	0f be c0             	movsx  eax,al
c0018ef4:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018efb:	83 c0 30             	add    eax,0x30
c0018efe:	88 c2                	mov    dl,al
c0018f00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f04:	88 10                	mov    BYTE PTR [eax],dl
c0018f06:	66 90                	xchg   ax,ax
c0018f08:	90                   	nop
c0018f09:	c3                   	ret    
c0018f0a:	66 90                	xchg   ax,ax

c0018f0c <FAT::open(char const*, void**, FileOpenMode)>:
c0018f0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018f12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018f1a:	74 0c                	je     c0018f28 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018f1c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018f24:	75 0e                	jne    c0018f34 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018f26:	66 90                	xchg   ax,ax
c0018f28:	b8 04 00 00 00       	mov    eax,0x4
c0018f2d:	e9 46 01 00 00       	jmp    c0019078 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018f32:	66 90                	xchg   ax,ax
c0018f34:	83 ec 08             	sub    esp,0x8
c0018f37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f42:	50                   	push   eax
c0018f43:	e8 08 77 fe ff       	call   c0000650 <strcpy>
c0018f48:	83 c4 10             	add    esp,0x10
c0018f4b:	83 ec 08             	sub    esp,0x8
c0018f4e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018f52:	50                   	push   eax
c0018f53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f5a:	e8 6d ff ff ff       	call   c0018ecc <FAT::fixFilepath(char*)>
c0018f5f:	83 c4 10             	add    esp,0x10
c0018f62:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018f6a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018f71:	83 e0 01             	and    eax,0x1
c0018f74:	74 12                	je     c0018f88 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018f76:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018f7d:	83 c8 01             	or     eax,0x1
c0018f80:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018f87:	90                   	nop
c0018f88:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018f8f:	83 e0 04             	and    eax,0x4
c0018f92:	74 24                	je     c0018fb8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018f94:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018f9b:	83 c8 30             	or     eax,0x30
c0018f9e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018fa5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018fac:	83 c8 02             	or     eax,0x2
c0018faf:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018fb6:	66 90                	xchg   ax,ax
c0018fb8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018fbf:	83 e0 02             	and    eax,0x2
c0018fc2:	74 14                	je     c0018fd8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018fc4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018fcb:	83 c8 02             	or     eax,0x2
c0018fce:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fd8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018fdf:	83 e0 08             	and    eax,0x8
c0018fe2:	74 14                	je     c0018ff8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018fe4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018feb:	83 c8 04             	or     eax,0x4
c0018fee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ff8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018fff:	83 e0 10             	and    eax,0x10
c0019002:	74 14                	je     c0019018 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019004:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001900b:	83 c8 08             	or     eax,0x8
c001900e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019015:	8d 76 00             	lea    esi,[esi+0x0]
c0019018:	83 ec 0c             	sub    esp,0xc
c001901b:	68 28 02 00 00       	push   0x228
c0019020:	e8 a6 ea fe ff       	call   c0007acb <malloc>
c0019025:	83 c4 10             	add    esp,0x10
c0019028:	89 c2                	mov    edx,eax
c001902a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019031:	89 10                	mov    DWORD PTR [eax],edx
c0019033:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001903b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019042:	8b 00                	mov    eax,DWORD PTR [eax]
c0019044:	83 ec 04             	sub    esp,0x4
c0019047:	52                   	push   edx
c0019048:	8d 54 24 10          	lea    edx,[esp+0x10]
c001904c:	52                   	push   edx
c001904d:	50                   	push   eax
c001904e:	e8 4d ac fe ff       	call   c0003ca0 <f_open>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001905d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019065:	74 09                	je     c0019070 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019067:	b8 01 00 00 00       	mov    eax,0x1
c001906c:	eb 0a                	jmp    c0019078 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001906e:	66 90                	xchg   ax,ax
c0019070:	b8 00 00 00 00       	mov    eax,0x0
c0019075:	8d 76 00             	lea    esi,[esi+0x0]
c0019078:	81 c4 1c 01 00 00    	add    esp,0x11c
c001907e:	c3                   	ret    
c001907f:	90                   	nop

c0019080 <FAT::openDir(char const*, void**)>:
c0019080:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019086:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001908e:	74 0c                	je     c001909c <FAT::openDir(char const*, void**)+0x1c>
c0019090:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019098:	75 0e                	jne    c00190a8 <FAT::openDir(char const*, void**)+0x28>
c001909a:	66 90                	xchg   ax,ax
c001909c:	b8 04 00 00 00       	mov    eax,0x4
c00190a1:	e9 82 00 00 00       	jmp    c0019128 <FAT::openDir(char const*, void**)+0xa8>
c00190a6:	66 90                	xchg   ax,ax
c00190a8:	83 ec 08             	sub    esp,0x8
c00190ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00190b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190b6:	50                   	push   eax
c00190b7:	e8 94 75 fe ff       	call   c0000650 <strcpy>
c00190bc:	83 c4 10             	add    esp,0x10
c00190bf:	83 ec 08             	sub    esp,0x8
c00190c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190c6:	50                   	push   eax
c00190c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00190ce:	e8 f9 fd ff ff       	call   c0018ecc <FAT::fixFilepath(char*)>
c00190d3:	83 c4 10             	add    esp,0x10
c00190d6:	83 ec 0c             	sub    esp,0xc
c00190d9:	6a 30                	push   0x30
c00190db:	e8 eb e9 fe ff       	call   c0007acb <malloc>
c00190e0:	83 c4 10             	add    esp,0x10
c00190e3:	89 c2                	mov    edx,eax
c00190e5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00190ec:	89 10                	mov    DWORD PTR [eax],edx
c00190ee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00190f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00190f7:	83 ec 08             	sub    esp,0x8
c00190fa:	8d 54 24 14          	lea    edx,[esp+0x14]
c00190fe:	52                   	push   edx
c00190ff:	50                   	push   eax
c0019100:	e8 2a b5 fe ff       	call   c000462f <f_opendir>
c0019105:	83 c4 10             	add    esp,0x10
c0019108:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001910f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019117:	74 07                	je     c0019120 <FAT::openDir(char const*, void**)+0xa0>
c0019119:	b8 01 00 00 00       	mov    eax,0x1
c001911e:	eb 08                	jmp    c0019128 <FAT::openDir(char const*, void**)+0xa8>
c0019120:	b8 00 00 00 00       	mov    eax,0x0
c0019125:	8d 76 00             	lea    esi,[esi+0x0]
c0019128:	81 c4 1c 01 00 00    	add    esp,0x11c
c001912e:	c3                   	ret    
c001912f:	90                   	nop

c0019130 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019130:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019136:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001913e:	75 0c                	jne    c001914c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019140:	b8 04 00 00 00       	mov    eax,0x4
c0019145:	e9 d6 00 00 00       	jmp    c0019220 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001914a:	66 90                	xchg   ax,ax
c001914c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019154:	75 0a                	jne    c0019160 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019156:	b8 04 00 00 00       	mov    eax,0x4
c001915b:	e9 c0 00 00 00       	jmp    c0019220 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019160:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019168:	75 0a                	jne    c0019174 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001916a:	b8 04 00 00 00       	mov    eax,0x4
c001916f:	e9 ac 00 00 00       	jmp    c0019220 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019174:	83 ec 08             	sub    esp,0x8
c0019177:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001917e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019185:	50                   	push   eax
c0019186:	e8 c5 74 fe ff       	call   c0000650 <strcpy>
c001918b:	83 c4 10             	add    esp,0x10
c001918e:	83 ec 08             	sub    esp,0x8
c0019191:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019198:	50                   	push   eax
c0019199:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00191a0:	e8 27 fd ff ff       	call   c0018ecc <FAT::fixFilepath(char*)>
c00191a5:	83 c4 10             	add    esp,0x10
c00191a8:	83 ec 08             	sub    esp,0x8
c00191ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00191af:	50                   	push   eax
c00191b0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00191b7:	50                   	push   eax
c00191b8:	e8 f1 b5 fe ff       	call   c00047ae <f_stat>
c00191bd:	83 c4 10             	add    esp,0x10
c00191c0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00191c7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00191ce:	85 c0                	test   eax,eax
c00191d0:	74 0a                	je     c00191dc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00191d2:	83 f8 04             	cmp    eax,0x4
c00191d5:	74 39                	je     c0019210 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00191d7:	eb 3f                	jmp    c0019218 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00191d9:	8d 76 00             	lea    esi,[esi+0x0]
c00191dc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00191e0:	0f b6 c0             	movzx  eax,al
c00191e3:	83 e0 10             	and    eax,0x10
c00191e6:	0f 95 c2             	setne  dl
c00191e9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00191f0:	88 10                	mov    BYTE PTR [eax],dl
c00191f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191f6:	ba 00 00 00 00       	mov    edx,0x0
c00191fb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019202:	89 01                	mov    DWORD PTR [ecx],eax
c0019204:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019207:	b8 00 00 00 00       	mov    eax,0x0
c001920c:	eb 12                	jmp    c0019220 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001920e:	66 90                	xchg   ax,ax
c0019210:	b8 02 00 00 00       	mov    eax,0x2
c0019215:	eb 09                	jmp    c0019220 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019217:	90                   	nop
c0019218:	b8 01 00 00 00       	mov    eax,0x1
c001921d:	8d 76 00             	lea    esi,[esi+0x0]
c0019220:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019226:	c3                   	ret    
c0019227:	90                   	nop

c0019228 <FAT::unlink(char const*)>:
c0019228:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001922e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019236:	75 08                	jne    c0019240 <FAT::unlink(char const*)+0x18>
c0019238:	b8 04 00 00 00       	mov    eax,0x4
c001923d:	eb 61                	jmp    c00192a0 <FAT::unlink(char const*)+0x78>
c001923f:	90                   	nop
c0019240:	83 ec 08             	sub    esp,0x8
c0019243:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001924a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001924e:	50                   	push   eax
c001924f:	e8 fc 73 fe ff       	call   c0000650 <strcpy>
c0019254:	83 c4 10             	add    esp,0x10
c0019257:	83 ec 08             	sub    esp,0x8
c001925a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001925e:	50                   	push   eax
c001925f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019266:	e8 61 fc ff ff       	call   c0018ecc <FAT::fixFilepath(char*)>
c001926b:	83 c4 10             	add    esp,0x10
c001926e:	83 ec 0c             	sub    esp,0xc
c0019271:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019275:	50                   	push   eax
c0019276:	e8 a5 b7 fe ff       	call   c0004a20 <f_unlink>
c001927b:	83 c4 10             	add    esp,0x10
c001927e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019285:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001928c:	85 c0                	test   eax,eax
c001928e:	75 08                	jne    c0019298 <FAT::unlink(char const*)+0x70>
c0019290:	b8 00 00 00 00       	mov    eax,0x0
c0019295:	eb 09                	jmp    c00192a0 <FAT::unlink(char const*)+0x78>
c0019297:	90                   	nop
c0019298:	b8 01 00 00 00       	mov    eax,0x1
c001929d:	8d 76 00             	lea    esi,[esi+0x0]
c00192a0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00192a6:	c3                   	ret    
c00192a7:	90                   	nop

c00192a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00192a8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00192ae:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c00192b5:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c00192bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00192c0:	88 d0                	mov    al,dl
c00192c2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00192c6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00192ce:	75 0c                	jne    c00192dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c00192d0:	b8 04 00 00 00       	mov    eax,0x4
c00192d5:	e9 7e 01 00 00       	jmp    c0019458 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c00192da:	66 90                	xchg   ax,ax
c00192dc:	83 ec 08             	sub    esp,0x8
c00192df:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00192e6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00192ea:	50                   	push   eax
c00192eb:	e8 60 73 fe ff       	call   c0000650 <strcpy>
c00192f0:	83 c4 10             	add    esp,0x10
c00192f3:	83 ec 08             	sub    esp,0x8
c00192f6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00192fa:	50                   	push   eax
c00192fb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019302:	e8 c5 fb ff ff       	call   c0018ecc <FAT::fixFilepath(char*)>
c0019307:	83 c4 10             	add    esp,0x10
c001930a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019312:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001931a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001931f:	83 e0 01             	and    eax,0x1
c0019322:	74 14                	je     c0019338 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019324:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001932b:	83 c8 01             	or     eax,0x1
c001932e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019335:	8d 76 00             	lea    esi,[esi+0x0]
c0019338:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001933d:	83 e0 02             	and    eax,0x2
c0019340:	74 12                	je     c0019354 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019342:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019349:	83 c8 20             	or     eax,0x20
c001934c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019353:	90                   	nop
c0019354:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019359:	83 e0 04             	and    eax,0x4
c001935c:	74 12                	je     c0019370 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001935e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019365:	83 c8 04             	or     eax,0x4
c0019368:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001936f:	90                   	nop
c0019370:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019375:	83 e0 08             	and    eax,0x8
c0019378:	74 12                	je     c001938c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001937a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019381:	83 c8 02             	or     eax,0x2
c0019384:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001938b:	90                   	nop
c001938c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019391:	83 e0 01             	and    eax,0x1
c0019394:	74 12                	je     c00193a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019396:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001939d:	83 c8 01             	or     eax,0x1
c00193a0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00193a7:	90                   	nop
c00193a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00193ad:	83 e0 02             	and    eax,0x2
c00193b0:	74 12                	je     c00193c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c00193b2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00193b9:	83 c8 20             	or     eax,0x20
c00193bc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00193c3:	90                   	nop
c00193c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00193c9:	83 e0 04             	and    eax,0x4
c00193cc:	74 12                	je     c00193e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c00193ce:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00193d5:	83 c8 04             	or     eax,0x4
c00193d8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00193df:	90                   	nop
c00193e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00193e5:	83 e0 08             	and    eax,0x8
c00193e8:	74 12                	je     c00193fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c00193ea:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00193f1:	83 c8 02             	or     eax,0x2
c00193f4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00193fb:	90                   	nop
c00193fc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019403:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001940a:	09 d0                	or     eax,edx
c001940c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019413:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001941b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019423:	83 ec 04             	sub    esp,0x4
c0019426:	52                   	push   edx
c0019427:	50                   	push   eax
c0019428:	8d 44 24 24          	lea    eax,[esp+0x24]
c001942c:	50                   	push   eax
c001942d:	e8 61 ba fe ff       	call   c0004e93 <f_chmod>
c0019432:	83 c4 10             	add    esp,0x10
c0019435:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001943c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019443:	85 c0                	test   eax,eax
c0019445:	75 09                	jne    c0019450 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019447:	b8 00 00 00 00       	mov    eax,0x0
c001944c:	eb 0a                	jmp    c0019458 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001944e:	66 90                	xchg   ax,ax
c0019450:	b8 01 00 00 00       	mov    eax,0x1
c0019455:	8d 76 00             	lea    esi,[esi+0x0]
c0019458:	81 c4 2c 01 00 00    	add    esp,0x12c
c001945e:	c3                   	ret    
c001945f:	90                   	nop

c0019460 <FAT::rename(char const*, char const*)>:
c0019460:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019466:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001946e:	74 0c                	je     c001947c <FAT::rename(char const*, char const*)+0x1c>
c0019470:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019478:	75 0e                	jne    c0019488 <FAT::rename(char const*, char const*)+0x28>
c001947a:	66 90                	xchg   ax,ax
c001947c:	b8 04 00 00 00       	mov    eax,0x4
c0019481:	e9 9e 00 00 00       	jmp    c0019524 <FAT::rename(char const*, char const*)+0xc4>
c0019486:	66 90                	xchg   ax,ax
c0019488:	83 ec 08             	sub    esp,0x8
c001948b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019492:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019499:	50                   	push   eax
c001949a:	e8 b1 71 fe ff       	call   c0000650 <strcpy>
c001949f:	83 c4 10             	add    esp,0x10
c00194a2:	83 ec 08             	sub    esp,0x8
c00194a5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00194ac:	50                   	push   eax
c00194ad:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00194b4:	e8 13 fa ff ff       	call   c0018ecc <FAT::fixFilepath(char*)>
c00194b9:	83 c4 10             	add    esp,0x10
c00194bc:	83 ec 08             	sub    esp,0x8
c00194bf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00194c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00194ca:	50                   	push   eax
c00194cb:	e8 80 71 fe ff       	call   c0000650 <strcpy>
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	83 ec 08             	sub    esp,0x8
c00194d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194da:	50                   	push   eax
c00194db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00194e2:	e8 e5 f9 ff ff       	call   c0018ecc <FAT::fixFilepath(char*)>
c00194e7:	83 c4 10             	add    esp,0x10
c00194ea:	83 ec 08             	sub    esp,0x8
c00194ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194f1:	50                   	push   eax
c00194f2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00194f9:	50                   	push   eax
c00194fa:	e8 dc b7 fe ff       	call   c0004cdb <f_rename>
c00194ff:	83 c4 10             	add    esp,0x10
c0019502:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019509:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019510:	85 c0                	test   eax,eax
c0019512:	75 08                	jne    c001951c <FAT::rename(char const*, char const*)+0xbc>
c0019514:	b8 00 00 00 00       	mov    eax,0x0
c0019519:	eb 09                	jmp    c0019524 <FAT::rename(char const*, char const*)+0xc4>
c001951b:	90                   	nop
c001951c:	b8 01 00 00 00       	mov    eax,0x1
c0019521:	8d 76 00             	lea    esi,[esi+0x0]
c0019524:	81 c4 1c 02 00 00    	add    esp,0x21c
c001952a:	c3                   	ret    
c001952b:	90                   	nop

c001952c <FAT::mkdir(char const*)>:
c001952c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019532:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001953a:	75 08                	jne    c0019544 <FAT::mkdir(char const*)+0x18>
c001953c:	b8 04 00 00 00       	mov    eax,0x4
c0019541:	eb 61                	jmp    c00195a4 <FAT::mkdir(char const*)+0x78>
c0019543:	90                   	nop
c0019544:	83 ec 08             	sub    esp,0x8
c0019547:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001954e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019552:	50                   	push   eax
c0019553:	e8 f8 70 fe ff       	call   c0000650 <strcpy>
c0019558:	83 c4 10             	add    esp,0x10
c001955b:	83 ec 08             	sub    esp,0x8
c001955e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019562:	50                   	push   eax
c0019563:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001956a:	e8 5d f9 ff ff       	call   c0018ecc <FAT::fixFilepath(char*)>
c001956f:	83 c4 10             	add    esp,0x10
c0019572:	83 ec 0c             	sub    esp,0xc
c0019575:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019579:	50                   	push   eax
c001957a:	e8 c1 b5 fe ff       	call   c0004b40 <f_mkdir>
c001957f:	83 c4 10             	add    esp,0x10
c0019582:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019589:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019590:	85 c0                	test   eax,eax
c0019592:	75 08                	jne    c001959c <FAT::mkdir(char const*)+0x70>
c0019594:	b8 00 00 00 00       	mov    eax,0x0
c0019599:	eb 09                	jmp    c00195a4 <FAT::mkdir(char const*)+0x78>
c001959b:	90                   	nop
c001959c:	b8 01 00 00 00       	mov    eax,0x1
c00195a1:	8d 76 00             	lea    esi,[esi+0x0]
c00195a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00195aa:	c3                   	ret    
c00195ab:	90                   	nop

c00195ac <FAT::exists(char const*)>:
c00195ac:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00195b2:	83 ec 08             	sub    esp,0x8
c00195b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00195bc:	8d 44 24 10          	lea    eax,[esp+0x10]
c00195c0:	50                   	push   eax
c00195c1:	e8 8a 70 fe ff       	call   c0000650 <strcpy>
c00195c6:	83 c4 10             	add    esp,0x10
c00195c9:	83 ec 08             	sub    esp,0x8
c00195cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00195d0:	50                   	push   eax
c00195d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00195d8:	e8 ef f8 ff ff       	call   c0018ecc <FAT::fixFilepath(char*)>
c00195dd:	83 c4 10             	add    esp,0x10
c00195e0:	83 ec 08             	sub    esp,0x8
c00195e3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00195ea:	50                   	push   eax
c00195eb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00195ef:	50                   	push   eax
c00195f0:	e8 b9 b1 fe ff       	call   c00047ae <f_stat>
c00195f5:	83 c4 10             	add    esp,0x10
c00195f8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00195ff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019606:	85 c0                	test   eax,eax
c0019608:	75 06                	jne    c0019610 <FAT::exists(char const*)+0x64>
c001960a:	b0 01                	mov    al,0x1
c001960c:	eb 06                	jmp    c0019614 <FAT::exists(char const*)+0x68>
c001960e:	66 90                	xchg   ax,ax
c0019610:	b0 00                	mov    al,0x0
c0019612:	66 90                	xchg   ax,ax
c0019614:	81 c4 2c 02 00 00    	add    esp,0x22c
c001961a:	c3                   	ret    
c001961b:	90                   	nop

c001961c <isoReadDiscSectorHelper>:
c001961c:	83 ec 2c             	sub    esp,0x2c
c001961f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019623:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019627:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001962c:	83 e8 41             	sub    eax,0x41
c001962f:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0019636:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001963a:	ba 00 00 00 00       	mov    edx,0x0
c001963f:	83 ec 0c             	sub    esp,0xc
c0019642:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019646:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001964a:	52                   	push   edx
c001964b:	50                   	push   eax
c001964c:	51                   	push   ecx
c001964d:	e8 0c 3e ff ff       	call   c000d45e <LogicalDisk::read(unsigned long long, int, void*)>
c0019652:	83 c4 20             	add    esp,0x20
c0019655:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019659:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001965e:	74 0c                	je     c001966c <isoReadDiscSectorHelper+0x50>
c0019660:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019664:	c1 e0 0b             	shl    eax,0xb
c0019667:	eb 0b                	jmp    c0019674 <isoReadDiscSectorHelper+0x58>
c0019669:	8d 76 00             	lea    esi,[esi+0x0]
c001966c:	b8 00 00 00 00       	mov    eax,0x0
c0019671:	8d 76 00             	lea    esi,[esi+0x0]
c0019674:	83 c4 2c             	add    esp,0x2c
c0019677:	c3                   	ret    

c0019678 <iso_kprintf>:
c0019678:	83 ec 0c             	sub    esp,0xc
c001967b:	83 ec 08             	sub    esp,0x8
c001967e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019682:	68 4a 1c 02 c0       	push   0xc0021c4a
c0019687:	e8 b0 12 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001968c:	83 c4 10             	add    esp,0x10
c001968f:	90                   	nop
c0019690:	83 c4 0c             	add    esp,0xc
c0019693:	c3                   	ret    

c0019694 <iso_kprintfd>:
c0019694:	83 ec 0c             	sub    esp,0xc
c0019697:	83 ec 08             	sub    esp,0x8
c001969a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001969e:	68 7a 05 02 c0       	push   0xc002057a
c00196a3:	e8 94 12 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00196a8:	83 c4 10             	add    esp,0x10
c00196ab:	90                   	nop
c00196ac:	83 c4 0c             	add    esp,0xc
c00196af:	c3                   	ret    

c00196b0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00196b0:	b8 08 00 00 00       	mov    eax,0x8
c00196b5:	c3                   	ret    

c00196b6 <ISO9660::getName()>:
c00196b6:	b8 fc 1e 02 c0       	mov    eax,0xc0021efc
c00196bb:	c3                   	ret    

c00196bc <ISO9660::closeDir(void*)>:
c00196bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00196c2:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00196c5:	90                   	nop

c00196c6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00196c6:	b8 01 00 00 00       	mov    eax,0x1
c00196cb:	c3                   	ret    

c00196cc <ISO9660::unlink(char const*)>:
c00196cc:	b8 01 00 00 00       	mov    eax,0x1
c00196d1:	c3                   	ret    

c00196d2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00196d2:	b8 03 00 00 00       	mov    eax,0x3
c00196d7:	c3                   	ret    

c00196d8 <ISO9660::rename(char const*, char const*)>:
c00196d8:	b8 01 00 00 00       	mov    eax,0x1
c00196dd:	c3                   	ret    

c00196de <ISO9660::mkdir(char const*)>:
c00196de:	b8 01 00 00 00       	mov    eax,0x1
c00196e3:	c3                   	ret    

c00196e4 <ISO9660::~ISO9660()>:
c00196e4:	83 ec 0c             	sub    esp,0xc
c00196e7:	ba 3c 20 02 c0       	mov    edx,0xc002203c
c00196ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196f0:	89 10                	mov    DWORD PTR [eax],edx
c00196f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196f6:	83 ec 0c             	sub    esp,0xc
c00196f9:	50                   	push   eax
c00196fa:	e8 59 18 ff ff       	call   c000af58 <Filesystem::~Filesystem()>
c00196ff:	83 c4 10             	add    esp,0x10
c0019702:	90                   	nop
c0019703:	83 c4 0c             	add    esp,0xc
c0019706:	c3                   	ret    
c0019707:	90                   	nop

c0019708 <ISO9660::~ISO9660()>:
c0019708:	83 ec 0c             	sub    esp,0xc
c001970b:	83 ec 0c             	sub    esp,0xc
c001970e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019712:	e8 cd ff ff ff       	call   c00196e4 <ISO9660::~ISO9660()>
c0019717:	83 c4 10             	add    esp,0x10
c001971a:	83 ec 08             	sub    esp,0x8
c001971d:	6a 08                	push   0x8
c001971f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019723:	e8 16 11 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c0019728:	83 c4 10             	add    esp,0x10
c001972b:	83 c4 0c             	add    esp,0xc
c001972e:	c3                   	ret    
c001972f:	90                   	nop

c0019730 <ISO9660::exists(char const*)>:
c0019730:	83 ec 18             	sub    esp,0x18
c0019733:	68 17 1f 02 c0       	push   0xc0021f17
c0019738:	e8 00 74 ff ff       	call   c0010b3d <KePanic(char const*)>
c001973d:	31 c0                	xor    eax,eax
c001973f:	83 c4 1c             	add    esp,0x1c
c0019742:	c3                   	ret    
c0019743:	90                   	nop

c0019744 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019744:	56                   	push   esi
c0019745:	53                   	push   ebx
c0019746:	53                   	push   ebx
c0019747:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001974b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001974f:	85 db                	test   ebx,ebx
c0019751:	0f 84 ca 00 00 00    	je     c0019821 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019757:	85 f6                	test   esi,esi
c0019759:	0f 84 c2 00 00 00    	je     c0019821 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001975f:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019764:	b8 03 00 00 00       	mov    eax,0x3
c0019769:	0f 85 b7 00 00 00    	jne    c0019826 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001976f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019771:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019777:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001977e:	74 1b                	je     c001979b <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019780:	85 c0                	test   eax,eax
c0019782:	74 10                	je     c0019794 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019784:	83 ec 0c             	sub    esp,0xc
c0019787:	68 35 1f 02 c0       	push   0xc0021f35
c001978c:	e8 ac 73 ff ff       	call   c0010b3d <KePanic(char const*)>
c0019791:	83 c4 10             	add    esp,0x10
c0019794:	8a 03                	mov    al,BYTE PTR [ebx]
c0019796:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001979b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001979e:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00197a5:	85 c0                	test   eax,eax
c00197a7:	74 09                	je     c00197b2 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00197a9:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00197b0:	74 48                	je     c00197fa <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00197b2:	83 ec 0c             	sub    esp,0xc
c00197b5:	68 45 1f 02 c0       	push   0xc0021f45
c00197ba:	e8 7d 11 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00197bf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00197c2:	83 c4 10             	add    esp,0x10
c00197c5:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00197cc:	85 c0                	test   eax,eax
c00197ce:	74 17                	je     c00197e7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00197d0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00197d7:	83 ec 0c             	sub    esp,0xc
c00197da:	68 65 1f 02 c0       	push   0xc0021f65
c00197df:	e8 58 11 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00197e4:	83 c4 10             	add    esp,0x10
c00197e7:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00197ee:	83 ec 0c             	sub    esp,0xc
c00197f1:	50                   	push   eax
c00197f2:	e8 70 d2 fe ff       	call   c0006a67 <init_percd>
c00197f7:	83 c4 10             	add    esp,0x10
c00197fa:	51                   	push   ecx
c00197fb:	83 c3 03             	add    ebx,0x3
c00197fe:	51                   	push   ecx
c00197ff:	6a 00                	push   0x0
c0019801:	53                   	push   ebx
c0019802:	e8 23 cd fe ff       	call   c000652a <iso_open>
c0019807:	83 c4 10             	add    esp,0x10
c001980a:	89 c2                	mov    edx,eax
c001980c:	b8 01 00 00 00       	mov    eax,0x1
c0019811:	83 fa ff             	cmp    edx,0xffffffff
c0019814:	74 10                	je     c0019826 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019816:	83 c2 32             	add    edx,0x32
c0019819:	31 c0                	xor    eax,eax
c001981b:	01 d2                	add    edx,edx
c001981d:	89 16                	mov    DWORD PTR [esi],edx
c001981f:	eb 05                	jmp    c0019826 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019821:	b8 04 00 00 00       	mov    eax,0x4
c0019826:	5a                   	pop    edx
c0019827:	5b                   	pop    ebx
c0019828:	5e                   	pop    esi
c0019829:	c3                   	ret    

c001982a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001982a:	53                   	push   ebx
c001982b:	83 ec 08             	sub    esp,0x8
c001982e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019832:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019836:	85 c0                	test   eax,eax
c0019838:	74 2d                	je     c0019867 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001983a:	85 db                	test   ebx,ebx
c001983c:	74 29                	je     c0019867 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001983e:	52                   	push   edx
c001983f:	b9 02 00 00 00       	mov    ecx,0x2
c0019844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019848:	99                   	cdq    
c0019849:	f7 f9                	idiv   ecx
c001984b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001984f:	83 e8 32             	sub    eax,0x32
c0019852:	50                   	push   eax
c0019853:	e8 7a cd fe ff       	call   c00065d2 <iso_read>
c0019858:	83 c4 10             	add    esp,0x10
c001985b:	89 03                	mov    DWORD PTR [ebx],eax
c001985d:	09 d0                	or     eax,edx
c001985f:	0f 94 c0             	sete   al
c0019862:	0f b6 c0             	movzx  eax,al
c0019865:	eb 05                	jmp    c001986c <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0019867:	b8 04 00 00 00       	mov    eax,0x4
c001986c:	83 c4 08             	add    esp,0x8
c001986f:	5b                   	pop    ebx
c0019870:	c3                   	ret    
c0019871:	90                   	nop

c0019872 <ISO9660::seek(void*, unsigned long long)>:
c0019872:	57                   	push   edi
c0019873:	b8 04 00 00 00       	mov    eax,0x4
c0019878:	56                   	push   esi
c0019879:	51                   	push   ecx
c001987a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001987e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019882:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019886:	85 d2                	test   edx,edx
c0019888:	74 26                	je     c00198b0 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001988a:	89 d0                	mov    eax,edx
c001988c:	b9 02 00 00 00       	mov    ecx,0x2
c0019891:	6a 00                	push   0x0
c0019893:	99                   	cdq    
c0019894:	f7 f9                	idiv   ecx
c0019896:	57                   	push   edi
c0019897:	56                   	push   esi
c0019898:	83 e8 32             	sub    eax,0x32
c001989b:	50                   	push   eax
c001989c:	e8 47 ce fe ff       	call   c00066e8 <iso_seek>
c00198a1:	83 c4 10             	add    esp,0x10
c00198a4:	31 f0                	xor    eax,esi
c00198a6:	31 fa                	xor    edx,edi
c00198a8:	09 d0                	or     eax,edx
c00198aa:	0f 95 c0             	setne  al
c00198ad:	0f b6 c0             	movzx  eax,al
c00198b0:	5a                   	pop    edx
c00198b1:	5e                   	pop    esi
c00198b2:	5f                   	pop    edi
c00198b3:	c3                   	ret    

c00198b4 <ISO9660::tell(void*, unsigned long long*)>:
c00198b4:	53                   	push   ebx
c00198b5:	83 ec 08             	sub    esp,0x8
c00198b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00198bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00198c0:	85 c0                	test   eax,eax
c00198c2:	74 24                	je     c00198e8 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00198c4:	85 db                	test   ebx,ebx
c00198c6:	74 20                	je     c00198e8 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00198c8:	b9 02 00 00 00       	mov    ecx,0x2
c00198cd:	99                   	cdq    
c00198ce:	f7 f9                	idiv   ecx
c00198d0:	83 ec 0c             	sub    esp,0xc
c00198d3:	83 e8 32             	sub    eax,0x32
c00198d6:	50                   	push   eax
c00198d7:	e8 90 ce fe ff       	call   c000676c <iso_tell>
c00198dc:	83 c4 10             	add    esp,0x10
c00198df:	89 03                	mov    DWORD PTR [ebx],eax
c00198e1:	31 c0                	xor    eax,eax
c00198e3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00198e6:	eb 05                	jmp    c00198ed <ISO9660::tell(void*, unsigned long long*)+0x39>
c00198e8:	b8 04 00 00 00       	mov    eax,0x4
c00198ed:	83 c4 08             	add    esp,0x8
c00198f0:	5b                   	pop    ebx
c00198f1:	c3                   	ret    

c00198f2 <ISO9660::stat(void*, unsigned long long*)>:
c00198f2:	56                   	push   esi
c00198f3:	53                   	push   ebx
c00198f4:	83 ec 10             	sub    esp,0x10
c00198f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00198fb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00198ff:	68 89 1f 02 c0       	push   0xc0021f89
c0019904:	e8 33 10 ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0019909:	83 c4 10             	add    esp,0x10
c001990c:	85 db                	test   ebx,ebx
c001990e:	74 2a                	je     c001993a <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019910:	85 f6                	test   esi,esi
c0019912:	74 26                	je     c001993a <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019914:	89 d8                	mov    eax,ebx
c0019916:	b9 02 00 00 00       	mov    ecx,0x2
c001991b:	99                   	cdq    
c001991c:	83 ec 0c             	sub    esp,0xc
c001991f:	f7 f9                	idiv   ecx
c0019921:	83 e8 32             	sub    eax,0x32
c0019924:	50                   	push   eax
c0019925:	e8 73 ce fe ff       	call   c000679d <iso_total>
c001992a:	83 c4 10             	add    esp,0x10
c001992d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019934:	89 06                	mov    DWORD PTR [esi],eax
c0019936:	31 c0                	xor    eax,eax
c0019938:	eb 05                	jmp    c001993f <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001993a:	b8 04 00 00 00       	mov    eax,0x4
c001993f:	5a                   	pop    edx
c0019940:	5b                   	pop    ebx
c0019941:	5e                   	pop    esi
c0019942:	c3                   	ret    
c0019943:	90                   	nop

c0019944 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019944:	55                   	push   ebp
c0019945:	57                   	push   edi
c0019946:	56                   	push   esi
c0019947:	53                   	push   ebx
c0019948:	83 ec 18             	sub    esp,0x18
c001994b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001994f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019953:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019957:	68 91 1f 02 c0       	push   0xc0021f91
c001995c:	e8 db 0f ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0019961:	83 c4 10             	add    esp,0x10
c0019964:	85 ff                	test   edi,edi
c0019966:	0f 94 c0             	sete   al
c0019969:	85 f6                	test   esi,esi
c001996b:	0f 94 c2             	sete   dl
c001996e:	09 d0                	or     eax,edx
c0019970:	a8 01                	test   al,0x1
c0019972:	0f 85 dd 00 00 00    	jne    c0019a55 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019978:	85 db                	test   ebx,ebx
c001997a:	0f 84 d5 00 00 00    	je     c0019a55 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019980:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019983:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0019989:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019990:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019997:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019999:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c001999f:	74 1b                	je     c00199bc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00199a1:	85 c0                	test   eax,eax
c00199a3:	74 10                	je     c00199b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00199a5:	83 ec 0c             	sub    esp,0xc
c00199a8:	68 35 1f 02 c0       	push   0xc0021f35
c00199ad:	e8 8b 71 ff ff       	call   c0010b3d <KePanic(char const*)>
c00199b2:	83 c4 10             	add    esp,0x10
c00199b5:	8a 03                	mov    al,BYTE PTR [ebx]
c00199b7:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00199bc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00199bf:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00199c6:	85 c0                	test   eax,eax
c00199c8:	74 09                	je     c00199d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00199ca:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00199d1:	74 51                	je     c0019a24 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00199d3:	83 ec 0c             	sub    esp,0xc
c00199d6:	68 99 1f 02 c0       	push   0xc0021f99
c00199db:	e8 5c 0f ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00199e0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00199e3:	83 c4 10             	add    esp,0x10
c00199e6:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c00199ee:	74 21                	je     c0019a11 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00199f0:	83 ec 0c             	sub    esp,0xc
c00199f3:	68 b9 1f 02 c0       	push   0xc0021fb9
c00199f8:	e8 3f 0f ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c00199fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019a00:	83 c4 10             	add    esp,0x10
c0019a03:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019a0a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019a11:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019a18:	83 ec 0c             	sub    esp,0xc
c0019a1b:	50                   	push   eax
c0019a1c:	e8 46 d0 fe ff       	call   c0006a67 <init_percd>
c0019a21:	83 c4 10             	add    esp,0x10
c0019a24:	52                   	push   edx
c0019a25:	83 c3 03             	add    ebx,0x3
c0019a28:	52                   	push   edx
c0019a29:	6a 00                	push   0x0
c0019a2b:	53                   	push   ebx
c0019a2c:	e8 f9 ca fe ff       	call   c000652a <iso_open>
c0019a31:	83 c4 10             	add    esp,0x10
c0019a34:	83 f8 ff             	cmp    eax,0xffffffff
c0019a37:	89 c5                	mov    ebp,eax
c0019a39:	75 21                	jne    c0019a5c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0019a3b:	50                   	push   eax
c0019a3c:	50                   	push   eax
c0019a3d:	6a 01                	push   0x1
c0019a3f:	53                   	push   ebx
c0019a40:	e8 e5 ca fe ff       	call   c000652a <iso_open>
c0019a45:	83 c4 10             	add    esp,0x10
c0019a48:	ba 02 00 00 00       	mov    edx,0x2
c0019a4d:	40                   	inc    eax
c0019a4e:	74 2b                	je     c0019a7b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019a50:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019a53:	eb 24                	jmp    c0019a79 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019a55:	ba 04 00 00 00       	mov    edx,0x4
c0019a5a:	eb 1f                	jmp    c0019a7b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019a5c:	83 ec 0c             	sub    esp,0xc
c0019a5f:	50                   	push   eax
c0019a60:	e8 38 cd fe ff       	call   c000679d <iso_total>
c0019a65:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019a6c:	89 07                	mov    DWORD PTR [edi],eax
c0019a6e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019a71:	e8 3e cb fe ff       	call   c00065b4 <iso_close>
c0019a76:	83 c4 10             	add    esp,0x10
c0019a79:	31 d2                	xor    edx,edx
c0019a7b:	83 c4 0c             	add    esp,0xc
c0019a7e:	89 d0                	mov    eax,edx
c0019a80:	5b                   	pop    ebx
c0019a81:	5e                   	pop    esi
c0019a82:	5f                   	pop    edi
c0019a83:	5d                   	pop    ebp
c0019a84:	c3                   	ret    
c0019a85:	90                   	nop

c0019a86 <ISO9660::close(void*)>:
c0019a86:	83 ec 0c             	sub    esp,0xc
c0019a89:	b8 04 00 00 00       	mov    eax,0x4
c0019a8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019a92:	85 d2                	test   edx,edx
c0019a94:	74 1b                	je     c0019ab1 <ISO9660::close(void*)+0x2b>
c0019a96:	89 d0                	mov    eax,edx
c0019a98:	b9 02 00 00 00       	mov    ecx,0x2
c0019a9d:	99                   	cdq    
c0019a9e:	83 ec 0c             	sub    esp,0xc
c0019aa1:	f7 f9                	idiv   ecx
c0019aa3:	83 e8 32             	sub    eax,0x32
c0019aa6:	50                   	push   eax
c0019aa7:	e8 08 cb fe ff       	call   c00065b4 <iso_close>
c0019aac:	83 c4 10             	add    esp,0x10
c0019aaf:	31 c0                	xor    eax,eax
c0019ab1:	83 c4 0c             	add    esp,0xc
c0019ab4:	c3                   	ret    
c0019ab5:	90                   	nop

c0019ab6 <ISO9660::openDir(char const*, void**)>:
c0019ab6:	56                   	push   esi
c0019ab7:	53                   	push   ebx
c0019ab8:	50                   	push   eax
c0019ab9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019abd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019ac1:	85 db                	test   ebx,ebx
c0019ac3:	0f 84 bd 00 00 00    	je     c0019b86 <ISO9660::openDir(char const*, void**)+0xd0>
c0019ac9:	85 f6                	test   esi,esi
c0019acb:	0f 84 b5 00 00 00    	je     c0019b86 <ISO9660::openDir(char const*, void**)+0xd0>
c0019ad1:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019ad3:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c0019ad9:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019ae0:	74 1b                	je     c0019afd <ISO9660::openDir(char const*, void**)+0x47>
c0019ae2:	85 c0                	test   eax,eax
c0019ae4:	74 10                	je     c0019af6 <ISO9660::openDir(char const*, void**)+0x40>
c0019ae6:	83 ec 0c             	sub    esp,0xc
c0019ae9:	68 35 1f 02 c0       	push   0xc0021f35
c0019aee:	e8 4a 70 ff ff       	call   c0010b3d <KePanic(char const*)>
c0019af3:	83 c4 10             	add    esp,0x10
c0019af6:	8a 03                	mov    al,BYTE PTR [ebx]
c0019af8:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019afd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019b00:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019b07:	85 c0                	test   eax,eax
c0019b09:	74 10                	je     c0019b1b <ISO9660::openDir(char const*, void**)+0x65>
c0019b0b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019b12:	74 1a                	je     c0019b2e <ISO9660::openDir(char const*, void**)+0x78>
c0019b14:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019b1b:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019b22:	83 ec 0c             	sub    esp,0xc
c0019b25:	50                   	push   eax
c0019b26:	e8 3c cf fe ff       	call   c0006a67 <init_percd>
c0019b2b:	83 c4 10             	add    esp,0x10
c0019b2e:	50                   	push   eax
c0019b2f:	83 c3 03             	add    ebx,0x3
c0019b32:	50                   	push   eax
c0019b33:	6a 01                	push   0x1
c0019b35:	53                   	push   ebx
c0019b36:	e8 ef c9 fe ff       	call   c000652a <iso_open>
c0019b3b:	83 c4 10             	add    esp,0x10
c0019b3e:	83 f8 ff             	cmp    eax,0xffffffff
c0019b41:	89 c3                	mov    ebx,eax
c0019b43:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019b48:	75 1c                	jne    c0019b66 <ISO9660::openDir(char const*, void**)+0xb0>
c0019b4a:	53                   	push   ebx
c0019b4b:	53                   	push   ebx
c0019b4c:	68 dd 1f 02 c0       	push   0xc0021fdd
c0019b51:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019b57:	e8 42 ef fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c0019b5c:	83 c4 10             	add    esp,0x10
c0019b5f:	b8 01 00 00 00       	mov    eax,0x1
c0019b64:	eb 25                	jmp    c0019b8b <ISO9660::openDir(char const*, void**)+0xd5>
c0019b66:	51                   	push   ecx
c0019b67:	01 db                	add    ebx,ebx
c0019b69:	51                   	push   ecx
c0019b6a:	83 c3 65             	add    ebx,0x65
c0019b6d:	68 f0 1f 02 c0       	push   0xc0021ff0
c0019b72:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019b78:	e8 21 ef fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c0019b7d:	83 c4 10             	add    esp,0x10
c0019b80:	31 c0                	xor    eax,eax
c0019b82:	89 1e                	mov    DWORD PTR [esi],ebx
c0019b84:	eb 05                	jmp    c0019b8b <ISO9660::openDir(char const*, void**)+0xd5>
c0019b86:	b8 04 00 00 00       	mov    eax,0x4
c0019b8b:	5a                   	pop    edx
c0019b8c:	5b                   	pop    ebx
c0019b8d:	5e                   	pop    esi
c0019b8e:	c3                   	ret    
c0019b8f:	90                   	nop

c0019b90 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019b90:	55                   	push   ebp
c0019b91:	57                   	push   edi
c0019b92:	56                   	push   esi
c0019b93:	53                   	push   ebx
c0019b94:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b9a:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0019ba1:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019ba8:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0019baf:	85 db                	test   ebx,ebx
c0019bb1:	0f 84 e4 00 00 00    	je     c0019c9b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019bb7:	85 ed                	test   ebp,ebp
c0019bb9:	0f 84 dc 00 00 00    	je     c0019c9b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019bbf:	83 ec 0c             	sub    esp,0xc
c0019bc2:	68 03 20 02 c0       	push   0xc0022003
c0019bc7:	e8 70 0d ff ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c0019bcc:	89 d8                	mov    eax,ebx
c0019bce:	b9 02 00 00 00       	mov    ecx,0x2
c0019bd3:	99                   	cdq    
c0019bd4:	f7 f9                	idiv   ecx
c0019bd6:	83 e8 32             	sub    eax,0x32
c0019bd9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bdc:	e8 0e cc fe ff       	call   c00067ef <iso_readdir>
c0019be1:	83 c4 10             	add    esp,0x10
c0019be4:	85 c0                	test   eax,eax
c0019be6:	89 c3                	mov    ebx,eax
c0019be8:	75 38                	jne    c0019c22 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0019bea:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019bef:	53                   	push   ebx
c0019bf0:	53                   	push   ebx
c0019bf1:	68 0e 20 02 c0       	push   0xc002200e
c0019bf6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019bfc:	e8 9d ee fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c0019c01:	83 c4 0c             	add    esp,0xc
c0019c04:	68 10 01 00 00       	push   0x110
c0019c09:	6a 00                	push   0x0
c0019c0b:	57                   	push   edi
c0019c0c:	e8 df 68 fe ff       	call   c00004f0 <memset>
c0019c11:	83 c4 10             	add    esp,0x10
c0019c14:	b8 01 00 00 00       	mov    eax,0x1
c0019c19:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0019c20:	eb 7e                	jmp    c0019ca0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019c22:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019c28:	8d 70 08             	lea    esi,[eax+0x8]
c0019c2b:	83 ec 0c             	sub    esp,0xc
c0019c2e:	56                   	push   esi
c0019c2f:	e8 4c 69 fe ff       	call   c0000580 <strlen>
c0019c34:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019c3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c40:	83 c4 10             	add    esp,0x10
c0019c43:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0019c47:	75 0a                	jne    c0019c53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0019c49:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0019c4c:	b8 02 00 00 00       	mov    eax,0x2
c0019c51:	74 05                	je     c0019c58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0019c53:	b8 01 00 00 00       	mov    eax,0x1
c0019c58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019c5c:	50                   	push   eax
c0019c5d:	50                   	push   eax
c0019c5e:	56                   	push   esi
c0019c5f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019c63:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019c67:	50                   	push   eax
c0019c68:	e8 e3 69 fe ff       	call   c0000650 <strcpy>
c0019c6d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019c74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c76:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0019c7d:	5a                   	pop    edx
c0019c7e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019c83:	59                   	pop    ecx
c0019c84:	68 21 20 02 c0       	push   0xc0022021
c0019c89:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019c8f:	e8 0a ee fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c0019c94:	83 c4 10             	add    esp,0x10
c0019c97:	31 c0                	xor    eax,eax
c0019c99:	eb 05                	jmp    c0019ca0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019c9b:	b8 04 00 00 00       	mov    eax,0x4
c0019ca0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ca6:	5b                   	pop    ebx
c0019ca7:	5e                   	pop    esi
c0019ca8:	5f                   	pop    edi
c0019ca9:	5d                   	pop    ebp
c0019caa:	c3                   	ret    

c0019cab <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019cab:	57                   	push   edi
c0019cac:	56                   	push   esi
c0019cad:	53                   	push   ebx
c0019cae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019cb2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019cb6:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c0019cbc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019cc0:	0f be cb             	movsx  ecx,bl
c0019cc3:	75 0b                	jne    c0019cd0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019cc5:	0f be 05 60 2e 02 c0 	movsx  eax,BYTE PTR ds:0xc0022e60
c0019ccc:	39 c8                	cmp    eax,ecx
c0019cce:	74 47                	je     c0019d17 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019cd0:	83 ec 0c             	sub    esp,0xc
c0019cd3:	31 d2                	xor    edx,edx
c0019cd5:	68 40 83 02 c0       	push   0xc0028340
c0019cda:	6a 01                	push   0x1
c0019cdc:	52                   	push   edx
c0019cdd:	56                   	push   esi
c0019cde:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c0019ce5:	e8 74 37 ff ff       	call   c000d45e <LogicalDisk::read(unsigned long long, int, void*)>
c0019cea:	83 c4 20             	add    esp,0x20
c0019ced:	85 c0                	test   eax,eax
c0019cef:	75 0e                	jne    c0019cff <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019cf1:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019cf7:	88 1d 60 2e 02 c0    	mov    BYTE PTR ds:0xc0022e60,bl
c0019cfd:	eb 18                	jmp    c0019d17 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019cff:	50                   	push   eax
c0019d00:	68 00 08 00 00       	push   0x800
c0019d05:	6a 00                	push   0x0
c0019d07:	57                   	push   edi
c0019d08:	e8 e3 67 fe ff       	call   c00004f0 <memset>
c0019d0d:	83 c4 10             	add    esp,0x10
c0019d10:	b8 01 00 00 00       	mov    eax,0x1
c0019d15:	eb 0e                	jmp    c0019d25 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019d17:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019d1c:	b9 00 08 00 00       	mov    ecx,0x800
c0019d21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d23:	31 c0                	xor    eax,eax
c0019d25:	5b                   	pop    ebx
c0019d26:	5e                   	pop    esi
c0019d27:	5f                   	pop    edi
c0019d28:	c3                   	ret    
c0019d29:	90                   	nop

c0019d2a <ISO9660::tryMount(LogicalDisk*, int)>:
c0019d2a:	53                   	push   ebx
c0019d2b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019d31:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019d3b:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019d42:	8d 58 41             	lea    ebx,[eax+0x41]
c0019d45:	0f be db             	movsx  ebx,bl
c0019d48:	53                   	push   ebx
c0019d49:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019d4d:	50                   	push   eax
c0019d4e:	6a 10                	push   0x10
c0019d50:	e8 56 ff ff ff       	call   c0019cab <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019d55:	83 c4 10             	add    esp,0x10
c0019d58:	31 d2                	xor    edx,edx
c0019d5a:	85 c0                	test   eax,eax
c0019d5c:	75 33                	jne    c0019d91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d5e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019d63:	75 2c                	jne    c0019d91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d65:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019d6a:	75 25                	jne    c0019d91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d6c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019d71:	75 1e                	jne    c0019d91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d73:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019d78:	75 17                	jne    c0019d91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d7a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019d7f:	75 10                	jne    c0019d91 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d81:	83 ec 0c             	sub    esp,0xc
c0019d84:	53                   	push   ebx
c0019d85:	e8 dd cc fe ff       	call   c0006a67 <init_percd>
c0019d8a:	83 c4 10             	add    esp,0x10
c0019d8d:	40                   	inc    eax
c0019d8e:	0f 95 c2             	setne  dl
c0019d91:	81 c4 08 08 00 00    	add    esp,0x808
c0019d97:	88 d0                	mov    al,dl
c0019d99:	5b                   	pop    ebx
c0019d9a:	c3                   	ret    
c0019d9b:	90                   	nop

c0019d9c <ISO9660::ISO9660()>:
c0019d9c:	83 ec 0c             	sub    esp,0xc
c0019d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019da3:	83 ec 0c             	sub    esp,0xc
c0019da6:	50                   	push   eax
c0019da7:	e8 88 11 ff ff       	call   c000af34 <Filesystem::Filesystem()>
c0019dac:	83 c4 10             	add    esp,0x10
c0019daf:	ba 3c 20 02 c0       	mov    edx,0xc002203c
c0019db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019db8:	89 10                	mov    DWORD PTR [eax],edx
c0019dba:	e8 ba cd fe ff       	call   c0006b79 <fs_iso9660_init>
c0019dbf:	90                   	nop
c0019dc0:	83 c4 0c             	add    esp,0xc
c0019dc3:	c3                   	ret    

c0019dc4 <SoundCard::beginPlayback()>:
c0019dc4:	c7 44 24 04 9c 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc002209c
c0019dcc:	e9 6c 6d ff ff       	jmp    c0010b3d <KePanic(char const*)>
c0019dd1:	90                   	nop

c0019dd2 <SoundCard::stopPlayback()>:
c0019dd2:	c7 44 24 04 9c 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc002209c
c0019dda:	e9 5e 6d ff ff       	jmp    c0010b3d <KePanic(char const*)>
c0019ddf:	90                   	nop

c0019de0 <SoundCard::SoundCard(char const*)>:
c0019de0:	83 ec 1c             	sub    esp,0x1c
c0019de3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019de7:	83 ec 08             	sub    esp,0x8
c0019dea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019dee:	50                   	push   eax
c0019def:	e8 18 24 ff ff       	call   c000c20c <Device::Device(char const*)>
c0019df4:	83 c4 10             	add    esp,0x10
c0019df7:	ba e8 20 02 c0       	mov    edx,0xc00220e8
c0019dfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e00:	89 10                	mov    DWORD PTR [eax],edx
c0019e02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e06:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019e0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e11:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019e1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e1f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019e29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e2d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019e37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e3b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019e45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019e4d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019e52:	7f 1a                	jg     c0019e6e <SoundCard::SoundCard(char const*)+0x8e>
c0019e54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e5c:	83 c2 54             	add    edx,0x54
c0019e5f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019e67:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019e6c:	eb df                	jmp    c0019e4d <SoundCard::SoundCard(char const*)+0x6d>
c0019e6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e72:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019e79:	90                   	nop
c0019e7a:	83 c4 1c             	add    esp,0x1c
c0019e7d:	c3                   	ret    

c0019e7e <SoundCard::~SoundCard()>:
c0019e7e:	83 ec 0c             	sub    esp,0xc
c0019e81:	ba e8 20 02 c0       	mov    edx,0xc00220e8
c0019e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e8a:	89 10                	mov    DWORD PTR [eax],edx
c0019e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e90:	83 ec 0c             	sub    esp,0xc
c0019e93:	50                   	push   eax
c0019e94:	e8 dd 20 ff ff       	call   c000bf76 <Device::~Device()>
c0019e99:	83 c4 10             	add    esp,0x10
c0019e9c:	90                   	nop
c0019e9d:	83 c4 0c             	add    esp,0xc
c0019ea0:	c3                   	ret    
c0019ea1:	90                   	nop

c0019ea2 <SoundCard::~SoundCard()>:
c0019ea2:	83 ec 0c             	sub    esp,0xc
c0019ea5:	83 ec 0c             	sub    esp,0xc
c0019ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019eac:	e8 cd ff ff ff       	call   c0019e7e <SoundCard::~SoundCard()>
c0019eb1:	83 c4 10             	add    esp,0x10
c0019eb4:	83 ec 08             	sub    esp,0x8
c0019eb7:	68 e8 01 00 00       	push   0x1e8
c0019ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ec0:	e8 79 09 ff ff       	call   c000a83e <operator delete(void*, unsigned long)>
c0019ec5:	83 c4 10             	add    esp,0x10
c0019ec8:	83 c4 0c             	add    esp,0xc
c0019ecb:	c3                   	ret    

c0019ecc <SoundCard::configureRates(int, int, int)>:
c0019ecc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019ed0:	31 c0                	xor    eax,eax
c0019ed2:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019ed9:	75 20                	jne    c0019efb <SoundCard::configureRates(int, int, int)+0x2f>
c0019edb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019edf:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019ee5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ee9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ef3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019ef9:	b0 01                	mov    al,0x1
c0019efb:	c3                   	ret    

c0019efc <SoundCard::getSamples16(int, short*)>:
c0019efc:	55                   	push   ebp
c0019efd:	57                   	push   edi
c0019efe:	31 ff                	xor    edi,edi
c0019f00:	56                   	push   esi
c0019f01:	53                   	push   ebx
c0019f02:	31 db                	xor    ebx,ebx
c0019f04:	83 ec 10             	sub    esp,0x10
c0019f07:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019f0b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019f0f:	8d 04 36             	lea    eax,[esi+esi*1]
c0019f12:	50                   	push   eax
c0019f13:	6a 00                	push   0x0
c0019f15:	55                   	push   ebp
c0019f16:	e8 d5 65 fe ff       	call   c00004f0 <memset>
c0019f1b:	83 c4 10             	add    esp,0x10
c0019f1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f22:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019f29:	85 c0                	test   eax,eax
c0019f2b:	74 1a                	je     c0019f47 <SoundCard::getSamples16(int, short*)+0x4b>
c0019f2d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019f31:	75 14                	jne    c0019f47 <SoundCard::getSamples16(int, short*)+0x4b>
c0019f33:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019f37:	55                   	push   ebp
c0019f38:	56                   	push   esi
c0019f39:	50                   	push   eax
c0019f3a:	e8 f1 02 00 00       	call   c001a230 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019f3f:	83 c4 10             	add    esp,0x10
c0019f42:	39 c3                	cmp    ebx,eax
c0019f44:	0f 4c d8             	cmovl  ebx,eax
c0019f47:	47                   	inc    edi
c0019f48:	83 ff 20             	cmp    edi,0x20
c0019f4b:	75 d1                	jne    c0019f1e <SoundCard::getSamples16(int, short*)+0x22>
c0019f4d:	83 c4 0c             	add    esp,0xc
c0019f50:	89 d8                	mov    eax,ebx
c0019f52:	5b                   	pop    ebx
c0019f53:	5e                   	pop    esi
c0019f54:	5f                   	pop    edi
c0019f55:	5d                   	pop    ebp
c0019f56:	c3                   	ret    
c0019f57:	90                   	nop

c0019f58 <SoundCard::getSamples32(int, int*)>:
c0019f58:	55                   	push   ebp
c0019f59:	57                   	push   edi
c0019f5a:	31 ff                	xor    edi,edi
c0019f5c:	56                   	push   esi
c0019f5d:	31 f6                	xor    esi,esi
c0019f5f:	53                   	push   ebx
c0019f60:	83 ec 10             	sub    esp,0x10
c0019f63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019f67:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019f6b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019f6f:	c1 e0 02             	shl    eax,0x2
c0019f72:	50                   	push   eax
c0019f73:	6a 00                	push   0x0
c0019f75:	55                   	push   ebp
c0019f76:	e8 75 65 fe ff       	call   c00004f0 <memset>
c0019f7b:	83 c4 10             	add    esp,0x10
c0019f7e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019f85:	85 c0                	test   eax,eax
c0019f87:	74 1a                	je     c0019fa3 <SoundCard::getSamples32(int, int*)+0x4b>
c0019f89:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019f8d:	75 14                	jne    c0019fa3 <SoundCard::getSamples32(int, int*)+0x4b>
c0019f8f:	53                   	push   ebx
c0019f90:	55                   	push   ebp
c0019f91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019f95:	50                   	push   eax
c0019f96:	e8 65 03 00 00       	call   c001a300 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019f9b:	83 c4 10             	add    esp,0x10
c0019f9e:	39 c6                	cmp    esi,eax
c0019fa0:	0f 4c f0             	cmovl  esi,eax
c0019fa3:	47                   	inc    edi
c0019fa4:	83 ff 20             	cmp    edi,0x20
c0019fa7:	75 d5                	jne    c0019f7e <SoundCard::getSamples32(int, int*)+0x26>
c0019fa9:	85 f6                	test   esi,esi
c0019fab:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019fb2:	75 0f                	jne    c0019fc3 <SoundCard::getSamples32(int, int*)+0x6b>
c0019fb4:	85 c0                	test   eax,eax
c0019fb6:	74 1b                	je     c0019fd3 <SoundCard::getSamples32(int, int*)+0x7b>
c0019fb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fba:	83 ec 0c             	sub    esp,0xc
c0019fbd:	53                   	push   ebx
c0019fbe:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019fc1:	eb 0d                	jmp    c0019fd0 <SoundCard::getSamples32(int, int*)+0x78>
c0019fc3:	85 c0                	test   eax,eax
c0019fc5:	75 0c                	jne    c0019fd3 <SoundCard::getSamples32(int, int*)+0x7b>
c0019fc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fc9:	83 ec 0c             	sub    esp,0xc
c0019fcc:	53                   	push   ebx
c0019fcd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019fd0:	83 c4 10             	add    esp,0x10
c0019fd3:	83 c4 0c             	add    esp,0xc
c0019fd6:	89 f0                	mov    eax,esi
c0019fd8:	5b                   	pop    ebx
c0019fd9:	5e                   	pop    esi
c0019fda:	5f                   	pop    edi
c0019fdb:	5d                   	pop    ebp
c0019fdc:	c3                   	ret    
c0019fdd:	90                   	nop

c0019fde <SoundCard::addChannel(SoundPort*)>:
c0019fde:	83 ec 0c             	sub    esp,0xc
c0019fe1:	31 c0                	xor    eax,eax
c0019fe3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019fe7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019fef:	74 1b                	je     c001a00c <SoundCard::addChannel(SoundPort*)+0x2e>
c0019ff1:	40                   	inc    eax
c0019ff2:	83 f8 20             	cmp    eax,0x20
c0019ff5:	75 f0                	jne    c0019fe7 <SoundCard::addChannel(SoundPort*)+0x9>
c0019ff7:	83 ec 0c             	sub    esp,0xc
c0019ffa:	68 c1 20 02 c0       	push   0xc00220c1
c0019fff:	e8 39 6b ff ff       	call   c0010b3d <KePanic(char const*)>
c001a004:	83 c4 10             	add    esp,0x10
c001a007:	83 c8 ff             	or     eax,0xffffffff
c001a00a:	eb 0b                	jmp    c001a017 <SoundCard::addChannel(SoundPort*)+0x39>
c001a00c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a010:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a017:	83 c4 0c             	add    esp,0xc
c001a01a:	c3                   	ret    
c001a01b:	90                   	nop

c001a01c <SoundCard::removeChannel(int)>:
c001a01c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a024:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a02f:	c3                   	ret    

c001a030 <SoundPort::SoundPort(int, int, int, int)>:
c001a030:	83 ec 0c             	sub    esp,0xc
c001a033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a037:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a03e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a042:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a04a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a04e:	89 10                	mov    DWORD PTR [eax],edx
c001a050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a054:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a058:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a05f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a063:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a066:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a06b:	75 13                	jne    c001a080 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a06d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a071:	8b 00                	mov    eax,DWORD PTR [eax]
c001a073:	05 a0 0f 00 00       	add    eax,0xfa0
c001a078:	d1 e0                	shl    eax,1
c001a07a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a07e:	66 90                	xchg   ax,ax
c001a080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a084:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a088:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a08f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a09a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a09d:	c1 e0 02             	shl    eax,0x2
c001a0a0:	83 ec 0c             	sub    esp,0xc
c001a0a3:	50                   	push   eax
c001a0a4:	e8 22 da fe ff       	call   c0007acb <malloc>
c001a0a9:	83 c4 10             	add    esp,0x10
c001a0ac:	89 c2                	mov    edx,eax
c001a0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a0b5:	90                   	nop
c001a0b6:	83 c4 0c             	add    esp,0xc
c001a0b9:	c3                   	ret    
c001a0ba:	66 90                	xchg   ax,ax

c001a0bc <SoundPort::~SoundPort()>:
c001a0bc:	83 ec 0c             	sub    esp,0xc
c001a0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a0c6:	85 c0                	test   eax,eax
c001a0c8:	74 1e                	je     c001a0e8 <SoundPort::~SoundPort()+0x2c>
c001a0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a0d1:	83 ec 0c             	sub    esp,0xc
c001a0d4:	50                   	push   eax
c001a0d5:	e8 01 da fe ff       	call   c0007adb <free>
c001a0da:	83 c4 10             	add    esp,0x10
c001a0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0e1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a0e8:	90                   	nop
c001a0e9:	83 c4 0c             	add    esp,0xc
c001a0ec:	c3                   	ret    
c001a0ed:	90                   	nop
c001a0ee:	66 90                	xchg   ax,ax

c001a0f0 <SoundPort::unpause()>:
c001a0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0f4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a0f8:	c3                   	ret    
c001a0f9:	90                   	nop
c001a0fa:	66 90                	xchg   ax,ax

c001a0fc <SoundPort::pause()>:
c001a0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a100:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a104:	c3                   	ret    
c001a105:	90                   	nop
c001a106:	66 90                	xchg   ax,ax

c001a108 <SoundPort::getBufferUsed()>:
c001a108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a10c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a10f:	c3                   	ret    

c001a110 <SoundPort::getBufferSize()>:
c001a110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a114:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a117:	c3                   	ret    

c001a118 <SoundPort::buffer16(short*, int)>:
c001a118:	55                   	push   ebp
c001a119:	57                   	push   edi
c001a11a:	56                   	push   esi
c001a11b:	53                   	push   ebx
c001a11c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a120:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a124:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a127:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a12a:	74 68                	je     c001a194 <SoundPort::buffer16(short*, int)+0x7c>
c001a12c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a130:	85 c9                	test   ecx,ecx
c001a132:	7e 60                	jle    c001a194 <SoundPort::buffer16(short*, int)+0x7c>
c001a134:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a138:	8d 70 01             	lea    esi,[eax+0x1]
c001a13b:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a13e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a141:	c1 e1 0f             	shl    ecx,0xf
c001a144:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a147:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a14a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a14d:	74 4d                	je     c001a19c <SoundPort::buffer16(short*, int)+0x84>
c001a14f:	31 f6                	xor    esi,esi
c001a151:	eb 21                	jmp    c001a174 <SoundPort::buffer16(short*, int)+0x5c>
c001a153:	90                   	nop
c001a154:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a159:	8d 79 01             	lea    edi,[ecx+0x1]
c001a15c:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a15f:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a162:	c1 e3 0f             	shl    ebx,0xf
c001a165:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a168:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a16b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a16e:	74 1c                	je     c001a18c <SoundPort::buffer16(short*, int)+0x74>
c001a170:	89 c6                	mov    esi,eax
c001a172:	66 90                	xchg   ax,ax
c001a174:	8d 46 01             	lea    eax,[esi+0x1]
c001a177:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a17b:	75 d7                	jne    c001a154 <SoundPort::buffer16(short*, int)+0x3c>
c001a17d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a181:	8d 76 00             	lea    esi,[esi+0x0]
c001a184:	5b                   	pop    ebx
c001a185:	5e                   	pop    esi
c001a186:	5f                   	pop    edi
c001a187:	5d                   	pop    ebp
c001a188:	c3                   	ret    
c001a189:	8d 76 00             	lea    esi,[esi+0x0]
c001a18c:	5b                   	pop    ebx
c001a18d:	8d 46 02             	lea    eax,[esi+0x2]
c001a190:	5e                   	pop    esi
c001a191:	5f                   	pop    edi
c001a192:	5d                   	pop    ebp
c001a193:	c3                   	ret    
c001a194:	5b                   	pop    ebx
c001a195:	31 c0                	xor    eax,eax
c001a197:	5e                   	pop    esi
c001a198:	5f                   	pop    edi
c001a199:	5d                   	pop    ebp
c001a19a:	c3                   	ret    
c001a19b:	90                   	nop
c001a19c:	b8 01 00 00 00       	mov    eax,0x1
c001a1a1:	eb e1                	jmp    c001a184 <SoundPort::buffer16(short*, int)+0x6c>
c001a1a3:	90                   	nop

c001a1a4 <SoundPort::buffer32(int*, int)>:
c001a1a4:	55                   	push   ebp
c001a1a5:	57                   	push   edi
c001a1a6:	56                   	push   esi
c001a1a7:	53                   	push   ebx
c001a1a8:	83 ec 04             	sub    esp,0x4
c001a1ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a1af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1b3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a1b7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a1ba:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a1bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1c0:	74 5a                	je     c001a21c <SoundPort::buffer32(int*, int)+0x78>
c001a1c2:	85 c0                	test   eax,eax
c001a1c4:	7e 56                	jle    c001a21c <SoundPort::buffer32(int*, int)+0x78>
c001a1c6:	8d 71 01             	lea    esi,[ecx+0x1]
c001a1c9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a1cc:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a1cf:	8b 37                	mov    esi,DWORD PTR [edi]
c001a1d1:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a1d4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a1d7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a1da:	74 4c                	je     c001a228 <SoundPort::buffer32(int*, int)+0x84>
c001a1dc:	31 f6                	xor    esi,esi
c001a1de:	eb 1c                	jmp    c001a1fc <SoundPort::buffer32(int*, int)+0x58>
c001a1e0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a1e3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a1e6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a1e9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a1ec:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a1f0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a1f3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a1f6:	74 18                	je     c001a210 <SoundPort::buffer32(int*, int)+0x6c>
c001a1f8:	89 de                	mov    esi,ebx
c001a1fa:	66 90                	xchg   ax,ax
c001a1fc:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a1ff:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a202:	75 dc                	jne    c001a1e0 <SoundPort::buffer32(int*, int)+0x3c>
c001a204:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a207:	90                   	nop
c001a208:	83 c4 04             	add    esp,0x4
c001a20b:	5b                   	pop    ebx
c001a20c:	5e                   	pop    esi
c001a20d:	5f                   	pop    edi
c001a20e:	5d                   	pop    ebp
c001a20f:	c3                   	ret    
c001a210:	8d 46 02             	lea    eax,[esi+0x2]
c001a213:	83 c4 04             	add    esp,0x4
c001a216:	5b                   	pop    ebx
c001a217:	5e                   	pop    esi
c001a218:	5f                   	pop    edi
c001a219:	5d                   	pop    ebp
c001a21a:	c3                   	ret    
c001a21b:	90                   	nop
c001a21c:	83 c4 04             	add    esp,0x4
c001a21f:	31 c0                	xor    eax,eax
c001a221:	5b                   	pop    ebx
c001a222:	5e                   	pop    esi
c001a223:	5f                   	pop    edi
c001a224:	5d                   	pop    ebp
c001a225:	c3                   	ret    
c001a226:	66 90                	xchg   ax,ax
c001a228:	b8 01 00 00 00       	mov    eax,0x1
c001a22d:	eb d9                	jmp    c001a208 <SoundPort::buffer32(int*, int)+0x64>
c001a22f:	90                   	nop

c001a230 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a230:	55                   	push   ebp
c001a231:	57                   	push   edi
c001a232:	56                   	push   esi
c001a233:	53                   	push   ebx
c001a234:	83 ec 0c             	sub    esp,0xc
c001a237:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a23b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a23f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a243:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a247:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001a24d:	39 03                	cmp    DWORD PTR [ebx],eax
c001a24f:	74 13                	je     c001a264 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001a251:	83 ec 0c             	sub    esp,0xc
c001a254:	68 14 21 02 c0       	push   0xc0022114
c001a259:	e8 df 68 ff ff       	call   c0010b3d <KePanic(char const*)>
c001a25e:	83 c4 10             	add    esp,0x10
c001a261:	8d 76 00             	lea    esi,[esi+0x0]
c001a264:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001a26a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a26d:	74 11                	je     c001a280 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001a26f:	83 ec 0c             	sub    esp,0xc
c001a272:	68 53 21 02 c0       	push   0xc0022153
c001a277:	e8 c1 68 ff ff       	call   c0010b3d <KePanic(char const*)>
c001a27c:	83 c4 10             	add    esp,0x10
c001a27f:	90                   	nop
c001a280:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001a286:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a289:	74 11                	je     c001a29c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001a28b:	83 ec 0c             	sub    esp,0xc
c001a28e:	68 53 21 02 c0       	push   0xc0022153
c001a293:	e8 a5 68 ff ff       	call   c0010b3d <KePanic(char const*)>
c001a298:	83 c4 10             	add    esp,0x10
c001a29b:	90                   	nop
c001a29c:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001a29f:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001a2a3:	85 f6                	test   esi,esi
c001a2a5:	7e 2d                	jle    c001a2d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001a2a7:	31 c0                	xor    eax,eax
c001a2a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a2ac:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a2af:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001a2b2:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001a2b8:	85 c9                	test   ecx,ecx
c001a2ba:	0f 49 d1             	cmovns edx,ecx
c001a2bd:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001a2c1:	c1 fa 0f             	sar    edx,0xf
c001a2c4:	01 d1                	add    ecx,edx
c001a2c6:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001a2ca:	83 c0 01             	add    eax,0x1
c001a2cd:	39 f0                	cmp    eax,esi
c001a2cf:	75 db                	jne    c001a2ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001a2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2d4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a2d7:	83 ec 04             	sub    esp,0x4
c001a2da:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a2dd:	29 f0                	sub    eax,esi
c001a2df:	c1 e0 02             	shl    eax,0x2
c001a2e2:	50                   	push   eax
c001a2e3:	8d 04 b2             	lea    eax,[edx+esi*4]
c001a2e6:	50                   	push   eax
c001a2e7:	52                   	push   edx
c001a2e8:	e8 e3 60 fe ff       	call   c00003d0 <memmove>
c001a2ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a2f0:	29 f0                	sub    eax,esi
c001a2f2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a2f5:	83 c4 1c             	add    esp,0x1c
c001a2f8:	89 f0                	mov    eax,esi
c001a2fa:	5b                   	pop    ebx
c001a2fb:	5e                   	pop    esi
c001a2fc:	5f                   	pop    edi
c001a2fd:	5d                   	pop    ebp
c001a2fe:	c3                   	ret    
c001a2ff:	90                   	nop

c001a300 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001a300:	55                   	push   ebp
c001a301:	57                   	push   edi
c001a302:	56                   	push   esi
c001a303:	53                   	push   ebx
c001a304:	83 ec 0c             	sub    esp,0xc
c001a307:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a30b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a30f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001a313:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a317:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001a31d:	39 03                	cmp    DWORD PTR [ebx],eax
c001a31f:	74 13                	je     c001a334 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001a321:	83 ec 0c             	sub    esp,0xc
c001a324:	68 34 21 02 c0       	push   0xc0022134
c001a329:	e8 0f 68 ff ff       	call   c0010b3d <KePanic(char const*)>
c001a32e:	83 c4 10             	add    esp,0x10
c001a331:	8d 76 00             	lea    esi,[esi+0x0]
c001a334:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001a33a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a33d:	74 11                	je     c001a350 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001a33f:	83 ec 0c             	sub    esp,0xc
c001a342:	68 6f 21 02 c0       	push   0xc002216f
c001a347:	e8 f1 67 ff ff       	call   c0010b3d <KePanic(char const*)>
c001a34c:	83 c4 10             	add    esp,0x10
c001a34f:	90                   	nop
c001a350:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001a356:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a359:	74 11                	je     c001a36c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001a35b:	83 ec 0c             	sub    esp,0xc
c001a35e:	68 6f 21 02 c0       	push   0xc002216f
c001a363:	e8 d5 67 ff ff       	call   c0010b3d <KePanic(char const*)>
c001a368:	83 c4 10             	add    esp,0x10
c001a36b:	90                   	nop
c001a36c:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001a36f:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001a373:	85 ff                	test   edi,edi
c001a375:	7e 21                	jle    c001a398 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001a377:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a37e:	31 c0                	xor    eax,eax
c001a380:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a383:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001a386:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a389:	01 d5                	add    ebp,edx
c001a38b:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001a38e:	83 c0 04             	add    eax,0x4
c001a391:	39 c1                	cmp    ecx,eax
c001a393:	75 eb                	jne    c001a380 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001a395:	8d 76 00             	lea    esi,[esi+0x0]
c001a398:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a39b:	83 ec 04             	sub    esp,0x4
c001a39e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a3a1:	29 f8                	sub    eax,edi
c001a3a3:	c1 e0 02             	shl    eax,0x2
c001a3a6:	50                   	push   eax
c001a3a7:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a3aa:	50                   	push   eax
c001a3ab:	52                   	push   edx
c001a3ac:	e8 1f 60 fe ff       	call   c00003d0 <memmove>
c001a3b1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a3b4:	29 f8                	sub    eax,edi
c001a3b6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a3b9:	83 c4 1c             	add    esp,0x1c
c001a3bc:	89 f8                	mov    eax,edi
c001a3be:	5b                   	pop    ebx
c001a3bf:	5e                   	pop    esi
c001a3c0:	5f                   	pop    edi
c001a3c1:	5d                   	pop    ebp
c001a3c2:	c3                   	ret    
c001a3c3:	90                   	nop

c001a3c4 <PCI::open(int, int, void*)>:
c001a3c4:	83 ec 18             	sub    esp,0x18
c001a3c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a3cf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a3d5:	8b 10                	mov    edx,DWORD PTR [eax]
c001a3d7:	50                   	push   eax
c001a3d8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a3db:	31 c0                	xor    eax,eax
c001a3dd:	83 c4 1c             	add    esp,0x1c
c001a3e0:	c3                   	ret    
c001a3e1:	90                   	nop

c001a3e2 <PCI::close(int, int, void*)>:
c001a3e2:	31 c0                	xor    eax,eax
c001a3e4:	c3                   	ret    
c001a3e5:	90                   	nop

c001a3e6 <PCI::PCI()>:
c001a3e6:	83 ec 0c             	sub    esp,0xc
c001a3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ed:	83 ec 08             	sub    esp,0x8
c001a3f0:	68 8b 21 02 c0       	push   0xc002218b
c001a3f5:	50                   	push   eax
c001a3f6:	e8 d5 15 ff ff       	call   c000b9d0 <Bus::Bus(char const*)>
c001a3fb:	83 c4 10             	add    esp,0x10
c001a3fe:	ba 34 22 02 c0       	mov    edx,0xc0022234
c001a403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a407:	89 10                	mov    DWORD PTR [eax],edx
c001a409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a40d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a41b:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a424:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a42a:	0f b6 d0             	movzx  edx,al
c001a42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a431:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a43c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a442:	0f b6 d0             	movzx  edx,al
c001a445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a449:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a452:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a458:	8d 50 01             	lea    edx,[eax+0x1]
c001a45b:	88 d1                	mov    cl,dl
c001a45d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a461:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a467:	0f b6 d0             	movzx  edx,al
c001a46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a46e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a472:	83 c9 c0             	or     ecx,0xffffffc0
c001a475:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a479:	90                   	nop
c001a47a:	83 c4 0c             	add    esp,0xc
c001a47d:	c3                   	ret    

c001a47e <PCI::readBAR8(unsigned int, int)>:
c001a47e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a482:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a486:	f6 c2 01             	test   dl,0x1
c001a489:	74 07                	je     c001a492 <PCI::readBAR8(unsigned int, int)+0x14>
c001a48b:	83 e2 fc             	and    edx,0xfffffffc
c001a48e:	01 c2                	add    edx,eax
c001a490:	ec                   	in     al,dx
c001a491:	c3                   	ret    
c001a492:	83 e2 f0             	and    edx,0xfffffff0
c001a495:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a498:	c3                   	ret    
c001a499:	90                   	nop

c001a49a <PCI::readBAR16(unsigned int, int)>:
c001a49a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a49e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4a2:	f6 c2 01             	test   dl,0x1
c001a4a5:	74 08                	je     c001a4af <PCI::readBAR16(unsigned int, int)+0x15>
c001a4a7:	83 e2 fc             	and    edx,0xfffffffc
c001a4aa:	01 c2                	add    edx,eax
c001a4ac:	66 ed                	in     ax,dx
c001a4ae:	c3                   	ret    
c001a4af:	83 e2 f0             	and    edx,0xfffffff0
c001a4b2:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a4b6:	c3                   	ret    
c001a4b7:	90                   	nop

c001a4b8 <PCI::readBAR32(unsigned int, int)>:
c001a4b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4c0:	f6 c2 01             	test   dl,0x1
c001a4c3:	74 07                	je     c001a4cc <PCI::readBAR32(unsigned int, int)+0x14>
c001a4c5:	83 e2 fc             	and    edx,0xfffffffc
c001a4c8:	01 c2                	add    edx,eax
c001a4ca:	ed                   	in     eax,dx
c001a4cb:	c3                   	ret    
c001a4cc:	83 e2 f0             	and    edx,0xfffffff0
c001a4cf:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a4d2:	c3                   	ret    
c001a4d3:	90                   	nop

c001a4d4 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a4d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4e0:	f6 c2 01             	test   dl,0x1
c001a4e3:	74 07                	je     c001a4ec <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a4e5:	83 e2 fc             	and    edx,0xfffffffc
c001a4e8:	01 ca                	add    edx,ecx
c001a4ea:	ee                   	out    dx,al
c001a4eb:	c3                   	ret    
c001a4ec:	83 e2 f0             	and    edx,0xfffffff0
c001a4ef:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a4f2:	c3                   	ret    
c001a4f3:	90                   	nop

c001a4f4 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a4f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a500:	f6 c2 01             	test   dl,0x1
c001a503:	74 08                	je     c001a50d <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a505:	83 e2 fc             	and    edx,0xfffffffc
c001a508:	01 ca                	add    edx,ecx
c001a50a:	66 ef                	out    dx,ax
c001a50c:	c3                   	ret    
c001a50d:	83 e2 f0             	and    edx,0xfffffff0
c001a510:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a514:	c3                   	ret    
c001a515:	90                   	nop

c001a516 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a516:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a51a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a51e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a522:	f6 c2 01             	test   dl,0x1
c001a525:	74 07                	je     c001a52e <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a527:	83 e2 fc             	and    edx,0xfffffffc
c001a52a:	01 ca                	add    edx,ecx
c001a52c:	ef                   	out    dx,eax
c001a52d:	c3                   	ret    
c001a52e:	83 e2 f0             	and    edx,0xfffffff0
c001a531:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a534:	c3                   	ret    
c001a535:	90                   	nop

c001a536 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a536:	55                   	push   ebp
c001a537:	57                   	push   edi
c001a538:	56                   	push   esi
c001a539:	53                   	push   ebx
c001a53a:	83 ec 0c             	sub    esp,0xc
c001a53d:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a542:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a546:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a54a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a54e:	83 fe 07             	cmp    esi,0x7
c001a551:	76 10                	jbe    c001a563 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a553:	83 ec 0c             	sub    esp,0xc
c001a556:	68 93 21 02 c0       	push   0xc0022193
c001a55b:	e8 dd 65 ff ff       	call   c0010b3d <KePanic(char const*)>
c001a560:	83 c4 10             	add    esp,0x10
c001a563:	0f b6 db             	movzx  ebx,bl
c001a566:	83 fb 0f             	cmp    ebx,0xf
c001a569:	76 10                	jbe    c001a57b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a56b:	83 ec 0c             	sub    esp,0xc
c001a56e:	68 c3 21 02 c0       	push   0xc00221c3
c001a573:	e8 c5 65 ff ff       	call   c0010b3d <KePanic(char const*)>
c001a578:	83 c4 10             	add    esp,0x10
c001a57b:	8d 04 36             	lea    eax,[esi+esi*1]
c001a57e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a583:	83 c8 f0             	or     eax,0xfffffff0
c001a586:	ee                   	out    dx,al
c001a587:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a58c:	89 e8                	mov    eax,ebp
c001a58e:	ee                   	out    dx,al
c001a58f:	89 f9                	mov    ecx,edi
c001a591:	89 d8                	mov    eax,ebx
c001a593:	0f b6 d9             	movzx  ebx,cl
c001a596:	83 c4 0c             	add    esp,0xc
c001a599:	c1 e0 08             	shl    eax,0x8
c001a59c:	83 e3 fc             	and    ebx,0xfffffffc
c001a59f:	09 d8                	or     eax,ebx
c001a5a1:	5b                   	pop    ebx
c001a5a2:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a5a7:	5e                   	pop    esi
c001a5a8:	5f                   	pop    edi
c001a5a9:	5d                   	pop    ebp
c001a5aa:	c3                   	ret    
c001a5ab:	90                   	nop

c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a5ac:	57                   	push   edi
c001a5ad:	56                   	push   esi
c001a5ae:	53                   	push   ebx
c001a5af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a5bb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a5bf:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a5c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5c9:	83 ff 01             	cmp    edi,0x1
c001a5cc:	75 3f                	jne    c001a60d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a5ce:	89 de                	mov    esi,ebx
c001a5d0:	0f b6 c0             	movzx  eax,al
c001a5d3:	c1 e0 10             	shl    eax,0x10
c001a5d6:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a5dc:	0f b6 c9             	movzx  ecx,cl
c001a5df:	09 f0                	or     eax,esi
c001a5e1:	c1 e1 08             	shl    ecx,0x8
c001a5e4:	0f b6 d2             	movzx  edx,dl
c001a5e7:	c1 e2 0b             	shl    edx,0xb
c001a5ea:	09 c8                	or     eax,ecx
c001a5ec:	09 d0                	or     eax,edx
c001a5ee:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a5f3:	0d 00 00 00 80       	or     eax,0x80000000
c001a5f8:	ef                   	out    dx,eax
c001a5f9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a5fe:	ed                   	in     eax,dx
c001a5ff:	83 e3 02             	and    ebx,0x2
c001a602:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a609:	d3 e8                	shr    eax,cl
c001a60b:	eb 44                	jmp    c001a651 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a60d:	83 ff 02             	cmp    edi,0x2
c001a610:	75 2d                	jne    c001a63f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a612:	83 ec 0c             	sub    esp,0xc
c001a615:	0f b6 fb             	movzx  edi,bl
c001a618:	57                   	push   edi
c001a619:	0f b6 c9             	movzx  ecx,cl
c001a61c:	51                   	push   ecx
c001a61d:	0f b6 d2             	movzx  edx,dl
c001a620:	52                   	push   edx
c001a621:	0f b6 c0             	movzx  eax,al
c001a624:	50                   	push   eax
c001a625:	56                   	push   esi
c001a626:	e8 0b ff ff ff       	call   c001a536 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a62b:	89 c2                	mov    edx,eax
c001a62d:	ed                   	in     eax,dx
c001a62e:	83 e3 02             	and    ebx,0x2
c001a631:	83 c4 20             	add    esp,0x20
c001a634:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a63b:	d3 e8                	shr    eax,cl
c001a63d:	eb 12                	jmp    c001a651 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a63f:	83 ec 0c             	sub    esp,0xc
c001a642:	68 f3 21 02 c0       	push   0xc00221f3
c001a647:	e8 f1 64 ff ff       	call   c0010b3d <KePanic(char const*)>
c001a64c:	83 c4 10             	add    esp,0x10
c001a64f:	31 c0                	xor    eax,eax
c001a651:	5b                   	pop    ebx
c001a652:	5e                   	pop    esi
c001a653:	5f                   	pop    edi
c001a654:	c3                   	ret    
c001a655:	90                   	nop

c001a656 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a656:	83 ec 18             	sub    esp,0x18
c001a659:	6a 00                	push   0x0
c001a65b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a660:	50                   	push   eax
c001a661:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a666:	50                   	push   eax
c001a667:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a66c:	50                   	push   eax
c001a66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a671:	e8 36 ff ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a676:	83 c4 2c             	add    esp,0x2c
c001a679:	c3                   	ret    

c001a67a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a67a:	83 ec 18             	sub    esp,0x18
c001a67d:	6a 0e                	push   0xe
c001a67f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a684:	50                   	push   eax
c001a685:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a68a:	50                   	push   eax
c001a68b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a690:	50                   	push   eax
c001a691:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a695:	e8 12 ff ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a69a:	83 c4 2c             	add    esp,0x2c
c001a69d:	0f b6 c0             	movzx  eax,al
c001a6a0:	c3                   	ret    
c001a6a1:	90                   	nop

c001a6a2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a6a2:	55                   	push   ebp
c001a6a3:	57                   	push   edi
c001a6a4:	56                   	push   esi
c001a6a5:	53                   	push   ebx
c001a6a6:	83 ec 18             	sub    esp,0x18
c001a6a9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a6ae:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a6b3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a6b8:	6a 0a                	push   0xa
c001a6ba:	56                   	push   esi
c001a6bb:	55                   	push   ebp
c001a6bc:	57                   	push   edi
c001a6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a6c1:	e8 e6 fe ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a6c6:	83 c4 14             	add    esp,0x14
c001a6c9:	6a 0a                	push   0xa
c001a6cb:	56                   	push   esi
c001a6cc:	55                   	push   ebp
c001a6cd:	57                   	push   edi
c001a6ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a6d2:	89 c3                	mov    ebx,eax
c001a6d4:	0f b6 db             	movzx  ebx,bl
c001a6d7:	e8 d0 fe ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a6dc:	83 c4 2c             	add    esp,0x2c
c001a6df:	25 00 ff 00 00       	and    eax,0xff00
c001a6e4:	09 d8                	or     eax,ebx
c001a6e6:	5b                   	pop    ebx
c001a6e7:	5e                   	pop    esi
c001a6e8:	5f                   	pop    edi
c001a6e9:	5d                   	pop    ebp
c001a6ea:	c3                   	ret    
c001a6eb:	90                   	nop

c001a6ec <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a6ec:	83 ec 18             	sub    esp,0x18
c001a6ef:	6a 08                	push   0x8
c001a6f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6f6:	50                   	push   eax
c001a6f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6fc:	50                   	push   eax
c001a6fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a702:	50                   	push   eax
c001a703:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a707:	e8 a0 fe ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a70c:	83 c4 2c             	add    esp,0x2c
c001a70f:	0f b6 c4             	movzx  eax,ah
c001a712:	c3                   	ret    
c001a713:	90                   	nop

c001a714 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a714:	83 ec 18             	sub    esp,0x18
c001a717:	6a 08                	push   0x8
c001a719:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a71e:	50                   	push   eax
c001a71f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a724:	50                   	push   eax
c001a725:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a72a:	50                   	push   eax
c001a72b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a72f:	e8 78 fe ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a734:	83 c4 2c             	add    esp,0x2c
c001a737:	c3                   	ret    

c001a738 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a738:	83 ec 18             	sub    esp,0x18
c001a73b:	6a 3c                	push   0x3c
c001a73d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a742:	50                   	push   eax
c001a743:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a748:	50                   	push   eax
c001a749:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a74e:	50                   	push   eax
c001a74f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a753:	e8 54 fe ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a758:	83 c4 2c             	add    esp,0x2c
c001a75b:	c3                   	ret    

c001a75c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a75c:	83 ec 18             	sub    esp,0x18
c001a75f:	6a 18                	push   0x18
c001a761:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a766:	50                   	push   eax
c001a767:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a76c:	50                   	push   eax
c001a76d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a772:	50                   	push   eax
c001a773:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a777:	e8 30 fe ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a77c:	83 c4 2c             	add    esp,0x2c
c001a77f:	0f b6 c4             	movzx  eax,ah
c001a782:	c3                   	ret    
c001a783:	90                   	nop

c001a784 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a784:	55                   	push   ebp
c001a785:	57                   	push   edi
c001a786:	56                   	push   esi
c001a787:	53                   	push   ebx
c001a788:	83 ec 28             	sub    esp,0x28
c001a78b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a78f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a794:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a799:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a79e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a7a5:	8d 43 12             	lea    eax,[ebx+0x12]
c001a7a8:	83 c3 10             	add    ebx,0x10
c001a7ab:	0f b6 c0             	movzx  eax,al
c001a7ae:	0f b6 db             	movzx  ebx,bl
c001a7b1:	50                   	push   eax
c001a7b2:	51                   	push   ecx
c001a7b3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a7b7:	57                   	push   edi
c001a7b8:	55                   	push   ebp
c001a7b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a7bd:	e8 ea fd ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7c2:	83 c4 14             	add    esp,0x14
c001a7c5:	53                   	push   ebx
c001a7c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a7ca:	51                   	push   ecx
c001a7cb:	89 c6                	mov    esi,eax
c001a7cd:	57                   	push   edi
c001a7ce:	55                   	push   ebp
c001a7cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a7d3:	c1 e6 10             	shl    esi,0x10
c001a7d6:	e8 d1 fd ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7db:	83 c4 3c             	add    esp,0x3c
c001a7de:	5b                   	pop    ebx
c001a7df:	0f b7 c0             	movzx  eax,ax
c001a7e2:	09 f0                	or     eax,esi
c001a7e4:	5e                   	pop    esi
c001a7e5:	5f                   	pop    edi
c001a7e6:	5d                   	pop    ebp
c001a7e7:	c3                   	ret    

c001a7e8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a7e8:	55                   	push   ebp
c001a7e9:	57                   	push   edi
c001a7ea:	56                   	push   esi
c001a7eb:	53                   	push   ebx
c001a7ec:	83 ec 0c             	sub    esp,0xc
c001a7ef:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a7f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a7f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a7fb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a7ff:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001a805:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a809:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a80d:	83 f9 01             	cmp    ecx,0x1
c001a810:	75 5d                	jne    c001a86f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001a812:	0f b6 c8             	movzx  ecx,al
c001a815:	89 f0                	mov    eax,esi
c001a817:	25 fc 00 00 00       	and    eax,0xfc
c001a81c:	0f b6 d2             	movzx  edx,dl
c001a81f:	c1 e1 10             	shl    ecx,0x10
c001a822:	c1 e2 0b             	shl    edx,0xb
c001a825:	09 c1                	or     ecx,eax
c001a827:	89 f8                	mov    eax,edi
c001a829:	0f b6 f8             	movzx  edi,al
c001a82c:	c1 e7 08             	shl    edi,0x8
c001a82f:	09 f9                	or     ecx,edi
c001a831:	09 d1                	or     ecx,edx
c001a833:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a838:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a83e:	89 c8                	mov    eax,ecx
c001a840:	ef                   	out    dx,eax
c001a841:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a846:	ed                   	in     eax,dx
c001a847:	83 e6 02             	and    esi,0x2
c001a84a:	0f b7 db             	movzx  ebx,bx
c001a84d:	74 0a                	je     c001a859 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001a84f:	c1 e3 10             	shl    ebx,0x10
c001a852:	0f b7 d0             	movzx  edx,ax
c001a855:	09 d3                	or     ebx,edx
c001a857:	eb 05                	jmp    c001a85e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001a859:	66 31 c0             	xor    ax,ax
c001a85c:	09 c3                	or     ebx,eax
c001a85e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a863:	89 c8                	mov    eax,ecx
c001a865:	ef                   	out    dx,eax
c001a866:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a86b:	89 d8                	mov    eax,ebx
c001a86d:	eb 41                	jmp    c001a8b0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a86f:	83 f9 02             	cmp    ecx,0x2
c001a872:	75 45                	jne    c001a8b9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001a874:	89 f1                	mov    ecx,esi
c001a876:	83 ec 0c             	sub    esp,0xc
c001a879:	0f b6 f1             	movzx  esi,cl
c001a87c:	89 f9                	mov    ecx,edi
c001a87e:	56                   	push   esi
c001a87f:	0f b6 f9             	movzx  edi,cl
c001a882:	57                   	push   edi
c001a883:	0f b6 d2             	movzx  edx,dl
c001a886:	52                   	push   edx
c001a887:	0f b6 c0             	movzx  eax,al
c001a88a:	50                   	push   eax
c001a88b:	55                   	push   ebp
c001a88c:	e8 a5 fc ff ff       	call   c001a536 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a891:	89 c2                	mov    edx,eax
c001a893:	ed                   	in     eax,dx
c001a894:	83 c4 20             	add    esp,0x20
c001a897:	f6 c2 02             	test   dl,0x2
c001a89a:	0f b7 db             	movzx  ebx,bx
c001a89d:	74 0c                	je     c001a8ab <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001a89f:	0f b7 c8             	movzx  ecx,ax
c001a8a2:	89 d8                	mov    eax,ebx
c001a8a4:	c1 e0 10             	shl    eax,0x10
c001a8a7:	09 c8                	or     eax,ecx
c001a8a9:	eb 05                	jmp    c001a8b0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a8ab:	66 31 c0             	xor    ax,ax
c001a8ae:	09 d8                	or     eax,ebx
c001a8b0:	ef                   	out    dx,eax
c001a8b1:	83 c4 0c             	add    esp,0xc
c001a8b4:	5b                   	pop    ebx
c001a8b5:	5e                   	pop    esi
c001a8b6:	5f                   	pop    edi
c001a8b7:	5d                   	pop    ebp
c001a8b8:	c3                   	ret    
c001a8b9:	c7 44 24 20 f3 21 02 c0 	mov    DWORD PTR [esp+0x20],0xc00221f3
c001a8c1:	83 c4 0c             	add    esp,0xc
c001a8c4:	5b                   	pop    ebx
c001a8c5:	5e                   	pop    esi
c001a8c6:	5f                   	pop    edi
c001a8c7:	5d                   	pop    ebp
c001a8c8:	e9 70 62 ff ff       	jmp    c0010b3d <KePanic(char const*)>
c001a8cd:	90                   	nop

c001a8ce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a8ce:	55                   	push   ebp
c001a8cf:	57                   	push   edi
c001a8d0:	56                   	push   esi
c001a8d1:	53                   	push   ebx
c001a8d2:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a8d8:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a8df:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001a8e6:	0f 85 bd 00 00 00    	jne    c001a9a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a8ec:	83 ec 0c             	sub    esp,0xc
c001a8ef:	68 14 01 00 00       	push   0x114
c001a8f4:	e8 d2 d1 fe ff       	call   c0007acb <malloc>
c001a8f9:	83 c4 0c             	add    esp,0xc
c001a8fc:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a902:	68 f9 21 02 c0       	push   0xc00221f9
c001a907:	50                   	push   eax
c001a908:	89 c3                	mov    ebx,eax
c001a90a:	e8 ab 08 ff ff       	call   c000b1ba <File::File(char const*, Process*)>
c001a90f:	83 c4 10             	add    esp,0x10
c001a912:	85 db                	test   ebx,ebx
c001a914:	0f 84 6b 02 00 00    	je     c001ab85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a91a:	57                   	push   edi
c001a91b:	57                   	push   edi
c001a91c:	6a 01                	push   0x1
c001a91e:	53                   	push   ebx
c001a91f:	e8 52 09 ff ff       	call   c000b276 <File::open(FileOpenMode)>
c001a924:	83 c4 10             	add    esp,0x10
c001a927:	85 c0                	test   eax,eax
c001a929:	0f 85 56 02 00 00    	jne    c001ab85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a92f:	52                   	push   edx
c001a930:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a934:	50                   	push   eax
c001a935:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a939:	50                   	push   eax
c001a93a:	53                   	push   ebx
c001a93b:	e8 e2 0b ff ff       	call   c000b522 <File::stat(unsigned long long*, bool*)>
c001a940:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a944:	40                   	inc    eax
c001a945:	89 04 24             	mov    DWORD PTR [esp],eax
c001a948:	e8 7e d1 fe ff       	call   c0007acb <malloc>
c001a94d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a951:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a955:	59                   	pop    ecx
c001a956:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a95b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a95d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a961:	51                   	push   ecx
c001a962:	50                   	push   eax
c001a963:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a967:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a96b:	53                   	push   ebx
c001a96c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a96f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a973:	83 c4 20             	add    esp,0x20
c001a976:	89 c8                	mov    eax,ecx
c001a978:	99                   	cdq    
c001a979:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a97d:	0f 85 02 02 00 00    	jne    c001ab85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a983:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a987:	0f 85 f8 01 00 00    	jne    c001ab85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a98d:	83 ec 0c             	sub    esp,0xc
c001a990:	53                   	push   ebx
c001a991:	e8 3e 09 ff ff       	call   c000b2d4 <File::close()>
c001a996:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a99a:	83 c4 10             	add    esp,0x10
c001a99d:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a9a4:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a9a9:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a9b1:	31 c9                	xor    ecx,ecx
c001a9b3:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001a9ba:	8b 2d 44 8b 02 c0    	mov    ebp,DWORD PTR ds:0xc0028b44
c001a9c0:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a9c7:	8b 15 48 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b48
c001a9cd:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a9d2:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a9da:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a9df:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a9e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a9eb:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a9f3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a9f7:	39 cd                	cmp    ebp,ecx
c001a9f9:	0f 8e 86 01 00 00    	jle    c001ab85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a9ff:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001aa02:	d4 40                	aam    0x40
c001aa04:	d5 39                	aad    0x39
c001aa06:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001aa0a:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001aa0e:	d4 40                	aam    0x40
c001aa10:	d5 39                	aad    0x39
c001aa12:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001aa16:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001aa1a:	d4 40                	aam    0x40
c001aa1c:	d5 39                	aad    0x39
c001aa1e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001aa22:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001aa26:	d4 40                	aam    0x40
c001aa28:	d5 39                	aad    0x39
c001aa2a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001aa2e:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001aa32:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001aa36:	3c 56                	cmp    al,0x56
c001aa38:	74 47                	je     c001aa81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001aa3a:	d4 40                	aam    0x40
c001aa3c:	d5 39                	aad    0x39
c001aa3e:	8d 58 d0             	lea    ebx,[eax-0x30]
c001aa41:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001aa45:	0f b6 db             	movzx  ebx,bl
c001aa48:	c1 e3 04             	shl    ebx,0x4
c001aa4b:	d4 40                	aam    0x40
c001aa4d:	d5 39                	aad    0x39
c001aa4f:	83 e8 30             	sub    eax,0x30
c001aa52:	0f b6 c0             	movzx  eax,al
c001aa55:	09 c3                	or     ebx,eax
c001aa57:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001aa5b:	c1 e3 04             	shl    ebx,0x4
c001aa5e:	d4 40                	aam    0x40
c001aa60:	d5 39                	aad    0x39
c001aa62:	83 e8 30             	sub    eax,0x30
c001aa65:	0f b6 c0             	movzx  eax,al
c001aa68:	09 c3                	or     ebx,eax
c001aa6a:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001aa6e:	c1 e3 04             	shl    ebx,0x4
c001aa71:	d4 40                	aam    0x40
c001aa73:	d5 39                	aad    0x39
c001aa75:	83 e8 30             	sub    eax,0x30
c001aa78:	0f b6 c0             	movzx  eax,al
c001aa7b:	09 c3                	or     ebx,eax
c001aa7d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001aa81:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001aa85:	80 fb 58             	cmp    bl,0x58
c001aa88:	74 49                	je     c001aad3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001aa8a:	88 d8                	mov    al,bl
c001aa8c:	d4 40                	aam    0x40
c001aa8e:	d5 39                	aad    0x39
c001aa90:	83 e8 30             	sub    eax,0x30
c001aa93:	0f b6 f8             	movzx  edi,al
c001aa96:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001aa9a:	c1 e7 04             	shl    edi,0x4
c001aa9d:	d4 40                	aam    0x40
c001aa9f:	d5 39                	aad    0x39
c001aaa1:	83 e8 30             	sub    eax,0x30
c001aaa4:	0f b6 c0             	movzx  eax,al
c001aaa7:	09 c7                	or     edi,eax
c001aaa9:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001aaad:	c1 e7 04             	shl    edi,0x4
c001aab0:	d4 40                	aam    0x40
c001aab2:	d5 39                	aad    0x39
c001aab4:	83 e8 30             	sub    eax,0x30
c001aab7:	0f b6 c0             	movzx  eax,al
c001aaba:	09 c7                	or     edi,eax
c001aabc:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001aac0:	c1 e7 04             	shl    edi,0x4
c001aac3:	d4 40                	aam    0x40
c001aac5:	d5 39                	aad    0x39
c001aac7:	83 e8 30             	sub    eax,0x30
c001aaca:	0f b6 c0             	movzx  eax,al
c001aacd:	09 c7                	or     edi,eax
c001aacf:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001aad3:	8d 41 10             	lea    eax,[ecx+0x10]
c001aad6:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001aada:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001aade:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aae2:	83 f9 0a             	cmp    ecx,0xa
c001aae5:	74 07                	je     c001aaee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001aae7:	47                   	inc    edi
c001aae8:	39 c5                	cmp    ebp,eax
c001aaea:	75 16                	jne    c001ab02 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001aaec:	89 e8                	mov    eax,ebp
c001aaee:	83 f9 0a             	cmp    ecx,0xa
c001aaf1:	0f 94 c1             	sete   cl
c001aaf4:	0f b6 c9             	movzx  ecx,cl
c001aaf7:	01 c1                	add    ecx,eax
c001aaf9:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001aafe:	75 0f                	jne    c001ab0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001ab00:	eb 1c                	jmp    c001ab1e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001ab02:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001ab05:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001ab09:	40                   	inc    eax
c001ab0a:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001ab0d:	eb cb                	jmp    c001aada <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001ab0f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab13:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001ab18:	0f 85 d9 fe ff ff    	jne    c001a9f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ab1e:	80 fb 58             	cmp    bl,0x58
c001ab21:	74 10                	je     c001ab33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001ab23:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001ab28:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001ab2d:	0f 85 c4 fe ff ff    	jne    c001a9f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ab33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab37:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ab3b:	83 e8 30             	sub    eax,0x30
c001ab3e:	c1 e0 04             	shl    eax,0x4
c001ab41:	83 eb 30             	sub    ebx,0x30
c001ab44:	09 d8                	or     eax,ebx
c001ab46:	0f b6 c0             	movzx  eax,al
c001ab49:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001ab4d:	0f 85 a4 fe ff ff    	jne    c001a9f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ab53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab57:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ab5b:	83 e8 30             	sub    eax,0x30
c001ab5e:	c1 e0 04             	shl    eax,0x4
c001ab61:	83 eb 30             	sub    ebx,0x30
c001ab64:	09 d8                	or     eax,ebx
c001ab66:	0f b6 c0             	movzx  eax,al
c001ab69:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001ab6d:	0f 85 84 fe ff ff    	jne    c001a9f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ab73:	50                   	push   eax
c001ab74:	50                   	push   eax
c001ab75:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ab79:	50                   	push   eax
c001ab7a:	56                   	push   esi
c001ab7b:	e8 d0 5a fe ff       	call   c0000650 <strcpy>
c001ab80:	83 c4 10             	add    esp,0x10
c001ab83:	eb 05                	jmp    c001ab8a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001ab85:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ab88:	31 f6                	xor    esi,esi
c001ab8a:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ab90:	89 f0                	mov    eax,esi
c001ab92:	5b                   	pop    ebx
c001ab93:	5e                   	pop    esi
c001ab94:	5f                   	pop    edi
c001ab95:	5d                   	pop    ebp
c001ab96:	c3                   	ret    
c001ab97:	90                   	nop

c001ab98 <PCI::checkBus(unsigned char)>:
c001ab98:	56                   	push   esi
c001ab99:	53                   	push   ebx
c001ab9a:	31 db                	xor    ebx,ebx
c001ab9c:	51                   	push   ecx
c001ab9d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001aba2:	52                   	push   edx
c001aba3:	53                   	push   ebx
c001aba4:	43                   	inc    ebx
c001aba5:	56                   	push   esi
c001aba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abaa:	e8 0f 03 00 00       	call   c001aebe <PCI::checkDevice(unsigned char, unsigned char)>
c001abaf:	83 c4 10             	add    esp,0x10
c001abb2:	83 fb 20             	cmp    ebx,0x20
c001abb5:	75 eb                	jne    c001aba2 <PCI::checkBus(unsigned char)+0xa>
c001abb7:	58                   	pop    eax
c001abb8:	5b                   	pop    ebx
c001abb9:	5e                   	pop    esi
c001abba:	c3                   	ret    
c001abbb:	90                   	nop

c001abbc <PCI::foundDevice(PCIDeviceInfo)>:
c001abbc:	55                   	push   ebp
c001abbd:	57                   	push   edi
c001abbe:	56                   	push   esi
c001abbf:	53                   	push   ebx
c001abc0:	83 ec 1c             	sub    esp,0x1c
c001abc3:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001abc8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001abcc:	3d ff ff 00 00       	cmp    eax,0xffff
c001abd1:	0f 84 63 01 00 00    	je     c001ad3a <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001abd7:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001abdc:	66 3d 06 04          	cmp    ax,0x406
c001abe0:	75 2c                	jne    c001ac0e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001abe2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001abe7:	50                   	push   eax
c001abe8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001abed:	50                   	push   eax
c001abee:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001abf3:	50                   	push   eax
c001abf4:	53                   	push   ebx
c001abf5:	e8 62 fb ff ff       	call   c001a75c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001abfa:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001abfe:	0f b6 c0             	movzx  eax,al
c001ac01:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ac05:	83 c4 2c             	add    esp,0x2c
c001ac08:	5b                   	pop    ebx
c001ac09:	5e                   	pop    esi
c001ac0a:	5f                   	pop    edi
c001ac0b:	5d                   	pop    ebp
c001ac0c:	eb 8a                	jmp    c001ab98 <PCI::checkBus(unsigned char)>
c001ac0e:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001ac13:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ac19:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ac1d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ac21:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ac25:	85 d2                	test   edx,edx
c001ac27:	74 34                	je     c001ac5d <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001ac29:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ac2c:	85 c9                	test   ecx,ecx
c001ac2e:	74 29                	je     c001ac59 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ac30:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001ac36:	31 f5                	xor    ebp,esi
c001ac38:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001ac3e:	75 19                	jne    c001ac59 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ac40:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001ac46:	75 11                	jne    c001ac59 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ac48:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ac4f:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001ac53:	0f 84 e1 00 00 00    	je     c001ad3a <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ac59:	8b 12                	mov    edx,DWORD PTR [edx]
c001ac5b:	eb c8                	jmp    c001ac25 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ac5d:	3d 01 06 00 00       	cmp    eax,0x601
c001ac62:	75 19                	jne    c001ac7d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001ac64:	83 ec 0c             	sub    esp,0xc
c001ac67:	68 64 01 00 00       	push   0x164
c001ac6c:	e8 5a ce fe ff       	call   c0007acb <malloc>
c001ac71:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac74:	89 c5                	mov    ebp,eax
c001ac76:	e8 ab 0e 00 00       	call   c001bb26 <SATABus::SATABus()>
c001ac7b:	eb 1e                	jmp    c001ac9b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001ac7d:	3d 01 01 00 00       	cmp    eax,0x101
c001ac82:	75 62                	jne    c001ace6 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001ac84:	83 ec 0c             	sub    esp,0xc
c001ac87:	68 70 02 00 00       	push   0x270
c001ac8c:	e8 3a ce fe ff       	call   c0007acb <malloc>
c001ac91:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac94:	89 c5                	mov    ebp,eax
c001ac96:	e8 f3 02 00 00       	call   c001af8e <IDE::IDE()>
c001ac9b:	58                   	pop    eax
c001ac9c:	5a                   	pop    edx
c001ac9d:	55                   	push   ebp
c001ac9e:	53                   	push   ebx
c001ac9f:	e8 d0 13 ff ff       	call   c000c074 <Device::addChild(Device*)>
c001aca4:	83 ec 1c             	sub    esp,0x1c
c001aca7:	b9 09 00 00 00       	mov    ecx,0x9
c001acac:	fc                   	cld    
c001acad:	8d 74 24 60          	lea    esi,[esp+0x60]
c001acb1:	89 e7                	mov    edi,esp
c001acb3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001acb5:	55                   	push   ebp
c001acb6:	e8 ff 12 ff ff       	call   c000bfba <Device::preOpenPCI(PCIDeviceInfo)>
c001acbb:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001acbe:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001acc2:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001acca:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001acd2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001acda:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001acdd:	83 c4 4c             	add    esp,0x4c
c001ace0:	5b                   	pop    ebx
c001ace1:	5e                   	pop    esi
c001ace2:	5f                   	pop    edi
c001ace3:	5d                   	pop    ebp
c001ace4:	ff e0                	jmp    eax
c001ace6:	83 ec 0c             	sub    esp,0xc
c001ace9:	68 58 01 00 00       	push   0x158
c001acee:	e8 d8 cd fe ff       	call   c0007acb <malloc>
c001acf3:	5a                   	pop    edx
c001acf4:	59                   	pop    ecx
c001acf5:	68 12 22 02 c0       	push   0xc0022212
c001acfa:	50                   	push   eax
c001acfb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001acff:	e8 0e 16 ff ff       	call   c000c312 <DriverlessDevice::DriverlessDevice(char const*)>
c001ad04:	5e                   	pop    esi
c001ad05:	5f                   	pop    edi
c001ad06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad0a:	50                   	push   eax
c001ad0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ad0f:	53                   	push   ebx
c001ad10:	e8 5f 13 ff ff       	call   c000c074 <Device::addChild(Device*)>
c001ad15:	83 c4 10             	add    esp,0x10
c001ad18:	b9 09 00 00 00       	mov    ecx,0x9
c001ad1d:	fc                   	cld    
c001ad1e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ad22:	89 fe                	mov    esi,edi
c001ad24:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ad26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ad2e:	83 c4 1c             	add    esp,0x1c
c001ad31:	5b                   	pop    ebx
c001ad32:	5e                   	pop    esi
c001ad33:	5f                   	pop    edi
c001ad34:	5d                   	pop    ebp
c001ad35:	e9 80 12 ff ff       	jmp    c000bfba <Device::preOpenPCI(PCIDeviceInfo)>
c001ad3a:	83 c4 1c             	add    esp,0x1c
c001ad3d:	5b                   	pop    ebx
c001ad3e:	5e                   	pop    esi
c001ad3f:	5f                   	pop    edi
c001ad40:	5d                   	pop    ebp
c001ad41:	c3                   	ret    

c001ad42 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ad42:	55                   	push   ebp
c001ad43:	57                   	push   edi
c001ad44:	56                   	push   esi
c001ad45:	53                   	push   ebx
c001ad46:	83 ec 68             	sub    esp,0x68
c001ad49:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ad50:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ad54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad58:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad5f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ad64:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ad68:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad6f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001ad74:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ad78:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001ad7d:	6a 0c                	push   0xc
c001ad7f:	57                   	push   edi
c001ad80:	53                   	push   ebx
c001ad81:	56                   	push   esi
c001ad82:	55                   	push   ebp
c001ad83:	e8 24 f8 ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ad88:	83 c4 20             	add    esp,0x20
c001ad8b:	57                   	push   edi
c001ad8c:	53                   	push   ebx
c001ad8d:	56                   	push   esi
c001ad8e:	55                   	push   ebp
c001ad8f:	e8 0e f9 ff ff       	call   c001a6a2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ad94:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001ad99:	57                   	push   edi
c001ad9a:	53                   	push   ebx
c001ad9b:	56                   	push   esi
c001ad9c:	55                   	push   ebp
c001ad9d:	e8 96 f9 ff ff       	call   c001a738 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ada2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ada6:	83 c4 14             	add    esp,0x14
c001ada9:	6a 3c                	push   0x3c
c001adab:	57                   	push   edi
c001adac:	53                   	push   ebx
c001adad:	56                   	push   esi
c001adae:	55                   	push   ebp
c001adaf:	e8 f8 f7 ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adb4:	0f b6 c4             	movzx  eax,ah
c001adb7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001adbb:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001adbf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001adc3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001adc8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001adce:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001add4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001add8:	83 c4 20             	add    esp,0x20
c001addb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001ade0:	74 30                	je     c001ae12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ade2:	31 c0                	xor    eax,eax
c001ade4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ade8:	7e 28                	jle    c001ae12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001adea:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001adf2:	39 cb                	cmp    ebx,ecx
c001adf4:	75 19                	jne    c001ae0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001adf6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001adfe:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001ae02:	75 0b                	jne    c001ae0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ae04:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001ae0b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001ae0f:	40                   	inc    eax
c001ae10:	eb d2                	jmp    c001ade4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001ae12:	31 d2                	xor    edx,edx
c001ae14:	83 ec 0c             	sub    esp,0xc
c001ae17:	57                   	push   edi
c001ae18:	53                   	push   ebx
c001ae19:	56                   	push   esi
c001ae1a:	52                   	push   edx
c001ae1b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ae1f:	55                   	push   ebp
c001ae20:	e8 5f f9 ff ff       	call   c001a784 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae25:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae29:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ae2d:	42                   	inc    edx
c001ae2e:	83 c4 20             	add    esp,0x20
c001ae31:	83 fa 06             	cmp    edx,0x6
c001ae34:	75 de                	jne    c001ae14 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001ae36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae3a:	83 ec 0c             	sub    esp,0xc
c001ae3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae41:	c1 e2 08             	shl    edx,0x8
c001ae44:	0f b6 c4             	movzx  eax,ah
c001ae47:	09 d0                	or     eax,edx
c001ae49:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ae4e:	6a 02                	push   0x2
c001ae50:	57                   	push   edi
c001ae51:	53                   	push   ebx
c001ae52:	56                   	push   esi
c001ae53:	55                   	push   ebp
c001ae54:	e8 53 f7 ff ff       	call   c001a5ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae59:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ae5e:	83 c4 20             	add    esp,0x20
c001ae61:	57                   	push   edi
c001ae62:	53                   	push   ebx
c001ae63:	56                   	push   esi
c001ae64:	55                   	push   ebp
c001ae65:	e8 82 f8 ff ff       	call   c001a6ec <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ae6a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ae6e:	57                   	push   edi
c001ae6f:	53                   	push   ebx
c001ae70:	56                   	push   esi
c001ae71:	55                   	push   ebp
c001ae72:	e8 df f7 ff ff       	call   c001a656 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ae77:	b9 09 00 00 00       	mov    ecx,0x9
c001ae7c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ae81:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ae85:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ae89:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ae8d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ae91:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ae95:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ae99:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ae9d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001aea1:	83 ec 0c             	sub    esp,0xc
c001aea4:	fc                   	cld    
c001aea5:	8d 74 24 58          	lea    esi,[esp+0x58]
c001aea9:	89 e7                	mov    edi,esp
c001aeab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aead:	55                   	push   ebp
c001aeae:	e8 09 fd ff ff       	call   c001abbc <PCI::foundDevice(PCIDeviceInfo)>
c001aeb3:	81 c4 8c 00 00 00    	add    esp,0x8c
c001aeb9:	5b                   	pop    ebx
c001aeba:	5e                   	pop    esi
c001aebb:	5f                   	pop    edi
c001aebc:	5d                   	pop    ebp
c001aebd:	c3                   	ret    

c001aebe <PCI::checkDevice(unsigned char, unsigned char)>:
c001aebe:	55                   	push   ebp
c001aebf:	57                   	push   edi
c001aec0:	56                   	push   esi
c001aec1:	53                   	push   ebx
c001aec2:	83 ec 0c             	sub    esp,0xc
c001aec5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001aeca:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001aecf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001aed3:	6a 00                	push   0x0
c001aed5:	56                   	push   esi
c001aed6:	57                   	push   edi
c001aed7:	55                   	push   ebp
c001aed8:	e8 79 f7 ff ff       	call   c001a656 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aedd:	6a 00                	push   0x0
c001aedf:	56                   	push   esi
c001aee0:	57                   	push   edi
c001aee1:	55                   	push   ebp
c001aee2:	e8 5b fe ff ff       	call   c001ad42 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001aee7:	83 c4 20             	add    esp,0x20
c001aeea:	6a 00                	push   0x0
c001aeec:	56                   	push   esi
c001aeed:	57                   	push   edi
c001aeee:	55                   	push   ebp
c001aeef:	e8 86 f7 ff ff       	call   c001a67a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001aef4:	83 c4 10             	add    esp,0x10
c001aef7:	a8 80                	test   al,0x80
c001aef9:	74 2d                	je     c001af28 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001aefb:	bb 01 00 00 00       	mov    ebx,0x1
c001af00:	53                   	push   ebx
c001af01:	56                   	push   esi
c001af02:	57                   	push   edi
c001af03:	55                   	push   ebp
c001af04:	e8 4d f7 ff ff       	call   c001a656 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001af09:	83 c4 10             	add    esp,0x10
c001af0c:	0f b7 c0             	movzx  eax,ax
c001af0f:	3d ff ff 00 00       	cmp    eax,0xffff
c001af14:	74 0c                	je     c001af22 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001af16:	53                   	push   ebx
c001af17:	56                   	push   esi
c001af18:	57                   	push   edi
c001af19:	55                   	push   ebp
c001af1a:	e8 23 fe ff ff       	call   c001ad42 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001af1f:	83 c4 10             	add    esp,0x10
c001af22:	43                   	inc    ebx
c001af23:	83 fb 08             	cmp    ebx,0x8
c001af26:	75 d8                	jne    c001af00 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001af28:	83 c4 0c             	add    esp,0xc
c001af2b:	5b                   	pop    ebx
c001af2c:	5e                   	pop    esi
c001af2d:	5f                   	pop    edi
c001af2e:	5d                   	pop    ebp
c001af2f:	c3                   	ret    

c001af30 <PCI::detect()>:
c001af30:	56                   	push   esi
c001af31:	53                   	push   ebx
c001af32:	53                   	push   ebx
c001af33:	31 db                	xor    ebx,ebx
c001af35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af39:	6a 00                	push   0x0
c001af3b:	6a 00                	push   0x0
c001af3d:	6a 00                	push   0x0
c001af3f:	56                   	push   esi
c001af40:	e8 35 f7 ff ff       	call   c001a67a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001af45:	83 c4 10             	add    esp,0x10
c001af48:	a8 80                	test   al,0x80
c001af4a:	75 21                	jne    c001af6d <PCI::detect()+0x3d>
c001af4c:	51                   	push   ecx
c001af4d:	51                   	push   ecx
c001af4e:	6a 00                	push   0x0
c001af50:	56                   	push   esi
c001af51:	e8 42 fc ff ff       	call   c001ab98 <PCI::checkBus(unsigned char)>
c001af56:	83 c4 10             	add    esp,0x10
c001af59:	eb 2a                	jmp    c001af85 <PCI::detect()+0x55>
c001af5b:	52                   	push   edx
c001af5c:	52                   	push   edx
c001af5d:	53                   	push   ebx
c001af5e:	43                   	inc    ebx
c001af5f:	56                   	push   esi
c001af60:	e8 33 fc ff ff       	call   c001ab98 <PCI::checkBus(unsigned char)>
c001af65:	83 c4 10             	add    esp,0x10
c001af68:	83 fb 08             	cmp    ebx,0x8
c001af6b:	74 18                	je     c001af85 <PCI::detect()+0x55>
c001af6d:	53                   	push   ebx
c001af6e:	6a 00                	push   0x0
c001af70:	6a 00                	push   0x0
c001af72:	56                   	push   esi
c001af73:	e8 de f6 ff ff       	call   c001a656 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001af78:	83 c4 10             	add    esp,0x10
c001af7b:	0f b7 c0             	movzx  eax,ax
c001af7e:	3d ff ff 00 00       	cmp    eax,0xffff
c001af83:	74 d6                	je     c001af5b <PCI::detect()+0x2b>
c001af85:	58                   	pop    eax
c001af86:	5b                   	pop    ebx
c001af87:	5e                   	pop    esi
c001af88:	c3                   	ret    
c001af89:	90                   	nop

c001af8a <IDE::close(int, int, void*)>:
c001af8a:	83 c8 ff             	or     eax,0xffffffff
c001af8d:	c3                   	ret    

c001af8e <IDE::IDE()>:
c001af8e:	83 ec 0c             	sub    esp,0xc
c001af91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af95:	83 ec 08             	sub    esp,0x8
c001af98:	68 58 22 02 c0       	push   0xc0022258
c001af9d:	50                   	push   eax
c001af9e:	e8 15 14 ff ff       	call   c000c3b8 <HardDiskController::HardDiskController(char const*)>
c001afa3:	83 c4 10             	add    esp,0x10
c001afa6:	ba e8 22 02 c0       	mov    edx,0xc00222e8
c001afab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afaf:	89 10                	mov    DWORD PTR [eax],edx
c001afb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001afbc:	90                   	nop
c001afbd:	83 c4 0c             	add    esp,0xc
c001afc0:	c3                   	ret    
c001afc1:	90                   	nop

c001afc2 <IDE::prepareInterrupt(unsigned char)>:
c001afc2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001afc7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001afcb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001afd3:	c3                   	ret    

c001afd4 <selectDrive(unsigned char, unsigned char)>:
c001afd4:	c3                   	ret    
c001afd5:	90                   	nop

c001afd6 <IDE::getBase(unsigned char)>:
c001afd6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001afdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afdf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001afe7:	c3                   	ret    

c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001afe8:	55                   	push   ebp
c001afe9:	57                   	push   edi
c001afea:	56                   	push   esi
c001afeb:	53                   	push   ebx
c001afec:	83 ec 1c             	sub    esp,0x1c
c001afef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001aff3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aff7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001affb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001afff:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b002:	80 f9 03             	cmp    cl,0x3
c001b005:	77 4f                	ja     c001b056 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b00b:	0f b6 f2             	movzx  esi,dl
c001b00e:	0f b6 db             	movzx  ebx,bl
c001b011:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b014:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b019:	80 ca 80             	or     dl,0x80
c001b01c:	52                   	push   edx
c001b01d:	6a 0c                	push   0xc
c001b01f:	56                   	push   esi
c001b020:	57                   	push   edi
c001b021:	e8 c2 ff ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b026:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b02b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b02f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b033:	ee                   	out    dx,al
c001b034:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b039:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b03d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b041:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b049:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b04d:	83 c4 2c             	add    esp,0x2c
c001b050:	5b                   	pop    ebx
c001b051:	5e                   	pop    esi
c001b052:	5f                   	pop    edi
c001b053:	5d                   	pop    ebp
c001b054:	eb 92                	jmp    c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b056:	0f b6 cb             	movzx  ecx,bl
c001b059:	83 f9 07             	cmp    ecx,0x7
c001b05c:	77 12                	ja     c001b070 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b05e:	0f b6 d2             	movzx  edx,dl
c001b061:	0f b6 db             	movzx  ebx,bl
c001b064:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b06c:	01 da                	add    edx,ebx
c001b06e:	eb 2f                	jmp    c001b09f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b070:	83 f9 0d             	cmp    ecx,0xd
c001b073:	77 13                	ja     c001b088 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b075:	0f b6 d2             	movzx  edx,dl
c001b078:	0f b6 db             	movzx  ebx,bl
c001b07b:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b082:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b086:	eb 17                	jmp    c001b09f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b088:	83 f9 15             	cmp    ecx,0x15
c001b08b:	77 13                	ja     c001b0a0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b08d:	0f b6 d2             	movzx  edx,dl
c001b090:	0f b6 db             	movzx  ebx,bl
c001b093:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b09b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b09f:	ee                   	out    dx,al
c001b0a0:	83 c4 1c             	add    esp,0x1c
c001b0a3:	5b                   	pop    ebx
c001b0a4:	5e                   	pop    esi
c001b0a5:	5f                   	pop    edi
c001b0a6:	5d                   	pop    ebp
c001b0a7:	c3                   	ret    

c001b0a8 <IDE::read(unsigned char, unsigned char)>:
c001b0a8:	57                   	push   edi
c001b0a9:	56                   	push   esi
c001b0aa:	53                   	push   ebx
c001b0ab:	83 ec 10             	sub    esp,0x10
c001b0ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b0b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0b6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b0ba:	8d 42 f8             	lea    eax,[edx-0x8]
c001b0bd:	3c 03                	cmp    al,0x3
c001b0bf:	77 48                	ja     c001b109 <IDE::read(unsigned char, unsigned char)+0x61>
c001b0c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b0c5:	0f b6 f1             	movzx  esi,cl
c001b0c8:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b0cb:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b0d0:	0c 80                	or     al,0x80
c001b0d2:	50                   	push   eax
c001b0d3:	6a 0c                	push   0xc
c001b0d5:	56                   	push   esi
c001b0d6:	53                   	push   ebx
c001b0d7:	e8 0c ff ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b0e0:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b0e5:	0f b6 d2             	movzx  edx,dl
c001b0e8:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b0ec:	ec                   	in     al,dx
c001b0ed:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b0f1:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b0f6:	52                   	push   edx
c001b0f7:	6a 0c                	push   0xc
c001b0f9:	56                   	push   esi
c001b0fa:	53                   	push   ebx
c001b0fb:	e8 e8 fe ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b100:	83 c4 20             	add    esp,0x20
c001b103:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b107:	eb 4c                	jmp    c001b155 <IDE::read(unsigned char, unsigned char)+0xad>
c001b109:	0f b6 f2             	movzx  esi,dl
c001b10c:	83 fe 07             	cmp    esi,0x7
c001b10f:	77 12                	ja     c001b123 <IDE::read(unsigned char, unsigned char)+0x7b>
c001b111:	0f b6 c9             	movzx  ecx,cl
c001b114:	0f b6 d2             	movzx  edx,dl
c001b117:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001b11f:	01 c2                	add    edx,eax
c001b121:	eb 31                	jmp    c001b154 <IDE::read(unsigned char, unsigned char)+0xac>
c001b123:	83 fe 0d             	cmp    esi,0xd
c001b126:	77 13                	ja     c001b13b <IDE::read(unsigned char, unsigned char)+0x93>
c001b128:	0f b6 c9             	movzx  ecx,cl
c001b12b:	0f b6 d2             	movzx  edx,dl
c001b12e:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001b135:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b139:	eb 19                	jmp    c001b154 <IDE::read(unsigned char, unsigned char)+0xac>
c001b13b:	31 c0                	xor    eax,eax
c001b13d:	83 fe 15             	cmp    esi,0x15
c001b140:	77 13                	ja     c001b155 <IDE::read(unsigned char, unsigned char)+0xad>
c001b142:	0f b6 c9             	movzx  ecx,cl
c001b145:	0f b6 d2             	movzx  edx,dl
c001b148:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001b150:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b154:	ec                   	in     al,dx
c001b155:	83 c4 10             	add    esp,0x10
c001b158:	5b                   	pop    ebx
c001b159:	5e                   	pop    esi
c001b15a:	5f                   	pop    edi
c001b15b:	c3                   	ret    

c001b15c <IDE::waitInterrupt(unsigned char)>:
c001b15c:	55                   	push   ebp
c001b15d:	57                   	push   edi
c001b15e:	56                   	push   esi
c001b15f:	53                   	push   ebx
c001b160:	31 db                	xor    ebx,ebx
c001b162:	83 ec 0c             	sub    esp,0xc
c001b165:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b169:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b16e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b176:	89 e8                	mov    eax,ebp
c001b178:	84 c0                	test   al,al
c001b17a:	75 30                	jne    c001b1ac <IDE::waitInterrupt(unsigned char)+0x50>
c001b17c:	50                   	push   eax
c001b17d:	6a 0c                	push   0xc
c001b17f:	56                   	push   esi
c001b180:	57                   	push   edi
c001b181:	e8 22 ff ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b186:	83 c4 10             	add    esp,0x10
c001b189:	a8 01                	test   al,0x1
c001b18b:	75 27                	jne    c001b1b4 <IDE::waitInterrupt(unsigned char)+0x58>
c001b18d:	f6 c3 04             	test   bl,0x4
c001b190:	75 12                	jne    c001b1a4 <IDE::waitInterrupt(unsigned char)+0x48>
c001b192:	83 fb 32             	cmp    ebx,0x32
c001b195:	7e 0d                	jle    c001b1a4 <IDE::waitInterrupt(unsigned char)+0x48>
c001b197:	83 ec 0c             	sub    esp,0xc
c001b19a:	6a 64                	push   0x64
c001b19c:	e8 e7 a4 ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001b1a1:	83 c4 10             	add    esp,0x10
c001b1a4:	83 fb 3c             	cmp    ebx,0x3c
c001b1a7:	74 0b                	je     c001b1b4 <IDE::waitInterrupt(unsigned char)+0x58>
c001b1a9:	43                   	inc    ebx
c001b1aa:	eb c2                	jmp    c001b16e <IDE::waitInterrupt(unsigned char)+0x12>
c001b1ac:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b1b4:	83 c4 0c             	add    esp,0xc
c001b1b7:	89 e8                	mov    eax,ebp
c001b1b9:	5b                   	pop    ebx
c001b1ba:	5e                   	pop    esi
c001b1bb:	5f                   	pop    edi
c001b1bc:	5d                   	pop    ebp
c001b1bd:	c3                   	ret    

c001b1be <ideChannel0IRQHandler(regs*, void*)>:
c001b1be:	83 ec 10             	sub    esp,0x10
c001b1c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1c5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b1cc:	6a 07                	push   0x7
c001b1ce:	6a 00                	push   0x0
c001b1d0:	50                   	push   eax
c001b1d1:	e8 d2 fe ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b1d6:	83 c4 1c             	add    esp,0x1c
c001b1d9:	c3                   	ret    

c001b1da <ideChannel1IRQHandler(regs*, void*)>:
c001b1da:	83 ec 10             	sub    esp,0x10
c001b1dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1e1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b1e8:	6a 07                	push   0x7
c001b1ea:	6a 01                	push   0x1
c001b1ec:	50                   	push   eax
c001b1ed:	e8 b6 fe ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b1f2:	83 c4 1c             	add    esp,0x1c
c001b1f5:	c3                   	ret    

c001b1f6 <IDE::enableIRQs(unsigned char, bool)>:
c001b1f6:	57                   	push   edi
c001b1f7:	b8 02 00 00 00       	mov    eax,0x2
c001b1fc:	56                   	push   esi
c001b1fd:	53                   	push   ebx
c001b1fe:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b203:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b207:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b20b:	74 02                	je     c001b20f <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b20d:	31 c0                	xor    eax,eax
c001b20f:	0f b6 db             	movzx  ebx,bl
c001b212:	bf 04 00 00 00       	mov    edi,0x4
c001b217:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b21e:	50                   	push   eax
c001b21f:	6a 0c                	push   0xc
c001b221:	53                   	push   ebx
c001b222:	56                   	push   esi
c001b223:	e8 c0 fd ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b228:	83 c4 10             	add    esp,0x10
c001b22b:	50                   	push   eax
c001b22c:	6a 0c                	push   0xc
c001b22e:	53                   	push   ebx
c001b22f:	56                   	push   esi
c001b230:	e8 73 fe ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b235:	83 c4 10             	add    esp,0x10
c001b238:	4f                   	dec    edi
c001b239:	75 f0                	jne    c001b22b <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b23b:	5b                   	pop    ebx
c001b23c:	5e                   	pop    esi
c001b23d:	5f                   	pop    edi
c001b23e:	c3                   	ret    
c001b23f:	90                   	nop

c001b240 <IDE::open(int, int, void*)>:
c001b240:	55                   	push   ebp
c001b241:	57                   	push   edi
c001b242:	56                   	push   esi
c001b243:	53                   	push   ebx
c001b244:	83 ec 1c             	sub    esp,0x1c
c001b247:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b24b:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b252:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b25b:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b264:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b26b:	0f 85 da 02 00 00    	jne    c001b54b <IDE::open(int, int, void*)+0x30b>
c001b271:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b277:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001b27b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b27f:	83 e0 7f             	and    eax,0x7f
c001b282:	83 f8 05             	cmp    eax,0x5
c001b285:	74 05                	je     c001b28c <IDE::open(int, int, void*)+0x4c>
c001b287:	83 f8 0f             	cmp    eax,0xf
c001b28a:	75 32                	jne    c001b2be <IDE::open(int, int, void*)+0x7e>
c001b28c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b292:	83 e0 fc             	and    eax,0xfffffffc
c001b295:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b29c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b2a2:	83 e0 fc             	and    eax,0xfffffffc
c001b2a5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b2ac:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b2b2:	83 e0 fc             	and    eax,0xfffffffc
c001b2b5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b2bc:	eb 14                	jmp    c001b2d2 <IDE::open(int, int, void*)+0x92>
c001b2be:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b2c8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b2d2:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001b2d9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b2de:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b2e5:	89 fa                	mov    edx,edi
c001b2e7:	89 f1                	mov    ecx,esi
c001b2e9:	c1 e1 10             	shl    ecx,0x10
c001b2ec:	89 e8                	mov    eax,ebp
c001b2ee:	c1 e0 0b             	shl    eax,0xb
c001b2f1:	09 c1                	or     ecx,eax
c001b2f3:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b2fa:	c1 e0 08             	shl    eax,0x8
c001b2fd:	09 c1                	or     ecx,eax
c001b2ff:	89 c8                	mov    eax,ecx
c001b301:	0d 08 00 00 80       	or     eax,0x80000008
c001b306:	ef                   	out    dx,eax
c001b307:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b30c:	ed                   	in     eax,dx
c001b30d:	c1 e8 10             	shr    eax,0x10
c001b310:	3d ff ff 00 00       	cmp    eax,0xffff
c001b315:	0f 84 f9 00 00 00    	je     c001b414 <IDE::open(int, int, void*)+0x1d4>
c001b31b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b321:	89 fa                	mov    edx,edi
c001b323:	89 c8                	mov    eax,ecx
c001b325:	ef                   	out    dx,eax
c001b326:	b0 fe                	mov    al,0xfe
c001b328:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b32d:	ee                   	out    dx,al
c001b32e:	89 c8                	mov    eax,ecx
c001b330:	89 fa                	mov    edx,edi
c001b332:	ef                   	out    dx,eax
c001b333:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b338:	ed                   	in     eax,dx
c001b339:	3c fe                	cmp    al,0xfe
c001b33b:	0f 85 a4 00 00 00    	jne    c001b3e5 <IDE::open(int, int, void*)+0x1a5>
c001b341:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001b347:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b34e:	74 30                	je     c001b380 <IDE::open(int, int, void*)+0x140>
c001b350:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b356:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b35a:	83 ec 0c             	sub    esp,0xc
c001b35d:	40                   	inc    eax
c001b35e:	0f b6 c0             	movzx  eax,al
c001b361:	50                   	push   eax
c001b362:	55                   	push   ebp
c001b363:	56                   	push   esi
c001b364:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001b36a:	51                   	push   ecx
c001b36b:	e8 a0 3c ff ff       	call   c000f010 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b370:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b375:	83 c4 1c             	add    esp,0x1c
c001b378:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b37e:	eb 0a                	jmp    c001b38a <IDE::open(int, int, void*)+0x14a>
c001b380:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b38a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b391:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001b396:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b39d:	89 ea                	mov    edx,ebp
c001b39f:	c1 e1 10             	shl    ecx,0x10
c001b3a2:	c1 e0 08             	shl    eax,0x8
c001b3a5:	09 c1                	or     ecx,eax
c001b3a7:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b3ae:	c1 e0 0b             	shl    eax,0xb
c001b3b1:	09 c1                	or     ecx,eax
c001b3b3:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b3b9:	89 c8                	mov    eax,ecx
c001b3bb:	ef                   	out    dx,eax
c001b3bc:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001b3c2:	be fc 0c 00 00       	mov    esi,0xcfc
c001b3c7:	89 f2                	mov    edx,esi
c001b3c9:	89 f8                	mov    eax,edi
c001b3cb:	ee                   	out    dx,al
c001b3cc:	89 c8                	mov    eax,ecx
c001b3ce:	89 ea                	mov    edx,ebp
c001b3d0:	ef                   	out    dx,eax
c001b3d1:	89 f2                	mov    edx,esi
c001b3d3:	ed                   	in     eax,dx
c001b3d4:	0f b6 c0             	movzx  eax,al
c001b3d7:	39 f8                	cmp    eax,edi
c001b3d9:	74 49                	je     c001b424 <IDE::open(int, int, void*)+0x1e4>
c001b3db:	83 ec 0c             	sub    esp,0xc
c001b3de:	68 70 22 02 c0       	push   0xc0022270
c001b3e3:	eb 37                	jmp    c001b41c <IDE::open(int, int, void*)+0x1dc>
c001b3e5:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b3ee:	75 1a                	jne    c001b40a <IDE::open(int, int, void*)+0x1ca>
c001b3f0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b3f5:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b3fa:	74 05                	je     c001b401 <IDE::open(int, int, void*)+0x1c1>
c001b3fc:	83 c0 80             	add    eax,0xffffff80
c001b3ff:	75 09                	jne    c001b40a <IDE::open(int, int, void*)+0x1ca>
c001b401:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b408:	eb 1a                	jmp    c001b424 <IDE::open(int, int, void*)+0x1e4>
c001b40a:	83 ec 0c             	sub    esp,0xc
c001b40d:	68 78 22 02 c0       	push   0xc0022278
c001b412:	eb 08                	jmp    c001b41c <IDE::open(int, int, void*)+0x1dc>
c001b414:	83 ec 0c             	sub    esp,0xc
c001b417:	68 a9 22 02 c0       	push   0xc00222a9
c001b41c:	e8 1c 57 ff ff       	call   c0010b3d <KePanic(char const*)>
c001b421:	83 c4 10             	add    esp,0x10
c001b424:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b42b:	74 1a                	je     c001b447 <IDE::open(int, int, void*)+0x207>
c001b42d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b433:	83 e0 fc             	and    eax,0xfffffffc
c001b436:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b43d:	83 c0 08             	add    eax,0x8
c001b440:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b447:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b44d:	89 c2                	mov    edx,eax
c001b44f:	83 e2 0f             	and    edx,0xf
c001b452:	83 fa 08             	cmp    edx,0x8
c001b455:	75 0a                	jne    c001b461 <IDE::open(int, int, void*)+0x221>
c001b457:	83 e8 02             	sub    eax,0x2
c001b45a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b461:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b467:	89 c2                	mov    edx,eax
c001b469:	83 e2 0f             	and    edx,0xf
c001b46c:	83 fa 08             	cmp    edx,0x8
c001b46f:	75 0a                	jne    c001b47b <IDE::open(int, int, void*)+0x23b>
c001b471:	83 e8 02             	sub    eax,0x2
c001b474:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b47b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b482:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b489:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b48c:	89 d0                	mov    eax,edx
c001b48e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b492:	8d 7a 01             	lea    edi,[edx+0x1]
c001b495:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b499:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b49d:	83 e1 3f             	and    ecx,0x3f
c001b4a0:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b4a4:	89 f9                	mov    ecx,edi
c001b4a6:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b4ad:	8d 78 02             	lea    edi,[eax+0x2]
c001b4b0:	0f b6 c9             	movzx  ecx,cl
c001b4b3:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b4b6:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b4ba:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b4be:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b4c2:	83 e2 3f             	and    edx,0x3f
c001b4c5:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b4c9:	89 f9                	mov    ecx,edi
c001b4cb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b4d1:	8d 78 03             	lea    edi,[eax+0x3]
c001b4d4:	0f b6 d1             	movzx  edx,cl
c001b4d7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b4da:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b4de:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b4e2:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b4e6:	83 e1 3f             	and    ecx,0x3f
c001b4e9:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b4ed:	89 f9                	mov    ecx,edi
c001b4ef:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b4f5:	8d 78 04             	lea    edi,[eax+0x4]
c001b4f8:	0f b6 c9             	movzx  ecx,cl
c001b4fb:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b4fe:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b502:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b506:	89 fa                	mov    edx,edi
c001b508:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b50e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b512:	83 e2 3f             	and    edx,0x3f
c001b515:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b519:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b520:	66 85 f6             	test   si,si
c001b523:	74 65                	je     c001b58a <IDE::open(int, int, void*)+0x34a>
c001b525:	89 f9                	mov    ecx,edi
c001b527:	83 c0 05             	add    eax,0x5
c001b52a:	0f b6 d1             	movzx  edx,cl
c001b52d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b530:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b534:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b538:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b53e:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b542:	83 e0 3f             	and    eax,0x3f
c001b545:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b549:	eb 3f                	jmp    c001b58a <IDE::open(int, int, void*)+0x34a>
c001b54b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b552:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b558:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b55f:	05 06 02 00 00       	add    eax,0x206
c001b564:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b56b:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b572:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b579:	05 06 02 00 00       	add    eax,0x206
c001b57e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b585:	e9 bd fe ff ff       	jmp    c001b447 <IDE::open(int, int, void*)+0x207>
c001b58a:	50                   	push   eax
c001b58b:	50                   	push   eax
c001b58c:	6a 00                	push   0x0
c001b58e:	53                   	push   ebx
c001b58f:	e8 2e fa ff ff       	call   c001afc2 <IDE::prepareInterrupt(unsigned char)>
c001b594:	5a                   	pop    edx
c001b595:	59                   	pop    ecx
c001b596:	6a 01                	push   0x1
c001b598:	53                   	push   ebx
c001b599:	e8 24 fa ff ff       	call   c001afc2 <IDE::prepareInterrupt(unsigned char)>
c001b59e:	83 c4 0c             	add    esp,0xc
c001b5a1:	6a 00                	push   0x0
c001b5a3:	6a 00                	push   0x0
c001b5a5:	53                   	push   ebx
c001b5a6:	e8 4b fc ff ff       	call   c001b1f6 <IDE::enableIRQs(unsigned char, bool)>
c001b5ab:	83 c4 0c             	add    esp,0xc
c001b5ae:	6a 00                	push   0x0
c001b5b0:	6a 01                	push   0x1
c001b5b2:	53                   	push   ebx
c001b5b3:	e8 3e fc ff ff       	call   c001b1f6 <IDE::enableIRQs(unsigned char, bool)>
c001b5b8:	83 c4 10             	add    esp,0x10
c001b5bb:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b5c2:	74 34                	je     c001b5f8 <IDE::open(int, int, void*)+0x3b8>
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	53                   	push   ebx
c001b5c8:	6a 01                	push   0x1
c001b5ca:	68 be b1 01 c0       	push   0xc001b1be
c001b5cf:	6a 0e                	push   0xe
c001b5d1:	53                   	push   ebx
c001b5d2:	e8 49 0a ff ff       	call   c000c020 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b5d7:	83 c4 14             	add    esp,0x14
c001b5da:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b5e0:	53                   	push   ebx
c001b5e1:	6a 01                	push   0x1
c001b5e3:	68 da b1 01 c0       	push   0xc001b1da
c001b5e8:	6a 0f                	push   0xf
c001b5ea:	53                   	push   ebx
c001b5eb:	e8 30 0a ff ff       	call   c000c020 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b5f0:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b5f6:	eb 38                	jmp    c001b630 <IDE::open(int, int, void*)+0x3f0>
c001b5f8:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b602:	83 ec 0c             	sub    esp,0xc
c001b605:	53                   	push   ebx
c001b606:	6a 00                	push   0x0
c001b608:	68 be b1 01 c0       	push   0xc001b1be
c001b60d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b613:	53                   	push   ebx
c001b614:	e8 07 0a ff ff       	call   c000c020 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b619:	83 c4 14             	add    esp,0x14
c001b61c:	53                   	push   ebx
c001b61d:	6a 00                	push   0x0
c001b61f:	68 da b1 01 c0       	push   0xc001b1da
c001b624:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b62a:	53                   	push   ebx
c001b62b:	e8 f0 09 ff ff       	call   c000c020 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b630:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b632:	83 c4 20             	add    esp,0x20
c001b635:	83 ec 0c             	sub    esp,0xc
c001b638:	53                   	push   ebx
c001b639:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b63c:	83 c4 0c             	add    esp,0xc
c001b63f:	6a 07                	push   0x7
c001b641:	6a 00                	push   0x0
c001b643:	53                   	push   ebx
c001b644:	e8 5f fa ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b649:	83 c4 0c             	add    esp,0xc
c001b64c:	6a 07                	push   0x7
c001b64e:	6a 01                	push   0x1
c001b650:	53                   	push   ebx
c001b651:	e8 52 fa ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b656:	83 c4 0c             	add    esp,0xc
c001b659:	6a 01                	push   0x1
c001b65b:	6a 00                	push   0x0
c001b65d:	53                   	push   ebx
c001b65e:	e8 93 fb ff ff       	call   c001b1f6 <IDE::enableIRQs(unsigned char, bool)>
c001b663:	83 c4 0c             	add    esp,0xc
c001b666:	6a 01                	push   0x1
c001b668:	6a 01                	push   0x1
c001b66a:	53                   	push   ebx
c001b66b:	e8 86 fb ff ff       	call   c001b1f6 <IDE::enableIRQs(unsigned char, bool)>
c001b670:	83 c4 2c             	add    esp,0x2c
c001b673:	31 c0                	xor    eax,eax
c001b675:	5b                   	pop    ebx
c001b676:	5e                   	pop    esi
c001b677:	5f                   	pop    edi
c001b678:	5d                   	pop    ebp
c001b679:	c3                   	ret    

c001b67a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b67a:	55                   	push   ebp
c001b67b:	57                   	push   edi
c001b67c:	56                   	push   esi
c001b67d:	53                   	push   ebx
c001b67e:	83 ec 1c             	sub    esp,0x1c
c001b681:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b685:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b689:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b68d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b691:	8d 42 f8             	lea    eax,[edx-0x8]
c001b694:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b698:	3c 03                	cmp    al,0x3
c001b69a:	77 5a                	ja     c001b6f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b69c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b6a0:	0f b6 db             	movzx  ebx,bl
c001b6a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b6a7:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b6aa:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b6af:	0c 80                	or     al,0x80
c001b6b1:	50                   	push   eax
c001b6b2:	6a 0c                	push   0xc
c001b6b4:	53                   	push   ebx
c001b6b5:	56                   	push   esi
c001b6b6:	e8 2d f9 ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b6bf:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b6c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b6c8:	0f b6 d2             	movzx  edx,dl
c001b6cb:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b6cf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b6d1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b6d6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b6da:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b6de:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b6e6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b6ea:	83 c4 2c             	add    esp,0x2c
c001b6ed:	5b                   	pop    ebx
c001b6ee:	5e                   	pop    esi
c001b6ef:	5f                   	pop    edi
c001b6f0:	5d                   	pop    ebp
c001b6f1:	e9 f2 f8 ff ff       	jmp    c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6f6:	0f b6 c2             	movzx  eax,dl
c001b6f9:	83 f8 07             	cmp    eax,0x7
c001b6fc:	77 12                	ja     c001b710 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b6fe:	0f b6 db             	movzx  ebx,bl
c001b701:	0f b6 c2             	movzx  eax,dl
c001b704:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b70c:	01 c2                	add    edx,eax
c001b70e:	eb 2f                	jmp    c001b73f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b710:	83 f8 0d             	cmp    eax,0xd
c001b713:	77 13                	ja     c001b728 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b715:	0f b6 db             	movzx  ebx,bl
c001b718:	0f b6 d2             	movzx  edx,dl
c001b71b:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b722:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b726:	eb 17                	jmp    c001b73f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b728:	83 f8 15             	cmp    eax,0x15
c001b72b:	77 14                	ja     c001b741 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b72d:	0f b6 db             	movzx  ebx,bl
c001b730:	0f b6 d2             	movzx  edx,dl
c001b733:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b73b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b73f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b741:	83 c4 1c             	add    esp,0x1c
c001b744:	5b                   	pop    ebx
c001b745:	5e                   	pop    esi
c001b746:	5f                   	pop    edi
c001b747:	5d                   	pop    ebp
c001b748:	c3                   	ret    
c001b749:	90                   	nop

c001b74a <IDE::detect()>:
c001b74a:	55                   	push   ebp
c001b74b:	57                   	push   edi
c001b74c:	56                   	push   esi
c001b74d:	53                   	push   ebx
c001b74e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b754:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b75b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b762:	0f 85 9e 02 00 00    	jne    c001ba06 <IDE::detect()+0x2bc>
c001b768:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b76f:	31 f6                	xor    esi,esi
c001b771:	31 ff                	xor    edi,edi
c001b773:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b77b:	89 f8                	mov    eax,edi
c001b77d:	c1 e0 06             	shl    eax,0x6
c001b780:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b788:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b78c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b794:	c1 e0 04             	shl    eax,0x4
c001b797:	83 c8 a0             	or     eax,0xffffffa0
c001b79a:	0f b6 c0             	movzx  eax,al
c001b79d:	50                   	push   eax
c001b79e:	6a 06                	push   0x6
c001b7a0:	56                   	push   esi
c001b7a1:	53                   	push   ebx
c001b7a2:	e8 41 f8 ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7a7:	83 c4 0c             	add    esp,0xc
c001b7aa:	6a 0c                	push   0xc
c001b7ac:	56                   	push   esi
c001b7ad:	53                   	push   ebx
c001b7ae:	e8 f5 f8 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b7b3:	83 c4 0c             	add    esp,0xc
c001b7b6:	6a 0c                	push   0xc
c001b7b8:	56                   	push   esi
c001b7b9:	53                   	push   ebx
c001b7ba:	e8 e9 f8 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b7bf:	83 c4 0c             	add    esp,0xc
c001b7c2:	6a 0c                	push   0xc
c001b7c4:	56                   	push   esi
c001b7c5:	53                   	push   ebx
c001b7c6:	e8 dd f8 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b7cb:	83 c4 0c             	add    esp,0xc
c001b7ce:	6a 0c                	push   0xc
c001b7d0:	56                   	push   esi
c001b7d1:	53                   	push   ebx
c001b7d2:	e8 d1 f8 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b7d7:	68 ec 00 00 00       	push   0xec
c001b7dc:	6a 07                	push   0x7
c001b7de:	56                   	push   esi
c001b7df:	53                   	push   ebx
c001b7e0:	e8 03 f8 ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7e5:	83 c4 1c             	add    esp,0x1c
c001b7e8:	6a 0c                	push   0xc
c001b7ea:	56                   	push   esi
c001b7eb:	53                   	push   ebx
c001b7ec:	e8 b7 f8 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b7f1:	83 c4 0c             	add    esp,0xc
c001b7f4:	6a 0c                	push   0xc
c001b7f6:	56                   	push   esi
c001b7f7:	53                   	push   ebx
c001b7f8:	e8 ab f8 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b7fd:	83 c4 0c             	add    esp,0xc
c001b800:	6a 0c                	push   0xc
c001b802:	56                   	push   esi
c001b803:	53                   	push   ebx
c001b804:	e8 9f f8 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b809:	83 c4 0c             	add    esp,0xc
c001b80c:	6a 0c                	push   0xc
c001b80e:	56                   	push   esi
c001b80f:	53                   	push   ebx
c001b810:	e8 93 f8 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b815:	83 c4 0c             	add    esp,0xc
c001b818:	6a 0c                	push   0xc
c001b81a:	56                   	push   esi
c001b81b:	53                   	push   ebx
c001b81c:	e8 87 f8 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b821:	83 c4 10             	add    esp,0x10
c001b824:	84 c0                	test   al,al
c001b826:	0f 84 61 01 00 00    	je     c001b98d <IDE::detect()+0x243>
c001b82c:	31 ed                	xor    ebp,ebp
c001b82e:	50                   	push   eax
c001b82f:	6a 0c                	push   0xc
c001b831:	56                   	push   esi
c001b832:	53                   	push   ebx
c001b833:	e8 70 f8 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b838:	83 c4 10             	add    esp,0x10
c001b83b:	a8 01                	test   al,0x1
c001b83d:	0f 85 6b 01 00 00    	jne    c001b9ae <IDE::detect()+0x264>
c001b843:	a8 80                	test   al,0x80
c001b845:	75 04                	jne    c001b84b <IDE::detect()+0x101>
c001b847:	a8 08                	test   al,0x8
c001b849:	75 23                	jne    c001b86e <IDE::detect()+0x124>
c001b84b:	45                   	inc    ebp
c001b84c:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b852:	7e da                	jle    c001b82e <IDE::detect()+0xe4>
c001b854:	83 ec 0c             	sub    esp,0xc
c001b857:	6a 32                	push   0x32
c001b859:	e8 2a 9e ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001b85e:	83 c4 10             	add    esp,0x10
c001b861:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b867:	75 c5                	jne    c001b82e <IDE::detect()+0xe4>
c001b869:	e9 40 01 00 00       	jmp    c001b9ae <IDE::detect()+0x264>
c001b86e:	31 c9                	xor    ecx,ecx
c001b870:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b874:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b878:	83 ec 0c             	sub    esp,0xc
c001b87b:	68 80 00 00 00       	push   0x80
c001b880:	55                   	push   ebp
c001b881:	6a 00                	push   0x0
c001b883:	56                   	push   esi
c001b884:	53                   	push   ebx
c001b885:	e8 f0 fd ff ff       	call   c001b67a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b88a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b88f:	89 f8                	mov    eax,edi
c001b891:	c1 e0 06             	shl    eax,0x6
c001b894:	01 d8                	add    eax,ebx
c001b896:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b89d:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b8a4:	89 d1                	mov    ecx,edx
c001b8a6:	89 f2                	mov    edx,esi
c001b8a8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b8ae:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b8b2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b8b8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b8bc:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b8c3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b8cb:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b8d2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b8da:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b8e0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b8e7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b8ed:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b8f1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b8f5:	83 c4 20             	add    esp,0x20
c001b8f8:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001b8fb:	83 c5 02             	add    ebp,0x2
c001b8fe:	83 c0 02             	add    eax,0x2
c001b901:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b907:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001b90a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b910:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001b914:	75 e2                	jne    c001b8f8 <IDE::detect()+0x1ae>
c001b916:	89 f8                	mov    eax,edi
c001b918:	c1 e0 06             	shl    eax,0x6
c001b91b:	01 d8                	add    eax,ebx
c001b91d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b924:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b92b:	c1 ea 09             	shr    edx,0x9
c001b92e:	83 e2 01             	and    edx,0x1
c001b931:	80 e1 01             	and    cl,0x1
c001b934:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b93a:	75 22                	jne    c001b95e <IDE::detect()+0x214>
c001b93c:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b943:	74 47                	je     c001b98c <IDE::detect()+0x242>
c001b945:	83 ec 0c             	sub    esp,0xc
c001b948:	68 7c 01 00 00       	push   0x17c
c001b94d:	e8 79 c1 fe ff       	call   c0007acb <malloc>
c001b952:	89 04 24             	mov    DWORD PTR [esp],eax
c001b955:	89 c5                	mov    ebp,eax
c001b957:	e8 16 05 00 00       	call   c001be72 <ATA::ATA()>
c001b95c:	eb 17                	jmp    c001b975 <IDE::detect()+0x22b>
c001b95e:	83 ec 0c             	sub    esp,0xc
c001b961:	68 84 01 00 00       	push   0x184
c001b966:	e8 60 c1 fe ff       	call   c0007acb <malloc>
c001b96b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b96e:	89 c5                	mov    ebp,eax
c001b970:	e8 6f 0e 00 00       	call   c001c7e4 <ATAPI::ATAPI()>
c001b975:	5a                   	pop    edx
c001b976:	59                   	pop    ecx
c001b977:	55                   	push   ebp
c001b978:	53                   	push   ebx
c001b979:	e8 f6 06 ff ff       	call   c000c074 <Device::addChild(Device*)>
c001b97e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b981:	53                   	push   ebx
c001b982:	57                   	push   edi
c001b983:	6a 00                	push   0x0
c001b985:	55                   	push   ebp
c001b986:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b989:	83 c4 20             	add    esp,0x20
c001b98c:	47                   	inc    edi
c001b98d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b992:	74 0d                	je     c001b9a1 <IDE::detect()+0x257>
c001b994:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b99c:	e9 da fd ff ff       	jmp    c001b77b <IDE::detect()+0x31>
c001b9a1:	4e                   	dec    esi
c001b9a2:	74 62                	je     c001ba06 <IDE::detect()+0x2bc>
c001b9a4:	be 01 00 00 00       	mov    esi,0x1
c001b9a9:	e9 c5 fd ff ff       	jmp    c001b773 <IDE::detect()+0x29>
c001b9ae:	50                   	push   eax
c001b9af:	6a 04                	push   0x4
c001b9b1:	56                   	push   esi
c001b9b2:	53                   	push   ebx
c001b9b3:	e8 f0 f6 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b9b8:	83 c4 0c             	add    esp,0xc
c001b9bb:	6a 05                	push   0x5
c001b9bd:	56                   	push   esi
c001b9be:	53                   	push   ebx
c001b9bf:	89 c5                	mov    ebp,eax
c001b9c1:	e8 e2 f6 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001b9c6:	89 e9                	mov    ecx,ebp
c001b9c8:	83 c4 10             	add    esp,0x10
c001b9cb:	0f b6 e9             	movzx  ebp,cl
c001b9ce:	83 fd 14             	cmp    ebp,0x14
c001b9d1:	74 2d                	je     c001ba00 <IDE::detect()+0x2b6>
c001b9d3:	83 fd 69             	cmp    ebp,0x69
c001b9d6:	75 b5                	jne    c001b98d <IDE::detect()+0x243>
c001b9d8:	3c 96                	cmp    al,0x96
c001b9da:	75 b1                	jne    c001b98d <IDE::detect()+0x243>
c001b9dc:	68 a1 00 00 00       	push   0xa1
c001b9e1:	6a 07                	push   0x7
c001b9e3:	56                   	push   esi
c001b9e4:	53                   	push   ebx
c001b9e5:	e8 fe f5 ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9ea:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b9f1:	e8 92 9c ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001b9f6:	83 c4 10             	add    esp,0x10
c001b9f9:	b1 01                	mov    cl,0x1
c001b9fb:	e9 70 fe ff ff       	jmp    c001b870 <IDE::detect()+0x126>
c001ba00:	3c eb                	cmp    al,0xeb
c001ba02:	75 cf                	jne    c001b9d3 <IDE::detect()+0x289>
c001ba04:	eb d6                	jmp    c001b9dc <IDE::detect()+0x292>
c001ba06:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ba0c:	5b                   	pop    ebx
c001ba0d:	5e                   	pop    esi
c001ba0e:	5f                   	pop    edi
c001ba0f:	5d                   	pop    ebp
c001ba10:	c3                   	ret    
c001ba11:	90                   	nop

c001ba12 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ba12:	55                   	push   ebp
c001ba13:	57                   	push   edi
c001ba14:	56                   	push   esi
c001ba15:	53                   	push   ebx
c001ba16:	83 ec 1c             	sub    esp,0x1c
c001ba19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ba1d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ba21:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ba25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ba2d:	88 c3                	mov    bl,al
c001ba2f:	25 ff 00 00 00       	and    eax,0xff
c001ba34:	0f 84 88 00 00 00    	je     c001bac2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	89 c7                	mov    edi,eax
c001ba3f:	68 d3 22 02 c0       	push   0xc00222d3
c001ba44:	e8 f3 ee fe ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001ba49:	83 c4 10             	add    esp,0x10
c001ba4c:	83 ff 01             	cmp    edi,0x1
c001ba4f:	74 6b                	je     c001babc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001ba51:	83 ff 02             	cmp    edi,0x2
c001ba54:	75 58                	jne    c001baae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001ba56:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001ba5b:	50                   	push   eax
c001ba5c:	6a 01                	push   0x1
c001ba5e:	01 ff                	add    edi,edi
c001ba60:	09 fe                	or     esi,edi
c001ba62:	89 f0                	mov    eax,esi
c001ba64:	0f b6 f0             	movzx  esi,al
c001ba67:	c1 e6 06             	shl    esi,0x6
c001ba6a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001ba72:	50                   	push   eax
c001ba73:	55                   	push   ebp
c001ba74:	e8 2f f6 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001ba79:	83 c4 10             	add    esp,0x10
c001ba7c:	a8 01                	test   al,0x1
c001ba7e:	74 02                	je     c001ba82 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001ba80:	b3 07                	mov    bl,0x7
c001ba82:	a8 02                	test   al,0x2
c001ba84:	74 02                	je     c001ba88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001ba86:	b3 03                	mov    bl,0x3
c001ba88:	a8 04                	test   al,0x4
c001ba8a:	74 02                	je     c001ba8e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001ba8c:	b3 14                	mov    bl,0x14
c001ba8e:	a8 08                	test   al,0x8
c001ba90:	74 02                	je     c001ba94 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001ba92:	b3 03                	mov    bl,0x3
c001ba94:	a8 10                	test   al,0x10
c001ba96:	74 02                	je     c001ba9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001ba98:	b3 15                	mov    bl,0x15
c001ba9a:	a8 20                	test   al,0x20
c001ba9c:	74 02                	je     c001baa0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001ba9e:	b3 03                	mov    bl,0x3
c001baa0:	a8 40                	test   al,0x40
c001baa2:	74 02                	je     c001baa6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001baa4:	b3 16                	mov    bl,0x16
c001baa6:	a8 80                	test   al,0x80
c001baa8:	74 18                	je     c001bac2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001baaa:	b3 0d                	mov    bl,0xd
c001baac:	eb 14                	jmp    c001bac2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001baae:	83 ff 03             	cmp    edi,0x3
c001bab1:	74 0d                	je     c001bac0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001bab3:	83 ff 04             	cmp    edi,0x4
c001bab6:	75 0a                	jne    c001bac2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bab8:	b3 08                	mov    bl,0x8
c001baba:	eb 06                	jmp    c001bac2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001babc:	b3 13                	mov    bl,0x13
c001babe:	eb 02                	jmp    c001bac2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bac0:	b3 17                	mov    bl,0x17
c001bac2:	83 c4 1c             	add    esp,0x1c
c001bac5:	88 d8                	mov    al,bl
c001bac7:	5b                   	pop    ebx
c001bac8:	5e                   	pop    esi
c001bac9:	5f                   	pop    edi
c001baca:	5d                   	pop    ebp
c001bacb:	c3                   	ret    

c001bacc <IDE::polling(unsigned char, unsigned int)>:
c001bacc:	57                   	push   edi
c001bacd:	56                   	push   esi
c001bace:	53                   	push   ebx
c001bacf:	bb 04 00 00 00       	mov    ebx,0x4
c001bad4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001bad8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001badd:	52                   	push   edx
c001bade:	6a 0c                	push   0xc
c001bae0:	56                   	push   esi
c001bae1:	57                   	push   edi
c001bae2:	e8 c1 f5 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001bae7:	83 c4 10             	add    esp,0x10
c001baea:	4b                   	dec    ebx
c001baeb:	75 f0                	jne    c001badd <IDE::polling(unsigned char, unsigned int)+0x11>
c001baed:	bb a0 86 01 00       	mov    ebx,0x186a0
c001baf2:	50                   	push   eax
c001baf3:	6a 0c                	push   0xc
c001baf5:	56                   	push   esi
c001baf6:	57                   	push   edi
c001baf7:	e8 ac f5 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001bafc:	83 c4 10             	add    esp,0x10
c001baff:	a8 01                	test   al,0x1
c001bb01:	75 17                	jne    c001bb1a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001bb03:	a8 20                	test   al,0x20
c001bb05:	75 0f                	jne    c001bb16 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001bb07:	4b                   	dec    ebx
c001bb08:	74 10                	je     c001bb1a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001bb0a:	a8 80                	test   al,0x80
c001bb0c:	75 e4                	jne    c001baf2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001bb0e:	a8 08                	test   al,0x8
c001bb10:	74 e0                	je     c001baf2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001bb12:	31 c0                	xor    eax,eax
c001bb14:	eb 06                	jmp    c001bb1c <IDE::polling(unsigned char, unsigned int)+0x50>
c001bb16:	b0 01                	mov    al,0x1
c001bb18:	eb 02                	jmp    c001bb1c <IDE::polling(unsigned char, unsigned int)+0x50>
c001bb1a:	b0 02                	mov    al,0x2
c001bb1c:	5b                   	pop    ebx
c001bb1d:	5e                   	pop    esi
c001bb1e:	5f                   	pop    edi
c001bb1f:	c3                   	ret    

c001bb20 <SATABus::close(int, int, void*)>:
c001bb20:	31 c0                	xor    eax,eax
c001bb22:	c3                   	ret    
c001bb23:	90                   	nop

c001bb24 <SATABus::detect()>:
c001bb24:	c3                   	ret    
c001bb25:	90                   	nop

c001bb26 <SATABus::SATABus()>:
c001bb26:	83 ec 0c             	sub    esp,0xc
c001bb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2d:	83 ec 08             	sub    esp,0x8
c001bb30:	68 0c 23 02 c0       	push   0xc002230c
c001bb35:	50                   	push   eax
c001bb36:	e8 7d 08 ff ff       	call   c000c3b8 <HardDiskController::HardDiskController(char const*)>
c001bb3b:	83 c4 10             	add    esp,0x10
c001bb3e:	ba 38 23 02 c0       	mov    edx,0xc0022338
c001bb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb47:	89 10                	mov    DWORD PTR [eax],edx
c001bb49:	83 ec 0c             	sub    esp,0xc
c001bb4c:	6a 50                	push   0x50
c001bb4e:	e8 51 c3 fe ff       	call   c0007ea4 <Phys::allocateContiguousPages(int)>
c001bb53:	83 c4 10             	add    esp,0x10
c001bb56:	89 c2                	mov    edx,eax
c001bb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bb62:	83 ec 0c             	sub    esp,0xc
c001bb65:	6a 50                	push   0x50
c001bb67:	e8 7d da fe ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c001bb6c:	83 c4 10             	add    esp,0x10
c001bb6f:	89 c2                	mov    edx,eax
c001bb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb75:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bb7b:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001bb80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb84:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001bb8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb8e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001bb94:	83 ec 0c             	sub    esp,0xc
c001bb97:	6a 03                	push   0x3
c001bb99:	6a 50                	push   0x50
c001bb9b:	51                   	push   ecx
c001bb9c:	52                   	push   edx
c001bb9d:	50                   	push   eax
c001bb9e:	e8 75 e3 fe ff       	call   c0009f18 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001bba3:	83 c4 20             	add    esp,0x20
c001bba6:	90                   	nop
c001bba7:	83 c4 0c             	add    esp,0xc
c001bbaa:	c3                   	ret    
c001bbab:	90                   	nop

c001bbac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001bbac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbb0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001bbb3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bbb6:	09 c2                	or     edx,eax
c001bbb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bbc2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bbc4:	31 c0                	xor    eax,eax
c001bbc6:	c1 e9 08             	shr    ecx,0x8
c001bbc9:	83 e1 0f             	and    ecx,0xf
c001bbcc:	39 c8                	cmp    eax,ecx
c001bbce:	74 0a                	je     c001bbda <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001bbd0:	f6 c2 01             	test   dl,0x1
c001bbd3:	74 08                	je     c001bbdd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001bbd5:	d1 ea                	shr    edx,1
c001bbd7:	40                   	inc    eax
c001bbd8:	eb f2                	jmp    c001bbcc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001bbda:	83 c8 ff             	or     eax,0xffffffff
c001bbdd:	c3                   	ret    

c001bbde <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001bbde:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bbe2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001bbe5:	89 c2                	mov    edx,eax
c001bbe7:	c1 ea 08             	shr    edx,0x8
c001bbea:	83 e2 0f             	and    edx,0xf
c001bbed:	4a                   	dec    edx
c001bbee:	75 32                	jne    c001bc22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bbf0:	83 e0 0f             	and    eax,0xf
c001bbf3:	83 f8 03             	cmp    eax,0x3
c001bbf6:	75 2a                	jne    c001bc22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bbf8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001bbfb:	b8 02 00 00 00       	mov    eax,0x2
c001bc00:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001bc06:	74 1c                	je     c001bc24 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bc08:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001bc0e:	b8 04 00 00 00       	mov    eax,0x4
c001bc13:	74 0f                	je     c001bc24 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bc15:	31 c0                	xor    eax,eax
c001bc17:	83 fa 03             	cmp    edx,0x3
c001bc1a:	0f 94 c0             	sete   al
c001bc1d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001bc21:	c3                   	ret    
c001bc22:	31 c0                	xor    eax,eax
c001bc24:	c3                   	ret    
c001bc25:	90                   	nop

c001bc26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001bc26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc2d:	0f ba e2 0f          	bt     edx,0xf
c001bc31:	72 f7                	jb     c001bc2a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001bc33:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc36:	83 ca 10             	or     edx,0x10
c001bc39:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc3c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc3f:	83 ca 01             	or     edx,0x1
c001bc42:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc45:	c3                   	ret    

c001bc46 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001bc46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc4a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc4d:	83 e2 fe             	and    edx,0xfffffffe
c001bc50:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc53:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc56:	83 e2 ef             	and    edx,0xffffffef
c001bc59:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc5c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc5f:	0f ba e2 0e          	bt     edx,0xe
c001bc63:	72 f7                	jb     c001bc5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bc65:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc68:	0f ba e2 0f          	bt     edx,0xf
c001bc6c:	72 ee                	jb     c001bc5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bc6e:	c3                   	ret    
c001bc6f:	90                   	nop

c001bc70 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001bc70:	55                   	push   ebp
c001bc71:	57                   	push   edi
c001bc72:	56                   	push   esi
c001bc73:	53                   	push   ebx
c001bc74:	83 ec 1c             	sub    esp,0x1c
c001bc77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bc7b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc7f:	53                   	push   ebx
c001bc80:	57                   	push   edi
c001bc81:	e8 c0 ff ff ff       	call   c001bc46 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001bc86:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bc8a:	83 ec 0c             	sub    esp,0xc
c001bc8d:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001bc93:	c1 e5 0a             	shl    ebp,0xa
c001bc96:	01 e8                	add    eax,ebp
c001bc98:	89 03                	mov    DWORD PTR [ebx],eax
c001bc9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc9c:	68 00 04 00 00       	push   0x400
c001bca1:	6a 00                	push   0x0
c001bca3:	50                   	push   eax
c001bca4:	e8 47 48 fe ff       	call   c00004f0 <memset>
c001bca9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001bcaf:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001bcb3:	83 c4 1c             	add    esp,0x1c
c001bcb6:	01 e8                	add    eax,ebp
c001bcb8:	89 03                	mov    DWORD PTR [ebx],eax
c001bcba:	c1 e6 08             	shl    esi,0x8
c001bcbd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bcc4:	81 c6 00 80 00 00    	add    esi,0x8000
c001bcca:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001bcd0:	01 f0                	add    eax,esi
c001bcd2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bcd5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001bcd8:	68 00 01 00 00       	push   0x100
c001bcdd:	6a 00                	push   0x0
c001bcdf:	50                   	push   eax
c001bce0:	e8 0b 48 fe ff       	call   c00004f0 <memset>
c001bce5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001bceb:	31 d2                	xor    edx,edx
c001bced:	01 f0                	add    eax,esi
c001bcef:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bcf2:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bcf9:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001bcff:	01 ee                	add    esi,ebp
c001bd01:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001bd05:	83 c4 10             	add    esp,0x10
c001bd08:	c1 e5 0d             	shl    ebp,0xd
c001bd0b:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001bd11:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001bd17:	83 c6 20             	add    esi,0x20
c001bd1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bd1e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001bd24:	01 e8                	add    eax,ebp
c001bd26:	01 d0                	add    eax,edx
c001bd28:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001bd2b:	52                   	push   edx
c001bd2c:	68 00 01 00 00       	push   0x100
c001bd31:	6a 00                	push   0x0
c001bd33:	50                   	push   eax
c001bd34:	e8 b7 47 fe ff       	call   c00004f0 <memset>
c001bd39:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001bd3f:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001bd46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bd4a:	83 c4 10             	add    esp,0x10
c001bd4d:	01 e8                	add    eax,ebp
c001bd4f:	01 d0                	add    eax,edx
c001bd51:	81 c2 00 01 00 00    	add    edx,0x100
c001bd57:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001bd5a:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001bd60:	75 af                	jne    c001bd11 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001bd62:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bd69:	50                   	push   eax
c001bd6a:	50                   	push   eax
c001bd6b:	53                   	push   ebx
c001bd6c:	57                   	push   edi
c001bd6d:	e8 b4 fe ff ff       	call   c001bc26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001bd72:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bd79:	83 c4 2c             	add    esp,0x2c
c001bd7c:	5b                   	pop    ebx
c001bd7d:	5e                   	pop    esi
c001bd7e:	5f                   	pop    edi
c001bd7f:	5d                   	pop    ebp
c001bd80:	c3                   	ret    
c001bd81:	90                   	nop

c001bd82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001bd82:	55                   	push   ebp
c001bd83:	57                   	push   edi
c001bd84:	56                   	push   esi
c001bd85:	53                   	push   ebx
c001bd86:	31 db                	xor    ebx,ebx
c001bd88:	83 ec 0c             	sub    esp,0xc
c001bd8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd8f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001bd93:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001bd96:	f7 c7 01 00 00 00    	test   edi,0x1
c001bd9c:	74 7a                	je     c001be18 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bd9e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bda2:	89 d8                	mov    eax,ebx
c001bda4:	c1 e0 07             	shl    eax,0x7
c001bda7:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001bdae:	55                   	push   ebp
c001bdaf:	56                   	push   esi
c001bdb0:	e8 29 fe ff ff       	call   c001bbde <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001bdb5:	5a                   	pop    edx
c001bdb6:	59                   	pop    ecx
c001bdb7:	83 f8 01             	cmp    eax,0x1
c001bdba:	75 21                	jne    c001bddd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001bdbc:	50                   	push   eax
c001bdbd:	53                   	push   ebx
c001bdbe:	55                   	push   ebp
c001bdbf:	56                   	push   esi
c001bdc0:	e8 ab fe ff ff       	call   c001bc70 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bdc5:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001bdcc:	e8 fa bc fe ff       	call   c0007acb <malloc>
c001bdd1:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdd4:	89 c5                	mov    ebp,eax
c001bdd6:	e8 c1 10 00 00       	call   c001ce9c <SATA::SATA()>
c001bddb:	eb 24                	jmp    c001be01 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001bddd:	83 f8 04             	cmp    eax,0x4
c001bde0:	75 36                	jne    c001be18 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bde2:	51                   	push   ecx
c001bde3:	53                   	push   ebx
c001bde4:	55                   	push   ebp
c001bde5:	56                   	push   esi
c001bde6:	e8 85 fe ff ff       	call   c001bc70 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bdeb:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001bdf2:	e8 d4 bc fe ff       	call   c0007acb <malloc>
c001bdf7:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdfa:	89 c5                	mov    ebp,eax
c001bdfc:	e8 f5 17 00 00       	call   c001d5f6 <SATAPI::SATAPI()>
c001be01:	58                   	pop    eax
c001be02:	5a                   	pop    edx
c001be03:	55                   	push   ebp
c001be04:	56                   	push   esi
c001be05:	e8 6a 02 ff ff       	call   c000c074 <Device::addChild(Device*)>
c001be0a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001be0d:	56                   	push   esi
c001be0e:	6a 00                	push   0x0
c001be10:	53                   	push   ebx
c001be11:	55                   	push   ebp
c001be12:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be15:	83 c4 20             	add    esp,0x20
c001be18:	d1 ef                	shr    edi,1
c001be1a:	43                   	inc    ebx
c001be1b:	83 fb 20             	cmp    ebx,0x20
c001be1e:	0f 85 72 ff ff ff    	jne    c001bd96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001be24:	83 c4 0c             	add    esp,0xc
c001be27:	5b                   	pop    ebx
c001be28:	5e                   	pop    esi
c001be29:	5f                   	pop    edi
c001be2a:	5d                   	pop    ebp
c001be2b:	c3                   	ret    

c001be2c <SATABus::open(int, int, void*)>:
c001be2c:	83 ec 14             	sub    esp,0x14
c001be2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be33:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001be39:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001be3f:	52                   	push   edx
c001be40:	50                   	push   eax
c001be41:	e8 3c ff ff ff       	call   c001bd82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001be46:	31 c0                	xor    eax,eax
c001be48:	83 c4 1c             	add    esp,0x1c
c001be4b:	c3                   	ret    

c001be4c <ATA::close(int, int, void*)>:
c001be4c:	83 ec 0c             	sub    esp,0xc
c001be4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be53:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be59:	85 c0                	test   eax,eax
c001be5b:	74 0c                	je     c001be69 <ATA::close(int, int, void*)+0x1d>
c001be5d:	8b 10                	mov    edx,DWORD PTR [eax]
c001be5f:	83 ec 0c             	sub    esp,0xc
c001be62:	50                   	push   eax
c001be63:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001be66:	83 c4 10             	add    esp,0x10
c001be69:	31 c0                	xor    eax,eax
c001be6b:	83 c4 0c             	add    esp,0xc
c001be6e:	c3                   	ret    
c001be6f:	90                   	nop

c001be70 <ATA::powerSaving(PowerSavingLevel)>:
c001be70:	c3                   	ret    
c001be71:	90                   	nop

c001be72 <ATA::ATA()>:
c001be72:	83 ec 0c             	sub    esp,0xc
c001be75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be79:	83 ec 04             	sub    esp,0x4
c001be7c:	68 00 02 00 00       	push   0x200
c001be81:	68 05 24 02 c0       	push   0xc0022405
c001be86:	50                   	push   eax
c001be87:	e8 b6 05 ff ff       	call   c000c442 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001be8c:	83 c4 10             	add    esp,0x10
c001be8f:	ba 78 23 02 c0       	mov    edx,0xc0022378
c001be94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be98:	89 10                	mov    DWORD PTR [eax],edx
c001be9a:	90                   	nop
c001be9b:	83 c4 0c             	add    esp,0xc
c001be9e:	c3                   	ret    
c001be9f:	90                   	nop

c001bea0 <ATA::flush(bool)>:
c001bea0:	53                   	push   ebx
c001bea1:	83 ec 08             	sub    esp,0x8
c001bea4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bea9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bead:	83 f8 01             	cmp    eax,0x1
c001beb0:	19 c0                	sbb    eax,eax
c001beb2:	83 e0 fd             	and    eax,0xfffffffd
c001beb5:	05 ea 00 00 00       	add    eax,0xea
c001beba:	50                   	push   eax
c001bebb:	6a 07                	push   0x7
c001bebd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bec4:	50                   	push   eax
c001bec5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001becb:	e8 18 f1 ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bed0:	83 c4 0c             	add    esp,0xc
c001bed3:	6a 00                	push   0x0
c001bed5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bedc:	50                   	push   eax
c001bedd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bee3:	e8 e4 fb ff ff       	call   c001bacc <IDE::polling(unsigned char, unsigned int)>
c001bee8:	83 c4 18             	add    esp,0x18
c001beeb:	5b                   	pop    ebx
c001beec:	c3                   	ret    
c001beed:	90                   	nop

c001beee <ATA::readyForCommand()>:
c001beee:	56                   	push   esi
c001beef:	53                   	push   ebx
c001bef0:	53                   	push   ebx
c001bef1:	31 db                	xor    ebx,ebx
c001bef3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bef7:	51                   	push   ecx
c001bef8:	6a 0c                	push   0xc
c001befa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bf01:	50                   	push   eax
c001bf02:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bf08:	e8 9b f1 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001bf0d:	83 c4 10             	add    esp,0x10
c001bf10:	a8 88                	test   al,0x88
c001bf12:	74 1f                	je     c001bf33 <ATA::readyForCommand()+0x45>
c001bf14:	43                   	inc    ebx
c001bf15:	83 fb 63             	cmp    ebx,0x63
c001bf18:	7e dd                	jle    c001bef7 <ATA::readyForCommand()+0x9>
c001bf1a:	83 ec 0c             	sub    esp,0xc
c001bf1d:	6a 0a                	push   0xa
c001bf1f:	e8 64 97 ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001bf24:	83 c4 10             	add    esp,0x10
c001bf27:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bf2d:	75 c8                	jne    c001bef7 <ATA::readyForCommand()+0x9>
c001bf2f:	31 c0                	xor    eax,eax
c001bf31:	eb 02                	jmp    c001bf35 <ATA::readyForCommand()+0x47>
c001bf33:	b0 01                	mov    al,0x1
c001bf35:	5a                   	pop    edx
c001bf36:	5b                   	pop    ebx
c001bf37:	5e                   	pop    esi
c001bf38:	c3                   	ret    
c001bf39:	90                   	nop

c001bf3a <ATA::access(unsigned long long, int, void*, bool)>:
c001bf3a:	55                   	push   ebp
c001bf3b:	57                   	push   edi
c001bf3c:	56                   	push   esi
c001bf3d:	53                   	push   ebx
c001bf3e:	83 ec 2c             	sub    esp,0x2c
c001bf41:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bf45:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bf49:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bf4d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bf51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf55:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf59:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001bf5d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bf63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bf67:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bf6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf71:	c1 e0 06             	shl    eax,0x6
c001bf74:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bf7c:	74 5b                	je     c001bfd9 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001bf7e:	89 fa                	mov    edx,edi
c001bf80:	89 f0                	mov    eax,esi
c001bf82:	c1 ea 1c             	shr    edx,0x1c
c001bf85:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001bf89:	89 d1                	mov    ecx,edx
c001bf8b:	09 c1                	or     ecx,eax
c001bf8d:	74 25                	je     c001bfb4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bf8f:	31 ed                	xor    ebp,ebp
c001bf91:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bf98:	89 fa                	mov    edx,edi
c001bf9a:	89 f0                	mov    eax,esi
c001bf9c:	0f ad d0             	shrd   eax,edx,cl
c001bf9f:	d3 ea                	shr    edx,cl
c001bfa1:	f6 c1 20             	test   cl,0x20
c001bfa4:	74 02                	je     c001bfa8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bfa6:	89 d0                	mov    eax,edx
c001bfa8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bfac:	45                   	inc    ebp
c001bfad:	83 fd 06             	cmp    ebp,0x6
c001bfb0:	75 df                	jne    c001bf91 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bfb2:	eb 71                	jmp    c001c025 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001bfb4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bfb9:	89 f0                	mov    eax,esi
c001bfbb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bfc2:	0f ac f8 10          	shrd   eax,edi,0x10
c001bfc6:	bf 01 00 00 00       	mov    edi,0x1
c001bfcb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bfcf:	c1 ee 18             	shr    esi,0x18
c001bfd2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bfd7:	eb 53                	jmp    c001c02c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bfd9:	6a 00                	push   0x0
c001bfdb:	6a 3f                	push   0x3f
c001bfdd:	57                   	push   edi
c001bfde:	56                   	push   esi
c001bfdf:	e8 cc 2a 00 00       	call   c001eab0 <__umoddi3>
c001bfe4:	83 c4 10             	add    esp,0x10
c001bfe7:	40                   	inc    eax
c001bfe8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bfec:	6a 00                	push   0x0
c001bfee:	68 f0 03 00 00       	push   0x3f0
c001bff3:	57                   	push   edi
c001bff4:	56                   	push   esi
c001bff5:	e8 b6 29 00 00       	call   c001e9b0 <__udivdi3>
c001bffa:	83 c4 10             	add    esp,0x10
c001bffd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c002:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c009:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c00e:	6a 00                	push   0x0
c001c010:	6a 3f                	push   0x3f
c001c012:	57                   	push   edi
c001c013:	31 ff                	xor    edi,edi
c001c015:	56                   	push   esi
c001c016:	e8 95 29 00 00       	call   c001e9b0 <__udivdi3>
c001c01b:	83 c4 10             	add    esp,0x10
c001c01e:	83 e0 0f             	and    eax,0xf
c001c021:	89 c6                	mov    esi,eax
c001c023:	eb 07                	jmp    c001c02c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c025:	31 f6                	xor    esi,esi
c001c027:	bf 02 00 00 00       	mov    edi,0x2
c001c02c:	50                   	push   eax
c001c02d:	6a 00                	push   0x0
c001c02f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c036:	50                   	push   eax
c001c037:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c03b:	e8 b6 f1 ff ff       	call   c001b1f6 <IDE::enableIRQs(unsigned char, bool)>
c001c040:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c043:	e8 a6 fe ff ff       	call   c001beee <ATA::readyForCommand()>
c001c048:	83 c4 10             	add    esp,0x10
c001c04b:	84 c0                	test   al,al
c001c04d:	75 0a                	jne    c001c059 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c04f:	be 01 00 00 00       	mov    esi,0x1
c001c054:	e9 9b 02 00 00       	jmp    c001c2f4 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c059:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c05f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c065:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c06c:	c1 e0 04             	shl    eax,0x4
c001c06f:	09 c6                	or     esi,eax
c001c071:	f7 c7 03 00 00 00    	test   edi,0x3
c001c077:	75 05                	jne    c001c07e <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c079:	83 ce a0             	or     esi,0xffffffa0
c001c07c:	eb 03                	jmp    c001c081 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c07e:	83 ce e0             	or     esi,0xffffffe0
c001c081:	89 f0                	mov    eax,esi
c001c083:	0f b6 f0             	movzx  esi,al
c001c086:	56                   	push   esi
c001c087:	6a 06                	push   0x6
c001c089:	51                   	push   ecx
c001c08a:	52                   	push   edx
c001c08b:	e8 58 ef ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c090:	83 c4 10             	add    esp,0x10
c001c093:	6a 00                	push   0x0
c001c095:	6a 01                	push   0x1
c001c097:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c09e:	50                   	push   eax
c001c09f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c0a5:	e8 3e ef ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0aa:	89 f8                	mov    eax,edi
c001c0ac:	83 c4 10             	add    esp,0x10
c001c0af:	0f b6 f0             	movzx  esi,al
c001c0b2:	83 fe 02             	cmp    esi,0x2
c001c0b5:	75 6e                	jne    c001c125 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c0b7:	6a 00                	push   0x0
c001c0b9:	6a 08                	push   0x8
c001c0bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c0c2:	50                   	push   eax
c001c0c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c0c9:	e8 1a ef ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0ce:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c0d3:	50                   	push   eax
c001c0d4:	6a 09                	push   0x9
c001c0d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c0dd:	50                   	push   eax
c001c0de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c0e4:	e8 ff ee ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0e9:	83 c4 20             	add    esp,0x20
c001c0ec:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c0f1:	50                   	push   eax
c001c0f2:	6a 0a                	push   0xa
c001c0f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c0fb:	50                   	push   eax
c001c0fc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c102:	e8 e1 ee ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c107:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c10c:	50                   	push   eax
c001c10d:	6a 0b                	push   0xb
c001c10f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c116:	50                   	push   eax
c001c117:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c11d:	e8 c6 ee ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c122:	83 c4 20             	add    esp,0x20
c001c125:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c12a:	50                   	push   eax
c001c12b:	6a 02                	push   0x2
c001c12d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c134:	50                   	push   eax
c001c135:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c13b:	e8 a8 ee ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c140:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c145:	50                   	push   eax
c001c146:	6a 03                	push   0x3
c001c148:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c14f:	50                   	push   eax
c001c150:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c156:	e8 8d ee ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c15b:	83 c4 20             	add    esp,0x20
c001c15e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c163:	50                   	push   eax
c001c164:	6a 04                	push   0x4
c001c166:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c16d:	50                   	push   eax
c001c16e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c174:	e8 6f ee ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c179:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c17e:	50                   	push   eax
c001c17f:	6a 05                	push   0x5
c001c181:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c188:	50                   	push   eax
c001c189:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c18f:	e8 54 ee ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c194:	83 c4 20             	add    esp,0x20
c001c197:	83 fe 02             	cmp    esi,0x2
c001c19a:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001c19f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001c1a4:	85 c9                	test   ecx,ecx
c001c1a6:	74 07                	je     c001c1af <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c1a8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c1ad:	75 47                	jne    c001c1f6 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001c1af:	89 f8                	mov    eax,edi
c001c1b1:	0f b6 f8             	movzx  edi,al
c001c1b4:	31 c0                	xor    eax,eax
c001c1b6:	83 ff 02             	cmp    edi,0x2
c001c1b9:	0f 95 c0             	setne  al
c001c1bc:	89 c6                	mov    esi,eax
c001c1be:	74 0c                	je     c001c1cc <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001c1c0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c1c5:	b8 30 00 00 00       	mov    eax,0x30
c001c1ca:	75 2f                	jne    c001c1fb <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c1cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c1d0:	83 f2 01             	xor    edx,0x1
c001c1d3:	85 c9                	test   ecx,ecx
c001c1d5:	74 09                	je     c001c1e0 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001c1d7:	84 d2                	test   dl,dl
c001c1d9:	b8 24 00 00 00       	mov    eax,0x24
c001c1de:	75 1b                	jne    c001c1fb <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c1e0:	85 f6                	test   esi,esi
c001c1e2:	0f 84 67 fe ff ff    	je     c001c04f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c1e8:	84 d2                	test   dl,dl
c001c1ea:	b8 20 00 00 00       	mov    eax,0x20
c001c1ef:	75 0a                	jne    c001c1fb <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c1f1:	e9 59 fe ff ff       	jmp    c001c04f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c1f6:	b8 34 00 00 00       	mov    eax,0x34
c001c1fb:	50                   	push   eax
c001c1fc:	6a 07                	push   0x7
c001c1fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c205:	50                   	push   eax
c001c206:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c20c:	e8 d7 ed ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c211:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c215:	83 c4 10             	add    esp,0x10
c001c218:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001c21d:	85 f6                	test   esi,esi
c001c21f:	0f 84 b5 00 00 00    	je     c001c2da <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001c225:	50                   	push   eax
c001c226:	6a 01                	push   0x1
c001c228:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c22f:	50                   	push   eax
c001c230:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c236:	e8 91 f8 ff ff       	call   c001bacc <IDE::polling(unsigned char, unsigned int)>
c001c23b:	83 c4 10             	add    esp,0x10
c001c23e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c244:	0f b6 c0             	movzx  eax,al
c001c247:	85 c0                	test   eax,eax
c001c249:	74 1f                	je     c001c26a <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001c24b:	50                   	push   eax
c001c24c:	89 c6                	mov    esi,eax
c001c24e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c255:	0f b6 d2             	movzx  edx,dl
c001c258:	50                   	push   eax
c001c259:	52                   	push   edx
c001c25a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c260:	e8 ad f7 ff ff       	call   c001ba12 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c265:	e9 87 00 00 00       	jmp    c001c2f1 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001c26a:	85 ed                	test   ebp,ebp
c001c26c:	74 3b                	je     c001c2a9 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001c26e:	31 ff                	xor    edi,edi
c001c270:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c274:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001c278:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001c27d:	50                   	push   eax
c001c27e:	50                   	push   eax
c001c27f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c286:	50                   	push   eax
c001c287:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c28d:	e8 44 ed ff ff       	call   c001afd6 <IDE::getBase(unsigned char)>
c001c292:	89 c2                	mov    edx,eax
c001c294:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c299:	66 ef                	out    dx,ax
c001c29b:	47                   	inc    edi
c001c29c:	83 c4 10             	add    esp,0x10
c001c29f:	81 ff 00 01 00 00    	cmp    edi,0x100
c001c2a5:	75 c9                	jne    c001c270 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001c2a7:	eb 23                	jmp    c001c2cc <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001c2a9:	51                   	push   ecx
c001c2aa:	0f b6 d2             	movzx  edx,dl
c001c2ad:	51                   	push   ecx
c001c2ae:	52                   	push   edx
c001c2af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2b5:	e8 1c ed ff ff       	call   c001afd6 <IDE::getBase(unsigned char)>
c001c2ba:	b9 00 01 00 00       	mov    ecx,0x100
c001c2bf:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c2c3:	89 c2                	mov    edx,eax
c001c2c5:	fc                   	cld    
c001c2c6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c2c9:	83 c4 10             	add    esp,0x10
c001c2cc:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001c2d4:	4e                   	dec    esi
c001c2d5:	e9 43 ff ff ff       	jmp    c001c21d <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001c2da:	31 f6                	xor    esi,esi
c001c2dc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c2e1:	74 11                	je     c001c2f4 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c2e3:	50                   	push   eax
c001c2e4:	50                   	push   eax
c001c2e5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c2ea:	50                   	push   eax
c001c2eb:	53                   	push   ebx
c001c2ec:	e8 af fb ff ff       	call   c001bea0 <ATA::flush(bool)>
c001c2f1:	83 c4 10             	add    esp,0x10
c001c2f4:	83 c4 2c             	add    esp,0x2c
c001c2f7:	89 f0                	mov    eax,esi
c001c2f9:	5b                   	pop    ebx
c001c2fa:	5e                   	pop    esi
c001c2fb:	5f                   	pop    edi
c001c2fc:	5d                   	pop    ebp
c001c2fd:	c3                   	ret    

c001c2fe <ATA::detectCHS()>:
c001c2fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c302:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c308:	c1 e0 06             	shl    eax,0x6
c001c30b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c311:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c31b:	c7 44 24 04 5c 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc002235c
c001c323:	e9 15 48 ff ff       	jmp    c0010b3d <KePanic(char const*)>

c001c328 <ATA::open(int, int, void*)>:
c001c328:	53                   	push   ebx
c001c329:	83 ec 08             	sub    esp,0x8
c001c32c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c330:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c334:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c338:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c33e:	c1 e0 06             	shl    eax,0x6
c001c341:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c347:	01 d0                	add    eax,edx
c001c349:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c350:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c356:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c35d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c367:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c36e:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c374:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c37b:	75 0c                	jne    c001c389 <ATA::open(int, int, void*)+0x61>
c001c37d:	83 ec 0c             	sub    esp,0xc
c001c380:	53                   	push   ebx
c001c381:	e8 78 ff ff ff       	call   c001c2fe <ATA::detectCHS()>
c001c386:	83 c4 10             	add    esp,0x10
c001c389:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c38f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c395:	c1 e0 06             	shl    eax,0x6
c001c398:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c39f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c3a9:	d1 e8                	shr    eax,1
c001c3ab:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c3b1:	6a 04                	push   0x4
c001c3b3:	6a 0c                	push   0xc
c001c3b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3bc:	50                   	push   eax
c001c3bd:	52                   	push   edx
c001c3be:	e8 25 ec ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3c3:	90                   	nop
c001c3c4:	90                   	nop
c001c3c5:	6a 00                	push   0x0
c001c3c7:	6a 0c                	push   0xc
c001c3c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3d0:	50                   	push   eax
c001c3d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3d7:	e8 0c ec ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3dc:	83 c4 14             	add    esp,0x14
c001c3df:	53                   	push   ebx
c001c3e0:	e8 c5 00 ff ff       	call   c000c4aa <PhysicalDisk::startCache()>
c001c3e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3e8:	e8 09 13 ff ff       	call   c000d6f6 <createPartitionsForDisk(PhysicalDisk*)>
c001c3ed:	83 c4 18             	add    esp,0x18
c001c3f0:	31 c0                	xor    eax,eax
c001c3f2:	5b                   	pop    ebx
c001c3f3:	c3                   	ret    

c001c3f4 <combineCharAndColour(char, unsigned char)>:
c001c3f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3f9:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c3ff:	c1 e0 08             	shl    eax,0x8
c001c402:	09 d0                	or     eax,edx
c001c404:	c3                   	ret    

c001c405 <combineColours(unsigned char, unsigned char)>:
c001c405:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c40a:	c1 e0 04             	shl    eax,0x4
c001c40d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c411:	c3                   	ret    

c001c412 <ATA::read(unsigned long long, int, void*)>:
c001c412:	55                   	push   ebp
c001c413:	57                   	push   edi
c001c414:	56                   	push   esi
c001c415:	be 04 00 00 00       	mov    esi,0x4
c001c41a:	53                   	push   ebx
c001c41b:	83 ec 0c             	sub    esp,0xc
c001c41e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c422:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c426:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c42a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c42e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c431:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c437:	0f 87 a1 01 00 00    	ja     c001c5de <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c43d:	85 c9                	test   ecx,ecx
c001c43f:	be 06 00 00 00       	mov    esi,0x6
c001c444:	0f 84 94 01 00 00    	je     c001c5de <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c44a:	55                   	push   ebp
c001c44b:	55                   	push   ebp
c001c44c:	6a 00                	push   0x0
c001c44e:	51                   	push   ecx
c001c44f:	53                   	push   ebx
c001c450:	52                   	push   edx
c001c451:	50                   	push   eax
c001c452:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c456:	e8 df fa ff ff       	call   c001bf3a <ATA::access(unsigned long long, int, void*, bool)>
c001c45b:	83 c4 20             	add    esp,0x20
c001c45e:	85 c0                	test   eax,eax
c001c460:	89 c6                	mov    esi,eax
c001c462:	0f 85 71 01 00 00    	jne    c001c5d9 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c468:	50                   	push   eax
c001c469:	bd 10 27 00 00       	mov    ebp,0x2710
c001c46e:	50                   	push   eax
c001c46f:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c475:	6a 0f                	push   0xf
c001c477:	6a 00                	push   0x0
c001c479:	89 da                	mov    edx,ebx
c001c47b:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c481:	e8 7f ff ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001c486:	59                   	pop    ecx
c001c487:	b9 0a 00 00 00       	mov    ecx,0xa
c001c48c:	5b                   	pop    ebx
c001c48d:	0f b6 d8             	movzx  ebx,al
c001c490:	89 d0                	mov    eax,edx
c001c492:	53                   	push   ebx
c001c493:	99                   	cdq    
c001c494:	f7 fd                	idiv   ebp
c001c496:	99                   	cdq    
c001c497:	f7 f9                	idiv   ecx
c001c499:	83 c2 30             	add    edx,0x30
c001c49c:	0f b6 d2             	movzx  edx,dl
c001c49f:	52                   	push   edx
c001c4a0:	e8 4f ff ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c4a5:	5f                   	pop    edi
c001c4a6:	bf e8 03 00 00       	mov    edi,0x3e8
c001c4ab:	5a                   	pop    edx
c001c4ac:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c4b2:	53                   	push   ebx
c001c4b3:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c4b8:	99                   	cdq    
c001c4b9:	f7 ff                	idiv   edi
c001c4bb:	99                   	cdq    
c001c4bc:	f7 f9                	idiv   ecx
c001c4be:	8d 42 30             	lea    eax,[edx+0x30]
c001c4c1:	0f b6 c0             	movzx  eax,al
c001c4c4:	50                   	push   eax
c001c4c5:	e8 2a ff ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c4ca:	5f                   	pop    edi
c001c4cb:	bf 64 00 00 00       	mov    edi,0x64
c001c4d0:	5a                   	pop    edx
c001c4d1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c4d7:	53                   	push   ebx
c001c4d8:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c4dd:	99                   	cdq    
c001c4de:	f7 ff                	idiv   edi
c001c4e0:	99                   	cdq    
c001c4e1:	f7 f9                	idiv   ecx
c001c4e3:	8d 42 30             	lea    eax,[edx+0x30]
c001c4e6:	0f b6 c0             	movzx  eax,al
c001c4e9:	50                   	push   eax
c001c4ea:	e8 05 ff ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c4ef:	5a                   	pop    edx
c001c4f0:	5a                   	pop    edx
c001c4f1:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c4f7:	53                   	push   ebx
c001c4f8:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c4fd:	99                   	cdq    
c001c4fe:	f7 f9                	idiv   ecx
c001c500:	99                   	cdq    
c001c501:	f7 f9                	idiv   ecx
c001c503:	8d 42 30             	lea    eax,[edx+0x30]
c001c506:	0f b6 c0             	movzx  eax,al
c001c509:	50                   	push   eax
c001c50a:	e8 e5 fe ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c50f:	5a                   	pop    edx
c001c510:	5a                   	pop    edx
c001c511:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c517:	53                   	push   ebx
c001c518:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c51d:	99                   	cdq    
c001c51e:	f7 f9                	idiv   ecx
c001c520:	83 c2 30             	add    edx,0x30
c001c523:	0f b6 d2             	movzx  edx,dl
c001c526:	52                   	push   edx
c001c527:	e8 c8 fe ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c52c:	5a                   	pop    edx
c001c52d:	5a                   	pop    edx
c001c52e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c534:	53                   	push   ebx
c001c535:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c53a:	99                   	cdq    
c001c53b:	f7 fd                	idiv   ebp
c001c53d:	99                   	cdq    
c001c53e:	f7 f9                	idiv   ecx
c001c540:	8d 42 30             	lea    eax,[edx+0x30]
c001c543:	0f b6 c0             	movzx  eax,al
c001c546:	50                   	push   eax
c001c547:	e8 a8 fe ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c54c:	5d                   	pop    ebp
c001c54d:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c552:	5a                   	pop    edx
c001c553:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c559:	53                   	push   ebx
c001c55a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c55f:	99                   	cdq    
c001c560:	f7 fd                	idiv   ebp
c001c562:	99                   	cdq    
c001c563:	f7 f9                	idiv   ecx
c001c565:	8d 42 30             	lea    eax,[edx+0x30]
c001c568:	0f b6 c0             	movzx  eax,al
c001c56b:	50                   	push   eax
c001c56c:	e8 83 fe ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c571:	5d                   	pop    ebp
c001c572:	5a                   	pop    edx
c001c573:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c579:	53                   	push   ebx
c001c57a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c57f:	99                   	cdq    
c001c580:	f7 ff                	idiv   edi
c001c582:	99                   	cdq    
c001c583:	f7 f9                	idiv   ecx
c001c585:	8d 42 30             	lea    eax,[edx+0x30]
c001c588:	0f b6 c0             	movzx  eax,al
c001c58b:	50                   	push   eax
c001c58c:	e8 63 fe ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c591:	5f                   	pop    edi
c001c592:	5d                   	pop    ebp
c001c593:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c599:	53                   	push   ebx
c001c59a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c59f:	99                   	cdq    
c001c5a0:	f7 f9                	idiv   ecx
c001c5a2:	99                   	cdq    
c001c5a3:	f7 f9                	idiv   ecx
c001c5a5:	8d 42 30             	lea    eax,[edx+0x30]
c001c5a8:	0f b6 c0             	movzx  eax,al
c001c5ab:	50                   	push   eax
c001c5ac:	e8 43 fe ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c5b1:	5a                   	pop    edx
c001c5b2:	5f                   	pop    edi
c001c5b3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c5b9:	53                   	push   ebx
c001c5ba:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c5bf:	99                   	cdq    
c001c5c0:	f7 f9                	idiv   ecx
c001c5c2:	83 c2 30             	add    edx,0x30
c001c5c5:	0f b6 d2             	movzx  edx,dl
c001c5c8:	52                   	push   edx
c001c5c9:	e8 26 fe ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c5ce:	83 c4 10             	add    esp,0x10
c001c5d1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c5d7:	eb 05                	jmp    c001c5de <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c5d9:	be 01 00 00 00       	mov    esi,0x1
c001c5de:	83 c4 0c             	add    esp,0xc
c001c5e1:	89 f0                	mov    eax,esi
c001c5e3:	5b                   	pop    ebx
c001c5e4:	5e                   	pop    esi
c001c5e5:	5f                   	pop    edi
c001c5e6:	5d                   	pop    ebp
c001c5e7:	c3                   	ret    

c001c5e8 <ATA::write(unsigned long long, int, void*)>:
c001c5e8:	55                   	push   ebp
c001c5e9:	57                   	push   edi
c001c5ea:	56                   	push   esi
c001c5eb:	be 04 00 00 00       	mov    esi,0x4
c001c5f0:	53                   	push   ebx
c001c5f1:	83 ec 0c             	sub    esp,0xc
c001c5f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c5f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c5fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c600:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c604:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c607:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c60d:	0f 87 9c 01 00 00    	ja     c001c7af <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c613:	85 c9                	test   ecx,ecx
c001c615:	be 06 00 00 00       	mov    esi,0x6
c001c61a:	0f 84 8f 01 00 00    	je     c001c7af <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c620:	55                   	push   ebp
c001c621:	55                   	push   ebp
c001c622:	6a 01                	push   0x1
c001c624:	51                   	push   ecx
c001c625:	53                   	push   ebx
c001c626:	52                   	push   edx
c001c627:	50                   	push   eax
c001c628:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c62c:	e8 09 f9 ff ff       	call   c001bf3a <ATA::access(unsigned long long, int, void*, bool)>
c001c631:	83 c4 20             	add    esp,0x20
c001c634:	85 c0                	test   eax,eax
c001c636:	89 c6                	mov    esi,eax
c001c638:	0f 85 6c 01 00 00    	jne    c001c7aa <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c63e:	50                   	push   eax
c001c63f:	bd 10 27 00 00       	mov    ebp,0x2710
c001c644:	50                   	push   eax
c001c645:	6a 0f                	push   0xf
c001c647:	6a 00                	push   0x0
c001c649:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c64f:	e8 b1 fd ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001c654:	5a                   	pop    edx
c001c655:	59                   	pop    ecx
c001c656:	b9 0a 00 00 00       	mov    ecx,0xa
c001c65b:	0f b6 d8             	movzx  ebx,al
c001c65e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c663:	53                   	push   ebx
c001c664:	99                   	cdq    
c001c665:	f7 fd                	idiv   ebp
c001c667:	99                   	cdq    
c001c668:	f7 f9                	idiv   ecx
c001c66a:	8d 42 30             	lea    eax,[edx+0x30]
c001c66d:	0f b6 c0             	movzx  eax,al
c001c670:	50                   	push   eax
c001c671:	e8 7e fd ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c676:	5f                   	pop    edi
c001c677:	bf e8 03 00 00       	mov    edi,0x3e8
c001c67c:	5a                   	pop    edx
c001c67d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c683:	53                   	push   ebx
c001c684:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c689:	99                   	cdq    
c001c68a:	f7 ff                	idiv   edi
c001c68c:	99                   	cdq    
c001c68d:	f7 f9                	idiv   ecx
c001c68f:	8d 42 30             	lea    eax,[edx+0x30]
c001c692:	0f b6 c0             	movzx  eax,al
c001c695:	50                   	push   eax
c001c696:	e8 59 fd ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c69b:	5f                   	pop    edi
c001c69c:	bf 64 00 00 00       	mov    edi,0x64
c001c6a1:	5a                   	pop    edx
c001c6a2:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c6a8:	53                   	push   ebx
c001c6a9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c6ae:	99                   	cdq    
c001c6af:	f7 ff                	idiv   edi
c001c6b1:	99                   	cdq    
c001c6b2:	f7 f9                	idiv   ecx
c001c6b4:	8d 42 30             	lea    eax,[edx+0x30]
c001c6b7:	0f b6 c0             	movzx  eax,al
c001c6ba:	50                   	push   eax
c001c6bb:	e8 34 fd ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c6c0:	5a                   	pop    edx
c001c6c1:	5a                   	pop    edx
c001c6c2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c6c8:	53                   	push   ebx
c001c6c9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c6ce:	99                   	cdq    
c001c6cf:	f7 f9                	idiv   ecx
c001c6d1:	99                   	cdq    
c001c6d2:	f7 f9                	idiv   ecx
c001c6d4:	8d 42 30             	lea    eax,[edx+0x30]
c001c6d7:	0f b6 c0             	movzx  eax,al
c001c6da:	50                   	push   eax
c001c6db:	e8 14 fd ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c6e0:	5a                   	pop    edx
c001c6e1:	5a                   	pop    edx
c001c6e2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c6e8:	53                   	push   ebx
c001c6e9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c6ee:	99                   	cdq    
c001c6ef:	f7 f9                	idiv   ecx
c001c6f1:	83 c2 30             	add    edx,0x30
c001c6f4:	0f b6 d2             	movzx  edx,dl
c001c6f7:	52                   	push   edx
c001c6f8:	e8 f7 fc ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c6fd:	5a                   	pop    edx
c001c6fe:	5a                   	pop    edx
c001c6ff:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c705:	53                   	push   ebx
c001c706:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c70b:	99                   	cdq    
c001c70c:	f7 fd                	idiv   ebp
c001c70e:	99                   	cdq    
c001c70f:	f7 f9                	idiv   ecx
c001c711:	8d 42 30             	lea    eax,[edx+0x30]
c001c714:	0f b6 c0             	movzx  eax,al
c001c717:	50                   	push   eax
c001c718:	e8 d7 fc ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c71d:	5d                   	pop    ebp
c001c71e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c723:	5a                   	pop    edx
c001c724:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c72a:	53                   	push   ebx
c001c72b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c730:	99                   	cdq    
c001c731:	f7 fd                	idiv   ebp
c001c733:	99                   	cdq    
c001c734:	f7 f9                	idiv   ecx
c001c736:	8d 42 30             	lea    eax,[edx+0x30]
c001c739:	0f b6 c0             	movzx  eax,al
c001c73c:	50                   	push   eax
c001c73d:	e8 b2 fc ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c742:	5d                   	pop    ebp
c001c743:	5a                   	pop    edx
c001c744:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c74a:	53                   	push   ebx
c001c74b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c750:	99                   	cdq    
c001c751:	f7 ff                	idiv   edi
c001c753:	99                   	cdq    
c001c754:	f7 f9                	idiv   ecx
c001c756:	8d 42 30             	lea    eax,[edx+0x30]
c001c759:	0f b6 c0             	movzx  eax,al
c001c75c:	50                   	push   eax
c001c75d:	e8 92 fc ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c762:	5f                   	pop    edi
c001c763:	5d                   	pop    ebp
c001c764:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c76a:	53                   	push   ebx
c001c76b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c770:	99                   	cdq    
c001c771:	f7 f9                	idiv   ecx
c001c773:	99                   	cdq    
c001c774:	f7 f9                	idiv   ecx
c001c776:	8d 42 30             	lea    eax,[edx+0x30]
c001c779:	0f b6 c0             	movzx  eax,al
c001c77c:	50                   	push   eax
c001c77d:	e8 72 fc ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c782:	5a                   	pop    edx
c001c783:	5f                   	pop    edi
c001c784:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c78a:	53                   	push   ebx
c001c78b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c790:	99                   	cdq    
c001c791:	f7 f9                	idiv   ecx
c001c793:	83 c2 30             	add    edx,0x30
c001c796:	0f b6 d2             	movzx  edx,dl
c001c799:	52                   	push   edx
c001c79a:	e8 55 fc ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001c79f:	83 c4 10             	add    esp,0x10
c001c7a2:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c7a8:	eb 05                	jmp    c001c7af <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c7aa:	be 01 00 00 00       	mov    esi,0x1
c001c7af:	83 c4 0c             	add    esp,0xc
c001c7b2:	89 f0                	mov    eax,esi
c001c7b4:	5b                   	pop    ebx
c001c7b5:	5e                   	pop    esi
c001c7b6:	5f                   	pop    edi
c001c7b7:	5d                   	pop    ebp
c001c7b8:	c3                   	ret    
c001c7b9:	90                   	nop

c001c7ba <ATAPI::write(unsigned long long, int, void*)>:
c001c7ba:	b8 03 00 00 00       	mov    eax,0x3
c001c7bf:	c3                   	ret    

c001c7c0 <ATAPI::close(int, int, void*)>:
c001c7c0:	83 ec 0c             	sub    esp,0xc
c001c7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c7cd:	85 c0                	test   eax,eax
c001c7cf:	74 0c                	je     c001c7dd <ATAPI::close(int, int, void*)+0x1d>
c001c7d1:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7d3:	83 ec 0c             	sub    esp,0xc
c001c7d6:	50                   	push   eax
c001c7d7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7da:	83 c4 10             	add    esp,0x10
c001c7dd:	31 c0                	xor    eax,eax
c001c7df:	83 c4 0c             	add    esp,0xc
c001c7e2:	c3                   	ret    
c001c7e3:	90                   	nop

c001c7e4 <ATAPI::ATAPI()>:
c001c7e4:	83 ec 0c             	sub    esp,0xc
c001c7e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7eb:	83 ec 04             	sub    esp,0x4
c001c7ee:	68 00 08 00 00       	push   0x800
c001c7f3:	68 a5 24 02 c0       	push   0xc00224a5
c001c7f8:	50                   	push   eax
c001c7f9:	e8 44 fc fe ff       	call   c000c442 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7fe:	83 c4 10             	add    esp,0x10
c001c801:	ba c0 23 02 c0       	mov    edx,0xc00223c0
c001c806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80a:	89 10                	mov    DWORD PTR [eax],edx
c001c80c:	90                   	nop
c001c80d:	83 c4 0c             	add    esp,0xc
c001c810:	c3                   	ret    
c001c811:	90                   	nop

c001c812 <ATAPI::readyForCommand()>:
c001c812:	56                   	push   esi
c001c813:	53                   	push   ebx
c001c814:	53                   	push   ebx
c001c815:	31 db                	xor    ebx,ebx
c001c817:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c81b:	51                   	push   ecx
c001c81c:	6a 0c                	push   0xc
c001c81e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c825:	50                   	push   eax
c001c826:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c82c:	e8 77 e8 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001c831:	83 c4 10             	add    esp,0x10
c001c834:	a8 88                	test   al,0x88
c001c836:	74 25                	je     c001c85d <ATAPI::readyForCommand()+0x4b>
c001c838:	43                   	inc    ebx
c001c839:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c83f:	7e da                	jle    c001c81b <ATAPI::readyForCommand()+0x9>
c001c841:	83 ec 0c             	sub    esp,0xc
c001c844:	68 5e 01 00 00       	push   0x15e
c001c849:	e8 3a 8e ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001c84e:	83 c4 10             	add    esp,0x10
c001c851:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c857:	75 c2                	jne    c001c81b <ATAPI::readyForCommand()+0x9>
c001c859:	31 c0                	xor    eax,eax
c001c85b:	eb 02                	jmp    c001c85f <ATAPI::readyForCommand()+0x4d>
c001c85d:	b0 01                	mov    al,0x1
c001c85f:	5a                   	pop    edx
c001c860:	5b                   	pop    ebx
c001c861:	5e                   	pop    esi
c001c862:	c3                   	ret    
c001c863:	90                   	nop

c001c864 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c864:	55                   	push   ebp
c001c865:	57                   	push   edi
c001c866:	56                   	push   esi
c001c867:	53                   	push   ebx
c001c868:	83 ec 20             	sub    esp,0x20
c001c86b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c86f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c873:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c877:	6a 01                	push   0x1
c001c879:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c880:	50                   	push   eax
c001c881:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c887:	e8 6a e9 ff ff       	call   c001b1f6 <IDE::enableIRQs(unsigned char, bool)>
c001c88c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c893:	59                   	pop    ecx
c001c894:	5e                   	pop    esi
c001c895:	50                   	push   eax
c001c896:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c89c:	e8 21 e7 ff ff       	call   c001afc2 <IDE::prepareInterrupt(unsigned char)>
c001c8a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8a4:	e8 69 ff ff ff       	call   c001c812 <ATAPI::readyForCommand()>
c001c8a9:	83 c4 10             	add    esp,0x10
c001c8ac:	84 c0                	test   al,al
c001c8ae:	75 0a                	jne    c001c8ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001c8b0:	bb 01 00 00 00       	mov    ebx,0x1
c001c8b5:	e9 5f 02 00 00       	jmp    c001cb19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c8ba:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c8c0:	c1 e0 04             	shl    eax,0x4
c001c8c3:	0f b6 c0             	movzx  eax,al
c001c8c6:	50                   	push   eax
c001c8c7:	6a 06                	push   0x6
c001c8c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8d0:	50                   	push   eax
c001c8d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8d7:	e8 0c e7 ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8dc:	6a 00                	push   0x0
c001c8de:	6a 01                	push   0x1
c001c8e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8e7:	50                   	push   eax
c001c8e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8ee:	e8 f5 e6 ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f3:	83 c4 20             	add    esp,0x20
c001c8f6:	0f b6 c3             	movzx  eax,bl
c001c8f9:	50                   	push   eax
c001c8fa:	0f b6 df             	movzx  ebx,bh
c001c8fd:	6a 04                	push   0x4
c001c8ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c906:	50                   	push   eax
c001c907:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c90d:	e8 d6 e6 ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c912:	53                   	push   ebx
c001c913:	6a 05                	push   0x5
c001c915:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c91c:	50                   	push   eax
c001c91d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c923:	e8 c0 e6 ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c928:	83 c4 20             	add    esp,0x20
c001c92b:	68 a0 00 00 00       	push   0xa0
c001c930:	6a 07                	push   0x7
c001c932:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c939:	50                   	push   eax
c001c93a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c940:	e8 a3 e6 ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c945:	83 c4 0c             	add    esp,0xc
c001c948:	6a 01                	push   0x1
c001c94a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c951:	50                   	push   eax
c001c952:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c958:	e8 6f f1 ff ff       	call   c001bacc <IDE::polling(unsigned char, unsigned int)>
c001c95d:	83 c4 10             	add    esp,0x10
c001c960:	0f b6 d8             	movzx  ebx,al
c001c963:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c969:	85 db                	test   ebx,ebx
c001c96b:	74 20                	je     c001c98d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001c96d:	53                   	push   ebx
c001c96e:	0f b6 c0             	movzx  eax,al
c001c971:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c978:	52                   	push   edx
c001c979:	50                   	push   eax
c001c97a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c980:	e8 8d f0 ff ff       	call   c001ba12 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c985:	83 c4 10             	add    esp,0x10
c001c988:	e9 8c 01 00 00       	jmp    c001cb19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c98d:	52                   	push   edx
c001c98e:	0f b6 c0             	movzx  eax,al
c001c991:	52                   	push   edx
c001c992:	50                   	push   eax
c001c993:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c999:	e8 38 e6 ff ff       	call   c001afd6 <IDE::getBase(unsigned char)>
c001c99e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c9a2:	b9 06 00 00 00       	mov    ecx,0x6
c001c9a7:	89 c2                	mov    edx,eax
c001c9a9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c9ac:	89 e8                	mov    eax,ebp
c001c9ae:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c9b2:	83 c4 10             	add    esp,0x10
c001c9b5:	0f b6 c0             	movzx  eax,al
c001c9b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9bc:	85 db                	test   ebx,ebx
c001c9be:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c9c4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c9cb:	0f 84 eb 00 00 00    	je     c001cabc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c9d1:	55                   	push   ebp
c001c9d2:	55                   	push   ebp
c001c9d3:	52                   	push   edx
c001c9d4:	50                   	push   eax
c001c9d5:	e8 82 e7 ff ff       	call   c001b15c <IDE::waitInterrupt(unsigned char)>
c001c9da:	83 c4 10             	add    esp,0x10
c001c9dd:	84 c0                	test   al,al
c001c9df:	0f 84 cb fe ff ff    	je     c001c8b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c9e5:	56                   	push   esi
c001c9e6:	56                   	push   esi
c001c9e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9ee:	50                   	push   eax
c001c9ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9f5:	e8 c8 e5 ff ff       	call   c001afc2 <IDE::prepareInterrupt(unsigned char)>
c001c9fa:	83 c4 0c             	add    esp,0xc
c001c9fd:	6a 04                	push   0x4
c001c9ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca06:	50                   	push   eax
c001ca07:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca0d:	e8 96 e6 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001ca12:	83 c4 0c             	add    esp,0xc
c001ca15:	6a 05                	push   0x5
c001ca17:	89 c6                	mov    esi,eax
c001ca19:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca20:	50                   	push   eax
c001ca21:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca27:	e8 7c e6 ff ff       	call   c001b0a8 <IDE::read(unsigned char, unsigned char)>
c001ca2c:	83 c4 10             	add    esp,0x10
c001ca2f:	0f b6 e8             	movzx  ebp,al
c001ca32:	89 f0                	mov    eax,esi
c001ca34:	c1 e5 08             	shl    ebp,0x8
c001ca37:	0f b6 f0             	movzx  esi,al
c001ca3a:	09 f5                	or     ebp,esi
c001ca3c:	31 f6                	xor    esi,esi
c001ca3e:	d1 fd                	sar    ebp,1
c001ca40:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ca45:	74 5c                	je     c001caa3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001ca47:	39 ee                	cmp    esi,ebp
c001ca49:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca4f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca56:	75 0d                	jne    c001ca65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001ca58:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001ca5b:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001ca5f:	4b                   	dec    ebx
c001ca60:	e9 57 ff ff ff       	jmp    c001c9bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001ca65:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ca69:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001ca6d:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001ca72:	51                   	push   ecx
c001ca73:	51                   	push   ecx
c001ca74:	52                   	push   edx
c001ca75:	50                   	push   eax
c001ca76:	e8 5b e5 ff ff       	call   c001afd6 <IDE::getBase(unsigned char)>
c001ca7b:	89 c2                	mov    edx,eax
c001ca7d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001ca82:	66 ef                	out    dx,ax
c001ca84:	46                   	inc    esi
c001ca85:	83 c4 10             	add    esp,0x10
c001ca88:	eb bd                	jmp    c001ca47 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001ca8a:	51                   	push   ecx
c001ca8b:	51                   	push   ecx
c001ca8c:	52                   	push   edx
c001ca8d:	50                   	push   eax
c001ca8e:	e8 43 e5 ff ff       	call   c001afd6 <IDE::getBase(unsigned char)>
c001ca93:	89 c2                	mov    edx,eax
c001ca95:	66 ed                	in     ax,dx
c001ca97:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001caa2:	46                   	inc    esi
c001caa3:	39 ee                	cmp    esi,ebp
c001caa5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001caab:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cab2:	75 d6                	jne    c001ca8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001cab4:	01 f6                	add    esi,esi
c001cab6:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001caba:	eb a3                	jmp    c001ca5f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001cabc:	51                   	push   ecx
c001cabd:	51                   	push   ecx
c001cabe:	52                   	push   edx
c001cabf:	50                   	push   eax
c001cac0:	e8 97 e6 ff ff       	call   c001b15c <IDE::waitInterrupt(unsigned char)>
c001cac5:	83 c4 10             	add    esp,0x10
c001cac8:	84 c0                	test   al,al
c001caca:	0f 84 e0 fd ff ff    	je     c001c8b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001cad0:	52                   	push   edx
c001cad1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cad6:	52                   	push   edx
c001cad7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cade:	50                   	push   eax
c001cadf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cae5:	e8 d8 e4 ff ff       	call   c001afc2 <IDE::prepareInterrupt(unsigned char)>
c001caea:	83 c4 10             	add    esp,0x10
c001caed:	50                   	push   eax
c001caee:	50                   	push   eax
c001caef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caf6:	50                   	push   eax
c001caf7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cafd:	e8 d4 e4 ff ff       	call   c001afd6 <IDE::getBase(unsigned char)>
c001cb02:	8d 50 07             	lea    edx,[eax+0x7]
c001cb05:	ec                   	in     al,dx
c001cb06:	83 c4 10             	add    esp,0x10
c001cb09:	a8 88                	test   al,0x88
c001cb0b:	74 0a                	je     c001cb17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001cb0d:	4b                   	dec    ebx
c001cb0e:	75 dd                	jne    c001caed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001cb10:	bb 02 00 00 00       	mov    ebx,0x2
c001cb15:	eb 02                	jmp    c001cb19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cb17:	31 db                	xor    ebx,ebx
c001cb19:	83 c4 1c             	add    esp,0x1c
c001cb1c:	89 d8                	mov    eax,ebx
c001cb1e:	5b                   	pop    ebx
c001cb1f:	5e                   	pop    esi
c001cb20:	5f                   	pop    edi
c001cb21:	5d                   	pop    ebp
c001cb22:	c3                   	ret    
c001cb23:	90                   	nop

c001cb24 <ATAPI::diskRemoved()>:
c001cb24:	53                   	push   ebx
c001cb25:	83 ec 14             	sub    esp,0x14
c001cb28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cb2c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cb33:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001cb39:	e8 a6 08 ff ff       	call   c000d3e4 <LogicalDisk::unmount()>
c001cb3e:	58                   	pop    eax
c001cb3f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cb45:	e8 7e 12 ff ff       	call   c000ddc8 <VCache::writeWriteBuffer()>
c001cb4a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001cb50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb54:	83 c4 18             	add    esp,0x18
c001cb57:	5b                   	pop    ebx
c001cb58:	e9 5b 12 ff ff       	jmp    c000ddb8 <VCache::invalidateReadBuffer()>
c001cb5d:	90                   	nop

c001cb5e <ATAPI::eject()>:
c001cb5e:	57                   	push   edi
c001cb5f:	b9 03 00 00 00       	mov    ecx,0x3
c001cb64:	53                   	push   ebx
c001cb65:	83 ec 14             	sub    esp,0x14
c001cb68:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb6c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cb70:	fc                   	cld    
c001cb71:	31 c0                	xor    eax,eax
c001cb73:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cb75:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cb7a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cb7f:	50                   	push   eax
c001cb80:	50                   	push   eax
c001cb81:	6a 00                	push   0x0
c001cb83:	6a 00                	push   0x0
c001cb85:	6a 00                	push   0x0
c001cb87:	6a 02                	push   0x2
c001cb89:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb8d:	50                   	push   eax
c001cb8e:	53                   	push   ebx
c001cb8f:	e8 d0 fc ff ff       	call   c001c864 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cb94:	83 c4 14             	add    esp,0x14
c001cb97:	53                   	push   ebx
c001cb98:	e8 87 ff ff ff       	call   c001cb24 <ATAPI::diskRemoved()>
c001cb9d:	83 c4 24             	add    esp,0x24
c001cba0:	31 c0                	xor    eax,eax
c001cba2:	5b                   	pop    ebx
c001cba3:	5f                   	pop    edi
c001cba4:	c3                   	ret    
c001cba5:	90                   	nop

c001cba6 <ATAPI::diskInserted()>:
c001cba6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbaa:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001cbb1:	c3                   	ret    

c001cbb2 <ATAPI::detectMedia()>:
c001cbb2:	56                   	push   esi
c001cbb3:	53                   	push   ebx
c001cbb4:	83 ec 28             	sub    esp,0x28
c001cbb7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cbbb:	6a 0c                	push   0xc
c001cbbd:	6a 00                	push   0x0
c001cbbf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cbc3:	56                   	push   esi
c001cbc4:	e8 27 39 fe ff       	call   c00004f0 <memset>
c001cbc9:	58                   	pop    eax
c001cbca:	5a                   	pop    edx
c001cbcb:	6a 00                	push   0x0
c001cbcd:	6a 00                	push   0x0
c001cbcf:	6a 00                	push   0x0
c001cbd1:	6a 00                	push   0x0
c001cbd3:	56                   	push   esi
c001cbd4:	53                   	push   ebx
c001cbd5:	e8 8a fc ff ff       	call   c001c864 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cbda:	83 c4 1c             	add    esp,0x1c
c001cbdd:	6a 0c                	push   0xc
c001cbdf:	6a 00                	push   0x0
c001cbe1:	56                   	push   esi
c001cbe2:	e8 09 39 fe ff       	call   c00004f0 <memset>
c001cbe7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cbec:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cbf1:	59                   	pop    ecx
c001cbf2:	58                   	pop    eax
c001cbf3:	6a 01                	push   0x1
c001cbf5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cbf9:	50                   	push   eax
c001cbfa:	6a 00                	push   0x0
c001cbfc:	6a 12                	push   0x12
c001cbfe:	56                   	push   esi
c001cbff:	53                   	push   ebx
c001cc00:	e8 5f fc ff ff       	call   c001c864 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cc05:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cc09:	83 c4 20             	add    esp,0x20
c001cc0c:	83 e0 7f             	and    eax,0x7f
c001cc0f:	83 f8 70             	cmp    eax,0x70
c001cc12:	74 15                	je     c001cc29 <ATAPI::detectMedia()+0x77>
c001cc14:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc1b:	75 0c                	jne    c001cc29 <ATAPI::detectMedia()+0x77>
c001cc1d:	83 ec 0c             	sub    esp,0xc
c001cc20:	53                   	push   ebx
c001cc21:	e8 80 ff ff ff       	call   c001cba6 <ATAPI::diskInserted()>
c001cc26:	83 c4 10             	add    esp,0x10
c001cc29:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cc2d:	83 e0 0f             	and    eax,0xf
c001cc30:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cc35:	0f b6 c0             	movzx  eax,al
c001cc38:	75 19                	jne    c001cc53 <ATAPI::detectMedia()+0xa1>
c001cc3a:	83 f8 02             	cmp    eax,0x2
c001cc3d:	75 14                	jne    c001cc53 <ATAPI::detectMedia()+0xa1>
c001cc3f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc46:	74 24                	je     c001cc6c <ATAPI::detectMedia()+0xba>
c001cc48:	83 ec 0c             	sub    esp,0xc
c001cc4b:	53                   	push   ebx
c001cc4c:	e8 d3 fe ff ff       	call   c001cb24 <ATAPI::diskRemoved()>
c001cc51:	eb 16                	jmp    c001cc69 <ATAPI::detectMedia()+0xb7>
c001cc53:	85 c0                	test   eax,eax
c001cc55:	75 15                	jne    c001cc6c <ATAPI::detectMedia()+0xba>
c001cc57:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc5e:	75 0c                	jne    c001cc6c <ATAPI::detectMedia()+0xba>
c001cc60:	83 ec 0c             	sub    esp,0xc
c001cc63:	53                   	push   ebx
c001cc64:	e8 3d ff ff ff       	call   c001cba6 <ATAPI::diskInserted()>
c001cc69:	83 c4 10             	add    esp,0x10
c001cc6c:	83 c4 24             	add    esp,0x24
c001cc6f:	5b                   	pop    ebx
c001cc70:	5e                   	pop    esi
c001cc71:	c3                   	ret    

c001cc72 <ATAPI::open(int, int, void*)>:
c001cc72:	56                   	push   esi
c001cc73:	53                   	push   ebx
c001cc74:	50                   	push   eax
c001cc75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc81:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc87:	c1 e0 06             	shl    eax,0x6
c001cc8a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc90:	01 d0                	add    eax,edx
c001cc92:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001cc99:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001cc9f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001cca6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ccb0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ccb7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ccbd:	6a 04                	push   0x4
c001ccbf:	6a 0c                	push   0xc
c001ccc1:	51                   	push   ecx
c001ccc2:	52                   	push   edx
c001ccc3:	e8 20 e3 ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccc8:	90                   	nop
c001ccc9:	90                   	nop
c001ccca:	6a 00                	push   0x0
c001cccc:	6a 0c                	push   0xc
c001ccce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccd5:	50                   	push   eax
c001ccd6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccdc:	e8 07 e3 ff ff       	call   c001afe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cce1:	83 c4 14             	add    esp,0x14
c001cce4:	68 78 01 00 00       	push   0x178
c001cce9:	e8 dd ad fe ff       	call   c0007acb <malloc>
c001ccee:	83 c4 0c             	add    esp,0xc
c001ccf1:	6a 00                	push   0x0
c001ccf3:	68 ff ff ff 7f       	push   0x7fffffff
c001ccf8:	6a 00                	push   0x0
c001ccfa:	6a 00                	push   0x0
c001ccfc:	53                   	push   ebx
c001ccfd:	68 57 25 02 c0       	push   0xc0022557
c001cd02:	89 c6                	mov    esi,eax
c001cd04:	50                   	push   eax
c001cd05:	e8 18 05 ff ff       	call   c000d222 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cd0a:	83 c4 14             	add    esp,0x14
c001cd0d:	56                   	push   esi
c001cd0e:	e8 cf 05 ff ff       	call   c000d2e2 <LogicalDisk::assignDriveLetter()>
c001cd13:	5a                   	pop    edx
c001cd14:	59                   	pop    ecx
c001cd15:	0f be c0             	movsx  eax,al
c001cd18:	50                   	push   eax
c001cd19:	68 a8 23 02 c0       	push   0xc00223a8
c001cd1e:	e8 19 dc fe ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001cd23:	58                   	pop    eax
c001cd24:	5a                   	pop    edx
c001cd25:	56                   	push   esi
c001cd26:	53                   	push   ebx
c001cd27:	e8 48 f3 fe ff       	call   c000c074 <Device::addChild(Device*)>
c001cd2c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001cd32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd35:	e8 70 f7 fe ff       	call   c000c4aa <PhysicalDisk::startCache()>
c001cd3a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cd41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd44:	e8 69 fe ff ff       	call   c001cbb2 <ATAPI::detectMedia()>
c001cd49:	83 c4 14             	add    esp,0x14
c001cd4c:	31 c0                	xor    eax,eax
c001cd4e:	5b                   	pop    ebx
c001cd4f:	5e                   	pop    esi
c001cd50:	c3                   	ret    
c001cd51:	90                   	nop

c001cd52 <ATAPI::read(unsigned long long, int, void*)>:
c001cd52:	55                   	push   ebp
c001cd53:	57                   	push   edi
c001cd54:	56                   	push   esi
c001cd55:	53                   	push   ebx
c001cd56:	83 ec 1c             	sub    esp,0x1c
c001cd59:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cd5d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001cd61:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cd65:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cd6c:	74 3c                	je     c001cdaa <ATAPI::read(unsigned long long, int, void*)+0x58>
c001cd6e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cd72:	b9 03 00 00 00       	mov    ecx,0x3
c001cd77:	fc                   	cld    
c001cd78:	31 c0                	xor    eax,eax
c001cd7a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cd7c:	89 e8                	mov    eax,ebp
c001cd7e:	0f ce                	bswap  esi
c001cd80:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cd84:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cd89:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001cd8d:	50                   	push   eax
c001cd8e:	50                   	push   eax
c001cd8f:	55                   	push   ebp
c001cd90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cd94:	c1 e5 0b             	shl    ebp,0xb
c001cd97:	6a 00                	push   0x0
c001cd99:	55                   	push   ebp
c001cd9a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd9e:	50                   	push   eax
c001cd9f:	53                   	push   ebx
c001cda0:	e8 bf fa ff ff       	call   c001c864 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cda5:	83 c4 20             	add    esp,0x20
c001cda8:	eb 1a                	jmp    c001cdc4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001cdaa:	83 ec 0c             	sub    esp,0xc
c001cdad:	53                   	push   ebx
c001cdae:	e8 ff fd ff ff       	call   c001cbb2 <ATAPI::detectMedia()>
c001cdb3:	83 c4 10             	add    esp,0x10
c001cdb6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cdbd:	75 af                	jne    c001cd6e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cdbf:	b8 02 00 00 00       	mov    eax,0x2
c001cdc4:	83 c4 1c             	add    esp,0x1c
c001cdc7:	5b                   	pop    ebx
c001cdc8:	5e                   	pop    esi
c001cdc9:	5f                   	pop    edi
c001cdca:	5d                   	pop    ebp
c001cdcb:	c3                   	ret    

c001cdcc <SATA::close(int, int, void*)>:
c001cdcc:	83 ec 0c             	sub    esp,0xc
c001cdcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cdd9:	85 c0                	test   eax,eax
c001cddb:	74 0c                	je     c001cde9 <SATA::close(int, int, void*)+0x1d>
c001cddd:	8b 10                	mov    edx,DWORD PTR [eax]
c001cddf:	83 ec 0c             	sub    esp,0xc
c001cde2:	50                   	push   eax
c001cde3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cde6:	83 c4 10             	add    esp,0x10
c001cde9:	31 c0                	xor    eax,eax
c001cdeb:	83 c4 0c             	add    esp,0xc
c001cdee:	c3                   	ret    
c001cdef:	90                   	nop

c001cdf0 <SATA::powerSaving(PowerSavingLevel)>:
c001cdf0:	c3                   	ret    
c001cdf1:	90                   	nop

c001cdf2 <SATA::open(int, int, void*)>:
c001cdf2:	56                   	push   esi
c001cdf3:	53                   	push   ebx
c001cdf4:	50                   	push   eax
c001cdf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cdf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cdfd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ce07:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ce0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce11:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ce1b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ce25:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ce2c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ce32:	e8 9e af fe ff       	call   c0007dd5 <Phys::allocatePage()>
c001ce37:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ce3d:	89 c6                	mov    esi,eax
c001ce3f:	e8 91 af fe ff       	call   c0007dd5 <Phys::allocatePage()>
c001ce44:	81 c6 00 10 00 00    	add    esi,0x1000
c001ce4a:	39 c6                	cmp    esi,eax
c001ce4c:	74 10                	je     c001ce5e <SATA::open(int, int, void*)+0x6c>
c001ce4e:	83 ec 0c             	sub    esp,0xc
c001ce51:	68 f0 23 02 c0       	push   0xc00223f0
c001ce56:	e8 e2 3c ff ff       	call   c0010b3d <KePanic(char const*)>
c001ce5b:	83 c4 10             	add    esp,0x10
c001ce5e:	83 ec 0c             	sub    esp,0xc
c001ce61:	6a 02                	push   0x2
c001ce63:	e8 81 c7 fe ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c001ce68:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ce6e:	6a 03                	push   0x3
c001ce70:	50                   	push   eax
c001ce71:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ce77:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001ce7d:	e8 6e ce fe ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ce82:	83 c4 14             	add    esp,0x14
c001ce85:	53                   	push   ebx
c001ce86:	e8 1f f6 fe ff       	call   c000c4aa <PhysicalDisk::startCache()>
c001ce8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce8e:	e8 63 08 ff ff       	call   c000d6f6 <createPartitionsForDisk(PhysicalDisk*)>
c001ce93:	83 c4 14             	add    esp,0x14
c001ce96:	31 c0                	xor    eax,eax
c001ce98:	5b                   	pop    ebx
c001ce99:	5e                   	pop    esi
c001ce9a:	c3                   	ret    
c001ce9b:	90                   	nop

c001ce9c <SATA::SATA()>:
c001ce9c:	83 ec 0c             	sub    esp,0xc
c001ce9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cea3:	83 ec 04             	sub    esp,0x4
c001cea6:	68 00 02 00 00       	push   0x200
c001ceab:	68 04 24 02 c0       	push   0xc0022404
c001ceb0:	50                   	push   eax
c001ceb1:	e8 8c f5 fe ff       	call   c000c442 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ceb6:	83 c4 10             	add    esp,0x10
c001ceb9:	ba 74 24 02 c0       	mov    edx,0xc0022474
c001cebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cec2:	89 10                	mov    DWORD PTR [eax],edx
c001cec4:	90                   	nop
c001cec5:	83 c4 0c             	add    esp,0xc
c001cec8:	c3                   	ret    
c001cec9:	90                   	nop

c001ceca <SATA::access(unsigned long long, int, void*, bool)>:
c001ceca:	55                   	push   ebp
c001cecb:	57                   	push   edi
c001cecc:	56                   	push   esi
c001cecd:	53                   	push   ebx
c001cece:	83 ec 2c             	sub    esp,0x2c
c001ced1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ced5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ceda:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cede:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cee2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cee6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ceea:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ceee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cef2:	7e 10                	jle    c001cf04 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001cef4:	83 ec 0c             	sub    esp,0xc
c001cef7:	68 14 24 02 c0       	push   0xc0022414
c001cefc:	e8 3c 3c ff ff       	call   c0010b3d <KePanic(char const*)>
c001cf01:	83 c4 10             	add    esp,0x10
c001cf04:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cf0a:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001cf10:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001cf16:	89 e8                	mov    eax,ebp
c001cf18:	c1 e0 07             	shl    eax,0x7
c001cf1b:	01 d0                	add    eax,edx
c001cf1d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cf27:	8d 45 02             	lea    eax,[ebp+0x2]
c001cf2a:	51                   	push   ecx
c001cf2b:	c1 e0 07             	shl    eax,0x7
c001cf2e:	51                   	push   ecx
c001cf2f:	01 d0                	add    eax,edx
c001cf31:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cf35:	50                   	push   eax
c001cf36:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cf3c:	e8 6b ec ff ff       	call   c001bbac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cf41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf45:	83 c4 10             	add    esp,0x10
c001cf48:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001cf4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cf51:	0f 84 5b 01 00 00    	je     c001d0b2 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cf57:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cf5b:	c1 e0 09             	shl    eax,0x9
c001cf5e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cf63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf67:	74 0e                	je     c001cf77 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001cf69:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cf6f:	89 c1                	mov    ecx,eax
c001cf71:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cf75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cf77:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cf7b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cf81:	8d 45 02             	lea    eax,[ebp+0x2]
c001cf84:	c1 e0 07             	shl    eax,0x7
c001cf87:	01 d0                	add    eax,edx
c001cf89:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf8b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cf91:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cf97:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf9b:	c1 e1 05             	shl    ecx,0x5
c001cf9e:	01 c8                	add    eax,ecx
c001cfa0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cfa4:	83 e1 01             	and    ecx,0x1
c001cfa7:	89 ce                	mov    esi,ecx
c001cfa9:	8a 08                	mov    cl,BYTE PTR [eax]
c001cfab:	c1 e6 06             	shl    esi,0x6
c001cfae:	83 e1 bf             	and    ecx,0xffffffbf
c001cfb1:	09 f1                	or     ecx,esi
c001cfb3:	88 08                	mov    BYTE PTR [eax],cl
c001cfb5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cfb7:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cfbd:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cfc3:	89 08                	mov    DWORD PTR [eax],ecx
c001cfc5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cfcb:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cfd1:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cfd7:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cfda:	50                   	push   eax
c001cfdb:	68 90 00 00 00       	push   0x90
c001cfe0:	6a 00                	push   0x0
c001cfe2:	56                   	push   esi
c001cfe3:	e8 08 35 fe ff       	call   c00004f0 <memset>
c001cfe8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cfee:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cff8:	83 c4 10             	add    esp,0x10
c001cffb:	48                   	dec    eax
c001cffc:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d001:	89 c1                	mov    ecx,eax
c001d003:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d009:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d00e:	09 c8                	or     eax,ecx
c001d010:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d016:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d01c:	83 c8 80             	or     eax,0xffffff80
c001d01f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d025:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d028:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d02c:	25 00 7f 00 00       	and    eax,0x7f00
c001d031:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d036:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d03b:	66 89 06             	mov    WORD PTR [esi],ax
c001d03e:	b0 35                	mov    al,0x35
c001d040:	75 02                	jne    c001d044 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d042:	b0 25                	mov    al,0x25
c001d044:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d047:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d04b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d04f:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d053:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d057:	c1 e8 10             	shr    eax,0x10
c001d05a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d05d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d061:	c1 e8 18             	shr    eax,0x18
c001d064:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d067:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d06b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d06e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d072:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d075:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d079:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d07d:	89 ee                	mov    esi,ebp
c001d07f:	31 c0                	xor    eax,eax
c001d081:	c1 e6 07             	shl    esi,0x7
c001d084:	01 d6                	add    esi,edx
c001d086:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d08c:	80 e1 88             	and    cl,0x88
c001d08f:	74 0a                	je     c001d09b <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d091:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d096:	74 0a                	je     c001d0a2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d098:	40                   	inc    eax
c001d099:	eb eb                	jmp    c001d086 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d09b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d0a0:	75 17                	jne    c001d0b9 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d0a2:	83 ec 0c             	sub    esp,0xc
c001d0a5:	68 4d 24 02 c0       	push   0xc002244d
c001d0aa:	e8 8d d8 fe ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001d0af:	83 c4 10             	add    esp,0x10
c001d0b2:	b8 01 00 00 00       	mov    eax,0x1
c001d0b7:	eb 5b                	jmp    c001d114 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d0b9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d0bd:	c1 e5 07             	shl    ebp,0x7
c001d0c0:	b8 01 00 00 00       	mov    eax,0x1
c001d0c5:	01 ea                	add    edx,ebp
c001d0c7:	d3 e0                	shl    eax,cl
c001d0c9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d0cf:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d0d5:	85 c8                	test   eax,ecx
c001d0d7:	74 16                	je     c001d0ef <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d0d9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d0df:	0f ba e1 1e          	bt     ecx,0x1e
c001d0e3:	73 ea                	jae    c001d0cf <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d0e5:	83 ec 0c             	sub    esp,0xc
c001d0e8:	68 5b 24 02 c0       	push   0xc002245b
c001d0ed:	eb bb                	jmp    c001d0aa <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d0ef:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d0f5:	0f ba e0 1e          	bt     eax,0x1e
c001d0f9:	72 b7                	jb     c001d0b2 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d0fb:	31 c0                	xor    eax,eax
c001d0fd:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d102:	75 10                	jne    c001d114 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d104:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d10a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d10e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d112:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d114:	83 c4 2c             	add    esp,0x2c
c001d117:	5b                   	pop    ebx
c001d118:	5e                   	pop    esi
c001d119:	5f                   	pop    edi
c001d11a:	5d                   	pop    ebp
c001d11b:	c3                   	ret    

c001d11c <SATA::read(unsigned long long, int, void*)>:
c001d11c:	55                   	push   ebp
c001d11d:	57                   	push   edi
c001d11e:	56                   	push   esi
c001d11f:	be 04 00 00 00       	mov    esi,0x4
c001d124:	53                   	push   ebx
c001d125:	83 ec 0c             	sub    esp,0xc
c001d128:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d12c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d130:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d134:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d138:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d13b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d141:	0f 87 1a 02 00 00    	ja     c001d361 <SATA::read(unsigned long long, int, void*)+0x245>
c001d147:	85 c9                	test   ecx,ecx
c001d149:	be 06 00 00 00       	mov    esi,0x6
c001d14e:	0f 84 0d 02 00 00    	je     c001d361 <SATA::read(unsigned long long, int, void*)+0x245>
c001d154:	56                   	push   esi
c001d155:	56                   	push   esi
c001d156:	6a 00                	push   0x0
c001d158:	51                   	push   ecx
c001d159:	53                   	push   ebx
c001d15a:	52                   	push   edx
c001d15b:	50                   	push   eax
c001d15c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d160:	e8 65 fd ff ff       	call   c001ceca <SATA::access(unsigned long long, int, void*, bool)>
c001d165:	83 c4 20             	add    esp,0x20
c001d168:	85 c0                	test   eax,eax
c001d16a:	89 c6                	mov    esi,eax
c001d16c:	0f 85 ea 01 00 00    	jne    c001d35c <SATA::read(unsigned long long, int, void*)+0x240>
c001d172:	50                   	push   eax
c001d173:	50                   	push   eax
c001d174:	6a 0f                	push   0xf
c001d176:	6a 00                	push   0x0
c001d178:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001d17e:	bb 0a 00 00 00       	mov    ebx,0xa
c001d183:	e8 7d f2 ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d188:	5a                   	pop    edx
c001d189:	59                   	pop    ecx
c001d18a:	b9 10 27 00 00       	mov    ecx,0x2710
c001d18f:	0f b6 c0             	movzx  eax,al
c001d192:	50                   	push   eax
c001d193:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d198:	99                   	cdq    
c001d199:	f7 f9                	idiv   ecx
c001d19b:	99                   	cdq    
c001d19c:	f7 fb                	idiv   ebx
c001d19e:	8d 42 30             	lea    eax,[edx+0x30]
c001d1a1:	0f b6 c0             	movzx  eax,al
c001d1a4:	50                   	push   eax
c001d1a5:	e8 4a f2 ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d1aa:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d1b0:	5f                   	pop    edi
c001d1b1:	5d                   	pop    ebp
c001d1b2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d1b7:	6a 0f                	push   0xf
c001d1b9:	6a 00                	push   0x0
c001d1bb:	e8 45 f2 ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d1c0:	5a                   	pop    edx
c001d1c1:	59                   	pop    ecx
c001d1c2:	0f b6 c0             	movzx  eax,al
c001d1c5:	50                   	push   eax
c001d1c6:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d1cb:	99                   	cdq    
c001d1cc:	f7 fd                	idiv   ebp
c001d1ce:	99                   	cdq    
c001d1cf:	f7 fb                	idiv   ebx
c001d1d1:	8d 42 30             	lea    eax,[edx+0x30]
c001d1d4:	0f b6 c0             	movzx  eax,al
c001d1d7:	50                   	push   eax
c001d1d8:	e8 17 f2 ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d1dd:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d1e3:	5f                   	pop    edi
c001d1e4:	bf 64 00 00 00       	mov    edi,0x64
c001d1e9:	58                   	pop    eax
c001d1ea:	6a 0f                	push   0xf
c001d1ec:	6a 00                	push   0x0
c001d1ee:	e8 12 f2 ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d1f3:	5a                   	pop    edx
c001d1f4:	59                   	pop    ecx
c001d1f5:	0f b6 c0             	movzx  eax,al
c001d1f8:	50                   	push   eax
c001d1f9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d1fe:	99                   	cdq    
c001d1ff:	f7 ff                	idiv   edi
c001d201:	99                   	cdq    
c001d202:	f7 fb                	idiv   ebx
c001d204:	8d 42 30             	lea    eax,[edx+0x30]
c001d207:	0f b6 c0             	movzx  eax,al
c001d20a:	50                   	push   eax
c001d20b:	e8 e4 f1 ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d210:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d216:	58                   	pop    eax
c001d217:	5a                   	pop    edx
c001d218:	6a 0f                	push   0xf
c001d21a:	6a 00                	push   0x0
c001d21c:	e8 e4 f1 ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d221:	59                   	pop    ecx
c001d222:	5a                   	pop    edx
c001d223:	0f b6 c0             	movzx  eax,al
c001d226:	50                   	push   eax
c001d227:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d22c:	99                   	cdq    
c001d22d:	f7 fb                	idiv   ebx
c001d22f:	99                   	cdq    
c001d230:	f7 fb                	idiv   ebx
c001d232:	8d 42 30             	lea    eax,[edx+0x30]
c001d235:	0f b6 c0             	movzx  eax,al
c001d238:	50                   	push   eax
c001d239:	e8 b6 f1 ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d23e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d244:	59                   	pop    ecx
c001d245:	58                   	pop    eax
c001d246:	6a 0f                	push   0xf
c001d248:	6a 00                	push   0x0
c001d24a:	e8 b6 f1 ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d24f:	5a                   	pop    edx
c001d250:	59                   	pop    ecx
c001d251:	0f b6 c0             	movzx  eax,al
c001d254:	50                   	push   eax
c001d255:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d25a:	99                   	cdq    
c001d25b:	f7 fb                	idiv   ebx
c001d25d:	83 c2 30             	add    edx,0x30
c001d260:	0f b6 d2             	movzx  edx,dl
c001d263:	52                   	push   edx
c001d264:	e8 8b f1 ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d269:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d26f:	58                   	pop    eax
c001d270:	5a                   	pop    edx
c001d271:	6a 0f                	push   0xf
c001d273:	6a 00                	push   0x0
c001d275:	e8 8b f1 ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d27a:	59                   	pop    ecx
c001d27b:	b9 10 27 00 00       	mov    ecx,0x2710
c001d280:	5a                   	pop    edx
c001d281:	0f b6 c0             	movzx  eax,al
c001d284:	50                   	push   eax
c001d285:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d28a:	99                   	cdq    
c001d28b:	f7 f9                	idiv   ecx
c001d28d:	99                   	cdq    
c001d28e:	f7 fb                	idiv   ebx
c001d290:	8d 42 30             	lea    eax,[edx+0x30]
c001d293:	0f b6 c0             	movzx  eax,al
c001d296:	50                   	push   eax
c001d297:	e8 58 f1 ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d29c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d2a2:	59                   	pop    ecx
c001d2a3:	58                   	pop    eax
c001d2a4:	6a 0f                	push   0xf
c001d2a6:	6a 00                	push   0x0
c001d2a8:	e8 58 f1 ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d2ad:	5a                   	pop    edx
c001d2ae:	59                   	pop    ecx
c001d2af:	0f b6 c0             	movzx  eax,al
c001d2b2:	50                   	push   eax
c001d2b3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d2b8:	99                   	cdq    
c001d2b9:	f7 fd                	idiv   ebp
c001d2bb:	99                   	cdq    
c001d2bc:	f7 fb                	idiv   ebx
c001d2be:	8d 42 30             	lea    eax,[edx+0x30]
c001d2c1:	0f b6 c0             	movzx  eax,al
c001d2c4:	50                   	push   eax
c001d2c5:	e8 2a f1 ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d2ca:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d2d0:	5d                   	pop    ebp
c001d2d1:	58                   	pop    eax
c001d2d2:	6a 0f                	push   0xf
c001d2d4:	6a 00                	push   0x0
c001d2d6:	e8 2a f1 ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d2db:	5a                   	pop    edx
c001d2dc:	59                   	pop    ecx
c001d2dd:	0f b6 c0             	movzx  eax,al
c001d2e0:	50                   	push   eax
c001d2e1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d2e6:	99                   	cdq    
c001d2e7:	f7 ff                	idiv   edi
c001d2e9:	99                   	cdq    
c001d2ea:	f7 fb                	idiv   ebx
c001d2ec:	8d 42 30             	lea    eax,[edx+0x30]
c001d2ef:	0f b6 c0             	movzx  eax,al
c001d2f2:	50                   	push   eax
c001d2f3:	e8 fc f0 ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d2f8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d2fe:	5f                   	pop    edi
c001d2ff:	5d                   	pop    ebp
c001d300:	6a 0f                	push   0xf
c001d302:	6a 00                	push   0x0
c001d304:	e8 fc f0 ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d309:	5a                   	pop    edx
c001d30a:	59                   	pop    ecx
c001d30b:	0f b6 c0             	movzx  eax,al
c001d30e:	50                   	push   eax
c001d30f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d314:	99                   	cdq    
c001d315:	f7 fb                	idiv   ebx
c001d317:	99                   	cdq    
c001d318:	f7 fb                	idiv   ebx
c001d31a:	8d 42 30             	lea    eax,[edx+0x30]
c001d31d:	0f b6 c0             	movzx  eax,al
c001d320:	50                   	push   eax
c001d321:	e8 ce f0 ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d326:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d32c:	5f                   	pop    edi
c001d32d:	5d                   	pop    ebp
c001d32e:	6a 0f                	push   0xf
c001d330:	6a 00                	push   0x0
c001d332:	e8 ce f0 ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d337:	5a                   	pop    edx
c001d338:	59                   	pop    ecx
c001d339:	0f b6 c0             	movzx  eax,al
c001d33c:	50                   	push   eax
c001d33d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d342:	99                   	cdq    
c001d343:	f7 fb                	idiv   ebx
c001d345:	83 c2 30             	add    edx,0x30
c001d348:	0f b6 d2             	movzx  edx,dl
c001d34b:	52                   	push   edx
c001d34c:	e8 a3 f0 ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d351:	83 c4 10             	add    esp,0x10
c001d354:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d35a:	eb 05                	jmp    c001d361 <SATA::read(unsigned long long, int, void*)+0x245>
c001d35c:	be 01 00 00 00       	mov    esi,0x1
c001d361:	83 c4 0c             	add    esp,0xc
c001d364:	89 f0                	mov    eax,esi
c001d366:	5b                   	pop    ebx
c001d367:	5e                   	pop    esi
c001d368:	5f                   	pop    edi
c001d369:	5d                   	pop    ebp
c001d36a:	c3                   	ret    
c001d36b:	90                   	nop

c001d36c <SATA::write(unsigned long long, int, void*)>:
c001d36c:	55                   	push   ebp
c001d36d:	57                   	push   edi
c001d36e:	56                   	push   esi
c001d36f:	53                   	push   ebx
c001d370:	83 ec 0c             	sub    esp,0xc
c001d373:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d377:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d37b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d37f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d383:	8d 70 ff             	lea    esi,[eax-0x1]
c001d386:	b8 04 00 00 00       	mov    eax,0x4
c001d38b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d391:	0f 87 2c 02 00 00    	ja     c001d5c3 <SATA::write(unsigned long long, int, void*)+0x257>
c001d397:	85 db                	test   ebx,ebx
c001d399:	b8 06 00 00 00       	mov    eax,0x6
c001d39e:	0f 84 1f 02 00 00    	je     c001d5c3 <SATA::write(unsigned long long, int, void*)+0x257>
c001d3a4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d3a8:	c1 e6 09             	shl    esi,0x9
c001d3ab:	01 de                	add    esi,ebx
c001d3ad:	50                   	push   eax
c001d3ae:	89 d7                	mov    edi,edx
c001d3b0:	50                   	push   eax
c001d3b1:	83 c7 01             	add    edi,0x1
c001d3b4:	6a 01                	push   0x1
c001d3b6:	89 cd                	mov    ebp,ecx
c001d3b8:	53                   	push   ebx
c001d3b9:	83 d5 00             	adc    ebp,0x0
c001d3bc:	6a 01                	push   0x1
c001d3be:	81 c3 00 02 00 00    	add    ebx,0x200
c001d3c4:	51                   	push   ecx
c001d3c5:	52                   	push   edx
c001d3c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d3ca:	e8 fb fa ff ff       	call   c001ceca <SATA::access(unsigned long long, int, void*, bool)>
c001d3cf:	83 c4 20             	add    esp,0x20
c001d3d2:	39 f3                	cmp    ebx,esi
c001d3d4:	89 fa                	mov    edx,edi
c001d3d6:	89 e9                	mov    ecx,ebp
c001d3d8:	75 d3                	jne    c001d3ad <SATA::write(unsigned long long, int, void*)+0x41>
c001d3da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d3de:	bd 10 27 00 00       	mov    ebp,0x2710
c001d3e3:	bb 0a 00 00 00       	mov    ebx,0xa
c001d3e8:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001d3ee:	50                   	push   eax
c001d3ef:	50                   	push   eax
c001d3f0:	6a 0f                	push   0xf
c001d3f2:	6a 00                	push   0x0
c001d3f4:	e8 0c f0 ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d3f9:	5a                   	pop    edx
c001d3fa:	59                   	pop    ecx
c001d3fb:	0f b6 c0             	movzx  eax,al
c001d3fe:	50                   	push   eax
c001d3ff:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d404:	99                   	cdq    
c001d405:	f7 fd                	idiv   ebp
c001d407:	99                   	cdq    
c001d408:	f7 fb                	idiv   ebx
c001d40a:	8d 42 30             	lea    eax,[edx+0x30]
c001d40d:	0f b6 c0             	movzx  eax,al
c001d410:	50                   	push   eax
c001d411:	e8 de ef ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d416:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d41c:	5e                   	pop    esi
c001d41d:	5f                   	pop    edi
c001d41e:	bf e8 03 00 00       	mov    edi,0x3e8
c001d423:	6a 0f                	push   0xf
c001d425:	6a 00                	push   0x0
c001d427:	e8 d9 ef ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d42c:	5a                   	pop    edx
c001d42d:	59                   	pop    ecx
c001d42e:	0f b6 c0             	movzx  eax,al
c001d431:	50                   	push   eax
c001d432:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d437:	99                   	cdq    
c001d438:	f7 ff                	idiv   edi
c001d43a:	99                   	cdq    
c001d43b:	f7 fb                	idiv   ebx
c001d43d:	8d 42 30             	lea    eax,[edx+0x30]
c001d440:	0f b6 c0             	movzx  eax,al
c001d443:	50                   	push   eax
c001d444:	e8 ab ef ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d449:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d44f:	5e                   	pop    esi
c001d450:	be 64 00 00 00       	mov    esi,0x64
c001d455:	58                   	pop    eax
c001d456:	6a 0f                	push   0xf
c001d458:	6a 00                	push   0x0
c001d45a:	e8 a6 ef ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d45f:	5a                   	pop    edx
c001d460:	59                   	pop    ecx
c001d461:	0f b6 c0             	movzx  eax,al
c001d464:	50                   	push   eax
c001d465:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d46a:	99                   	cdq    
c001d46b:	f7 fe                	idiv   esi
c001d46d:	99                   	cdq    
c001d46e:	f7 fb                	idiv   ebx
c001d470:	8d 42 30             	lea    eax,[edx+0x30]
c001d473:	0f b6 c0             	movzx  eax,al
c001d476:	50                   	push   eax
c001d477:	e8 78 ef ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d47c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d482:	58                   	pop    eax
c001d483:	5a                   	pop    edx
c001d484:	6a 0f                	push   0xf
c001d486:	6a 00                	push   0x0
c001d488:	e8 78 ef ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d48d:	59                   	pop    ecx
c001d48e:	5a                   	pop    edx
c001d48f:	0f b6 c0             	movzx  eax,al
c001d492:	50                   	push   eax
c001d493:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d498:	99                   	cdq    
c001d499:	f7 fb                	idiv   ebx
c001d49b:	99                   	cdq    
c001d49c:	f7 fb                	idiv   ebx
c001d49e:	8d 42 30             	lea    eax,[edx+0x30]
c001d4a1:	0f b6 c0             	movzx  eax,al
c001d4a4:	50                   	push   eax
c001d4a5:	e8 4a ef ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d4aa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d4b0:	59                   	pop    ecx
c001d4b1:	58                   	pop    eax
c001d4b2:	6a 0f                	push   0xf
c001d4b4:	6a 00                	push   0x0
c001d4b6:	e8 4a ef ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d4bb:	5a                   	pop    edx
c001d4bc:	59                   	pop    ecx
c001d4bd:	0f b6 c0             	movzx  eax,al
c001d4c0:	50                   	push   eax
c001d4c1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d4c6:	99                   	cdq    
c001d4c7:	f7 fb                	idiv   ebx
c001d4c9:	83 c2 30             	add    edx,0x30
c001d4cc:	0f b6 d2             	movzx  edx,dl
c001d4cf:	52                   	push   edx
c001d4d0:	e8 1f ef ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d4d5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d4db:	58                   	pop    eax
c001d4dc:	5a                   	pop    edx
c001d4dd:	6a 0f                	push   0xf
c001d4df:	6a 00                	push   0x0
c001d4e1:	e8 1f ef ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d4e6:	59                   	pop    ecx
c001d4e7:	5a                   	pop    edx
c001d4e8:	0f b6 c0             	movzx  eax,al
c001d4eb:	50                   	push   eax
c001d4ec:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d4f1:	99                   	cdq    
c001d4f2:	f7 fd                	idiv   ebp
c001d4f4:	99                   	cdq    
c001d4f5:	f7 fb                	idiv   ebx
c001d4f7:	8d 42 30             	lea    eax,[edx+0x30]
c001d4fa:	0f b6 c0             	movzx  eax,al
c001d4fd:	50                   	push   eax
c001d4fe:	e8 f1 ee ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d503:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d509:	59                   	pop    ecx
c001d50a:	5d                   	pop    ebp
c001d50b:	6a 0f                	push   0xf
c001d50d:	6a 00                	push   0x0
c001d50f:	e8 f1 ee ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d514:	5a                   	pop    edx
c001d515:	59                   	pop    ecx
c001d516:	0f b6 c0             	movzx  eax,al
c001d519:	50                   	push   eax
c001d51a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d51f:	99                   	cdq    
c001d520:	f7 ff                	idiv   edi
c001d522:	99                   	cdq    
c001d523:	f7 fb                	idiv   ebx
c001d525:	8d 42 30             	lea    eax,[edx+0x30]
c001d528:	0f b6 c0             	movzx  eax,al
c001d52b:	50                   	push   eax
c001d52c:	e8 c3 ee ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d531:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d537:	5f                   	pop    edi
c001d538:	5d                   	pop    ebp
c001d539:	6a 0f                	push   0xf
c001d53b:	6a 00                	push   0x0
c001d53d:	e8 c3 ee ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d542:	5a                   	pop    edx
c001d543:	59                   	pop    ecx
c001d544:	0f b6 c0             	movzx  eax,al
c001d547:	50                   	push   eax
c001d548:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d54d:	99                   	cdq    
c001d54e:	f7 fe                	idiv   esi
c001d550:	99                   	cdq    
c001d551:	f7 fb                	idiv   ebx
c001d553:	8d 42 30             	lea    eax,[edx+0x30]
c001d556:	0f b6 c0             	movzx  eax,al
c001d559:	50                   	push   eax
c001d55a:	e8 95 ee ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d55f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d565:	5e                   	pop    esi
c001d566:	5f                   	pop    edi
c001d567:	6a 0f                	push   0xf
c001d569:	6a 00                	push   0x0
c001d56b:	e8 95 ee ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d570:	5d                   	pop    ebp
c001d571:	5a                   	pop    edx
c001d572:	0f b6 c0             	movzx  eax,al
c001d575:	50                   	push   eax
c001d576:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d57b:	99                   	cdq    
c001d57c:	f7 fb                	idiv   ebx
c001d57e:	99                   	cdq    
c001d57f:	f7 fb                	idiv   ebx
c001d581:	8d 42 30             	lea    eax,[edx+0x30]
c001d584:	0f b6 c0             	movzx  eax,al
c001d587:	50                   	push   eax
c001d588:	e8 67 ee ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d58d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d593:	59                   	pop    ecx
c001d594:	5e                   	pop    esi
c001d595:	6a 0f                	push   0xf
c001d597:	6a 00                	push   0x0
c001d599:	e8 67 ee ff ff       	call   c001c405 <combineColours(unsigned char, unsigned char)>
c001d59e:	5f                   	pop    edi
c001d59f:	5d                   	pop    ebp
c001d5a0:	0f b6 c0             	movzx  eax,al
c001d5a3:	50                   	push   eax
c001d5a4:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d5a9:	99                   	cdq    
c001d5aa:	f7 fb                	idiv   ebx
c001d5ac:	83 c2 30             	add    edx,0x30
c001d5af:	0f b6 d2             	movzx  edx,dl
c001d5b2:	52                   	push   edx
c001d5b3:	e8 3c ee ff ff       	call   c001c3f4 <combineCharAndColour(char, unsigned char)>
c001d5b8:	83 c4 10             	add    esp,0x10
c001d5bb:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d5c1:	31 c0                	xor    eax,eax
c001d5c3:	83 c4 0c             	add    esp,0xc
c001d5c6:	5b                   	pop    ebx
c001d5c7:	5e                   	pop    esi
c001d5c8:	5f                   	pop    edi
c001d5c9:	5d                   	pop    ebp
c001d5ca:	c3                   	ret    
c001d5cb:	90                   	nop

c001d5cc <SATAPI::write(unsigned long long, int, void*)>:
c001d5cc:	b8 03 00 00 00       	mov    eax,0x3
c001d5d1:	c3                   	ret    

c001d5d2 <SATAPI::close(int, int, void*)>:
c001d5d2:	83 ec 0c             	sub    esp,0xc
c001d5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5d9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5df:	85 c0                	test   eax,eax
c001d5e1:	74 0c                	je     c001d5ef <SATAPI::close(int, int, void*)+0x1d>
c001d5e3:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5e5:	83 ec 0c             	sub    esp,0xc
c001d5e8:	50                   	push   eax
c001d5e9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5ec:	83 c4 10             	add    esp,0x10
c001d5ef:	31 c0                	xor    eax,eax
c001d5f1:	83 c4 0c             	add    esp,0xc
c001d5f4:	c3                   	ret    
c001d5f5:	90                   	nop

c001d5f6 <SATAPI::SATAPI()>:
c001d5f6:	83 ec 0c             	sub    esp,0xc
c001d5f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5fd:	83 ec 04             	sub    esp,0x4
c001d600:	68 00 08 00 00       	push   0x800
c001d605:	68 a4 24 02 c0       	push   0xc00224a4
c001d60a:	50                   	push   eax
c001d60b:	e8 32 ee fe ff       	call   c000c442 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d610:	83 c4 10             	add    esp,0x10
c001d613:	ba 98 25 02 c0       	mov    edx,0xc0022598
c001d618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d61c:	89 10                	mov    DWORD PTR [eax],edx
c001d61e:	90                   	nop
c001d61f:	83 c4 0c             	add    esp,0xc
c001d622:	c3                   	ret    
c001d623:	90                   	nop

c001d624 <SATAPI::diskRemoved()>:
c001d624:	c3                   	ret    
c001d625:	90                   	nop

c001d626 <SATAPI::diskInserted()>:
c001d626:	83 ec 18             	sub    esp,0x18
c001d629:	68 b0 24 02 c0       	push   0xc00224b0
c001d62e:	e8 09 d3 fe ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001d633:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d637:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d63e:	83 c4 1c             	add    esp,0x1c
c001d641:	c3                   	ret    

c001d642 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d642:	55                   	push   ebp
c001d643:	57                   	push   edi
c001d644:	56                   	push   esi
c001d645:	53                   	push   ebx
c001d646:	83 ec 34             	sub    esp,0x34
c001d649:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d64d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d651:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d655:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d659:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d65d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d663:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d669:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d66d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d677:	83 c0 02             	add    eax,0x2
c001d67a:	c1 e0 07             	shl    eax,0x7
c001d67d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d681:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d689:	c1 e0 07             	shl    eax,0x7
c001d68c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d690:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d694:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d69e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d6a2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d6a8:	e8 ff e4 ff ff       	call   c001bbac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d6ad:	83 c4 10             	add    esp,0x10
c001d6b0:	89 c2                	mov    edx,eax
c001d6b2:	b8 01 00 00 00       	mov    eax,0x1
c001d6b7:	83 fa ff             	cmp    edx,0xffffffff
c001d6ba:	0f 84 5f 02 00 00    	je     c001d91f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d6c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d6c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6c8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d6ce:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6d0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d6d6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d6dc:	89 d1                	mov    ecx,edx
c001d6de:	c1 e1 05             	shl    ecx,0x5
c001d6e1:	01 c8                	add    eax,ecx
c001d6e3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d6e5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d6eb:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d6f1:	89 08                	mov    DWORD PTR [eax],ecx
c001d6f3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d6f9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d6ff:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d705:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d708:	50                   	push   eax
c001d709:	68 90 00 00 00       	push   0x90
c001d70e:	6a 00                	push   0x0
c001d710:	53                   	push   ebx
c001d711:	e8 da 2d fe ff       	call   c00004f0 <memset>
c001d716:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d719:	b9 0c 00 00 00       	mov    ecx,0xc
c001d71e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d722:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d724:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d72a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d72e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d732:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d738:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d73c:	48                   	dec    eax
c001d73d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d742:	89 c1                	mov    ecx,eax
c001d744:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d74a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d74f:	09 c8                	or     eax,ecx
c001d751:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d757:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d75d:	83 c8 80             	or     eax,0xffffff80
c001d760:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d766:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d769:	25 00 7f 00 00       	and    eax,0x7f00
c001d76e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d773:	66 89 03             	mov    WORD PTR [ebx],ax
c001d776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d77a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d77e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d782:	c1 e8 10             	shr    eax,0x10
c001d785:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d78c:	c1 e8 18             	shr    eax,0x18
c001d78f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d792:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d796:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d799:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d79d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d7a0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d7a4:	83 c4 10             	add    esp,0x10
c001d7a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7ab:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d7af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d7b3:	31 c0                	xor    eax,eax
c001d7b5:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d7bb:	80 e1 88             	and    cl,0x88
c001d7be:	74 0a                	je     c001d7ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001d7c0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d7c5:	74 0a                	je     c001d7d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001d7c7:	40                   	inc    eax
c001d7c8:	eb eb                	jmp    c001d7b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001d7ca:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d7cf:	75 43                	jne    c001d814 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001d7d1:	83 ec 0c             	sub    esp,0xc
c001d7d4:	68 c8 24 02 c0       	push   0xc00224c8
c001d7d9:	e8 5e d1 fe ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001d7de:	58                   	pop    eax
c001d7df:	5a                   	pop    edx
c001d7e0:	68 dd 24 02 c0       	push   0xc00224dd
c001d7e5:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d7eb:	e8 ae b2 fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c001d7f0:	59                   	pop    ecx
c001d7f1:	5b                   	pop    ebx
c001d7f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d7f6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d7fc:	e8 45 e4 ff ff       	call   c001bc46 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d801:	5e                   	pop    esi
c001d802:	5f                   	pop    edi
c001d803:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d807:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d80d:	e8 14 e4 ff ff       	call   c001bc26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d812:	eb 48                	jmp    c001d85c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001d814:	b8 01 00 00 00       	mov    eax,0x1
c001d819:	88 d1                	mov    cl,dl
c001d81b:	d3 e0                	shl    eax,cl
c001d81d:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001d822:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001d828:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d82c:	89 c7                	mov    edi,eax
c001d82e:	c1 e3 07             	shl    ebx,0x7
c001d831:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d835:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d83b:	85 c7                	test   edi,eax
c001d83d:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d843:	0f 84 a3 00 00 00    	je     c001d8ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001d849:	0f ba e0 1e          	bt     eax,0x1e
c001d84d:	73 1a                	jae    c001d869 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001d84f:	83 ec 0c             	sub    esp,0xc
c001d852:	68 ef 24 02 c0       	push   0xc00224ef
c001d857:	e8 e0 d0 fe ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001d85c:	83 c4 10             	add    esp,0x10
c001d85f:	b8 01 00 00 00       	mov    eax,0x1
c001d864:	e9 b6 00 00 00       	jmp    c001d91f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d869:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001d86f:	83 f8 0d             	cmp    eax,0xd
c001d872:	77 0a                	ja     c001d87e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001d874:	83 ec 0c             	sub    esp,0xc
c001d877:	68 c8 00 00 00       	push   0xc8
c001d87c:	eb 28                	jmp    c001d8a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d87e:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001d884:	83 f8 0d             	cmp    eax,0xd
c001d887:	77 0a                	ja     c001d893 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001d889:	83 ec 0c             	sub    esp,0xc
c001d88c:	68 58 02 00 00       	push   0x258
c001d891:	eb 13                	jmp    c001d8a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d893:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001d899:	83 f8 06             	cmp    eax,0x6
c001d89c:	77 10                	ja     c001d8ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001d89e:	83 ec 0c             	sub    esp,0xc
c001d8a1:	68 dc 05 00 00       	push   0x5dc
c001d8a6:	e8 dd 7d ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001d8ab:	83 c4 10             	add    esp,0x10
c001d8ae:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d8b2:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d8b5:	75 06                	jne    c001d8bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001d8b7:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d8bb:	74 15                	je     c001d8d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d8bd:	83 fe 06             	cmp    esi,0x6
c001d8c0:	77 10                	ja     c001d8d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d8c2:	83 ec 0c             	sub    esp,0xc
c001d8c5:	68 c4 09 00 00       	push   0x9c4
c001d8ca:	e8 b9 7d ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001d8cf:	83 c4 10             	add    esp,0x10
c001d8d2:	46                   	inc    esi
c001d8d3:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001d8d9:	0f 85 56 ff ff ff    	jne    c001d835 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001d8df:	83 ec 0c             	sub    esp,0xc
c001d8e2:	68 02 25 02 c0       	push   0xc0022502
c001d8e7:	e9 6b ff ff ff       	jmp    c001d857 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d8ec:	0f ba e0 1e          	bt     eax,0x1e
c001d8f0:	73 0d                	jae    c001d8ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001d8f2:	83 ec 0c             	sub    esp,0xc
c001d8f5:	68 16 25 02 c0       	push   0xc0022516
c001d8fa:	e9 58 ff ff ff       	jmp    c001d857 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d8ff:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d904:	74 17                	je     c001d91d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d906:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d90b:	74 10                	je     c001d91d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d90d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d913:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d917:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d91b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d91d:	31 c0                	xor    eax,eax
c001d91f:	83 c4 2c             	add    esp,0x2c
c001d922:	5b                   	pop    ebx
c001d923:	5e                   	pop    esi
c001d924:	5f                   	pop    edi
c001d925:	5d                   	pop    ebp
c001d926:	c3                   	ret    
c001d927:	90                   	nop

c001d928 <SATAPI::eject()>:
c001d928:	57                   	push   edi
c001d929:	b9 03 00 00 00       	mov    ecx,0x3
c001d92e:	83 ec 18             	sub    esp,0x18
c001d931:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d935:	fc                   	cld    
c001d936:	31 c0                	xor    eax,eax
c001d938:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d93a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d93f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d944:	50                   	push   eax
c001d945:	6a 00                	push   0x0
c001d947:	6a 00                	push   0x0
c001d949:	6a 00                	push   0x0
c001d94b:	6a 00                	push   0x0
c001d94d:	6a 02                	push   0x2
c001d94f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d953:	50                   	push   eax
c001d954:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d958:	e8 e5 fc ff ff       	call   c001d642 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d95d:	83 c4 38             	add    esp,0x38
c001d960:	31 c0                	xor    eax,eax
c001d962:	5f                   	pop    edi
c001d963:	c3                   	ret    

c001d964 <SATAPI::detectMedia()>:
c001d964:	53                   	push   ebx
c001d965:	83 ec 14             	sub    esp,0x14
c001d968:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d96c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d972:	e8 51 04 ff ff       	call   c000ddc8 <VCache::writeWriteBuffer()>
c001d977:	59                   	pop    ecx
c001d978:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d97e:	e8 35 04 ff ff       	call   c000ddb8 <VCache::invalidateReadBuffer()>
c001d983:	c7 04 24 2b 25 02 c0 	mov    DWORD PTR [esp],0xc002252b
c001d98a:	e8 ad cf fe ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001d98f:	83 c4 10             	add    esp,0x10
c001d992:	31 c0                	xor    eax,eax
c001d994:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d99b:	85 d2                	test   edx,edx
c001d99d:	74 0f                	je     c001d9ae <SATAPI::detectMedia()+0x4a>
c001d99f:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d9a5:	75 07                	jne    c001d9ae <SATAPI::detectMedia()+0x4a>
c001d9a7:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d9ae:	40                   	inc    eax
c001d9af:	83 f8 1a             	cmp    eax,0x1a
c001d9b2:	75 e0                	jne    c001d994 <SATAPI::detectMedia()+0x30>
c001d9b4:	83 c4 08             	add    esp,0x8
c001d9b7:	5b                   	pop    ebx
c001d9b8:	c3                   	ret    
c001d9b9:	90                   	nop

c001d9ba <SATAPI::open(int, int, void*)>:
c001d9ba:	56                   	push   esi
c001d9bb:	53                   	push   ebx
c001d9bc:	51                   	push   ecx
c001d9bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9c5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d9cf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d9d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9d9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d9e3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d9ed:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d9f4:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d9fa:	e8 d6 a3 fe ff       	call   c0007dd5 <Phys::allocatePage()>
c001d9ff:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001da05:	89 c6                	mov    esi,eax
c001da07:	e8 c9 a3 fe ff       	call   c0007dd5 <Phys::allocatePage()>
c001da0c:	81 c6 00 10 00 00    	add    esi,0x1000
c001da12:	39 c6                	cmp    esi,eax
c001da14:	74 10                	je     c001da26 <SATAPI::open(int, int, void*)+0x6c>
c001da16:	83 ec 0c             	sub    esp,0xc
c001da19:	68 40 25 02 c0       	push   0xc0022540
c001da1e:	e8 1a 31 ff ff       	call   c0010b3d <KePanic(char const*)>
c001da23:	83 c4 10             	add    esp,0x10
c001da26:	83 ec 0c             	sub    esp,0xc
c001da29:	6a 02                	push   0x2
c001da2b:	e8 b9 bb fe ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c001da30:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001da36:	6a 03                	push   0x3
c001da38:	50                   	push   eax
c001da39:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001da3f:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001da45:	e8 a6 c2 fe ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001da4a:	83 c4 14             	add    esp,0x14
c001da4d:	68 78 01 00 00       	push   0x178
c001da52:	e8 74 a0 fe ff       	call   c0007acb <malloc>
c001da57:	83 c4 0c             	add    esp,0xc
c001da5a:	6a 00                	push   0x0
c001da5c:	68 ff ff ff 7f       	push   0x7fffffff
c001da61:	6a 00                	push   0x0
c001da63:	6a 00                	push   0x0
c001da65:	53                   	push   ebx
c001da66:	68 56 25 02 c0       	push   0xc0022556
c001da6b:	89 c6                	mov    esi,eax
c001da6d:	50                   	push   eax
c001da6e:	e8 af f7 fe ff       	call   c000d222 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da73:	83 c4 14             	add    esp,0x14
c001da76:	56                   	push   esi
c001da77:	e8 66 f8 fe ff       	call   c000d2e2 <LogicalDisk::assignDriveLetter()>
c001da7c:	5a                   	pop    edx
c001da7d:	59                   	pop    ecx
c001da7e:	0f be c0             	movsx  eax,al
c001da81:	50                   	push   eax
c001da82:	68 a8 23 02 c0       	push   0xc00223a8
c001da87:	e8 b0 ce fe ff       	call   c000a93c <Dbg::kprintf(char const*, ...)>
c001da8c:	58                   	pop    eax
c001da8d:	5a                   	pop    edx
c001da8e:	56                   	push   esi
c001da8f:	53                   	push   ebx
c001da90:	e8 df e5 fe ff       	call   c000c074 <Device::addChild(Device*)>
c001da95:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001da9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da9e:	e8 07 ea fe ff       	call   c000c4aa <PhysicalDisk::startCache()>
c001daa3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001daaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001daad:	e8 b2 fe ff ff       	call   c001d964 <SATAPI::detectMedia()>
c001dab2:	83 c4 14             	add    esp,0x14
c001dab5:	31 c0                	xor    eax,eax
c001dab7:	5b                   	pop    ebx
c001dab8:	5e                   	pop    esi
c001dab9:	c3                   	ret    

c001daba <SATAPI::read(unsigned long long, int, void*)>:
c001daba:	55                   	push   ebp
c001dabb:	57                   	push   edi
c001dabc:	56                   	push   esi
c001dabd:	53                   	push   ebx
c001dabe:	83 ec 3c             	sub    esp,0x3c
c001dac1:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001dac5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dac9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001dacd:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001dad1:	83 fd 04             	cmp    ebp,0x4
c001dad4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dad8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dadc:	7e 10                	jle    c001daee <SATAPI::read(unsigned long long, int, void*)+0x34>
c001dade:	83 ec 0c             	sub    esp,0xc
c001dae1:	68 64 25 02 c0       	push   0xc0022564
c001dae6:	e8 52 30 ff ff       	call   c0010b3d <KePanic(char const*)>
c001daeb:	83 c4 10             	add    esp,0x10
c001daee:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001daf4:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001dafa:	51                   	push   ecx
c001dafb:	50                   	push   eax
c001dafc:	83 c0 02             	add    eax,0x2
c001daff:	c1 e0 07             	shl    eax,0x7
c001db02:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001db08:	50                   	push   eax
c001db09:	52                   	push   edx
c001db0a:	e8 61 e1 ff ff       	call   c001bc70 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001db0f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001db13:	b9 03 00 00 00       	mov    ecx,0x3
c001db18:	fc                   	cld    
c001db19:	31 c0                	xor    eax,eax
c001db1b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db1d:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001db22:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001db27:	83 c4 0c             	add    esp,0xc
c001db2a:	6a 00                	push   0x0
c001db2c:	6a 00                	push   0x0
c001db2e:	6a 00                	push   0x0
c001db30:	6a 00                	push   0x0
c001db32:	6a 02                	push   0x2
c001db34:	8d 44 24 30          	lea    eax,[esp+0x30]
c001db38:	50                   	push   eax
c001db39:	53                   	push   ebx
c001db3a:	e8 03 fb ff ff       	call   c001d642 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001db3f:	83 c4 20             	add    esp,0x20
c001db42:	85 c0                	test   eax,eax
c001db44:	89 c6                	mov    esi,eax
c001db46:	75 46                	jne    c001db8e <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001db48:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001db4c:	b9 03 00 00 00       	mov    ecx,0x3
c001db51:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001db57:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001db5c:	0f c8                	bswap  eax
c001db5e:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001db62:	89 e8                	mov    eax,ebp
c001db64:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001db68:	50                   	push   eax
c001db69:	55                   	push   ebp
c001db6a:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001db6e:	c1 e5 0b             	shl    ebp,0xb
c001db71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db79:	55                   	push   ebp
c001db7a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001db7e:	50                   	push   eax
c001db7f:	53                   	push   ebx
c001db80:	e8 bd fa ff ff       	call   c001d642 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001db85:	83 c4 20             	add    esp,0x20
c001db88:	85 c0                	test   eax,eax
c001db8a:	89 c6                	mov    esi,eax
c001db8c:	74 0c                	je     c001db9a <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001db8e:	83 ec 0c             	sub    esp,0xc
c001db91:	53                   	push   ebx
c001db92:	e8 cd fd ff ff       	call   c001d964 <SATAPI::detectMedia()>
c001db97:	83 c4 10             	add    esp,0x10
c001db9a:	83 c4 3c             	add    esp,0x3c
c001db9d:	89 f0                	mov    eax,esi
c001db9f:	5b                   	pop    ebx
c001dba0:	5e                   	pop    esi
c001dba1:	5f                   	pop    edi
c001dba2:	5d                   	pop    ebp
c001dba3:	c3                   	ret    

c001dba4 <IOAPIC::close(int, int, void*)>:
c001dba4:	b8 00 00 00 00       	mov    eax,0x0
c001dba9:	c3                   	ret    

c001dbaa <apicGetBase()>:
c001dbaa:	55                   	push   ebp
c001dbab:	89 e5                	mov    ebp,esp
c001dbad:	83 ec 18             	sub    esp,0x18
c001dbb0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001dbb5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dbbb:	83 e0 08             	and    eax,0x8
c001dbbe:	0f b6 c0             	movzx  eax,al
c001dbc1:	85 c0                	test   eax,eax
c001dbc3:	75 07                	jne    c001dbcc <apicGetBase()+0x22>
c001dbc5:	b8 00 00 00 00       	mov    eax,0x0
c001dbca:	eb 21                	jmp    c001dbed <apicGetBase()+0x43>
c001dbcc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001dbd1:	83 ec 08             	sub    esp,0x8
c001dbd4:	6a 1b                	push   0x1b
c001dbd6:	50                   	push   eax
c001dbd7:	e8 fe 94 fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001dbdc:	83 c4 10             	add    esp,0x10
c001dbdf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dbe2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001dbe5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dbe8:	25 00 00 ff ff       	and    eax,0xffff0000
c001dbed:	c9                   	leave  
c001dbee:	c3                   	ret    
c001dbef:	90                   	nop

c001dbf0 <IOAPIC::IOAPIC()>:
c001dbf0:	83 ec 0c             	sub    esp,0xc
c001dbf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf7:	83 ec 08             	sub    esp,0x8
c001dbfa:	68 c8 25 02 c0       	push   0xc00225c8
c001dbff:	50                   	push   eax
c001dc00:	e8 07 e6 fe ff       	call   c000c20c <Device::Device(char const*)>
c001dc05:	83 c4 10             	add    esp,0x10
c001dc08:	ba d8 25 02 c0       	mov    edx,0xc00225d8
c001dc0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc11:	89 10                	mov    DWORD PTR [eax],edx
c001dc13:	90                   	nop
c001dc14:	83 c4 0c             	add    esp,0xc
c001dc17:	c3                   	ret    

c001dc18 <apicOpen()>:
c001dc18:	55                   	push   ebp
c001dc19:	89 e5                	mov    ebp,esp
c001dc1b:	53                   	push   ebx
c001dc1c:	83 ec 34             	sub    esp,0x34
c001dc1f:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001dc24:	83 f0 01             	xor    eax,0x1
c001dc27:	0f b6 c0             	movzx  eax,al
c001dc2a:	85 c0                	test   eax,eax
c001dc2c:	0f 84 a3 00 00 00    	je     c001dcd5 <apicOpen()+0xbd>
c001dc32:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001dc36:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001dc3b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001dc3f:	0f b6 c0             	movzx  eax,al
c001dc42:	39 c2                	cmp    edx,eax
c001dc44:	0f 83 84 00 00 00    	jae    c001dcce <apicOpen()+0xb6>
c001dc4a:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001dc51:	83 ec 0c             	sub    esp,0xc
c001dc54:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001dc57:	e8 6f 9e fe ff       	call   c0007acb <malloc>
c001dc5c:	83 c4 10             	add    esp,0x10
c001dc5f:	89 c3                	mov    ebx,eax
c001dc61:	83 ec 0c             	sub    esp,0xc
c001dc64:	53                   	push   ebx
c001dc65:	e8 86 ff ff ff       	call   c001dbf0 <IOAPIC::IOAPIC()>
c001dc6a:	83 c4 10             	add    esp,0x10
c001dc6d:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001dc70:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001dc74:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dc77:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001dc7e:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001dc83:	83 c0 01             	add    eax,0x1
c001dc86:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001dc8b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001dc90:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001dc96:	83 ec 08             	sub    esp,0x8
c001dc99:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001dc9c:	50                   	push   eax
c001dc9d:	e8 d2 e3 fe ff       	call   c000c074 <Device::addChild(Device*)>
c001dca2:	83 c4 10             	add    esp,0x10
c001dca5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dca8:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcaa:	83 c0 08             	add    eax,0x8
c001dcad:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcaf:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001dcb3:	6a 00                	push   0x0
c001dcb5:	6a 00                	push   0x0
c001dcb7:	52                   	push   edx
c001dcb8:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001dcbb:	ff d0                	call   eax
c001dcbd:	83 c4 10             	add    esp,0x10
c001dcc0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001dcc3:	83 c0 01             	add    eax,0x1
c001dcc6:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001dcc9:	e9 68 ff ff ff       	jmp    c001dc36 <apicOpen()+0x1e>
c001dcce:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001dcd5:	e8 d0 fe ff ff       	call   c001dbaa <apicGetBase()>
c001dcda:	05 f0 00 00 00       	add    eax,0xf0
c001dcdf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dce2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001dce5:	8b 00                	mov    eax,DWORD PTR [eax]
c001dce7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001dcea:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001dcf1:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001dcf8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001dcfb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001dcfe:	89 10                	mov    DWORD PTR [eax],edx
c001dd00:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001dd07:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001dd0c:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001dd0f:	7d 7c                	jge    c001dd8d <apicOpen()+0x175>
c001dd11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd14:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001dd1b:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001dd1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd21:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001dd28:	c1 e8 08             	shr    eax,0x8
c001dd2b:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001dd2f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd32:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001dd39:	c1 e8 18             	shr    eax,0x18
c001dd3c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001dd3f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001dd43:	3d ff 00 00 00       	cmp    eax,0xff
c001dd48:	75 3a                	jne    c001dd84 <apicOpen()+0x16c>
c001dd4a:	e8 5b fe ff ff       	call   c001dbaa <apicGetBase()>
c001dd4f:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001dd53:	83 fa 01             	cmp    edx,0x1
c001dd56:	75 07                	jne    c001dd5f <apicOpen()+0x147>
c001dd58:	ba 60 03 00 00       	mov    edx,0x360
c001dd5d:	eb 05                	jmp    c001dd64 <apicOpen()+0x14c>
c001dd5f:	ba 50 03 00 00       	mov    edx,0x350
c001dd64:	01 d0                	add    eax,edx
c001dd66:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dd69:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dd6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd6e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001dd71:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001dd78:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001dd7c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dd7f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001dd82:	89 10                	mov    DWORD PTR [eax],edx
c001dd84:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001dd88:	e9 7a ff ff ff       	jmp    c001dd07 <apicOpen()+0xef>
c001dd8d:	90                   	nop
c001dd8e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dd91:	c9                   	leave  
c001dd92:	c3                   	ret    
c001dd93:	90                   	nop

c001dd94 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001dd94:	55                   	push   ebp
c001dd95:	89 e5                	mov    ebp,esp
c001dd97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dda0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001dda3:	72 1d                	jb     c001ddc2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001dda5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dda8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ddae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddb1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ddb7:	01 d0                	add    eax,edx
c001ddb9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ddbc:	73 04                	jae    c001ddc2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ddbe:	b0 01                	mov    al,0x1
c001ddc0:	eb 02                	jmp    c001ddc4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ddc2:	b0 00                	mov    al,0x0
c001ddc4:	5d                   	pop    ebp
c001ddc5:	c3                   	ret    

c001ddc6 <IOAPIC::read(int)>:
c001ddc6:	55                   	push   ebp
c001ddc7:	89 e5                	mov    ebp,esp
c001ddc9:	83 ec 10             	sub    esp,0x10
c001ddcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddcf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ddd5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ddd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dddb:	0f b6 d0             	movzx  edx,al
c001ddde:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dde1:	89 10                	mov    DWORD PTR [eax],edx
c001dde3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dde6:	83 c0 10             	add    eax,0x10
c001dde9:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddeb:	c9                   	leave  
c001ddec:	c3                   	ret    
c001dded:	90                   	nop

c001ddee <IOAPIC::open(int, int, void*)>:
c001ddee:	55                   	push   ebp
c001ddef:	89 e5                	mov    ebp,esp
c001ddf1:	57                   	push   edi
c001ddf2:	56                   	push   esi
c001ddf3:	53                   	push   ebx
c001ddf4:	83 ec 04             	sub    esp,0x4
c001ddf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddfa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ddfd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001de03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de06:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001de0c:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001de13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de16:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001de1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de1f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001de25:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001de2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de2f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001de35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de38:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001de3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de41:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001de47:	0f b6 f0             	movzx  esi,al
c001de4a:	89 d0                	mov    eax,edx
c001de4c:	ba 00 00 00 00       	mov    edx,0x0
c001de51:	89 c7                	mov    edi,eax
c001de53:	83 e7 ff             	and    edi,0xffffffff
c001de56:	89 f9                	mov    ecx,edi
c001de58:	0f b6 da             	movzx  ebx,dl
c001de5b:	89 c8                	mov    eax,ecx
c001de5d:	89 da                	mov    edx,ebx
c001de5f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001de62:	8d 5e 08             	lea    ebx,[esi+0x8]
c001de65:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001de69:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001de6d:	83 e0 00             	and    eax,0x0
c001de70:	09 d0                	or     eax,edx
c001de72:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001de76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de79:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001de7f:	8d 50 01             	lea    edx,[eax+0x1]
c001de82:	88 d1                	mov    cl,dl
c001de84:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001de87:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001de8d:	0f b6 d0             	movzx  edx,al
c001de90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de93:	83 c2 08             	add    edx,0x8
c001de96:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001de9a:	0f b6 c9             	movzx  ecx,cl
c001de9d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001dea3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001dea7:	6a 01                	push   0x1
c001dea9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001deac:	e8 15 ff ff ff       	call   c001ddc6 <IOAPIC::read(int)>
c001deb1:	83 c4 08             	add    esp,0x8
c001deb4:	c1 f8 10             	sar    eax,0x10
c001deb7:	0f b6 c0             	movzx  eax,al
c001deba:	8d 50 01             	lea    edx,[eax+0x1]
c001debd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dec0:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001dec6:	b8 00 00 00 00       	mov    eax,0x0
c001decb:	8d 65 f4             	lea    esp,[ebp-0xc]
c001dece:	5b                   	pop    ebx
c001decf:	5e                   	pop    esi
c001ded0:	5f                   	pop    edi
c001ded1:	5d                   	pop    ebp
c001ded2:	c3                   	ret    
c001ded3:	90                   	nop

c001ded4 <IOAPIC::write(int, int)>:
c001ded4:	55                   	push   ebp
c001ded5:	89 e5                	mov    ebp,esp
c001ded7:	83 ec 10             	sub    esp,0x10
c001deda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dedd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dee3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001dee6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dee9:	0f b6 d0             	movzx  edx,al
c001deec:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001deef:	89 10                	mov    DWORD PTR [eax],edx
c001def1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001def4:	8d 50 10             	lea    edx,[eax+0x10]
c001def7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001defa:	89 02                	mov    DWORD PTR [edx],eax
c001defc:	90                   	nop
c001defd:	c9                   	leave  
c001defe:	c3                   	ret    
c001deff:	90                   	nop

c001df00 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001df00:	55                   	push   ebp
c001df01:	89 e5                	mov    ebp,esp
c001df03:	53                   	push   ebx
c001df04:	83 ec 2c             	sub    esp,0x2c
c001df07:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001df0a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001df0d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001df10:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001df13:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001df16:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001df19:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001df1c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001df1f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001df22:	88 d8                	mov    al,bl
c001df24:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001df27:	88 c8                	mov    al,cl
c001df29:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001df2c:	88 d0                	mov    al,dl
c001df2e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001df31:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001df35:	83 c0 08             	add    eax,0x8
c001df38:	d1 e0                	shl    eax,1
c001df3a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001df3d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001df41:	83 c0 08             	add    eax,0x8
c001df44:	d1 e0                	shl    eax,1
c001df46:	83 c0 01             	add    eax,0x1
c001df49:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001df4c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001df4f:	50                   	push   eax
c001df50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df53:	e8 6e fe ff ff       	call   c001ddc6 <IOAPIC::read(int)>
c001df58:	83 c4 08             	add    esp,0x8
c001df5b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001df5e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001df65:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001df68:	c1 e0 18             	shl    eax,0x18
c001df6b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001df6e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001df71:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001df74:	52                   	push   edx
c001df75:	50                   	push   eax
c001df76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df79:	e8 56 ff ff ff       	call   c001ded4 <IOAPIC::write(int, int)>
c001df7e:	83 c4 0c             	add    esp,0xc
c001df81:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001df84:	50                   	push   eax
c001df85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df88:	e8 39 fe ff ff       	call   c001ddc6 <IOAPIC::read(int)>
c001df8d:	83 c4 08             	add    esp,0x8
c001df90:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001df93:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001df9a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dfa1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dfa8:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dfac:	85 c0                	test   eax,eax
c001dfae:	74 09                	je     c001dfb9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dfb0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dfb7:	eb 07                	jmp    c001dfc0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dfb9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dfc0:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dfc4:	85 c0                	test   eax,eax
c001dfc6:	74 09                	je     c001dfd1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dfc8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dfcf:	eb 07                	jmp    c001dfd8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dfd1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dfd8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dfdf:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dfe3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dfe6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dfe9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dfec:	52                   	push   edx
c001dfed:	50                   	push   eax
c001dfee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dff1:	e8 de fe ff ff       	call   c001ded4 <IOAPIC::write(int, int)>
c001dff6:	83 c4 0c             	add    esp,0xc
c001dff9:	90                   	nop
c001dffa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dffd:	c9                   	leave  
c001dffe:	c3                   	ret    
c001dfff:	90                   	nop

c001e000 <APICTimer::close(int, int, void*)>:
c001e000:	b8 00 00 00 00       	mov    eax,0x0
c001e005:	c3                   	ret    
c001e006:	66 90                	xchg   ax,ax

c001e008 <apicTimerHandler(regs*, void*)>:
c001e008:	83 ec 0c             	sub    esp,0xc
c001e00b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e00f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e011:	b8 10 27 00 00       	mov    eax,0x2710
c001e016:	ba 00 00 00 00       	mov    edx,0x0
c001e01b:	f7 f1                	div    ecx
c001e01d:	83 ec 0c             	sub    esp,0xc
c001e020:	50                   	push   eax
c001e021:	e8 ba fa fe ff       	call   c000dae0 <timerHandler(unsigned int)>
c001e026:	83 c4 10             	add    esp,0x10
c001e029:	90                   	nop
c001e02a:	83 c4 0c             	add    esp,0xc
c001e02d:	c3                   	ret    
c001e02e:	66 90                	xchg   ax,ax

c001e030 <APICTimer::open(int, int, void*)>:
c001e030:	83 ec 0c             	sub    esp,0xc
c001e033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e037:	8b 00                	mov    eax,DWORD PTR [eax]
c001e039:	83 c0 24             	add    eax,0x24
c001e03c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e03e:	83 ec 08             	sub    esp,0x8
c001e041:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e049:	ff d0                	call   eax
c001e04b:	83 c4 10             	add    esp,0x10
c001e04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e052:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e056:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e060:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e064:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e06a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e06e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e074:	83 ec 0c             	sub    esp,0xc
c001e077:	51                   	push   ecx
c001e078:	6a 01                	push   0x1
c001e07a:	68 08 e0 01 c0       	push   0xc001e008
c001e07f:	52                   	push   edx
c001e080:	50                   	push   eax
c001e081:	e8 9a df fe ff       	call   c000c020 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e086:	83 c4 20             	add    esp,0x20
c001e089:	89 c2                	mov    edx,eax
c001e08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e08f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e095:	b8 00 00 00 00       	mov    eax,0x0
c001e09a:	83 c4 0c             	add    esp,0xc
c001e09d:	c3                   	ret    
c001e09e:	66 90                	xchg   ax,ax

c001e0a0 <APICTimer::write(int)>:
c001e0a0:	83 ec 0c             	sub    esp,0xc
c001e0a3:	83 ec 0c             	sub    esp,0xc
c001e0a6:	68 fc 25 02 c0       	push   0xc00225fc
c001e0ab:	e8 8d 2a ff ff       	call   c0010b3d <KePanic(char const*)>
c001e0b0:	83 c4 10             	add    esp,0x10
c001e0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0bb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e0c1:	90                   	nop
c001e0c2:	83 c4 0c             	add    esp,0xc
c001e0c5:	c3                   	ret    
c001e0c6:	66 90                	xchg   ax,ax

c001e0c8 <APICTimer::APICTimer()>:
c001e0c8:	83 ec 0c             	sub    esp,0xc
c001e0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0cf:	83 ec 08             	sub    esp,0x8
c001e0d2:	68 0c 26 02 c0       	push   0xc002260c
c001e0d7:	50                   	push   eax
c001e0d8:	e8 37 f9 fe ff       	call   c000da14 <Timer::Timer(char const*)>
c001e0dd:	83 c4 10             	add    esp,0x10
c001e0e0:	ba 20 26 02 c0       	mov    edx,0xc0022620
c001e0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0e9:	89 10                	mov    DWORD PTR [eax],edx
c001e0eb:	90                   	nop
c001e0ec:	83 c4 0c             	add    esp,0xc
c001e0ef:	c3                   	ret    

c001e0f0 <PIT::write(int)>:
c001e0f0:	83 ec 10             	sub    esp,0x10
c001e0f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e0fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e101:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e105:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001e10a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e10f:	89 c2                	mov    edx,eax
c001e111:	c1 fa 1f             	sar    edx,0x1f
c001e114:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e118:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e11c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e123:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e128:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e12c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e131:	ee                   	out    dx,al
c001e132:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e136:	0f b6 c0             	movzx  eax,al
c001e139:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e140:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e144:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e148:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e14d:	ee                   	out    dx,al
c001e14e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e152:	c1 f8 08             	sar    eax,0x8
c001e155:	0f b6 c0             	movzx  eax,al
c001e158:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e15f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e163:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e167:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e16c:	ee                   	out    dx,al
c001e16d:	90                   	nop
c001e16e:	83 c4 10             	add    esp,0x10
c001e171:	c3                   	ret    
c001e172:	66 90                	xchg   ax,ax

c001e174 <pitHandler(regs*, void*)>:
c001e174:	83 ec 0c             	sub    esp,0xc
c001e177:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001e17d:	b8 10 27 00 00       	mov    eax,0x2710
c001e182:	89 c2                	mov    edx,eax
c001e184:	c1 fa 1f             	sar    edx,0x1f
c001e187:	f7 f9                	idiv   ecx
c001e189:	83 ec 0c             	sub    esp,0xc
c001e18c:	50                   	push   eax
c001e18d:	e8 4e f9 fe ff       	call   c000dae0 <timerHandler(unsigned int)>
c001e192:	83 c4 10             	add    esp,0x10
c001e195:	90                   	nop
c001e196:	83 c4 0c             	add    esp,0xc
c001e199:	c3                   	ret    
c001e19a:	66 90                	xchg   ax,ax

c001e19c <PIT::open(int, int, void*)>:
c001e19c:	83 ec 0c             	sub    esp,0xc
c001e19f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1a5:	83 c0 24             	add    eax,0x24
c001e1a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1aa:	83 ec 08             	sub    esp,0x8
c001e1ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1b5:	ff d0                	call   eax
c001e1b7:	83 c4 10             	add    esp,0x10
c001e1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1be:	83 ec 0c             	sub    esp,0xc
c001e1c1:	6a 00                	push   0x0
c001e1c3:	6a 01                	push   0x1
c001e1c5:	68 74 e1 01 c0       	push   0xc001e174
c001e1ca:	6a 00                	push   0x0
c001e1cc:	50                   	push   eax
c001e1cd:	e8 4e de fe ff       	call   c000c020 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e1d2:	83 c4 20             	add    esp,0x20
c001e1d5:	89 c2                	mov    edx,eax
c001e1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1db:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e1e1:	b8 00 00 00 00       	mov    eax,0x0
c001e1e6:	83 c4 0c             	add    esp,0xc
c001e1e9:	c3                   	ret    
c001e1ea:	66 90                	xchg   ax,ax

c001e1ec <PIT::close(int, int, void*)>:
c001e1ec:	83 ec 0c             	sub    esp,0xc
c001e1ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e1fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e201:	6a 01                	push   0x1
c001e203:	68 74 e1 01 c0       	push   0xc001e174
c001e208:	6a 00                	push   0x0
c001e20a:	50                   	push   eax
c001e20b:	e8 46 de fe ff       	call   c000c056 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e210:	83 c4 10             	add    esp,0x10
c001e213:	b8 00 00 00 00       	mov    eax,0x0
c001e218:	83 c4 0c             	add    esp,0xc
c001e21b:	c3                   	ret    

c001e21c <PIT::PIT()>:
c001e21c:	83 ec 0c             	sub    esp,0xc
c001e21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e223:	83 ec 08             	sub    esp,0x8
c001e226:	68 48 26 02 c0       	push   0xc0022648
c001e22b:	50                   	push   eax
c001e22c:	e8 e3 f7 fe ff       	call   c000da14 <Timer::Timer(char const*)>
c001e231:	83 c4 10             	add    esp,0x10
c001e234:	ba 70 26 02 c0       	mov    edx,0xc0022670
c001e239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e23d:	89 10                	mov    DWORD PTR [eax],edx
c001e23f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e243:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e249:	0f b6 d0             	movzx  edx,al
c001e24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e250:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e261:	0f b6 d0             	movzx  edx,al
c001e264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e268:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e26d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e271:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e277:	8d 50 01             	lea    edx,[eax+0x1]
c001e27a:	88 d1                	mov    cl,dl
c001e27c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e280:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e286:	0f b6 d0             	movzx  edx,al
c001e289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e28d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e291:	83 e1 3f             	and    ecx,0x3f
c001e294:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e298:	90                   	nop
c001e299:	83 c4 0c             	add    esp,0xc
c001e29c:	c3                   	ret    
c001e29d:	66 90                	xchg   ax,ax
c001e29f:	90                   	nop

c001e2a0 <avxDetect>:
c001e2a0:	b8 01 00 00 00       	mov    eax,0x1
c001e2a5:	0f a2                	cpuid  
c001e2a7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001e2ad:	74 15                	je     c001e2c4 <avxDetect.noAVX>
c001e2af:	b8 01 00 00 00       	mov    eax,0x1
c001e2b4:	0f a2                	cpuid  
c001e2b6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001e2bc:	74 06                	je     c001e2c4 <avxDetect.noAVX>
c001e2be:	b8 01 00 00 00       	mov    eax,0x1
c001e2c3:	c3                   	ret    

c001e2c4 <avxDetect.noAVX>:
c001e2c4:	b8 00 00 00 00       	mov    eax,0x0
c001e2c9:	c3                   	ret    

c001e2ca <avxSave>:
c001e2ca:	53                   	push   ebx
c001e2cb:	52                   	push   edx
c001e2cc:	31 c0                	xor    eax,eax
c001e2ce:	48                   	dec    eax
c001e2cf:	89 c2                	mov    edx,eax
c001e2d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e2d5:	0f ae 23             	xsave  [ebx]
c001e2d8:	5a                   	pop    edx
c001e2d9:	5b                   	pop    ebx
c001e2da:	c3                   	ret    

c001e2db <avxLoad>:
c001e2db:	53                   	push   ebx
c001e2dc:	52                   	push   edx
c001e2dd:	31 c0                	xor    eax,eax
c001e2df:	48                   	dec    eax
c001e2e0:	89 c2                	mov    edx,eax
c001e2e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e2e6:	0f ae 2b             	xrstor [ebx]
c001e2e9:	5a                   	pop    edx
c001e2ea:	5b                   	pop    ebx
c001e2eb:	c3                   	ret    

c001e2ec <avxInit>:
c001e2ec:	e8 67 03 00 00       	call   c001e658 <sseInit>
c001e2f1:	50                   	push   eax
c001e2f2:	51                   	push   ecx
c001e2f3:	0f 20 e0             	mov    eax,cr4
c001e2f6:	0d 00 00 04 00       	or     eax,0x40000
c001e2fb:	0f 22 e0             	mov    cr4,eax
c001e2fe:	31 c9                	xor    ecx,ecx
c001e300:	0f 01 d0             	xgetbv 
c001e303:	0d 07 00 00 00       	or     eax,0x7
c001e308:	0f 01 d1             	xsetbv 
c001e30b:	59                   	pop    ecx
c001e30c:	58                   	pop    eax
c001e30d:	c3                   	ret    

c001e30e <avxClose>:
c001e30e:	c3                   	ret    

c001e30f <wouldSheSayYes>:
c001e30f:	c3                   	ret    
c001e310:	49                   	dec    ecx
c001e311:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001e315:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001e319:	75 20                	jne    c001e33b <isr0+0xb>
c001e31b:	4e                   	dec    esi
c001e31c:	79 61                	jns    c001e37f <isr7+0x3>
c001e31e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001e323:	66 90                	xchg   ax,ax
c001e325:	66 90                	xchg   ax,ax
c001e327:	66 90                	xchg   ax,ax
c001e329:	66 90                	xchg   ax,ax
c001e32b:	66 90                	xchg   ax,ax
c001e32d:	66 90                	xchg   ax,ax
c001e32f:	90                   	nop

c001e330 <isr0>:
c001e330:	fa                   	cli    
c001e331:	68 00 00 00 00       	push   0x0
c001e336:	68 00 00 00 00       	push   0x0
c001e33b:	e9 56 01 00 00       	jmp    c001e496 <int_common_stub>

c001e340 <isr1>:
c001e340:	fa                   	cli    
c001e341:	6a 00                	push   0x0
c001e343:	6a 01                	push   0x1
c001e345:	e9 4c 01 00 00       	jmp    c001e496 <int_common_stub>

c001e34a <isr2>:
c001e34a:	fa                   	cli    
c001e34b:	6a 00                	push   0x0
c001e34d:	6a 02                	push   0x2
c001e34f:	e9 42 01 00 00       	jmp    c001e496 <int_common_stub>

c001e354 <isr3>:
c001e354:	fa                   	cli    
c001e355:	6a 00                	push   0x0
c001e357:	6a 03                	push   0x3
c001e359:	e9 38 01 00 00       	jmp    c001e496 <int_common_stub>

c001e35e <isr4>:
c001e35e:	fa                   	cli    
c001e35f:	6a 00                	push   0x0
c001e361:	6a 04                	push   0x4
c001e363:	e9 2e 01 00 00       	jmp    c001e496 <int_common_stub>

c001e368 <isr5>:
c001e368:	fa                   	cli    
c001e369:	6a 00                	push   0x0
c001e36b:	6a 05                	push   0x5
c001e36d:	e9 24 01 00 00       	jmp    c001e496 <int_common_stub>

c001e372 <isr6>:
c001e372:	fa                   	cli    
c001e373:	6a 00                	push   0x0
c001e375:	6a 06                	push   0x6
c001e377:	e9 1a 01 00 00       	jmp    c001e496 <int_common_stub>

c001e37c <isr7>:
c001e37c:	fa                   	cli    
c001e37d:	6a 00                	push   0x0
c001e37f:	6a 07                	push   0x7
c001e381:	e9 10 01 00 00       	jmp    c001e496 <int_common_stub>

c001e386 <isr8>:
c001e386:	fa                   	cli    
c001e387:	6a 08                	push   0x8
c001e389:	e9 08 01 00 00       	jmp    c001e496 <int_common_stub>

c001e38e <isr9>:
c001e38e:	fa                   	cli    
c001e38f:	6a 00                	push   0x0
c001e391:	6a 09                	push   0x9
c001e393:	e9 fe 00 00 00       	jmp    c001e496 <int_common_stub>

c001e398 <isr10>:
c001e398:	fa                   	cli    
c001e399:	6a 0a                	push   0xa
c001e39b:	e9 f6 00 00 00       	jmp    c001e496 <int_common_stub>

c001e3a0 <isr11>:
c001e3a0:	fa                   	cli    
c001e3a1:	6a 0b                	push   0xb
c001e3a3:	e9 ee 00 00 00       	jmp    c001e496 <int_common_stub>

c001e3a8 <isr12>:
c001e3a8:	fa                   	cli    
c001e3a9:	6a 0c                	push   0xc
c001e3ab:	e9 e6 00 00 00       	jmp    c001e496 <int_common_stub>

c001e3b0 <isr13>:
c001e3b0:	fa                   	cli    
c001e3b1:	6a 0d                	push   0xd
c001e3b3:	53                   	push   ebx
c001e3b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e3b8:	81 fb 86 e5 01 c0    	cmp    ebx,0xc001e586
c001e3be:	5b                   	pop    ebx
c001e3bf:	0f 84 c3 01 00 00    	je     c001e588 <finishSignal2>
c001e3c5:	e9 cc 00 00 00       	jmp    c001e496 <int_common_stub>

c001e3ca <isr14>:
c001e3ca:	fa                   	cli    
c001e3cb:	6a 0e                	push   0xe
c001e3cd:	e9 c4 00 00 00       	jmp    c001e496 <int_common_stub>

c001e3d2 <isr15>:
c001e3d2:	fa                   	cli    
c001e3d3:	6a 00                	push   0x0
c001e3d5:	6a 0f                	push   0xf
c001e3d7:	e9 ba 00 00 00       	jmp    c001e496 <int_common_stub>

c001e3dc <isr16>:
c001e3dc:	fa                   	cli    
c001e3dd:	6a 00                	push   0x0
c001e3df:	6a 10                	push   0x10
c001e3e1:	e9 b0 00 00 00       	jmp    c001e496 <int_common_stub>

c001e3e6 <isr17>:
c001e3e6:	fa                   	cli    
c001e3e7:	6a 00                	push   0x0
c001e3e9:	6a 11                	push   0x11
c001e3eb:	e9 a6 00 00 00       	jmp    c001e496 <int_common_stub>

c001e3f0 <isr18>:
c001e3f0:	fa                   	cli    
c001e3f1:	6a 00                	push   0x0
c001e3f3:	6a 12                	push   0x12
c001e3f5:	e9 9c 00 00 00       	jmp    c001e496 <int_common_stub>

c001e3fa <irq3>:
c001e3fa:	fa                   	cli    
c001e3fb:	6a 00                	push   0x0
c001e3fd:	6a 23                	push   0x23
c001e3ff:	e9 92 00 00 00       	jmp    c001e496 <int_common_stub>

c001e404 <irq4>:
c001e404:	fa                   	cli    
c001e405:	6a 00                	push   0x0
c001e407:	6a 24                	push   0x24
c001e409:	e9 88 00 00 00       	jmp    c001e496 <int_common_stub>

c001e40e <irq5>:
c001e40e:	fa                   	cli    
c001e40f:	6a 00                	push   0x0
c001e411:	6a 25                	push   0x25
c001e413:	e9 7e 00 00 00       	jmp    c001e496 <int_common_stub>

c001e418 <irq6>:
c001e418:	fa                   	cli    
c001e419:	6a 00                	push   0x0
c001e41b:	6a 26                	push   0x26
c001e41d:	e9 74 00 00 00       	jmp    c001e496 <int_common_stub>

c001e422 <irq7>:
c001e422:	fa                   	cli    
c001e423:	6a 00                	push   0x0
c001e425:	6a 27                	push   0x27
c001e427:	e9 6a 00 00 00       	jmp    c001e496 <int_common_stub>

c001e42c <irq8>:
c001e42c:	fa                   	cli    
c001e42d:	6a 00                	push   0x0
c001e42f:	6a 28                	push   0x28
c001e431:	e9 60 00 00 00       	jmp    c001e496 <int_common_stub>

c001e436 <irq9>:
c001e436:	fa                   	cli    
c001e437:	6a 00                	push   0x0
c001e439:	6a 29                	push   0x29
c001e43b:	e9 56 00 00 00       	jmp    c001e496 <int_common_stub>

c001e440 <irq10>:
c001e440:	fa                   	cli    
c001e441:	6a 00                	push   0x0
c001e443:	6a 2a                	push   0x2a
c001e445:	e9 4c 00 00 00       	jmp    c001e496 <int_common_stub>

c001e44a <irq11>:
c001e44a:	fa                   	cli    
c001e44b:	6a 00                	push   0x0
c001e44d:	6a 2b                	push   0x2b
c001e44f:	e9 42 00 00 00       	jmp    c001e496 <int_common_stub>

c001e454 <irq12>:
c001e454:	fa                   	cli    
c001e455:	6a 00                	push   0x0
c001e457:	6a 2c                	push   0x2c
c001e459:	e9 38 00 00 00       	jmp    c001e496 <int_common_stub>

c001e45e <irq13>:
c001e45e:	fa                   	cli    
c001e45f:	6a 00                	push   0x0
c001e461:	6a 2d                	push   0x2d
c001e463:	e9 2e 00 00 00       	jmp    c001e496 <int_common_stub>

c001e468 <irq14>:
c001e468:	fa                   	cli    
c001e469:	6a 00                	push   0x0
c001e46b:	6a 2e                	push   0x2e
c001e46d:	e9 24 00 00 00       	jmp    c001e496 <int_common_stub>

c001e472 <irq15>:
c001e472:	fa                   	cli    
c001e473:	6a 00                	push   0x0
c001e475:	6a 2f                	push   0x2f
c001e477:	e9 1a 00 00 00       	jmp    c001e496 <int_common_stub>

c001e47c <irq1>:
c001e47c:	fa                   	cli    
c001e47d:	6a 00                	push   0x0
c001e47f:	6a 21                	push   0x21
c001e481:	eb 13                	jmp    c001e496 <int_common_stub>

c001e483 <irq2>:
c001e483:	fa                   	cli    
c001e484:	6a 00                	push   0x0
c001e486:	6a 22                	push   0x22
c001e488:	eb 0c                	jmp    c001e496 <int_common_stub>

c001e48a <isr96>:
c001e48a:	6a 00                	push   0x0
c001e48c:	6a 60                	push   0x60
c001e48e:	fb                   	sti    
c001e48f:	eb 37                	jmp    c001e4c8 <syscall_common_stub>

c001e491 <irq0>:
c001e491:	fa                   	cli    
c001e492:	6a 00                	push   0x0
c001e494:	6a 20                	push   0x20

c001e496 <int_common_stub>:
c001e496:	60                   	pusha  
c001e497:	1e                   	push   ds
c001e498:	06                   	push   es
c001e499:	0f a0                	push   fs
c001e49b:	0f a8                	push   gs
c001e49d:	66 b8 10 00          	mov    ax,0x10
c001e4a1:	66 8e d8             	mov    ds,ax
c001e4a4:	66 8e c0             	mov    es,ax
c001e4a7:	66 8e e0             	mov    fs,ax
c001e4aa:	66 8e e8             	mov    gs,ax
c001e4ad:	54                   	push   esp
c001e4ae:	fc                   	cld    
c001e4af:	e8 6c e0 fe ff       	call   c000c520 <int_handler>
c001e4b4:	81 c4 04 00 00 00    	add    esp,0x4
c001e4ba:	0f a9                	pop    gs
c001e4bc:	0f a1                	pop    fs
c001e4be:	07                   	pop    es
c001e4bf:	1f                   	pop    ds
c001e4c0:	61                   	popa   
c001e4c1:	81 c4 08 00 00 00    	add    esp,0x8
c001e4c7:	cf                   	iret   

c001e4c8 <syscall_common_stub>:
c001e4c8:	60                   	pusha  
c001e4c9:	1e                   	push   ds
c001e4ca:	06                   	push   es
c001e4cb:	0f a0                	push   fs
c001e4cd:	0f a8                	push   gs
c001e4cf:	66 b8 10 00          	mov    ax,0x10
c001e4d3:	66 8e d8             	mov    ds,ax
c001e4d6:	66 8e c0             	mov    es,ax
c001e4d9:	66 8e e0             	mov    fs,ax
c001e4dc:	66 8e e8             	mov    gs,ax
c001e4df:	54                   	push   esp
c001e4e0:	fc                   	cld    
c001e4e1:	e8 3a e0 fe ff       	call   c000c520 <int_handler>
c001e4e6:	81 c4 04 00 00 00    	add    esp,0x4
c001e4ec:	0f a9                	pop    gs
c001e4ee:	0f a1                	pop    fs
c001e4f0:	07                   	pop    es
c001e4f1:	1f                   	pop    ds
c001e4f2:	e8 58 2c ff ff       	call   c001114f <KiCheckSignalZ>
c001e4f7:	3d 00 00 00 00       	cmp    eax,0x0
c001e4fc:	0f 84 c0 00 00 00    	je     c001e5c2 <skipSignals>
c001e502:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e507:	61                   	popa   
c001e508:	53                   	push   ebx
c001e509:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e50f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e512:	5b                   	pop    ebx
c001e513:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e518:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e51b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e51e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e521:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e524:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e527:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e52a:	81 c4 08 00 00 00    	add    esp,0x8
c001e530:	5e                   	pop    esi
c001e531:	5b                   	pop    ebx
c001e532:	59                   	pop    ecx
c001e533:	5a                   	pop    edx
c001e534:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e537:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e53a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e53d:	52                   	push   edx
c001e53e:	51                   	push   ecx
c001e53f:	53                   	push   ebx
c001e540:	56                   	push   esi
c001e541:	81 ec 08 00 00 00    	sub    esp,0x8
c001e547:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e54a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e54d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e550:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e553:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e556:	60                   	pusha  
c001e557:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e55d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e560:	89 e3                	mov    ebx,esp
c001e562:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e565:	52                   	push   edx
c001e566:	68 86 e5 01 c0       	push   0xc001e586
c001e56b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e56e:	89 dc                	mov    esp,ebx
c001e570:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e573:	68 23 00 00 00       	push   0x23
c001e578:	51                   	push   ecx
c001e579:	68 02 02 00 00       	push   0x202
c001e57e:	68 1b 00 00 00       	push   0x1b
c001e583:	ff 36                	push   DWORD PTR [esi]
c001e585:	cf                   	iret   

c001e586 <finishSignal>:
c001e586:	cd 0f                	int    0xf

c001e588 <finishSignal2>:
c001e588:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e58e:	e8 39 2c ff ff       	call   c00111cc <KiFinishSignalZ>
c001e593:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e599:	68 23 00 00 00       	push   0x23
c001e59e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e5a1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e5a4:	68 1b 00 00 00       	push   0x1b
c001e5a9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e5ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5af:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e5b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e5b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e5b8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e5bb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e5be:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e5c1:	cf                   	iret   

c001e5c2 <skipSignals>:
c001e5c2:	61                   	popa   
c001e5c3:	81 c4 08 00 00 00    	add    esp,0x8
c001e5c9:	cf                   	iret   
c001e5ca:	90                   	nop
c001e5cb:	90                   	nop

c001e5cc <irq16>:
c001e5cc:	fa                   	cli    
c001e5cd:	6a 00                	push   0x0
c001e5cf:	6a 30                	push   0x30
c001e5d1:	e9 c0 fe ff ff       	jmp    c001e496 <int_common_stub>

c001e5d6 <irq17>:
c001e5d6:	fa                   	cli    
c001e5d7:	6a 00                	push   0x0
c001e5d9:	6a 31                	push   0x31
c001e5db:	e9 b6 fe ff ff       	jmp    c001e496 <int_common_stub>

c001e5e0 <irq18>:
c001e5e0:	fa                   	cli    
c001e5e1:	6a 00                	push   0x0
c001e5e3:	6a 32                	push   0x32
c001e5e5:	e9 ac fe ff ff       	jmp    c001e496 <int_common_stub>

c001e5ea <irq19>:
c001e5ea:	fa                   	cli    
c001e5eb:	6a 00                	push   0x0
c001e5ed:	6a 33                	push   0x33
c001e5ef:	e9 a2 fe ff ff       	jmp    c001e496 <int_common_stub>

c001e5f4 <irq20>:
c001e5f4:	fa                   	cli    
c001e5f5:	6a 00                	push   0x0
c001e5f7:	6a 34                	push   0x34
c001e5f9:	e9 98 fe ff ff       	jmp    c001e496 <int_common_stub>

c001e5fe <irq21>:
c001e5fe:	fa                   	cli    
c001e5ff:	6a 00                	push   0x0
c001e601:	6a 35                	push   0x35
c001e603:	e9 8e fe ff ff       	jmp    c001e496 <int_common_stub>

c001e608 <irq22>:
c001e608:	fa                   	cli    
c001e609:	6a 00                	push   0x0
c001e60b:	6a 36                	push   0x36
c001e60d:	e9 84 fe ff ff       	jmp    c001e496 <int_common_stub>

c001e612 <irq23>:
c001e612:	fa                   	cli    
c001e613:	6a 00                	push   0x0
c001e615:	6a 37                	push   0x37
c001e617:	e9 7a fe ff ff       	jmp    c001e496 <int_common_stub>
c001e61c:	66 90                	xchg   ax,ax
c001e61e:	66 90                	xchg   ax,ax

c001e620 <i386GetRDRAND>:
c001e620:	b9 64 00 00 00       	mov    ecx,0x64

c001e625 <retry>:
c001e625:	0f c7 f0             	rdrand eax
c001e628:	72 05                	jb     c001e62f <retry.done>
c001e62a:	e2 f9                	loop   c001e625 <retry>

c001e62c <retry.fail>:
c001e62c:	31 c0                	xor    eax,eax
c001e62e:	c3                   	ret    

c001e62f <retry.done>:
c001e62f:	c3                   	ret    

c001e630 <absolutelyNoChanceInHell>:
c001e630:	b8 01 00 00 00       	mov    eax,0x1
c001e635:	0f a2                	cpuid  
c001e637:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e63d:	74 06                	je     c001e645 <sseDetect.noSSE>
c001e63f:	b8 01 00 00 00       	mov    eax,0x1
c001e644:	c3                   	ret    

c001e645 <sseDetect.noSSE>:
c001e645:	31 c0                	xor    eax,eax
c001e647:	c3                   	ret    

c001e648 <sseSave>:
c001e648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e64c:	0f ae 00             	fxsave [eax]
c001e64f:	c3                   	ret    

c001e650 <sseLoad>:
c001e650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e654:	0f ae 08             	fxrstor [eax]
c001e657:	c3                   	ret    

c001e658 <sseInit>:
c001e658:	e8 42 00 00 00       	call   c001e69f <x87Init>
c001e65d:	0f 20 e0             	mov    eax,cr4
c001e660:	66 0d 00 06          	or     ax,0x600
c001e664:	0f 22 e0             	mov    cr4,eax
c001e667:	c3                   	ret    

c001e668 <sseClose>:
c001e668:	c3                   	ret    
c001e669:	66 90                	xchg   ax,ax
c001e66b:	66 90                	xchg   ax,ax
c001e66d:	66 90                	xchg   ax,ax
c001e66f:	90                   	nop

c001e670 <value_37F>:
c001e670:	7f 03                	jg     c001e675 <value_37A+0x1>

c001e672 <value_37E>:
c001e672:	7e 03                	jle    c001e677 <x87Detect+0x1>

c001e674 <value_37A>:
c001e674:	7a 03                	jp     c001e679 <x87Detect+0x3>

c001e676 <x87Detect>:
c001e676:	b8 01 00 00 00       	mov    eax,0x1
c001e67b:	0f a2                	cpuid  
c001e67d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e683:	74 06                	je     c001e68b <x87Detect.nox87>
c001e685:	b8 01 00 00 00       	mov    eax,0x1
c001e68a:	c3                   	ret    

c001e68b <x87Detect.nox87>:
c001e68b:	b8 00 00 00 00       	mov    eax,0x0
c001e690:	c3                   	ret    

c001e691 <x87Save>:
c001e691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e695:	dd 30                	fnsave [eax]
c001e697:	c3                   	ret    

c001e698 <x87Load>:
c001e698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e69c:	dd 20                	frstor [eax]
c001e69e:	c3                   	ret    

c001e69f <x87Init>:
c001e69f:	0f 20 c0             	mov    eax,cr0
c001e6a2:	66 25 fb ff          	and    ax,0xfffb
c001e6a6:	66 0d 22 00          	or     ax,0x22
c001e6aa:	0f 22 c0             	mov    cr0,eax
c001e6ad:	db e3                	fninit 
c001e6af:	0f 06                	clts   
c001e6b1:	d9 2d 74 e6 01 c0    	fldcw  WORD PTR ds:0xc001e674
c001e6b7:	c3                   	ret    

c001e6b8 <x87Close>:
c001e6b8:	c3                   	ret    
c001e6b9:	66 90                	xchg   ax,ax
c001e6bb:	90                   	nop

c001e6bc <__do_global_ctors_aux>:
c001e6bc:	a1 70 f6 01 c0       	mov    eax,ds:0xc001f670
c001e6c1:	83 f8 ff             	cmp    eax,0xffffffff
c001e6c4:	74 1a                	je     c001e6e0 <__do_global_ctors_aux+0x24>
c001e6c6:	55                   	push   ebp
c001e6c7:	89 e5                	mov    ebp,esp
c001e6c9:	53                   	push   ebx
c001e6ca:	52                   	push   edx
c001e6cb:	bb 70 f6 01 c0       	mov    ebx,0xc001f670
c001e6d0:	ff d0                	call   eax
c001e6d2:	83 eb 04             	sub    ebx,0x4
c001e6d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e6d7:	83 f8 ff             	cmp    eax,0xffffffff
c001e6da:	75 f4                	jne    c001e6d0 <__do_global_ctors_aux+0x14>
c001e6dc:	58                   	pop    eax
c001e6dd:	5b                   	pop    ebx
c001e6de:	5d                   	pop    ebp
c001e6df:	c3                   	ret    
c001e6e0:	c3                   	ret    
c001e6e1:	66 90                	xchg   ax,ax
c001e6e3:	90                   	nop

c001e6e4 <__divdi3>:
c001e6e4:	55                   	push   ebp
c001e6e5:	57                   	push   edi
c001e6e6:	56                   	push   esi
c001e6e7:	53                   	push   ebx
c001e6e8:	83 ec 1c             	sub    esp,0x1c
c001e6eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e6ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e6f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e6f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e6fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e6fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e702:	85 db                	test   ebx,ebx
c001e704:	0f 88 8e 00 00 00    	js     c001e798 <__divdi3+0xb4>
c001e70a:	89 dd                	mov    ebp,ebx
c001e70c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e714:	89 d3                	mov    ebx,edx
c001e716:	85 d2                	test   edx,edx
c001e718:	79 0d                	jns    c001e727 <__divdi3+0x43>
c001e71a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e71e:	f7 d8                	neg    eax
c001e720:	83 d2 00             	adc    edx,0x0
c001e723:	f7 da                	neg    edx
c001e725:	89 d3                	mov    ebx,edx
c001e727:	89 c7                	mov    edi,eax
c001e729:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e72c:	85 db                	test   ebx,ebx
c001e72e:	75 48                	jne    c001e778 <__divdi3+0x94>
c001e730:	39 ef                	cmp    edi,ebp
c001e732:	76 24                	jbe    c001e758 <__divdi3+0x74>
c001e734:	89 ea                	mov    edx,ebp
c001e736:	f7 f7                	div    edi
c001e738:	89 c1                	mov    ecx,eax
c001e73a:	31 f6                	xor    esi,esi
c001e73c:	89 c8                	mov    eax,ecx
c001e73e:	89 f2                	mov    edx,esi
c001e740:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e744:	85 c9                	test   ecx,ecx
c001e746:	74 07                	je     c001e74f <__divdi3+0x6b>
c001e748:	f7 d8                	neg    eax
c001e74a:	83 d2 00             	adc    edx,0x0
c001e74d:	f7 da                	neg    edx
c001e74f:	83 c4 1c             	add    esp,0x1c
c001e752:	5b                   	pop    ebx
c001e753:	5e                   	pop    esi
c001e754:	5f                   	pop    edi
c001e755:	5d                   	pop    ebp
c001e756:	c3                   	ret    
c001e757:	90                   	nop
c001e758:	85 ff                	test   edi,edi
c001e75a:	75 0b                	jne    c001e767 <__divdi3+0x83>
c001e75c:	b8 01 00 00 00       	mov    eax,0x1
c001e761:	31 d2                	xor    edx,edx
c001e763:	f7 f3                	div    ebx
c001e765:	89 c7                	mov    edi,eax
c001e767:	31 d2                	xor    edx,edx
c001e769:	89 e8                	mov    eax,ebp
c001e76b:	f7 f7                	div    edi
c001e76d:	89 c6                	mov    esi,eax
c001e76f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e772:	f7 f7                	div    edi
c001e774:	89 c1                	mov    ecx,eax
c001e776:	eb c4                	jmp    c001e73c <__divdi3+0x58>
c001e778:	39 eb                	cmp    ebx,ebp
c001e77a:	77 3c                	ja     c001e7b8 <__divdi3+0xd4>
c001e77c:	0f bd f3             	bsr    esi,ebx
c001e77f:	83 f6 1f             	xor    esi,0x1f
c001e782:	75 40                	jne    c001e7c4 <__divdi3+0xe0>
c001e784:	39 eb                	cmp    ebx,ebp
c001e786:	72 09                	jb     c001e791 <__divdi3+0xad>
c001e788:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e78b:	0f 87 97 00 00 00    	ja     c001e828 <__divdi3+0x144>
c001e791:	b9 01 00 00 00       	mov    ecx,0x1
c001e796:	eb a4                	jmp    c001e73c <__divdi3+0x58>
c001e798:	f7 d9                	neg    ecx
c001e79a:	83 d3 00             	adc    ebx,0x0
c001e79d:	f7 db                	neg    ebx
c001e79f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e7a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e7a6:	89 dd                	mov    ebp,ebx
c001e7a8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e7b0:	e9 5f ff ff ff       	jmp    c001e714 <__divdi3+0x30>
c001e7b5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7b8:	31 f6                	xor    esi,esi
c001e7ba:	31 c9                	xor    ecx,ecx
c001e7bc:	e9 7b ff ff ff       	jmp    c001e73c <__divdi3+0x58>
c001e7c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e7c4:	b8 20 00 00 00       	mov    eax,0x20
c001e7c9:	29 f0                	sub    eax,esi
c001e7cb:	89 f1                	mov    ecx,esi
c001e7cd:	d3 e3                	shl    ebx,cl
c001e7cf:	89 fa                	mov    edx,edi
c001e7d1:	88 c1                	mov    cl,al
c001e7d3:	d3 ea                	shr    edx,cl
c001e7d5:	09 da                	or     edx,ebx
c001e7d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e7db:	89 f1                	mov    ecx,esi
c001e7dd:	d3 e7                	shl    edi,cl
c001e7df:	89 eb                	mov    ebx,ebp
c001e7e1:	88 c1                	mov    cl,al
c001e7e3:	d3 eb                	shr    ebx,cl
c001e7e5:	89 f1                	mov    ecx,esi
c001e7e7:	d3 e5                	shl    ebp,cl
c001e7e9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e7ec:	88 c1                	mov    cl,al
c001e7ee:	d3 ea                	shr    edx,cl
c001e7f0:	09 d5                	or     ebp,edx
c001e7f2:	89 e8                	mov    eax,ebp
c001e7f4:	89 da                	mov    edx,ebx
c001e7f6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e7fa:	89 d3                	mov    ebx,edx
c001e7fc:	89 c5                	mov    ebp,eax
c001e7fe:	f7 e7                	mul    edi
c001e800:	39 d3                	cmp    ebx,edx
c001e802:	72 18                	jb     c001e81c <__divdi3+0x138>
c001e804:	74 0a                	je     c001e810 <__divdi3+0x12c>
c001e806:	89 e9                	mov    ecx,ebp
c001e808:	31 f6                	xor    esi,esi
c001e80a:	e9 2d ff ff ff       	jmp    c001e73c <__divdi3+0x58>
c001e80f:	90                   	nop
c001e810:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e813:	89 f1                	mov    ecx,esi
c001e815:	d3 e7                	shl    edi,cl
c001e817:	39 c7                	cmp    edi,eax
c001e819:	73 eb                	jae    c001e806 <__divdi3+0x122>
c001e81b:	90                   	nop
c001e81c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e81f:	31 f6                	xor    esi,esi
c001e821:	e9 16 ff ff ff       	jmp    c001e73c <__divdi3+0x58>
c001e826:	66 90                	xchg   ax,ax
c001e828:	31 c9                	xor    ecx,ecx
c001e82a:	e9 0d ff ff ff       	jmp    c001e73c <__divdi3+0x58>
c001e82f:	90                   	nop

c001e830 <__moddi3>:
c001e830:	55                   	push   ebp
c001e831:	57                   	push   edi
c001e832:	56                   	push   esi
c001e833:	53                   	push   ebx
c001e834:	83 ec 2c             	sub    esp,0x2c
c001e837:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e83b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e83f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e843:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e847:	85 db                	test   ebx,ebx
c001e849:	0f 88 85 00 00 00    	js     c001e8d4 <__moddi3+0xa4>
c001e84f:	89 de                	mov    esi,ebx
c001e851:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e859:	89 d7                	mov    edi,edx
c001e85b:	85 d2                	test   edx,edx
c001e85d:	79 09                	jns    c001e868 <__moddi3+0x38>
c001e85f:	f7 d8                	neg    eax
c001e861:	83 d2 00             	adc    edx,0x0
c001e864:	f7 da                	neg    edx
c001e866:	89 d7                	mov    edi,edx
c001e868:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e86c:	89 cd                	mov    ebp,ecx
c001e86e:	85 ff                	test   edi,edi
c001e870:	75 52                	jne    c001e8c4 <__moddi3+0x94>
c001e872:	89 c3                	mov    ebx,eax
c001e874:	39 f0                	cmp    eax,esi
c001e876:	76 24                	jbe    c001e89c <__moddi3+0x6c>
c001e878:	89 c8                	mov    eax,ecx
c001e87a:	89 f2                	mov    edx,esi
c001e87c:	f7 f3                	div    ebx
c001e87e:	89 d6                	mov    esi,edx
c001e880:	89 f0                	mov    eax,esi
c001e882:	31 d2                	xor    edx,edx
c001e884:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e888:	85 c9                	test   ecx,ecx
c001e88a:	74 07                	je     c001e893 <__moddi3+0x63>
c001e88c:	f7 d8                	neg    eax
c001e88e:	83 d2 00             	adc    edx,0x0
c001e891:	f7 da                	neg    edx
c001e893:	83 c4 2c             	add    esp,0x2c
c001e896:	5b                   	pop    ebx
c001e897:	5e                   	pop    esi
c001e898:	5f                   	pop    edi
c001e899:	5d                   	pop    ebp
c001e89a:	c3                   	ret    
c001e89b:	90                   	nop
c001e89c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e8a0:	85 db                	test   ebx,ebx
c001e8a2:	75 0d                	jne    c001e8b1 <__moddi3+0x81>
c001e8a4:	b8 01 00 00 00       	mov    eax,0x1
c001e8a9:	31 d2                	xor    edx,edx
c001e8ab:	f7 f7                	div    edi
c001e8ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8b1:	89 f0                	mov    eax,esi
c001e8b3:	31 d2                	xor    edx,edx
c001e8b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e8b9:	f7 f7                	div    edi
c001e8bb:	89 e8                	mov    eax,ebp
c001e8bd:	f7 f7                	div    edi
c001e8bf:	89 d6                	mov    esi,edx
c001e8c1:	eb bd                	jmp    c001e880 <__moddi3+0x50>
c001e8c3:	90                   	nop
c001e8c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e8c8:	39 f7                	cmp    edi,esi
c001e8ca:	76 20                	jbe    c001e8ec <__moddi3+0xbc>
c001e8cc:	89 c8                	mov    eax,ecx
c001e8ce:	89 f2                	mov    edx,esi
c001e8d0:	eb b2                	jmp    c001e884 <__moddi3+0x54>
c001e8d2:	66 90                	xchg   ax,ax
c001e8d4:	f7 d9                	neg    ecx
c001e8d6:	83 d3 00             	adc    ebx,0x0
c001e8d9:	f7 db                	neg    ebx
c001e8db:	89 de                	mov    esi,ebx
c001e8dd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e8e5:	e9 6f ff ff ff       	jmp    c001e859 <__moddi3+0x29>
c001e8ea:	66 90                	xchg   ax,ax
c001e8ec:	0f bd c7             	bsr    eax,edi
c001e8ef:	83 f0 1f             	xor    eax,0x1f
c001e8f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e8f6:	75 24                	jne    c001e91c <__moddi3+0xec>
c001e8f8:	39 f7                	cmp    edi,esi
c001e8fa:	72 06                	jb     c001e902 <__moddi3+0xd2>
c001e8fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e900:	77 0c                	ja     c001e90e <__moddi3+0xde>
c001e902:	89 e9                	mov    ecx,ebp
c001e904:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e908:	19 fe                	sbb    esi,edi
c001e90a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e90e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e912:	89 f2                	mov    edx,esi
c001e914:	e9 6b ff ff ff       	jmp    c001e884 <__moddi3+0x54>
c001e919:	8d 76 00             	lea    esi,[esi+0x0]
c001e91c:	b8 20 00 00 00       	mov    eax,0x20
c001e921:	89 c2                	mov    edx,eax
c001e923:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e927:	29 da                	sub    edx,ebx
c001e929:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e92d:	88 d9                	mov    cl,bl
c001e92f:	d3 e7                	shl    edi,cl
c001e931:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e935:	88 d1                	mov    cl,dl
c001e937:	d3 e8                	shr    eax,cl
c001e939:	09 c7                	or     edi,eax
c001e93b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e93f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e943:	89 d8                	mov    eax,ebx
c001e945:	88 d9                	mov    cl,bl
c001e947:	d3 e7                	shl    edi,cl
c001e949:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e94d:	89 f3                	mov    ebx,esi
c001e94f:	88 d1                	mov    cl,dl
c001e951:	d3 eb                	shr    ebx,cl
c001e953:	89 c7                	mov    edi,eax
c001e955:	88 c1                	mov    cl,al
c001e957:	d3 e6                	shl    esi,cl
c001e959:	89 e8                	mov    eax,ebp
c001e95b:	88 d1                	mov    cl,dl
c001e95d:	d3 e8                	shr    eax,cl
c001e95f:	09 f0                	or     eax,esi
c001e961:	89 f9                	mov    ecx,edi
c001e963:	d3 e5                	shl    ebp,cl
c001e965:	89 da                	mov    edx,ebx
c001e967:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e96b:	89 d3                	mov    ebx,edx
c001e96d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e971:	89 c6                	mov    esi,eax
c001e973:	89 d1                	mov    ecx,edx
c001e975:	39 d3                	cmp    ebx,edx
c001e977:	72 27                	jb     c001e9a0 <__moddi3+0x170>
c001e979:	74 21                	je     c001e99c <__moddi3+0x16c>
c001e97b:	29 f5                	sub    ebp,esi
c001e97d:	19 cb                	sbb    ebx,ecx
c001e97f:	89 de                	mov    esi,ebx
c001e981:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e985:	d3 e6                	shl    esi,cl
c001e987:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e98b:	89 f9                	mov    ecx,edi
c001e98d:	d3 ed                	shr    ebp,cl
c001e98f:	09 ee                	or     esi,ebp
c001e991:	89 f0                	mov    eax,esi
c001e993:	d3 eb                	shr    ebx,cl
c001e995:	89 da                	mov    edx,ebx
c001e997:	e9 e8 fe ff ff       	jmp    c001e884 <__moddi3+0x54>
c001e99c:	39 c5                	cmp    ebp,eax
c001e99e:	73 db                	jae    c001e97b <__moddi3+0x14b>
c001e9a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e9a4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e9a8:	89 d1                	mov    ecx,edx
c001e9aa:	89 c6                	mov    esi,eax
c001e9ac:	eb cd                	jmp    c001e97b <__moddi3+0x14b>
c001e9ae:	66 90                	xchg   ax,ax

c001e9b0 <__udivdi3>:
c001e9b0:	55                   	push   ebp
c001e9b1:	57                   	push   edi
c001e9b2:	56                   	push   esi
c001e9b3:	53                   	push   ebx
c001e9b4:	83 ec 1c             	sub    esp,0x1c
c001e9b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e9bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e9bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e9c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e9c7:	85 d2                	test   edx,edx
c001e9c9:	75 41                	jne    c001ea0c <__udivdi3+0x5c>
c001e9cb:	39 f7                	cmp    edi,esi
c001e9cd:	76 15                	jbe    c001e9e4 <__udivdi3+0x34>
c001e9cf:	89 e8                	mov    eax,ebp
c001e9d1:	89 f2                	mov    edx,esi
c001e9d3:	f7 f7                	div    edi
c001e9d5:	31 db                	xor    ebx,ebx
c001e9d7:	89 da                	mov    edx,ebx
c001e9d9:	83 c4 1c             	add    esp,0x1c
c001e9dc:	5b                   	pop    ebx
c001e9dd:	5e                   	pop    esi
c001e9de:	5f                   	pop    edi
c001e9df:	5d                   	pop    ebp
c001e9e0:	c3                   	ret    
c001e9e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e9e4:	89 f9                	mov    ecx,edi
c001e9e6:	85 ff                	test   edi,edi
c001e9e8:	75 0b                	jne    c001e9f5 <__udivdi3+0x45>
c001e9ea:	b8 01 00 00 00       	mov    eax,0x1
c001e9ef:	31 d2                	xor    edx,edx
c001e9f1:	f7 f7                	div    edi
c001e9f3:	89 c1                	mov    ecx,eax
c001e9f5:	31 d2                	xor    edx,edx
c001e9f7:	89 f0                	mov    eax,esi
c001e9f9:	f7 f1                	div    ecx
c001e9fb:	89 c3                	mov    ebx,eax
c001e9fd:	89 e8                	mov    eax,ebp
c001e9ff:	f7 f1                	div    ecx
c001ea01:	89 da                	mov    edx,ebx
c001ea03:	83 c4 1c             	add    esp,0x1c
c001ea06:	5b                   	pop    ebx
c001ea07:	5e                   	pop    esi
c001ea08:	5f                   	pop    edi
c001ea09:	5d                   	pop    ebp
c001ea0a:	c3                   	ret    
c001ea0b:	90                   	nop
c001ea0c:	39 f2                	cmp    edx,esi
c001ea0e:	77 1c                	ja     c001ea2c <__udivdi3+0x7c>
c001ea10:	0f bd da             	bsr    ebx,edx
c001ea13:	83 f3 1f             	xor    ebx,0x1f
c001ea16:	75 24                	jne    c001ea3c <__udivdi3+0x8c>
c001ea18:	39 f2                	cmp    edx,esi
c001ea1a:	72 08                	jb     c001ea24 <__udivdi3+0x74>
c001ea1c:	39 ef                	cmp    edi,ebp
c001ea1e:	0f 87 84 00 00 00    	ja     c001eaa8 <__udivdi3+0xf8>
c001ea24:	b8 01 00 00 00       	mov    eax,0x1
c001ea29:	eb ac                	jmp    c001e9d7 <__udivdi3+0x27>
c001ea2b:	90                   	nop
c001ea2c:	31 db                	xor    ebx,ebx
c001ea2e:	31 c0                	xor    eax,eax
c001ea30:	89 da                	mov    edx,ebx
c001ea32:	83 c4 1c             	add    esp,0x1c
c001ea35:	5b                   	pop    ebx
c001ea36:	5e                   	pop    esi
c001ea37:	5f                   	pop    edi
c001ea38:	5d                   	pop    ebp
c001ea39:	c3                   	ret    
c001ea3a:	66 90                	xchg   ax,ax
c001ea3c:	b8 20 00 00 00       	mov    eax,0x20
c001ea41:	29 d8                	sub    eax,ebx
c001ea43:	88 d9                	mov    cl,bl
c001ea45:	d3 e2                	shl    edx,cl
c001ea47:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ea4b:	89 fa                	mov    edx,edi
c001ea4d:	88 c1                	mov    cl,al
c001ea4f:	d3 ea                	shr    edx,cl
c001ea51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ea55:	09 d1                	or     ecx,edx
c001ea57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ea5b:	88 d9                	mov    cl,bl
c001ea5d:	d3 e7                	shl    edi,cl
c001ea5f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ea63:	89 f7                	mov    edi,esi
c001ea65:	88 c1                	mov    cl,al
c001ea67:	d3 ef                	shr    edi,cl
c001ea69:	88 d9                	mov    cl,bl
c001ea6b:	d3 e6                	shl    esi,cl
c001ea6d:	89 ea                	mov    edx,ebp
c001ea6f:	88 c1                	mov    cl,al
c001ea71:	d3 ea                	shr    edx,cl
c001ea73:	09 d6                	or     esi,edx
c001ea75:	89 f0                	mov    eax,esi
c001ea77:	89 fa                	mov    edx,edi
c001ea79:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ea7d:	89 d7                	mov    edi,edx
c001ea7f:	89 c6                	mov    esi,eax
c001ea81:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ea85:	39 d7                	cmp    edi,edx
c001ea87:	72 13                	jb     c001ea9c <__udivdi3+0xec>
c001ea89:	74 09                	je     c001ea94 <__udivdi3+0xe4>
c001ea8b:	89 f0                	mov    eax,esi
c001ea8d:	31 db                	xor    ebx,ebx
c001ea8f:	e9 43 ff ff ff       	jmp    c001e9d7 <__udivdi3+0x27>
c001ea94:	88 d9                	mov    cl,bl
c001ea96:	d3 e5                	shl    ebp,cl
c001ea98:	39 c5                	cmp    ebp,eax
c001ea9a:	73 ef                	jae    c001ea8b <__udivdi3+0xdb>
c001ea9c:	8d 46 ff             	lea    eax,[esi-0x1]
c001ea9f:	31 db                	xor    ebx,ebx
c001eaa1:	e9 31 ff ff ff       	jmp    c001e9d7 <__udivdi3+0x27>
c001eaa6:	66 90                	xchg   ax,ax
c001eaa8:	31 c0                	xor    eax,eax
c001eaaa:	e9 28 ff ff ff       	jmp    c001e9d7 <__udivdi3+0x27>
c001eaaf:	90                   	nop

c001eab0 <__umoddi3>:
c001eab0:	55                   	push   ebp
c001eab1:	57                   	push   edi
c001eab2:	56                   	push   esi
c001eab3:	53                   	push   ebx
c001eab4:	83 ec 1c             	sub    esp,0x1c
c001eab7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eabb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eabf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001eac3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eac7:	89 da                	mov    edx,ebx
c001eac9:	85 c0                	test   eax,eax
c001eacb:	75 37                	jne    c001eb04 <__umoddi3+0x54>
c001eacd:	39 df                	cmp    edi,ebx
c001eacf:	76 13                	jbe    c001eae4 <__umoddi3+0x34>
c001ead1:	89 f0                	mov    eax,esi
c001ead3:	f7 f7                	div    edi
c001ead5:	89 d0                	mov    eax,edx
c001ead7:	31 d2                	xor    edx,edx
c001ead9:	83 c4 1c             	add    esp,0x1c
c001eadc:	5b                   	pop    ebx
c001eadd:	5e                   	pop    esi
c001eade:	5f                   	pop    edi
c001eadf:	5d                   	pop    ebp
c001eae0:	c3                   	ret    
c001eae1:	8d 76 00             	lea    esi,[esi+0x0]
c001eae4:	89 fd                	mov    ebp,edi
c001eae6:	85 ff                	test   edi,edi
c001eae8:	75 0b                	jne    c001eaf5 <__umoddi3+0x45>
c001eaea:	b8 01 00 00 00       	mov    eax,0x1
c001eaef:	31 d2                	xor    edx,edx
c001eaf1:	f7 f7                	div    edi
c001eaf3:	89 c5                	mov    ebp,eax
c001eaf5:	89 d8                	mov    eax,ebx
c001eaf7:	31 d2                	xor    edx,edx
c001eaf9:	f7 f5                	div    ebp
c001eafb:	89 f0                	mov    eax,esi
c001eafd:	f7 f5                	div    ebp
c001eaff:	89 d0                	mov    eax,edx
c001eb01:	eb d4                	jmp    c001ead7 <__umoddi3+0x27>
c001eb03:	90                   	nop
c001eb04:	89 f1                	mov    ecx,esi
c001eb06:	39 d8                	cmp    eax,ebx
c001eb08:	76 0a                	jbe    c001eb14 <__umoddi3+0x64>
c001eb0a:	89 f0                	mov    eax,esi
c001eb0c:	83 c4 1c             	add    esp,0x1c
c001eb0f:	5b                   	pop    ebx
c001eb10:	5e                   	pop    esi
c001eb11:	5f                   	pop    edi
c001eb12:	5d                   	pop    ebp
c001eb13:	c3                   	ret    
c001eb14:	0f bd e8             	bsr    ebp,eax
c001eb17:	83 f5 1f             	xor    ebp,0x1f
c001eb1a:	75 1c                	jne    c001eb38 <__umoddi3+0x88>
c001eb1c:	39 d8                	cmp    eax,ebx
c001eb1e:	72 04                	jb     c001eb24 <__umoddi3+0x74>
c001eb20:	39 f7                	cmp    edi,esi
c001eb22:	77 08                	ja     c001eb2c <__umoddi3+0x7c>
c001eb24:	89 da                	mov    edx,ebx
c001eb26:	29 fe                	sub    esi,edi
c001eb28:	19 c2                	sbb    edx,eax
c001eb2a:	89 f1                	mov    ecx,esi
c001eb2c:	89 c8                	mov    eax,ecx
c001eb2e:	83 c4 1c             	add    esp,0x1c
c001eb31:	5b                   	pop    ebx
c001eb32:	5e                   	pop    esi
c001eb33:	5f                   	pop    edi
c001eb34:	5d                   	pop    ebp
c001eb35:	c3                   	ret    
c001eb36:	66 90                	xchg   ax,ax
c001eb38:	ba 20 00 00 00       	mov    edx,0x20
c001eb3d:	29 ea                	sub    edx,ebp
c001eb3f:	89 e9                	mov    ecx,ebp
c001eb41:	d3 e0                	shl    eax,cl
c001eb43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb47:	89 f8                	mov    eax,edi
c001eb49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001eb4d:	88 d1                	mov    cl,dl
c001eb4f:	d3 e8                	shr    eax,cl
c001eb51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eb55:	09 c1                	or     ecx,eax
c001eb57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eb5b:	89 e9                	mov    ecx,ebp
c001eb5d:	d3 e7                	shl    edi,cl
c001eb5f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001eb63:	89 d8                	mov    eax,ebx
c001eb65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb69:	88 d1                	mov    cl,dl
c001eb6b:	d3 e8                	shr    eax,cl
c001eb6d:	89 c7                	mov    edi,eax
c001eb6f:	89 e9                	mov    ecx,ebp
c001eb71:	d3 e3                	shl    ebx,cl
c001eb73:	89 f0                	mov    eax,esi
c001eb75:	88 d1                	mov    cl,dl
c001eb77:	d3 e8                	shr    eax,cl
c001eb79:	09 d8                	or     eax,ebx
c001eb7b:	89 e9                	mov    ecx,ebp
c001eb7d:	d3 e6                	shl    esi,cl
c001eb7f:	89 f3                	mov    ebx,esi
c001eb81:	89 fa                	mov    edx,edi
c001eb83:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001eb87:	89 d1                	mov    ecx,edx
c001eb89:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001eb8d:	89 c6                	mov    esi,eax
c001eb8f:	89 d7                	mov    edi,edx
c001eb91:	39 d1                	cmp    ecx,edx
c001eb93:	72 27                	jb     c001ebbc <__umoddi3+0x10c>
c001eb95:	74 21                	je     c001ebb8 <__umoddi3+0x108>
c001eb97:	89 ca                	mov    edx,ecx
c001eb99:	29 f3                	sub    ebx,esi
c001eb9b:	19 fa                	sbb    edx,edi
c001eb9d:	89 d0                	mov    eax,edx
c001eb9f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001eba3:	d3 e0                	shl    eax,cl
c001eba5:	89 e9                	mov    ecx,ebp
c001eba7:	d3 eb                	shr    ebx,cl
c001eba9:	09 d8                	or     eax,ebx
c001ebab:	d3 ea                	shr    edx,cl
c001ebad:	83 c4 1c             	add    esp,0x1c
c001ebb0:	5b                   	pop    ebx
c001ebb1:	5e                   	pop    esi
c001ebb2:	5f                   	pop    edi
c001ebb3:	5d                   	pop    ebp
c001ebb4:	c3                   	ret    
c001ebb5:	8d 76 00             	lea    esi,[esi+0x0]
c001ebb8:	39 c3                	cmp    ebx,eax
c001ebba:	73 db                	jae    c001eb97 <__umoddi3+0xe7>
c001ebbc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ebc0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001ebc4:	89 d7                	mov    edi,edx
c001ebc6:	89 c6                	mov    esi,eax
c001ebc8:	eb cd                	jmp    c001eb97 <__umoddi3+0xe7>

Disassembly of section .init:

c001ebca <_init>:
c001ebca:	55                   	push   ebp
c001ebcb:	89 e5                	mov    ebp,esp
c001ebcd:	e8 22 15 fe ff       	call   c00000f4 <frame_dummy>
c001ebd2:	e8 e5 fa ff ff       	call   c001e6bc <__do_global_ctors_aux>
c001ebd7:	5d                   	pop    ebp
c001ebd8:	c3                   	ret    

Disassembly of section .fini:

c001ebd9 <_fini>:
c001ebd9:	55                   	push   ebp
c001ebda:	89 e5                	mov    ebp,esp
c001ebdc:	e8 a3 14 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001ebe1:	5d                   	pop    ebp
c001ebe2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001ebe4 <Computer::~Computer()>:
c001ebe4:	83 ec 0c             	sub    esp,0xc
c001ebe7:	ba f4 fe 01 c0       	mov    edx,0xc001fef4
c001ebec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf0:	89 10                	mov    DWORD PTR [eax],edx
c001ebf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf6:	83 ec 0c             	sub    esp,0xc
c001ebf9:	50                   	push   eax
c001ebfa:	e8 77 d3 fe ff       	call   c000bf76 <Device::~Device()>
c001ebff:	83 c4 10             	add    esp,0x10
c001ec02:	90                   	nop
c001ec03:	83 c4 0c             	add    esp,0xc
c001ec06:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001ec08 <Computer::~Computer()>:
c001ec08:	83 ec 0c             	sub    esp,0xc
c001ec0b:	83 ec 0c             	sub    esp,0xc
c001ec0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec12:	e8 cd ff ff ff       	call   c001ebe4 <Computer::~Computer()>
c001ec17:	83 c4 10             	add    esp,0x10
c001ec1a:	83 ec 08             	sub    esp,0x8
c001ec1d:	68 70 01 00 00       	push   0x170
c001ec22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec26:	e8 13 bc fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001ec2b:	83 c4 10             	add    esp,0x10
c001ec2e:	83 c4 0c             	add    esp,0xc
c001ec31:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ec32 <idleCommon()>:
c001ec32:	83 ec 0c             	sub    esp,0xc
c001ec35:	fa                   	cli    
c001ec36:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001ec3c:	e8 2b 67 ff ff       	call   c001536c <schedule()>
c001ec41:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001ec46:	48                   	dec    eax
c001ec47:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001ec4c:	75 01                	jne    c001ec4f <idleCommon()+0x1d>
c001ec4e:	fb                   	sti    
c001ec4f:	83 c4 0c             	add    esp,0xc
c001ec52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ec54 <LinkedList<UnixFile>::~LinkedList()>:
c001ec54:	90                   	nop
c001ec55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ec56 <LinkedList<UnixFile>::LinkedList()>:
c001ec56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec6f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec96:	90                   	nop
c001ec97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ec98 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ec98:	83 ec 0c             	sub    esp,0xc
c001ec9b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eca0:	75 10                	jne    c001ecb2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001eca2:	83 ec 0c             	sub    esp,0xc
c001eca5:	68 08 01 02 c0       	push   0xc0020108
c001ecaa:	e8 8e 1e ff ff       	call   c0010b3d <KePanic(char const*)>
c001ecaf:	83 c4 10             	add    esp,0x10
c001ecb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecb8:	85 c0                	test   eax,eax
c001ecba:	74 34                	je     c001ecf0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ecbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecc3:	85 c0                	test   eax,eax
c001ecc5:	74 29                	je     c001ecf0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ecc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eccb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecd2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ecd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecdd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ece0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ece7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecee:	eb 65                	jmp    c001ed55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ecf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecf6:	85 c0                	test   eax,eax
c001ecf8:	75 4b                	jne    c001ed45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ecfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed01:	85 c0                	test   eax,eax
c001ed03:	75 40                	jne    c001ed45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ed05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed0d:	89 10                	mov    DWORD PTR [eax],edx
c001ed0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed2f:	85 c0                	test   eax,eax
c001ed31:	74 22                	je     c001ed55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ed33:	83 ec 0c             	sub    esp,0xc
c001ed36:	68 2a 01 02 c0       	push   0xc002012a
c001ed3b:	e8 fd 1d ff ff       	call   c0010b3d <KePanic(char const*)>
c001ed40:	83 c4 10             	add    esp,0x10
c001ed43:	eb 10                	jmp    c001ed55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ed45:	83 ec 0c             	sub    esp,0xc
c001ed48:	68 34 01 02 c0       	push   0xc0020134
c001ed4d:	e8 eb 1d ff ff       	call   c0010b3d <KePanic(char const*)>
c001ed52:	83 c4 10             	add    esp,0x10
c001ed55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed5c:	8d 50 01             	lea    edx,[eax+0x1]
c001ed5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed63:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed66:	90                   	nop
c001ed67:	83 c4 0c             	add    esp,0xc
c001ed6a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ed6c <LinkedList<UnixFile>::getFirstElement()>:
c001ed6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed70:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ed74 <LinkedList<UnixFile>::removeFirst()>:
c001ed74:	83 ec 0c             	sub    esp,0xc
c001ed77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed7d:	85 c0                	test   eax,eax
c001ed7f:	75 12                	jne    c001ed93 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ed81:	83 ec 0c             	sub    esp,0xc
c001ed84:	68 40 01 02 c0       	push   0xc0020140
c001ed89:	e8 af 1d ff ff       	call   c0010b3d <KePanic(char const*)>
c001ed8e:	83 c4 10             	add    esp,0x10
c001ed91:	eb 7e                	jmp    c001ee11 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ed93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed9d:	85 c0                	test   eax,eax
c001ed9f:	74 10                	je     c001edb1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001eda1:	83 ec 0c             	sub    esp,0xc
c001eda4:	68 8b 01 02 c0       	push   0xc002018b
c001eda9:	e8 8f 1d ff ff       	call   c0010b3d <KePanic(char const*)>
c001edae:	83 c4 10             	add    esp,0x10
c001edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edba:	85 c0                	test   eax,eax
c001edbc:	75 33                	jne    c001edf1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001edbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001edc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001edd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edda:	83 f8 01             	cmp    eax,0x1
c001eddd:	74 21                	je     c001ee00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001eddf:	83 ec 0c             	sub    esp,0xc
c001ede2:	68 64 01 02 c0       	push   0xc0020164
c001ede7:	e8 51 1d ff ff       	call   c0010b3d <KePanic(char const*)>
c001edec:	83 c4 10             	add    esp,0x10
c001edef:	eb 0f                	jmp    c001ee00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001edf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001edf7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001edfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edfe:	89 10                	mov    DWORD PTR [eax],edx
c001ee00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee07:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee11:	83 c4 0c             	add    esp,0xc
c001ee14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ee16 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ee16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee1d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ee1e <DriverlessDevice::~DriverlessDevice()>:
c001ee1e:	ba bc 0b 02 c0       	mov    edx,0xc0020bbc
c001ee23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee27:	89 10                	mov    DWORD PTR [eax],edx
c001ee29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee2d:	50                   	push   eax
c001ee2e:	e8 43 d1 fe ff       	call   c000bf76 <Device::~Device()>
c001ee33:	83 c4 04             	add    esp,0x4
c001ee36:	90                   	nop
c001ee37:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ee38 <DriverlessDevice::~DriverlessDevice()>:
c001ee38:	83 ec 0c             	sub    esp,0xc
c001ee3b:	83 ec 0c             	sub    esp,0xc
c001ee3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee42:	e8 d7 ff ff ff       	call   c001ee1e <DriverlessDevice::~DriverlessDevice()>
c001ee47:	83 c4 10             	add    esp,0x10
c001ee4a:	83 ec 08             	sub    esp,0x8
c001ee4d:	68 58 01 00 00       	push   0x158
c001ee52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee56:	e8 e3 b9 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001ee5b:	83 c4 10             	add    esp,0x10
c001ee5e:	83 c4 0c             	add    esp,0xc
c001ee61:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ee62 <LinkedList<Device>::addElement(Device*)>:
c001ee62:	83 ec 0c             	sub    esp,0xc
c001ee65:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ee6a:	75 10                	jne    c001ee7c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ee6c:	83 ec 0c             	sub    esp,0xc
c001ee6f:	68 08 01 02 c0       	push   0xc0020108
c001ee74:	e8 c4 1c ff ff       	call   c0010b3d <KePanic(char const*)>
c001ee79:	83 c4 10             	add    esp,0x10
c001ee7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee82:	85 c0                	test   eax,eax
c001ee84:	74 3a                	je     c001eec0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ee86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee8d:	85 c0                	test   eax,eax
c001ee8f:	74 2f                	je     c001eec0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ee91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee9c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eeaa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eeb4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eebe:	eb 68                	jmp    c001ef28 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eec6:	85 c0                	test   eax,eax
c001eec8:	75 4e                	jne    c001ef18 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eece:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eed1:	85 c0                	test   eax,eax
c001eed3:	75 43                	jne    c001ef18 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eedd:	89 10                	mov    DWORD PTR [eax],edx
c001eedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eee7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eef1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef02:	85 c0                	test   eax,eax
c001ef04:	74 22                	je     c001ef28 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef06:	83 ec 0c             	sub    esp,0xc
c001ef09:	68 2a 01 02 c0       	push   0xc002012a
c001ef0e:	e8 2a 1c ff ff       	call   c0010b3d <KePanic(char const*)>
c001ef13:	83 c4 10             	add    esp,0x10
c001ef16:	eb 10                	jmp    c001ef28 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef18:	83 ec 0c             	sub    esp,0xc
c001ef1b:	68 34 01 02 c0       	push   0xc0020134
c001ef20:	e8 18 1c ff ff       	call   c0010b3d <KePanic(char const*)>
c001ef25:	83 c4 10             	add    esp,0x10
c001ef28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef2f:	8d 50 01             	lea    edx,[eax+0x1]
c001ef32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef39:	90                   	nop
c001ef3a:	83 c4 0c             	add    esp,0xc
c001ef3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ef3e <LinkedList<Device>::LinkedList()>:
c001ef3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef7e:	90                   	nop
c001ef7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ef80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ef80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef86:	85 c0                	test   eax,eax
c001ef88:	75 0e                	jne    c001ef98 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ef8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef91:	85 c0                	test   eax,eax
c001ef93:	75 03                	jne    c001ef98 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ef95:	b0 01                	mov    al,0x1
c001ef97:	c3                   	ret    
c001ef98:	b0 00                	mov    al,0x0
c001ef9a:	90                   	nop
c001ef9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ef9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ef9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001efa2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001efa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001efa4:	83 ec 0c             	sub    esp,0xc
c001efa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efab:	8b 00                	mov    eax,DWORD PTR [eax]
c001efad:	85 c0                	test   eax,eax
c001efaf:	75 17                	jne    c001efc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001efb1:	83 ec 0c             	sub    esp,0xc
c001efb4:	68 40 01 02 c0       	push   0xc0020140
c001efb9:	e8 7f 1b ff ff       	call   c0010b3d <KePanic(char const*)>
c001efbe:	83 c4 10             	add    esp,0x10
c001efc1:	e9 96 00 00 00       	jmp    c001f05c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001efc6:	66 90                	xchg   ax,ax
c001efc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001efcf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001efd2:	85 c0                	test   eax,eax
c001efd4:	0f 95 c0             	setne  al
c001efd7:	0f b6 c0             	movzx  eax,al
c001efda:	85 c0                	test   eax,eax
c001efdc:	74 12                	je     c001eff0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001efde:	83 ec 0c             	sub    esp,0xc
c001efe1:	68 8b 01 02 c0       	push   0xc002018b
c001efe6:	e8 52 1b ff ff       	call   c0010b3d <KePanic(char const*)>
c001efeb:	83 c4 10             	add    esp,0x10
c001efee:	66 90                	xchg   ax,ax
c001eff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eff6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eff9:	85 c0                	test   eax,eax
c001effb:	0f 94 c0             	sete   al
c001effe:	0f b6 c0             	movzx  eax,al
c001f001:	85 c0                	test   eax,eax
c001f003:	74 33                	je     c001f038 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f009:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f013:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f021:	83 f8 01             	cmp    eax,0x1
c001f024:	74 22                	je     c001f048 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f026:	83 ec 0c             	sub    esp,0xc
c001f029:	68 64 01 02 c0       	push   0xc0020164
c001f02e:	e8 0a 1b ff ff       	call   c0010b3d <KePanic(char const*)>
c001f033:	83 c4 10             	add    esp,0x10
c001f036:	eb 10                	jmp    c001f048 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f03e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f045:	89 10                	mov    DWORD PTR [eax],edx
c001f047:	90                   	nop
c001f048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f04f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f056:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f059:	8d 76 00             	lea    esi,[esi+0x0]
c001f05c:	83 c4 0c             	add    esp,0xc
c001f05f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f060 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f060:	83 ec 0c             	sub    esp,0xc
c001f063:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f068:	75 12                	jne    c001f07c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f06a:	83 ec 0c             	sub    esp,0xc
c001f06d:	68 08 01 02 c0       	push   0xc0020108
c001f072:	e8 c6 1a ff ff       	call   c0010b3d <KePanic(char const*)>
c001f077:	83 c4 10             	add    esp,0x10
c001f07a:	66 90                	xchg   ax,ax
c001f07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f080:	8b 00                	mov    eax,DWORD PTR [eax]
c001f082:	85 c0                	test   eax,eax
c001f084:	74 36                	je     c001f0bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f08d:	85 c0                	test   eax,eax
c001f08f:	74 2b                	je     c001f0bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f095:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f098:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f09c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0b1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f0b8:	eb 6a                	jmp    c001f124 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f0ba:	66 90                	xchg   ax,ax
c001f0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0c2:	85 c0                	test   eax,eax
c001f0c4:	75 4e                	jne    c001f114 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0cd:	85 c0                	test   eax,eax
c001f0cf:	75 43                	jne    c001f114 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0d9:	89 10                	mov    DWORD PTR [eax],edx
c001f0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0ed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f0f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f0fb:	85 c0                	test   eax,eax
c001f0fd:	74 25                	je     c001f124 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f0ff:	83 ec 0c             	sub    esp,0xc
c001f102:	68 2a 01 02 c0       	push   0xc002012a
c001f107:	e8 31 1a ff ff       	call   c0010b3d <KePanic(char const*)>
c001f10c:	83 c4 10             	add    esp,0x10
c001f10f:	eb 13                	jmp    c001f124 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f111:	8d 76 00             	lea    esi,[esi+0x0]
c001f114:	83 ec 0c             	sub    esp,0xc
c001f117:	68 34 01 02 c0       	push   0xc0020134
c001f11c:	e8 1c 1a ff ff       	call   c0010b3d <KePanic(char const*)>
c001f121:	83 c4 10             	add    esp,0x10
c001f124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f128:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f12b:	8d 50 01             	lea    edx,[eax+0x1]
c001f12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f132:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f135:	90                   	nop
c001f136:	83 c4 0c             	add    esp,0xc
c001f139:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f13c <ACPI::~ACPI()>:
c001f13c:	83 ec 0c             	sub    esp,0xc
c001f13f:	ba c0 11 02 c0       	mov    edx,0xc00211c0
c001f144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f148:	89 10                	mov    DWORD PTR [eax],edx
c001f14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14e:	83 ec 0c             	sub    esp,0xc
c001f151:	50                   	push   eax
c001f152:	e8 1f ce fe ff       	call   c000bf76 <Device::~Device()>
c001f157:	83 c4 10             	add    esp,0x10
c001f15a:	90                   	nop
c001f15b:	83 c4 0c             	add    esp,0xc
c001f15e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f160 <ACPI::~ACPI()>:
c001f160:	83 ec 0c             	sub    esp,0xc
c001f163:	83 ec 0c             	sub    esp,0xc
c001f166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f16a:	e8 cd ff ff ff       	call   c001f13c <ACPI::~ACPI()>
c001f16f:	83 c4 10             	add    esp,0x10
c001f172:	83 ec 08             	sub    esp,0x8
c001f175:	68 64 12 00 00       	push   0x1264
c001f17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f17e:	e8 bb b6 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001f183:	83 c4 10             	add    esp,0x10
c001f186:	83 c4 0c             	add    esp,0xc
c001f189:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f18c <LinkedList<Device>::~LinkedList()>:
c001f18c:	90                   	nop
c001f18d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f190 <LinkedList<Device>::isEmpty()>:
c001f190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f194:	8b 00                	mov    eax,DWORD PTR [eax]
c001f196:	85 c0                	test   eax,eax
c001f198:	75 0e                	jne    c001f1a8 <LinkedList<Device>::isEmpty()+0x18>
c001f19a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f19e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f1a1:	85 c0                	test   eax,eax
c001f1a3:	75 03                	jne    c001f1a8 <LinkedList<Device>::isEmpty()+0x18>
c001f1a5:	b0 01                	mov    al,0x1
c001f1a7:	c3                   	ret    
c001f1a8:	b0 00                	mov    al,0x0
c001f1aa:	90                   	nop
c001f1ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f1ac <LinkedList<Device>::getFirstElement()>:
c001f1ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f1b4 <LinkedList<Device>::removeFirst()>:
c001f1b4:	83 ec 0c             	sub    esp,0xc
c001f1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1bd:	85 c0                	test   eax,eax
c001f1bf:	75 17                	jne    c001f1d8 <LinkedList<Device>::removeFirst()+0x24>
c001f1c1:	83 ec 0c             	sub    esp,0xc
c001f1c4:	68 40 01 02 c0       	push   0xc0020140
c001f1c9:	e8 6f 19 ff ff       	call   c0010b3d <KePanic(char const*)>
c001f1ce:	83 c4 10             	add    esp,0x10
c001f1d1:	e9 92 00 00 00       	jmp    c001f268 <LinkedList<Device>::removeFirst()+0xb4>
c001f1d6:	66 90                	xchg   ax,ax
c001f1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f1df:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f1e5:	85 c0                	test   eax,eax
c001f1e7:	74 13                	je     c001f1fc <LinkedList<Device>::removeFirst()+0x48>
c001f1e9:	83 ec 0c             	sub    esp,0xc
c001f1ec:	68 8b 01 02 c0       	push   0xc002018b
c001f1f1:	e8 47 19 ff ff       	call   c0010b3d <KePanic(char const*)>
c001f1f6:	83 c4 10             	add    esp,0x10
c001f1f9:	8d 76 00             	lea    esi,[esi+0x0]
c001f1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f200:	8b 00                	mov    eax,DWORD PTR [eax]
c001f202:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f208:	85 c0                	test   eax,eax
c001f20a:	75 34                	jne    c001f240 <LinkedList<Device>::removeFirst()+0x8c>
c001f20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f210:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f21a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f225:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f228:	83 f8 01             	cmp    eax,0x1
c001f22b:	74 27                	je     c001f254 <LinkedList<Device>::removeFirst()+0xa0>
c001f22d:	83 ec 0c             	sub    esp,0xc
c001f230:	68 64 01 02 c0       	push   0xc0020164
c001f235:	e8 03 19 ff ff       	call   c0010b3d <KePanic(char const*)>
c001f23a:	83 c4 10             	add    esp,0x10
c001f23d:	eb 15                	jmp    c001f254 <LinkedList<Device>::removeFirst()+0xa0>
c001f23f:	90                   	nop
c001f240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f244:	8b 00                	mov    eax,DWORD PTR [eax]
c001f246:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f250:	89 10                	mov    DWORD PTR [eax],edx
c001f252:	66 90                	xchg   ax,ax
c001f254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f258:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f25b:	8d 50 ff             	lea    edx,[eax-0x1]
c001f25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f262:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f265:	8d 76 00             	lea    esi,[esi+0x0]
c001f268:	83 c4 0c             	add    esp,0xc
c001f26b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f26c <CPU::~CPU()>:
c001f26c:	83 ec 0c             	sub    esp,0xc
c001f26f:	ba 68 13 02 c0       	mov    edx,0xc0021368
c001f274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f278:	89 10                	mov    DWORD PTR [eax],edx
c001f27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27e:	83 ec 0c             	sub    esp,0xc
c001f281:	50                   	push   eax
c001f282:	e8 ef cc fe ff       	call   c000bf76 <Device::~Device()>
c001f287:	83 c4 10             	add    esp,0x10
c001f28a:	90                   	nop
c001f28b:	83 c4 0c             	add    esp,0xc
c001f28e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f290 <CPU::~CPU()>:
c001f290:	83 ec 0c             	sub    esp,0xc
c001f293:	83 ec 0c             	sub    esp,0xc
c001f296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f29a:	e8 cd ff ff ff       	call   c001f26c <CPU::~CPU()>
c001f29f:	83 c4 10             	add    esp,0x10
c001f2a2:	83 ec 08             	sub    esp,0x8
c001f2a5:	68 94 11 00 00       	push   0x1194
c001f2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ae:	e8 8b b5 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001f2b3:	83 c4 10             	add    esp,0x10
c001f2b6:	83 c4 0c             	add    esp,0xc
c001f2b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f2bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f2bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f2c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f2c4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f2c4:	90                   	nop
c001f2c5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f2c8 <ThreadControlBlock::ThreadControlBlock()>:
c001f2c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2cc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f2d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2d7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f2de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2e2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f2e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2ed:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001f2f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2f8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001f2ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f303:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001f307:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f30b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001f30f:	90                   	nop
c001f310:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f314 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f318:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f322:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f329:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f32d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f33e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f342:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f34d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f354:	90                   	nop
c001f355:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f356 <PCI::~PCI()>:
c001f356:	83 ec 0c             	sub    esp,0xc
c001f359:	ba 34 22 02 c0       	mov    edx,0xc0022234
c001f35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f362:	89 10                	mov    DWORD PTR [eax],edx
c001f364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f368:	83 ec 0c             	sub    esp,0xc
c001f36b:	50                   	push   eax
c001f36c:	e8 97 c6 fe ff       	call   c000ba08 <Bus::~Bus()>
c001f371:	83 c4 10             	add    esp,0x10
c001f374:	90                   	nop
c001f375:	83 c4 0c             	add    esp,0xc
c001f378:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f37a <PCI::~PCI()>:
c001f37a:	83 ec 0c             	sub    esp,0xc
c001f37d:	83 ec 0c             	sub    esp,0xc
c001f380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f384:	e8 cd ff ff ff       	call   c001f356 <PCI::~PCI()>
c001f389:	83 c4 10             	add    esp,0x10
c001f38c:	83 ec 08             	sub    esp,0x8
c001f38f:	68 5c 01 00 00       	push   0x15c
c001f394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f398:	e8 a1 b4 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001f39d:	83 c4 10             	add    esp,0x10
c001f3a0:	83 c4 0c             	add    esp,0xc
c001f3a3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f3a4 <IDE::~IDE()>:
c001f3a4:	83 ec 0c             	sub    esp,0xc
c001f3a7:	ba e8 22 02 c0       	mov    edx,0xc00222e8
c001f3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b0:	89 10                	mov    DWORD PTR [eax],edx
c001f3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b6:	83 ec 0c             	sub    esp,0xc
c001f3b9:	50                   	push   eax
c001f3ba:	e8 31 d0 fe ff       	call   c000c3f0 <HardDiskController::~HardDiskController()>
c001f3bf:	83 c4 10             	add    esp,0x10
c001f3c2:	90                   	nop
c001f3c3:	83 c4 0c             	add    esp,0xc
c001f3c6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f3c8 <IDE::~IDE()>:
c001f3c8:	83 ec 0c             	sub    esp,0xc
c001f3cb:	83 ec 0c             	sub    esp,0xc
c001f3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3d2:	e8 cd ff ff ff       	call   c001f3a4 <IDE::~IDE()>
c001f3d7:	83 c4 10             	add    esp,0x10
c001f3da:	83 ec 08             	sub    esp,0x8
c001f3dd:	68 70 02 00 00       	push   0x270
c001f3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e6:	e8 53 b4 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001f3eb:	83 c4 10             	add    esp,0x10
c001f3ee:	83 c4 0c             	add    esp,0xc
c001f3f1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f3f2 <SATABus::~SATABus()>:
c001f3f2:	83 ec 0c             	sub    esp,0xc
c001f3f5:	ba 38 23 02 c0       	mov    edx,0xc0022338
c001f3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3fe:	89 10                	mov    DWORD PTR [eax],edx
c001f400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f404:	83 ec 0c             	sub    esp,0xc
c001f407:	50                   	push   eax
c001f408:	e8 e3 cf fe ff       	call   c000c3f0 <HardDiskController::~HardDiskController()>
c001f40d:	83 c4 10             	add    esp,0x10
c001f410:	90                   	nop
c001f411:	83 c4 0c             	add    esp,0xc
c001f414:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f416 <SATABus::~SATABus()>:
c001f416:	83 ec 0c             	sub    esp,0xc
c001f419:	83 ec 0c             	sub    esp,0xc
c001f41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f420:	e8 cd ff ff ff       	call   c001f3f2 <SATABus::~SATABus()>
c001f425:	83 c4 10             	add    esp,0x10
c001f428:	83 ec 08             	sub    esp,0x8
c001f42b:	68 64 01 00 00       	push   0x164
c001f430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f434:	e8 05 b4 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001f439:	83 c4 10             	add    esp,0x10
c001f43c:	83 c4 0c             	add    esp,0xc
c001f43f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f440 <ATA::~ATA()>:
c001f440:	83 ec 0c             	sub    esp,0xc
c001f443:	ba 78 23 02 c0       	mov    edx,0xc0022378
c001f448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f44c:	89 10                	mov    DWORD PTR [eax],edx
c001f44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f452:	83 ec 0c             	sub    esp,0xc
c001f455:	50                   	push   eax
c001f456:	e8 77 d0 fe ff       	call   c000c4d2 <PhysicalDisk::~PhysicalDisk()>
c001f45b:	83 c4 10             	add    esp,0x10
c001f45e:	90                   	nop
c001f45f:	83 c4 0c             	add    esp,0xc
c001f462:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f464 <ATA::~ATA()>:
c001f464:	83 ec 0c             	sub    esp,0xc
c001f467:	83 ec 0c             	sub    esp,0xc
c001f46a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f46e:	e8 cd ff ff ff       	call   c001f440 <ATA::~ATA()>
c001f473:	83 c4 10             	add    esp,0x10
c001f476:	83 ec 08             	sub    esp,0x8
c001f479:	68 7c 01 00 00       	push   0x17c
c001f47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f482:	e8 b7 b3 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001f487:	83 c4 10             	add    esp,0x10
c001f48a:	83 c4 0c             	add    esp,0xc
c001f48d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f48e <ATAPI::~ATAPI()>:
c001f48e:	83 ec 0c             	sub    esp,0xc
c001f491:	ba c0 23 02 c0       	mov    edx,0xc00223c0
c001f496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f49a:	89 10                	mov    DWORD PTR [eax],edx
c001f49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a0:	83 ec 0c             	sub    esp,0xc
c001f4a3:	50                   	push   eax
c001f4a4:	e8 29 d0 fe ff       	call   c000c4d2 <PhysicalDisk::~PhysicalDisk()>
c001f4a9:	83 c4 10             	add    esp,0x10
c001f4ac:	90                   	nop
c001f4ad:	83 c4 0c             	add    esp,0xc
c001f4b0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f4b2 <ATAPI::~ATAPI()>:
c001f4b2:	83 ec 0c             	sub    esp,0xc
c001f4b5:	83 ec 0c             	sub    esp,0xc
c001f4b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4bc:	e8 cd ff ff ff       	call   c001f48e <ATAPI::~ATAPI()>
c001f4c1:	83 c4 10             	add    esp,0x10
c001f4c4:	83 ec 08             	sub    esp,0x8
c001f4c7:	68 84 01 00 00       	push   0x184
c001f4cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4d0:	e8 69 b3 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001f4d5:	83 c4 10             	add    esp,0x10
c001f4d8:	83 c4 0c             	add    esp,0xc
c001f4db:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f4dc <SATA::~SATA()>:
c001f4dc:	83 ec 0c             	sub    esp,0xc
c001f4df:	ba 74 24 02 c0       	mov    edx,0xc0022474
c001f4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e8:	89 10                	mov    DWORD PTR [eax],edx
c001f4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ee:	83 ec 0c             	sub    esp,0xc
c001f4f1:	50                   	push   eax
c001f4f2:	e8 db cf fe ff       	call   c000c4d2 <PhysicalDisk::~PhysicalDisk()>
c001f4f7:	83 c4 10             	add    esp,0x10
c001f4fa:	90                   	nop
c001f4fb:	83 c4 0c             	add    esp,0xc
c001f4fe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f500 <SATA::~SATA()>:
c001f500:	83 ec 0c             	sub    esp,0xc
c001f503:	83 ec 0c             	sub    esp,0xc
c001f506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f50a:	e8 cd ff ff ff       	call   c001f4dc <SATA::~SATA()>
c001f50f:	83 c4 10             	add    esp,0x10
c001f512:	83 ec 08             	sub    esp,0x8
c001f515:	68 7c 01 00 00       	push   0x17c
c001f51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f51e:	e8 1b b3 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001f523:	83 c4 10             	add    esp,0x10
c001f526:	83 c4 0c             	add    esp,0xc
c001f529:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f52a <SATAPI::~SATAPI()>:
c001f52a:	83 ec 0c             	sub    esp,0xc
c001f52d:	ba 98 25 02 c0       	mov    edx,0xc0022598
c001f532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f536:	89 10                	mov    DWORD PTR [eax],edx
c001f538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f53c:	83 ec 0c             	sub    esp,0xc
c001f53f:	50                   	push   eax
c001f540:	e8 8d cf fe ff       	call   c000c4d2 <PhysicalDisk::~PhysicalDisk()>
c001f545:	83 c4 10             	add    esp,0x10
c001f548:	90                   	nop
c001f549:	83 c4 0c             	add    esp,0xc
c001f54c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f54e <SATAPI::~SATAPI()>:
c001f54e:	83 ec 0c             	sub    esp,0xc
c001f551:	83 ec 0c             	sub    esp,0xc
c001f554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f558:	e8 cd ff ff ff       	call   c001f52a <SATAPI::~SATAPI()>
c001f55d:	83 c4 10             	add    esp,0x10
c001f560:	83 ec 08             	sub    esp,0x8
c001f563:	68 84 01 00 00       	push   0x184
c001f568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f56c:	e8 cd b2 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001f571:	83 c4 10             	add    esp,0x10
c001f574:	83 c4 0c             	add    esp,0xc
c001f577:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f578 <IOAPIC::~IOAPIC()>:
c001f578:	83 ec 0c             	sub    esp,0xc
c001f57b:	ba d8 25 02 c0       	mov    edx,0xc00225d8
c001f580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f584:	89 10                	mov    DWORD PTR [eax],edx
c001f586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58a:	83 ec 0c             	sub    esp,0xc
c001f58d:	50                   	push   eax
c001f58e:	e8 e3 c9 fe ff       	call   c000bf76 <Device::~Device()>
c001f593:	83 c4 10             	add    esp,0x10
c001f596:	90                   	nop
c001f597:	83 c4 0c             	add    esp,0xc
c001f59a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f59c <IOAPIC::~IOAPIC()>:
c001f59c:	83 ec 0c             	sub    esp,0xc
c001f59f:	83 ec 0c             	sub    esp,0xc
c001f5a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5a6:	e8 cd ff ff ff       	call   c001f578 <IOAPIC::~IOAPIC()>
c001f5ab:	83 c4 10             	add    esp,0x10
c001f5ae:	83 ec 08             	sub    esp,0x8
c001f5b1:	68 68 01 00 00       	push   0x168
c001f5b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5ba:	e8 7f b2 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001f5bf:	83 c4 10             	add    esp,0x10
c001f5c2:	83 c4 0c             	add    esp,0xc
c001f5c5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f5c8 <APICTimer::~APICTimer()>:
c001f5c8:	83 ec 0c             	sub    esp,0xc
c001f5cb:	ba 20 26 02 c0       	mov    edx,0xc0022620
c001f5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d4:	89 10                	mov    DWORD PTR [eax],edx
c001f5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5da:	83 ec 0c             	sub    esp,0xc
c001f5dd:	50                   	push   eax
c001f5de:	e8 69 e4 fe ff       	call   c000da4c <Timer::~Timer()>
c001f5e3:	83 c4 10             	add    esp,0x10
c001f5e6:	90                   	nop
c001f5e7:	83 c4 0c             	add    esp,0xc
c001f5ea:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f5ec <APICTimer::~APICTimer()>:
c001f5ec:	83 ec 0c             	sub    esp,0xc
c001f5ef:	83 ec 0c             	sub    esp,0xc
c001f5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5f6:	e8 cd ff ff ff       	call   c001f5c8 <APICTimer::~APICTimer()>
c001f5fb:	83 c4 10             	add    esp,0x10
c001f5fe:	83 ec 08             	sub    esp,0x8
c001f601:	68 60 01 00 00       	push   0x160
c001f606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f60a:	e8 2f b2 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001f60f:	83 c4 10             	add    esp,0x10
c001f612:	83 c4 0c             	add    esp,0xc
c001f615:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f618 <PIT::~PIT()>:
c001f618:	83 ec 0c             	sub    esp,0xc
c001f61b:	ba 70 26 02 c0       	mov    edx,0xc0022670
c001f620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f624:	89 10                	mov    DWORD PTR [eax],edx
c001f626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f62a:	83 ec 0c             	sub    esp,0xc
c001f62d:	50                   	push   eax
c001f62e:	e8 19 e4 fe ff       	call   c000da4c <Timer::~Timer()>
c001f633:	83 c4 10             	add    esp,0x10
c001f636:	90                   	nop
c001f637:	83 c4 0c             	add    esp,0xc
c001f63a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f63c <PIT::~PIT()>:
c001f63c:	83 ec 0c             	sub    esp,0xc
c001f63f:	83 ec 0c             	sub    esp,0xc
c001f642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f646:	e8 cd ff ff ff       	call   c001f618 <PIT::~PIT()>
c001f64b:	83 c4 10             	add    esp,0x10
c001f64e:	83 ec 08             	sub    esp,0x8
c001f651:	68 5c 01 00 00       	push   0x15c
c001f656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f65a:	e8 df b1 fe ff       	call   c000a83e <operator delete(void*, unsigned long)>
c001f65f:	83 c4 10             	add    esp,0x10
c001f662:	83 c4 0c             	add    esp,0xc
c001f665:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 59 14 02 c0       	mov    esi,0xc0021459
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 75 14 02 c0       	mov    esi,0xc0021475
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
